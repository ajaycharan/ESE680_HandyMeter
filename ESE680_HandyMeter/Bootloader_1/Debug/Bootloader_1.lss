
Bootloader_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00011dd4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          000002fc  00011dd4  00011dd4  00021dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  000120d0  000120d0  000220d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000184  20000000  000120dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000008f8  20000184  00012260  00030184  2**2
                  ALLOC
  5 .stack        00002004  20000a7c  00012b58  00030184  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000301ae  2**0
                  CONTENTS, READONLY
  8 .debug_info   000535ef  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000067fa  00000000  00000000  000837f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007800  00000000  00000000  00089ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001520  00000000  00000000  000917f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000012d0  00000000  00000000  00092d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000dc0c  00000000  00000000  00093fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000bb3f  00000000  00000000  000a1bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000050c8  00000000  00000000  000ad72c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	80 2a 00 20 8d d9 00 00 9d da 00 00 9d da 00 00     .*. ............
	...
      2c:	9d da 00 00 00 00 00 00 00 00 00 00 9d da 00 00     ................
      3c:	9d da 00 00 9d da 00 00 71 20 00 00 9d da 00 00     ........q ......
      4c:	09 57 00 00 f1 6d 00 00 9d da 00 00 9d da 00 00     .W...m..........
      5c:	81 bf 00 00 9d da 00 00 45 6c 00 00 5d 6c 00 00     ........El..]l..
      6c:	75 6c 00 00 8d 6c 00 00 a5 6c 00 00 bd 6c 00 00     ul...l...l...l..
      7c:	9d da 00 00 9d da 00 00 9d da 00 00 9d da 00 00     ................
      8c:	9d da 00 00 9d da 00 00 00 00 00 00 00 00 00 00     ................
      9c:	9d da 00 00 9d da 00 00 9d da 00 00 9d da 00 00     ................
      ac:	9d da 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000184 	.word	0x20000184
      d4:	00000000 	.word	0x00000000
      d8:	00011dd4 	.word	0x00011dd4

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000188 	.word	0x20000188
     108:	00011dd4 	.word	0x00011dd4
     10c:	00011dd4 	.word	0x00011dd4
     110:	00000000 	.word	0x00000000

00000114 <SDMMC_UNSTUFF_BITS>:
	}
	// Ask the card to publish a new relative address (RCA).
	if (!driver_send_cmd(SD_CMD3_SEND_RELATIVE_ADDR, 0)) {
		return false;
	}
	sd_mmc_card->rca = (driver_get_response() >> 16) & 0xFFFF;
     114:	b590      	push	{r4, r7, lr}
     116:	b087      	sub	sp, #28
     118:	af00      	add	r7, sp, #0
     11a:	60f8      	str	r0, [r7, #12]
     11c:	000c      	movs	r4, r1
     11e:	0010      	movs	r0, r2
     120:	0019      	movs	r1, r3
     122:	230a      	movs	r3, #10
     124:	18fb      	adds	r3, r7, r3

	// SD MEMORY, Get the Card-Specific Data
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     126:	1c22      	adds	r2, r4, #0
     128:	801a      	strh	r2, [r3, #0]
     12a:	2308      	movs	r3, #8
     12c:	18fb      	adds	r3, r7, r3
     12e:	1c02      	adds	r2, r0, #0
     130:	801a      	strh	r2, [r3, #0]
     132:	1dfb      	adds	r3, r7, #7
     134:	1c0a      	adds	r2, r1, #0
		if (!sd_mmc_cmd9_mci()) {
     136:	701a      	strb	r2, [r3, #0]
     138:	230a      	movs	r3, #10
     13a:	18fb      	adds	r3, r7, r3
     13c:	881a      	ldrh	r2, [r3, #0]
     13e:	2308      	movs	r3, #8
     140:	18fb      	adds	r3, r7, r3
     142:	881b      	ldrh	r3, [r3, #0]
     144:	1ad3      	subs	r3, r2, r3
     146:	3307      	adds	r3, #7
     148:	2b00      	cmp	r3, #0
			return false;
     14a:	da00      	bge.n	14e <SDMMC_UNSTUFF_BITS+0x3a>
     14c:	3307      	adds	r3, #7
		}
		sd_decode_csd();
     14e:	10db      	asrs	r3, r3, #3
     150:	3b01      	subs	r3, #1
     152:	68fa      	ldr	r2, [r7, #12]
	}
	// Select the and put it into Transfer Mode
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
			(uint32_t)sd_mmc_card->rca << 16)) {
     154:	18d3      	adds	r3, r2, r3
     156:	781b      	ldrb	r3, [r3, #0]
     158:	0019      	movs	r1, r3
     15a:	2308      	movs	r3, #8
	if (!driver_send_cmd(SDMMC_CMD7_SELECT_CARD_CMD,
     15c:	18fb      	adds	r3, r7, r3
     15e:	881b      	ldrh	r3, [r3, #0]
     160:	2207      	movs	r2, #7
     162:	4013      	ands	r3, r2
     164:	4119      	asrs	r1, r3
     166:	000b      	movs	r3, r1
     168:	617b      	str	r3, [r7, #20]
     16a:	2308      	movs	r3, #8
     16c:	18fb      	adds	r3, r7, r3
     16e:	881b      	ldrh	r3, [r3, #0]
     170:	2207      	movs	r2, #7
     172:	401a      	ands	r2, r3
     174:	1dfb      	adds	r3, r7, #7
     176:	781b      	ldrb	r3, [r3, #0]
		return false;
     178:	18d3      	adds	r3, r2, r3
     17a:	2b08      	cmp	r3, #8
	}
	// SD MEMORY, Read the SCR to get card version
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     17c:	dd1c      	ble.n	1b8 <SDMMC_UNSTUFF_BITS+0xa4>
     17e:	230a      	movs	r3, #10
     180:	18fb      	adds	r3, r7, r3
     182:	881a      	ldrh	r2, [r3, #0]
     184:	2308      	movs	r3, #8
     186:	18fb      	adds	r3, r7, r3
     188:	881b      	ldrh	r3, [r3, #0]
     18a:	1ad3      	subs	r3, r2, r3
		if (!sd_acmd51()) {
     18c:	3307      	adds	r3, #7
     18e:	2b00      	cmp	r3, #0
     190:	da00      	bge.n	194 <SDMMC_UNSTUFF_BITS+0x80>
     192:	3307      	adds	r3, #7
     194:	10db      	asrs	r3, r3, #3
     196:	3b02      	subs	r3, #2
     198:	68fa      	ldr	r2, [r7, #12]
     19a:	18d3      	adds	r3, r2, r3
     19c:	781b      	ldrb	r3, [r3, #0]
     19e:	0019      	movs	r1, r3
			return false;
     1a0:	2308      	movs	r3, #8
     1a2:	18fb      	adds	r3, r7, r3
	if (IS_SDIO()) {
		if (!sdio_get_max_speed()) {
			return false;
		}
	}
	if ((4 <= driver_get_bus_width(sd_mmc_slot_sel))) {
     1a4:	881b      	ldrh	r3, [r3, #0]
     1a6:	2207      	movs	r2, #7
     1a8:	4013      	ands	r3, r2
     1aa:	2208      	movs	r2, #8
     1ac:	1ad3      	subs	r3, r2, r3
     1ae:	4099      	lsls	r1, r3
     1b0:	000b      	movs	r3, r1
     1b2:	697a      	ldr	r2, [r7, #20]
     1b4:	4313      	orrs	r3, r2
     1b6:	617b      	str	r3, [r7, #20]
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_bus_width()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
     1b8:	2308      	movs	r3, #8
     1ba:	18fb      	adds	r3, r7, r3
     1bc:	881b      	ldrh	r3, [r3, #0]
     1be:	2207      	movs	r2, #7
     1c0:	401a      	ands	r2, r3
     1c2:	1dfb      	adds	r3, r7, #7
     1c4:	781b      	ldrb	r3, [r3, #0]
     1c6:	18d3      	adds	r3, r2, r3
			if (!sd_acmd6()) {
     1c8:	2b10      	cmp	r3, #16
     1ca:	dd1c      	ble.n	206 <SDMMC_UNSTUFF_BITS+0xf2>
     1cc:	230a      	movs	r3, #10
     1ce:	18fb      	adds	r3, r7, r3
     1d0:	881a      	ldrh	r2, [r3, #0]
     1d2:	2308      	movs	r3, #8
     1d4:	18fb      	adds	r3, r7, r3
     1d6:	881b      	ldrh	r3, [r3, #0]
     1d8:	1ad3      	subs	r3, r2, r3
     1da:	3307      	adds	r3, #7
				return false;
     1dc:	2b00      	cmp	r3, #0
     1de:	da00      	bge.n	1e2 <SDMMC_UNSTUFF_BITS+0xce>
			}
		}
		// Switch to selected bus mode
		sd_mmc_configure_slot();
     1e0:	3307      	adds	r3, #7
     1e2:	10db      	asrs	r3, r3, #3
     1e4:	3b03      	subs	r3, #3
	}
	if (driver_is_high_speed_capable()) {
     1e6:	68fa      	ldr	r2, [r7, #12]
     1e8:	18d3      	adds	r3, r2, r3
     1ea:	781b      	ldrb	r3, [r3, #0]
     1ec:	0019      	movs	r1, r3
     1ee:	2308      	movs	r3, #8
		if (IS_SDIO()) {
			if (!sdio_cmd52_set_high_speed()) {
				return false;
			}
		}
		if (sd_mmc_card->type & CARD_TYPE_SD) {
     1f0:	18fb      	adds	r3, r7, r3
     1f2:	881b      	ldrh	r3, [r3, #0]
     1f4:	2207      	movs	r2, #7
     1f6:	4013      	ands	r3, r2
     1f8:	2210      	movs	r2, #16
     1fa:	1ad3      	subs	r3, r2, r3
     1fc:	4099      	lsls	r1, r3
     1fe:	000b      	movs	r3, r1
			if (sd_mmc_card->version > CARD_VER_SD_1_0) {
     200:	697a      	ldr	r2, [r7, #20]
     202:	4313      	orrs	r3, r2
     204:	617b      	str	r3, [r7, #20]
     206:	2308      	movs	r3, #8
     208:	18fb      	adds	r3, r7, r3
     20a:	881b      	ldrh	r3, [r3, #0]
				if (!sd_cm6_set_high_speed()) {
     20c:	2207      	movs	r2, #7
     20e:	401a      	ands	r2, r3
     210:	1dfb      	adds	r3, r7, #7
     212:	781b      	ldrb	r3, [r3, #0]
     214:	18d3      	adds	r3, r2, r3
     216:	2b10      	cmp	r3, #16
     218:	dd1c      	ble.n	254 <SDMMC_UNSTUFF_BITS+0x140>
     21a:	230a      	movs	r3, #10
     21c:	18fb      	adds	r3, r7, r3
     21e:	881a      	ldrh	r2, [r3, #0]
					return false;
     220:	2308      	movs	r3, #8
     222:	18fb      	adds	r3, r7, r3
				}
			}
		}
		// Valid new configuration
		sd_mmc_configure_slot();
     224:	881b      	ldrh	r3, [r3, #0]
     226:	1ad3      	subs	r3, r2, r3
     228:	3307      	adds	r3, #7
	}
	// SD MEMORY, Set default block size
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     22a:	2b00      	cmp	r3, #0
     22c:	da00      	bge.n	230 <SDMMC_UNSTUFF_BITS+0x11c>
     22e:	3307      	adds	r3, #7
     230:	10db      	asrs	r3, r3, #3
     232:	3b03      	subs	r3, #3
     234:	68fa      	ldr	r2, [r7, #12]
     236:	18d3      	adds	r3, r2, r3
     238:	781b      	ldrb	r3, [r3, #0]
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     23a:	0019      	movs	r1, r3
     23c:	2308      	movs	r3, #8
     23e:	18fb      	adds	r3, r7, r3
     240:	881b      	ldrh	r3, [r3, #0]
     242:	2207      	movs	r2, #7
     244:	4013      	ands	r3, r2
     246:	2210      	movs	r2, #16
     248:	1ad3      	subs	r3, r2, r3
     24a:	4099      	lsls	r1, r3
     24c:	000b      	movs	r3, r1
     24e:	697a      	ldr	r2, [r7, #20]
     250:	4313      	orrs	r3, r2
     252:	617b      	str	r3, [r7, #20]
     254:	1dfb      	adds	r3, r7, #7
     256:	781b      	ldrb	r3, [r3, #0]
			return false;
     258:	2201      	movs	r2, #1
     25a:	409a      	lsls	r2, r3
		}
	}
	return true;
     25c:	0013      	movs	r3, r2
}
     25e:	1e5a      	subs	r2, r3, #1
     260:	697b      	ldr	r3, [r7, #20]
     262:	4013      	ands	r3, r2
     264:	617b      	str	r3, [r7, #20]
     266:	697b      	ldr	r3, [r7, #20]
     268:	0018      	movs	r0, r3
     26a:	46bd      	mov	sp, r7
     26c:	b007      	add	sp, #28
     26e:	bd90      	pop	{r4, r7, pc}

00000270 <mmc_spi_op_cond>:
     270:	b590      	push	{r4, r7, lr}
     272:	b083      	sub	sp, #12
     274:	af00      	add	r7, sp, #0
     276:	4c27      	ldr	r4, [pc, #156]	; (314 <mmc_spi_op_cond+0xa4>)
     278:	447c      	add	r4, pc
     27a:	4b27      	ldr	r3, [pc, #156]	; (318 <mmc_spi_op_cond+0xa8>)
     27c:	607b      	str	r3, [r7, #4]
     27e:	4b27      	ldr	r3, [pc, #156]	; (31c <mmc_spi_op_cond+0xac>)
     280:	2100      	movs	r1, #0
     282:	0018      	movs	r0, r3
     284:	4b26      	ldr	r3, [pc, #152]	; (320 <mmc_spi_op_cond+0xb0>)
     286:	58e3      	ldr	r3, [r4, r3]
     288:	4798      	blx	r3
     28a:	0003      	movs	r3, r0
     28c:	001a      	movs	r2, r3
     28e:	2301      	movs	r3, #1
     290:	4053      	eors	r3, r2
     292:	b2db      	uxtb	r3, r3
     294:	2b00      	cmp	r3, #0
     296:	d001      	beq.n	29c <mmc_spi_op_cond+0x2c>
     298:	2300      	movs	r3, #0
     29a:	e036      	b.n	30a <mmc_spi_op_cond+0x9a>
     29c:	4b21      	ldr	r3, [pc, #132]	; (324 <mmc_spi_op_cond+0xb4>)
     29e:	58e3      	ldr	r3, [r4, r3]
     2a0:	4798      	blx	r3
     2a2:	0003      	movs	r3, r0
     2a4:	603b      	str	r3, [r7, #0]
     2a6:	683b      	ldr	r3, [r7, #0]
     2a8:	2201      	movs	r2, #1
     2aa:	4013      	ands	r3, r2
     2ac:	d006      	beq.n	2bc <mmc_spi_op_cond+0x4c>
     2ae:	687b      	ldr	r3, [r7, #4]
     2b0:	1e5a      	subs	r2, r3, #1
     2b2:	607a      	str	r2, [r7, #4]
     2b4:	2b00      	cmp	r3, #0
     2b6:	d1e2      	bne.n	27e <mmc_spi_op_cond+0xe>
     2b8:	2300      	movs	r3, #0
     2ba:	e026      	b.n	30a <mmc_spi_op_cond+0x9a>
     2bc:	46c0      	nop			; (mov r8, r8)
     2be:	4b1a      	ldr	r3, [pc, #104]	; (328 <mmc_spi_op_cond+0xb8>)
     2c0:	2100      	movs	r1, #0
     2c2:	0018      	movs	r0, r3
     2c4:	4b16      	ldr	r3, [pc, #88]	; (320 <mmc_spi_op_cond+0xb0>)
     2c6:	58e3      	ldr	r3, [r4, r3]
     2c8:	4798      	blx	r3
     2ca:	0003      	movs	r3, r0
     2cc:	001a      	movs	r2, r3
     2ce:	2301      	movs	r3, #1
     2d0:	4053      	eors	r3, r2
     2d2:	b2db      	uxtb	r3, r3
     2d4:	2b00      	cmp	r3, #0
     2d6:	d001      	beq.n	2dc <mmc_spi_op_cond+0x6c>
     2d8:	2300      	movs	r3, #0
     2da:	e016      	b.n	30a <mmc_spi_op_cond+0x9a>
     2dc:	4b11      	ldr	r3, [pc, #68]	; (324 <mmc_spi_op_cond+0xb4>)
     2de:	58e3      	ldr	r3, [r4, r3]
     2e0:	4798      	blx	r3
     2e2:	0002      	movs	r2, r0
     2e4:	23c0      	movs	r3, #192	; 0xc0
     2e6:	05db      	lsls	r3, r3, #23
     2e8:	401a      	ands	r2, r3
     2ea:	2380      	movs	r3, #128	; 0x80
     2ec:	05db      	lsls	r3, r3, #23
     2ee:	429a      	cmp	r2, r3
     2f0:	d10a      	bne.n	308 <mmc_spi_op_cond+0x98>
     2f2:	4b0e      	ldr	r3, [pc, #56]	; (32c <mmc_spi_op_cond+0xbc>)
     2f4:	447b      	add	r3, pc
     2f6:	681a      	ldr	r2, [r3, #0]
		sd_mmc_card->type |= CARD_TYPE_HC;
     2f8:	4b0d      	ldr	r3, [pc, #52]	; (330 <mmc_spi_op_cond+0xc0>)
     2fa:	447b      	add	r3, pc
     2fc:	681b      	ldr	r3, [r3, #0]
     2fe:	7adb      	ldrb	r3, [r3, #11]
     300:	2108      	movs	r1, #8
     302:	430b      	orrs	r3, r1
     304:	b2db      	uxtb	r3, r3
     306:	72d3      	strb	r3, [r2, #11]
	return true;
     308:	2301      	movs	r3, #1
}
     30a:	0018      	movs	r0, r3
     30c:	46bd      	mov	sp, r7
     30e:	b003      	add	sp, #12
     310:	bd90      	pop	{r4, r7, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	00011b58 	.word	0x00011b58
     318:	00001bee 	.word	0x00001bee
     31c:	00001101 	.word	0x00001101
     320:	0000025c 	.word	0x0000025c
     324:	00000290 	.word	0x00000290
     328:	0000053a 	.word	0x0000053a
     32c:	1ffffecc 	.word	0x1ffffecc
     330:	1ffffec6 	.word	0x1ffffec6

00000334 <sd_spi_op_cond>:
{
     334:	b590      	push	{r4, r7, lr}
     336:	b087      	sub	sp, #28
     338:	af00      	add	r7, sp, #0
     33a:	0002      	movs	r2, r0
     33c:	1dfb      	adds	r3, r7, #7
     33e:	701a      	strb	r2, [r3, #0]
     340:	4c32      	ldr	r4, [pc, #200]	; (40c <sd_spi_op_cond+0xd8>)
     342:	447c      	add	r4, pc
	retry = 7150;
     344:	4b32      	ldr	r3, [pc, #200]	; (410 <sd_spi_op_cond+0xdc>)
     346:	613b      	str	r3, [r7, #16]
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     348:	4b32      	ldr	r3, [pc, #200]	; (414 <sd_spi_op_cond+0xe0>)
     34a:	2100      	movs	r1, #0
     34c:	0018      	movs	r0, r3
     34e:	4b32      	ldr	r3, [pc, #200]	; (418 <sd_spi_op_cond+0xe4>)
     350:	58e3      	ldr	r3, [r4, r3]
     352:	4798      	blx	r3
     354:	0003      	movs	r3, r0
     356:	001a      	movs	r2, r3
     358:	2301      	movs	r3, #1
     35a:	4053      	eors	r3, r2
     35c:	b2db      	uxtb	r3, r3
     35e:	2b00      	cmp	r3, #0
     360:	d001      	beq.n	366 <sd_spi_op_cond+0x32>
			return false;
     362:	2300      	movs	r3, #0
     364:	e04e      	b.n	404 <sd_spi_op_cond+0xd0>
		arg = 0;
     366:	2300      	movs	r3, #0
     368:	617b      	str	r3, [r7, #20]
		if (v2) {
     36a:	1dfb      	adds	r3, r7, #7
     36c:	781b      	ldrb	r3, [r3, #0]
     36e:	2b00      	cmp	r3, #0
     370:	d004      	beq.n	37c <sd_spi_op_cond+0x48>
			arg |= SD_ACMD41_HCS;
     372:	697b      	ldr	r3, [r7, #20]
     374:	2280      	movs	r2, #128	; 0x80
     376:	05d2      	lsls	r2, r2, #23
     378:	4313      	orrs	r3, r2
     37a:	617b      	str	r3, [r7, #20]
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     37c:	697b      	ldr	r3, [r7, #20]
     37e:	4a27      	ldr	r2, [pc, #156]	; (41c <sd_spi_op_cond+0xe8>)
     380:	0019      	movs	r1, r3
     382:	0010      	movs	r0, r2
     384:	4b24      	ldr	r3, [pc, #144]	; (418 <sd_spi_op_cond+0xe4>)
     386:	58e3      	ldr	r3, [r4, r3]
     388:	4798      	blx	r3
     38a:	0003      	movs	r3, r0
     38c:	001a      	movs	r2, r3
     38e:	2301      	movs	r3, #1
     390:	4053      	eors	r3, r2
     392:	b2db      	uxtb	r3, r3
     394:	2b00      	cmp	r3, #0
     396:	d001      	beq.n	39c <sd_spi_op_cond+0x68>
			return false;
     398:	2300      	movs	r3, #0
     39a:	e033      	b.n	404 <sd_spi_op_cond+0xd0>
		resp = driver_get_response();
     39c:	4b20      	ldr	r3, [pc, #128]	; (420 <sd_spi_op_cond+0xec>)
     39e:	58e3      	ldr	r3, [r4, r3]
     3a0:	4798      	blx	r3
     3a2:	0003      	movs	r3, r0
     3a4:	60fb      	str	r3, [r7, #12]
		if (!(resp & R1_SPI_IDLE)) {
     3a6:	68fb      	ldr	r3, [r7, #12]
     3a8:	2201      	movs	r2, #1
     3aa:	4013      	ands	r3, r2
     3ac:	d006      	beq.n	3bc <sd_spi_op_cond+0x88>
		if (retry-- == 0) {
     3ae:	693b      	ldr	r3, [r7, #16]
     3b0:	1e5a      	subs	r2, r3, #1
     3b2:	613a      	str	r2, [r7, #16]
     3b4:	2b00      	cmp	r3, #0
     3b6:	d1c7      	bne.n	348 <sd_spi_op_cond+0x14>
			return false;
     3b8:	2300      	movs	r3, #0
     3ba:	e023      	b.n	404 <sd_spi_op_cond+0xd0>
			break;
     3bc:	46c0      	nop			; (mov r8, r8)
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     3be:	4b19      	ldr	r3, [pc, #100]	; (424 <sd_spi_op_cond+0xf0>)
     3c0:	2100      	movs	r1, #0
     3c2:	0018      	movs	r0, r3
     3c4:	4b14      	ldr	r3, [pc, #80]	; (418 <sd_spi_op_cond+0xe4>)
     3c6:	58e3      	ldr	r3, [r4, r3]
     3c8:	4798      	blx	r3
     3ca:	0003      	movs	r3, r0
     3cc:	001a      	movs	r2, r3
     3ce:	2301      	movs	r3, #1
     3d0:	4053      	eors	r3, r2
     3d2:	b2db      	uxtb	r3, r3
     3d4:	2b00      	cmp	r3, #0
     3d6:	d001      	beq.n	3dc <sd_spi_op_cond+0xa8>
		return false;
     3d8:	2300      	movs	r3, #0
     3da:	e013      	b.n	404 <sd_spi_op_cond+0xd0>
	if ((driver_get_response() & OCR_CCS) != 0) {
     3dc:	4b10      	ldr	r3, [pc, #64]	; (420 <sd_spi_op_cond+0xec>)
     3de:	58e3      	ldr	r3, [r4, r3]
     3e0:	4798      	blx	r3
     3e2:	0002      	movs	r2, r0
     3e4:	2380      	movs	r3, #128	; 0x80
     3e6:	05db      	lsls	r3, r3, #23
     3e8:	4013      	ands	r3, r2
     3ea:	d00a      	beq.n	402 <sd_spi_op_cond+0xce>
		sd_mmc_card->type |= CARD_TYPE_HC;
     3ec:	4b0e      	ldr	r3, [pc, #56]	; (428 <sd_spi_op_cond+0xf4>)
     3ee:	447b      	add	r3, pc
     3f0:	681a      	ldr	r2, [r3, #0]
     3f2:	4b0e      	ldr	r3, [pc, #56]	; (42c <sd_spi_op_cond+0xf8>)
     3f4:	447b      	add	r3, pc
     3f6:	681b      	ldr	r3, [r3, #0]
     3f8:	7adb      	ldrb	r3, [r3, #11]
     3fa:	2108      	movs	r1, #8
     3fc:	430b      	orrs	r3, r1
     3fe:	b2db      	uxtb	r3, r3
     400:	72d3      	strb	r3, [r2, #11]
	return true;
     402:	2301      	movs	r3, #1
}
     404:	0018      	movs	r0, r3
     406:	46bd      	mov	sp, r7
     408:	b007      	add	sp, #28
     40a:	bd90      	pop	{r4, r7, pc}
     40c:	00011a8e 	.word	0x00011a8e
     410:	00001bee 	.word	0x00001bee
     414:	00001137 	.word	0x00001137
     418:	0000025c 	.word	0x0000025c
     41c:	00001129 	.word	0x00001129
     420:	00000290 	.word	0x00000290
     424:	0000053a 	.word	0x0000053a
     428:	1ffffdd2 	.word	0x1ffffdd2
     42c:	1ffffdcc 	.word	0x1ffffdcc

00000430 <sdio_op_cond>:
{
     430:	b580      	push	{r7, lr}
     432:	af00      	add	r7, sp, #0
	return true; // No error but card type not updated
     434:	2301      	movs	r3, #1
}
     436:	0018      	movs	r0, r3
     438:	46bd      	mov	sp, r7
     43a:	bd80      	pop	{r7, pc}

0000043c <sd_cmd8>:
{
     43c:	b590      	push	{r4, r7, lr}
     43e:	b085      	sub	sp, #20
     440:	af00      	add	r7, sp, #0
     442:	6078      	str	r0, [r7, #4]
     444:	4c18      	ldr	r4, [pc, #96]	; (4a8 <sd_cmd8+0x6c>)
     446:	447c      	add	r4, pc
	*v2 = 0;
     448:	687b      	ldr	r3, [r7, #4]
     44a:	2200      	movs	r2, #0
     44c:	701a      	strb	r2, [r3, #0]
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     44e:	23d5      	movs	r3, #213	; 0xd5
     450:	005b      	lsls	r3, r3, #1
     452:	4a16      	ldr	r2, [pc, #88]	; (4ac <sd_cmd8+0x70>)
     454:	0019      	movs	r1, r3
     456:	0010      	movs	r0, r2
     458:	4b15      	ldr	r3, [pc, #84]	; (4b0 <sd_cmd8+0x74>)
     45a:	58e3      	ldr	r3, [r4, r3]
     45c:	4798      	blx	r3
     45e:	0003      	movs	r3, r0
     460:	001a      	movs	r2, r3
     462:	2301      	movs	r3, #1
     464:	4053      	eors	r3, r2
     466:	b2db      	uxtb	r3, r3
     468:	2b00      	cmp	r3, #0
     46a:	d001      	beq.n	470 <sd_cmd8+0x34>
		return true; // It is not a V2
     46c:	2301      	movs	r3, #1
     46e:	e016      	b.n	49e <sd_cmd8+0x62>
	resp = driver_get_response();
     470:	4b10      	ldr	r3, [pc, #64]	; (4b4 <sd_cmd8+0x78>)
     472:	58e3      	ldr	r3, [r4, r3]
     474:	4798      	blx	r3
     476:	0003      	movs	r3, r0
     478:	60fb      	str	r3, [r7, #12]
	if (resp == 0xFFFFFFFF) {
     47a:	68fb      	ldr	r3, [r7, #12]
     47c:	3301      	adds	r3, #1
     47e:	d101      	bne.n	484 <sd_cmd8+0x48>
		return true; // It is not a V2
     480:	2301      	movs	r3, #1
     482:	e00c      	b.n	49e <sd_cmd8+0x62>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     484:	68fb      	ldr	r3, [r7, #12]
     486:	051b      	lsls	r3, r3, #20
     488:	0d1a      	lsrs	r2, r3, #20
     48a:	23d5      	movs	r3, #213	; 0xd5
     48c:	005b      	lsls	r3, r3, #1
     48e:	429a      	cmp	r2, r3
     490:	d001      	beq.n	496 <sd_cmd8+0x5a>
		return false;
     492:	2300      	movs	r3, #0
     494:	e003      	b.n	49e <sd_cmd8+0x62>
	*v2 = 1;
     496:	687b      	ldr	r3, [r7, #4]
     498:	2201      	movs	r2, #1
     49a:	701a      	strb	r2, [r3, #0]
	return true;
     49c:	2301      	movs	r3, #1
}
     49e:	0018      	movs	r0, r3
     4a0:	46bd      	mov	sp, r7
     4a2:	b005      	add	sp, #20
     4a4:	bd90      	pop	{r4, r7, pc}
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	0001198a 	.word	0x0001198a
     4ac:	00005508 	.word	0x00005508
     4b0:	0000025c 	.word	0x0000025c
     4b4:	00000290 	.word	0x00000290

000004b8 <mmc_cmd8>:
{
     4b8:	b5b0      	push	{r4, r5, r7, lr}
     4ba:	b088      	sub	sp, #32
     4bc:	af02      	add	r7, sp, #8
     4be:	6078      	str	r0, [r7, #4]
     4c0:	4c46      	ldr	r4, [pc, #280]	; (5dc <mmc_cmd8+0x124>)
     4c2:	447c      	add	r4, pc
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     4c4:	2380      	movs	r3, #128	; 0x80
     4c6:	009a      	lsls	r2, r3, #2
     4c8:	4845      	ldr	r0, [pc, #276]	; (5e0 <mmc_cmd8+0x128>)
     4ca:	2300      	movs	r3, #0
     4cc:	9300      	str	r3, [sp, #0]
     4ce:	2301      	movs	r3, #1
     4d0:	2100      	movs	r1, #0
     4d2:	4d44      	ldr	r5, [pc, #272]	; (5e4 <mmc_cmd8+0x12c>)
     4d4:	5965      	ldr	r5, [r4, r5]
     4d6:	47a8      	blx	r5
     4d8:	0003      	movs	r3, r0
     4da:	001a      	movs	r2, r3
     4dc:	2301      	movs	r3, #1
     4de:	4053      	eors	r3, r2
     4e0:	b2db      	uxtb	r3, r3
     4e2:	2b00      	cmp	r3, #0
     4e4:	d001      	beq.n	4ea <mmc_cmd8+0x32>
		return false;
     4e6:	2300      	movs	r3, #0
     4e8:	e074      	b.n	5d4 <mmc_cmd8+0x11c>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     4ea:	2316      	movs	r3, #22
     4ec:	18fb      	adds	r3, r7, r3
     4ee:	2200      	movs	r2, #0
     4f0:	801a      	strh	r2, [r3, #0]
     4f2:	e015      	b.n	520 <mmc_cmd8+0x68>
		if (!driver_read_word(&ext_csd)) {
     4f4:	2310      	movs	r3, #16
     4f6:	18fb      	adds	r3, r7, r3
     4f8:	0018      	movs	r0, r3
     4fa:	4b3b      	ldr	r3, [pc, #236]	; (5e8 <mmc_cmd8+0x130>)
     4fc:	58e3      	ldr	r3, [r4, r3]
     4fe:	4798      	blx	r3
     500:	0003      	movs	r3, r0
     502:	001a      	movs	r2, r3
     504:	2301      	movs	r3, #1
     506:	4053      	eors	r3, r2
     508:	b2db      	uxtb	r3, r3
     50a:	2b00      	cmp	r3, #0
     50c:	d001      	beq.n	512 <mmc_cmd8+0x5a>
			return false;
     50e:	2300      	movs	r3, #0
     510:	e060      	b.n	5d4 <mmc_cmd8+0x11c>
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     512:	2316      	movs	r3, #22
     514:	18fb      	adds	r3, r7, r3
     516:	881a      	ldrh	r2, [r3, #0]
     518:	2316      	movs	r3, #22
     51a:	18fb      	adds	r3, r7, r3
     51c:	3201      	adds	r2, #1
     51e:	801a      	strh	r2, [r3, #0]
     520:	2316      	movs	r3, #22
     522:	18fb      	adds	r3, r7, r3
     524:	881b      	ldrh	r3, [r3, #0]
     526:	2b31      	cmp	r3, #49	; 0x31
     528:	d9e4      	bls.n	4f4 <mmc_cmd8+0x3c>
			& MMC_CTYPE_52MHZ;
     52a:	693b      	ldr	r3, [r7, #16]
     52c:	b2db      	uxtb	r3, r3
     52e:	2202      	movs	r2, #2
     530:	4013      	ands	r3, r2
     532:	b2da      	uxtb	r2, r3
	*b_authorize_high_speed = (ext_csd >> ((EXT_CSD_CARD_TYPE_INDEX % 4) * 8))
     534:	687b      	ldr	r3, [r7, #4]
     536:	701a      	strb	r2, [r3, #0]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     538:	4b2c      	ldr	r3, [pc, #176]	; (5ec <mmc_cmd8+0x134>)
     53a:	447b      	add	r3, pc
     53c:	681b      	ldr	r3, [r3, #0]
     53e:	330e      	adds	r3, #14
     540:	0018      	movs	r0, r3
     542:	230c      	movs	r3, #12
     544:	223e      	movs	r2, #62	; 0x3e
     546:	2180      	movs	r1, #128	; 0x80
     548:	4d29      	ldr	r5, [pc, #164]	; (5f0 <mmc_cmd8+0x138>)
     54a:	447d      	add	r5, pc
     54c:	47a8      	blx	r5
     54e:	0002      	movs	r2, r0
     550:	4b28      	ldr	r3, [pc, #160]	; (5f4 <mmc_cmd8+0x13c>)
     552:	429a      	cmp	r2, r3
     554:	d138      	bne.n	5c8 <mmc_cmd8+0x110>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     556:	e015      	b.n	584 <mmc_cmd8+0xcc>
			if (!driver_read_word(&sec_count)) {
     558:	230c      	movs	r3, #12
     55a:	18fb      	adds	r3, r7, r3
     55c:	0018      	movs	r0, r3
     55e:	4b22      	ldr	r3, [pc, #136]	; (5e8 <mmc_cmd8+0x130>)
     560:	58e3      	ldr	r3, [r4, r3]
     562:	4798      	blx	r3
     564:	0003      	movs	r3, r0
     566:	001a      	movs	r2, r3
     568:	2301      	movs	r3, #1
     56a:	4053      	eors	r3, r2
     56c:	b2db      	uxtb	r3, r3
     56e:	2b00      	cmp	r3, #0
     570:	d001      	beq.n	576 <mmc_cmd8+0xbe>
				return false;
     572:	2300      	movs	r3, #0
     574:	e02e      	b.n	5d4 <mmc_cmd8+0x11c>
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     576:	2316      	movs	r3, #22
     578:	18fb      	adds	r3, r7, r3
     57a:	881a      	ldrh	r2, [r3, #0]
     57c:	2316      	movs	r3, #22
     57e:	18fb      	adds	r3, r7, r3
     580:	3201      	adds	r2, #1
     582:	801a      	strh	r2, [r3, #0]
     584:	2316      	movs	r3, #22
     586:	18fb      	adds	r3, r7, r3
     588:	881b      	ldrh	r3, [r3, #0]
     58a:	2b35      	cmp	r3, #53	; 0x35
     58c:	d9e4      	bls.n	558 <mmc_cmd8+0xa0>
		sd_mmc_card->capacity = sec_count / 2;
     58e:	4b1a      	ldr	r3, [pc, #104]	; (5f8 <mmc_cmd8+0x140>)
     590:	447b      	add	r3, pc
     592:	681b      	ldr	r3, [r3, #0]
     594:	68fa      	ldr	r2, [r7, #12]
     596:	0852      	lsrs	r2, r2, #1
     598:	605a      	str	r2, [r3, #4]
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     59a:	e015      	b.n	5c8 <mmc_cmd8+0x110>
		if (!driver_read_word(&sec_count)) {
     59c:	230c      	movs	r3, #12
     59e:	18fb      	adds	r3, r7, r3
     5a0:	0018      	movs	r0, r3
     5a2:	4b11      	ldr	r3, [pc, #68]	; (5e8 <mmc_cmd8+0x130>)
     5a4:	58e3      	ldr	r3, [r4, r3]
     5a6:	4798      	blx	r3
     5a8:	0003      	movs	r3, r0
     5aa:	001a      	movs	r2, r3
     5ac:	2301      	movs	r3, #1
     5ae:	4053      	eors	r3, r2
     5b0:	b2db      	uxtb	r3, r3
     5b2:	2b00      	cmp	r3, #0
     5b4:	d001      	beq.n	5ba <mmc_cmd8+0x102>
			return false;
     5b6:	2300      	movs	r3, #0
     5b8:	e00c      	b.n	5d4 <mmc_cmd8+0x11c>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     5ba:	2316      	movs	r3, #22
     5bc:	18fb      	adds	r3, r7, r3
     5be:	881a      	ldrh	r2, [r3, #0]
     5c0:	2316      	movs	r3, #22
     5c2:	18fb      	adds	r3, r7, r3
     5c4:	3201      	adds	r2, #1
     5c6:	801a      	strh	r2, [r3, #0]
     5c8:	2316      	movs	r3, #22
     5ca:	18fb      	adds	r3, r7, r3
     5cc:	881b      	ldrh	r3, [r3, #0]
     5ce:	2b7f      	cmp	r3, #127	; 0x7f
     5d0:	d9e4      	bls.n	59c <mmc_cmd8+0xe4>
	return true;
     5d2:	2301      	movs	r3, #1
}
     5d4:	0018      	movs	r0, r3
     5d6:	46bd      	mov	sp, r7
     5d8:	b006      	add	sp, #24
     5da:	bdb0      	pop	{r4, r5, r7, pc}
     5dc:	0001190e 	.word	0x0001190e
     5e0:	00081108 	.word	0x00081108
     5e4:	00000130 	.word	0x00000130
     5e8:	00000100 	.word	0x00000100
     5ec:	1ffffc86 	.word	0x1ffffc86
     5f0:	fffffbc7 	.word	0xfffffbc7
     5f4:	00000fff 	.word	0x00000fff
     5f8:	1ffffc30 	.word	0x1ffffc30

000005fc <sd_mmc_cmd9_spi>:
{
     5fc:	b5b0      	push	{r4, r5, r7, lr}
     5fe:	b082      	sub	sp, #8
     600:	af02      	add	r7, sp, #8
     602:	4c18      	ldr	r4, [pc, #96]	; (664 <sd_mmc_cmd9_spi+0x68>)
     604:	447c      	add	r4, pc
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     606:	4b18      	ldr	r3, [pc, #96]	; (668 <sd_mmc_cmd9_spi+0x6c>)
     608:	447b      	add	r3, pc
     60a:	681b      	ldr	r3, [r3, #0]
     60c:	891b      	ldrh	r3, [r3, #8]
     60e:	0419      	lsls	r1, r3, #16
     610:	4816      	ldr	r0, [pc, #88]	; (66c <sd_mmc_cmd9_spi+0x70>)
     612:	2301      	movs	r3, #1
     614:	9300      	str	r3, [sp, #0]
     616:	2301      	movs	r3, #1
     618:	2210      	movs	r2, #16
     61a:	4d15      	ldr	r5, [pc, #84]	; (670 <sd_mmc_cmd9_spi+0x74>)
     61c:	5965      	ldr	r5, [r4, r5]
     61e:	47a8      	blx	r5
     620:	0003      	movs	r3, r0
     622:	001a      	movs	r2, r3
     624:	2301      	movs	r3, #1
     626:	4053      	eors	r3, r2
     628:	b2db      	uxtb	r3, r3
     62a:	2b00      	cmp	r3, #0
     62c:	d001      	beq.n	632 <sd_mmc_cmd9_spi+0x36>
		return false;
     62e:	2300      	movs	r3, #0
     630:	e015      	b.n	65e <sd_mmc_cmd9_spi+0x62>
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     632:	4b10      	ldr	r3, [pc, #64]	; (674 <sd_mmc_cmd9_spi+0x78>)
     634:	447b      	add	r3, pc
     636:	681b      	ldr	r3, [r3, #0]
     638:	330e      	adds	r3, #14
     63a:	2101      	movs	r1, #1
     63c:	0018      	movs	r0, r3
     63e:	4b0e      	ldr	r3, [pc, #56]	; (678 <sd_mmc_cmd9_spi+0x7c>)
     640:	58e3      	ldr	r3, [r4, r3]
     642:	4798      	blx	r3
     644:	0003      	movs	r3, r0
     646:	001a      	movs	r2, r3
     648:	2301      	movs	r3, #1
     64a:	4053      	eors	r3, r2
     64c:	b2db      	uxtb	r3, r3
     64e:	2b00      	cmp	r3, #0
     650:	d001      	beq.n	656 <sd_mmc_cmd9_spi+0x5a>
		return false;
     652:	2300      	movs	r3, #0
     654:	e003      	b.n	65e <sd_mmc_cmd9_spi+0x62>
	return driver_wait_end_of_read_blocks();
     656:	4b09      	ldr	r3, [pc, #36]	; (67c <sd_mmc_cmd9_spi+0x80>)
     658:	58e3      	ldr	r3, [r4, r3]
     65a:	4798      	blx	r3
     65c:	0003      	movs	r3, r0
}
     65e:	0018      	movs	r0, r3
     660:	46bd      	mov	sp, r7
     662:	bdb0      	pop	{r4, r5, r7, pc}
     664:	000117cc 	.word	0x000117cc
     668:	1ffffbb8 	.word	0x1ffffbb8
     66c:	00081109 	.word	0x00081109
     670:	00000130 	.word	0x00000130
     674:	1ffffb8c 	.word	0x1ffffb8c
     678:	00000208 	.word	0x00000208
     67c:	00000184 	.word	0x00000184

00000680 <mmc_decode_csd>:
{
     680:	b5b0      	push	{r4, r5, r7, lr}
     682:	b084      	sub	sp, #16
     684:	af00      	add	r7, sp, #0
     686:	4c53      	ldr	r4, [pc, #332]	; (7d4 <mmc_decode_csd+0x154>)
     688:	447c      	add	r4, pc
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     68a:	4b53      	ldr	r3, [pc, #332]	; (7d8 <mmc_decode_csd+0x158>)
     68c:	447b      	add	r3, pc
     68e:	681b      	ldr	r3, [r3, #0]
     690:	330e      	adds	r3, #14
     692:	0018      	movs	r0, r3
     694:	2304      	movs	r3, #4
     696:	227a      	movs	r2, #122	; 0x7a
     698:	2180      	movs	r1, #128	; 0x80
     69a:	4d50      	ldr	r5, [pc, #320]	; (7dc <mmc_decode_csd+0x15c>)
     69c:	447d      	add	r5, pc
     69e:	47a8      	blx	r5
     6a0:	0003      	movs	r3, r0
     6a2:	3b01      	subs	r3, #1
     6a4:	2b03      	cmp	r3, #3
     6a6:	d80b      	bhi.n	6c0 <mmc_decode_csd+0x40>
     6a8:	0018      	movs	r0, r3
     6aa:	f00f ffe1 	bl	10670 <__gnu_thumb1_case_si>
     6ae:	46c0      	nop			; (mov r8, r8)
     6b0:	0000001c 	.word	0x0000001c
     6b4:	00000028 	.word	0x00000028
     6b8:	00000034 	.word	0x00000034
     6bc:	00000040 	.word	0x00000040
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     6c0:	4b47      	ldr	r3, [pc, #284]	; (7e0 <mmc_decode_csd+0x160>)
     6c2:	447b      	add	r3, pc
     6c4:	681b      	ldr	r3, [r3, #0]
     6c6:	2212      	movs	r2, #18
     6c8:	731a      	strb	r2, [r3, #12]
		break;
     6ca:	e017      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     6cc:	4b45      	ldr	r3, [pc, #276]	; (7e4 <mmc_decode_csd+0x164>)
     6ce:	447b      	add	r3, pc
     6d0:	681b      	ldr	r3, [r3, #0]
     6d2:	2214      	movs	r2, #20
     6d4:	731a      	strb	r2, [r3, #12]
		break;
     6d6:	e011      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     6d8:	4b43      	ldr	r3, [pc, #268]	; (7e8 <mmc_decode_csd+0x168>)
     6da:	447b      	add	r3, pc
     6dc:	681b      	ldr	r3, [r3, #0]
     6de:	2222      	movs	r2, #34	; 0x22
     6e0:	731a      	strb	r2, [r3, #12]
		break;
     6e2:	e00b      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_3;
     6e4:	4b41      	ldr	r3, [pc, #260]	; (7ec <mmc_decode_csd+0x16c>)
     6e6:	447b      	add	r3, pc
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	2230      	movs	r2, #48	; 0x30
     6ec:	731a      	strb	r2, [r3, #12]
		break;
     6ee:	e005      	b.n	6fc <mmc_decode_csd+0x7c>
		sd_mmc_card->version = CARD_VER_MMC_4;
     6f0:	4b3f      	ldr	r3, [pc, #252]	; (7f0 <mmc_decode_csd+0x170>)
     6f2:	447b      	add	r3, pc
     6f4:	681b      	ldr	r3, [r3, #0]
     6f6:	2240      	movs	r2, #64	; 0x40
     6f8:	731a      	strb	r2, [r3, #12]
		break;
     6fa:	46c0      	nop			; (mov r8, r8)
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     6fc:	4b3d      	ldr	r3, [pc, #244]	; (7f4 <mmc_decode_csd+0x174>)
     6fe:	447b      	add	r3, pc
     700:	681b      	ldr	r3, [r3, #0]
     702:	330e      	adds	r3, #14
     704:	0018      	movs	r0, r3
     706:	2308      	movs	r3, #8
     708:	2260      	movs	r2, #96	; 0x60
     70a:	2180      	movs	r1, #128	; 0x80
     70c:	4d3a      	ldr	r5, [pc, #232]	; (7f8 <mmc_decode_csd+0x178>)
     70e:	447d      	add	r5, pc
     710:	47a8      	blx	r5
     712:	0003      	movs	r3, r0
     714:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     716:	68fb      	ldr	r3, [r7, #12]
     718:	2207      	movs	r2, #7
     71a:	401a      	ands	r2, r3
     71c:	4b37      	ldr	r3, [pc, #220]	; (7fc <mmc_decode_csd+0x17c>)
     71e:	58e3      	ldr	r3, [r4, r3]
     720:	0092      	lsls	r2, r2, #2
     722:	58d3      	ldr	r3, [r2, r3]
     724:	60bb      	str	r3, [r7, #8]
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     726:	68fb      	ldr	r3, [r7, #12]
     728:	08db      	lsrs	r3, r3, #3
     72a:	220f      	movs	r2, #15
     72c:	401a      	ands	r2, r3
     72e:	4b34      	ldr	r3, [pc, #208]	; (800 <mmc_decode_csd+0x180>)
     730:	58e3      	ldr	r3, [r4, r3]
     732:	0092      	lsls	r2, r2, #2
     734:	58d3      	ldr	r3, [r2, r3]
     736:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
     738:	4b32      	ldr	r3, [pc, #200]	; (804 <mmc_decode_csd+0x184>)
     73a:	447b      	add	r3, pc
     73c:	681b      	ldr	r3, [r3, #0]
     73e:	68ba      	ldr	r2, [r7, #8]
     740:	6879      	ldr	r1, [r7, #4]
     742:	434a      	muls	r2, r1
     744:	21fa      	movs	r1, #250	; 0xfa
     746:	0089      	lsls	r1, r1, #2
     748:	434a      	muls	r2, r1
     74a:	601a      	str	r2, [r3, #0]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     74c:	4b2e      	ldr	r3, [pc, #184]	; (808 <mmc_decode_csd+0x188>)
     74e:	447b      	add	r3, pc
     750:	681b      	ldr	r3, [r3, #0]
     752:	330e      	adds	r3, #14
     754:	0018      	movs	r0, r3
     756:	230c      	movs	r3, #12
     758:	223e      	movs	r2, #62	; 0x3e
     75a:	2180      	movs	r1, #128	; 0x80
     75c:	4c2b      	ldr	r4, [pc, #172]	; (80c <mmc_decode_csd+0x18c>)
     75e:	447c      	add	r4, pc
     760:	47a0      	blx	r4
     762:	0002      	movs	r2, r0
     764:	4b2a      	ldr	r3, [pc, #168]	; (810 <mmc_decode_csd+0x190>)
     766:	429a      	cmp	r2, r3
     768:	d02f      	beq.n	7ca <mmc_decode_csd+0x14a>
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     76a:	4b2a      	ldr	r3, [pc, #168]	; (814 <mmc_decode_csd+0x194>)
     76c:	447b      	add	r3, pc
     76e:	681b      	ldr	r3, [r3, #0]
     770:	330e      	adds	r3, #14
     772:	0018      	movs	r0, r3
     774:	230c      	movs	r3, #12
     776:	223e      	movs	r2, #62	; 0x3e
     778:	2180      	movs	r1, #128	; 0x80
     77a:	4c27      	ldr	r4, [pc, #156]	; (818 <mmc_decode_csd+0x198>)
     77c:	447c      	add	r4, pc
     77e:	47a0      	blx	r4
     780:	0003      	movs	r3, r0
     782:	1c5c      	adds	r4, r3, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     784:	4b25      	ldr	r3, [pc, #148]	; (81c <mmc_decode_csd+0x19c>)
     786:	447b      	add	r3, pc
     788:	681b      	ldr	r3, [r3, #0]
     78a:	330e      	adds	r3, #14
     78c:	0018      	movs	r0, r3
     78e:	2303      	movs	r3, #3
     790:	222f      	movs	r2, #47	; 0x2f
     792:	2180      	movs	r1, #128	; 0x80
     794:	4d22      	ldr	r5, [pc, #136]	; (820 <mmc_decode_csd+0x1a0>)
     796:	447d      	add	r5, pc
     798:	47a8      	blx	r5
     79a:	0003      	movs	r3, r0
     79c:	3302      	adds	r3, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     79e:	409c      	lsls	r4, r3
     7a0:	0023      	movs	r3, r4
     7a2:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
     7a4:	4b1f      	ldr	r3, [pc, #124]	; (824 <mmc_decode_csd+0x1a4>)
     7a6:	447b      	add	r3, pc
     7a8:	681c      	ldr	r4, [r3, #0]
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     7aa:	4b1f      	ldr	r3, [pc, #124]	; (828 <mmc_decode_csd+0x1a8>)
     7ac:	447b      	add	r3, pc
     7ae:	681b      	ldr	r3, [r3, #0]
     7b0:	330e      	adds	r3, #14
     7b2:	0018      	movs	r0, r3
     7b4:	2304      	movs	r3, #4
     7b6:	2250      	movs	r2, #80	; 0x50
     7b8:	2180      	movs	r1, #128	; 0x80
     7ba:	4d1c      	ldr	r5, [pc, #112]	; (82c <mmc_decode_csd+0x1ac>)
     7bc:	447d      	add	r5, pc
     7be:	47a8      	blx	r5
     7c0:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
     7c2:	683b      	ldr	r3, [r7, #0]
     7c4:	4093      	lsls	r3, r2
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     7c6:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     7c8:	6063      	str	r3, [r4, #4]
}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	46bd      	mov	sp, r7
     7ce:	b004      	add	sp, #16
     7d0:	bdb0      	pop	{r4, r5, r7, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	00011748 	.word	0x00011748
     7d8:	1ffffb34 	.word	0x1ffffb34
     7dc:	fffffa75 	.word	0xfffffa75
     7e0:	1ffffafe 	.word	0x1ffffafe
     7e4:	1ffffaf2 	.word	0x1ffffaf2
     7e8:	1ffffae6 	.word	0x1ffffae6
     7ec:	1ffffada 	.word	0x1ffffada
     7f0:	1fffface 	.word	0x1fffface
     7f4:	1ffffac2 	.word	0x1ffffac2
     7f8:	fffffa03 	.word	0xfffffa03
     7fc:	000001c4 	.word	0x000001c4
     800:	00000094 	.word	0x00000094
     804:	1ffffa86 	.word	0x1ffffa86
     808:	1ffffa72 	.word	0x1ffffa72
     80c:	fffff9b3 	.word	0xfffff9b3
     810:	00000fff 	.word	0x00000fff
     814:	1ffffa54 	.word	0x1ffffa54
     818:	fffff995 	.word	0xfffff995
     81c:	1ffffa3a 	.word	0x1ffffa3a
     820:	fffff97b 	.word	0xfffff97b
     824:	1ffffa1a 	.word	0x1ffffa1a
     828:	1ffffa14 	.word	0x1ffffa14
     82c:	fffff955 	.word	0xfffff955

00000830 <sd_decode_csd>:
{
     830:	b5b0      	push	{r4, r5, r7, lr}
     832:	b084      	sub	sp, #16
     834:	af00      	add	r7, sp, #0
     836:	4c3f      	ldr	r4, [pc, #252]	; (934 <sd_decode_csd+0x104>)
     838:	447c      	add	r4, pc
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     83a:	4b3f      	ldr	r3, [pc, #252]	; (938 <sd_decode_csd+0x108>)
     83c:	447b      	add	r3, pc
     83e:	681b      	ldr	r3, [r3, #0]
     840:	330e      	adds	r3, #14
     842:	0018      	movs	r0, r3
     844:	2308      	movs	r3, #8
     846:	2260      	movs	r2, #96	; 0x60
     848:	2180      	movs	r1, #128	; 0x80
     84a:	4d3c      	ldr	r5, [pc, #240]	; (93c <sd_decode_csd+0x10c>)
     84c:	447d      	add	r5, pc
     84e:	47a8      	blx	r5
     850:	0003      	movs	r3, r0
     852:	60fb      	str	r3, [r7, #12]
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     854:	68fb      	ldr	r3, [r7, #12]
     856:	2207      	movs	r2, #7
     858:	401a      	ands	r2, r3
     85a:	4b39      	ldr	r3, [pc, #228]	; (940 <sd_decode_csd+0x110>)
     85c:	58e3      	ldr	r3, [r4, r3]
     85e:	0092      	lsls	r2, r2, #2
     860:	58d3      	ldr	r3, [r2, r3]
     862:	60bb      	str	r3, [r7, #8]
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     864:	68fb      	ldr	r3, [r7, #12]
     866:	08db      	lsrs	r3, r3, #3
     868:	220f      	movs	r2, #15
     86a:	401a      	ands	r2, r3
     86c:	4b35      	ldr	r3, [pc, #212]	; (944 <sd_decode_csd+0x114>)
     86e:	58e3      	ldr	r3, [r4, r3]
     870:	0092      	lsls	r2, r2, #2
     872:	58d3      	ldr	r3, [r2, r3]
     874:	607b      	str	r3, [r7, #4]
	sd_mmc_card->clock = unit * mul * 1000;
     876:	4b34      	ldr	r3, [pc, #208]	; (948 <sd_decode_csd+0x118>)
     878:	447b      	add	r3, pc
     87a:	681b      	ldr	r3, [r3, #0]
     87c:	68ba      	ldr	r2, [r7, #8]
     87e:	6879      	ldr	r1, [r7, #4]
     880:	434a      	muls	r2, r1
     882:	21fa      	movs	r1, #250	; 0xfa
     884:	0089      	lsls	r1, r1, #2
     886:	434a      	muls	r2, r1
     888:	601a      	str	r2, [r3, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     88a:	4b30      	ldr	r3, [pc, #192]	; (94c <sd_decode_csd+0x11c>)
     88c:	447b      	add	r3, pc
     88e:	681b      	ldr	r3, [r3, #0]
     890:	330e      	adds	r3, #14
     892:	0018      	movs	r0, r3
     894:	2302      	movs	r3, #2
     896:	227e      	movs	r2, #126	; 0x7e
     898:	2180      	movs	r1, #128	; 0x80
     89a:	4c2d      	ldr	r4, [pc, #180]	; (950 <sd_decode_csd+0x120>)
     89c:	447c      	add	r4, pc
     89e:	47a0      	blx	r4
     8a0:	1e03      	subs	r3, r0, #0
     8a2:	d012      	beq.n	8ca <sd_decode_csd+0x9a>
		sd_mmc_card->capacity =
     8a4:	4b2b      	ldr	r3, [pc, #172]	; (954 <sd_decode_csd+0x124>)
     8a6:	447b      	add	r3, pc
     8a8:	681c      	ldr	r4, [r3, #0]
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
     8aa:	4b2b      	ldr	r3, [pc, #172]	; (958 <sd_decode_csd+0x128>)
     8ac:	447b      	add	r3, pc
     8ae:	681b      	ldr	r3, [r3, #0]
     8b0:	330e      	adds	r3, #14
     8b2:	0018      	movs	r0, r3
     8b4:	2316      	movs	r3, #22
     8b6:	2230      	movs	r2, #48	; 0x30
     8b8:	2180      	movs	r1, #128	; 0x80
     8ba:	4d28      	ldr	r5, [pc, #160]	; (95c <sd_decode_csd+0x12c>)
     8bc:	447d      	add	r5, pc
     8be:	47a8      	blx	r5
     8c0:	0003      	movs	r3, r0
				* 512;
     8c2:	3301      	adds	r3, #1
     8c4:	025b      	lsls	r3, r3, #9
		sd_mmc_card->capacity =
     8c6:	6063      	str	r3, [r4, #4]
}
     8c8:	e02f      	b.n	92a <sd_decode_csd+0xfa>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     8ca:	4b25      	ldr	r3, [pc, #148]	; (960 <sd_decode_csd+0x130>)
     8cc:	447b      	add	r3, pc
     8ce:	681b      	ldr	r3, [r3, #0]
     8d0:	330e      	adds	r3, #14
     8d2:	0018      	movs	r0, r3
     8d4:	230c      	movs	r3, #12
     8d6:	223e      	movs	r2, #62	; 0x3e
     8d8:	2180      	movs	r1, #128	; 0x80
     8da:	4c22      	ldr	r4, [pc, #136]	; (964 <sd_decode_csd+0x134>)
     8dc:	447c      	add	r4, pc
     8de:	47a0      	blx	r4
     8e0:	0003      	movs	r3, r0
     8e2:	1c5c      	adds	r4, r3, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     8e4:	4b20      	ldr	r3, [pc, #128]	; (968 <sd_decode_csd+0x138>)
     8e6:	447b      	add	r3, pc
     8e8:	681b      	ldr	r3, [r3, #0]
     8ea:	330e      	adds	r3, #14
     8ec:	0018      	movs	r0, r3
     8ee:	2303      	movs	r3, #3
     8f0:	222f      	movs	r2, #47	; 0x2f
     8f2:	2180      	movs	r1, #128	; 0x80
     8f4:	4d1d      	ldr	r5, [pc, #116]	; (96c <sd_decode_csd+0x13c>)
     8f6:	447d      	add	r5, pc
     8f8:	47a8      	blx	r5
     8fa:	0003      	movs	r3, r0
     8fc:	3302      	adds	r3, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     8fe:	409c      	lsls	r4, r3
     900:	0023      	movs	r3, r4
     902:	603b      	str	r3, [r7, #0]
		sd_mmc_card->capacity = blocknr *
     904:	4b1a      	ldr	r3, [pc, #104]	; (970 <sd_decode_csd+0x140>)
     906:	447b      	add	r3, pc
     908:	681c      	ldr	r4, [r3, #0]
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
     90a:	4b1a      	ldr	r3, [pc, #104]	; (974 <sd_decode_csd+0x144>)
     90c:	447b      	add	r3, pc
     90e:	681b      	ldr	r3, [r3, #0]
     910:	330e      	adds	r3, #14
     912:	0018      	movs	r0, r3
     914:	2304      	movs	r3, #4
     916:	2250      	movs	r2, #80	; 0x50
     918:	2180      	movs	r1, #128	; 0x80
     91a:	4d17      	ldr	r5, [pc, #92]	; (978 <sd_decode_csd+0x148>)
     91c:	447d      	add	r5, pc
     91e:	47a8      	blx	r5
     920:	0002      	movs	r2, r0
		sd_mmc_card->capacity = blocknr *
     922:	683b      	ldr	r3, [r7, #0]
     924:	4093      	lsls	r3, r2
				/ 1024;
     926:	0a9b      	lsrs	r3, r3, #10
		sd_mmc_card->capacity = blocknr *
     928:	6063      	str	r3, [r4, #4]
}
     92a:	46c0      	nop			; (mov r8, r8)
     92c:	46bd      	mov	sp, r7
     92e:	b004      	add	sp, #16
     930:	bdb0      	pop	{r4, r5, r7, pc}
     932:	46c0      	nop			; (mov r8, r8)
     934:	00011598 	.word	0x00011598
     938:	1ffff984 	.word	0x1ffff984
     93c:	fffff8c5 	.word	0xfffff8c5
     940:	000001c4 	.word	0x000001c4
     944:	000001a8 	.word	0x000001a8
     948:	1ffff948 	.word	0x1ffff948
     94c:	1ffff934 	.word	0x1ffff934
     950:	fffff875 	.word	0xfffff875
     954:	1ffff91a 	.word	0x1ffff91a
     958:	1ffff914 	.word	0x1ffff914
     95c:	fffff855 	.word	0xfffff855
     960:	1ffff8f4 	.word	0x1ffff8f4
     964:	fffff835 	.word	0xfffff835
     968:	1ffff8da 	.word	0x1ffff8da
     96c:	fffff81b 	.word	0xfffff81b
     970:	1ffff8ba 	.word	0x1ffff8ba
     974:	1ffff8b4 	.word	0x1ffff8b4
     978:	fffff7f5 	.word	0xfffff7f5

0000097c <sd_mmc_cmd13>:
{
     97c:	b590      	push	{r4, r7, lr}
     97e:	b083      	sub	sp, #12
     980:	af00      	add	r7, sp, #0
     982:	4c13      	ldr	r4, [pc, #76]	; (9d0 <sd_mmc_cmd13+0x54>)
     984:	447c      	add	r4, pc
	nec_timeout = 200000;
     986:	4b13      	ldr	r3, [pc, #76]	; (9d4 <sd_mmc_cmd13+0x58>)
     988:	607b      	str	r3, [r7, #4]
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     98a:	4b13      	ldr	r3, [pc, #76]	; (9d8 <sd_mmc_cmd13+0x5c>)
     98c:	2100      	movs	r1, #0
     98e:	0018      	movs	r0, r3
     990:	4b12      	ldr	r3, [pc, #72]	; (9dc <sd_mmc_cmd13+0x60>)
     992:	58e3      	ldr	r3, [r4, r3]
     994:	4798      	blx	r3
     996:	0003      	movs	r3, r0
     998:	001a      	movs	r2, r3
     99a:	2301      	movs	r3, #1
     99c:	4053      	eors	r3, r2
     99e:	b2db      	uxtb	r3, r3
     9a0:	2b00      	cmp	r3, #0
     9a2:	d001      	beq.n	9a8 <sd_mmc_cmd13+0x2c>
				return false;
     9a4:	2300      	movs	r3, #0
     9a6:	e00f      	b.n	9c8 <sd_mmc_cmd13+0x4c>
			if (!(driver_get_response() & 0xFF)) {
     9a8:	4b0d      	ldr	r3, [pc, #52]	; (9e0 <sd_mmc_cmd13+0x64>)
     9aa:	58e3      	ldr	r3, [r4, r3]
     9ac:	4798      	blx	r3
     9ae:	0002      	movs	r2, r0
     9b0:	23ff      	movs	r3, #255	; 0xff
     9b2:	4013      	ands	r3, r2
     9b4:	d006      	beq.n	9c4 <sd_mmc_cmd13+0x48>
		if (nec_timeout-- == 0) {
     9b6:	687b      	ldr	r3, [r7, #4]
     9b8:	1e5a      	subs	r2, r3, #1
     9ba:	607a      	str	r2, [r7, #4]
     9bc:	2b00      	cmp	r3, #0
     9be:	d1e4      	bne.n	98a <sd_mmc_cmd13+0xe>
			return false;
     9c0:	2300      	movs	r3, #0
     9c2:	e001      	b.n	9c8 <sd_mmc_cmd13+0x4c>
				break;
     9c4:	46c0      	nop			; (mov r8, r8)
	return true;
     9c6:	2301      	movs	r3, #1
}
     9c8:	0018      	movs	r0, r3
     9ca:	46bd      	mov	sp, r7
     9cc:	b003      	add	sp, #12
     9ce:	bd90      	pop	{r4, r7, pc}
     9d0:	0001144c 	.word	0x0001144c
     9d4:	00030d40 	.word	0x00030d40
     9d8:	00001b0d 	.word	0x00001b0d
     9dc:	0000025c 	.word	0x0000025c
     9e0:	00000290 	.word	0x00000290

000009e4 <sd_acmd51>:
{
     9e4:	b5b0      	push	{r4, r5, r7, lr}
     9e6:	b084      	sub	sp, #16
     9e8:	af02      	add	r7, sp, #8
     9ea:	4c3f      	ldr	r4, [pc, #252]	; (ae8 <sd_acmd51+0x104>)
     9ec:	447c      	add	r4, pc
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     9ee:	4b3f      	ldr	r3, [pc, #252]	; (aec <sd_acmd51+0x108>)
     9f0:	447b      	add	r3, pc
     9f2:	681b      	ldr	r3, [r3, #0]
     9f4:	891b      	ldrh	r3, [r3, #8]
     9f6:	041b      	lsls	r3, r3, #16
     9f8:	4a3d      	ldr	r2, [pc, #244]	; (af0 <sd_acmd51+0x10c>)
     9fa:	0019      	movs	r1, r3
     9fc:	0010      	movs	r0, r2
     9fe:	4b3d      	ldr	r3, [pc, #244]	; (af4 <sd_acmd51+0x110>)
     a00:	58e3      	ldr	r3, [r4, r3]
     a02:	4798      	blx	r3
     a04:	0003      	movs	r3, r0
     a06:	001a      	movs	r2, r3
     a08:	2301      	movs	r3, #1
     a0a:	4053      	eors	r3, r2
     a0c:	b2db      	uxtb	r3, r3
     a0e:	2b00      	cmp	r3, #0
     a10:	d001      	beq.n	a16 <sd_acmd51+0x32>
		return false;
     a12:	2300      	movs	r3, #0
     a14:	e063      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     a16:	4838      	ldr	r0, [pc, #224]	; (af8 <sd_acmd51+0x114>)
     a18:	2301      	movs	r3, #1
     a1a:	9300      	str	r3, [sp, #0]
     a1c:	2301      	movs	r3, #1
     a1e:	2208      	movs	r2, #8
     a20:	2100      	movs	r1, #0
     a22:	4d36      	ldr	r5, [pc, #216]	; (afc <sd_acmd51+0x118>)
     a24:	5965      	ldr	r5, [r4, r5]
     a26:	47a8      	blx	r5
     a28:	0003      	movs	r3, r0
     a2a:	001a      	movs	r2, r3
     a2c:	2301      	movs	r3, #1
     a2e:	4053      	eors	r3, r2
     a30:	b2db      	uxtb	r3, r3
     a32:	2b00      	cmp	r3, #0
     a34:	d001      	beq.n	a3a <sd_acmd51+0x56>
		return false;
     a36:	2300      	movs	r3, #0
     a38:	e051      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_start_read_blocks(scr, 1)) {
     a3a:	003b      	movs	r3, r7
     a3c:	2101      	movs	r1, #1
     a3e:	0018      	movs	r0, r3
     a40:	4b2f      	ldr	r3, [pc, #188]	; (b00 <sd_acmd51+0x11c>)
     a42:	58e3      	ldr	r3, [r4, r3]
     a44:	4798      	blx	r3
     a46:	0003      	movs	r3, r0
     a48:	001a      	movs	r2, r3
     a4a:	2301      	movs	r3, #1
     a4c:	4053      	eors	r3, r2
     a4e:	b2db      	uxtb	r3, r3
     a50:	2b00      	cmp	r3, #0
     a52:	d001      	beq.n	a58 <sd_acmd51+0x74>
		return false;
     a54:	2300      	movs	r3, #0
     a56:	e042      	b.n	ade <sd_acmd51+0xfa>
	if (!driver_wait_end_of_read_blocks()) {
     a58:	4b2a      	ldr	r3, [pc, #168]	; (b04 <sd_acmd51+0x120>)
     a5a:	58e3      	ldr	r3, [r4, r3]
     a5c:	4798      	blx	r3
     a5e:	0003      	movs	r3, r0
     a60:	001a      	movs	r2, r3
     a62:	2301      	movs	r3, #1
     a64:	4053      	eors	r3, r2
     a66:	b2db      	uxtb	r3, r3
     a68:	2b00      	cmp	r3, #0
     a6a:	d001      	beq.n	a70 <sd_acmd51+0x8c>
		return false;
     a6c:	2300      	movs	r3, #0
     a6e:	e036      	b.n	ade <sd_acmd51+0xfa>
	switch (SD_SCR_SD_SPEC(scr)) {
     a70:	0038      	movs	r0, r7
     a72:	2304      	movs	r3, #4
     a74:	2238      	movs	r2, #56	; 0x38
     a76:	2140      	movs	r1, #64	; 0x40
     a78:	4c23      	ldr	r4, [pc, #140]	; (b08 <sd_acmd51+0x124>)
     a7a:	447c      	add	r4, pc
     a7c:	47a0      	blx	r4
     a7e:	0003      	movs	r3, r0
     a80:	2b01      	cmp	r3, #1
     a82:	d009      	beq.n	a98 <sd_acmd51+0xb4>
     a84:	d302      	bcc.n	a8c <sd_acmd51+0xa8>
     a86:	2b02      	cmp	r3, #2
     a88:	d00c      	beq.n	aa4 <sd_acmd51+0xc0>
     a8a:	e021      	b.n	ad0 <sd_acmd51+0xec>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     a8c:	4b1f      	ldr	r3, [pc, #124]	; (b0c <sd_acmd51+0x128>)
     a8e:	447b      	add	r3, pc
     a90:	681b      	ldr	r3, [r3, #0]
     a92:	2210      	movs	r2, #16
     a94:	731a      	strb	r2, [r3, #12]
		break;
     a96:	e021      	b.n	adc <sd_acmd51+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     a98:	4b1d      	ldr	r3, [pc, #116]	; (b10 <sd_acmd51+0x12c>)
     a9a:	447b      	add	r3, pc
     a9c:	681b      	ldr	r3, [r3, #0]
     a9e:	221a      	movs	r2, #26
     aa0:	731a      	strb	r2, [r3, #12]
		break;
     aa2:	e01b      	b.n	adc <sd_acmd51+0xf8>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     aa4:	0038      	movs	r0, r7
     aa6:	2301      	movs	r3, #1
     aa8:	222f      	movs	r2, #47	; 0x2f
     aaa:	2140      	movs	r1, #64	; 0x40
     aac:	4c19      	ldr	r4, [pc, #100]	; (b14 <sd_acmd51+0x130>)
     aae:	447c      	add	r4, pc
     ab0:	47a0      	blx	r4
     ab2:	0003      	movs	r3, r0
     ab4:	2b01      	cmp	r3, #1
     ab6:	d105      	bne.n	ac4 <sd_acmd51+0xe0>
			sd_mmc_card->version = CARD_VER_SD_3_0;
     ab8:	4b17      	ldr	r3, [pc, #92]	; (b18 <sd_acmd51+0x134>)
     aba:	447b      	add	r3, pc
     abc:	681b      	ldr	r3, [r3, #0]
     abe:	2230      	movs	r2, #48	; 0x30
     ac0:	731a      	strb	r2, [r3, #12]
		break;
     ac2:	e00b      	b.n	adc <sd_acmd51+0xf8>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     ac4:	4b15      	ldr	r3, [pc, #84]	; (b1c <sd_acmd51+0x138>)
     ac6:	447b      	add	r3, pc
     ac8:	681b      	ldr	r3, [r3, #0]
     aca:	2220      	movs	r2, #32
     acc:	731a      	strb	r2, [r3, #12]
		break;
     ace:	e005      	b.n	adc <sd_acmd51+0xf8>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     ad0:	4b13      	ldr	r3, [pc, #76]	; (b20 <sd_acmd51+0x13c>)
     ad2:	447b      	add	r3, pc
     ad4:	681b      	ldr	r3, [r3, #0]
     ad6:	2210      	movs	r2, #16
     ad8:	731a      	strb	r2, [r3, #12]
		break;
     ada:	46c0      	nop			; (mov r8, r8)
	return true;
     adc:	2301      	movs	r3, #1
}
     ade:	0018      	movs	r0, r3
     ae0:	46bd      	mov	sp, r7
     ae2:	b002      	add	sp, #8
     ae4:	bdb0      	pop	{r4, r5, r7, pc}
     ae6:	46c0      	nop			; (mov r8, r8)
     ae8:	000113e4 	.word	0x000113e4
     aec:	1ffff7d0 	.word	0x1ffff7d0
     af0:	00001137 	.word	0x00001137
     af4:	0000025c 	.word	0x0000025c
     af8:	00081133 	.word	0x00081133
     afc:	00000130 	.word	0x00000130
     b00:	00000208 	.word	0x00000208
     b04:	00000184 	.word	0x00000184
     b08:	fffff697 	.word	0xfffff697
     b0c:	1ffff732 	.word	0x1ffff732
     b10:	1ffff726 	.word	0x1ffff726
     b14:	fffff663 	.word	0xfffff663
     b18:	1ffff706 	.word	0x1ffff706
     b1c:	1ffff6fa 	.word	0x1ffff6fa
     b20:	1ffff6ee 	.word	0x1ffff6ee

00000b24 <sd_mmc_select_slot>:
{
     b24:	b580      	push	{r7, lr}
     b26:	b082      	sub	sp, #8
     b28:	af00      	add	r7, sp, #0
     b2a:	0002      	movs	r2, r0
     b2c:	1dfb      	adds	r3, r7, #7
     b2e:	701a      	strb	r2, [r3, #0]
	if (slot >= SD_MMC_MEM_CNT) {
     b30:	1dfb      	adds	r3, r7, #7
     b32:	781b      	ldrb	r3, [r3, #0]
     b34:	2b00      	cmp	r3, #0
     b36:	d001      	beq.n	b3c <sd_mmc_select_slot+0x18>
		return SD_MMC_ERR_SLOT;
     b38:	2304      	movs	r3, #4
     b3a:	e052      	b.n	be2 <sd_mmc_select_slot+0xbe>
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     b3c:	1dfb      	adds	r3, r7, #7
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	4a2a      	ldr	r2, [pc, #168]	; (bec <sd_mmc_select_slot+0xc8>)
     b42:	447a      	add	r2, pc
     b44:	015b      	lsls	r3, r3, #5
     b46:	18d3      	adds	r3, r2, r3
     b48:	330a      	adds	r3, #10
     b4a:	781b      	ldrb	r3, [r3, #0]
     b4c:	2b04      	cmp	r3, #4
     b4e:	d009      	beq.n	b64 <sd_mmc_select_slot+0x40>
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     b50:	1dfb      	adds	r3, r7, #7
     b52:	781b      	ldrb	r3, [r3, #0]
     b54:	4a26      	ldr	r2, [pc, #152]	; (bf0 <sd_mmc_select_slot+0xcc>)
     b56:	447a      	add	r2, pc
     b58:	015b      	lsls	r3, r3, #5
     b5a:	18d3      	adds	r3, r2, r3
     b5c:	330a      	adds	r3, #10
     b5e:	781b      	ldrb	r3, [r3, #0]
     b60:	2b03      	cmp	r3, #3
     b62:	d121      	bne.n	ba8 <sd_mmc_select_slot+0x84>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     b64:	1dfb      	adds	r3, r7, #7
     b66:	781b      	ldrb	r3, [r3, #0]
     b68:	4a22      	ldr	r2, [pc, #136]	; (bf4 <sd_mmc_select_slot+0xd0>)
     b6a:	447a      	add	r2, pc
     b6c:	015b      	lsls	r3, r3, #5
     b6e:	18d3      	adds	r3, r2, r3
     b70:	330a      	adds	r3, #10
     b72:	2202      	movs	r2, #2
     b74:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     b76:	1dfb      	adds	r3, r7, #7
     b78:	781a      	ldrb	r2, [r3, #0]
     b7a:	4b1f      	ldr	r3, [pc, #124]	; (bf8 <sd_mmc_select_slot+0xd4>)
     b7c:	447b      	add	r3, pc
     b7e:	0152      	lsls	r2, r2, #5
     b80:	491e      	ldr	r1, [pc, #120]	; (bfc <sd_mmc_select_slot+0xd8>)
     b82:	50d1      	str	r1, [r2, r3]
		sd_mmc_cards[slot].bus_width = 1;
     b84:	1dfb      	adds	r3, r7, #7
     b86:	781b      	ldrb	r3, [r3, #0]
     b88:	4a1d      	ldr	r2, [pc, #116]	; (c00 <sd_mmc_select_slot+0xdc>)
     b8a:	447a      	add	r2, pc
     b8c:	015b      	lsls	r3, r3, #5
     b8e:	18d3      	adds	r3, r2, r3
     b90:	330d      	adds	r3, #13
     b92:	2201      	movs	r2, #1
     b94:	701a      	strb	r2, [r3, #0]
		sd_mmc_cards[slot].high_speed = 0;
     b96:	1dfb      	adds	r3, r7, #7
     b98:	781b      	ldrb	r3, [r3, #0]
     b9a:	4a1a      	ldr	r2, [pc, #104]	; (c04 <sd_mmc_select_slot+0xe0>)
     b9c:	447a      	add	r2, pc
     b9e:	015b      	lsls	r3, r3, #5
     ba0:	18d3      	adds	r3, r2, r3
     ba2:	331e      	adds	r3, #30
     ba4:	2200      	movs	r2, #0
     ba6:	701a      	strb	r2, [r3, #0]
	sd_mmc_slot_sel = slot;
     ba8:	4b17      	ldr	r3, [pc, #92]	; (c08 <sd_mmc_select_slot+0xe4>)
     baa:	447b      	add	r3, pc
     bac:	1dfa      	adds	r2, r7, #7
     bae:	7812      	ldrb	r2, [r2, #0]
     bb0:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     bb2:	1dfb      	adds	r3, r7, #7
     bb4:	781b      	ldrb	r3, [r3, #0]
     bb6:	015b      	lsls	r3, r3, #5
     bb8:	4a14      	ldr	r2, [pc, #80]	; (c0c <sd_mmc_select_slot+0xe8>)
     bba:	447a      	add	r2, pc
     bbc:	189a      	adds	r2, r3, r2
     bbe:	4b14      	ldr	r3, [pc, #80]	; (c10 <sd_mmc_select_slot+0xec>)
     bc0:	447b      	add	r3, pc
     bc2:	601a      	str	r2, [r3, #0]
	sd_mmc_configure_slot();
     bc4:	4b13      	ldr	r3, [pc, #76]	; (c14 <sd_mmc_select_slot+0xf0>)
     bc6:	447b      	add	r3, pc
     bc8:	4798      	blx	r3
	return (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_INIT) ?
     bca:	1dfb      	adds	r3, r7, #7
     bcc:	781b      	ldrb	r3, [r3, #0]
     bce:	4a12      	ldr	r2, [pc, #72]	; (c18 <sd_mmc_select_slot+0xf4>)
     bd0:	447a      	add	r2, pc
     bd2:	015b      	lsls	r3, r3, #5
     bd4:	18d3      	adds	r3, r2, r3
     bd6:	330a      	adds	r3, #10
     bd8:	781b      	ldrb	r3, [r3, #0]
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     bda:	3b02      	subs	r3, #2
     bdc:	425a      	negs	r2, r3
     bde:	4153      	adcs	r3, r2
     be0:	b2db      	uxtb	r3, r3
}
     be2:	0018      	movs	r0, r3
     be4:	46bd      	mov	sp, r7
     be6:	b002      	add	sp, #8
     be8:	bd80      	pop	{r7, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	1ffff65a 	.word	0x1ffff65a
     bf0:	1ffff646 	.word	0x1ffff646
     bf4:	1ffff632 	.word	0x1ffff632
     bf8:	1ffff620 	.word	0x1ffff620
     bfc:	00061a80 	.word	0x00061a80
     c00:	1ffff612 	.word	0x1ffff612
     c04:	1ffff600 	.word	0x1ffff600
     c08:	1ffff612 	.word	0x1ffff612
     c0c:	1ffff5e2 	.word	0x1ffff5e2
     c10:	1ffff600 	.word	0x1ffff600
     c14:	00000053 	.word	0x00000053
     c18:	1ffff5cc 	.word	0x1ffff5cc

00000c1c <sd_mmc_configure_slot>:
{
     c1c:	b5b0      	push	{r4, r5, r7, lr}
     c1e:	af00      	add	r7, sp, #0
     c20:	4d0c      	ldr	r5, [pc, #48]	; (c54 <sd_mmc_configure_slot+0x38>)
     c22:	447d      	add	r5, pc
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c24:	4b0c      	ldr	r3, [pc, #48]	; (c58 <sd_mmc_configure_slot+0x3c>)
     c26:	447b      	add	r3, pc
     c28:	7818      	ldrb	r0, [r3, #0]
     c2a:	4b0c      	ldr	r3, [pc, #48]	; (c5c <sd_mmc_configure_slot+0x40>)
     c2c:	447b      	add	r3, pc
     c2e:	681b      	ldr	r3, [r3, #0]
     c30:	6819      	ldr	r1, [r3, #0]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     c32:	4b0b      	ldr	r3, [pc, #44]	; (c60 <sd_mmc_configure_slot+0x44>)
     c34:	447b      	add	r3, pc
     c36:	681b      	ldr	r3, [r3, #0]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c38:	7b5a      	ldrb	r2, [r3, #13]
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
     c3a:	4b0a      	ldr	r3, [pc, #40]	; (c64 <sd_mmc_configure_slot+0x48>)
     c3c:	447b      	add	r3, pc
     c3e:	681b      	ldr	r3, [r3, #0]
     c40:	7f9b      	ldrb	r3, [r3, #30]
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     c42:	1e5c      	subs	r4, r3, #1
     c44:	41a3      	sbcs	r3, r4
     c46:	b2db      	uxtb	r3, r3
     c48:	4c07      	ldr	r4, [pc, #28]	; (c68 <sd_mmc_configure_slot+0x4c>)
     c4a:	592c      	ldr	r4, [r5, r4]
     c4c:	47a0      	blx	r4
}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	46bd      	mov	sp, r7
     c52:	bdb0      	pop	{r4, r5, r7, pc}
     c54:	000111ae 	.word	0x000111ae
     c58:	1ffff596 	.word	0x1ffff596
     c5c:	1ffff594 	.word	0x1ffff594
     c60:	1ffff58c 	.word	0x1ffff58c
     c64:	1ffff584 	.word	0x1ffff584
     c68:	0000002c 	.word	0x0000002c

00000c6c <sd_mmc_deselect_slot>:
{
     c6c:	b580      	push	{r7, lr}
     c6e:	af00      	add	r7, sp, #0
     c70:	4a08      	ldr	r2, [pc, #32]	; (c94 <sd_mmc_deselect_slot+0x28>)
     c72:	447a      	add	r2, pc
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     c74:	4b08      	ldr	r3, [pc, #32]	; (c98 <sd_mmc_deselect_slot+0x2c>)
     c76:	447b      	add	r3, pc
     c78:	781b      	ldrb	r3, [r3, #0]
     c7a:	2b00      	cmp	r3, #0
     c7c:	d106      	bne.n	c8c <sd_mmc_deselect_slot+0x20>
		driver_deselect_device(sd_mmc_slot_sel);
     c7e:	4b07      	ldr	r3, [pc, #28]	; (c9c <sd_mmc_deselect_slot+0x30>)
     c80:	447b      	add	r3, pc
     c82:	781b      	ldrb	r3, [r3, #0]
     c84:	0018      	movs	r0, r3
     c86:	4b06      	ldr	r3, [pc, #24]	; (ca0 <sd_mmc_deselect_slot+0x34>)
     c88:	58d3      	ldr	r3, [r2, r3]
     c8a:	4798      	blx	r3
}
     c8c:	46c0      	nop			; (mov r8, r8)
     c8e:	46bd      	mov	sp, r7
     c90:	bd80      	pop	{r7, pc}
     c92:	46c0      	nop			; (mov r8, r8)
     c94:	0001115e 	.word	0x0001115e
     c98:	1ffff546 	.word	0x1ffff546
     c9c:	1ffff53c 	.word	0x1ffff53c
     ca0:	000002d8 	.word	0x000002d8

00000ca4 <sd_mmc_spi_card_init>:
{
     ca4:	b590      	push	{r4, r7, lr}
     ca6:	b083      	sub	sp, #12
     ca8:	af00      	add	r7, sp, #0
     caa:	4c67      	ldr	r4, [pc, #412]	; (e48 <sd_mmc_spi_card_init+0x1a4>)
     cac:	447c      	add	r4, pc
	uint8_t v2 = 0;
     cae:	1dfb      	adds	r3, r7, #7
     cb0:	2200      	movs	r2, #0
     cb2:	701a      	strb	r2, [r3, #0]
	sd_mmc_card->type = CARD_TYPE_SD;
     cb4:	4b65      	ldr	r3, [pc, #404]	; (e4c <sd_mmc_spi_card_init+0x1a8>)
     cb6:	447b      	add	r3, pc
     cb8:	681b      	ldr	r3, [r3, #0]
     cba:	2201      	movs	r2, #1
     cbc:	72da      	strb	r2, [r3, #11]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     cbe:	4b64      	ldr	r3, [pc, #400]	; (e50 <sd_mmc_spi_card_init+0x1ac>)
     cc0:	447b      	add	r3, pc
     cc2:	681b      	ldr	r3, [r3, #0]
     cc4:	2200      	movs	r2, #0
     cc6:	731a      	strb	r2, [r3, #12]
	sd_mmc_card->rca = 0;
     cc8:	4b62      	ldr	r3, [pc, #392]	; (e54 <sd_mmc_spi_card_init+0x1b0>)
     cca:	447b      	add	r3, pc
     ccc:	681b      	ldr	r3, [r3, #0]
     cce:	2200      	movs	r2, #0
     cd0:	811a      	strh	r2, [r3, #8]
	driver_send_clock();
     cd2:	4b61      	ldr	r3, [pc, #388]	; (e58 <sd_mmc_spi_card_init+0x1b4>)
     cd4:	58e3      	ldr	r3, [r4, r3]
     cd6:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     cd8:	2388      	movs	r3, #136	; 0x88
     cda:	015b      	lsls	r3, r3, #5
     cdc:	2100      	movs	r1, #0
     cde:	0018      	movs	r0, r3
     ce0:	4b5e      	ldr	r3, [pc, #376]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     ce2:	58e3      	ldr	r3, [r4, r3]
     ce4:	4798      	blx	r3
     ce6:	0003      	movs	r3, r0
     ce8:	001a      	movs	r2, r3
     cea:	2301      	movs	r3, #1
     cec:	4053      	eors	r3, r2
     cee:	b2db      	uxtb	r3, r3
     cf0:	2b00      	cmp	r3, #0
     cf2:	d001      	beq.n	cf8 <sd_mmc_spi_card_init+0x54>
		return false;
     cf4:	2300      	movs	r3, #0
     cf6:	e0a3      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (!sd_cmd8(&v2)) {
     cf8:	1dfb      	adds	r3, r7, #7
     cfa:	0018      	movs	r0, r3
     cfc:	4b58      	ldr	r3, [pc, #352]	; (e60 <sd_mmc_spi_card_init+0x1bc>)
     cfe:	447b      	add	r3, pc
     d00:	4798      	blx	r3
     d02:	0003      	movs	r3, r0
     d04:	001a      	movs	r2, r3
     d06:	2301      	movs	r3, #1
     d08:	4053      	eors	r3, r2
     d0a:	b2db      	uxtb	r3, r3
     d0c:	2b00      	cmp	r3, #0
     d0e:	d001      	beq.n	d14 <sd_mmc_spi_card_init+0x70>
		return false;
     d10:	2300      	movs	r3, #0
     d12:	e095      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (!sdio_op_cond()) {
     d14:	4b53      	ldr	r3, [pc, #332]	; (e64 <sd_mmc_spi_card_init+0x1c0>)
     d16:	447b      	add	r3, pc
     d18:	4798      	blx	r3
     d1a:	0003      	movs	r3, r0
     d1c:	001a      	movs	r2, r3
     d1e:	2301      	movs	r3, #1
     d20:	4053      	eors	r3, r2
     d22:	b2db      	uxtb	r3, r3
     d24:	2b00      	cmp	r3, #0
     d26:	d001      	beq.n	d2c <sd_mmc_spi_card_init+0x88>
		return false;
     d28:	2300      	movs	r3, #0
     d2a:	e089      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d2c:	4b4e      	ldr	r3, [pc, #312]	; (e68 <sd_mmc_spi_card_init+0x1c4>)
     d2e:	447b      	add	r3, pc
     d30:	681b      	ldr	r3, [r3, #0]
     d32:	7adb      	ldrb	r3, [r3, #11]
     d34:	001a      	movs	r2, r3
     d36:	2301      	movs	r3, #1
     d38:	4013      	ands	r3, r2
     d3a:	d025      	beq.n	d88 <sd_mmc_spi_card_init+0xe4>
		if (!sd_spi_op_cond(v2)) {
     d3c:	1dfb      	adds	r3, r7, #7
     d3e:	781b      	ldrb	r3, [r3, #0]
     d40:	0018      	movs	r0, r3
     d42:	4b4a      	ldr	r3, [pc, #296]	; (e6c <sd_mmc_spi_card_init+0x1c8>)
     d44:	447b      	add	r3, pc
     d46:	4798      	blx	r3
     d48:	0003      	movs	r3, r0
     d4a:	001a      	movs	r2, r3
     d4c:	2301      	movs	r3, #1
     d4e:	4053      	eors	r3, r2
     d50:	b2db      	uxtb	r3, r3
     d52:	2b00      	cmp	r3, #0
     d54:	d009      	beq.n	d6a <sd_mmc_spi_card_init+0xc6>
			sd_mmc_card->type = CARD_TYPE_MMC;
     d56:	4b46      	ldr	r3, [pc, #280]	; (e70 <sd_mmc_spi_card_init+0x1cc>)
     d58:	447b      	add	r3, pc
     d5a:	681b      	ldr	r3, [r3, #0]
     d5c:	2202      	movs	r2, #2
     d5e:	72da      	strb	r2, [r3, #11]
			return sd_mmc_spi_install_mmc();
     d60:	4b44      	ldr	r3, [pc, #272]	; (e74 <sd_mmc_spi_card_init+0x1d0>)
     d62:	447b      	add	r3, pc
     d64:	4798      	blx	r3
     d66:	0003      	movs	r3, r0
     d68:	e06a      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     d6a:	4b43      	ldr	r3, [pc, #268]	; (e78 <sd_mmc_spi_card_init+0x1d4>)
     d6c:	2100      	movs	r1, #0
     d6e:	0018      	movs	r0, r3
     d70:	4b3a      	ldr	r3, [pc, #232]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     d72:	58e3      	ldr	r3, [r4, r3]
     d74:	4798      	blx	r3
     d76:	0003      	movs	r3, r0
     d78:	001a      	movs	r2, r3
     d7a:	2301      	movs	r3, #1
     d7c:	4053      	eors	r3, r2
     d7e:	b2db      	uxtb	r3, r3
     d80:	2b00      	cmp	r3, #0
     d82:	d001      	beq.n	d88 <sd_mmc_spi_card_init+0xe4>
			return false;
     d84:	2300      	movs	r3, #0
     d86:	e05b      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     d88:	4b3c      	ldr	r3, [pc, #240]	; (e7c <sd_mmc_spi_card_init+0x1d8>)
     d8a:	447b      	add	r3, pc
     d8c:	681b      	ldr	r3, [r3, #0]
     d8e:	7adb      	ldrb	r3, [r3, #11]
     d90:	001a      	movs	r2, r3
     d92:	2301      	movs	r3, #1
     d94:	4013      	ands	r3, r2
     d96:	d01a      	beq.n	dce <sd_mmc_spi_card_init+0x12a>
		if (!sd_mmc_cmd9_spi()) {
     d98:	4b39      	ldr	r3, [pc, #228]	; (e80 <sd_mmc_spi_card_init+0x1dc>)
     d9a:	447b      	add	r3, pc
     d9c:	4798      	blx	r3
     d9e:	0003      	movs	r3, r0
     da0:	001a      	movs	r2, r3
     da2:	2301      	movs	r3, #1
     da4:	4053      	eors	r3, r2
     da6:	b2db      	uxtb	r3, r3
     da8:	2b00      	cmp	r3, #0
     daa:	d001      	beq.n	db0 <sd_mmc_spi_card_init+0x10c>
			return false;
     dac:	2300      	movs	r3, #0
     dae:	e047      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
		sd_decode_csd();
     db0:	4b34      	ldr	r3, [pc, #208]	; (e84 <sd_mmc_spi_card_init+0x1e0>)
     db2:	447b      	add	r3, pc
     db4:	4798      	blx	r3
		if (!sd_acmd51()) {
     db6:	4b34      	ldr	r3, [pc, #208]	; (e88 <sd_mmc_spi_card_init+0x1e4>)
     db8:	447b      	add	r3, pc
     dba:	4798      	blx	r3
     dbc:	0003      	movs	r3, r0
     dbe:	001a      	movs	r2, r3
     dc0:	2301      	movs	r3, #1
     dc2:	4053      	eors	r3, r2
     dc4:	b2db      	uxtb	r3, r3
     dc6:	2b00      	cmp	r3, #0
     dc8:	d001      	beq.n	dce <sd_mmc_spi_card_init+0x12a>
			return false;
     dca:	2300      	movs	r3, #0
     dcc:	e038      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     dce:	4b2f      	ldr	r3, [pc, #188]	; (e8c <sd_mmc_spi_card_init+0x1e8>)
     dd0:	447b      	add	r3, pc
     dd2:	681b      	ldr	r3, [r3, #0]
     dd4:	7adb      	ldrb	r3, [r3, #11]
     dd6:	001a      	movs	r2, r3
     dd8:	2301      	movs	r3, #1
     dda:	4013      	ands	r3, r2
     ddc:	d018      	beq.n	e10 <sd_mmc_spi_card_init+0x16c>
			(0 == (sd_mmc_card->type & CARD_TYPE_HC))) {
     dde:	4b2c      	ldr	r3, [pc, #176]	; (e90 <sd_mmc_spi_card_init+0x1ec>)
     de0:	447b      	add	r3, pc
     de2:	681b      	ldr	r3, [r3, #0]
     de4:	7adb      	ldrb	r3, [r3, #11]
     de6:	001a      	movs	r2, r3
     de8:	2308      	movs	r3, #8
     dea:	4013      	ands	r3, r2
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     dec:	d110      	bne.n	e10 <sd_mmc_spi_card_init+0x16c>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     dee:	2380      	movs	r3, #128	; 0x80
     df0:	009b      	lsls	r3, r3, #2
     df2:	4a28      	ldr	r2, [pc, #160]	; (e94 <sd_mmc_spi_card_init+0x1f0>)
     df4:	0019      	movs	r1, r3
     df6:	0010      	movs	r0, r2
     df8:	4b18      	ldr	r3, [pc, #96]	; (e5c <sd_mmc_spi_card_init+0x1b8>)
     dfa:	58e3      	ldr	r3, [r4, r3]
     dfc:	4798      	blx	r3
     dfe:	0003      	movs	r3, r0
     e00:	001a      	movs	r2, r3
     e02:	2301      	movs	r3, #1
     e04:	4053      	eors	r3, r2
     e06:	b2db      	uxtb	r3, r3
     e08:	2b00      	cmp	r3, #0
     e0a:	d001      	beq.n	e10 <sd_mmc_spi_card_init+0x16c>
			return false;
     e0c:	2300      	movs	r3, #0
     e0e:	e017      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     e10:	4b21      	ldr	r3, [pc, #132]	; (e98 <sd_mmc_spi_card_init+0x1f4>)
     e12:	447b      	add	r3, pc
     e14:	681b      	ldr	r3, [r3, #0]
     e16:	7adb      	ldrb	r3, [r3, #11]
     e18:	001a      	movs	r2, r3
     e1a:	2301      	movs	r3, #1
     e1c:	4013      	ands	r3, r2
     e1e:	d00b      	beq.n	e38 <sd_mmc_spi_card_init+0x194>
		if (!sd_mmc_cmd13()) {
     e20:	4b1e      	ldr	r3, [pc, #120]	; (e9c <sd_mmc_spi_card_init+0x1f8>)
     e22:	447b      	add	r3, pc
     e24:	4798      	blx	r3
     e26:	0003      	movs	r3, r0
     e28:	001a      	movs	r2, r3
     e2a:	2301      	movs	r3, #1
     e2c:	4053      	eors	r3, r2
     e2e:	b2db      	uxtb	r3, r3
     e30:	2b00      	cmp	r3, #0
     e32:	d001      	beq.n	e38 <sd_mmc_spi_card_init+0x194>
			return false;
     e34:	2300      	movs	r3, #0
     e36:	e003      	b.n	e40 <sd_mmc_spi_card_init+0x19c>
	sd_mmc_configure_slot();
     e38:	4b19      	ldr	r3, [pc, #100]	; (ea0 <sd_mmc_spi_card_init+0x1fc>)
     e3a:	447b      	add	r3, pc
     e3c:	4798      	blx	r3
	return true;
     e3e:	2301      	movs	r3, #1
}
     e40:	0018      	movs	r0, r3
     e42:	46bd      	mov	sp, r7
     e44:	b003      	add	sp, #12
     e46:	bd90      	pop	{r4, r7, pc}
     e48:	00011124 	.word	0x00011124
     e4c:	1ffff50a 	.word	0x1ffff50a
     e50:	1ffff500 	.word	0x1ffff500
     e54:	1ffff4f6 	.word	0x1ffff4f6
     e58:	000002ec 	.word	0x000002ec
     e5c:	0000025c 	.word	0x0000025c
     e60:	fffff73b 	.word	0xfffff73b
     e64:	fffff717 	.word	0xfffff717
     e68:	1ffff492 	.word	0x1ffff492
     e6c:	fffff5ed 	.word	0xfffff5ed
     e70:	1ffff468 	.word	0x1ffff468
     e74:	0000013f 	.word	0x0000013f
     e78:	0000113b 	.word	0x0000113b
     e7c:	1ffff436 	.word	0x1ffff436
     e80:	fffff85f 	.word	0xfffff85f
     e84:	fffffa7b 	.word	0xfffffa7b
     e88:	fffffc29 	.word	0xfffffc29
     e8c:	1ffff3f0 	.word	0x1ffff3f0
     e90:	1ffff3e0 	.word	0x1ffff3e0
     e94:	00001110 	.word	0x00001110
     e98:	1ffff3ae 	.word	0x1ffff3ae
     e9c:	fffffb57 	.word	0xfffffb57
     ea0:	fffffddf 	.word	0xfffffddf

00000ea4 <sd_mmc_spi_install_mmc>:
 * At last, it will automaticly enable maximum bus width and transfer speed.
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_install_mmc(void)
{
     ea4:	b590      	push	{r4, r7, lr}
     ea6:	b083      	sub	sp, #12
     ea8:	af00      	add	r7, sp, #0
     eaa:	4c3a      	ldr	r4, [pc, #232]	; (f94 <sd_mmc_spi_install_mmc+0xf0>)
     eac:	447c      	add	r4, pc
	uint8_t b_authorize_high_speed;

	// CMD0 - Reset all cards to idle state.
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     eae:	2388      	movs	r3, #136	; 0x88
     eb0:	015b      	lsls	r3, r3, #5
     eb2:	2100      	movs	r1, #0
     eb4:	0018      	movs	r0, r3
     eb6:	4b38      	ldr	r3, [pc, #224]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     eb8:	58e3      	ldr	r3, [r4, r3]
     eba:	4798      	blx	r3
     ebc:	0003      	movs	r3, r0
     ebe:	001a      	movs	r2, r3
     ec0:	2301      	movs	r3, #1
     ec2:	4053      	eors	r3, r2
     ec4:	b2db      	uxtb	r3, r3
     ec6:	2b00      	cmp	r3, #0
     ec8:	d001      	beq.n	ece <sd_mmc_spi_install_mmc+0x2a>
		return false;
     eca:	2300      	movs	r3, #0
     ecc:	e05e      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}

	if (!mmc_spi_op_cond()) {
     ece:	4b33      	ldr	r3, [pc, #204]	; (f9c <sd_mmc_spi_install_mmc+0xf8>)
     ed0:	447b      	add	r3, pc
     ed2:	4798      	blx	r3
     ed4:	0003      	movs	r3, r0
     ed6:	001a      	movs	r2, r3
     ed8:	2301      	movs	r3, #1
     eda:	4053      	eors	r3, r2
     edc:	b2db      	uxtb	r3, r3
     ede:	2b00      	cmp	r3, #0
     ee0:	d001      	beq.n	ee6 <sd_mmc_spi_install_mmc+0x42>
		return false;
     ee2:	2300      	movs	r3, #0
     ee4:	e052      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}

	// Disable CRC check for SPI mode
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     ee6:	4b2e      	ldr	r3, [pc, #184]	; (fa0 <sd_mmc_spi_install_mmc+0xfc>)
     ee8:	2100      	movs	r1, #0
     eea:	0018      	movs	r0, r3
     eec:	4b2a      	ldr	r3, [pc, #168]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     eee:	58e3      	ldr	r3, [r4, r3]
     ef0:	4798      	blx	r3
     ef2:	0003      	movs	r3, r0
     ef4:	001a      	movs	r2, r3
     ef6:	2301      	movs	r3, #1
     ef8:	4053      	eors	r3, r2
     efa:	b2db      	uxtb	r3, r3
     efc:	2b00      	cmp	r3, #0
     efe:	d001      	beq.n	f04 <sd_mmc_spi_install_mmc+0x60>
		return false;
     f00:	2300      	movs	r3, #0
     f02:	e043      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Get the Card-Specific Data
	if (!sd_mmc_cmd9_spi()) {
     f04:	4b27      	ldr	r3, [pc, #156]	; (fa4 <sd_mmc_spi_install_mmc+0x100>)
     f06:	447b      	add	r3, pc
     f08:	4798      	blx	r3
     f0a:	0003      	movs	r3, r0
     f0c:	001a      	movs	r2, r3
     f0e:	2301      	movs	r3, #1
     f10:	4053      	eors	r3, r2
     f12:	b2db      	uxtb	r3, r3
     f14:	2b00      	cmp	r3, #0
     f16:	d001      	beq.n	f1c <sd_mmc_spi_install_mmc+0x78>
		return false;
     f18:	2300      	movs	r3, #0
     f1a:	e037      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	mmc_decode_csd();
     f1c:	4b22      	ldr	r3, [pc, #136]	; (fa8 <sd_mmc_spi_install_mmc+0x104>)
     f1e:	447b      	add	r3, pc
     f20:	4798      	blx	r3
	// For MMC 4.0 Higher version
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     f22:	4b22      	ldr	r3, [pc, #136]	; (fac <sd_mmc_spi_install_mmc+0x108>)
     f24:	447b      	add	r3, pc
     f26:	681b      	ldr	r3, [r3, #0]
     f28:	7b1b      	ldrb	r3, [r3, #12]
     f2a:	2b3f      	cmp	r3, #63	; 0x3f
     f2c:	d90d      	bls.n	f4a <sd_mmc_spi_install_mmc+0xa6>
		// Get EXT_CSD
		if (!mmc_cmd8(&b_authorize_high_speed)) {
     f2e:	1dfb      	adds	r3, r7, #7
     f30:	0018      	movs	r0, r3
     f32:	4b1f      	ldr	r3, [pc, #124]	; (fb0 <sd_mmc_spi_install_mmc+0x10c>)
     f34:	447b      	add	r3, pc
     f36:	4798      	blx	r3
     f38:	0003      	movs	r3, r0
     f3a:	001a      	movs	r2, r3
     f3c:	2301      	movs	r3, #1
     f3e:	4053      	eors	r3, r2
     f40:	b2db      	uxtb	r3, r3
     f42:	2b00      	cmp	r3, #0
     f44:	d001      	beq.n	f4a <sd_mmc_spi_install_mmc+0xa6>
			return false;
     f46:	2300      	movs	r3, #0
     f48:	e020      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
		}
	}
	// Set default block size
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     f4a:	2380      	movs	r3, #128	; 0x80
     f4c:	009b      	lsls	r3, r3, #2
     f4e:	4a19      	ldr	r2, [pc, #100]	; (fb4 <sd_mmc_spi_install_mmc+0x110>)
     f50:	0019      	movs	r1, r3
     f52:	0010      	movs	r0, r2
     f54:	4b10      	ldr	r3, [pc, #64]	; (f98 <sd_mmc_spi_install_mmc+0xf4>)
     f56:	58e3      	ldr	r3, [r4, r3]
     f58:	4798      	blx	r3
     f5a:	0003      	movs	r3, r0
     f5c:	001a      	movs	r2, r3
     f5e:	2301      	movs	r3, #1
     f60:	4053      	eors	r3, r2
     f62:	b2db      	uxtb	r3, r3
     f64:	2b00      	cmp	r3, #0
     f66:	d001      	beq.n	f6c <sd_mmc_spi_install_mmc+0xc8>
		return false;
     f68:	2300      	movs	r3, #0
     f6a:	e00f      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Check communication
	if (!sd_mmc_cmd13()) {
     f6c:	4b12      	ldr	r3, [pc, #72]	; (fb8 <sd_mmc_spi_install_mmc+0x114>)
     f6e:	447b      	add	r3, pc
     f70:	4798      	blx	r3
     f72:	0003      	movs	r3, r0
     f74:	001a      	movs	r2, r3
     f76:	2301      	movs	r3, #1
     f78:	4053      	eors	r3, r2
     f7a:	b2db      	uxtb	r3, r3
     f7c:	2b00      	cmp	r3, #0
     f7e:	d001      	beq.n	f84 <sd_mmc_spi_install_mmc+0xe0>
		return false;
     f80:	2300      	movs	r3, #0
     f82:	e003      	b.n	f8c <sd_mmc_spi_install_mmc+0xe8>
	}
	// Reinitialize the slot with the new speed
	sd_mmc_configure_slot();
     f84:	4b0d      	ldr	r3, [pc, #52]	; (fbc <sd_mmc_spi_install_mmc+0x118>)
     f86:	447b      	add	r3, pc
     f88:	4798      	blx	r3
	return true;
     f8a:	2301      	movs	r3, #1
}
     f8c:	0018      	movs	r0, r3
     f8e:	46bd      	mov	sp, r7
     f90:	b003      	add	sp, #12
     f92:	bd90      	pop	{r4, r7, pc}
     f94:	00010f24 	.word	0x00010f24
     f98:	0000025c 	.word	0x0000025c
     f9c:	fffff39d 	.word	0xfffff39d
     fa0:	0000113b 	.word	0x0000113b
     fa4:	fffff6f3 	.word	0xfffff6f3
     fa8:	fffff75f 	.word	0xfffff75f
     fac:	1ffff29c 	.word	0x1ffff29c
     fb0:	fffff581 	.word	0xfffff581
     fb4:	00001110 	.word	0x00001110
     fb8:	fffffa0b 	.word	0xfffffa0b
     fbc:	fffffc93 	.word	0xfffffc93

00000fc0 <sd_mmc_init>:

//-------------------------------------------------------------------
//--------------------- PUBLIC FUNCTIONS ----------------------------

void sd_mmc_init(void)
{
     fc0:	b580      	push	{r7, lr}
     fc2:	b082      	sub	sp, #8
     fc4:	af00      	add	r7, sp, #0
     fc6:	4a11      	ldr	r2, [pc, #68]	; (100c <sd_mmc_init+0x4c>)
     fc8:	447a      	add	r2, pc
# define SD_MMC_ENABLE_WP_PIN(slot, unused) \
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
     fca:	1dfb      	adds	r3, r7, #7
     fcc:	2100      	movs	r1, #0
     fce:	7019      	strb	r1, [r3, #0]
     fd0:	e00d      	b.n	fee <sd_mmc_init+0x2e>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     fd2:	1dfb      	adds	r3, r7, #7
     fd4:	781b      	ldrb	r3, [r3, #0]
     fd6:	490e      	ldr	r1, [pc, #56]	; (1010 <sd_mmc_init+0x50>)
     fd8:	4479      	add	r1, pc
     fda:	015b      	lsls	r3, r3, #5
     fdc:	18cb      	adds	r3, r1, r3
     fde:	330a      	adds	r3, #10
     fe0:	2104      	movs	r1, #4
     fe2:	7019      	strb	r1, [r3, #0]
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
     fe4:	1dfb      	adds	r3, r7, #7
     fe6:	7819      	ldrb	r1, [r3, #0]
     fe8:	1dfb      	adds	r3, r7, #7
     fea:	3101      	adds	r1, #1
     fec:	7019      	strb	r1, [r3, #0]
     fee:	1dfb      	adds	r3, r7, #7
     ff0:	781b      	ldrb	r3, [r3, #0]
     ff2:	2b00      	cmp	r3, #0
     ff4:	d0ed      	beq.n	fd2 <sd_mmc_init+0x12>
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     ff6:	4b07      	ldr	r3, [pc, #28]	; (1014 <sd_mmc_init+0x54>)
     ff8:	447b      	add	r3, pc
     ffa:	21ff      	movs	r1, #255	; 0xff
     ffc:	7019      	strb	r1, [r3, #0]
	driver_init();
     ffe:	4b06      	ldr	r3, [pc, #24]	; (1018 <sd_mmc_init+0x58>)
    1000:	58d3      	ldr	r3, [r2, r3]
    1002:	4798      	blx	r3
}
    1004:	46c0      	nop			; (mov r8, r8)
    1006:	46bd      	mov	sp, r7
    1008:	b002      	add	sp, #8
    100a:	bd80      	pop	{r7, pc}
    100c:	00010e08 	.word	0x00010e08
    1010:	1ffff1c4 	.word	0x1ffff1c4
    1014:	1ffff1c4 	.word	0x1ffff1c4
    1018:	00000178 	.word	0x00000178

0000101c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
    101c:	b590      	push	{r4, r7, lr}
    101e:	b085      	sub	sp, #20
    1020:	af00      	add	r7, sp, #0
    1022:	0002      	movs	r2, r0
    1024:	1dfb      	adds	r3, r7, #7
    1026:	701a      	strb	r2, [r3, #0]
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1028:	230f      	movs	r3, #15
    102a:	18fc      	adds	r4, r7, r3
    102c:	1dfb      	adds	r3, r7, #7
    102e:	781b      	ldrb	r3, [r3, #0]
    1030:	0018      	movs	r0, r3
    1032:	4b16      	ldr	r3, [pc, #88]	; (108c <sd_mmc_check+0x70>)
    1034:	447b      	add	r3, pc
    1036:	4798      	blx	r3
    1038:	0003      	movs	r3, r0
    103a:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
    103c:	230f      	movs	r3, #15
    103e:	18fb      	adds	r3, r7, r3
    1040:	781b      	ldrb	r3, [r3, #0]
    1042:	2b01      	cmp	r3, #1
    1044:	d006      	beq.n	1054 <sd_mmc_check+0x38>
		sd_mmc_deselect_slot();
    1046:	4b12      	ldr	r3, [pc, #72]	; (1090 <sd_mmc_check+0x74>)
    1048:	447b      	add	r3, pc
    104a:	4798      	blx	r3
		return sd_mmc_err;
    104c:	230f      	movs	r3, #15
    104e:	18fb      	adds	r3, r7, r3
    1050:	781b      	ldrb	r3, [r3, #0]
    1052:	e017      	b.n	1084 <sd_mmc_check+0x68>
	}

	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
    1054:	4b0f      	ldr	r3, [pc, #60]	; (1094 <sd_mmc_check+0x78>)
    1056:	447b      	add	r3, pc
    1058:	4798      	blx	r3
    105a:	1e03      	subs	r3, r0, #0
    105c:	d009      	beq.n	1072 <sd_mmc_check+0x56>
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
    105e:	4b0e      	ldr	r3, [pc, #56]	; (1098 <sd_mmc_check+0x7c>)
    1060:	447b      	add	r3, pc
    1062:	681b      	ldr	r3, [r3, #0]
    1064:	2200      	movs	r2, #0
    1066:	729a      	strb	r2, [r3, #10]
		sd_mmc_deselect_slot();
    1068:	4b0c      	ldr	r3, [pc, #48]	; (109c <sd_mmc_check+0x80>)
    106a:	447b      	add	r3, pc
    106c:	4798      	blx	r3
		// To notify that the card has been just initialized
		// It is necessary for USB Device MSC
		return SD_MMC_INIT_ONGOING;
    106e:	2301      	movs	r3, #1
    1070:	e008      	b.n	1084 <sd_mmc_check+0x68>
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
    1072:	4b0b      	ldr	r3, [pc, #44]	; (10a0 <sd_mmc_check+0x84>)
    1074:	447b      	add	r3, pc
    1076:	681b      	ldr	r3, [r3, #0]
    1078:	2203      	movs	r2, #3
    107a:	729a      	strb	r2, [r3, #10]
	sd_mmc_deselect_slot();
    107c:	4b09      	ldr	r3, [pc, #36]	; (10a4 <sd_mmc_check+0x88>)
    107e:	447b      	add	r3, pc
    1080:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
    1082:	2303      	movs	r3, #3
}
    1084:	0018      	movs	r0, r3
    1086:	46bd      	mov	sp, r7
    1088:	b005      	add	sp, #20
    108a:	bd90      	pop	{r4, r7, pc}
    108c:	fffffaed 	.word	0xfffffaed
    1090:	fffffc21 	.word	0xfffffc21
    1094:	fffffc4b 	.word	0xfffffc4b
    1098:	1ffff160 	.word	0x1ffff160
    109c:	fffffbff 	.word	0xfffffbff
    10a0:	1ffff14c 	.word	0x1ffff14c
    10a4:	fffffbeb 	.word	0xfffffbeb

000010a8 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
    10a8:	b580      	push	{r7, lr}
    10aa:	b082      	sub	sp, #8
    10ac:	af00      	add	r7, sp, #0
    10ae:	0002      	movs	r2, r0
    10b0:	1dfb      	adds	r3, r7, #7
    10b2:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10b4:	1dfb      	adds	r3, r7, #7
    10b6:	781b      	ldrb	r3, [r3, #0]
    10b8:	0018      	movs	r0, r3
    10ba:	4b09      	ldr	r3, [pc, #36]	; (10e0 <sd_mmc_get_type+0x38>)
    10bc:	447b      	add	r3, pc
    10be:	4798      	blx	r3
    10c0:	1e03      	subs	r3, r0, #0
    10c2:	d001      	beq.n	10c8 <sd_mmc_get_type+0x20>
		return CARD_TYPE_UNKNOWN;
    10c4:	2300      	movs	r3, #0
    10c6:	e006      	b.n	10d6 <sd_mmc_get_type+0x2e>
	}
	sd_mmc_deselect_slot();
    10c8:	4b06      	ldr	r3, [pc, #24]	; (10e4 <sd_mmc_get_type+0x3c>)
    10ca:	447b      	add	r3, pc
    10cc:	4798      	blx	r3
	return sd_mmc_card->type;
    10ce:	4b06      	ldr	r3, [pc, #24]	; (10e8 <sd_mmc_get_type+0x40>)
    10d0:	447b      	add	r3, pc
    10d2:	681b      	ldr	r3, [r3, #0]
    10d4:	7adb      	ldrb	r3, [r3, #11]
}
    10d6:	0018      	movs	r0, r3
    10d8:	46bd      	mov	sp, r7
    10da:	b002      	add	sp, #8
    10dc:	bd80      	pop	{r7, pc}
    10de:	46c0      	nop			; (mov r8, r8)
    10e0:	fffffa65 	.word	0xfffffa65
    10e4:	fffffb9f 	.word	0xfffffb9f
    10e8:	1ffff0f0 	.word	0x1ffff0f0

000010ec <sd_mmc_get_capacity>:
	sd_mmc_deselect_slot();
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
    10ec:	b580      	push	{r7, lr}
    10ee:	b082      	sub	sp, #8
    10f0:	af00      	add	r7, sp, #0
    10f2:	0002      	movs	r2, r0
    10f4:	1dfb      	adds	r3, r7, #7
    10f6:	701a      	strb	r2, [r3, #0]
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
    10f8:	1dfb      	adds	r3, r7, #7
    10fa:	781b      	ldrb	r3, [r3, #0]
    10fc:	0018      	movs	r0, r3
    10fe:	4b09      	ldr	r3, [pc, #36]	; (1124 <sd_mmc_get_capacity+0x38>)
    1100:	447b      	add	r3, pc
    1102:	4798      	blx	r3
    1104:	1e03      	subs	r3, r0, #0
    1106:	d001      	beq.n	110c <sd_mmc_get_capacity+0x20>
		return 0;
    1108:	2300      	movs	r3, #0
    110a:	e006      	b.n	111a <sd_mmc_get_capacity+0x2e>
	}
	sd_mmc_deselect_slot();
    110c:	4b06      	ldr	r3, [pc, #24]	; (1128 <sd_mmc_get_capacity+0x3c>)
    110e:	447b      	add	r3, pc
    1110:	4798      	blx	r3
	return sd_mmc_card->capacity;
    1112:	4b06      	ldr	r3, [pc, #24]	; (112c <sd_mmc_get_capacity+0x40>)
    1114:	447b      	add	r3, pc
    1116:	681b      	ldr	r3, [r3, #0]
    1118:	685b      	ldr	r3, [r3, #4]
}
    111a:	0018      	movs	r0, r3
    111c:	46bd      	mov	sp, r7
    111e:	b002      	add	sp, #8
    1120:	bd80      	pop	{r7, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	fffffa21 	.word	0xfffffa21
    1128:	fffffb5b 	.word	0xfffffb5b
    112c:	1ffff0ac 	.word	0x1ffff0ac

00001130 <sd_mmc_is_write_protected>:

bool sd_mmc_is_write_protected(uint8_t slot)
{
    1130:	b580      	push	{r7, lr}
    1132:	b082      	sub	sp, #8
    1134:	af00      	add	r7, sp, #0
    1136:	0002      	movs	r2, r0
    1138:	1dfb      	adds	r3, r7, #7
    113a:	701a      	strb	r2, [r3, #0]
	if (port_pin_get_input_level(sd_mmc_cards[slot].wp_gpio)
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
    113c:	2300      	movs	r3, #0
}
    113e:	0018      	movs	r0, r3
    1140:	46bd      	mov	sp, r7
    1142:	b002      	add	sp, #8
    1144:	bd80      	pop	{r7, pc}
	...

00001148 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1148:	b5b0      	push	{r4, r5, r7, lr}
    114a:	b088      	sub	sp, #32
    114c:	af02      	add	r7, sp, #8
    114e:	6039      	str	r1, [r7, #0]
    1150:	0011      	movs	r1, r2
    1152:	1dfb      	adds	r3, r7, #7
    1154:	1c02      	adds	r2, r0, #0
    1156:	701a      	strb	r2, [r3, #0]
    1158:	1d3b      	adds	r3, r7, #4
    115a:	1c0a      	adds	r2, r1, #0
    115c:	801a      	strh	r2, [r3, #0]
    115e:	4d31      	ldr	r5, [pc, #196]	; (1224 <sd_mmc_init_read_blocks+0xdc>)
    1160:	447d      	add	r5, pc
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    1162:	230f      	movs	r3, #15
    1164:	18fc      	adds	r4, r7, r3
    1166:	1dfb      	adds	r3, r7, #7
    1168:	781b      	ldrb	r3, [r3, #0]
    116a:	0018      	movs	r0, r3
    116c:	4b2e      	ldr	r3, [pc, #184]	; (1228 <sd_mmc_init_read_blocks+0xe0>)
    116e:	447b      	add	r3, pc
    1170:	4798      	blx	r3
    1172:	0003      	movs	r3, r0
    1174:	7023      	strb	r3, [r4, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    1176:	230f      	movs	r3, #15
    1178:	18fb      	adds	r3, r7, r3
    117a:	781b      	ldrb	r3, [r3, #0]
    117c:	2b00      	cmp	r3, #0
    117e:	d003      	beq.n	1188 <sd_mmc_init_read_blocks+0x40>
		return sd_mmc_err;
    1180:	230f      	movs	r3, #15
    1182:	18fb      	adds	r3, r7, r3
    1184:	781b      	ldrb	r3, [r3, #0]
    1186:	e048      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
    1188:	4b28      	ldr	r3, [pc, #160]	; (122c <sd_mmc_init_read_blocks+0xe4>)
    118a:	447b      	add	r3, pc
    118c:	4798      	blx	r3
    118e:	0003      	movs	r3, r0
    1190:	001a      	movs	r2, r3
    1192:	2301      	movs	r3, #1
    1194:	4053      	eors	r3, r2
    1196:	b2db      	uxtb	r3, r3
    1198:	2b00      	cmp	r3, #0
    119a:	d004      	beq.n	11a6 <sd_mmc_init_read_blocks+0x5e>
		sd_mmc_deselect_slot();
    119c:	4b24      	ldr	r3, [pc, #144]	; (1230 <sd_mmc_init_read_blocks+0xe8>)
    119e:	447b      	add	r3, pc
    11a0:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    11a2:	2305      	movs	r3, #5
    11a4:	e039      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
	}

	if (nb_block > 1) {
    11a6:	1d3b      	adds	r3, r7, #4
    11a8:	881b      	ldrh	r3, [r3, #0]
    11aa:	2b01      	cmp	r3, #1
    11ac:	d902      	bls.n	11b4 <sd_mmc_init_read_blocks+0x6c>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
    11ae:	4b21      	ldr	r3, [pc, #132]	; (1234 <sd_mmc_init_read_blocks+0xec>)
    11b0:	617b      	str	r3, [r7, #20]
    11b2:	e001      	b.n	11b8 <sd_mmc_init_read_blocks+0x70>
	} else {
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
    11b4:	4b20      	ldr	r3, [pc, #128]	; (1238 <sd_mmc_init_read_blocks+0xf0>)
    11b6:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    11b8:	4b20      	ldr	r3, [pc, #128]	; (123c <sd_mmc_init_read_blocks+0xf4>)
    11ba:	447b      	add	r3, pc
    11bc:	681b      	ldr	r3, [r3, #0]
    11be:	7adb      	ldrb	r3, [r3, #11]
    11c0:	001a      	movs	r2, r3
    11c2:	2308      	movs	r3, #8
    11c4:	4013      	ands	r3, r2
    11c6:	d002      	beq.n	11ce <sd_mmc_init_read_blocks+0x86>
		arg = start;
    11c8:	683b      	ldr	r3, [r7, #0]
    11ca:	613b      	str	r3, [r7, #16]
    11cc:	e002      	b.n	11d4 <sd_mmc_init_read_blocks+0x8c>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    11ce:	683b      	ldr	r3, [r7, #0]
    11d0:	025b      	lsls	r3, r3, #9
    11d2:	613b      	str	r3, [r7, #16]
	}

	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    11d4:	1d3b      	adds	r3, r7, #4
    11d6:	881c      	ldrh	r4, [r3, #0]
    11d8:	2380      	movs	r3, #128	; 0x80
    11da:	009a      	lsls	r2, r3, #2
    11dc:	6939      	ldr	r1, [r7, #16]
    11de:	6978      	ldr	r0, [r7, #20]
    11e0:	2301      	movs	r3, #1
    11e2:	9300      	str	r3, [sp, #0]
    11e4:	0023      	movs	r3, r4
    11e6:	4c16      	ldr	r4, [pc, #88]	; (1240 <sd_mmc_init_read_blocks+0xf8>)
    11e8:	592c      	ldr	r4, [r5, r4]
    11ea:	47a0      	blx	r4
    11ec:	0003      	movs	r3, r0
    11ee:	001a      	movs	r2, r3
    11f0:	2301      	movs	r3, #1
    11f2:	4053      	eors	r3, r2
    11f4:	b2db      	uxtb	r3, r3
    11f6:	2b00      	cmp	r3, #0
    11f8:	d004      	beq.n	1204 <sd_mmc_init_read_blocks+0xbc>
		sd_mmc_deselect_slot();
    11fa:	4b12      	ldr	r3, [pc, #72]	; (1244 <sd_mmc_init_read_blocks+0xfc>)
    11fc:	447b      	add	r3, pc
    11fe:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1200:	2305      	movs	r3, #5
    1202:	e00a      	b.n	121a <sd_mmc_init_read_blocks+0xd2>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    1204:	4b10      	ldr	r3, [pc, #64]	; (1248 <sd_mmc_init_read_blocks+0x100>)
    1206:	447b      	add	r3, pc
    1208:	1d3a      	adds	r2, r7, #4
    120a:	8812      	ldrh	r2, [r2, #0]
    120c:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    120e:	4b0f      	ldr	r3, [pc, #60]	; (124c <sd_mmc_init_read_blocks+0x104>)
    1210:	447b      	add	r3, pc
    1212:	1d3a      	adds	r2, r7, #4
    1214:	8812      	ldrh	r2, [r2, #0]
    1216:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1218:	2300      	movs	r3, #0
}
    121a:	0018      	movs	r0, r3
    121c:	46bd      	mov	sp, r7
    121e:	b006      	add	sp, #24
    1220:	bdb0      	pop	{r4, r5, r7, pc}
    1222:	46c0      	nop			; (mov r8, r8)
    1224:	00010c70 	.word	0x00010c70
    1228:	fffff9b3 	.word	0xfffff9b3
    122c:	fffff7ef 	.word	0xfffff7ef
    1230:	fffffacb 	.word	0xfffffacb
    1234:	00101112 	.word	0x00101112
    1238:	00081111 	.word	0x00081111
    123c:	1ffff006 	.word	0x1ffff006
    1240:	00000130 	.word	0x00000130
    1244:	fffffa6d 	.word	0xfffffa6d
    1248:	1fffefc0 	.word	0x1fffefc0
    124c:	1fffefb4 	.word	0x1fffefb4

00001250 <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
    1250:	b580      	push	{r7, lr}
    1252:	b082      	sub	sp, #8
    1254:	af00      	add	r7, sp, #0
    1256:	6078      	str	r0, [r7, #4]
    1258:	000a      	movs	r2, r1
    125a:	1cbb      	adds	r3, r7, #2
    125c:	801a      	strh	r2, [r3, #0]
    125e:	4a12      	ldr	r2, [pc, #72]	; (12a8 <sd_mmc_start_read_blocks+0x58>)
    1260:	447a      	add	r2, pc
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
    1262:	1cbb      	adds	r3, r7, #2
    1264:	8819      	ldrh	r1, [r3, #0]
    1266:	687b      	ldr	r3, [r7, #4]
    1268:	0018      	movs	r0, r3
    126a:	4b10      	ldr	r3, [pc, #64]	; (12ac <sd_mmc_start_read_blocks+0x5c>)
    126c:	58d3      	ldr	r3, [r2, r3]
    126e:	4798      	blx	r3
    1270:	0003      	movs	r3, r0
    1272:	001a      	movs	r2, r3
    1274:	2301      	movs	r3, #1
    1276:	4053      	eors	r3, r2
    1278:	b2db      	uxtb	r3, r3
    127a:	2b00      	cmp	r3, #0
    127c:	d005      	beq.n	128a <sd_mmc_start_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    127e:	4b0c      	ldr	r3, [pc, #48]	; (12b0 <sd_mmc_start_read_blocks+0x60>)
    1280:	447b      	add	r3, pc
    1282:	2200      	movs	r2, #0
    1284:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    1286:	2305      	movs	r3, #5
    1288:	e00a      	b.n	12a0 <sd_mmc_start_read_blocks+0x50>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    128a:	4b0a      	ldr	r3, [pc, #40]	; (12b4 <sd_mmc_start_read_blocks+0x64>)
    128c:	447b      	add	r3, pc
    128e:	881a      	ldrh	r2, [r3, #0]
    1290:	1cbb      	adds	r3, r7, #2
    1292:	881b      	ldrh	r3, [r3, #0]
    1294:	1ad3      	subs	r3, r2, r3
    1296:	b29a      	uxth	r2, r3
    1298:	4b07      	ldr	r3, [pc, #28]	; (12b8 <sd_mmc_start_read_blocks+0x68>)
    129a:	447b      	add	r3, pc
    129c:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    129e:	2300      	movs	r3, #0
}
    12a0:	0018      	movs	r0, r3
    12a2:	46bd      	mov	sp, r7
    12a4:	b002      	add	sp, #8
    12a6:	bd80      	pop	{r7, pc}
    12a8:	00010b70 	.word	0x00010b70
    12ac:	00000208 	.word	0x00000208
    12b0:	1fffef46 	.word	0x1fffef46
    12b4:	1fffef3a 	.word	0x1fffef3a
    12b8:	1fffef2c 	.word	0x1fffef2c

000012bc <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
    12bc:	b590      	push	{r4, r7, lr}
    12be:	b083      	sub	sp, #12
    12c0:	af00      	add	r7, sp, #0
    12c2:	0002      	movs	r2, r0
    12c4:	1dfb      	adds	r3, r7, #7
    12c6:	701a      	strb	r2, [r3, #0]
    12c8:	4c21      	ldr	r4, [pc, #132]	; (1350 <sd_mmc_wait_end_of_read_blocks+0x94>)
    12ca:	447c      	add	r4, pc
	if (!driver_wait_end_of_read_blocks()) {
    12cc:	4b21      	ldr	r3, [pc, #132]	; (1354 <sd_mmc_wait_end_of_read_blocks+0x98>)
    12ce:	58e3      	ldr	r3, [r4, r3]
    12d0:	4798      	blx	r3
    12d2:	0003      	movs	r3, r0
    12d4:	001a      	movs	r2, r3
    12d6:	2301      	movs	r3, #1
    12d8:	4053      	eors	r3, r2
    12da:	b2db      	uxtb	r3, r3
    12dc:	2b00      	cmp	r3, #0
    12de:	d001      	beq.n	12e4 <sd_mmc_wait_end_of_read_blocks+0x28>
		return SD_MMC_ERR_COMM;
    12e0:	2305      	movs	r3, #5
    12e2:	e030      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}
	if (abort) {
    12e4:	1dfb      	adds	r3, r7, #7
    12e6:	781b      	ldrb	r3, [r3, #0]
    12e8:	2b00      	cmp	r3, #0
    12ea:	d004      	beq.n	12f6 <sd_mmc_wait_end_of_read_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    12ec:	4b1a      	ldr	r3, [pc, #104]	; (1358 <sd_mmc_wait_end_of_read_blocks+0x9c>)
    12ee:	447b      	add	r3, pc
    12f0:	2200      	movs	r2, #0
    12f2:	801a      	strh	r2, [r3, #0]
    12f4:	e006      	b.n	1304 <sd_mmc_wait_end_of_read_blocks+0x48>
	} else if (sd_mmc_nb_block_remaining) {
    12f6:	4b19      	ldr	r3, [pc, #100]	; (135c <sd_mmc_wait_end_of_read_blocks+0xa0>)
    12f8:	447b      	add	r3, pc
    12fa:	881b      	ldrh	r3, [r3, #0]
    12fc:	2b00      	cmp	r3, #0
    12fe:	d001      	beq.n	1304 <sd_mmc_wait_end_of_read_blocks+0x48>
		return SD_MMC_OK;
    1300:	2300      	movs	r3, #0
    1302:	e020      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    1304:	4b16      	ldr	r3, [pc, #88]	; (1360 <sd_mmc_wait_end_of_read_blocks+0xa4>)
    1306:	447b      	add	r3, pc
    1308:	881b      	ldrh	r3, [r3, #0]
    130a:	2b01      	cmp	r3, #1
    130c:	d104      	bne.n	1318 <sd_mmc_wait_end_of_read_blocks+0x5c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    130e:	4b15      	ldr	r3, [pc, #84]	; (1364 <sd_mmc_wait_end_of_read_blocks+0xa8>)
    1310:	447b      	add	r3, pc
    1312:	4798      	blx	r3
		return SD_MMC_OK;
    1314:	2300      	movs	r3, #0
    1316:	e016      	b.n	1346 <sd_mmc_wait_end_of_read_blocks+0x8a>
	}
	// WORKAROUND for no compliance card (Atmel Internal ref. !MMC7 !SD19):
	// The errors on this command must be ignored
	// and one retry can be necessary in SPI mode for no compliance card.
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
    1318:	4b13      	ldr	r3, [pc, #76]	; (1368 <sd_mmc_wait_end_of_read_blocks+0xac>)
    131a:	2100      	movs	r1, #0
    131c:	0018      	movs	r0, r3
    131e:	4b13      	ldr	r3, [pc, #76]	; (136c <sd_mmc_wait_end_of_read_blocks+0xb0>)
    1320:	58e3      	ldr	r3, [r4, r3]
    1322:	4798      	blx	r3
    1324:	0003      	movs	r3, r0
    1326:	001a      	movs	r2, r3
    1328:	2301      	movs	r3, #1
    132a:	4053      	eors	r3, r2
    132c:	b2db      	uxtb	r3, r3
    132e:	2b00      	cmp	r3, #0
    1330:	d005      	beq.n	133e <sd_mmc_wait_end_of_read_blocks+0x82>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
    1332:	4b0d      	ldr	r3, [pc, #52]	; (1368 <sd_mmc_wait_end_of_read_blocks+0xac>)
    1334:	2100      	movs	r1, #0
    1336:	0018      	movs	r0, r3
    1338:	4b0c      	ldr	r3, [pc, #48]	; (136c <sd_mmc_wait_end_of_read_blocks+0xb0>)
    133a:	58e3      	ldr	r3, [r4, r3]
    133c:	4798      	blx	r3
	}
	sd_mmc_deselect_slot();
    133e:	4b0c      	ldr	r3, [pc, #48]	; (1370 <sd_mmc_wait_end_of_read_blocks+0xb4>)
    1340:	447b      	add	r3, pc
    1342:	4798      	blx	r3
	return SD_MMC_OK;
    1344:	2300      	movs	r3, #0
}
    1346:	0018      	movs	r0, r3
    1348:	46bd      	mov	sp, r7
    134a:	b003      	add	sp, #12
    134c:	bd90      	pop	{r4, r7, pc}
    134e:	46c0      	nop			; (mov r8, r8)
    1350:	00010b06 	.word	0x00010b06
    1354:	00000184 	.word	0x00000184
    1358:	1fffeed8 	.word	0x1fffeed8
    135c:	1fffeece 	.word	0x1fffeece
    1360:	1fffeebe 	.word	0x1fffeebe
    1364:	fffff959 	.word	0xfffff959
    1368:	0000310c 	.word	0x0000310c
    136c:	0000025c 	.word	0x0000025c
    1370:	fffff929 	.word	0xfffff929

00001374 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
    1374:	b5b0      	push	{r4, r5, r7, lr}
    1376:	b088      	sub	sp, #32
    1378:	af02      	add	r7, sp, #8
    137a:	6039      	str	r1, [r7, #0]
    137c:	0011      	movs	r1, r2
    137e:	1dfb      	adds	r3, r7, #7
    1380:	1c02      	adds	r2, r0, #0
    1382:	701a      	strb	r2, [r3, #0]
    1384:	1d3b      	adds	r3, r7, #4
    1386:	1c0a      	adds	r2, r1, #0
    1388:	801a      	strh	r2, [r3, #0]
    138a:	4c30      	ldr	r4, [pc, #192]	; (144c <sd_mmc_init_write_blocks+0xd8>)
    138c:	447c      	add	r4, pc
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
    138e:	230f      	movs	r3, #15
    1390:	18fd      	adds	r5, r7, r3
    1392:	1dfb      	adds	r3, r7, #7
    1394:	781b      	ldrb	r3, [r3, #0]
    1396:	0018      	movs	r0, r3
    1398:	4b2d      	ldr	r3, [pc, #180]	; (1450 <sd_mmc_init_write_blocks+0xdc>)
    139a:	447b      	add	r3, pc
    139c:	4798      	blx	r3
    139e:	0003      	movs	r3, r0
    13a0:	702b      	strb	r3, [r5, #0]
	if (sd_mmc_err != SD_MMC_OK) {
    13a2:	230f      	movs	r3, #15
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	781b      	ldrb	r3, [r3, #0]
    13a8:	2b00      	cmp	r3, #0
    13aa:	d003      	beq.n	13b4 <sd_mmc_init_write_blocks+0x40>
		return sd_mmc_err;
    13ac:	230f      	movs	r3, #15
    13ae:	18fb      	adds	r3, r7, r3
    13b0:	781b      	ldrb	r3, [r3, #0]
    13b2:	e046      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
	}
	if (sd_mmc_is_write_protected(slot)) {
    13b4:	1dfb      	adds	r3, r7, #7
    13b6:	781b      	ldrb	r3, [r3, #0]
    13b8:	0018      	movs	r0, r3
    13ba:	4b26      	ldr	r3, [pc, #152]	; (1454 <sd_mmc_init_write_blocks+0xe0>)
    13bc:	58e3      	ldr	r3, [r4, r3]
    13be:	4798      	blx	r3
    13c0:	1e03      	subs	r3, r0, #0
    13c2:	d004      	beq.n	13ce <sd_mmc_init_write_blocks+0x5a>
		sd_mmc_deselect_slot();
    13c4:	4b24      	ldr	r3, [pc, #144]	; (1458 <sd_mmc_init_write_blocks+0xe4>)
    13c6:	447b      	add	r3, pc
    13c8:	4798      	blx	r3
		return SD_MMC_ERR_WP;
    13ca:	2307      	movs	r3, #7
    13cc:	e039      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
	}

	if (nb_block > 1) {
    13ce:	1d3b      	adds	r3, r7, #4
    13d0:	881b      	ldrh	r3, [r3, #0]
    13d2:	2b01      	cmp	r3, #1
    13d4:	d902      	bls.n	13dc <sd_mmc_init_write_blocks+0x68>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
    13d6:	4b21      	ldr	r3, [pc, #132]	; (145c <sd_mmc_init_write_blocks+0xe8>)
    13d8:	617b      	str	r3, [r7, #20]
    13da:	e001      	b.n	13e0 <sd_mmc_init_write_blocks+0x6c>
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
    13dc:	4b20      	ldr	r3, [pc, #128]	; (1460 <sd_mmc_init_write_blocks+0xec>)
    13de:	617b      	str	r3, [r7, #20]
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
    13e0:	4b20      	ldr	r3, [pc, #128]	; (1464 <sd_mmc_init_write_blocks+0xf0>)
    13e2:	447b      	add	r3, pc
    13e4:	681b      	ldr	r3, [r3, #0]
    13e6:	7adb      	ldrb	r3, [r3, #11]
    13e8:	001a      	movs	r2, r3
    13ea:	2308      	movs	r3, #8
    13ec:	4013      	ands	r3, r2
    13ee:	d002      	beq.n	13f6 <sd_mmc_init_write_blocks+0x82>
		arg = start;
    13f0:	683b      	ldr	r3, [r7, #0]
    13f2:	613b      	str	r3, [r7, #16]
    13f4:	e002      	b.n	13fc <sd_mmc_init_write_blocks+0x88>
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
    13f6:	683b      	ldr	r3, [r7, #0]
    13f8:	025b      	lsls	r3, r3, #9
    13fa:	613b      	str	r3, [r7, #16]
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
    13fc:	1d3b      	adds	r3, r7, #4
    13fe:	881d      	ldrh	r5, [r3, #0]
    1400:	2380      	movs	r3, #128	; 0x80
    1402:	009a      	lsls	r2, r3, #2
    1404:	6939      	ldr	r1, [r7, #16]
    1406:	6978      	ldr	r0, [r7, #20]
    1408:	2301      	movs	r3, #1
    140a:	9300      	str	r3, [sp, #0]
    140c:	002b      	movs	r3, r5
    140e:	4d16      	ldr	r5, [pc, #88]	; (1468 <sd_mmc_init_write_blocks+0xf4>)
    1410:	5964      	ldr	r4, [r4, r5]
    1412:	47a0      	blx	r4
    1414:	0003      	movs	r3, r0
    1416:	001a      	movs	r2, r3
    1418:	2301      	movs	r3, #1
    141a:	4053      	eors	r3, r2
    141c:	b2db      	uxtb	r3, r3
    141e:	2b00      	cmp	r3, #0
    1420:	d004      	beq.n	142c <sd_mmc_init_write_blocks+0xb8>
		sd_mmc_deselect_slot();
    1422:	4b12      	ldr	r3, [pc, #72]	; (146c <sd_mmc_init_write_blocks+0xf8>)
    1424:	447b      	add	r3, pc
    1426:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
    1428:	2305      	movs	r3, #5
    142a:	e00a      	b.n	1442 <sd_mmc_init_write_blocks+0xce>
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), resp);
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
    142c:	4b10      	ldr	r3, [pc, #64]	; (1470 <sd_mmc_init_write_blocks+0xfc>)
    142e:	447b      	add	r3, pc
    1430:	1d3a      	adds	r2, r7, #4
    1432:	8812      	ldrh	r2, [r2, #0]
    1434:	801a      	strh	r2, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
    1436:	4b0f      	ldr	r3, [pc, #60]	; (1474 <sd_mmc_init_write_blocks+0x100>)
    1438:	447b      	add	r3, pc
    143a:	1d3a      	adds	r2, r7, #4
    143c:	8812      	ldrh	r2, [r2, #0]
    143e:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    1440:	2300      	movs	r3, #0
}
    1442:	0018      	movs	r0, r3
    1444:	46bd      	mov	sp, r7
    1446:	b006      	add	sp, #24
    1448:	bdb0      	pop	{r4, r5, r7, pc}
    144a:	46c0      	nop			; (mov r8, r8)
    144c:	00010a44 	.word	0x00010a44
    1450:	fffff787 	.word	0xfffff787
    1454:	00000148 	.word	0x00000148
    1458:	fffff8a3 	.word	0xfffff8a3
    145c:	00109119 	.word	0x00109119
    1460:	00089118 	.word	0x00089118
    1464:	1fffedde 	.word	0x1fffedde
    1468:	00000130 	.word	0x00000130
    146c:	fffff845 	.word	0xfffff845
    1470:	1fffed98 	.word	0x1fffed98
    1474:	1fffed8c 	.word	0x1fffed8c

00001478 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
    1478:	b580      	push	{r7, lr}
    147a:	b082      	sub	sp, #8
    147c:	af00      	add	r7, sp, #0
    147e:	6078      	str	r0, [r7, #4]
    1480:	000a      	movs	r2, r1
    1482:	1cbb      	adds	r3, r7, #2
    1484:	801a      	strh	r2, [r3, #0]
    1486:	4a12      	ldr	r2, [pc, #72]	; (14d0 <sd_mmc_start_write_blocks+0x58>)
    1488:	447a      	add	r2, pc
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
    148a:	1cbb      	adds	r3, r7, #2
    148c:	8819      	ldrh	r1, [r3, #0]
    148e:	687b      	ldr	r3, [r7, #4]
    1490:	0018      	movs	r0, r3
    1492:	4b10      	ldr	r3, [pc, #64]	; (14d4 <sd_mmc_start_write_blocks+0x5c>)
    1494:	58d3      	ldr	r3, [r2, r3]
    1496:	4798      	blx	r3
    1498:	0003      	movs	r3, r0
    149a:	001a      	movs	r2, r3
    149c:	2301      	movs	r3, #1
    149e:	4053      	eors	r3, r2
    14a0:	b2db      	uxtb	r3, r3
    14a2:	2b00      	cmp	r3, #0
    14a4:	d005      	beq.n	14b2 <sd_mmc_start_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    14a6:	4b0c      	ldr	r3, [pc, #48]	; (14d8 <sd_mmc_start_write_blocks+0x60>)
    14a8:	447b      	add	r3, pc
    14aa:	2200      	movs	r2, #0
    14ac:	801a      	strh	r2, [r3, #0]
		return SD_MMC_ERR_COMM;
    14ae:	2305      	movs	r3, #5
    14b0:	e00a      	b.n	14c8 <sd_mmc_start_write_blocks+0x50>
	}
	sd_mmc_nb_block_remaining -= nb_block;
    14b2:	4b0a      	ldr	r3, [pc, #40]	; (14dc <sd_mmc_start_write_blocks+0x64>)
    14b4:	447b      	add	r3, pc
    14b6:	881a      	ldrh	r2, [r3, #0]
    14b8:	1cbb      	adds	r3, r7, #2
    14ba:	881b      	ldrh	r3, [r3, #0]
    14bc:	1ad3      	subs	r3, r2, r3
    14be:	b29a      	uxth	r2, r3
    14c0:	4b07      	ldr	r3, [pc, #28]	; (14e0 <sd_mmc_start_write_blocks+0x68>)
    14c2:	447b      	add	r3, pc
    14c4:	801a      	strh	r2, [r3, #0]
	return SD_MMC_OK;
    14c6:	2300      	movs	r3, #0
}
    14c8:	0018      	movs	r0, r3
    14ca:	46bd      	mov	sp, r7
    14cc:	b002      	add	sp, #8
    14ce:	bd80      	pop	{r7, pc}
    14d0:	00010948 	.word	0x00010948
    14d4:	000001d4 	.word	0x000001d4
    14d8:	1fffed1e 	.word	0x1fffed1e
    14dc:	1fffed12 	.word	0x1fffed12
    14e0:	1fffed04 	.word	0x1fffed04

000014e4 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
    14e4:	b580      	push	{r7, lr}
    14e6:	b082      	sub	sp, #8
    14e8:	af00      	add	r7, sp, #0
    14ea:	0002      	movs	r2, r0
    14ec:	1dfb      	adds	r3, r7, #7
    14ee:	701a      	strb	r2, [r3, #0]
    14f0:	4a17      	ldr	r2, [pc, #92]	; (1550 <sd_mmc_wait_end_of_write_blocks+0x6c>)
    14f2:	447a      	add	r2, pc
	if (!driver_wait_end_of_write_blocks()) {
    14f4:	4b17      	ldr	r3, [pc, #92]	; (1554 <sd_mmc_wait_end_of_write_blocks+0x70>)
    14f6:	58d3      	ldr	r3, [r2, r3]
    14f8:	4798      	blx	r3
    14fa:	0003      	movs	r3, r0
    14fc:	001a      	movs	r2, r3
    14fe:	2301      	movs	r3, #1
    1500:	4053      	eors	r3, r2
    1502:	b2db      	uxtb	r3, r3
    1504:	2b00      	cmp	r3, #0
    1506:	d001      	beq.n	150c <sd_mmc_wait_end_of_write_blocks+0x28>
		return SD_MMC_ERR_COMM;
    1508:	2305      	movs	r3, #5
    150a:	e01d      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
	}
	if (abort) {
    150c:	1dfb      	adds	r3, r7, #7
    150e:	781b      	ldrb	r3, [r3, #0]
    1510:	2b00      	cmp	r3, #0
    1512:	d004      	beq.n	151e <sd_mmc_wait_end_of_write_blocks+0x3a>
		sd_mmc_nb_block_remaining = 0;
    1514:	4b10      	ldr	r3, [pc, #64]	; (1558 <sd_mmc_wait_end_of_write_blocks+0x74>)
    1516:	447b      	add	r3, pc
    1518:	2200      	movs	r2, #0
    151a:	801a      	strh	r2, [r3, #0]
    151c:	e006      	b.n	152c <sd_mmc_wait_end_of_write_blocks+0x48>
	} else if (sd_mmc_nb_block_remaining) {
    151e:	4b0f      	ldr	r3, [pc, #60]	; (155c <sd_mmc_wait_end_of_write_blocks+0x78>)
    1520:	447b      	add	r3, pc
    1522:	881b      	ldrh	r3, [r3, #0]
    1524:	2b00      	cmp	r3, #0
    1526:	d001      	beq.n	152c <sd_mmc_wait_end_of_write_blocks+0x48>
		return SD_MMC_OK;
    1528:	2300      	movs	r3, #0
    152a:	e00d      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
    152c:	4b0c      	ldr	r3, [pc, #48]	; (1560 <sd_mmc_wait_end_of_write_blocks+0x7c>)
    152e:	447b      	add	r3, pc
    1530:	881b      	ldrh	r3, [r3, #0]
    1532:	2b01      	cmp	r3, #1
    1534:	d104      	bne.n	1540 <sd_mmc_wait_end_of_write_blocks+0x5c>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
    1536:	4b0b      	ldr	r3, [pc, #44]	; (1564 <sd_mmc_wait_end_of_write_blocks+0x80>)
    1538:	447b      	add	r3, pc
    153a:	4798      	blx	r3
		return SD_MMC_OK;
    153c:	2300      	movs	r3, #0
    153e:	e003      	b.n	1548 <sd_mmc_wait_end_of_write_blocks+0x64>
		if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
			sd_mmc_deselect_slot();
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
    1540:	4b09      	ldr	r3, [pc, #36]	; (1568 <sd_mmc_wait_end_of_write_blocks+0x84>)
    1542:	447b      	add	r3, pc
    1544:	4798      	blx	r3
	return SD_MMC_OK;
    1546:	2300      	movs	r3, #0
}
    1548:	0018      	movs	r0, r3
    154a:	46bd      	mov	sp, r7
    154c:	b002      	add	sp, #8
    154e:	bd80      	pop	{r7, pc}
    1550:	000108de 	.word	0x000108de
    1554:	00000234 	.word	0x00000234
    1558:	1fffecb0 	.word	0x1fffecb0
    155c:	1fffeca6 	.word	0x1fffeca6
    1560:	1fffec96 	.word	0x1fffec96
    1564:	fffff731 	.word	0xfffff731
    1568:	fffff727 	.word	0xfffff727

0000156c <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
    156c:	b590      	push	{r4, r7, lr}
    156e:	b083      	sub	sp, #12
    1570:	af00      	add	r7, sp, #0
    1572:	0002      	movs	r2, r0
    1574:	1dfb      	adds	r3, r7, #7
    1576:	701a      	strb	r2, [r3, #0]
    1578:	4c1a      	ldr	r4, [pc, #104]	; (15e4 <sd_mmc_test_unit_ready+0x78>)
    157a:	447c      	add	r4, pc
	switch (sd_mmc_check(slot))
    157c:	1dfb      	adds	r3, r7, #7
    157e:	781b      	ldrb	r3, [r3, #0]
    1580:	0018      	movs	r0, r3
    1582:	4b19      	ldr	r3, [pc, #100]	; (15e8 <sd_mmc_test_unit_ready+0x7c>)
    1584:	58e3      	ldr	r3, [r4, r3]
    1586:	4798      	blx	r3
    1588:	0003      	movs	r3, r0
    158a:	2b01      	cmp	r3, #1
    158c:	d01b      	beq.n	15c6 <sd_mmc_test_unit_ready+0x5a>
    158e:	2b02      	cmp	r3, #2
    1590:	d01b      	beq.n	15ca <sd_mmc_test_unit_ready+0x5e>
    1592:	2b00      	cmp	r3, #0
    1594:	d121      	bne.n	15da <sd_mmc_test_unit_ready+0x6e>
	{
	case SD_MMC_OK:
		if (sd_mmc_ejected[slot]) {
    1596:	1dfb      	adds	r3, r7, #7
    1598:	781b      	ldrb	r3, [r3, #0]
    159a:	4a14      	ldr	r2, [pc, #80]	; (15ec <sd_mmc_test_unit_ready+0x80>)
    159c:	447a      	add	r2, pc
    159e:	5cd3      	ldrb	r3, [r2, r3]
    15a0:	2b00      	cmp	r3, #0
    15a2:	d001      	beq.n	15a8 <sd_mmc_test_unit_ready+0x3c>
			return CTRL_NO_PRESENT;
    15a4:	2302      	movs	r3, #2
    15a6:	e019      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
		}
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
    15a8:	1dfb      	adds	r3, r7, #7
    15aa:	781b      	ldrb	r3, [r3, #0]
    15ac:	0018      	movs	r0, r3
    15ae:	4b10      	ldr	r3, [pc, #64]	; (15f0 <sd_mmc_test_unit_ready+0x84>)
    15b0:	58e3      	ldr	r3, [r4, r3]
    15b2:	4798      	blx	r3
    15b4:	0003      	movs	r3, r0
    15b6:	001a      	movs	r2, r3
    15b8:	2303      	movs	r3, #3
    15ba:	4013      	ands	r3, r2
    15bc:	d001      	beq.n	15c2 <sd_mmc_test_unit_ready+0x56>
			return CTRL_GOOD;
    15be:	2300      	movs	r3, #0
    15c0:	e00c      	b.n	15dc <sd_mmc_test_unit_ready+0x70>
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;
    15c2:	2302      	movs	r3, #2
    15c4:	e00a      	b.n	15dc <sd_mmc_test_unit_ready+0x70>

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
    15c6:	2303      	movs	r3, #3
    15c8:	e008      	b.n	15dc <sd_mmc_test_unit_ready+0x70>

	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
    15ca:	1dfb      	adds	r3, r7, #7
    15cc:	781b      	ldrb	r3, [r3, #0]
    15ce:	4a09      	ldr	r2, [pc, #36]	; (15f4 <sd_mmc_test_unit_ready+0x88>)
    15d0:	447a      	add	r2, pc
    15d2:	2100      	movs	r1, #0
    15d4:	54d1      	strb	r1, [r2, r3]
		return CTRL_NO_PRESENT;
    15d6:	2302      	movs	r3, #2
    15d8:	e000      	b.n	15dc <sd_mmc_test_unit_ready+0x70>

	default:
		return CTRL_FAIL;
    15da:	2301      	movs	r3, #1
	}
}
    15dc:	0018      	movs	r0, r3
    15de:	46bd      	mov	sp, r7
    15e0:	b003      	add	sp, #12
    15e2:	bd90      	pop	{r4, r7, pc}
    15e4:	00010856 	.word	0x00010856
    15e8:	00000068 	.word	0x00000068
    15ec:	1fffec2c 	.word	0x1fffec2c
    15f0:	000000e8 	.word	0x000000e8
    15f4:	1fffebf8 	.word	0x1fffebf8

000015f8 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
    15f8:	b580      	push	{r7, lr}
    15fa:	af00      	add	r7, sp, #0
    15fc:	4a04      	ldr	r2, [pc, #16]	; (1610 <sd_mmc_test_unit_ready_0+0x18>)
    15fe:	447a      	add	r2, pc
	return sd_mmc_test_unit_ready(0);
    1600:	2000      	movs	r0, #0
    1602:	4b04      	ldr	r3, [pc, #16]	; (1614 <sd_mmc_test_unit_ready_0+0x1c>)
    1604:	58d3      	ldr	r3, [r2, r3]
    1606:	4798      	blx	r3
    1608:	0003      	movs	r3, r0
}
    160a:	0018      	movs	r0, r3
    160c:	46bd      	mov	sp, r7
    160e:	bd80      	pop	{r7, pc}
    1610:	000107d2 	.word	0x000107d2
    1614:	00000048 	.word	0x00000048

00001618 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
    1618:	b590      	push	{r4, r7, lr}
    161a:	b083      	sub	sp, #12
    161c:	af00      	add	r7, sp, #0
    161e:	0002      	movs	r2, r0
    1620:	6039      	str	r1, [r7, #0]
    1622:	1dfb      	adds	r3, r7, #7
    1624:	701a      	strb	r2, [r3, #0]
    1626:	4c0c      	ldr	r4, [pc, #48]	; (1658 <sd_mmc_read_capacity+0x40>)
    1628:	447c      	add	r4, pc
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
    162a:	1dfb      	adds	r3, r7, #7
    162c:	781b      	ldrb	r3, [r3, #0]
    162e:	0018      	movs	r0, r3
    1630:	4b0a      	ldr	r3, [pc, #40]	; (165c <sd_mmc_read_capacity+0x44>)
    1632:	58e3      	ldr	r3, [r4, r3]
    1634:	4798      	blx	r3
    1636:	0003      	movs	r3, r0
    1638:	005b      	lsls	r3, r3, #1
    163a:	1e5a      	subs	r2, r3, #1
    163c:	683b      	ldr	r3, [r7, #0]
    163e:	601a      	str	r2, [r3, #0]
	return sd_mmc_test_unit_ready(slot);
    1640:	1dfb      	adds	r3, r7, #7
    1642:	781b      	ldrb	r3, [r3, #0]
    1644:	0018      	movs	r0, r3
    1646:	4b06      	ldr	r3, [pc, #24]	; (1660 <sd_mmc_read_capacity+0x48>)
    1648:	58e3      	ldr	r3, [r4, r3]
    164a:	4798      	blx	r3
    164c:	0003      	movs	r3, r0
}
    164e:	0018      	movs	r0, r3
    1650:	46bd      	mov	sp, r7
    1652:	b003      	add	sp, #12
    1654:	bd90      	pop	{r4, r7, pc}
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	000107a8 	.word	0x000107a8
    165c:	000002f4 	.word	0x000002f4
    1660:	00000048 	.word	0x00000048

00001664 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
    1664:	b580      	push	{r7, lr}
    1666:	b082      	sub	sp, #8
    1668:	af00      	add	r7, sp, #0
    166a:	6078      	str	r0, [r7, #4]
    166c:	4a06      	ldr	r2, [pc, #24]	; (1688 <sd_mmc_read_capacity_0+0x24>)
    166e:	447a      	add	r2, pc
	return sd_mmc_read_capacity(0, nb_sector);
    1670:	687b      	ldr	r3, [r7, #4]
    1672:	0019      	movs	r1, r3
    1674:	2000      	movs	r0, #0
    1676:	4b05      	ldr	r3, [pc, #20]	; (168c <sd_mmc_read_capacity_0+0x28>)
    1678:	58d3      	ldr	r3, [r2, r3]
    167a:	4798      	blx	r3
    167c:	0003      	movs	r3, r0
}
    167e:	0018      	movs	r0, r3
    1680:	46bd      	mov	sp, r7
    1682:	b002      	add	sp, #8
    1684:	bd80      	pop	{r7, pc}
    1686:	46c0      	nop			; (mov r8, r8)
    1688:	00010762 	.word	0x00010762
    168c:	00000150 	.word	0x00000150

00001690 <sd_mmc_unload>:
{
	return sd_mmc_read_capacity(1, nb_sector);
}

bool sd_mmc_unload(uint8_t slot, bool unload)
{
    1690:	b580      	push	{r7, lr}
    1692:	b082      	sub	sp, #8
    1694:	af00      	add	r7, sp, #0
    1696:	0002      	movs	r2, r0
    1698:	1dfb      	adds	r3, r7, #7
    169a:	701a      	strb	r2, [r3, #0]
    169c:	1dbb      	adds	r3, r7, #6
    169e:	1c0a      	adds	r2, r1, #0
    16a0:	701a      	strb	r2, [r3, #0]
	sd_mmc_ejected[slot] = unload;
    16a2:	1dfb      	adds	r3, r7, #7
    16a4:	781b      	ldrb	r3, [r3, #0]
    16a6:	4a05      	ldr	r2, [pc, #20]	; (16bc <sd_mmc_unload+0x2c>)
    16a8:	447a      	add	r2, pc
    16aa:	1db9      	adds	r1, r7, #6
    16ac:	7809      	ldrb	r1, [r1, #0]
    16ae:	54d1      	strb	r1, [r2, r3]
	return true;
    16b0:	2301      	movs	r3, #1
}
    16b2:	0018      	movs	r0, r3
    16b4:	46bd      	mov	sp, r7
    16b6:	b002      	add	sp, #8
    16b8:	bd80      	pop	{r7, pc}
    16ba:	46c0      	nop			; (mov r8, r8)
    16bc:	1fffeb20 	.word	0x1fffeb20

000016c0 <sd_mmc_unload_0>:

bool sd_mmc_unload_0(bool unload)
{
    16c0:	b580      	push	{r7, lr}
    16c2:	b082      	sub	sp, #8
    16c4:	af00      	add	r7, sp, #0
    16c6:	0002      	movs	r2, r0
    16c8:	1dfb      	adds	r3, r7, #7
    16ca:	701a      	strb	r2, [r3, #0]
    16cc:	4a06      	ldr	r2, [pc, #24]	; (16e8 <sd_mmc_unload_0+0x28>)
    16ce:	447a      	add	r2, pc
	return sd_mmc_unload(0, unload);
    16d0:	1dfb      	adds	r3, r7, #7
    16d2:	781b      	ldrb	r3, [r3, #0]
    16d4:	0019      	movs	r1, r3
    16d6:	2000      	movs	r0, #0
    16d8:	4b04      	ldr	r3, [pc, #16]	; (16ec <sd_mmc_unload_0+0x2c>)
    16da:	58d3      	ldr	r3, [r2, r3]
    16dc:	4798      	blx	r3
    16de:	0003      	movs	r3, r0
}
    16e0:	0018      	movs	r0, r3
    16e2:	46bd      	mov	sp, r7
    16e4:	b002      	add	sp, #8
    16e6:	bd80      	pop	{r7, pc}
    16e8:	00010702 	.word	0x00010702
    16ec:	000001b8 	.word	0x000001b8

000016f0 <sd_mmc_wr_protect>:
{
	return sd_mmc_unload(1, unload);
}

bool sd_mmc_wr_protect(uint8_t slot)
{
    16f0:	b580      	push	{r7, lr}
    16f2:	b082      	sub	sp, #8
    16f4:	af00      	add	r7, sp, #0
    16f6:	0002      	movs	r2, r0
    16f8:	1dfb      	adds	r3, r7, #7
    16fa:	701a      	strb	r2, [r3, #0]
    16fc:	4a06      	ldr	r2, [pc, #24]	; (1718 <sd_mmc_wr_protect+0x28>)
    16fe:	447a      	add	r2, pc
	return sd_mmc_is_write_protected(slot);
    1700:	1dfb      	adds	r3, r7, #7
    1702:	781b      	ldrb	r3, [r3, #0]
    1704:	0018      	movs	r0, r3
    1706:	4b05      	ldr	r3, [pc, #20]	; (171c <sd_mmc_wr_protect+0x2c>)
    1708:	58d3      	ldr	r3, [r2, r3]
    170a:	4798      	blx	r3
    170c:	0003      	movs	r3, r0
}
    170e:	0018      	movs	r0, r3
    1710:	46bd      	mov	sp, r7
    1712:	b002      	add	sp, #8
    1714:	bd80      	pop	{r7, pc}
    1716:	46c0      	nop			; (mov r8, r8)
    1718:	000106d2 	.word	0x000106d2
    171c:	00000148 	.word	0x00000148

00001720 <sd_mmc_wr_protect_0>:

bool sd_mmc_wr_protect_0(void)
{
    1720:	b580      	push	{r7, lr}
    1722:	af00      	add	r7, sp, #0
    1724:	4a04      	ldr	r2, [pc, #16]	; (1738 <sd_mmc_wr_protect_0+0x18>)
    1726:	447a      	add	r2, pc
	return sd_mmc_wr_protect(0);
    1728:	2000      	movs	r0, #0
    172a:	4b04      	ldr	r3, [pc, #16]	; (173c <sd_mmc_wr_protect_0+0x1c>)
    172c:	58d3      	ldr	r3, [r2, r3]
    172e:	4798      	blx	r3
    1730:	0003      	movs	r3, r0
}
    1732:	0018      	movs	r0, r3
    1734:	46bd      	mov	sp, r7
    1736:	bd80      	pop	{r7, pc}
    1738:	000106aa 	.word	0x000106aa
    173c:	000001c8 	.word	0x000001c8

00001740 <sd_mmc_removal>:
{
	return sd_mmc_wr_protect(1);
}

bool sd_mmc_removal(uint8_t slot)
{
    1740:	b580      	push	{r7, lr}
    1742:	b082      	sub	sp, #8
    1744:	af00      	add	r7, sp, #0
    1746:	0002      	movs	r2, r0
    1748:	1dfb      	adds	r3, r7, #7
    174a:	701a      	strb	r2, [r3, #0]
	UNUSED(slot);
	return true;
    174c:	2301      	movs	r3, #1
}
    174e:	0018      	movs	r0, r3
    1750:	46bd      	mov	sp, r7
    1752:	b002      	add	sp, #8
    1754:	bd80      	pop	{r7, pc}
	...

00001758 <sd_mmc_removal_0>:

bool sd_mmc_removal_0(void)
{
    1758:	b580      	push	{r7, lr}
    175a:	af00      	add	r7, sp, #0
    175c:	4a04      	ldr	r2, [pc, #16]	; (1770 <sd_mmc_removal_0+0x18>)
    175e:	447a      	add	r2, pc
	return sd_mmc_removal(0);
    1760:	2000      	movs	r0, #0
    1762:	4b04      	ldr	r3, [pc, #16]	; (1774 <sd_mmc_removal_0+0x1c>)
    1764:	58d3      	ldr	r3, [r2, r3]
    1766:	4798      	blx	r3
    1768:	0003      	movs	r3, r0
}
    176a:	0018      	movs	r0, r3
    176c:	46bd      	mov	sp, r7
    176e:	bd80      	pop	{r7, pc}
    1770:	00010672 	.word	0x00010672
    1774:	00000200 	.word	0x00000200

00001778 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
    1778:	b590      	push	{r4, r7, lr}
    177a:	b085      	sub	sp, #20
    177c:	af00      	add	r7, sp, #0
    177e:	60b9      	str	r1, [r7, #8]
    1780:	607a      	str	r2, [r7, #4]
    1782:	230f      	movs	r3, #15
    1784:	18fb      	adds	r3, r7, r3
    1786:	1c02      	adds	r2, r0, #0
    1788:	701a      	strb	r2, [r3, #0]
    178a:	4c15      	ldr	r4, [pc, #84]	; (17e0 <sd_mmc_mem_2_ram+0x68>)
    178c:	447c      	add	r4, pc
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
    178e:	68b9      	ldr	r1, [r7, #8]
    1790:	230f      	movs	r3, #15
    1792:	18fb      	adds	r3, r7, r3
    1794:	781b      	ldrb	r3, [r3, #0]
    1796:	2201      	movs	r2, #1
    1798:	0018      	movs	r0, r3
    179a:	4b12      	ldr	r3, [pc, #72]	; (17e4 <sd_mmc_mem_2_ram+0x6c>)
    179c:	58e3      	ldr	r3, [r4, r3]
    179e:	4798      	blx	r3
    17a0:	1e03      	subs	r3, r0, #0
    17a2:	d005      	beq.n	17b0 <sd_mmc_mem_2_ram+0x38>
    17a4:	2b02      	cmp	r3, #2
    17a6:	d101      	bne.n	17ac <sd_mmc_mem_2_ram+0x34>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    17a8:	2302      	movs	r3, #2
    17aa:	e015      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
	default:
		return CTRL_FAIL;
    17ac:	2301      	movs	r3, #1
    17ae:	e013      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
		break;
    17b0:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
    17b2:	687b      	ldr	r3, [r7, #4]
    17b4:	2101      	movs	r1, #1
    17b6:	0018      	movs	r0, r3
    17b8:	4b0b      	ldr	r3, [pc, #44]	; (17e8 <sd_mmc_mem_2_ram+0x70>)
    17ba:	58e3      	ldr	r3, [r4, r3]
    17bc:	4798      	blx	r3
    17be:	1e03      	subs	r3, r0, #0
    17c0:	d001      	beq.n	17c6 <sd_mmc_mem_2_ram+0x4e>
		return CTRL_FAIL;
    17c2:	2301      	movs	r3, #1
    17c4:	e008      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
    17c6:	2000      	movs	r0, #0
    17c8:	4b08      	ldr	r3, [pc, #32]	; (17ec <sd_mmc_mem_2_ram+0x74>)
    17ca:	58e3      	ldr	r3, [r4, r3]
    17cc:	4798      	blx	r3
    17ce:	1e03      	subs	r3, r0, #0
    17d0:	d001      	beq.n	17d6 <sd_mmc_mem_2_ram+0x5e>
		return CTRL_FAIL;
    17d2:	2301      	movs	r3, #1
    17d4:	e000      	b.n	17d8 <sd_mmc_mem_2_ram+0x60>
	}
	return CTRL_GOOD;
    17d6:	2300      	movs	r3, #0
}
    17d8:	0018      	movs	r0, r3
    17da:	46bd      	mov	sp, r7
    17dc:	b005      	add	sp, #20
    17de:	bd90      	pop	{r4, r7, pc}
    17e0:	00010644 	.word	0x00010644
    17e4:	00000170 	.word	0x00000170
    17e8:	0000010c 	.word	0x0000010c
    17ec:	0000012c 	.word	0x0000012c

000017f0 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
    17f0:	b590      	push	{r4, r7, lr}
    17f2:	b083      	sub	sp, #12
    17f4:	af00      	add	r7, sp, #0
    17f6:	6078      	str	r0, [r7, #4]
    17f8:	6039      	str	r1, [r7, #0]
    17fa:	4c07      	ldr	r4, [pc, #28]	; (1818 <sd_mmc_mem_2_ram_0+0x28>)
    17fc:	447c      	add	r4, pc
	return sd_mmc_mem_2_ram(0, addr, ram);
    17fe:	683a      	ldr	r2, [r7, #0]
    1800:	687b      	ldr	r3, [r7, #4]
    1802:	0019      	movs	r1, r3
    1804:	2000      	movs	r0, #0
    1806:	4b05      	ldr	r3, [pc, #20]	; (181c <sd_mmc_mem_2_ram_0+0x2c>)
    1808:	58e3      	ldr	r3, [r4, r3]
    180a:	4798      	blx	r3
    180c:	0003      	movs	r3, r0
}
    180e:	0018      	movs	r0, r3
    1810:	46bd      	mov	sp, r7
    1812:	b003      	add	sp, #12
    1814:	bd90      	pop	{r4, r7, pc}
    1816:	46c0      	nop			; (mov r8, r8)
    1818:	000105d4 	.word	0x000105d4
    181c:	00000284 	.word	0x00000284

00001820 <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
    1820:	b590      	push	{r4, r7, lr}
    1822:	b085      	sub	sp, #20
    1824:	af00      	add	r7, sp, #0
    1826:	60b9      	str	r1, [r7, #8]
    1828:	607a      	str	r2, [r7, #4]
    182a:	230f      	movs	r3, #15
    182c:	18fb      	adds	r3, r7, r3
    182e:	1c02      	adds	r2, r0, #0
    1830:	701a      	strb	r2, [r3, #0]
    1832:	4c15      	ldr	r4, [pc, #84]	; (1888 <sd_mmc_ram_2_mem+0x68>)
    1834:	447c      	add	r4, pc
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
    1836:	68b9      	ldr	r1, [r7, #8]
    1838:	230f      	movs	r3, #15
    183a:	18fb      	adds	r3, r7, r3
    183c:	781b      	ldrb	r3, [r3, #0]
    183e:	2201      	movs	r2, #1
    1840:	0018      	movs	r0, r3
    1842:	4b12      	ldr	r3, [pc, #72]	; (188c <sd_mmc_ram_2_mem+0x6c>)
    1844:	58e3      	ldr	r3, [r4, r3]
    1846:	4798      	blx	r3
    1848:	1e03      	subs	r3, r0, #0
    184a:	d005      	beq.n	1858 <sd_mmc_ram_2_mem+0x38>
    184c:	2b02      	cmp	r3, #2
    184e:	d101      	bne.n	1854 <sd_mmc_ram_2_mem+0x34>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
    1850:	2302      	movs	r3, #2
    1852:	e015      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
	default:
		return CTRL_FAIL;
    1854:	2301      	movs	r3, #1
    1856:	e013      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
		break;
    1858:	46c0      	nop			; (mov r8, r8)
	}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
    185a:	687b      	ldr	r3, [r7, #4]
    185c:	2101      	movs	r1, #1
    185e:	0018      	movs	r0, r3
    1860:	4b0b      	ldr	r3, [pc, #44]	; (1890 <sd_mmc_ram_2_mem+0x70>)
    1862:	58e3      	ldr	r3, [r4, r3]
    1864:	4798      	blx	r3
    1866:	1e03      	subs	r3, r0, #0
    1868:	d001      	beq.n	186e <sd_mmc_ram_2_mem+0x4e>
		return CTRL_FAIL;
    186a:	2301      	movs	r3, #1
    186c:	e008      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
    186e:	2000      	movs	r0, #0
    1870:	4b08      	ldr	r3, [pc, #32]	; (1894 <sd_mmc_ram_2_mem+0x74>)
    1872:	58e3      	ldr	r3, [r4, r3]
    1874:	4798      	blx	r3
    1876:	1e03      	subs	r3, r0, #0
    1878:	d001      	beq.n	187e <sd_mmc_ram_2_mem+0x5e>
		return CTRL_FAIL;
    187a:	2301      	movs	r3, #1
    187c:	e000      	b.n	1880 <sd_mmc_ram_2_mem+0x60>
	}
	return CTRL_GOOD;
    187e:	2300      	movs	r3, #0
}
    1880:	0018      	movs	r0, r3
    1882:	46bd      	mov	sp, r7
    1884:	b005      	add	sp, #20
    1886:	bd90      	pop	{r4, r7, pc}
    1888:	0001059c 	.word	0x0001059c
    188c:	000002e8 	.word	0x000002e8
    1890:	00000000 	.word	0x00000000
    1894:	00000060 	.word	0x00000060

00001898 <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
    1898:	b590      	push	{r4, r7, lr}
    189a:	b083      	sub	sp, #12
    189c:	af00      	add	r7, sp, #0
    189e:	6078      	str	r0, [r7, #4]
    18a0:	6039      	str	r1, [r7, #0]
    18a2:	4c07      	ldr	r4, [pc, #28]	; (18c0 <sd_mmc_ram_2_mem_0+0x28>)
    18a4:	447c      	add	r4, pc
	return sd_mmc_ram_2_mem(0, addr, ram);
    18a6:	683a      	ldr	r2, [r7, #0]
    18a8:	687b      	ldr	r3, [r7, #4]
    18aa:	0019      	movs	r1, r3
    18ac:	2000      	movs	r0, #0
    18ae:	4b05      	ldr	r3, [pc, #20]	; (18c4 <sd_mmc_ram_2_mem_0+0x2c>)
    18b0:	58e3      	ldr	r3, [r4, r3]
    18b2:	4798      	blx	r3
    18b4:	0003      	movs	r3, r0
}
    18b6:	0018      	movs	r0, r3
    18b8:	46bd      	mov	sp, r7
    18ba:	b003      	add	sp, #12
    18bc:	bd90      	pop	{r4, r7, pc}
    18be:	46c0      	nop			; (mov r8, r8)
    18c0:	0001052c 	.word	0x0001052c
    18c4:	00000180 	.word	0x00000180

000018c8 <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    18c8:	b580      	push	{r7, lr}
    18ca:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    18cc:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    18d0:	4b02      	ldr	r3, [pc, #8]	; (18dc <NVIC_SystemReset+0x14>)
    18d2:	4a03      	ldr	r2, [pc, #12]	; (18e0 <NVIC_SystemReset+0x18>)
    18d4:	60da      	str	r2, [r3, #12]
    18d6:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    18da:	e7fe      	b.n	18da <NVIC_SystemReset+0x12>
    18dc:	e000ed00 	.word	0xe000ed00
    18e0:	05fa0004 	.word	0x05fa0004

000018e4 <bod_get_config_defaults>:
 *
 * \param[out] conf  BOD configuration struct to set to default settings
 */
static inline void bod_get_config_defaults(
		struct bod_config *const conf)
{
    18e4:	b580      	push	{r7, lr}
    18e6:	b082      	sub	sp, #8
    18e8:	af00      	add	r7, sp, #0
    18ea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	2200      	movs	r2, #0
    18f0:	801a      	strh	r2, [r3, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
    18f2:	687b      	ldr	r3, [r7, #4]
    18f4:	2200      	movs	r2, #0
    18f6:	805a      	strh	r2, [r3, #2]
	conf->action         = BOD_ACTION_RESET;
    18f8:	687b      	ldr	r3, [r7, #4]
    18fa:	2208      	movs	r2, #8
    18fc:	711a      	strb	r2, [r3, #4]
	conf->level          = 0x27;
    18fe:	687b      	ldr	r3, [r7, #4]
    1900:	2227      	movs	r2, #39	; 0x27
    1902:	715a      	strb	r2, [r3, #5]
	conf->hysteresis     = true;
    1904:	687b      	ldr	r3, [r7, #4]
    1906:	2201      	movs	r2, #1
    1908:	719a      	strb	r2, [r3, #6]
	conf->run_in_standby = true;
    190a:	687b      	ldr	r3, [r7, #4]
    190c:	2201      	movs	r2, #1
    190e:	71da      	strb	r2, [r3, #7]
}
    1910:	46c0      	nop			; (mov r8, r8)
    1912:	46bd      	mov	sp, r7
    1914:	b002      	add	sp, #8
    1916:	bd80      	pop	{r7, pc}

00001918 <bod_enable>:
 * \retval STATUS_OK               If the BOD was successfully enabled
 * \retval STATUS_ERR_INVALID_ARG  An invalid BOD was supplied
 */
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
    1918:	b580      	push	{r7, lr}
    191a:	b082      	sub	sp, #8
    191c:	af00      	add	r7, sp, #0
    191e:	0002      	movs	r2, r0
    1920:	1dfb      	adds	r3, r7, #7
    1922:	701a      	strb	r2, [r3, #0]
	switch (bod_id) {
    1924:	1dfb      	adds	r3, r7, #7
    1926:	781b      	ldrb	r3, [r3, #0]
    1928:	2b00      	cmp	r3, #0
    192a:	d108      	bne.n	193e <bod_enable+0x26>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    192c:	4b06      	ldr	r3, [pc, #24]	; (1948 <bod_enable+0x30>)
    192e:	4a06      	ldr	r2, [pc, #24]	; (1948 <bod_enable+0x30>)
    1930:	6b52      	ldr	r2, [r2, #52]	; 0x34
    1932:	2102      	movs	r1, #2
    1934:	430a      	orrs	r2, r1
    1936:	635a      	str	r2, [r3, #52]	; 0x34
			break;
    1938:	46c0      	nop			; (mov r8, r8)
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    193a:	2300      	movs	r3, #0
    193c:	e000      	b.n	1940 <bod_enable+0x28>
			return STATUS_ERR_INVALID_ARG;
    193e:	2317      	movs	r3, #23
}
    1940:	0018      	movs	r0, r3
    1942:	46bd      	mov	sp, r7
    1944:	b002      	add	sp, #8
    1946:	bd80      	pop	{r7, pc}
    1948:	40000800 	.word	0x40000800

0000194c <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    194c:	b580      	push	{r7, lr}
    194e:	b082      	sub	sp, #8
    1950:	af00      	add	r7, sp, #0
    1952:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1954:	687b      	ldr	r3, [r7, #4]
    1956:	2200      	movs	r2, #0
    1958:	701a      	strb	r2, [r3, #0]
}
    195a:	46c0      	nop			; (mov r8, r8)
    195c:	46bd      	mov	sp, r7
    195e:	b002      	add	sp, #8
    1960:	bd80      	pop	{r7, pc}
	...

00001964 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1964:	b580      	push	{r7, lr}
    1966:	b084      	sub	sp, #16
    1968:	af00      	add	r7, sp, #0
    196a:	0002      	movs	r2, r0
    196c:	1dfb      	adds	r3, r7, #7
    196e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    1970:	230f      	movs	r3, #15
    1972:	18fb      	adds	r3, r7, r3
    1974:	1dfa      	adds	r2, r7, #7
    1976:	7812      	ldrb	r2, [r2, #0]
    1978:	09d2      	lsrs	r2, r2, #7
    197a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    197c:	230e      	movs	r3, #14
    197e:	18fb      	adds	r3, r7, r3
    1980:	1dfa      	adds	r2, r7, #7
    1982:	7812      	ldrb	r2, [r2, #0]
    1984:	0952      	lsrs	r2, r2, #5
    1986:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    1988:	4b0d      	ldr	r3, [pc, #52]	; (19c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    198a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
    198c:	230f      	movs	r3, #15
    198e:	18fb      	adds	r3, r7, r3
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	2b00      	cmp	r3, #0
    1994:	d10f      	bne.n	19b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    1996:	230f      	movs	r3, #15
    1998:	18fb      	adds	r3, r7, r3
    199a:	781b      	ldrb	r3, [r3, #0]
    199c:	009b      	lsls	r3, r3, #2
    199e:	2210      	movs	r2, #16
    19a0:	4694      	mov	ip, r2
    19a2:	44bc      	add	ip, r7
    19a4:	4463      	add	r3, ip
    19a6:	3b08      	subs	r3, #8
    19a8:	681a      	ldr	r2, [r3, #0]
    19aa:	230e      	movs	r3, #14
    19ac:	18fb      	adds	r3, r7, r3
    19ae:	781b      	ldrb	r3, [r3, #0]
    19b0:	01db      	lsls	r3, r3, #7
    19b2:	18d3      	adds	r3, r2, r3
    19b4:	e000      	b.n	19b8 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
    19b6:	2300      	movs	r3, #0
	}
}
    19b8:	0018      	movs	r0, r3
    19ba:	46bd      	mov	sp, r7
    19bc:	b004      	add	sp, #16
    19be:	bd80      	pop	{r7, pc}
    19c0:	41004400 	.word	0x41004400

000019c4 <nvm_get_config_defaults>:
 * \param[out] config  Configuration structure to initialize to default values
 *
 */
static inline void nvm_get_config_defaults(
		struct nvm_config *const config)
{
    19c4:	b580      	push	{r7, lr}
    19c6:	b082      	sub	sp, #8
    19c8:	af00      	add	r7, sp, #0
    19ca:	6078      	str	r0, [r7, #4]
	/* Sanity check the parameters */
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    19cc:	687b      	ldr	r3, [r7, #4]
    19ce:	2200      	movs	r2, #0
    19d0:	701a      	strb	r2, [r3, #0]
	config->manual_page_write = true;
    19d2:	687b      	ldr	r3, [r7, #4]
    19d4:	2201      	movs	r2, #1
    19d6:	705a      	strb	r2, [r3, #1]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    19d8:	4b08      	ldr	r3, [pc, #32]	; (19fc <nvm_get_config_defaults+0x38>)
    19da:	685b      	ldr	r3, [r3, #4]
    19dc:	06db      	lsls	r3, r3, #27
    19de:	0f1b      	lsrs	r3, r3, #28
    19e0:	b2db      	uxtb	r3, r3
    19e2:	001a      	movs	r2, r3
    19e4:	687b      	ldr	r3, [r7, #4]
    19e6:	709a      	strb	r2, [r3, #2]
	config->disable_cache     = false;
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	2200      	movs	r2, #0
    19ec:	70da      	strb	r2, [r3, #3]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    19ee:	687b      	ldr	r3, [r7, #4]
    19f0:	2200      	movs	r2, #0
    19f2:	711a      	strb	r2, [r3, #4]
}
    19f4:	46c0      	nop			; (mov r8, r8)
    19f6:	46bd      	mov	sp, r7
    19f8:	b002      	add	sp, #8
    19fa:	bd80      	pop	{r7, pc}
    19fc:	41004000 	.word	0x41004000

00001a00 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
    1a00:	b580      	push	{r7, lr}
    1a02:	b082      	sub	sp, #8
    1a04:	af00      	add	r7, sp, #0
    1a06:	0002      	movs	r2, r0
    1a08:	1dfb      	adds	r3, r7, #7
    1a0a:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    1a0c:	1dfb      	adds	r3, r7, #7
    1a0e:	781b      	ldrb	r3, [r3, #0]
    1a10:	0018      	movs	r0, r3
    1a12:	4b04      	ldr	r3, [pc, #16]	; (1a24 <port_get_group_from_gpio_pin+0x24>)
    1a14:	447b      	add	r3, pc
    1a16:	4798      	blx	r3
    1a18:	0003      	movs	r3, r0
}
    1a1a:	0018      	movs	r0, r3
    1a1c:	46bd      	mov	sp, r7
    1a1e:	b002      	add	sp, #8
    1a20:	bd80      	pop	{r7, pc}
    1a22:	46c0      	nop			; (mov r8, r8)
    1a24:	ffffff4d 	.word	0xffffff4d

00001a28 <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
    1a28:	b580      	push	{r7, lr}
    1a2a:	b082      	sub	sp, #8
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	2200      	movs	r2, #0
    1a34:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    1a36:	687b      	ldr	r3, [r7, #4]
    1a38:	2201      	movs	r2, #1
    1a3a:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    1a3c:	687b      	ldr	r3, [r7, #4]
    1a3e:	2200      	movs	r2, #0
    1a40:	709a      	strb	r2, [r3, #2]
}
    1a42:	46c0      	nop			; (mov r8, r8)
    1a44:	46bd      	mov	sp, r7
    1a46:	b002      	add	sp, #8
    1a48:	bd80      	pop	{r7, pc}
	...

00001a4c <port_pin_get_input_level>:
 *
 *  \return Status of the port pin's input buffer.
 */
static inline bool port_pin_get_input_level(
		const uint8_t gpio_pin)
{
    1a4c:	b580      	push	{r7, lr}
    1a4e:	b084      	sub	sp, #16
    1a50:	af00      	add	r7, sp, #0
    1a52:	0002      	movs	r2, r0
    1a54:	1dfb      	adds	r3, r7, #7
    1a56:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1a58:	1dfb      	adds	r3, r7, #7
    1a5a:	781b      	ldrb	r3, [r3, #0]
    1a5c:	0018      	movs	r0, r3
    1a5e:	4b0c      	ldr	r3, [pc, #48]	; (1a90 <port_pin_get_input_level+0x44>)
    1a60:	447b      	add	r3, pc
    1a62:	4798      	blx	r3
    1a64:	0003      	movs	r3, r0
    1a66:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1a68:	1dfb      	adds	r3, r7, #7
    1a6a:	781b      	ldrb	r3, [r3, #0]
    1a6c:	221f      	movs	r2, #31
    1a6e:	4013      	ands	r3, r2
    1a70:	2201      	movs	r2, #1
    1a72:	409a      	lsls	r2, r3
    1a74:	0013      	movs	r3, r2
    1a76:	60bb      	str	r3, [r7, #8]

	return (port_base->IN.reg & pin_mask);
    1a78:	68fb      	ldr	r3, [r7, #12]
    1a7a:	6a1b      	ldr	r3, [r3, #32]
    1a7c:	68ba      	ldr	r2, [r7, #8]
    1a7e:	4013      	ands	r3, r2
    1a80:	1e5a      	subs	r2, r3, #1
    1a82:	4193      	sbcs	r3, r2
    1a84:	b2db      	uxtb	r3, r3
}
    1a86:	0018      	movs	r0, r3
    1a88:	46bd      	mov	sp, r7
    1a8a:	b004      	add	sp, #16
    1a8c:	bd80      	pop	{r7, pc}
    1a8e:	46c0      	nop			; (mov r8, r8)
    1a90:	ffffff9d 	.word	0xffffff9d

00001a94 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
    1a94:	b580      	push	{r7, lr}
    1a96:	b084      	sub	sp, #16
    1a98:	af00      	add	r7, sp, #0
    1a9a:	0002      	movs	r2, r0
    1a9c:	1dfb      	adds	r3, r7, #7
    1a9e:	701a      	strb	r2, [r3, #0]
    1aa0:	1dbb      	adds	r3, r7, #6
    1aa2:	1c0a      	adds	r2, r1, #0
    1aa4:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    1aa6:	1dfb      	adds	r3, r7, #7
    1aa8:	781b      	ldrb	r3, [r3, #0]
    1aaa:	0018      	movs	r0, r3
    1aac:	4b0d      	ldr	r3, [pc, #52]	; (1ae4 <port_pin_set_output_level+0x50>)
    1aae:	447b      	add	r3, pc
    1ab0:	4798      	blx	r3
    1ab2:	0003      	movs	r3, r0
    1ab4:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    1ab6:	1dfb      	adds	r3, r7, #7
    1ab8:	781b      	ldrb	r3, [r3, #0]
    1aba:	221f      	movs	r2, #31
    1abc:	4013      	ands	r3, r2
    1abe:	2201      	movs	r2, #1
    1ac0:	409a      	lsls	r2, r3
    1ac2:	0013      	movs	r3, r2
    1ac4:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
    1ac6:	1dbb      	adds	r3, r7, #6
    1ac8:	781b      	ldrb	r3, [r3, #0]
    1aca:	2b00      	cmp	r3, #0
    1acc:	d003      	beq.n	1ad6 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    1ace:	68fb      	ldr	r3, [r7, #12]
    1ad0:	68ba      	ldr	r2, [r7, #8]
    1ad2:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
    1ad4:	e002      	b.n	1adc <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    1ad6:	68fb      	ldr	r3, [r7, #12]
    1ad8:	68ba      	ldr	r2, [r7, #8]
    1ada:	615a      	str	r2, [r3, #20]
}
    1adc:	46c0      	nop			; (mov r8, r8)
    1ade:	46bd      	mov	sp, r7
    1ae0:	b004      	add	sp, #16
    1ae2:	bd80      	pop	{r7, pc}
    1ae4:	ffffff4f 	.word	0xffffff4f

00001ae8 <system_interrupt_enable_global>:
 * \brief Enables global interrupts.
 *
 * Enables global interrupts in the device to fire any enabled interrupt handlers.
 */
static inline void system_interrupt_enable_global(void)
{
    1ae8:	b580      	push	{r7, lr}
    1aea:	af00      	add	r7, sp, #0
    1aec:	4a05      	ldr	r2, [pc, #20]	; (1b04 <system_interrupt_enable_global+0x1c>)
    1aee:	447a      	add	r2, pc
	cpu_irq_enable();
    1af0:	4b05      	ldr	r3, [pc, #20]	; (1b08 <system_interrupt_enable_global+0x20>)
    1af2:	58d3      	ldr	r3, [r2, r3]
    1af4:	2201      	movs	r2, #1
    1af6:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    1af8:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    1afc:	b662      	cpsie	i
}
    1afe:	46c0      	nop			; (mov r8, r8)
    1b00:	46bd      	mov	sp, r7
    1b02:	bd80      	pop	{r7, pc}
    1b04:	000102e2 	.word	0x000102e2
    1b08:	000000ec 	.word	0x000000ec

00001b0c <system_interrupt_disable_global>:
 *
 * Disabled global interrupts in the device, preventing any enabled interrupt
 * handlers from executing.
 */
static inline void system_interrupt_disable_global(void)
{
    1b0c:	b580      	push	{r7, lr}
    1b0e:	af00      	add	r7, sp, #0
    1b10:	4a05      	ldr	r2, [pc, #20]	; (1b28 <system_interrupt_disable_global+0x1c>)
    1b12:	447a      	add	r2, pc
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    1b14:	b672      	cpsid	i
    1b16:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    1b1a:	4b04      	ldr	r3, [pc, #16]	; (1b2c <system_interrupt_disable_global+0x20>)
    1b1c:	58d3      	ldr	r3, [r2, r3]
    1b1e:	2200      	movs	r2, #0
    1b20:	701a      	strb	r2, [r3, #0]
}
    1b22:	46c0      	nop			; (mov r8, r8)
    1b24:	46bd      	mov	sp, r7
    1b26:	bd80      	pop	{r7, pc}
    1b28:	000102be 	.word	0x000102be
    1b2c:	000000ec 	.word	0x000000ec

00001b30 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
    1b30:	b580      	push	{r7, lr}
    1b32:	b082      	sub	sp, #8
    1b34:	af00      	add	r7, sp, #0
    1b36:	0002      	movs	r2, r0
    1b38:	1dfb      	adds	r3, r7, #7
    1b3a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b3c:	4b06      	ldr	r3, [pc, #24]	; (1b58 <system_interrupt_enable+0x28>)
    1b3e:	1dfa      	adds	r2, r7, #7
    1b40:	7812      	ldrb	r2, [r2, #0]
    1b42:	0011      	movs	r1, r2
    1b44:	221f      	movs	r2, #31
    1b46:	400a      	ands	r2, r1
    1b48:	2101      	movs	r1, #1
    1b4a:	4091      	lsls	r1, r2
    1b4c:	000a      	movs	r2, r1
    1b4e:	601a      	str	r2, [r3, #0]
}
    1b50:	46c0      	nop			; (mov r8, r8)
    1b52:	46bd      	mov	sp, r7
    1b54:	b002      	add	sp, #8
    1b56:	bd80      	pop	{r7, pc}
    1b58:	e000e100 	.word	0xe000e100

00001b5c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    1b5c:	b580      	push	{r7, lr}
    1b5e:	b082      	sub	sp, #8
    1b60:	af00      	add	r7, sp, #0
    1b62:	0002      	movs	r2, r0
    1b64:	1dfb      	adds	r3, r7, #7
    1b66:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1b68:	4a07      	ldr	r2, [pc, #28]	; (1b88 <system_interrupt_disable+0x2c>)
    1b6a:	1dfb      	adds	r3, r7, #7
    1b6c:	781b      	ldrb	r3, [r3, #0]
    1b6e:	0019      	movs	r1, r3
    1b70:	231f      	movs	r3, #31
    1b72:	400b      	ands	r3, r1
    1b74:	2101      	movs	r1, #1
    1b76:	4099      	lsls	r1, r3
    1b78:	000b      	movs	r3, r1
    1b7a:	0019      	movs	r1, r3
    1b7c:	2380      	movs	r3, #128	; 0x80
    1b7e:	50d1      	str	r1, [r2, r3]
}
    1b80:	46c0      	nop			; (mov r8, r8)
    1b82:	46bd      	mov	sp, r7
    1b84:	b002      	add	sp, #8
    1b86:	bd80      	pop	{r7, pc}
    1b88:	e000e100 	.word	0xe000e100

00001b8c <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    1b8c:	b580      	push	{r7, lr}
    1b8e:	b082      	sub	sp, #8
    1b90:	af00      	add	r7, sp, #0
    1b92:	6078      	str	r0, [r7, #4]
	time->second = 0;
    1b94:	687b      	ldr	r3, [r7, #4]
    1b96:	2200      	movs	r2, #0
    1b98:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    1b9a:	687b      	ldr	r3, [r7, #4]
    1b9c:	2200      	movs	r2, #0
    1b9e:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    1ba0:	687b      	ldr	r3, [r7, #4]
    1ba2:	2200      	movs	r2, #0
    1ba4:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    1ba6:	687b      	ldr	r3, [r7, #4]
    1ba8:	2200      	movs	r2, #0
    1baa:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    1bac:	687b      	ldr	r3, [r7, #4]
    1bae:	2201      	movs	r2, #1
    1bb0:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    1bb2:	687b      	ldr	r3, [r7, #4]
    1bb4:	2201      	movs	r2, #1
    1bb6:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    1bb8:	687b      	ldr	r3, [r7, #4]
    1bba:	22fa      	movs	r2, #250	; 0xfa
    1bbc:	00d2      	lsls	r2, r2, #3
    1bbe:	80da      	strh	r2, [r3, #6]
}
    1bc0:	46c0      	nop			; (mov r8, r8)
    1bc2:	46bd      	mov	sp, r7
    1bc4:	b002      	add	sp, #8
    1bc6:	bd80      	pop	{r7, pc}

00001bc8 <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    1bc8:	b590      	push	{r4, r7, lr}
    1bca:	b087      	sub	sp, #28
    1bcc:	af00      	add	r7, sp, #0
    1bce:	6078      	str	r0, [r7, #4]
    1bd0:	4c26      	ldr	r4, [pc, #152]	; (1c6c <rtc_calendar_get_config_defaults+0xa4>)
    1bd2:	447c      	add	r4, pc
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    1bd4:	230c      	movs	r3, #12
    1bd6:	18fb      	adds	r3, r7, r3
    1bd8:	0018      	movs	r0, r3
    1bda:	4b25      	ldr	r3, [pc, #148]	; (1c70 <rtc_calendar_get_config_defaults+0xa8>)
    1bdc:	447b      	add	r3, pc
    1bde:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    1be0:	687b      	ldr	r3, [r7, #4]
    1be2:	22a0      	movs	r2, #160	; 0xa0
    1be4:	0112      	lsls	r2, r2, #4
    1be6:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    1be8:	687b      	ldr	r3, [r7, #4]
    1bea:	2200      	movs	r2, #0
    1bec:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    1bee:	687b      	ldr	r3, [r7, #4]
    1bf0:	2200      	movs	r2, #0
    1bf2:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    1bf4:	687b      	ldr	r3, [r7, #4]
    1bf6:	2200      	movs	r2, #0
    1bf8:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    1bfa:	687b      	ldr	r3, [r7, #4]
    1bfc:	22fa      	movs	r2, #250	; 0xfa
    1bfe:	00d2      	lsls	r2, r2, #3
    1c00:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1c02:	2317      	movs	r3, #23
    1c04:	18fb      	adds	r3, r7, r3
    1c06:	2200      	movs	r2, #0
    1c08:	701a      	strb	r2, [r3, #0]
    1c0a:	e026      	b.n	1c5a <rtc_calendar_get_config_defaults+0x92>
		config->alarm[i].time = time;
    1c0c:	2317      	movs	r3, #23
    1c0e:	18fb      	adds	r3, r7, r3
    1c10:	781a      	ldrb	r2, [r3, #0]
    1c12:	6879      	ldr	r1, [r7, #4]
    1c14:	2008      	movs	r0, #8
    1c16:	0013      	movs	r3, r2
    1c18:	009b      	lsls	r3, r3, #2
    1c1a:	189b      	adds	r3, r3, r2
    1c1c:	005b      	lsls	r3, r3, #1
    1c1e:	18cb      	adds	r3, r1, r3
    1c20:	181a      	adds	r2, r3, r0
    1c22:	230c      	movs	r3, #12
    1c24:	18fb      	adds	r3, r7, r3
    1c26:	0010      	movs	r0, r2
    1c28:	0019      	movs	r1, r3
    1c2a:	2308      	movs	r3, #8
    1c2c:	001a      	movs	r2, r3
    1c2e:	4b11      	ldr	r3, [pc, #68]	; (1c74 <rtc_calendar_get_config_defaults+0xac>)
    1c30:	58e3      	ldr	r3, [r4, r3]
    1c32:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    1c34:	2317      	movs	r3, #23
    1c36:	18fb      	adds	r3, r7, r3
    1c38:	781a      	ldrb	r2, [r3, #0]
    1c3a:	6879      	ldr	r1, [r7, #4]
    1c3c:	0013      	movs	r3, r2
    1c3e:	009b      	lsls	r3, r3, #2
    1c40:	189b      	adds	r3, r3, r2
    1c42:	005b      	lsls	r3, r3, #1
    1c44:	18cb      	adds	r3, r1, r3
    1c46:	3310      	adds	r3, #16
    1c48:	2206      	movs	r2, #6
    1c4a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    1c4c:	2317      	movs	r3, #23
    1c4e:	18fb      	adds	r3, r7, r3
    1c50:	781a      	ldrb	r2, [r3, #0]
    1c52:	2317      	movs	r3, #23
    1c54:	18fb      	adds	r3, r7, r3
    1c56:	3201      	adds	r2, #1
    1c58:	701a      	strb	r2, [r3, #0]
    1c5a:	2317      	movs	r3, #23
    1c5c:	18fb      	adds	r3, r7, r3
    1c5e:	781b      	ldrb	r3, [r3, #0]
    1c60:	2b00      	cmp	r3, #0
    1c62:	d0d3      	beq.n	1c0c <rtc_calendar_get_config_defaults+0x44>
	}
}
    1c64:	46c0      	nop			; (mov r8, r8)
    1c66:	46bd      	mov	sp, r7
    1c68:	b007      	add	sp, #28
    1c6a:	bd90      	pop	{r4, r7, pc}
    1c6c:	000101fe 	.word	0x000101fe
    1c70:	ffffffad 	.word	0xffffffad
    1c74:	0000008c 	.word	0x0000008c

00001c78 <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    1c78:	b580      	push	{r7, lr}
    1c7a:	b084      	sub	sp, #16
    1c7c:	af00      	add	r7, sp, #0
    1c7e:	0002      	movs	r2, r0
    1c80:	1dfb      	adds	r3, r7, #7
    1c82:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    1c84:	4b1a      	ldr	r3, [pc, #104]	; (1cf0 <system_set_sleepmode+0x78>)
    1c86:	699b      	ldr	r3, [r3, #24]
    1c88:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    1c8a:	68fa      	ldr	r2, [r7, #12]
    1c8c:	23f0      	movs	r3, #240	; 0xf0
    1c8e:	011b      	lsls	r3, r3, #4
    1c90:	4013      	ands	r3, r2
    1c92:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    1c94:	68fb      	ldr	r3, [r7, #12]
    1c96:	0a1b      	lsrs	r3, r3, #8
    1c98:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    1c9a:	68fb      	ldr	r3, [r7, #12]
    1c9c:	2b02      	cmp	r3, #2
    1c9e:	d805      	bhi.n	1cac <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    1ca0:	4a14      	ldr	r2, [pc, #80]	; (1cf4 <system_set_sleepmode+0x7c>)
    1ca2:	6853      	ldr	r3, [r2, #4]
    1ca4:	21c0      	movs	r1, #192	; 0xc0
    1ca6:	0089      	lsls	r1, r1, #2
    1ca8:	430b      	orrs	r3, r1
    1caa:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    1cac:	1dfb      	adds	r3, r7, #7
    1cae:	781b      	ldrb	r3, [r3, #0]
    1cb0:	2b00      	cmp	r3, #0
    1cb2:	db16      	blt.n	1ce2 <system_set_sleepmode+0x6a>
    1cb4:	2b02      	cmp	r3, #2
    1cb6:	dd02      	ble.n	1cbe <system_set_sleepmode+0x46>
    1cb8:	2b03      	cmp	r3, #3
    1cba:	d00b      	beq.n	1cd4 <system_set_sleepmode+0x5c>
    1cbc:	e011      	b.n	1ce2 <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    1cbe:	4b0e      	ldr	r3, [pc, #56]	; (1cf8 <system_set_sleepmode+0x80>)
    1cc0:	4a0d      	ldr	r2, [pc, #52]	; (1cf8 <system_set_sleepmode+0x80>)
    1cc2:	6912      	ldr	r2, [r2, #16]
    1cc4:	2104      	movs	r1, #4
    1cc6:	438a      	bics	r2, r1
    1cc8:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    1cca:	4a0c      	ldr	r2, [pc, #48]	; (1cfc <system_set_sleepmode+0x84>)
    1ccc:	1dfb      	adds	r3, r7, #7
    1cce:	781b      	ldrb	r3, [r3, #0]
    1cd0:	7053      	strb	r3, [r2, #1]
			break;
    1cd2:	e008      	b.n	1ce6 <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    1cd4:	4b08      	ldr	r3, [pc, #32]	; (1cf8 <system_set_sleepmode+0x80>)
    1cd6:	4a08      	ldr	r2, [pc, #32]	; (1cf8 <system_set_sleepmode+0x80>)
    1cd8:	6912      	ldr	r2, [r2, #16]
    1cda:	2104      	movs	r1, #4
    1cdc:	430a      	orrs	r2, r1
    1cde:	611a      	str	r2, [r3, #16]
			break;
    1ce0:	e001      	b.n	1ce6 <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
    1ce2:	2317      	movs	r3, #23
    1ce4:	e000      	b.n	1ce8 <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
    1ce6:	2300      	movs	r3, #0
}
    1ce8:	0018      	movs	r0, r3
    1cea:	46bd      	mov	sp, r7
    1cec:	b004      	add	sp, #16
    1cee:	bd80      	pop	{r7, pc}
    1cf0:	41002000 	.word	0x41002000
    1cf4:	41004000 	.word	0x41004000
    1cf8:	e000ed00 	.word	0xe000ed00
    1cfc:	40000400 	.word	0x40000400

00001d00 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    1d00:	b580      	push	{r7, lr}
    1d02:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    1d04:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    1d08:	bf30      	wfi
	__DSB();
	__WFI();
}
    1d0a:	46c0      	nop			; (mov r8, r8)
    1d0c:	46bd      	mov	sp, r7
    1d0e:	bd80      	pop	{r7, pc}

00001d10 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    1d10:	b580      	push	{r7, lr}
    1d12:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    1d14:	4b02      	ldr	r3, [pc, #8]	; (1d20 <system_reset+0x10>)
    1d16:	447b      	add	r3, pc
    1d18:	4798      	blx	r3
}
    1d1a:	46c0      	nop			; (mov r8, r8)
    1d1c:	46bd      	mov	sp, r7
    1d1e:	bd80      	pop	{r7, pc}
    1d20:	fffffbaf 	.word	0xfffffbaf

00001d24 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
    1d24:	b580      	push	{r7, lr}
    1d26:	b084      	sub	sp, #16
    1d28:	af00      	add	r7, sp, #0
    1d2a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1d2c:	687b      	ldr	r3, [r7, #4]
    1d2e:	681b      	ldr	r3, [r3, #0]
    1d30:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
    1d32:	68fb      	ldr	r3, [r7, #12]
    1d34:	69db      	ldr	r3, [r3, #28]
    1d36:	1e5a      	subs	r2, r3, #1
    1d38:	4193      	sbcs	r3, r2
    1d3a:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
    1d3c:	0018      	movs	r0, r3
    1d3e:	46bd      	mov	sp, r7
    1d40:	b004      	add	sp, #16
    1d42:	bd80      	pop	{r7, pc}

00001d44 <spi_disable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_disable(
		struct spi_module *const module)
{
    1d44:	b580      	push	{r7, lr}
    1d46:	b084      	sub	sp, #16
    1d48:	af00      	add	r7, sp, #0
    1d4a:	6078      	str	r0, [r7, #4]
    1d4c:	4a14      	ldr	r2, [pc, #80]	; (1da0 <spi_disable+0x5c>)
    1d4e:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    1d50:	687b      	ldr	r3, [r7, #4]
    1d52:	681b      	ldr	r3, [r3, #0]
    1d54:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    1d56:	687b      	ldr	r3, [r7, #4]
    1d58:	681b      	ldr	r3, [r3, #0]
    1d5a:	0018      	movs	r0, r3
    1d5c:	4b11      	ldr	r3, [pc, #68]	; (1da4 <spi_disable+0x60>)
    1d5e:	58d3      	ldr	r3, [r2, r3]
    1d60:	4798      	blx	r3
    1d62:	0003      	movs	r3, r0
    1d64:	0018      	movs	r0, r3
    1d66:	4b10      	ldr	r3, [pc, #64]	; (1da8 <spi_disable+0x64>)
    1d68:	447b      	add	r3, pc
    1d6a:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
    1d6c:	46c0      	nop			; (mov r8, r8)
    1d6e:	687b      	ldr	r3, [r7, #4]
    1d70:	0018      	movs	r0, r3
    1d72:	4b0e      	ldr	r3, [pc, #56]	; (1dac <spi_disable+0x68>)
    1d74:	447b      	add	r3, pc
    1d76:	4798      	blx	r3
    1d78:	1e03      	subs	r3, r0, #0
    1d7a:	d1f8      	bne.n	1d6e <spi_disable+0x2a>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    1d7c:	68fb      	ldr	r3, [r7, #12]
    1d7e:	228f      	movs	r2, #143	; 0x8f
    1d80:	751a      	strb	r2, [r3, #20]
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    1d82:	68fb      	ldr	r3, [r7, #12]
    1d84:	228f      	movs	r2, #143	; 0x8f
    1d86:	761a      	strb	r2, [r3, #24]

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    1d88:	68fb      	ldr	r3, [r7, #12]
    1d8a:	681b      	ldr	r3, [r3, #0]
    1d8c:	2202      	movs	r2, #2
    1d8e:	4393      	bics	r3, r2
    1d90:	001a      	movs	r2, r3
    1d92:	68fb      	ldr	r3, [r7, #12]
    1d94:	601a      	str	r2, [r3, #0]
}
    1d96:	46c0      	nop			; (mov r8, r8)
    1d98:	46bd      	mov	sp, r7
    1d9a:	b004      	add	sp, #16
    1d9c:	bd80      	pop	{r7, pc}
    1d9e:	46c0      	nop			; (mov r8, r8)
    1da0:	00010082 	.word	0x00010082
    1da4:	000000a8 	.word	0x000000a8
    1da8:	fffffdf1 	.word	0xfffffdf1
    1dac:	ffffffad 	.word	0xffffffad

00001db0 <configure_wakeup>:
static enum status_code configure_bod(void);
static enum status_code configure_rtc(void);
static enum status_code configure_nvm(void);
static uint8_t buff[MAX_BUF_SIZE] = {0};

static enum status_code configure_wakeup(void) {
    1db0:	b5b0      	push	{r4, r5, r7, lr}
    1db2:	b084      	sub	sp, #16
    1db4:	af00      	add	r7, sp, #0
    1db6:	4c2a      	ldr	r4, [pc, #168]	; (1e60 <configure_wakeup+0xb0>)
    1db8:	447c      	add	r4, pc
	struct extint_chan_conf ext_conf;
	extint_chan_get_config_defaults(&ext_conf);
    1dba:	003b      	movs	r3, r7
    1dbc:	0018      	movs	r0, r3
    1dbe:	4b29      	ldr	r3, [pc, #164]	; (1e64 <configure_wakeup+0xb4>)
    1dc0:	58e3      	ldr	r3, [r4, r3]
    1dc2:	4798      	blx	r3
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    1dc4:	003b      	movs	r3, r7
    1dc6:	2202      	movs	r2, #2
    1dc8:	72da      	strb	r2, [r3, #11]
	ext_conf.filter_input_signal = true;
    1dca:	003b      	movs	r3, r7
    1dcc:	2201      	movs	r2, #1
    1dce:	729a      	strb	r2, [r3, #10]
	ext_conf.wake_if_sleeping = true;
    1dd0:	003b      	movs	r3, r7
    1dd2:	2201      	movs	r2, #1
    1dd4:	725a      	strb	r2, [r3, #9]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    1dd6:	003b      	movs	r3, r7
    1dd8:	2203      	movs	r2, #3
    1dda:	601a      	str	r2, [r3, #0]
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    1ddc:	003b      	movs	r3, r7
    1dde:	2200      	movs	r2, #0
    1de0:	605a      	str	r2, [r3, #4]
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    1de2:	003b      	movs	r3, r7
    1de4:	2201      	movs	r2, #1
    1de6:	721a      	strb	r2, [r3, #8]
	extint_chan_set_config(3, &ext_conf);
    1de8:	003b      	movs	r3, r7
    1dea:	0019      	movs	r1, r3
    1dec:	2003      	movs	r0, #3
    1dee:	4b1e      	ldr	r3, [pc, #120]	; (1e68 <configure_wakeup+0xb8>)
    1df0:	58e3      	ldr	r3, [r4, r3]
    1df2:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    1df4:	230f      	movs	r3, #15
    1df6:	18fd      	adds	r5, r7, r3
    1df8:	2100      	movs	r1, #0
    1dfa:	2003      	movs	r0, #3
    1dfc:	4b1b      	ldr	r3, [pc, #108]	; (1e6c <configure_wakeup+0xbc>)
    1dfe:	58e3      	ldr	r3, [r4, r3]
    1e00:	4798      	blx	r3
    1e02:	0003      	movs	r3, r0
    1e04:	702b      	strb	r3, [r5, #0]
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    1e06:	003b      	movs	r3, r7
    1e08:	221f      	movs	r2, #31
    1e0a:	601a      	str	r2, [r3, #0]
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    1e0c:	003b      	movs	r3, r7
    1e0e:	2200      	movs	r2, #0
    1e10:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(11, &ext_conf);
    1e12:	003b      	movs	r3, r7
    1e14:	0019      	movs	r1, r3
    1e16:	200b      	movs	r0, #11
    1e18:	4b13      	ldr	r3, [pc, #76]	; (1e68 <configure_wakeup+0xb8>)
    1e1a:	58e3      	ldr	r3, [r4, r3]
    1e1c:	4798      	blx	r3
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    1e1e:	230e      	movs	r3, #14
    1e20:	18fd      	adds	r5, r7, r3
    1e22:	2100      	movs	r1, #0
    1e24:	200b      	movs	r0, #11
    1e26:	4b11      	ldr	r3, [pc, #68]	; (1e6c <configure_wakeup+0xbc>)
    1e28:	58e3      	ldr	r3, [r4, r3]
    1e2a:	4798      	blx	r3
    1e2c:	0003      	movs	r3, r0
    1e2e:	702b      	strb	r3, [r5, #0]
	if (code1 != STATUS_OK) return code1;
    1e30:	230f      	movs	r3, #15
    1e32:	18fb      	adds	r3, r7, r3
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	2b00      	cmp	r3, #0
    1e38:	d003      	beq.n	1e42 <configure_wakeup+0x92>
    1e3a:	230f      	movs	r3, #15
    1e3c:	18fb      	adds	r3, r7, r3
    1e3e:	781b      	ldrb	r3, [r3, #0]
    1e40:	e009      	b.n	1e56 <configure_wakeup+0xa6>
	else if (code2 != STATUS_OK) return code2;
    1e42:	230e      	movs	r3, #14
    1e44:	18fb      	adds	r3, r7, r3
    1e46:	781b      	ldrb	r3, [r3, #0]
    1e48:	2b00      	cmp	r3, #0
    1e4a:	d003      	beq.n	1e54 <configure_wakeup+0xa4>
    1e4c:	230e      	movs	r3, #14
    1e4e:	18fb      	adds	r3, r7, r3
    1e50:	781b      	ldrb	r3, [r3, #0]
    1e52:	e000      	b.n	1e56 <configure_wakeup+0xa6>
	else return STATUS_OK;
    1e54:	2300      	movs	r3, #0
}
    1e56:	0018      	movs	r0, r3
    1e58:	46bd      	mov	sp, r7
    1e5a:	b004      	add	sp, #16
    1e5c:	bdb0      	pop	{r4, r5, r7, pc}
    1e5e:	46c0      	nop			; (mov r8, r8)
    1e60:	00010018 	.word	0x00010018
    1e64:	00000024 	.word	0x00000024
    1e68:	00000124 	.word	0x00000124
    1e6c:	000001a4 	.word	0x000001a4

00001e70 <get_fattime>:
struct rtc_module rtc_instance;

DWORD get_fattime(void) {
    1e70:	b580      	push	{r7, lr}
    1e72:	b084      	sub	sp, #16
    1e74:	af00      	add	r7, sp, #0
    1e76:	4b15      	ldr	r3, [pc, #84]	; (1ecc <get_fattime+0x5c>)
    1e78:	447b      	add	r3, pc
	struct rtc_calendar_time tm;
	rtc_calendar_get_time(&rtc_instance, &tm);
    1e7a:	1d39      	adds	r1, r7, #4
    1e7c:	4a14      	ldr	r2, [pc, #80]	; (1ed0 <get_fattime+0x60>)
    1e7e:	589a      	ldr	r2, [r3, r2]
    1e80:	0010      	movs	r0, r2
    1e82:	4a14      	ldr	r2, [pc, #80]	; (1ed4 <get_fattime+0x64>)
    1e84:	589b      	ldr	r3, [r3, r2]
    1e86:	4798      	blx	r3
	DWORD fat_time = 0;
    1e88:	2300      	movs	r3, #0
    1e8a:	60fb      	str	r3, [r7, #12]
	fat_time = (tm.second / 2 << 0) | (tm.minute << 5) | (tm.hour << 11) | (tm.day << 16) | (tm.month << 21) | (tm.year << 25);
    1e8c:	1d3b      	adds	r3, r7, #4
    1e8e:	781b      	ldrb	r3, [r3, #0]
    1e90:	085b      	lsrs	r3, r3, #1
    1e92:	b2db      	uxtb	r3, r3
    1e94:	001a      	movs	r2, r3
    1e96:	1d3b      	adds	r3, r7, #4
    1e98:	785b      	ldrb	r3, [r3, #1]
    1e9a:	015b      	lsls	r3, r3, #5
    1e9c:	431a      	orrs	r2, r3
    1e9e:	1d3b      	adds	r3, r7, #4
    1ea0:	789b      	ldrb	r3, [r3, #2]
    1ea2:	02db      	lsls	r3, r3, #11
    1ea4:	431a      	orrs	r2, r3
    1ea6:	1d3b      	adds	r3, r7, #4
    1ea8:	791b      	ldrb	r3, [r3, #4]
    1eaa:	041b      	lsls	r3, r3, #16
    1eac:	431a      	orrs	r2, r3
    1eae:	1d3b      	adds	r3, r7, #4
    1eb0:	795b      	ldrb	r3, [r3, #5]
    1eb2:	055b      	lsls	r3, r3, #21
    1eb4:	431a      	orrs	r2, r3
    1eb6:	1d3b      	adds	r3, r7, #4
    1eb8:	88db      	ldrh	r3, [r3, #6]
    1eba:	065b      	lsls	r3, r3, #25
    1ebc:	4313      	orrs	r3, r2
    1ebe:	60fb      	str	r3, [r7, #12]
	return fat_time;
    1ec0:	68fb      	ldr	r3, [r7, #12]
}
    1ec2:	0018      	movs	r0, r3
    1ec4:	46bd      	mov	sp, r7
    1ec6:	b004      	add	sp, #16
    1ec8:	bd80      	pop	{r7, pc}
    1eca:	46c0      	nop			; (mov r8, r8)
    1ecc:	0000ff58 	.word	0x0000ff58
    1ed0:	00000030 	.word	0x00000030
    1ed4:	00000134 	.word	0x00000134

00001ed8 <configure_rtc>:



static enum status_code configure_rtc(void)
{
    1ed8:	b590      	push	{r4, r7, lr}
    1eda:	b087      	sub	sp, #28
    1edc:	af00      	add	r7, sp, #0
    1ede:	4c1e      	ldr	r4, [pc, #120]	; (1f58 <configure_rtc+0x80>)
    1ee0:	447c      	add	r4, pc
	// config base structs
	rtc_instance.hw = RTC;
    1ee2:	4b1e      	ldr	r3, [pc, #120]	; (1f5c <configure_rtc+0x84>)
    1ee4:	58e3      	ldr	r3, [r4, r3]
    1ee6:	4a1e      	ldr	r2, [pc, #120]	; (1f60 <configure_rtc+0x88>)
    1ee8:	601a      	str	r2, [r3, #0]
	rtc_instance.clock_24h = 1;
    1eea:	4b1c      	ldr	r3, [pc, #112]	; (1f5c <configure_rtc+0x84>)
    1eec:	58e3      	ldr	r3, [r4, r3]
    1eee:	2201      	movs	r2, #1
    1ef0:	711a      	strb	r2, [r3, #4]
	rtc_instance.year_init_value = 2000;
    1ef2:	4b1a      	ldr	r3, [pc, #104]	; (1f5c <configure_rtc+0x84>)
    1ef4:	58e3      	ldr	r3, [r4, r3]
    1ef6:	22fa      	movs	r2, #250	; 0xfa
    1ef8:	00d2      	lsls	r2, r2, #3
    1efa:	80da      	strh	r2, [r3, #6]
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    1efc:	1d3b      	adds	r3, r7, #4
    1efe:	0018      	movs	r0, r3
    1f00:	4b18      	ldr	r3, [pc, #96]	; (1f64 <configure_rtc+0x8c>)
    1f02:	447b      	add	r3, pc
    1f04:	4798      	blx	r3
	config_rtc_calendar.clock_24h = true;
    1f06:	1d3b      	adds	r3, r7, #4
    1f08:	2201      	movs	r2, #1
    1f0a:	711a      	strb	r2, [r3, #4]
	
	// enable the GCLK to RTC to read out the initial time before enabling
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1f0c:	003b      	movs	r3, r7
    1f0e:	0018      	movs	r0, r3
    1f10:	4b15      	ldr	r3, [pc, #84]	; (1f68 <configure_rtc+0x90>)
    1f12:	447b      	add	r3, pc
    1f14:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    1f16:	003b      	movs	r3, r7
    1f18:	2202      	movs	r2, #2
    1f1a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    1f1c:	003b      	movs	r3, r7
    1f1e:	0019      	movs	r1, r3
    1f20:	2004      	movs	r0, #4
    1f22:	4b12      	ldr	r3, [pc, #72]	; (1f6c <configure_rtc+0x94>)
    1f24:	58e3      	ldr	r3, [r4, r3]
    1f26:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    1f28:	2004      	movs	r0, #4
    1f2a:	4b11      	ldr	r3, [pc, #68]	; (1f70 <configure_rtc+0x98>)
    1f2c:	58e3      	ldr	r3, [r4, r3]
    1f2e:	4798      	blx	r3

	// enable the RTC and set the initial time
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    1f30:	1d3a      	adds	r2, r7, #4
    1f32:	490b      	ldr	r1, [pc, #44]	; (1f60 <configure_rtc+0x88>)
    1f34:	4b09      	ldr	r3, [pc, #36]	; (1f5c <configure_rtc+0x84>)
    1f36:	58e3      	ldr	r3, [r4, r3]
    1f38:	0018      	movs	r0, r3
    1f3a:	4b0e      	ldr	r3, [pc, #56]	; (1f74 <configure_rtc+0x9c>)
    1f3c:	58e3      	ldr	r3, [r4, r3]
    1f3e:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    1f40:	4b06      	ldr	r3, [pc, #24]	; (1f5c <configure_rtc+0x84>)
    1f42:	58e3      	ldr	r3, [r4, r3]
    1f44:	0018      	movs	r0, r3
    1f46:	4b0c      	ldr	r3, [pc, #48]	; (1f78 <configure_rtc+0xa0>)
    1f48:	58e3      	ldr	r3, [r4, r3]
    1f4a:	4798      	blx	r3
	return STATUS_OK;
    1f4c:	2300      	movs	r3, #0
}
    1f4e:	0018      	movs	r0, r3
    1f50:	46bd      	mov	sp, r7
    1f52:	b007      	add	sp, #28
    1f54:	bd90      	pop	{r4, r7, pc}
    1f56:	46c0      	nop			; (mov r8, r8)
    1f58:	0000fef0 	.word	0x0000fef0
    1f5c:	00000030 	.word	0x00000030
    1f60:	40001400 	.word	0x40001400
    1f64:	fffffcc3 	.word	0xfffffcc3
    1f68:	fffffa37 	.word	0xfffffa37
    1f6c:	000000b0 	.word	0x000000b0
    1f70:	00000230 	.word	0x00000230
    1f74:	000000d0 	.word	0x000000d0
    1f78:	00000058 	.word	0x00000058

00001f7c <configure_nvm>:
static enum status_code configure_nvm(void) {
    1f7c:	b5b0      	push	{r4, r5, r7, lr}
    1f7e:	b082      	sub	sp, #8
    1f80:	af00      	add	r7, sp, #0
    1f82:	4d0c      	ldr	r5, [pc, #48]	; (1fb4 <configure_nvm+0x38>)
    1f84:	447d      	add	r5, pc
	struct nvm_config config;
	nvm_get_config_defaults(&config);
    1f86:	003b      	movs	r3, r7
    1f88:	0018      	movs	r0, r3
    1f8a:	4b0b      	ldr	r3, [pc, #44]	; (1fb8 <configure_nvm+0x3c>)
    1f8c:	447b      	add	r3, pc
    1f8e:	4798      	blx	r3
	config.manual_page_write = false;
    1f90:	003b      	movs	r3, r7
    1f92:	2200      	movs	r2, #0
    1f94:	705a      	strb	r2, [r3, #1]
	enum status_code code = nvm_set_config(&config);
    1f96:	1dfc      	adds	r4, r7, #7
    1f98:	003b      	movs	r3, r7
    1f9a:	0018      	movs	r0, r3
    1f9c:	4b07      	ldr	r3, [pc, #28]	; (1fbc <configure_nvm+0x40>)
    1f9e:	58eb      	ldr	r3, [r5, r3]
    1fa0:	4798      	blx	r3
    1fa2:	0003      	movs	r3, r0
    1fa4:	7023      	strb	r3, [r4, #0]
	return code;
    1fa6:	1dfb      	adds	r3, r7, #7
    1fa8:	781b      	ldrb	r3, [r3, #0]
}
    1faa:	0018      	movs	r0, r3
    1fac:	46bd      	mov	sp, r7
    1fae:	b002      	add	sp, #8
    1fb0:	bdb0      	pop	{r4, r5, r7, pc}
    1fb2:	46c0      	nop			; (mov r8, r8)
    1fb4:	0000fe4c 	.word	0x0000fe4c
    1fb8:	fffffa35 	.word	0xfffffa35
    1fbc:	00000250 	.word	0x00000250

00001fc0 <configure_bod>:
static enum status_code configure_bod(void)
{
    1fc0:	b5b0      	push	{r4, r5, r7, lr}
    1fc2:	b084      	sub	sp, #16
    1fc4:	af00      	add	r7, sp, #0
    1fc6:	4d24      	ldr	r5, [pc, #144]	; (2058 <STACK_SIZE+0x58>)
    1fc8:	447d      	add	r5, pc
	struct bod_config config_bod33;
	bod_get_config_defaults(&config_bod33);
    1fca:	1d3b      	adds	r3, r7, #4
    1fcc:	0018      	movs	r0, r3
    1fce:	4b23      	ldr	r3, [pc, #140]	; (205c <STACK_SIZE+0x5c>)
    1fd0:	447b      	add	r3, pc
    1fd2:	4798      	blx	r3
	config_bod33.action = BOD_ACTION_INTERRUPT;
    1fd4:	1d3b      	adds	r3, r7, #4
    1fd6:	2210      	movs	r2, #16
    1fd8:	711a      	strb	r2, [r3, #4]
	config_bod33.hysteresis = 1;
    1fda:	1d3b      	adds	r3, r7, #4
    1fdc:	2201      	movs	r2, #1
    1fde:	719a      	strb	r2, [r3, #6]
	config_bod33.run_in_standby = 0;
    1fe0:	1d3b      	adds	r3, r7, #4
    1fe2:	2200      	movs	r2, #0
    1fe4:	71da      	strb	r2, [r3, #7]
	config_bod33.mode = BOD_MODE_SAMPLED;
    1fe6:	1d3b      	adds	r3, r7, #4
    1fe8:	2280      	movs	r2, #128	; 0x80
    1fea:	0052      	lsls	r2, r2, #1
    1fec:	805a      	strh	r2, [r3, #2]
	config_bod33.level = 40;						// Set to 2.8V
    1fee:	1d3b      	adds	r3, r7, #4
    1ff0:	2228      	movs	r2, #40	; 0x28
    1ff2:	715a      	strb	r2, [r3, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    1ff4:	230f      	movs	r3, #15
    1ff6:	18fc      	adds	r4, r7, r3
    1ff8:	1d3b      	adds	r3, r7, #4
    1ffa:	0019      	movs	r1, r3
    1ffc:	2000      	movs	r0, #0
    1ffe:	4b18      	ldr	r3, [pc, #96]	; (2060 <STACK_SIZE+0x60>)
    2000:	58eb      	ldr	r3, [r5, r3]
    2002:	4798      	blx	r3
    2004:	0003      	movs	r3, r0
    2006:	7023      	strb	r3, [r4, #0]
	enum status_code code2 = bod_enable(BOD_BOD33);
    2008:	230e      	movs	r3, #14
    200a:	18fc      	adds	r4, r7, r3
    200c:	2000      	movs	r0, #0
    200e:	4b15      	ldr	r3, [pc, #84]	; (2064 <STACK_SIZE+0x64>)
    2010:	447b      	add	r3, pc
    2012:	4798      	blx	r3
    2014:	0003      	movs	r3, r0
    2016:	7023      	strb	r3, [r4, #0]
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    2018:	4b13      	ldr	r3, [pc, #76]	; (2068 <STACK_SIZE+0x68>)
    201a:	2280      	movs	r2, #128	; 0x80
    201c:	00d2      	lsls	r2, r2, #3
    201e:	605a      	str	r2, [r3, #4]
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_SYSCTRL);
    2020:	2001      	movs	r0, #1
    2022:	4b12      	ldr	r3, [pc, #72]	; (206c <STACK_SIZE+0x6c>)
    2024:	447b      	add	r3, pc
    2026:	4798      	blx	r3
	if (code1 != STATUS_OK) return code1;
    2028:	230f      	movs	r3, #15
    202a:	18fb      	adds	r3, r7, r3
    202c:	781b      	ldrb	r3, [r3, #0]
    202e:	2b00      	cmp	r3, #0
    2030:	d003      	beq.n	203a <STACK_SIZE+0x3a>
    2032:	230f      	movs	r3, #15
    2034:	18fb      	adds	r3, r7, r3
    2036:	781b      	ldrb	r3, [r3, #0]
    2038:	e009      	b.n	204e <STACK_SIZE+0x4e>
	else if (code2 != STATUS_OK) return code2;
    203a:	230e      	movs	r3, #14
    203c:	18fb      	adds	r3, r7, r3
    203e:	781b      	ldrb	r3, [r3, #0]
    2040:	2b00      	cmp	r3, #0
    2042:	d003      	beq.n	204c <STACK_SIZE+0x4c>
    2044:	230e      	movs	r3, #14
    2046:	18fb      	adds	r3, r7, r3
    2048:	781b      	ldrb	r3, [r3, #0]
    204a:	e000      	b.n	204e <STACK_SIZE+0x4e>
	else return STATUS_OK;
    204c:	2300      	movs	r3, #0
}
    204e:	0018      	movs	r0, r3
    2050:	46bd      	mov	sp, r7
    2052:	b004      	add	sp, #16
    2054:	bdb0      	pop	{r4, r5, r7, pc}
    2056:	46c0      	nop			; (mov r8, r8)
    2058:	0000fe08 	.word	0x0000fe08
    205c:	fffff911 	.word	0xfffff911
    2060:	0000021c 	.word	0x0000021c
    2064:	fffff905 	.word	0xfffff905
    2068:	40000800 	.word	0x40000800
    206c:	fffffb09 	.word	0xfffffb09

00002070 <SYSCTRL_Handler>:

// Brown-out action, when supply-voltage < 2.8V ...
void SYSCTRL_Handler(void) {
    2070:	b580      	push	{r7, lr}
    2072:	af00      	add	r7, sp, #0
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    2074:	4b07      	ldr	r3, [pc, #28]	; (2094 <SYSCTRL_Handler+0x24>)
    2076:	689a      	ldr	r2, [r3, #8]
    2078:	2380      	movs	r3, #128	; 0x80
    207a:	00db      	lsls	r3, r3, #3
    207c:	4013      	ands	r3, r2
    207e:	d006      	beq.n	208e <SYSCTRL_Handler+0x1e>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    2080:	4b04      	ldr	r3, [pc, #16]	; (2094 <SYSCTRL_Handler+0x24>)
    2082:	2280      	movs	r2, #128	; 0x80
    2084:	00d2      	lsls	r2, r2, #3
    2086:	609a      	str	r2, [r3, #8]
		system_sleep();
    2088:	4b03      	ldr	r3, [pc, #12]	; (2098 <SYSCTRL_Handler+0x28>)
    208a:	447b      	add	r3, pc
    208c:	4798      	blx	r3
	}
}
    208e:	46c0      	nop			; (mov r8, r8)
    2090:	46bd      	mov	sp, r7
    2092:	bd80      	pop	{r7, pc}
    2094:	40000800 	.word	0x40000800
    2098:	fffffc73 	.word	0xfffffc73

0000209c <main>:

int main(void)
{
    209c:	b5f0      	push	{r4, r5, r6, r7, lr}
    209e:	46c6      	mov	lr, r8
    20a0:	b500      	push	{lr}
    20a2:	4c9f      	ldr	r4, [pc, #636]	; (2320 <main+0x284>)
    20a4:	44a5      	add	sp, r4
    20a6:	af04      	add	r7, sp, #16
    20a8:	4c9e      	ldr	r4, [pc, #632]	; (2324 <main+0x288>)
    20aa:	447c      	add	r4, pc
	delay_init();
    20ac:	4b9e      	ldr	r3, [pc, #632]	; (2328 <main+0x28c>)
    20ae:	58e3      	ldr	r3, [r4, r3]
    20b0:	4798      	blx	r3
	led_blink(1,100,1);				// Blink once to indicate entry
    20b2:	2201      	movs	r2, #1
    20b4:	2164      	movs	r1, #100	; 0x64
    20b6:	2001      	movs	r0, #1
    20b8:	4b9c      	ldr	r3, [pc, #624]	; (232c <main+0x290>)
    20ba:	447b      	add	r3, pc
    20bc:	4798      	blx	r3

	bool gotoApplication = 1;		// Can we skip to the application?
    20be:	4b9c      	ldr	r3, [pc, #624]	; (2330 <main+0x294>)
    20c0:	2208      	movs	r2, #8
    20c2:	4694      	mov	ip, r2
    20c4:	44bc      	add	ip, r7
    20c6:	4463      	add	r3, ip
    20c8:	2201      	movs	r2, #1
    20ca:	701a      	strb	r2, [r3, #0]
	bool sdError = 0;				// Any error in SD card process?
    20cc:	4b99      	ldr	r3, [pc, #612]	; (2334 <main+0x298>)
    20ce:	2208      	movs	r2, #8
    20d0:	4694      	mov	ip, r2
    20d2:	44bc      	add	ip, r7
    20d4:	4463      	add	r3, ip
    20d6:	2200      	movs	r2, #0
    20d8:	701a      	strb	r2, [r3, #0]

	// Check buttons, if both pressed, force bootloader execution
	struct port_config but_cfg;
	port_get_config_defaults(&but_cfg);
    20da:	23ae      	movs	r3, #174	; 0xae
    20dc:	009b      	lsls	r3, r3, #2
    20de:	2208      	movs	r2, #8
    20e0:	4694      	mov	ip, r2
    20e2:	44bc      	add	ip, r7
    20e4:	4463      	add	r3, ip
    20e6:	0018      	movs	r0, r3
    20e8:	4b93      	ldr	r3, [pc, #588]	; (2338 <main+0x29c>)
    20ea:	447b      	add	r3, pc
    20ec:	4798      	blx	r3
	port_pin_set_config(BUT1_IRQ_IN_PIN, &but_cfg);
    20ee:	23ae      	movs	r3, #174	; 0xae
    20f0:	009b      	lsls	r3, r3, #2
    20f2:	2208      	movs	r2, #8
    20f4:	4694      	mov	ip, r2
    20f6:	44bc      	add	ip, r7
    20f8:	4463      	add	r3, ip
    20fa:	0019      	movs	r1, r3
    20fc:	2003      	movs	r0, #3
    20fe:	4b8f      	ldr	r3, [pc, #572]	; (233c <main+0x2a0>)
    2100:	58e3      	ldr	r3, [r4, r3]
    2102:	4798      	blx	r3
	port_pin_set_config(BUT2_IRQ_IN_PIN, &but_cfg);
    2104:	23ae      	movs	r3, #174	; 0xae
    2106:	009b      	lsls	r3, r3, #2
    2108:	2208      	movs	r2, #8
    210a:	4694      	mov	ip, r2
    210c:	44bc      	add	ip, r7
    210e:	4463      	add	r3, ip
    2110:	0019      	movs	r1, r3
    2112:	201f      	movs	r0, #31
    2114:	4b89      	ldr	r3, [pc, #548]	; (233c <main+0x2a0>)
    2116:	58e3      	ldr	r3, [r4, r3]
    2118:	4798      	blx	r3
	bool b1 = !port_pin_get_input_level(BUT1_IRQ_IN_PIN);
    211a:	2003      	movs	r0, #3
    211c:	4b88      	ldr	r3, [pc, #544]	; (2340 <main+0x2a4>)
    211e:	447b      	add	r3, pc
    2120:	4798      	blx	r3
    2122:	0003      	movs	r3, r0
    2124:	1e5a      	subs	r2, r3, #1
    2126:	4193      	sbcs	r3, r2
    2128:	b2db      	uxtb	r3, r3
    212a:	2201      	movs	r2, #1
    212c:	4053      	eors	r3, r2
    212e:	b2db      	uxtb	r3, r3
    2130:	001a      	movs	r2, r3
    2132:	4b84      	ldr	r3, [pc, #528]	; (2344 <main+0x2a8>)
    2134:	2108      	movs	r1, #8
    2136:	468c      	mov	ip, r1
    2138:	44bc      	add	ip, r7
    213a:	4463      	add	r3, ip
    213c:	701a      	strb	r2, [r3, #0]
    213e:	781a      	ldrb	r2, [r3, #0]
    2140:	2101      	movs	r1, #1
    2142:	400a      	ands	r2, r1
    2144:	701a      	strb	r2, [r3, #0]
	bool b2 = !port_pin_get_input_level(BUT2_IRQ_IN_PIN);
    2146:	201f      	movs	r0, #31
    2148:	4b7f      	ldr	r3, [pc, #508]	; (2348 <main+0x2ac>)
    214a:	447b      	add	r3, pc
    214c:	4798      	blx	r3
    214e:	0003      	movs	r3, r0
    2150:	1e5a      	subs	r2, r3, #1
    2152:	4193      	sbcs	r3, r2
    2154:	b2db      	uxtb	r3, r3
    2156:	2201      	movs	r2, #1
    2158:	4053      	eors	r3, r2
    215a:	b2db      	uxtb	r3, r3
    215c:	001a      	movs	r2, r3
    215e:	4b7b      	ldr	r3, [pc, #492]	; (234c <main+0x2b0>)
    2160:	2108      	movs	r1, #8
    2162:	468c      	mov	ip, r1
    2164:	44bc      	add	ip, r7
    2166:	4463      	add	r3, ip
    2168:	701a      	strb	r2, [r3, #0]
    216a:	781a      	ldrb	r2, [r3, #0]
    216c:	2101      	movs	r1, #1
    216e:	400a      	ands	r2, r1
    2170:	701a      	strb	r2, [r3, #0]
	if (b1 && b2) {
    2172:	4b74      	ldr	r3, [pc, #464]	; (2344 <main+0x2a8>)
    2174:	2208      	movs	r2, #8
    2176:	4694      	mov	ip, r2
    2178:	44bc      	add	ip, r7
    217a:	4463      	add	r3, ip
    217c:	781b      	ldrb	r3, [r3, #0]
    217e:	2b00      	cmp	r3, #0
    2180:	d00e      	beq.n	21a0 <main+0x104>
    2182:	4b72      	ldr	r3, [pc, #456]	; (234c <main+0x2b0>)
    2184:	2208      	movs	r2, #8
    2186:	4694      	mov	ip, r2
    2188:	44bc      	add	ip, r7
    218a:	4463      	add	r3, ip
    218c:	781b      	ldrb	r3, [r3, #0]
    218e:	2b00      	cmp	r3, #0
    2190:	d006      	beq.n	21a0 <main+0x104>
		gotoApplication = 0;
    2192:	4b67      	ldr	r3, [pc, #412]	; (2330 <main+0x294>)
    2194:	2208      	movs	r2, #8
    2196:	4694      	mov	ip, r2
    2198:	44bc      	add	ip, r7
    219a:	4463      	add	r3, ip
    219c:	2200      	movs	r2, #0
    219e:	701a      	strb	r2, [r3, #0]
	}
	
	// Check SD card for new boot file, force bootloader execution if found
	// Initialize SD card driver
	sd_mmc_init();
    21a0:	4b6b      	ldr	r3, [pc, #428]	; (2350 <main+0x2b4>)
    21a2:	58e3      	ldr	r3, [r4, r3]
    21a4:	4798      	blx	r3

	// Attempt to initialize SD card
	volatile Ctrl_status status = CTRL_FAIL;
    21a6:	4b6b      	ldr	r3, [pc, #428]	; (2354 <main+0x2b8>)
    21a8:	2208      	movs	r2, #8
    21aa:	4694      	mov	ip, r2
    21ac:	44bc      	add	ip, r7
    21ae:	4463      	add	r3, ip
    21b0:	2201      	movs	r2, #1
    21b2:	701a      	strb	r2, [r3, #0]
	int count=5;
    21b4:	2305      	movs	r3, #5
    21b6:	22b4      	movs	r2, #180	; 0xb4
    21b8:	0092      	lsls	r2, r2, #2
    21ba:	2108      	movs	r1, #8
    21bc:	468c      	mov	ip, r1
    21be:	44bc      	add	ip, r7
    21c0:	4462      	add	r2, ip
    21c2:	6013      	str	r3, [r2, #0]
	while (status != CTRL_GOOD && count > 0) {
    21c4:	e02c      	b.n	2220 <main+0x184>
		status = sd_mmc_test_unit_ready(0);
    21c6:	2000      	movs	r0, #0
    21c8:	4b63      	ldr	r3, [pc, #396]	; (2358 <main+0x2bc>)
    21ca:	58e3      	ldr	r3, [r4, r3]
    21cc:	4798      	blx	r3
    21ce:	0003      	movs	r3, r0
    21d0:	001a      	movs	r2, r3
    21d2:	4b60      	ldr	r3, [pc, #384]	; (2354 <main+0x2b8>)
    21d4:	2108      	movs	r1, #8
    21d6:	468c      	mov	ip, r1
    21d8:	44bc      	add	ip, r7
    21da:	4463      	add	r3, ip
    21dc:	701a      	strb	r2, [r3, #0]
		if (status == CTRL_FAIL || status == CTRL_NO_PRESENT) {
    21de:	4b5d      	ldr	r3, [pc, #372]	; (2354 <main+0x2b8>)
    21e0:	2208      	movs	r2, #8
    21e2:	4694      	mov	ip, r2
    21e4:	44bc      	add	ip, r7
    21e6:	4463      	add	r3, ip
    21e8:	781b      	ldrb	r3, [r3, #0]
    21ea:	b2db      	uxtb	r3, r3
    21ec:	2b01      	cmp	r3, #1
    21ee:	d008      	beq.n	2202 <main+0x166>
    21f0:	4b58      	ldr	r3, [pc, #352]	; (2354 <main+0x2b8>)
    21f2:	2208      	movs	r2, #8
    21f4:	4694      	mov	ip, r2
    21f6:	44bc      	add	ip, r7
    21f8:	4463      	add	r3, ip
    21fa:	781b      	ldrb	r3, [r3, #0]
    21fc:	b2db      	uxtb	r3, r3
    21fe:	2b02      	cmp	r3, #2
    2200:	d10e      	bne.n	2220 <main+0x184>
			count--;
    2202:	23b4      	movs	r3, #180	; 0xb4
    2204:	009b      	lsls	r3, r3, #2
    2206:	2208      	movs	r2, #8
    2208:	4694      	mov	ip, r2
    220a:	44bc      	add	ip, r7
    220c:	4463      	add	r3, ip
    220e:	681b      	ldr	r3, [r3, #0]
    2210:	3b01      	subs	r3, #1
    2212:	22b4      	movs	r2, #180	; 0xb4
    2214:	0092      	lsls	r2, r2, #2
    2216:	2108      	movs	r1, #8
    2218:	468c      	mov	ip, r1
    221a:	44bc      	add	ip, r7
    221c:	4462      	add	r2, ip
    221e:	6013      	str	r3, [r2, #0]
	while (status != CTRL_GOOD && count > 0) {
    2220:	4b4c      	ldr	r3, [pc, #304]	; (2354 <main+0x2b8>)
    2222:	2208      	movs	r2, #8
    2224:	4694      	mov	ip, r2
    2226:	44bc      	add	ip, r7
    2228:	4463      	add	r3, ip
    222a:	781b      	ldrb	r3, [r3, #0]
    222c:	b2db      	uxtb	r3, r3
    222e:	2b00      	cmp	r3, #0
    2230:	d008      	beq.n	2244 <main+0x1a8>
    2232:	23b4      	movs	r3, #180	; 0xb4
    2234:	009b      	lsls	r3, r3, #2
    2236:	2208      	movs	r2, #8
    2238:	4694      	mov	ip, r2
    223a:	44bc      	add	ip, r7
    223c:	4463      	add	r3, ip
    223e:	681b      	ldr	r3, [r3, #0]
    2240:	2b00      	cmp	r3, #0
    2242:	dcc0      	bgt.n	21c6 <main+0x12a>
		}
	}
	if (count == 0) sdError = 1;
    2244:	23b4      	movs	r3, #180	; 0xb4
    2246:	009b      	lsls	r3, r3, #2
    2248:	2208      	movs	r2, #8
    224a:	4694      	mov	ip, r2
    224c:	44bc      	add	ip, r7
    224e:	4463      	add	r3, ip
    2250:	681b      	ldr	r3, [r3, #0]
    2252:	2b00      	cmp	r3, #0
    2254:	d106      	bne.n	2264 <main+0x1c8>
    2256:	4b37      	ldr	r3, [pc, #220]	; (2334 <main+0x298>)
    2258:	2208      	movs	r2, #8
    225a:	4694      	mov	ip, r2
    225c:	44bc      	add	ip, r7
    225e:	4463      	add	r3, ip
    2260:	2201      	movs	r2, #1
    2262:	701a      	strb	r2, [r3, #0]

	// Check for new firmware image on SD
	FATFS fs;
	FIL file_object;
	const char* image_name = IMAGE_DEFAULT_NAME;
    2264:	4b3d      	ldr	r3, [pc, #244]	; (235c <main+0x2c0>)
    2266:	447b      	add	r3, pc
    2268:	22b0      	movs	r2, #176	; 0xb0
    226a:	0092      	lsls	r2, r2, #2
    226c:	2108      	movs	r1, #8
    226e:	468c      	mov	ip, r1
    2270:	44bc      	add	ip, r7
    2272:	4462      	add	r2, ip
    2274:	6013      	str	r3, [r2, #0]
	FRESULT res;
	FILINFO fno;
	memset(&fs, 0, sizeof(FATFS));	
    2276:	238c      	movs	r3, #140	; 0x8c
    2278:	009a      	lsls	r2, r3, #2
    227a:	2384      	movs	r3, #132	; 0x84
    227c:	2108      	movs	r1, #8
    227e:	468c      	mov	ip, r1
    2280:	44bc      	add	ip, r7
    2282:	4463      	add	r3, ip
    2284:	2100      	movs	r1, #0
    2286:	0018      	movs	r0, r3
    2288:	4b35      	ldr	r3, [pc, #212]	; (2360 <main+0x2c4>)
    228a:	58e3      	ldr	r3, [r4, r3]
    228c:	4798      	blx	r3
	if (sdError == 0) {
    228e:	4b29      	ldr	r3, [pc, #164]	; (2334 <main+0x298>)
    2290:	2208      	movs	r2, #8
    2292:	4694      	mov	ip, r2
    2294:	44bc      	add	ip, r7
    2296:	4463      	add	r3, ip
    2298:	781b      	ldrb	r3, [r3, #0]
    229a:	2201      	movs	r2, #1
    229c:	4053      	eors	r3, r2
    229e:	b2db      	uxtb	r3, r3
    22a0:	2b00      	cmp	r3, #0
    22a2:	d06c      	beq.n	237e <main+0x2e2>
		// Mount FAT32 file system on SD card
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    22a4:	4b2f      	ldr	r3, [pc, #188]	; (2364 <main+0x2c8>)
    22a6:	2208      	movs	r2, #8
    22a8:	18ba      	adds	r2, r7, r2
    22aa:	18d5      	adds	r5, r2, r3
    22ac:	2384      	movs	r3, #132	; 0x84
    22ae:	2208      	movs	r2, #8
    22b0:	4694      	mov	ip, r2
    22b2:	44bc      	add	ip, r7
    22b4:	4463      	add	r3, ip
    22b6:	0019      	movs	r1, r3
    22b8:	2000      	movs	r0, #0
    22ba:	4b2b      	ldr	r3, [pc, #172]	; (2368 <main+0x2cc>)
    22bc:	58e3      	ldr	r3, [r4, r3]
    22be:	4798      	blx	r3
    22c0:	0003      	movs	r3, r0
    22c2:	702b      	strb	r3, [r5, #0]
	
		// Find the image file
		res = f_stat(image_name, &fno);
    22c4:	4b27      	ldr	r3, [pc, #156]	; (2364 <main+0x2c8>)
    22c6:	2208      	movs	r2, #8
    22c8:	18ba      	adds	r2, r7, r2
    22ca:	18d5      	adds	r5, r2, r3
    22cc:	2348      	movs	r3, #72	; 0x48
    22ce:	2208      	movs	r2, #8
    22d0:	18ba      	adds	r2, r7, r2
    22d2:	18d2      	adds	r2, r2, r3
    22d4:	23b0      	movs	r3, #176	; 0xb0
    22d6:	009b      	lsls	r3, r3, #2
    22d8:	2108      	movs	r1, #8
    22da:	468c      	mov	ip, r1
    22dc:	44bc      	add	ip, r7
    22de:	4463      	add	r3, ip
    22e0:	681b      	ldr	r3, [r3, #0]
    22e2:	0011      	movs	r1, r2
    22e4:	0018      	movs	r0, r3
    22e6:	4b21      	ldr	r3, [pc, #132]	; (236c <main+0x2d0>)
    22e8:	58e3      	ldr	r3, [r4, r3]
    22ea:	4798      	blx	r3
    22ec:	0003      	movs	r3, r0
    22ee:	702b      	strb	r3, [r5, #0]
		if (res == FR_OK) {				// File exists
    22f0:	4b1c      	ldr	r3, [pc, #112]	; (2364 <main+0x2c8>)
    22f2:	2208      	movs	r2, #8
    22f4:	4694      	mov	ip, r2
    22f6:	44bc      	add	ip, r7
    22f8:	4463      	add	r3, ip
    22fa:	781b      	ldrb	r3, [r3, #0]
    22fc:	2b00      	cmp	r3, #0
    22fe:	d137      	bne.n	2370 <main+0x2d4>
			gotoApplication = 0;
    2300:	4b0b      	ldr	r3, [pc, #44]	; (2330 <main+0x294>)
    2302:	2208      	movs	r2, #8
    2304:	4694      	mov	ip, r2
    2306:	44bc      	add	ip, r7
    2308:	4463      	add	r3, ip
    230a:	2200      	movs	r2, #0
    230c:	701a      	strb	r2, [r3, #0]
			sdError = 0;
    230e:	4b09      	ldr	r3, [pc, #36]	; (2334 <main+0x298>)
    2310:	2208      	movs	r2, #8
    2312:	4694      	mov	ip, r2
    2314:	44bc      	add	ip, r7
    2316:	4463      	add	r3, ip
    2318:	2200      	movs	r2, #0
    231a:	701a      	strb	r2, [r3, #0]
    231c:	e02f      	b.n	237e <main+0x2e2>
    231e:	46c0      	nop			; (mov r8, r8)
    2320:	fffffd10 	.word	0xfffffd10
    2324:	0000fd26 	.word	0x0000fd26
    2328:	00000174 	.word	0x00000174
    232c:	00000aef 	.word	0x00000aef
    2330:	000002d7 	.word	0x000002d7
    2334:	000002d6 	.word	0x000002d6
    2338:	fffff93b 	.word	0xfffff93b
    233c:	00000238 	.word	0x00000238
    2340:	fffff92b 	.word	0xfffff92b
    2344:	000002c7 	.word	0x000002c7
    2348:	fffff8ff 	.word	0xfffff8ff
    234c:	000002c6 	.word	0x000002c6
    2350:	00000044 	.word	0x00000044
    2354:	000002b7 	.word	0x000002b7
    2358:	00000048 	.word	0x00000048
    235c:	0000f81e 	.word	0x0000f81e
    2360:	000001f0 	.word	0x000001f0
    2364:	000002bf 	.word	0x000002bf
    2368:	00000210 	.word	0x00000210
    236c:	00000258 	.word	0x00000258
		} else sdError = 1;
    2370:	4b91      	ldr	r3, [pc, #580]	; (25b8 <main+0x51c>)
    2372:	2208      	movs	r2, #8
    2374:	4694      	mov	ip, r2
    2376:	44bc      	add	ip, r7
    2378:	4463      	add	r3, ip
    237a:	2201      	movs	r2, #1
    237c:	701a      	strb	r2, [r3, #0]
	}

	// Disable SD card SPI
	struct spi_module spi;
	spi.hw = SD_MMC_SPI;
    237e:	4b8f      	ldr	r3, [pc, #572]	; (25bc <main+0x520>)
    2380:	22b6      	movs	r2, #182	; 0xb6
    2382:	0092      	lsls	r2, r2, #2
    2384:	4694      	mov	ip, r2
    2386:	2208      	movs	r2, #8
    2388:	4690      	mov	r8, r2
    238a:	44b8      	add	r8, r7
    238c:	44c4      	add	ip, r8
    238e:	4463      	add	r3, ip
    2390:	4a8b      	ldr	r2, [pc, #556]	; (25c0 <main+0x524>)
    2392:	601a      	str	r2, [r3, #0]
	spi_reset(&spi);
    2394:	230c      	movs	r3, #12
    2396:	2208      	movs	r2, #8
    2398:	4694      	mov	ip, r2
    239a:	44bc      	add	ip, r7
    239c:	4463      	add	r3, ip
    239e:	0018      	movs	r0, r3
    23a0:	4b88      	ldr	r3, [pc, #544]	; (25c4 <main+0x528>)
    23a2:	58e3      	ldr	r3, [r4, r3]
    23a4:	4798      	blx	r3
	spi_disable(&spi);
    23a6:	230c      	movs	r3, #12
    23a8:	2208      	movs	r2, #8
    23aa:	4694      	mov	ip, r2
    23ac:	44bc      	add	ip, r7
    23ae:	4463      	add	r3, ip
    23b0:	0018      	movs	r0, r3
    23b2:	4b85      	ldr	r3, [pc, #532]	; (25c8 <main+0x52c>)
    23b4:	447b      	add	r3, pc
    23b6:	4798      	blx	r3

	// Disable interrupts
	system_interrupt_disable_global();
    23b8:	4b84      	ldr	r3, [pc, #528]	; (25cc <main+0x530>)
    23ba:	447b      	add	r3, pc
    23bc:	4798      	blx	r3

	// Jump to application if allowed
	if (gotoApplication) {
    23be:	4b84      	ldr	r3, [pc, #528]	; (25d0 <main+0x534>)
    23c0:	2208      	movs	r2, #8
    23c2:	4694      	mov	ip, r2
    23c4:	44bc      	add	ip, r7
    23c6:	4463      	add	r3, ip
    23c8:	781b      	ldrb	r3, [r3, #0]
    23ca:	2b00      	cmp	r3, #0
    23cc:	d002      	beq.n	23d4 <main+0x338>
		start_application();
    23ce:	4b81      	ldr	r3, [pc, #516]	; (25d4 <main+0x538>)
    23d0:	447b      	add	r3, pc
    23d2:	4798      	blx	r3
	}

	// START BOOTLOADER MAIN PROGRAM
	system_init();						// clocks and I/O pins
    23d4:	4b80      	ldr	r3, [pc, #512]	; (25d8 <main+0x53c>)
    23d6:	58e3      	ldr	r3, [r4, r3]
    23d8:	4798      	blx	r3
	delay_init();						// delay clock update
    23da:	4b80      	ldr	r3, [pc, #512]	; (25dc <main+0x540>)
    23dc:	58e3      	ldr	r3, [r4, r3]
    23de:	4798      	blx	r3
	system_interrupt_enable_global();	// Enable interrupts
    23e0:	4b7f      	ldr	r3, [pc, #508]	; (25e0 <main+0x544>)
    23e2:	447b      	add	r3, pc
    23e4:	4798      	blx	r3
	system_set_sleepmode(SYSTEM_SLEEPMODE_STANDBY); // Allow sleep mode
    23e6:	2003      	movs	r0, #3
    23e8:	4b7e      	ldr	r3, [pc, #504]	; (25e4 <main+0x548>)
    23ea:	447b      	add	r3, pc
    23ec:	4798      	blx	r3
#ifdef ENABLE_USB_DEBUG
	stdio_usb_init();					// stdio over USB CDC
    23ee:	4b7e      	ldr	r3, [pc, #504]	; (25e8 <main+0x54c>)
    23f0:	58e3      	ldr	r3, [r4, r3]
    23f2:	4798      	blx	r3
	stdio_usb_enable();					// stdio over USB CDC
    23f4:	4b7d      	ldr	r3, [pc, #500]	; (25ec <main+0x550>)
    23f6:	58e3      	ldr	r3, [r4, r3]
    23f8:	4798      	blx	r3
	delay_ms(500);						// Wait for USB to be ready
    23fa:	23fa      	movs	r3, #250	; 0xfa
    23fc:	005b      	lsls	r3, r3, #1
    23fe:	0018      	movs	r0, r3
    2400:	4b7b      	ldr	r3, [pc, #492]	; (25f0 <main+0x554>)
    2402:	58e3      	ldr	r3, [r4, r3]
    2404:	4798      	blx	r3
#endif
	// Print diagnostic information
	debug_print("\n\n\n");
    2406:	4b7b      	ldr	r3, [pc, #492]	; (25f4 <main+0x558>)
    2408:	447b      	add	r3, pc
    240a:	0018      	movs	r0, r3
    240c:	4b7a      	ldr	r3, [pc, #488]	; (25f8 <main+0x55c>)
    240e:	447b      	add	r3, pc
    2410:	4798      	blx	r3
	debug_print("..... Bootloader started .....\n");
    2412:	4b7a      	ldr	r3, [pc, #488]	; (25fc <main+0x560>)
    2414:	447b      	add	r3, pc
    2416:	0018      	movs	r0, r3
    2418:	4b79      	ldr	r3, [pc, #484]	; (2600 <main+0x564>)
    241a:	447b      	add	r3, pc
    241c:	4798      	blx	r3
	debug_print("Compiled on: %s %s \n\n\n", __DATE__, __TIME__);
    241e:	4b79      	ldr	r3, [pc, #484]	; (2604 <main+0x568>)
    2420:	447b      	add	r3, pc
    2422:	001a      	movs	r2, r3
    2424:	4b78      	ldr	r3, [pc, #480]	; (2608 <main+0x56c>)
    2426:	447b      	add	r3, pc
    2428:	0019      	movs	r1, r3
    242a:	4b78      	ldr	r3, [pc, #480]	; (260c <main+0x570>)
    242c:	447b      	add	r3, pc
    242e:	0018      	movs	r0, r3
    2430:	4b77      	ldr	r3, [pc, #476]	; (2610 <main+0x574>)
    2432:	447b      	add	r3, pc
    2434:	4798      	blx	r3

	// Peripheral init
	enum status_code code;
	code = configure_rtc();				// RTC module
    2436:	4b77      	ldr	r3, [pc, #476]	; (2614 <main+0x578>)
    2438:	2208      	movs	r2, #8
    243a:	18ba      	adds	r2, r7, r2
    243c:	18d5      	adds	r5, r2, r3
    243e:	4b76      	ldr	r3, [pc, #472]	; (2618 <main+0x57c>)
    2440:	447b      	add	r3, pc
    2442:	4798      	blx	r3
    2444:	0003      	movs	r3, r0
    2446:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(1,"RTC module init failed.\n");
    2448:	4b72      	ldr	r3, [pc, #456]	; (2614 <main+0x578>)
    244a:	2208      	movs	r2, #8
    244c:	4694      	mov	ip, r2
    244e:	44bc      	add	ip, r7
    2450:	4463      	add	r3, ip
    2452:	781b      	ldrb	r3, [r3, #0]
    2454:	2b00      	cmp	r3, #0
    2456:	d006      	beq.n	2466 <main+0x3ca>
    2458:	4b70      	ldr	r3, [pc, #448]	; (261c <main+0x580>)
    245a:	447b      	add	r3, pc
    245c:	0019      	movs	r1, r3
    245e:	2001      	movs	r0, #1
    2460:	4b6f      	ldr	r3, [pc, #444]	; (2620 <main+0x584>)
    2462:	447b      	add	r3, pc
    2464:	4798      	blx	r3
	code = configure_bod();				// BOD detector
    2466:	4b6b      	ldr	r3, [pc, #428]	; (2614 <main+0x578>)
    2468:	2208      	movs	r2, #8
    246a:	18ba      	adds	r2, r7, r2
    246c:	18d5      	adds	r5, r2, r3
    246e:	4b6d      	ldr	r3, [pc, #436]	; (2624 <main+0x588>)
    2470:	447b      	add	r3, pc
    2472:	4798      	blx	r3
    2474:	0003      	movs	r3, r0
    2476:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(2,"BOD module init failed.\n");
    2478:	4b66      	ldr	r3, [pc, #408]	; (2614 <main+0x578>)
    247a:	2208      	movs	r2, #8
    247c:	4694      	mov	ip, r2
    247e:	44bc      	add	ip, r7
    2480:	4463      	add	r3, ip
    2482:	781b      	ldrb	r3, [r3, #0]
    2484:	2b00      	cmp	r3, #0
    2486:	d006      	beq.n	2496 <main+0x3fa>
    2488:	4b67      	ldr	r3, [pc, #412]	; (2628 <main+0x58c>)
    248a:	447b      	add	r3, pc
    248c:	0019      	movs	r1, r3
    248e:	2002      	movs	r0, #2
    2490:	4b66      	ldr	r3, [pc, #408]	; (262c <main+0x590>)
    2492:	447b      	add	r3, pc
    2494:	4798      	blx	r3
	code = configure_wakeup();			// Wake-up from sleep using buttons
    2496:	4b5f      	ldr	r3, [pc, #380]	; (2614 <main+0x578>)
    2498:	2208      	movs	r2, #8
    249a:	18ba      	adds	r2, r7, r2
    249c:	18d5      	adds	r5, r2, r3
    249e:	4b64      	ldr	r3, [pc, #400]	; (2630 <main+0x594>)
    24a0:	447b      	add	r3, pc
    24a2:	4798      	blx	r3
    24a4:	0003      	movs	r3, r0
    24a6:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(3,"EXTINT module init failed.\n");
    24a8:	4b5a      	ldr	r3, [pc, #360]	; (2614 <main+0x578>)
    24aa:	2208      	movs	r2, #8
    24ac:	4694      	mov	ip, r2
    24ae:	44bc      	add	ip, r7
    24b0:	4463      	add	r3, ip
    24b2:	781b      	ldrb	r3, [r3, #0]
    24b4:	2b00      	cmp	r3, #0
    24b6:	d006      	beq.n	24c6 <main+0x42a>
    24b8:	4b5e      	ldr	r3, [pc, #376]	; (2634 <main+0x598>)
    24ba:	447b      	add	r3, pc
    24bc:	0019      	movs	r1, r3
    24be:	2003      	movs	r0, #3
    24c0:	4b5d      	ldr	r3, [pc, #372]	; (2638 <main+0x59c>)
    24c2:	447b      	add	r3, pc
    24c4:	4798      	blx	r3
	code = configure_nvm();				// NVM controller
    24c6:	4b53      	ldr	r3, [pc, #332]	; (2614 <main+0x578>)
    24c8:	2208      	movs	r2, #8
    24ca:	18ba      	adds	r2, r7, r2
    24cc:	18d5      	adds	r5, r2, r3
    24ce:	4b5b      	ldr	r3, [pc, #364]	; (263c <main+0x5a0>)
    24d0:	447b      	add	r3, pc
    24d2:	4798      	blx	r3
    24d4:	0003      	movs	r3, r0
    24d6:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(4,"NVM module init failed.\n");
    24d8:	4b4e      	ldr	r3, [pc, #312]	; (2614 <main+0x578>)
    24da:	2208      	movs	r2, #8
    24dc:	4694      	mov	ip, r2
    24de:	44bc      	add	ip, r7
    24e0:	4463      	add	r3, ip
    24e2:	781b      	ldrb	r3, [r3, #0]
    24e4:	2b00      	cmp	r3, #0
    24e6:	d006      	beq.n	24f6 <main+0x45a>
    24e8:	4b55      	ldr	r3, [pc, #340]	; (2640 <main+0x5a4>)
    24ea:	447b      	add	r3, pc
    24ec:	0019      	movs	r1, r3
    24ee:	2004      	movs	r0, #4
    24f0:	4b54      	ldr	r3, [pc, #336]	; (2644 <main+0x5a8>)
    24f2:	447b      	add	r3, pc
    24f4:	4798      	blx	r3

	// RTC time check
	struct rtc_calendar_time time;
	rtc_calendar_get_time(&rtc_instance, &time);
    24f6:	230c      	movs	r3, #12
    24f8:	18fa      	adds	r2, r7, r3
    24fa:	4b53      	ldr	r3, [pc, #332]	; (2648 <main+0x5ac>)
    24fc:	58e3      	ldr	r3, [r4, r3]
    24fe:	0011      	movs	r1, r2
    2500:	0018      	movs	r0, r3
    2502:	4b52      	ldr	r3, [pc, #328]	; (264c <main+0x5b0>)
    2504:	58e3      	ldr	r3, [r4, r3]
    2506:	4798      	blx	r3
	debug_print("Local Time: %d/%d/%d  %d:%d:%d\n", time.month, time.day, time.year, time.hour, time.minute, time.second);
    2508:	4b51      	ldr	r3, [pc, #324]	; (2650 <main+0x5b4>)
    250a:	22b6      	movs	r2, #182	; 0xb6
    250c:	0092      	lsls	r2, r2, #2
    250e:	4694      	mov	ip, r2
    2510:	2208      	movs	r2, #8
    2512:	4690      	mov	r8, r2
    2514:	44b8      	add	r8, r7
    2516:	44c4      	add	ip, r8
    2518:	4463      	add	r3, ip
    251a:	795b      	ldrb	r3, [r3, #5]
    251c:	001d      	movs	r5, r3
    251e:	4b4c      	ldr	r3, [pc, #304]	; (2650 <main+0x5b4>)
    2520:	22b6      	movs	r2, #182	; 0xb6
    2522:	0092      	lsls	r2, r2, #2
    2524:	4694      	mov	ip, r2
    2526:	2208      	movs	r2, #8
    2528:	4690      	mov	r8, r2
    252a:	44b8      	add	r8, r7
    252c:	44c4      	add	ip, r8
    252e:	4463      	add	r3, ip
    2530:	791b      	ldrb	r3, [r3, #4]
    2532:	001e      	movs	r6, r3
    2534:	4b46      	ldr	r3, [pc, #280]	; (2650 <main+0x5b4>)
    2536:	22b6      	movs	r2, #182	; 0xb6
    2538:	0092      	lsls	r2, r2, #2
    253a:	4694      	mov	ip, r2
    253c:	2208      	movs	r2, #8
    253e:	4690      	mov	r8, r2
    2540:	44b8      	add	r8, r7
    2542:	44c4      	add	ip, r8
    2544:	4463      	add	r3, ip
    2546:	88db      	ldrh	r3, [r3, #6]
    2548:	607b      	str	r3, [r7, #4]
    254a:	4b41      	ldr	r3, [pc, #260]	; (2650 <main+0x5b4>)
    254c:	22b6      	movs	r2, #182	; 0xb6
    254e:	0092      	lsls	r2, r2, #2
    2550:	4694      	mov	ip, r2
    2552:	2208      	movs	r2, #8
    2554:	4690      	mov	r8, r2
    2556:	44b8      	add	r8, r7
    2558:	44c4      	add	ip, r8
    255a:	4463      	add	r3, ip
    255c:	789b      	ldrb	r3, [r3, #2]
    255e:	001a      	movs	r2, r3
    2560:	4b3b      	ldr	r3, [pc, #236]	; (2650 <main+0x5b4>)
    2562:	21b6      	movs	r1, #182	; 0xb6
    2564:	0089      	lsls	r1, r1, #2
    2566:	468c      	mov	ip, r1
    2568:	2108      	movs	r1, #8
    256a:	4688      	mov	r8, r1
    256c:	44b8      	add	r8, r7
    256e:	44c4      	add	ip, r8
    2570:	4463      	add	r3, ip
    2572:	785b      	ldrb	r3, [r3, #1]
    2574:	0019      	movs	r1, r3
    2576:	4b36      	ldr	r3, [pc, #216]	; (2650 <main+0x5b4>)
    2578:	20b6      	movs	r0, #182	; 0xb6
    257a:	0080      	lsls	r0, r0, #2
    257c:	4684      	mov	ip, r0
    257e:	2008      	movs	r0, #8
    2580:	4680      	mov	r8, r0
    2582:	44b8      	add	r8, r7
    2584:	44c4      	add	ip, r8
    2586:	4463      	add	r3, ip
    2588:	781b      	ldrb	r3, [r3, #0]
    258a:	4832      	ldr	r0, [pc, #200]	; (2654 <main+0x5b8>)
    258c:	4478      	add	r0, pc
    258e:	9302      	str	r3, [sp, #8]
    2590:	9101      	str	r1, [sp, #4]
    2592:	9200      	str	r2, [sp, #0]
    2594:	687b      	ldr	r3, [r7, #4]
    2596:	0032      	movs	r2, r6
    2598:	0029      	movs	r1, r5
    259a:	4d2f      	ldr	r5, [pc, #188]	; (2658 <main+0x5bc>)
    259c:	447d      	add	r5, pc
    259e:	47a8      	blx	r5
	debug_print("New image file: %s\n", sdError?"NOT FOUND":"FOUND");
    25a0:	4b05      	ldr	r3, [pc, #20]	; (25b8 <main+0x51c>)
    25a2:	2208      	movs	r2, #8
    25a4:	4694      	mov	ip, r2
    25a6:	44bc      	add	ip, r7
    25a8:	4463      	add	r3, ip
    25aa:	781b      	ldrb	r3, [r3, #0]
    25ac:	2b00      	cmp	r3, #0
    25ae:	d057      	beq.n	2660 <main+0x5c4>
    25b0:	4b2a      	ldr	r3, [pc, #168]	; (265c <main+0x5c0>)
    25b2:	447b      	add	r3, pc
    25b4:	001a      	movs	r2, r3
    25b6:	e056      	b.n	2666 <main+0x5ca>
    25b8:	000002d6 	.word	0x000002d6
    25bc:	fffffd34 	.word	0xfffffd34
    25c0:	42000c00 	.word	0x42000c00
    25c4:	0000009c 	.word	0x0000009c
    25c8:	fffff98d 	.word	0xfffff98d
    25cc:	fffff74f 	.word	0xfffff74f
    25d0:	000002d7 	.word	0x000002d7
    25d4:	0000057d 	.word	0x0000057d
    25d8:	0000004c 	.word	0x0000004c
    25dc:	00000174 	.word	0x00000174
    25e0:	fffff703 	.word	0xfffff703
    25e4:	fffff88b 	.word	0xfffff88b
    25e8:	000002c8 	.word	0x000002c8
    25ec:	00000214 	.word	0x00000214
    25f0:	0000029c 	.word	0x0000029c
    25f4:	0000f68c 	.word	0x0000f68c
    25f8:	00000947 	.word	0x00000947
    25fc:	0000f684 	.word	0x0000f684
    2600:	0000093b 	.word	0x0000093b
    2604:	0000f698 	.word	0x0000f698
    2608:	0000f69e 	.word	0x0000f69e
    260c:	0000f6a4 	.word	0x0000f6a4
    2610:	00000923 	.word	0x00000923
    2614:	000002be 	.word	0x000002be
    2618:	fffffa95 	.word	0xfffffa95
    261c:	0000f68e 	.word	0x0000f68e
    2620:	00000887 	.word	0x00000887
    2624:	fffffb4d 	.word	0xfffffb4d
    2628:	0000f67a 	.word	0x0000f67a
    262c:	00000857 	.word	0x00000857
    2630:	fffff90d 	.word	0xfffff90d
    2634:	0000f666 	.word	0x0000f666
    2638:	00000827 	.word	0x00000827
    263c:	fffffaa9 	.word	0xfffffaa9
    2640:	0000f652 	.word	0x0000f652
    2644:	000007f7 	.word	0x000007f7
    2648:	00000030 	.word	0x00000030
    264c:	00000134 	.word	0x00000134
    2650:	fffffd2c 	.word	0xfffffd2c
    2654:	0000f5cc 	.word	0x0000f5cc
    2658:	000007b9 	.word	0x000007b9
    265c:	0000f5c6 	.word	0x0000f5c6
    2660:	4b99      	ldr	r3, [pc, #612]	; (28c8 <main+0x82c>)
    2662:	447b      	add	r3, pc
    2664:	001a      	movs	r2, r3
    2666:	4b99      	ldr	r3, [pc, #612]	; (28cc <main+0x830>)
    2668:	447b      	add	r3, pc
    266a:	0011      	movs	r1, r2
    266c:	0018      	movs	r0, r3
    266e:	4b98      	ldr	r3, [pc, #608]	; (28d0 <main+0x834>)
    2670:	447b      	add	r3, pc
    2672:	4798      	blx	r3
	if (sdError) {
    2674:	4b97      	ldr	r3, [pc, #604]	; (28d4 <main+0x838>)
    2676:	2208      	movs	r2, #8
    2678:	4694      	mov	ip, r2
    267a:	44bc      	add	ip, r7
    267c:	4463      	add	r3, ip
    267e:	781b      	ldrb	r3, [r3, #0]
    2680:	2b00      	cmp	r3, #0
    2682:	d015      	beq.n	26b0 <main+0x614>
		debug_print("Nothing to do. Going to sleep.\n");
    2684:	4b94      	ldr	r3, [pc, #592]	; (28d8 <main+0x83c>)
    2686:	447b      	add	r3, pc
    2688:	0018      	movs	r0, r3
    268a:	4b94      	ldr	r3, [pc, #592]	; (28dc <main+0x840>)
    268c:	447b      	add	r3, pc
    268e:	4798      	blx	r3
		led_blink(1,100,0);		// Blink once to indicate nothing to do
    2690:	2200      	movs	r2, #0
    2692:	2164      	movs	r1, #100	; 0x64
    2694:	2001      	movs	r0, #1
    2696:	4b92      	ldr	r3, [pc, #584]	; (28e0 <main+0x844>)
    2698:	447b      	add	r3, pc
    269a:	4798      	blx	r3
		delay_ms(100);
    269c:	2064      	movs	r0, #100	; 0x64
    269e:	4b91      	ldr	r3, [pc, #580]	; (28e4 <main+0x848>)
    26a0:	58e3      	ldr	r3, [r4, r3]
    26a2:	4798      	blx	r3
		system_sleep();
    26a4:	4b90      	ldr	r3, [pc, #576]	; (28e8 <main+0x84c>)
    26a6:	447b      	add	r3, pc
    26a8:	4798      	blx	r3
		system_reset();
    26aa:	4b90      	ldr	r3, [pc, #576]	; (28ec <main+0x850>)
    26ac:	447b      	add	r3, pc
    26ae:	4798      	blx	r3
	}

	// Init the SD card driver (spi port)
	sd_mmc_init();
    26b0:	4b8f      	ldr	r3, [pc, #572]	; (28f0 <main+0x854>)
    26b2:	58e3      	ldr	r3, [r4, r3]
    26b4:	4798      	blx	r3

	// Open the image file
	res = f_open(&file_object,(const char *)image_name, FA_READ);
    26b6:	4b8f      	ldr	r3, [pc, #572]	; (28f4 <main+0x858>)
    26b8:	2208      	movs	r2, #8
    26ba:	18ba      	adds	r2, r7, r2
    26bc:	18d5      	adds	r5, r2, r3
    26be:	23b0      	movs	r3, #176	; 0xb0
    26c0:	009b      	lsls	r3, r3, #2
    26c2:	2208      	movs	r2, #8
    26c4:	4694      	mov	ip, r2
    26c6:	44bc      	add	ip, r7
    26c8:	4463      	add	r3, ip
    26ca:	6819      	ldr	r1, [r3, #0]
    26cc:	2360      	movs	r3, #96	; 0x60
    26ce:	2208      	movs	r2, #8
    26d0:	4694      	mov	ip, r2
    26d2:	44bc      	add	ip, r7
    26d4:	4463      	add	r3, ip
    26d6:	2201      	movs	r2, #1
    26d8:	0018      	movs	r0, r3
    26da:	4b87      	ldr	r3, [pc, #540]	; (28f8 <main+0x85c>)
    26dc:	58e3      	ldr	r3, [r4, r3]
    26de:	4798      	blx	r3
    26e0:	0003      	movs	r3, r0
    26e2:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) fatal_error(4,"File open failed.\n");
    26e4:	4b83      	ldr	r3, [pc, #524]	; (28f4 <main+0x858>)
    26e6:	2208      	movs	r2, #8
    26e8:	4694      	mov	ip, r2
    26ea:	44bc      	add	ip, r7
    26ec:	4463      	add	r3, ip
    26ee:	781b      	ldrb	r3, [r3, #0]
    26f0:	2b00      	cmp	r3, #0
    26f2:	d006      	beq.n	2702 <main+0x666>
    26f4:	4b81      	ldr	r3, [pc, #516]	; (28fc <main+0x860>)
    26f6:	447b      	add	r3, pc
    26f8:	0019      	movs	r1, r3
    26fa:	2004      	movs	r0, #4
    26fc:	4b80      	ldr	r3, [pc, #512]	; (2900 <main+0x864>)
    26fe:	447b      	add	r3, pc
    2700:	4798      	blx	r3

	// Program memory with image
	UINT iRead = 0;
    2702:	2300      	movs	r3, #0
    2704:	60bb      	str	r3, [r7, #8]
	uint32_t len = 0;
    2706:	2300      	movs	r3, #0
    2708:	22b3      	movs	r2, #179	; 0xb3
    270a:	0092      	lsls	r2, r2, #2
    270c:	2108      	movs	r1, #8
    270e:	468c      	mov	ip, r1
    2710:	44bc      	add	ip, r7
    2712:	4462      	add	r2, ip
    2714:	6013      	str	r3, [r2, #0]
	uint32_t curr_prog_addr = APP_START_ADDRESS;
    2716:	23c0      	movs	r3, #192	; 0xc0
    2718:	025b      	lsls	r3, r3, #9
    271a:	22b2      	movs	r2, #178	; 0xb2
    271c:	0092      	lsls	r2, r2, #2
    271e:	2108      	movs	r1, #8
    2720:	468c      	mov	ip, r1
    2722:	44bc      	add	ip, r7
    2724:	4462      	add	r2, ip
    2726:	6013      	str	r3, [r2, #0]
	do {
		// Read block
		if(file_object.fsize > MAX_CODE_SIZE) fatal_error(6,"File exceeds max size of %d bytes.\n", MAX_CODE_SIZE);
    2728:	4b76      	ldr	r3, [pc, #472]	; (2904 <main+0x868>)
    272a:	22b6      	movs	r2, #182	; 0xb6
    272c:	0092      	lsls	r2, r2, #2
    272e:	4694      	mov	ip, r2
    2730:	2208      	movs	r2, #8
    2732:	4690      	mov	r8, r2
    2734:	44b8      	add	r8, r7
    2736:	44c4      	add	ip, r8
    2738:	4463      	add	r3, ip
    273a:	68da      	ldr	r2, [r3, #12]
    273c:	2380      	movs	r3, #128	; 0x80
    273e:	025b      	lsls	r3, r3, #9
    2740:	429a      	cmp	r2, r3
    2742:	d909      	bls.n	2758 <main+0x6bc>
    2744:	2380      	movs	r3, #128	; 0x80
    2746:	025b      	lsls	r3, r3, #9
    2748:	4a6f      	ldr	r2, [pc, #444]	; (2908 <main+0x86c>)
    274a:	447a      	add	r2, pc
    274c:	0011      	movs	r1, r2
    274e:	001a      	movs	r2, r3
    2750:	2006      	movs	r0, #6
    2752:	4b6e      	ldr	r3, [pc, #440]	; (290c <main+0x870>)
    2754:	447b      	add	r3, pc
    2756:	4798      	blx	r3
		res = f_read(&file_object, (void *) buff, MAX_BUF_SIZE, &iRead);
    2758:	4b66      	ldr	r3, [pc, #408]	; (28f4 <main+0x858>)
    275a:	2208      	movs	r2, #8
    275c:	18ba      	adds	r2, r7, r2
    275e:	18d5      	adds	r5, r2, r3
    2760:	2308      	movs	r3, #8
    2762:	18f9      	adds	r1, r7, r3
    2764:	2380      	movs	r3, #128	; 0x80
    2766:	009a      	lsls	r2, r3, #2
    2768:	4b69      	ldr	r3, [pc, #420]	; (2910 <main+0x874>)
    276a:	447b      	add	r3, pc
    276c:	001e      	movs	r6, r3
    276e:	2360      	movs	r3, #96	; 0x60
    2770:	2008      	movs	r0, #8
    2772:	1838      	adds	r0, r7, r0
    2774:	18c0      	adds	r0, r0, r3
    2776:	000b      	movs	r3, r1
    2778:	0031      	movs	r1, r6
    277a:	4e66      	ldr	r6, [pc, #408]	; (2914 <main+0x878>)
    277c:	59a6      	ldr	r6, [r4, r6]
    277e:	47b0      	blx	r6
    2780:	0003      	movs	r3, r0
    2782:	702b      	strb	r3, [r5, #0]
		if(res != FR_OK) fatal_error(7,"File read error after %d bytes\n", iRead);
    2784:	4b5b      	ldr	r3, [pc, #364]	; (28f4 <main+0x858>)
    2786:	2208      	movs	r2, #8
    2788:	4694      	mov	ip, r2
    278a:	44bc      	add	ip, r7
    278c:	4463      	add	r3, ip
    278e:	781b      	ldrb	r3, [r3, #0]
    2790:	2b00      	cmp	r3, #0
    2792:	d008      	beq.n	27a6 <main+0x70a>
    2794:	68bb      	ldr	r3, [r7, #8]
    2796:	4a60      	ldr	r2, [pc, #384]	; (2918 <main+0x87c>)
    2798:	447a      	add	r2, pc
    279a:	0011      	movs	r1, r2
    279c:	001a      	movs	r2, r3
    279e:	2007      	movs	r0, #7
    27a0:	4b5e      	ldr	r3, [pc, #376]	; (291c <main+0x880>)
    27a2:	447b      	add	r3, pc
    27a4:	4798      	blx	r3
			
		// Program block
		program_memory(curr_prog_addr, buff, iRead);
    27a6:	68ba      	ldr	r2, [r7, #8]
    27a8:	4b5d      	ldr	r3, [pc, #372]	; (2920 <main+0x884>)
    27aa:	447b      	add	r3, pc
    27ac:	0019      	movs	r1, r3
    27ae:	23b2      	movs	r3, #178	; 0xb2
    27b0:	009b      	lsls	r3, r3, #2
    27b2:	2008      	movs	r0, #8
    27b4:	4684      	mov	ip, r0
    27b6:	44bc      	add	ip, r7
    27b8:	4463      	add	r3, ip
    27ba:	681b      	ldr	r3, [r3, #0]
    27bc:	0018      	movs	r0, r3
    27be:	4b59      	ldr	r3, [pc, #356]	; (2924 <main+0x888>)
    27c0:	447b      	add	r3, pc
    27c2:	4798      	blx	r3
		debug_print("Programed %u of %u bytes\n", (unsigned int)(len), (unsigned int)(file_object.fsize));
    27c4:	4b4f      	ldr	r3, [pc, #316]	; (2904 <main+0x868>)
    27c6:	22b6      	movs	r2, #182	; 0xb6
    27c8:	0092      	lsls	r2, r2, #2
    27ca:	4694      	mov	ip, r2
    27cc:	2208      	movs	r2, #8
    27ce:	4690      	mov	r8, r2
    27d0:	44b8      	add	r8, r7
    27d2:	44c4      	add	ip, r8
    27d4:	4463      	add	r3, ip
    27d6:	68da      	ldr	r2, [r3, #12]
    27d8:	23b3      	movs	r3, #179	; 0xb3
    27da:	009b      	lsls	r3, r3, #2
    27dc:	2108      	movs	r1, #8
    27de:	468c      	mov	ip, r1
    27e0:	44bc      	add	ip, r7
    27e2:	4463      	add	r3, ip
    27e4:	681b      	ldr	r3, [r3, #0]
    27e6:	4950      	ldr	r1, [pc, #320]	; (2928 <main+0x88c>)
    27e8:	4479      	add	r1, pc
    27ea:	0008      	movs	r0, r1
    27ec:	0019      	movs	r1, r3
    27ee:	4b4f      	ldr	r3, [pc, #316]	; (292c <main+0x890>)
    27f0:	447b      	add	r3, pc
    27f2:	4798      	blx	r3

		// Increment
		curr_prog_addr += iRead;
    27f4:	68bb      	ldr	r3, [r7, #8]
    27f6:	22b2      	movs	r2, #178	; 0xb2
    27f8:	0092      	lsls	r2, r2, #2
    27fa:	2108      	movs	r1, #8
    27fc:	468c      	mov	ip, r1
    27fe:	44bc      	add	ip, r7
    2800:	4462      	add	r2, ip
    2802:	6812      	ldr	r2, [r2, #0]
    2804:	18d3      	adds	r3, r2, r3
    2806:	22b2      	movs	r2, #178	; 0xb2
    2808:	0092      	lsls	r2, r2, #2
    280a:	2108      	movs	r1, #8
    280c:	468c      	mov	ip, r1
    280e:	44bc      	add	ip, r7
    2810:	4462      	add	r2, ip
    2812:	6013      	str	r3, [r2, #0]
		len += iRead;
    2814:	68bb      	ldr	r3, [r7, #8]
    2816:	22b3      	movs	r2, #179	; 0xb3
    2818:	0092      	lsls	r2, r2, #2
    281a:	2108      	movs	r1, #8
    281c:	468c      	mov	ip, r1
    281e:	44bc      	add	ip, r7
    2820:	4462      	add	r2, ip
    2822:	6812      	ldr	r2, [r2, #0]
    2824:	18d3      	adds	r3, r2, r3
    2826:	22b3      	movs	r2, #179	; 0xb3
    2828:	0092      	lsls	r2, r2, #2
    282a:	2108      	movs	r1, #8
    282c:	468c      	mov	ip, r1
    282e:	44bc      	add	ip, r7
    2830:	4462      	add	r2, ip
    2832:	6013      	str	r3, [r2, #0]
		
		// Check size
		if(len > MAX_CODE_SIZE)
    2834:	23b3      	movs	r3, #179	; 0xb3
    2836:	009b      	lsls	r3, r3, #2
    2838:	2208      	movs	r2, #8
    283a:	4694      	mov	ip, r2
    283c:	44bc      	add	ip, r7
    283e:	4463      	add	r3, ip
    2840:	681a      	ldr	r2, [r3, #0]
    2842:	2380      	movs	r3, #128	; 0x80
    2844:	025b      	lsls	r3, r3, #9
    2846:	429a      	cmp	r2, r3
    2848:	d906      	bls.n	2858 <main+0x7bc>
		fatal_error(8,"Too many bytes\n");
    284a:	4b39      	ldr	r3, [pc, #228]	; (2930 <main+0x894>)
    284c:	447b      	add	r3, pc
    284e:	0019      	movs	r1, r3
    2850:	2008      	movs	r0, #8
    2852:	4b38      	ldr	r3, [pc, #224]	; (2934 <main+0x898>)
    2854:	447b      	add	r3, pc
    2856:	4798      	blx	r3
	} while (iRead != 0);
    2858:	68bb      	ldr	r3, [r7, #8]
    285a:	2b00      	cmp	r3, #0
    285c:	d000      	beq.n	2860 <main+0x7c4>
    285e:	e763      	b.n	2728 <main+0x68c>
	
	// Delete image from SD
	res = f_unlink((const char *)image_name);
    2860:	4b24      	ldr	r3, [pc, #144]	; (28f4 <main+0x858>)
    2862:	2208      	movs	r2, #8
    2864:	18ba      	adds	r2, r7, r2
    2866:	18d5      	adds	r5, r2, r3
    2868:	23b0      	movs	r3, #176	; 0xb0
    286a:	009b      	lsls	r3, r3, #2
    286c:	2208      	movs	r2, #8
    286e:	4694      	mov	ip, r2
    2870:	44bc      	add	ip, r7
    2872:	4463      	add	r3, ip
    2874:	681b      	ldr	r3, [r3, #0]
    2876:	0018      	movs	r0, r3
    2878:	4b2f      	ldr	r3, [pc, #188]	; (2938 <main+0x89c>)
    287a:	58e3      	ldr	r3, [r4, r3]
    287c:	4798      	blx	r3
    287e:	0003      	movs	r3, r0
    2880:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) fatal_error(9,"Unable to delete file.\n");
    2882:	4b1c      	ldr	r3, [pc, #112]	; (28f4 <main+0x858>)
    2884:	2208      	movs	r2, #8
    2886:	4694      	mov	ip, r2
    2888:	44bc      	add	ip, r7
    288a:	4463      	add	r3, ip
    288c:	781b      	ldrb	r3, [r3, #0]
    288e:	2b00      	cmp	r3, #0
    2890:	d006      	beq.n	28a0 <main+0x804>
    2892:	4b2a      	ldr	r3, [pc, #168]	; (293c <main+0x8a0>)
    2894:	447b      	add	r3, pc
    2896:	0019      	movs	r1, r3
    2898:	2009      	movs	r0, #9
    289a:	4b29      	ldr	r3, [pc, #164]	; (2940 <main+0x8a4>)
    289c:	447b      	add	r3, pc
    289e:	4798      	blx	r3
	
	// Trigger re-boot
	system_reset();
    28a0:	4b28      	ldr	r3, [pc, #160]	; (2944 <main+0x8a8>)
    28a2:	447b      	add	r3, pc
    28a4:	4798      	blx	r3

	fatal_error(10,"Should not be here\n");
    28a6:	4b28      	ldr	r3, [pc, #160]	; (2948 <main+0x8ac>)
    28a8:	447b      	add	r3, pc
    28aa:	0019      	movs	r1, r3
    28ac:	200a      	movs	r0, #10
    28ae:	4b27      	ldr	r3, [pc, #156]	; (294c <main+0x8b0>)
    28b0:	447b      	add	r3, pc
    28b2:	4798      	blx	r3
    28b4:	2300      	movs	r3, #0
}
    28b6:	0018      	movs	r0, r3
    28b8:	46bd      	mov	sp, r7
    28ba:	23b8      	movs	r3, #184	; 0xb8
    28bc:	009b      	lsls	r3, r3, #2
    28be:	449d      	add	sp, r3
    28c0:	bc04      	pop	{r2}
    28c2:	4690      	mov	r8, r2
    28c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    28c6:	46c0      	nop			; (mov r8, r8)
    28c8:	0000f522 	.word	0x0000f522
    28cc:	0000f524 	.word	0x0000f524
    28d0:	000006e5 	.word	0x000006e5
    28d4:	000002d6 	.word	0x000002d6
    28d8:	0000f51a 	.word	0x0000f51a
    28dc:	000006c9 	.word	0x000006c9
    28e0:	00000511 	.word	0x00000511
    28e4:	0000029c 	.word	0x0000029c
    28e8:	fffff657 	.word	0xfffff657
    28ec:	fffff661 	.word	0xfffff661
    28f0:	00000044 	.word	0x00000044
    28f4:	000002bf 	.word	0x000002bf
    28f8:	00000294 	.word	0x00000294
    28fc:	0000f4ca 	.word	0x0000f4ca
    2900:	000005eb 	.word	0x000005eb
    2904:	fffffd88 	.word	0xfffffd88
    2908:	0000f48a 	.word	0x0000f48a
    290c:	00000595 	.word	0x00000595
    2910:	1fffda62 	.word	0x1fffda62
    2914:	00000198 	.word	0x00000198
    2918:	0000f460 	.word	0x0000f460
    291c:	00000547 	.word	0x00000547
    2920:	1fffda22 	.word	0x1fffda22
    2924:	000001e5 	.word	0x000001e5
    2928:	0000f430 	.word	0x0000f430
    292c:	00000565 	.word	0x00000565
    2930:	0000f3e8 	.word	0x0000f3e8
    2934:	00000495 	.word	0x00000495
    2938:	00000110 	.word	0x00000110
    293c:	0000f3b0 	.word	0x0000f3b0
    2940:	0000044d 	.word	0x0000044d
    2944:	fffff46b 	.word	0xfffff46b
    2948:	0000f3b4 	.word	0x0000f3b4
    294c:	00000439 	.word	0x00000439

00002950 <start_application>:

// Jump to the application
static void start_application(void) {
    2950:	b580      	push	{r7, lr}
    2952:	b084      	sub	sp, #16
    2954:	af00      	add	r7, sp, #0
	uint32_t *app_check_address_ptr;
	void (*application_code_entry)(void);
	app_check_address_ptr = (uint32_t *) APP_START_ADDRESS;
    2956:	23c0      	movs	r3, #192	; 0xc0
    2958:	025b      	lsls	r3, r3, #9
    295a:	60fb      	str	r3, [r7, #12]
	
	// Don't jump if the application is blank
	if (*app_check_address_ptr == 0xFFFFFFFF) {
    295c:	68fb      	ldr	r3, [r7, #12]
    295e:	681b      	ldr	r3, [r3, #0]
    2960:	3301      	adds	r3, #1
    2962:	d016      	beq.n	2992 <start_application+0x42>
		return;
	}

	// Jump to application
	led_blink(2,200,1);				// Good blink
    2964:	2201      	movs	r2, #1
    2966:	21c8      	movs	r1, #200	; 0xc8
    2968:	2002      	movs	r0, #2
    296a:	4b0c      	ldr	r3, [pc, #48]	; (299c <start_application+0x4c>)
    296c:	447b      	add	r3, pc
    296e:	4798      	blx	r3

	// Get the reset vector address, with reference to application base
	application_code_entry  = *(uint32_t*)(APP_START_ADDRESS + 4);
    2970:	4b0b      	ldr	r3, [pc, #44]	; (29a0 <start_application+0x50>)
    2972:	681b      	ldr	r3, [r3, #0]
    2974:	60bb      	str	r3, [r7, #8]
	//application_code_entry += APP_START_ADDRESS;

	// Set stack pointer, set vector table offset, jump to application
	__set_MSP(*(uint32_t *) APP_START_ADDRESS);
    2976:	23c0      	movs	r3, #192	; 0xc0
    2978:	025b      	lsls	r3, r3, #9
    297a:	681b      	ldr	r3, [r3, #0]
    297c:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    297e:	687b      	ldr	r3, [r7, #4]
    2980:	f383 8808 	msr	MSP, r3
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    2984:	4b07      	ldr	r3, [pc, #28]	; (29a4 <start_application+0x54>)
    2986:	22c0      	movs	r2, #192	; 0xc0
    2988:	0252      	lsls	r2, r2, #9
    298a:	609a      	str	r2, [r3, #8]
	application_code_entry();
    298c:	68bb      	ldr	r3, [r7, #8]
    298e:	4798      	blx	r3
    2990:	e000      	b.n	2994 <start_application+0x44>
		return;
    2992:	46c0      	nop			; (mov r8, r8)
}
    2994:	46bd      	mov	sp, r7
    2996:	b004      	add	sp, #16
    2998:	bd80      	pop	{r7, pc}
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	0000023d 	.word	0x0000023d
    29a0:	00018004 	.word	0x00018004
    29a4:	e000ed00 	.word	0xe000ed00

000029a8 <program_memory>:

// Write a buffer of length len to address in flash memory
static void program_memory(uint32_t address, uint8_t *buffer, uint32_t len) {
    29a8:	b590      	push	{r4, r7, lr}
    29aa:	b09b      	sub	sp, #108	; 0x6c
    29ac:	af00      	add	r7, sp, #0
    29ae:	60f8      	str	r0, [r7, #12]
    29b0:	60b9      	str	r1, [r7, #8]
    29b2:	607a      	str	r2, [r7, #4]
    29b4:	4c6f      	ldr	r4, [pc, #444]	; (2b74 <program_memory+0x1cc>)
    29b6:	447c      	add	r4, pc
	uint8_t check_buffer[NVMCTRL_PAGE_SIZE];
	volatile enum status_code code;
	uint32_t offset = 0;
    29b8:	2300      	movs	r3, #0
    29ba:	667b      	str	r3, [r7, #100]	; 0x64
	// Multiples of Page Size
	while (len >= NVMCTRL_PAGE_SIZE) {
    29bc:	e08c      	b.n	2ad8 <program_memory+0x130>
		if ((address & 0xFF) == 0) {
    29be:	68fb      	ldr	r3, [r7, #12]
    29c0:	22ff      	movs	r2, #255	; 0xff
    29c2:	4013      	ands	r3, r2
    29c4:	d11c      	bne.n	2a00 <program_memory+0x58>
			do {
				code = nvm_erase_row(address);
    29c6:	68fb      	ldr	r3, [r7, #12]
    29c8:	0018      	movs	r0, r3
    29ca:	4b6b      	ldr	r3, [pc, #428]	; (2b78 <program_memory+0x1d0>)
    29cc:	58e3      	ldr	r3, [r4, r3]
    29ce:	4798      	blx	r3
    29d0:	0003      	movs	r3, r0
    29d2:	001a      	movs	r2, r3
    29d4:	2317      	movs	r3, #23
    29d6:	18fb      	adds	r3, r7, r3
    29d8:	701a      	strb	r2, [r3, #0]
			} while (code == STATUS_BUSY);
    29da:	2317      	movs	r3, #23
    29dc:	18fb      	adds	r3, r7, r3
    29de:	781b      	ldrb	r3, [r3, #0]
    29e0:	b2db      	uxtb	r3, r3
    29e2:	2b05      	cmp	r3, #5
    29e4:	d0ef      	beq.n	29c6 <program_memory+0x1e>
			if (code != STATUS_OK) fatal_error(11,"NVM erase row error\n");
    29e6:	2317      	movs	r3, #23
    29e8:	18fb      	adds	r3, r7, r3
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	b2db      	uxtb	r3, r3
    29ee:	2b00      	cmp	r3, #0
    29f0:	d006      	beq.n	2a00 <program_memory+0x58>
    29f2:	4b62      	ldr	r3, [pc, #392]	; (2b7c <program_memory+0x1d4>)
    29f4:	447b      	add	r3, pc
    29f6:	0019      	movs	r1, r3
    29f8:	200b      	movs	r0, #11
    29fa:	4b61      	ldr	r3, [pc, #388]	; (2b80 <program_memory+0x1d8>)
    29fc:	447b      	add	r3, pc
    29fe:	4798      	blx	r3
		}
		do {
			code = nvm_write_buffer(address, buffer + offset, NVMCTRL_PAGE_SIZE);
    2a00:	68ba      	ldr	r2, [r7, #8]
    2a02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2a04:	18d1      	adds	r1, r2, r3
    2a06:	68fb      	ldr	r3, [r7, #12]
    2a08:	2240      	movs	r2, #64	; 0x40
    2a0a:	0018      	movs	r0, r3
    2a0c:	4b5d      	ldr	r3, [pc, #372]	; (2b84 <program_memory+0x1dc>)
    2a0e:	58e3      	ldr	r3, [r4, r3]
    2a10:	4798      	blx	r3
    2a12:	0003      	movs	r3, r0
    2a14:	001a      	movs	r2, r3
    2a16:	2317      	movs	r3, #23
    2a18:	18fb      	adds	r3, r7, r3
    2a1a:	701a      	strb	r2, [r3, #0]
		} while (code == STATUS_BUSY);
    2a1c:	2317      	movs	r3, #23
    2a1e:	18fb      	adds	r3, r7, r3
    2a20:	781b      	ldrb	r3, [r3, #0]
    2a22:	b2db      	uxtb	r3, r3
    2a24:	2b05      	cmp	r3, #5
    2a26:	d0eb      	beq.n	2a00 <program_memory+0x58>
		if (code != STATUS_OK) fatal_error(12,"NVM write buffer error\n");
    2a28:	2317      	movs	r3, #23
    2a2a:	18fb      	adds	r3, r7, r3
    2a2c:	781b      	ldrb	r3, [r3, #0]
    2a2e:	b2db      	uxtb	r3, r3
    2a30:	2b00      	cmp	r3, #0
    2a32:	d006      	beq.n	2a42 <program_memory+0x9a>
    2a34:	4b54      	ldr	r3, [pc, #336]	; (2b88 <program_memory+0x1e0>)
    2a36:	447b      	add	r3, pc
    2a38:	0019      	movs	r1, r3
    2a3a:	200c      	movs	r0, #12
    2a3c:	4b53      	ldr	r3, [pc, #332]	; (2b8c <program_memory+0x1e4>)
    2a3e:	447b      	add	r3, pc
    2a40:	4798      	blx	r3

		memcpy(check_buffer, address, NVMCTRL_PAGE_SIZE);
    2a42:	68fb      	ldr	r3, [r7, #12]
    2a44:	2218      	movs	r2, #24
    2a46:	18ba      	adds	r2, r7, r2
    2a48:	0010      	movs	r0, r2
    2a4a:	0019      	movs	r1, r3
    2a4c:	2340      	movs	r3, #64	; 0x40
    2a4e:	001a      	movs	r2, r3
    2a50:	4b4f      	ldr	r3, [pc, #316]	; (2b90 <program_memory+0x1e8>)
    2a52:	58e3      	ldr	r3, [r4, r3]
    2a54:	4798      	blx	r3
		bool pass = 1;
    2a56:	2363      	movs	r3, #99	; 0x63
    2a58:	18fb      	adds	r3, r7, r3
    2a5a:	2201      	movs	r2, #1
    2a5c:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<NVMCTRL_PAGE_SIZE; i++) {
    2a5e:	2300      	movs	r3, #0
    2a60:	65fb      	str	r3, [r7, #92]	; 0x5c
    2a62:	e01e      	b.n	2aa2 <program_memory+0xfa>
			uint8_t c = check_buffer[i];
    2a64:	235b      	movs	r3, #91	; 0x5b
    2a66:	18fb      	adds	r3, r7, r3
    2a68:	2218      	movs	r2, #24
    2a6a:	18b9      	adds	r1, r7, r2
    2a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    2a6e:	188a      	adds	r2, r1, r2
    2a70:	7812      	ldrb	r2, [r2, #0]
    2a72:	701a      	strb	r2, [r3, #0]
			uint8_t f = *((uint8_t*)(address+i));
    2a74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    2a76:	68fb      	ldr	r3, [r7, #12]
    2a78:	18d3      	adds	r3, r2, r3
    2a7a:	001a      	movs	r2, r3
    2a7c:	235a      	movs	r3, #90	; 0x5a
    2a7e:	18fb      	adds	r3, r7, r3
    2a80:	7812      	ldrb	r2, [r2, #0]
    2a82:	701a      	strb	r2, [r3, #0]
			if (c!=f) pass = 0;
    2a84:	235b      	movs	r3, #91	; 0x5b
    2a86:	18fa      	adds	r2, r7, r3
    2a88:	235a      	movs	r3, #90	; 0x5a
    2a8a:	18fb      	adds	r3, r7, r3
    2a8c:	7812      	ldrb	r2, [r2, #0]
    2a8e:	781b      	ldrb	r3, [r3, #0]
    2a90:	429a      	cmp	r2, r3
    2a92:	d003      	beq.n	2a9c <program_memory+0xf4>
    2a94:	2363      	movs	r3, #99	; 0x63
    2a96:	18fb      	adds	r3, r7, r3
    2a98:	2200      	movs	r2, #0
    2a9a:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<NVMCTRL_PAGE_SIZE; i++) {
    2a9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2a9e:	3301      	adds	r3, #1
    2aa0:	65fb      	str	r3, [r7, #92]	; 0x5c
    2aa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    2aa4:	2b3f      	cmp	r3, #63	; 0x3f
    2aa6:	dddd      	ble.n	2a64 <program_memory+0xbc>
		}
		if (pass == 0) {
    2aa8:	2363      	movs	r3, #99	; 0x63
    2aaa:	18fb      	adds	r3, r7, r3
    2aac:	781b      	ldrb	r3, [r3, #0]
    2aae:	2201      	movs	r2, #1
    2ab0:	4053      	eors	r3, r2
    2ab2:	b2db      	uxtb	r3, r3
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d006      	beq.n	2ac6 <program_memory+0x11e>
			fatal_error(13, "Check failed\n");
    2ab8:	4b36      	ldr	r3, [pc, #216]	; (2b94 <program_memory+0x1ec>)
    2aba:	447b      	add	r3, pc
    2abc:	0019      	movs	r1, r3
    2abe:	200d      	movs	r0, #13
    2ac0:	4b35      	ldr	r3, [pc, #212]	; (2b98 <program_memory+0x1f0>)
    2ac2:	447b      	add	r3, pc
    2ac4:	4798      	blx	r3
		}
		address += NVMCTRL_PAGE_SIZE;
    2ac6:	68fb      	ldr	r3, [r7, #12]
    2ac8:	3340      	adds	r3, #64	; 0x40
    2aca:	60fb      	str	r3, [r7, #12]
		offset += NVMCTRL_PAGE_SIZE;
    2acc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2ace:	3340      	adds	r3, #64	; 0x40
    2ad0:	667b      	str	r3, [r7, #100]	; 0x64
		len -= NVMCTRL_PAGE_SIZE;
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	3b40      	subs	r3, #64	; 0x40
    2ad6:	607b      	str	r3, [r7, #4]
	while (len >= NVMCTRL_PAGE_SIZE) {
    2ad8:	687b      	ldr	r3, [r7, #4]
    2ada:	2b3f      	cmp	r3, #63	; 0x3f
    2adc:	d900      	bls.n	2ae0 <program_memory+0x138>
    2ade:	e76e      	b.n	29be <program_memory+0x16>
	}
	// Fragment (leftover) bytes
	if (len > 0) {
    2ae0:	687b      	ldr	r3, [r7, #4]
    2ae2:	2b00      	cmp	r3, #0
    2ae4:	d042      	beq.n	2b6c <program_memory+0x1c4>
		if ((address & 0xFF) == 0) {
    2ae6:	68fb      	ldr	r3, [r7, #12]
    2ae8:	22ff      	movs	r2, #255	; 0xff
    2aea:	4013      	ands	r3, r2
    2aec:	d11c      	bne.n	2b28 <program_memory+0x180>
			do {
				code = nvm_erase_row(address);
    2aee:	68fb      	ldr	r3, [r7, #12]
    2af0:	0018      	movs	r0, r3
    2af2:	4b21      	ldr	r3, [pc, #132]	; (2b78 <program_memory+0x1d0>)
    2af4:	58e3      	ldr	r3, [r4, r3]
    2af6:	4798      	blx	r3
    2af8:	0003      	movs	r3, r0
    2afa:	001a      	movs	r2, r3
    2afc:	2317      	movs	r3, #23
    2afe:	18fb      	adds	r3, r7, r3
    2b00:	701a      	strb	r2, [r3, #0]
			} while (code == STATUS_BUSY);
    2b02:	2317      	movs	r3, #23
    2b04:	18fb      	adds	r3, r7, r3
    2b06:	781b      	ldrb	r3, [r3, #0]
    2b08:	b2db      	uxtb	r3, r3
    2b0a:	2b05      	cmp	r3, #5
    2b0c:	d0ef      	beq.n	2aee <program_memory+0x146>
			if (code != STATUS_OK) fatal_error(11,"NVM erase row error\n");
    2b0e:	2317      	movs	r3, #23
    2b10:	18fb      	adds	r3, r7, r3
    2b12:	781b      	ldrb	r3, [r3, #0]
    2b14:	b2db      	uxtb	r3, r3
    2b16:	2b00      	cmp	r3, #0
    2b18:	d006      	beq.n	2b28 <program_memory+0x180>
    2b1a:	4b20      	ldr	r3, [pc, #128]	; (2b9c <program_memory+0x1f4>)
    2b1c:	447b      	add	r3, pc
    2b1e:	0019      	movs	r1, r3
    2b20:	200b      	movs	r0, #11
    2b22:	4b1f      	ldr	r3, [pc, #124]	; (2ba0 <program_memory+0x1f8>)
    2b24:	447b      	add	r3, pc
    2b26:	4798      	blx	r3
		}
		do {
			code = nvm_write_buffer(address, buffer + offset, len);
    2b28:	68ba      	ldr	r2, [r7, #8]
    2b2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    2b2c:	18d1      	adds	r1, r2, r3
    2b2e:	687b      	ldr	r3, [r7, #4]
    2b30:	b29a      	uxth	r2, r3
    2b32:	68fb      	ldr	r3, [r7, #12]
    2b34:	0018      	movs	r0, r3
    2b36:	4b13      	ldr	r3, [pc, #76]	; (2b84 <program_memory+0x1dc>)
    2b38:	58e3      	ldr	r3, [r4, r3]
    2b3a:	4798      	blx	r3
    2b3c:	0003      	movs	r3, r0
    2b3e:	001a      	movs	r2, r3
    2b40:	2317      	movs	r3, #23
    2b42:	18fb      	adds	r3, r7, r3
    2b44:	701a      	strb	r2, [r3, #0]
		} while (code == STATUS_BUSY);
    2b46:	2317      	movs	r3, #23
    2b48:	18fb      	adds	r3, r7, r3
    2b4a:	781b      	ldrb	r3, [r3, #0]
    2b4c:	b2db      	uxtb	r3, r3
    2b4e:	2b05      	cmp	r3, #5
    2b50:	d0ea      	beq.n	2b28 <program_memory+0x180>
		if (code != STATUS_OK) fatal_error(12,"NVM write buffer error\n");
    2b52:	2317      	movs	r3, #23
    2b54:	18fb      	adds	r3, r7, r3
    2b56:	781b      	ldrb	r3, [r3, #0]
    2b58:	b2db      	uxtb	r3, r3
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d006      	beq.n	2b6c <program_memory+0x1c4>
    2b5e:	4b11      	ldr	r3, [pc, #68]	; (2ba4 <program_memory+0x1fc>)
    2b60:	447b      	add	r3, pc
    2b62:	0019      	movs	r1, r3
    2b64:	200c      	movs	r0, #12
    2b66:	4b10      	ldr	r3, [pc, #64]	; (2ba8 <program_memory+0x200>)
    2b68:	447b      	add	r3, pc
    2b6a:	4798      	blx	r3
	}

}
    2b6c:	46c0      	nop			; (mov r8, r8)
    2b6e:	46bd      	mov	sp, r7
    2b70:	b01b      	add	sp, #108	; 0x6c
    2b72:	bd90      	pop	{r4, r7, pc}
    2b74:	0000f41a 	.word	0x0000f41a
    2b78:	000000dc 	.word	0x000000dc
    2b7c:	0000f27c 	.word	0x0000f27c
    2b80:	000002ed 	.word	0x000002ed
    2b84:	00000008 	.word	0x00000008
    2b88:	0000f252 	.word	0x0000f252
    2b8c:	000002ab 	.word	0x000002ab
    2b90:	0000008c 	.word	0x0000008c
    2b94:	0000f1e6 	.word	0x0000f1e6
    2b98:	00000227 	.word	0x00000227
    2b9c:	0000f154 	.word	0x0000f154
    2ba0:	000001c5 	.word	0x000001c5
    2ba4:	0000f128 	.word	0x0000f128
    2ba8:	00000181 	.word	0x00000181

00002bac <led_blink>:

// Toggle LED for blink codes
static void led_blink(int num_blinks, int blink_period_ms, bool green) {
    2bac:	b590      	push	{r4, r7, lr}
    2bae:	b087      	sub	sp, #28
    2bb0:	af00      	add	r7, sp, #0
    2bb2:	60f8      	str	r0, [r7, #12]
    2bb4:	60b9      	str	r1, [r7, #8]
    2bb6:	1dfb      	adds	r3, r7, #7
    2bb8:	701a      	strb	r2, [r3, #0]
    2bba:	4c44      	ldr	r4, [pc, #272]	; (2ccc <led_blink+0x120>)
    2bbc:	447c      	add	r4, pc
	bool state = 0;
    2bbe:	2317      	movs	r3, #23
    2bc0:	18fb      	adds	r3, r7, r3
    2bc2:	2200      	movs	r2, #0
    2bc4:	701a      	strb	r2, [r3, #0]
	struct port_config cfg;
	port_get_config_defaults(&cfg);
    2bc6:	2314      	movs	r3, #20
    2bc8:	18fb      	adds	r3, r7, r3
    2bca:	0018      	movs	r0, r3
    2bcc:	4b40      	ldr	r3, [pc, #256]	; (2cd0 <led_blink+0x124>)
    2bce:	447b      	add	r3, pc
    2bd0:	4798      	blx	r3
	while(num_blinks*2 > 0) {
    2bd2:	e05f      	b.n	2c94 <led_blink+0xe8>
		state = !state;
    2bd4:	2317      	movs	r3, #23
    2bd6:	18fb      	adds	r3, r7, r3
    2bd8:	781b      	ldrb	r3, [r3, #0]
    2bda:	1e5a      	subs	r2, r3, #1
    2bdc:	4193      	sbcs	r3, r2
    2bde:	b2db      	uxtb	r3, r3
    2be0:	2201      	movs	r2, #1
    2be2:	4053      	eors	r3, r2
    2be4:	b2db      	uxtb	r3, r3
    2be6:	001a      	movs	r2, r3
    2be8:	2317      	movs	r3, #23
    2bea:	18fb      	adds	r3, r7, r3
    2bec:	701a      	strb	r2, [r3, #0]
    2bee:	781a      	ldrb	r2, [r3, #0]
    2bf0:	2101      	movs	r1, #1
    2bf2:	400a      	ands	r2, r1
    2bf4:	701a      	strb	r2, [r3, #0]
		if (state) {
    2bf6:	2317      	movs	r3, #23
    2bf8:	18fb      	adds	r3, r7, r3
    2bfa:	781b      	ldrb	r3, [r3, #0]
    2bfc:	2b00      	cmp	r3, #0
    2bfe:	d020      	beq.n	2c42 <led_blink+0x96>
			cfg.direction = PORT_PIN_DIR_OUTPUT;
    2c00:	2314      	movs	r3, #20
    2c02:	18fb      	adds	r3, r7, r3
    2c04:	2201      	movs	r2, #1
    2c06:	701a      	strb	r2, [r3, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    2c08:	2314      	movs	r3, #20
    2c0a:	18fb      	adds	r3, r7, r3
    2c0c:	2200      	movs	r2, #0
    2c0e:	705a      	strb	r2, [r3, #1]
			port_pin_set_output_level(LED_OUT_PIN, !green);
    2c10:	1dfb      	adds	r3, r7, #7
    2c12:	781b      	ldrb	r3, [r3, #0]
    2c14:	1e5a      	subs	r2, r3, #1
    2c16:	4193      	sbcs	r3, r2
    2c18:	b2db      	uxtb	r3, r3
    2c1a:	2201      	movs	r2, #1
    2c1c:	4053      	eors	r3, r2
    2c1e:	b2db      	uxtb	r3, r3
    2c20:	1c1a      	adds	r2, r3, #0
    2c22:	2301      	movs	r3, #1
    2c24:	4013      	ands	r3, r2
    2c26:	b2db      	uxtb	r3, r3
    2c28:	0019      	movs	r1, r3
    2c2a:	202b      	movs	r0, #43	; 0x2b
    2c2c:	4b29      	ldr	r3, [pc, #164]	; (2cd4 <led_blink+0x128>)
    2c2e:	447b      	add	r3, pc
    2c30:	4798      	blx	r3
			port_pin_set_config(LED_OUT_PIN, &cfg);
    2c32:	2314      	movs	r3, #20
    2c34:	18fb      	adds	r3, r7, r3
    2c36:	0019      	movs	r1, r3
    2c38:	202b      	movs	r0, #43	; 0x2b
    2c3a:	4b27      	ldr	r3, [pc, #156]	; (2cd8 <led_blink+0x12c>)
    2c3c:	58e3      	ldr	r3, [r4, r3]
    2c3e:	4798      	blx	r3
    2c40:	e013      	b.n	2c6a <led_blink+0xbe>
			} else {
			cfg.direction = PORT_PIN_DIR_INPUT;
    2c42:	2314      	movs	r3, #20
    2c44:	18fb      	adds	r3, r7, r3
    2c46:	2200      	movs	r2, #0
    2c48:	701a      	strb	r2, [r3, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    2c4a:	2314      	movs	r3, #20
    2c4c:	18fb      	adds	r3, r7, r3
    2c4e:	2200      	movs	r2, #0
    2c50:	705a      	strb	r2, [r3, #1]
			port_pin_set_output_level(LED_OUT_PIN, 0);
    2c52:	2100      	movs	r1, #0
    2c54:	202b      	movs	r0, #43	; 0x2b
    2c56:	4b21      	ldr	r3, [pc, #132]	; (2cdc <led_blink+0x130>)
    2c58:	447b      	add	r3, pc
    2c5a:	4798      	blx	r3
			port_pin_set_config(LED_OUT_PIN, &cfg);
    2c5c:	2314      	movs	r3, #20
    2c5e:	18fb      	adds	r3, r7, r3
    2c60:	0019      	movs	r1, r3
    2c62:	202b      	movs	r0, #43	; 0x2b
    2c64:	4b1c      	ldr	r3, [pc, #112]	; (2cd8 <led_blink+0x12c>)
    2c66:	58e3      	ldr	r3, [r4, r3]
    2c68:	4798      	blx	r3
		}
		delay_ms(blink_period_ms/2);
    2c6a:	68bb      	ldr	r3, [r7, #8]
    2c6c:	3301      	adds	r3, #1
    2c6e:	2b02      	cmp	r3, #2
    2c70:	d909      	bls.n	2c86 <led_blink+0xda>
    2c72:	68bb      	ldr	r3, [r7, #8]
    2c74:	2b00      	cmp	r3, #0
    2c76:	da00      	bge.n	2c7a <led_blink+0xce>
    2c78:	3301      	adds	r3, #1
    2c7a:	105b      	asrs	r3, r3, #1
    2c7c:	0018      	movs	r0, r3
    2c7e:	4b18      	ldr	r3, [pc, #96]	; (2ce0 <led_blink+0x134>)
    2c80:	58e3      	ldr	r3, [r4, r3]
    2c82:	4798      	blx	r3
    2c84:	e003      	b.n	2c8e <led_blink+0xe2>
    2c86:	2001      	movs	r0, #1
    2c88:	4b16      	ldr	r3, [pc, #88]	; (2ce4 <led_blink+0x138>)
    2c8a:	58e3      	ldr	r3, [r4, r3]
    2c8c:	4798      	blx	r3
		num_blinks--;
    2c8e:	68fb      	ldr	r3, [r7, #12]
    2c90:	3b01      	subs	r3, #1
    2c92:	60fb      	str	r3, [r7, #12]
	while(num_blinks*2 > 0) {
    2c94:	68fb      	ldr	r3, [r7, #12]
    2c96:	005b      	lsls	r3, r3, #1
    2c98:	2b00      	cmp	r3, #0
    2c9a:	dc9b      	bgt.n	2bd4 <led_blink+0x28>
	}
	cfg.direction = PORT_PIN_DIR_INPUT;
    2c9c:	2314      	movs	r3, #20
    2c9e:	18fb      	adds	r3, r7, r3
    2ca0:	2200      	movs	r2, #0
    2ca2:	701a      	strb	r2, [r3, #0]
	cfg.input_pull = PORT_PIN_PULL_NONE;
    2ca4:	2314      	movs	r3, #20
    2ca6:	18fb      	adds	r3, r7, r3
    2ca8:	2200      	movs	r2, #0
    2caa:	705a      	strb	r2, [r3, #1]
	port_pin_set_output_level(LED_OUT_PIN, 0);
    2cac:	2100      	movs	r1, #0
    2cae:	202b      	movs	r0, #43	; 0x2b
    2cb0:	4b0d      	ldr	r3, [pc, #52]	; (2ce8 <led_blink+0x13c>)
    2cb2:	447b      	add	r3, pc
    2cb4:	4798      	blx	r3
	port_pin_set_config(LED_OUT_PIN, &cfg);
    2cb6:	2314      	movs	r3, #20
    2cb8:	18fb      	adds	r3, r7, r3
    2cba:	0019      	movs	r1, r3
    2cbc:	202b      	movs	r0, #43	; 0x2b
    2cbe:	4b06      	ldr	r3, [pc, #24]	; (2cd8 <led_blink+0x12c>)
    2cc0:	58e3      	ldr	r3, [r4, r3]
    2cc2:	4798      	blx	r3
}
    2cc4:	46c0      	nop			; (mov r8, r8)
    2cc6:	46bd      	mov	sp, r7
    2cc8:	b007      	add	sp, #28
    2cca:	bd90      	pop	{r4, r7, pc}
    2ccc:	0000f214 	.word	0x0000f214
    2cd0:	ffffee57 	.word	0xffffee57
    2cd4:	ffffee63 	.word	0xffffee63
    2cd8:	00000238 	.word	0x00000238
    2cdc:	ffffee39 	.word	0xffffee39
    2ce0:	0000029c 	.word	0x0000029c
    2ce4:	000002e4 	.word	0x000002e4
    2ce8:	ffffeddf 	.word	0xffffeddf

00002cec <fatal_error>:

// Fatal errors: blink light, print, sleep
static void fatal_error(int numBlinks, const char* fmt, ...) {
    2cec:	b40e      	push	{r1, r2, r3}
    2cee:	b590      	push	{r4, r7, lr}
    2cf0:	b084      	sub	sp, #16
    2cf2:	af00      	add	r7, sp, #0
    2cf4:	6078      	str	r0, [r7, #4]
    2cf6:	4c12      	ldr	r4, [pc, #72]	; (2d40 <fatal_error+0x54>)
    2cf8:	447c      	add	r4, pc
	va_list args;
	va_start(args, fmt);
    2cfa:	2320      	movs	r3, #32
    2cfc:	18fb      	adds	r3, r7, r3
    2cfe:	60fb      	str	r3, [r7, #12]
	debug_print(fmt, args);
    2d00:	68fa      	ldr	r2, [r7, #12]
    2d02:	69fb      	ldr	r3, [r7, #28]
    2d04:	0011      	movs	r1, r2
    2d06:	0018      	movs	r0, r3
    2d08:	4b0e      	ldr	r3, [pc, #56]	; (2d44 <fatal_error+0x58>)
    2d0a:	447b      	add	r3, pc
    2d0c:	4798      	blx	r3
	va_end(args);
	led_blink(numBlinks, 200, 0);
    2d0e:	687b      	ldr	r3, [r7, #4]
    2d10:	2200      	movs	r2, #0
    2d12:	21c8      	movs	r1, #200	; 0xc8
    2d14:	0018      	movs	r0, r3
    2d16:	4b0c      	ldr	r3, [pc, #48]	; (2d48 <fatal_error+0x5c>)
    2d18:	447b      	add	r3, pc
    2d1a:	4798      	blx	r3
	delay_ms(100);
    2d1c:	2064      	movs	r0, #100	; 0x64
    2d1e:	4b0b      	ldr	r3, [pc, #44]	; (2d4c <fatal_error+0x60>)
    2d20:	58e3      	ldr	r3, [r4, r3]
    2d22:	4798      	blx	r3

	// Sleep, wakes on button press and restarts bootloader
	system_sleep();
    2d24:	4b0a      	ldr	r3, [pc, #40]	; (2d50 <fatal_error+0x64>)
    2d26:	447b      	add	r3, pc
    2d28:	4798      	blx	r3
	system_reset();
    2d2a:	4b0a      	ldr	r3, [pc, #40]	; (2d54 <fatal_error+0x68>)
    2d2c:	447b      	add	r3, pc
    2d2e:	4798      	blx	r3
}
    2d30:	46c0      	nop			; (mov r8, r8)
    2d32:	46bd      	mov	sp, r7
    2d34:	b004      	add	sp, #16
    2d36:	bc90      	pop	{r4, r7}
    2d38:	bc08      	pop	{r3}
    2d3a:	b003      	add	sp, #12
    2d3c:	4718      	bx	r3
    2d3e:	46c0      	nop			; (mov r8, r8)
    2d40:	0000f0d8 	.word	0x0000f0d8
    2d44:	0000004b 	.word	0x0000004b
    2d48:	fffffe91 	.word	0xfffffe91
    2d4c:	0000029c 	.word	0x0000029c
    2d50:	ffffefd7 	.word	0xffffefd7
    2d54:	ffffefe1 	.word	0xffffefe1

00002d58 <debug_print>:

static void debug_print(const char* fmt, ...) {
    2d58:	b40f      	push	{r0, r1, r2, r3}
    2d5a:	b580      	push	{r7, lr}
    2d5c:	b082      	sub	sp, #8
    2d5e:	af00      	add	r7, sp, #0
    2d60:	4a08      	ldr	r2, [pc, #32]	; (2d84 <debug_print+0x2c>)
    2d62:	447a      	add	r2, pc
#ifdef ENABLE_USB_DEBUG
	va_list args;
	va_start(args, fmt);
    2d64:	2314      	movs	r3, #20
    2d66:	18fb      	adds	r3, r7, r3
    2d68:	607b      	str	r3, [r7, #4]
	vprintf(fmt, args);
    2d6a:	6879      	ldr	r1, [r7, #4]
    2d6c:	693b      	ldr	r3, [r7, #16]
    2d6e:	0018      	movs	r0, r3
    2d70:	4b05      	ldr	r3, [pc, #20]	; (2d88 <debug_print+0x30>)
    2d72:	58d3      	ldr	r3, [r2, r3]
    2d74:	4798      	blx	r3
	va_end(args);
#endif
    2d76:	46c0      	nop			; (mov r8, r8)
    2d78:	46bd      	mov	sp, r7
    2d7a:	b002      	add	sp, #8
    2d7c:	bc80      	pop	{r7}
    2d7e:	bc08      	pop	{r3}
    2d80:	b004      	add	sp, #16
    2d82:	4718      	bx	r3
    2d84:	0000f06e 	.word	0x0000f06e
    2d88:	0000015c 	.word	0x0000015c

00002d8c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    2d8c:	b580      	push	{r7, lr}
    2d8e:	b082      	sub	sp, #8
    2d90:	af00      	add	r7, sp, #0
    2d92:	4a0b      	ldr	r2, [pc, #44]	; (2dc0 <cpu_irq_save+0x34>)
    2d94:	447a      	add	r2, pc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    2d96:	f3ef 8310 	mrs	r3, PRIMASK
    2d9a:	607b      	str	r3, [r7, #4]
  return(result);
    2d9c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    2d9e:	4259      	negs	r1, r3
    2da0:	414b      	adcs	r3, r1
    2da2:	b2db      	uxtb	r3, r3
    2da4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    2da6:	b672      	cpsid	i
  __ASM volatile ("dmb");
    2da8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2dac:	4b05      	ldr	r3, [pc, #20]	; (2dc4 <cpu_irq_save+0x38>)
    2dae:	58d3      	ldr	r3, [r2, r3]
    2db0:	2200      	movs	r2, #0
    2db2:	701a      	strb	r2, [r3, #0]
	return flags;
    2db4:	683b      	ldr	r3, [r7, #0]
}
    2db6:	0018      	movs	r0, r3
    2db8:	46bd      	mov	sp, r7
    2dba:	b002      	add	sp, #8
    2dbc:	bd80      	pop	{r7, pc}
    2dbe:	46c0      	nop			; (mov r8, r8)
    2dc0:	0000f03c 	.word	0x0000f03c
    2dc4:	000000ec 	.word	0x000000ec

00002dc8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    2dc8:	b580      	push	{r7, lr}
    2dca:	b082      	sub	sp, #8
    2dcc:	af00      	add	r7, sp, #0
    2dce:	6078      	str	r0, [r7, #4]
	return (flags);
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	1e5a      	subs	r2, r3, #1
    2dd4:	4193      	sbcs	r3, r2
    2dd6:	b2db      	uxtb	r3, r3
}
    2dd8:	0018      	movs	r0, r3
    2dda:	46bd      	mov	sp, r7
    2ddc:	b002      	add	sp, #8
    2dde:	bd80      	pop	{r7, pc}

00002de0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    2de0:	b590      	push	{r4, r7, lr}
    2de2:	b083      	sub	sp, #12
    2de4:	af00      	add	r7, sp, #0
    2de6:	6078      	str	r0, [r7, #4]
    2de8:	4c09      	ldr	r4, [pc, #36]	; (2e10 <cpu_irq_restore+0x30>)
    2dea:	447c      	add	r4, pc
	if (cpu_irq_is_enabled_flags(flags))
    2dec:	687b      	ldr	r3, [r7, #4]
    2dee:	0018      	movs	r0, r3
    2df0:	4b08      	ldr	r3, [pc, #32]	; (2e14 <cpu_irq_restore+0x34>)
    2df2:	447b      	add	r3, pc
    2df4:	4798      	blx	r3
    2df6:	1e03      	subs	r3, r0, #0
    2df8:	d006      	beq.n	2e08 <cpu_irq_restore+0x28>
		cpu_irq_enable();
    2dfa:	4b07      	ldr	r3, [pc, #28]	; (2e18 <cpu_irq_restore+0x38>)
    2dfc:	58e3      	ldr	r3, [r4, r3]
    2dfe:	2201      	movs	r2, #1
    2e00:	701a      	strb	r2, [r3, #0]
    2e02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e06:	b662      	cpsie	i
}
    2e08:	46c0      	nop			; (mov r8, r8)
    2e0a:	46bd      	mov	sp, r7
    2e0c:	b003      	add	sp, #12
    2e0e:	bd90      	pop	{r4, r7, pc}
    2e10:	0000efe6 	.word	0x0000efe6
    2e14:	ffffffd3 	.word	0xffffffd3
    2e18:	000000ec 	.word	0x000000ec

00002e1c <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
    2e1c:	b590      	push	{r4, r7, lr}
    2e1e:	b083      	sub	sp, #12
    2e20:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2e22:	1dbb      	adds	r3, r7, #6
    2e24:	2200      	movs	r2, #0
    2e26:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_comm_enabled = 0;
    2e28:	4b57      	ldr	r3, [pc, #348]	; (2f88 <udi_cdc_comm_enable+0x16c>)
    2e2a:	447b      	add	r3, pc
    2e2c:	2200      	movs	r2, #0
    2e2e:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    2e30:	1dbb      	adds	r3, r7, #6
    2e32:	781a      	ldrb	r2, [r3, #0]
    2e34:	4b55      	ldr	r3, [pc, #340]	; (2f8c <udi_cdc_comm_enable+0x170>)
    2e36:	447b      	add	r3, pc
    2e38:	0052      	lsls	r2, r2, #1
    2e3a:	2100      	movs	r1, #0
    2e3c:	52d1      	strh	r1, [r2, r3]

	uid_cdc_state_msg[port].header.bmRequestType =
    2e3e:	1dbb      	adds	r3, r7, #6
    2e40:	781a      	ldrb	r2, [r3, #0]
    2e42:	4953      	ldr	r1, [pc, #332]	; (2f90 <udi_cdc_comm_enable+0x174>)
    2e44:	4479      	add	r1, pc
    2e46:	0013      	movs	r3, r2
    2e48:	009b      	lsls	r3, r3, #2
    2e4a:	189b      	adds	r3, r3, r2
    2e4c:	005b      	lsls	r3, r3, #1
    2e4e:	22a1      	movs	r2, #161	; 0xa1
    2e50:	545a      	strb	r2, [r3, r1]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    2e52:	1dbb      	adds	r3, r7, #6
    2e54:	781a      	ldrb	r2, [r3, #0]
    2e56:	494f      	ldr	r1, [pc, #316]	; (2f94 <udi_cdc_comm_enable+0x178>)
    2e58:	4479      	add	r1, pc
    2e5a:	0013      	movs	r3, r2
    2e5c:	009b      	lsls	r3, r3, #2
    2e5e:	189b      	adds	r3, r3, r2
    2e60:	005b      	lsls	r3, r3, #1
    2e62:	18cb      	adds	r3, r1, r3
    2e64:	3301      	adds	r3, #1
    2e66:	2220      	movs	r2, #32
    2e68:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    2e6a:	1dbb      	adds	r3, r7, #6
    2e6c:	781a      	ldrb	r2, [r3, #0]
    2e6e:	494a      	ldr	r1, [pc, #296]	; (2f98 <udi_cdc_comm_enable+0x17c>)
    2e70:	4479      	add	r1, pc
    2e72:	0013      	movs	r3, r2
    2e74:	009b      	lsls	r3, r3, #2
    2e76:	189b      	adds	r3, r3, r2
    2e78:	005b      	lsls	r3, r3, #1
    2e7a:	18cb      	adds	r3, r1, r3
    2e7c:	3302      	adds	r3, #2
    2e7e:	2200      	movs	r2, #0
    2e80:	801a      	strh	r2, [r3, #0]

	switch (port) {
    2e82:	1dbb      	adds	r3, r7, #6
    2e84:	781b      	ldrb	r3, [r3, #0]
    2e86:	2b00      	cmp	r3, #0
    2e88:	d103      	bne.n	2e92 <udi_cdc_comm_enable+0x76>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
    2e8a:	1dfb      	adds	r3, r7, #7
    2e8c:	2200      	movs	r2, #0
    2e8e:	701a      	strb	r2, [r3, #0]
    2e90:	e003      	b.n	2e9a <udi_cdc_comm_enable+0x7e>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
    2e92:	1dfb      	adds	r3, r7, #7
    2e94:	2200      	movs	r2, #0
    2e96:	701a      	strb	r2, [r3, #0]
		break;
    2e98:	46c0      	nop			; (mov r8, r8)
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    2e9a:	1dbb      	adds	r3, r7, #6
    2e9c:	781a      	ldrb	r2, [r3, #0]
    2e9e:	1dfb      	adds	r3, r7, #7
    2ea0:	781b      	ldrb	r3, [r3, #0]
    2ea2:	b298      	uxth	r0, r3
    2ea4:	493d      	ldr	r1, [pc, #244]	; (2f9c <udi_cdc_comm_enable+0x180>)
    2ea6:	4479      	add	r1, pc
    2ea8:	0013      	movs	r3, r2
    2eaa:	009b      	lsls	r3, r3, #2
    2eac:	189b      	adds	r3, r3, r2
    2eae:	005b      	lsls	r3, r3, #1
    2eb0:	18cb      	adds	r3, r1, r3
    2eb2:	3304      	adds	r3, #4
    2eb4:	1c02      	adds	r2, r0, #0
    2eb6:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    2eb8:	1dbb      	adds	r3, r7, #6
    2eba:	781a      	ldrb	r2, [r3, #0]
    2ebc:	4938      	ldr	r1, [pc, #224]	; (2fa0 <udi_cdc_comm_enable+0x184>)
    2ebe:	4479      	add	r1, pc
    2ec0:	0013      	movs	r3, r2
    2ec2:	009b      	lsls	r3, r3, #2
    2ec4:	189b      	adds	r3, r3, r2
    2ec6:	005b      	lsls	r3, r3, #1
    2ec8:	18cb      	adds	r3, r1, r3
    2eca:	3306      	adds	r3, #6
    2ecc:	2202      	movs	r2, #2
    2ece:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    2ed0:	1dbb      	adds	r3, r7, #6
    2ed2:	781a      	ldrb	r2, [r3, #0]
    2ed4:	4933      	ldr	r1, [pc, #204]	; (2fa4 <udi_cdc_comm_enable+0x188>)
    2ed6:	4479      	add	r1, pc
    2ed8:	0013      	movs	r3, r2
    2eda:	009b      	lsls	r3, r3, #2
    2edc:	189b      	adds	r3, r3, r2
    2ede:	005b      	lsls	r3, r3, #1
    2ee0:	18cb      	adds	r3, r1, r3
    2ee2:	3308      	adds	r3, #8
    2ee4:	2200      	movs	r2, #0
    2ee6:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    2ee8:	1dbb      	adds	r3, r7, #6
    2eea:	7819      	ldrb	r1, [r3, #0]
    2eec:	4a2e      	ldr	r2, [pc, #184]	; (2fa8 <udi_cdc_comm_enable+0x18c>)
    2eee:	447a      	add	r2, pc
    2ef0:	000b      	movs	r3, r1
    2ef2:	00db      	lsls	r3, r3, #3
    2ef4:	1a5b      	subs	r3, r3, r1
    2ef6:	5c99      	ldrb	r1, [r3, r2]
    2ef8:	2000      	movs	r0, #0
    2efa:	4001      	ands	r1, r0
    2efc:	5499      	strb	r1, [r3, r2]
    2efe:	18d1      	adds	r1, r2, r3
    2f00:	7848      	ldrb	r0, [r1, #1]
    2f02:	2400      	movs	r4, #0
    2f04:	4020      	ands	r0, r4
    2f06:	1c04      	adds	r4, r0, #0
    2f08:	203e      	movs	r0, #62	; 0x3e
    2f0a:	4240      	negs	r0, r0
    2f0c:	4320      	orrs	r0, r4
    2f0e:	7048      	strb	r0, [r1, #1]
    2f10:	18d1      	adds	r1, r2, r3
    2f12:	7888      	ldrb	r0, [r1, #2]
    2f14:	2400      	movs	r4, #0
    2f16:	4020      	ands	r0, r4
    2f18:	1c04      	adds	r4, r0, #0
    2f1a:	2001      	movs	r0, #1
    2f1c:	4320      	orrs	r0, r4
    2f1e:	7088      	strb	r0, [r1, #2]
    2f20:	18d3      	adds	r3, r2, r3
    2f22:	78da      	ldrb	r2, [r3, #3]
    2f24:	2100      	movs	r1, #0
    2f26:	400a      	ands	r2, r1
    2f28:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    2f2a:	1dbb      	adds	r3, r7, #6
    2f2c:	781a      	ldrb	r2, [r3, #0]
    2f2e:	491f      	ldr	r1, [pc, #124]	; (2fac <udi_cdc_comm_enable+0x190>)
    2f30:	4479      	add	r1, pc
    2f32:	0013      	movs	r3, r2
    2f34:	00db      	lsls	r3, r3, #3
    2f36:	1a9b      	subs	r3, r3, r2
    2f38:	18cb      	adds	r3, r1, r3
    2f3a:	3304      	adds	r3, #4
    2f3c:	2200      	movs	r2, #0
    2f3e:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    2f40:	1dbb      	adds	r3, r7, #6
    2f42:	781a      	ldrb	r2, [r3, #0]
    2f44:	491a      	ldr	r1, [pc, #104]	; (2fb0 <udi_cdc_comm_enable+0x194>)
    2f46:	4479      	add	r1, pc
    2f48:	0013      	movs	r3, r2
    2f4a:	00db      	lsls	r3, r3, #3
    2f4c:	1a9b      	subs	r3, r3, r2
    2f4e:	18cb      	adds	r3, r1, r3
    2f50:	3305      	adds	r3, #5
    2f52:	2200      	movs	r2, #0
    2f54:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    2f56:	1dbb      	adds	r3, r7, #6
    2f58:	781a      	ldrb	r2, [r3, #0]
    2f5a:	4916      	ldr	r1, [pc, #88]	; (2fb4 <udi_cdc_comm_enable+0x198>)
    2f5c:	4479      	add	r1, pc
    2f5e:	0013      	movs	r3, r2
    2f60:	00db      	lsls	r3, r3, #3
    2f62:	1a9b      	subs	r3, r3, r2
    2f64:	18cb      	adds	r3, r1, r3
    2f66:	3306      	adds	r3, #6
    2f68:	2208      	movs	r2, #8
    2f6a:	701a      	strb	r2, [r3, #0]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    2f6c:	4b12      	ldr	r3, [pc, #72]	; (2fb8 <udi_cdc_comm_enable+0x19c>)
    2f6e:	447b      	add	r3, pc
    2f70:	781b      	ldrb	r3, [r3, #0]
    2f72:	b2db      	uxtb	r3, r3
    2f74:	3301      	adds	r3, #1
    2f76:	b2da      	uxtb	r2, r3
    2f78:	4b10      	ldr	r3, [pc, #64]	; (2fbc <udi_cdc_comm_enable+0x1a0>)
    2f7a:	447b      	add	r3, pc
    2f7c:	701a      	strb	r2, [r3, #0]
	return true;
    2f7e:	2301      	movs	r3, #1
}
    2f80:	0018      	movs	r0, r3
    2f82:	46bd      	mov	sp, r7
    2f84:	b003      	add	sp, #12
    2f86:	bd90      	pop	{r4, r7, pc}
    2f88:	1fffd5b8 	.word	0x1fffd5b8
    2f8c:	1fffd59e 	.word	0x1fffd59e
    2f90:	1fffd594 	.word	0x1fffd594
    2f94:	1fffd580 	.word	0x1fffd580
    2f98:	1fffd568 	.word	0x1fffd568
    2f9c:	1fffd532 	.word	0x1fffd532
    2fa0:	1fffd51a 	.word	0x1fffd51a
    2fa4:	1fffd502 	.word	0x1fffd502
    2fa8:	1fffd4de 	.word	0x1fffd4de
    2fac:	1fffd49c 	.word	0x1fffd49c
    2fb0:	1fffd486 	.word	0x1fffd486
    2fb4:	1fffd470 	.word	0x1fffd470
    2fb8:	1fffd474 	.word	0x1fffd474
    2fbc:	1fffd468 	.word	0x1fffd468

00002fc0 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
    2fc0:	b580      	push	{r7, lr}
    2fc2:	b082      	sub	sp, #8
    2fc4:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    2fc6:	1dfb      	adds	r3, r7, #7
    2fc8:	2200      	movs	r2, #0
    2fca:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_data_enabled = 0;
    2fcc:	4b3e      	ldr	r3, [pc, #248]	; (30c8 <udi_cdc_data_enable+0x108>)
    2fce:	447b      	add	r3, pc
    2fd0:	2200      	movs	r2, #0
    2fd2:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    2fd4:	1dfb      	adds	r3, r7, #7
    2fd6:	781b      	ldrb	r3, [r3, #0]
    2fd8:	4a3c      	ldr	r2, [pc, #240]	; (30cc <udi_cdc_data_enable+0x10c>)
    2fda:	447a      	add	r2, pc
    2fdc:	2100      	movs	r1, #0
    2fde:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    2fe0:	1dfb      	adds	r3, r7, #7
    2fe2:	781b      	ldrb	r3, [r3, #0]
    2fe4:	4a3a      	ldr	r2, [pc, #232]	; (30d0 <udi_cdc_data_enable+0x110>)
    2fe6:	447a      	add	r2, pc
    2fe8:	2100      	movs	r1, #0
    2fea:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
    2fec:	1dfb      	adds	r3, r7, #7
    2fee:	781b      	ldrb	r3, [r3, #0]
    2ff0:	4a38      	ldr	r2, [pc, #224]	; (30d4 <udi_cdc_data_enable+0x114>)
    2ff2:	447a      	add	r2, pc
    2ff4:	2100      	movs	r1, #0
    2ff6:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
    2ff8:	1dfb      	adds	r3, r7, #7
    2ffa:	781a      	ldrb	r2, [r3, #0]
    2ffc:	4b36      	ldr	r3, [pc, #216]	; (30d8 <udi_cdc_data_enable+0x118>)
    2ffe:	447b      	add	r3, pc
    3000:	0092      	lsls	r2, r2, #2
    3002:	2100      	movs	r1, #0
    3004:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
    3006:	1dfb      	adds	r3, r7, #7
    3008:	781b      	ldrb	r3, [r3, #0]
    300a:	4a34      	ldr	r2, [pc, #208]	; (30dc <udi_cdc_data_enable+0x11c>)
    300c:	447a      	add	r2, pc
    300e:	009b      	lsls	r3, r3, #2
    3010:	18d3      	adds	r3, r2, r3
    3012:	3302      	adds	r3, #2
    3014:	2200      	movs	r2, #0
    3016:	801a      	strh	r2, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
    3018:	1dfb      	adds	r3, r7, #7
    301a:	781a      	ldrb	r2, [r3, #0]
    301c:	4b30      	ldr	r3, [pc, #192]	; (30e0 <udi_cdc_data_enable+0x120>)
    301e:	447b      	add	r3, pc
    3020:	0052      	lsls	r2, r2, #1
    3022:	2100      	movs	r1, #0
    3024:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_send(port);
    3026:	1dfb      	adds	r3, r7, #7
    3028:	781b      	ldrb	r3, [r3, #0]
    302a:	0018      	movs	r0, r3
    302c:	4b2d      	ldr	r3, [pc, #180]	; (30e4 <udi_cdc_data_enable+0x124>)
    302e:	447b      	add	r3, pc
    3030:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    3032:	1dfb      	adds	r3, r7, #7
    3034:	781b      	ldrb	r3, [r3, #0]
    3036:	4a2c      	ldr	r2, [pc, #176]	; (30e8 <udi_cdc_data_enable+0x128>)
    3038:	447a      	add	r2, pc
    303a:	2100      	movs	r1, #0
    303c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
    303e:	1dfb      	adds	r3, r7, #7
    3040:	781b      	ldrb	r3, [r3, #0]
    3042:	4a2a      	ldr	r2, [pc, #168]	; (30ec <udi_cdc_data_enable+0x12c>)
    3044:	447a      	add	r2, pc
    3046:	2100      	movs	r1, #0
    3048:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
    304a:	1dfb      	adds	r3, r7, #7
    304c:	781a      	ldrb	r2, [r3, #0]
    304e:	4b28      	ldr	r3, [pc, #160]	; (30f0 <udi_cdc_data_enable+0x130>)
    3050:	447b      	add	r3, pc
    3052:	0092      	lsls	r2, r2, #2
    3054:	2100      	movs	r1, #0
    3056:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][1] = 0;
    3058:	1dfb      	adds	r3, r7, #7
    305a:	781b      	ldrb	r3, [r3, #0]
    305c:	4a25      	ldr	r2, [pc, #148]	; (30f4 <udi_cdc_data_enable+0x134>)
    305e:	447a      	add	r2, pc
    3060:	009b      	lsls	r3, r3, #2
    3062:	18d3      	adds	r3, r2, r3
    3064:	3302      	adds	r3, #2
    3066:	2200      	movs	r2, #0
    3068:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
    306a:	1dfb      	adds	r3, r7, #7
    306c:	781a      	ldrb	r2, [r3, #0]
    306e:	4b22      	ldr	r3, [pc, #136]	; (30f8 <udi_cdc_data_enable+0x138>)
    3070:	447b      	add	r3, pc
    3072:	0052      	lsls	r2, r2, #1
    3074:	2100      	movs	r1, #0
    3076:	52d1      	strh	r1, [r2, r3]
	if (!udi_cdc_rx_start(port)) {
    3078:	1dfb      	adds	r3, r7, #7
    307a:	781b      	ldrb	r3, [r3, #0]
    307c:	0018      	movs	r0, r3
    307e:	4b1f      	ldr	r3, [pc, #124]	; (30fc <udi_cdc_data_enable+0x13c>)
    3080:	447b      	add	r3, pc
    3082:	4798      	blx	r3
    3084:	0003      	movs	r3, r0
    3086:	001a      	movs	r2, r3
    3088:	2301      	movs	r3, #1
    308a:	4053      	eors	r3, r2
    308c:	b2db      	uxtb	r3, r3
    308e:	2b00      	cmp	r3, #0
    3090:	d001      	beq.n	3096 <udi_cdc_data_enable+0xd6>
		return false;
    3092:	2300      	movs	r3, #0
    3094:	e013      	b.n	30be <udi_cdc_data_enable+0xfe>
	}
	udi_cdc_nb_data_enabled++;
    3096:	4b1a      	ldr	r3, [pc, #104]	; (3100 <udi_cdc_data_enable+0x140>)
    3098:	447b      	add	r3, pc
    309a:	781b      	ldrb	r3, [r3, #0]
    309c:	b2db      	uxtb	r3, r3
    309e:	3301      	adds	r3, #1
    30a0:	b2da      	uxtb	r2, r3
    30a2:	4b18      	ldr	r3, [pc, #96]	; (3104 <udi_cdc_data_enable+0x144>)
    30a4:	447b      	add	r3, pc
    30a6:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    30a8:	4b17      	ldr	r3, [pc, #92]	; (3108 <udi_cdc_data_enable+0x148>)
    30aa:	447b      	add	r3, pc
    30ac:	781b      	ldrb	r3, [r3, #0]
    30ae:	b2db      	uxtb	r3, r3
    30b0:	2b01      	cmp	r3, #1
    30b2:	d103      	bne.n	30bc <udi_cdc_data_enable+0xfc>
		udi_cdc_data_running = true;
    30b4:	4b15      	ldr	r3, [pc, #84]	; (310c <udi_cdc_data_enable+0x14c>)
    30b6:	447b      	add	r3, pc
    30b8:	2201      	movs	r2, #1
    30ba:	701a      	strb	r2, [r3, #0]
	}
	return true;
    30bc:	2301      	movs	r3, #1
}
    30be:	0018      	movs	r0, r3
    30c0:	46bd      	mov	sp, r7
    30c2:	b002      	add	sp, #8
    30c4:	bd80      	pop	{r7, pc}
    30c6:	46c0      	nop			; (mov r8, r8)
    30c8:	1fffd415 	.word	0x1fffd415
    30cc:	1fffd52a 	.word	0x1fffd52a
    30d0:	1fffd522 	.word	0x1fffd522
    30d4:	1fffd50a 	.word	0x1fffd50a
    30d8:	1fffd4fa 	.word	0x1fffd4fa
    30dc:	1fffd4ec 	.word	0x1fffd4ec
    30e0:	1fffd4e2 	.word	0x1fffd4e2
    30e4:	000005bf 	.word	0x000005bf
    30e8:	1fffd43c 	.word	0x1fffd43c
    30ec:	1fffd428 	.word	0x1fffd428
    30f0:	1fffd418 	.word	0x1fffd418
    30f4:	1fffd40a 	.word	0x1fffd40a
    30f8:	1fffd400 	.word	0x1fffd400
    30fc:	00000281 	.word	0x00000281
    3100:	1fffd34b 	.word	0x1fffd34b
    3104:	1fffd33f 	.word	0x1fffd33f
    3108:	1fffd339 	.word	0x1fffd339
    310c:	1fffd32e 	.word	0x1fffd32e

00003110 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
    3110:	b580      	push	{r7, lr}
    3112:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    3114:	4b05      	ldr	r3, [pc, #20]	; (312c <udi_cdc_comm_disable+0x1c>)
    3116:	447b      	add	r3, pc
    3118:	781b      	ldrb	r3, [r3, #0]
    311a:	b2db      	uxtb	r3, r3
    311c:	3b01      	subs	r3, #1
    311e:	b2da      	uxtb	r2, r3
    3120:	4b03      	ldr	r3, [pc, #12]	; (3130 <udi_cdc_comm_disable+0x20>)
    3122:	447b      	add	r3, pc
    3124:	701a      	strb	r2, [r3, #0]
}
    3126:	46c0      	nop			; (mov r8, r8)
    3128:	46bd      	mov	sp, r7
    312a:	bd80      	pop	{r7, pc}
    312c:	1fffd2cc 	.word	0x1fffd2cc
    3130:	1fffd2c0 	.word	0x1fffd2c0

00003134 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
    3134:	b580      	push	{r7, lr}
    3136:	b082      	sub	sp, #8
    3138:	af00      	add	r7, sp, #0
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    313a:	4b0b      	ldr	r3, [pc, #44]	; (3168 <udi_cdc_data_disable+0x34>)
    313c:	447b      	add	r3, pc
    313e:	781b      	ldrb	r3, [r3, #0]
    3140:	b2db      	uxtb	r3, r3
    3142:	3b01      	subs	r3, #1
    3144:	b2da      	uxtb	r2, r3
    3146:	4b09      	ldr	r3, [pc, #36]	; (316c <udi_cdc_data_disable+0x38>)
    3148:	447b      	add	r3, pc
    314a:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
    314c:	1dfb      	adds	r3, r7, #7
    314e:	4a08      	ldr	r2, [pc, #32]	; (3170 <udi_cdc_data_disable+0x3c>)
    3150:	447a      	add	r2, pc
    3152:	7812      	ldrb	r2, [r2, #0]
    3154:	701a      	strb	r2, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    3156:	4b07      	ldr	r3, [pc, #28]	; (3174 <udi_cdc_data_disable+0x40>)
    3158:	447b      	add	r3, pc
    315a:	2200      	movs	r2, #0
    315c:	701a      	strb	r2, [r3, #0]
}
    315e:	46c0      	nop			; (mov r8, r8)
    3160:	46bd      	mov	sp, r7
    3162:	b002      	add	sp, #8
    3164:	bd80      	pop	{r7, pc}
    3166:	46c0      	nop			; (mov r8, r8)
    3168:	1fffd2a7 	.word	0x1fffd2a7
    316c:	1fffd29b 	.word	0x1fffd29b
    3170:	1fffd293 	.word	0x1fffd293
    3174:	1fffd28c 	.word	0x1fffd28c

00003178 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
    3178:	b5b0      	push	{r4, r5, r7, lr}
    317a:	b082      	sub	sp, #8
    317c:	af00      	add	r7, sp, #0
    317e:	4c36      	ldr	r4, [pc, #216]	; (3258 <udi_cdc_comm_setup+0xe0>)
    3180:	447c      	add	r4, pc
	uint8_t port = udi_cdc_setup_to_port();
    3182:	1dfd      	adds	r5, r7, #7
    3184:	4b35      	ldr	r3, [pc, #212]	; (325c <udi_cdc_comm_setup+0xe4>)
    3186:	447b      	add	r3, pc
    3188:	4798      	blx	r3
    318a:	0003      	movs	r3, r0
    318c:	702b      	strb	r3, [r5, #0]

	if (Udd_setup_is_in()) {
    318e:	4b34      	ldr	r3, [pc, #208]	; (3260 <udi_cdc_comm_setup+0xe8>)
    3190:	58e3      	ldr	r3, [r4, r3]
    3192:	781b      	ldrb	r3, [r3, #0]
    3194:	b25b      	sxtb	r3, r3
    3196:	2b00      	cmp	r3, #0
    3198:	da24      	bge.n	31e4 <udi_cdc_comm_setup+0x6c>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    319a:	4b31      	ldr	r3, [pc, #196]	; (3260 <udi_cdc_comm_setup+0xe8>)
    319c:	58e3      	ldr	r3, [r4, r3]
    319e:	781b      	ldrb	r3, [r3, #0]
    31a0:	001a      	movs	r2, r3
    31a2:	2360      	movs	r3, #96	; 0x60
    31a4:	4013      	ands	r3, r2
    31a6:	2b20      	cmp	r3, #32
    31a8:	d11c      	bne.n	31e4 <udi_cdc_comm_setup+0x6c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    31aa:	4b2d      	ldr	r3, [pc, #180]	; (3260 <udi_cdc_comm_setup+0xe8>)
    31ac:	58e3      	ldr	r3, [r4, r3]
    31ae:	785b      	ldrb	r3, [r3, #1]
    31b0:	2b21      	cmp	r3, #33	; 0x21
    31b2:	d117      	bne.n	31e4 <udi_cdc_comm_setup+0x6c>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    31b4:	4b2a      	ldr	r3, [pc, #168]	; (3260 <udi_cdc_comm_setup+0xe8>)
    31b6:	58e3      	ldr	r3, [r4, r3]
    31b8:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    31ba:	2b07      	cmp	r3, #7
    31bc:	d001      	beq.n	31c2 <udi_cdc_comm_setup+0x4a>
					return false; // Error for USB host
    31be:	2300      	movs	r3, #0
    31c0:	e046      	b.n	3250 <udi_cdc_comm_setup+0xd8>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    31c2:	1dfb      	adds	r3, r7, #7
    31c4:	781a      	ldrb	r2, [r3, #0]
						(uint8_t *) &
    31c6:	0013      	movs	r3, r2
    31c8:	00db      	lsls	r3, r3, #3
    31ca:	1a9b      	subs	r3, r3, r2
    31cc:	4a25      	ldr	r2, [pc, #148]	; (3264 <udi_cdc_comm_setup+0xec>)
    31ce:	447a      	add	r2, pc
    31d0:	189a      	adds	r2, r3, r2
				udd_g_ctrlreq.payload =
    31d2:	4b23      	ldr	r3, [pc, #140]	; (3260 <udi_cdc_comm_setup+0xe8>)
    31d4:	58e3      	ldr	r3, [r4, r3]
    31d6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
    31d8:	4b21      	ldr	r3, [pc, #132]	; (3260 <udi_cdc_comm_setup+0xe8>)
    31da:	58e3      	ldr	r3, [r4, r3]
    31dc:	2207      	movs	r2, #7
    31de:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    31e0:	2301      	movs	r3, #1
    31e2:	e035      	b.n	3250 <udi_cdc_comm_setup+0xd8>
			}
		}
	}
	if (Udd_setup_is_out()) {
    31e4:	4b1e      	ldr	r3, [pc, #120]	; (3260 <udi_cdc_comm_setup+0xe8>)
    31e6:	58e3      	ldr	r3, [r4, r3]
    31e8:	781b      	ldrb	r3, [r3, #0]
    31ea:	b25b      	sxtb	r3, r3
    31ec:	2b00      	cmp	r3, #0
    31ee:	db2e      	blt.n	324e <udi_cdc_comm_setup+0xd6>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    31f0:	4b1b      	ldr	r3, [pc, #108]	; (3260 <udi_cdc_comm_setup+0xe8>)
    31f2:	58e3      	ldr	r3, [r4, r3]
    31f4:	781b      	ldrb	r3, [r3, #0]
    31f6:	001a      	movs	r2, r3
    31f8:	2360      	movs	r3, #96	; 0x60
    31fa:	4013      	ands	r3, r2
    31fc:	2b20      	cmp	r3, #32
    31fe:	d126      	bne.n	324e <udi_cdc_comm_setup+0xd6>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    3200:	4b17      	ldr	r3, [pc, #92]	; (3260 <udi_cdc_comm_setup+0xe8>)
    3202:	58e3      	ldr	r3, [r4, r3]
    3204:	785b      	ldrb	r3, [r3, #1]
    3206:	2b20      	cmp	r3, #32
    3208:	d002      	beq.n	3210 <udi_cdc_comm_setup+0x98>
    320a:	2b22      	cmp	r3, #34	; 0x22
    320c:	d01d      	beq.n	324a <udi_cdc_comm_setup+0xd2>
    320e:	e01e      	b.n	324e <udi_cdc_comm_setup+0xd6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    3210:	4b13      	ldr	r3, [pc, #76]	; (3260 <udi_cdc_comm_setup+0xe8>)
    3212:	58e3      	ldr	r3, [r4, r3]
    3214:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    3216:	2b07      	cmp	r3, #7
    3218:	d001      	beq.n	321e <udi_cdc_comm_setup+0xa6>
					return false; // Error for USB host
    321a:	2300      	movs	r3, #0
    321c:	e018      	b.n	3250 <udi_cdc_comm_setup+0xd8>
				udd_g_ctrlreq.callback =
    321e:	4b10      	ldr	r3, [pc, #64]	; (3260 <udi_cdc_comm_setup+0xe8>)
    3220:	58e3      	ldr	r3, [r4, r3]
    3222:	4a11      	ldr	r2, [pc, #68]	; (3268 <udi_cdc_comm_setup+0xf0>)
    3224:	447a      	add	r2, pc
    3226:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    3228:	1dfb      	adds	r3, r7, #7
    322a:	781a      	ldrb	r2, [r3, #0]
						(uint8_t *) &
    322c:	0013      	movs	r3, r2
    322e:	00db      	lsls	r3, r3, #3
    3230:	1a9b      	subs	r3, r3, r2
    3232:	4a0e      	ldr	r2, [pc, #56]	; (326c <udi_cdc_comm_setup+0xf4>)
    3234:	447a      	add	r2, pc
    3236:	189a      	adds	r2, r3, r2
				udd_g_ctrlreq.payload =
    3238:	4b09      	ldr	r3, [pc, #36]	; (3260 <udi_cdc_comm_setup+0xe8>)
    323a:	58e3      	ldr	r3, [r4, r3]
    323c:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
    323e:	4b08      	ldr	r3, [pc, #32]	; (3260 <udi_cdc_comm_setup+0xe8>)
    3240:	58e3      	ldr	r3, [r4, r3]
    3242:	2207      	movs	r2, #7
    3244:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    3246:	2301      	movs	r3, #1
    3248:	e002      	b.n	3250 <udi_cdc_comm_setup+0xd8>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    324a:	2301      	movs	r3, #1
    324c:	e000      	b.n	3250 <udi_cdc_comm_setup+0xd8>
			}
		}
	}
	return false;  // request Not supported
    324e:	2300      	movs	r3, #0
}
    3250:	0018      	movs	r0, r3
    3252:	46bd      	mov	sp, r7
    3254:	b002      	add	sp, #8
    3256:	bdb0      	pop	{r4, r5, r7, pc}
    3258:	0000ec50 	.word	0x0000ec50
    325c:	0000011f 	.word	0x0000011f
    3260:	000001e0 	.word	0x000001e0
    3264:	1fffd1fe 	.word	0x1fffd1fe
    3268:	000000bd 	.word	0x000000bd
    326c:	1fffd198 	.word	0x1fffd198

00003270 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
    3270:	b580      	push	{r7, lr}
    3272:	af00      	add	r7, sp, #0
	return false;  // request Not supported
    3274:	2300      	movs	r3, #0
}
    3276:	0018      	movs	r0, r3
    3278:	46bd      	mov	sp, r7
    327a:	bd80      	pop	{r7, pc}

0000327c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
    327c:	b580      	push	{r7, lr}
    327e:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
    3280:	2300      	movs	r3, #0
}
    3282:	0018      	movs	r0, r3
    3284:	46bd      	mov	sp, r7
    3286:	bd80      	pop	{r7, pc}

00003288 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
    3288:	b580      	push	{r7, lr}
    328a:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    328c:	4b04      	ldr	r3, [pc, #16]	; (32a0 <udi_cdc_data_sof_notify+0x18>)
    328e:	447b      	add	r3, pc
    3290:	781b      	ldrb	r3, [r3, #0]
    3292:	0018      	movs	r0, r3
    3294:	4b03      	ldr	r3, [pc, #12]	; (32a4 <udi_cdc_data_sof_notify+0x1c>)
    3296:	447b      	add	r3, pc
    3298:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
    329a:	46c0      	nop			; (mov r8, r8)
    329c:	46bd      	mov	sp, r7
    329e:	bd80      	pop	{r7, pc}
    32a0:	1fffd27b 	.word	0x1fffd27b
    32a4:	00000357 	.word	0x00000357

000032a8 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
    32a8:	b580      	push	{r7, lr}
    32aa:	b082      	sub	sp, #8
    32ac:	af00      	add	r7, sp, #0
    32ae:	4a0b      	ldr	r2, [pc, #44]	; (32dc <udi_cdc_setup_to_port+0x34>)
    32b0:	447a      	add	r2, pc
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
    32b2:	4b0b      	ldr	r3, [pc, #44]	; (32e0 <udi_cdc_setup_to_port+0x38>)
    32b4:	58d3      	ldr	r3, [r2, r3]
    32b6:	889b      	ldrh	r3, [r3, #4]
    32b8:	001a      	movs	r2, r3
    32ba:	23ff      	movs	r3, #255	; 0xff
    32bc:	4013      	ands	r3, r2
    32be:	d103      	bne.n	32c8 <udi_cdc_setup_to_port+0x20>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
    32c0:	1dfb      	adds	r3, r7, #7
    32c2:	2200      	movs	r2, #0
    32c4:	701a      	strb	r2, [r3, #0]
    32c6:	e003      	b.n	32d0 <udi_cdc_setup_to_port+0x28>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
    32c8:	1dfb      	adds	r3, r7, #7
    32ca:	2200      	movs	r2, #0
    32cc:	701a      	strb	r2, [r3, #0]
		break;
    32ce:	46c0      	nop			; (mov r8, r8)
	}
	return port;
    32d0:	1dfb      	adds	r3, r7, #7
    32d2:	781b      	ldrb	r3, [r3, #0]
}
    32d4:	0018      	movs	r0, r3
    32d6:	46bd      	mov	sp, r7
    32d8:	b002      	add	sp, #8
    32da:	bd80      	pop	{r7, pc}
    32dc:	0000eb20 	.word	0x0000eb20
    32e0:	000001e0 	.word	0x000001e0

000032e4 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
    32e4:	b590      	push	{r4, r7, lr}
    32e6:	b083      	sub	sp, #12
    32e8:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    32ea:	1dfc      	adds	r4, r7, #7
    32ec:	4b04      	ldr	r3, [pc, #16]	; (3300 <udi_cdc_line_coding_received+0x1c>)
    32ee:	447b      	add	r3, pc
    32f0:	4798      	blx	r3
    32f2:	0003      	movs	r3, r0
    32f4:	7023      	strb	r3, [r4, #0]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
    32f6:	46c0      	nop			; (mov r8, r8)
    32f8:	46bd      	mov	sp, r7
    32fa:	b003      	add	sp, #12
    32fc:	bd90      	pop	{r4, r7, pc}
    32fe:	46c0      	nop			; (mov r8, r8)
    3300:	ffffffb7 	.word	0xffffffb7

00003304 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    3304:	b5b0      	push	{r4, r5, r7, lr}
    3306:	b088      	sub	sp, #32
    3308:	af02      	add	r7, sp, #8
    330a:	0002      	movs	r2, r0
    330c:	1dfb      	adds	r3, r7, #7
    330e:	701a      	strb	r2, [r3, #0]
    3310:	4c41      	ldr	r4, [pc, #260]	; (3418 <udi_cdc_rx_start+0x114>)
    3312:	447c      	add	r4, pc
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    3314:	1dfb      	adds	r3, r7, #7
    3316:	2200      	movs	r2, #0
    3318:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    331a:	4b40      	ldr	r3, [pc, #256]	; (341c <udi_cdc_rx_start+0x118>)
    331c:	447b      	add	r3, pc
    331e:	4798      	blx	r3
    3320:	0003      	movs	r3, r0
    3322:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    3324:	1dfb      	adds	r3, r7, #7
    3326:	781a      	ldrb	r2, [r3, #0]
    3328:	230f      	movs	r3, #15
    332a:	18fb      	adds	r3, r7, r3
    332c:	493c      	ldr	r1, [pc, #240]	; (3420 <udi_cdc_rx_start+0x11c>)
    332e:	4479      	add	r1, pc
    3330:	5c8a      	ldrb	r2, [r1, r2]
    3332:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    3334:	1dfb      	adds	r3, r7, #7
    3336:	781b      	ldrb	r3, [r3, #0]
    3338:	4a3a      	ldr	r2, [pc, #232]	; (3424 <udi_cdc_rx_start+0x120>)
    333a:	447a      	add	r2, pc
    333c:	5cd3      	ldrb	r3, [r2, r3]
    333e:	b2db      	uxtb	r3, r3
    3340:	2b00      	cmp	r3, #0
    3342:	d114      	bne.n	336e <udi_cdc_rx_start+0x6a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    3344:	1dfb      	adds	r3, r7, #7
    3346:	781a      	ldrb	r2, [r3, #0]
    3348:	4b37      	ldr	r3, [pc, #220]	; (3428 <udi_cdc_rx_start+0x124>)
    334a:	447b      	add	r3, pc
    334c:	0052      	lsls	r2, r2, #1
    334e:	5ad3      	ldrh	r3, [r2, r3]
    3350:	b29a      	uxth	r2, r3
    3352:	1dfb      	adds	r3, r7, #7
    3354:	7818      	ldrb	r0, [r3, #0]
    3356:	230f      	movs	r3, #15
    3358:	18fb      	adds	r3, r7, r3
    335a:	7819      	ldrb	r1, [r3, #0]
    335c:	4b33      	ldr	r3, [pc, #204]	; (342c <udi_cdc_rx_start+0x128>)
    335e:	447b      	add	r3, pc
    3360:	0040      	lsls	r0, r0, #1
    3362:	1841      	adds	r1, r0, r1
    3364:	0049      	lsls	r1, r1, #1
    3366:	5acb      	ldrh	r3, [r1, r3]
    3368:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
    336a:	429a      	cmp	r2, r3
    336c:	d206      	bcs.n	337c <udi_cdc_rx_start+0x78>
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
    336e:	693b      	ldr	r3, [r7, #16]
    3370:	0018      	movs	r0, r3
    3372:	4b2f      	ldr	r3, [pc, #188]	; (3430 <udi_cdc_rx_start+0x12c>)
    3374:	447b      	add	r3, pc
    3376:	4798      	blx	r3
		return false;
    3378:	2300      	movs	r3, #0
    337a:	e048      	b.n	340e <udi_cdc_rx_start+0x10a>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    337c:	1dfb      	adds	r3, r7, #7
    337e:	781a      	ldrb	r2, [r3, #0]
    3380:	4b2c      	ldr	r3, [pc, #176]	; (3434 <udi_cdc_rx_start+0x130>)
    3382:	447b      	add	r3, pc
    3384:	0052      	lsls	r2, r2, #1
    3386:	2100      	movs	r1, #0
    3388:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    338a:	1dfb      	adds	r3, r7, #7
    338c:	781b      	ldrb	r3, [r3, #0]
    338e:	220f      	movs	r2, #15
    3390:	18ba      	adds	r2, r7, r2
    3392:	7812      	ldrb	r2, [r2, #0]
    3394:	4251      	negs	r1, r2
    3396:	414a      	adcs	r2, r1
    3398:	b2d2      	uxtb	r2, r2
    339a:	0011      	movs	r1, r2
    339c:	4a26      	ldr	r2, [pc, #152]	; (3438 <udi_cdc_rx_start+0x134>)
    339e:	447a      	add	r2, pc
    33a0:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    33a2:	1dfb      	adds	r3, r7, #7
    33a4:	781b      	ldrb	r3, [r3, #0]
    33a6:	4a25      	ldr	r2, [pc, #148]	; (343c <udi_cdc_rx_start+0x138>)
    33a8:	447a      	add	r2, pc
    33aa:	2101      	movs	r1, #1
    33ac:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    33ae:	693b      	ldr	r3, [r7, #16]
    33b0:	0018      	movs	r0, r3
    33b2:	4b23      	ldr	r3, [pc, #140]	; (3440 <udi_cdc_rx_start+0x13c>)
    33b4:	447b      	add	r3, pc
    33b6:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
    33b8:	1dfb      	adds	r3, r7, #7
    33ba:	781b      	ldrb	r3, [r3, #0]
    33bc:	0018      	movs	r0, r3
    33be:	4b21      	ldr	r3, [pc, #132]	; (3444 <udi_cdc_rx_start+0x140>)
    33c0:	58e3      	ldr	r3, [r4, r3]
    33c2:	4798      	blx	r3
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
    33c4:	1dfb      	adds	r3, r7, #7
    33c6:	781b      	ldrb	r3, [r3, #0]
    33c8:	2b00      	cmp	r3, #0
    33ca:	d104      	bne.n	33d6 <udi_cdc_rx_start+0xd2>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
    33cc:	2317      	movs	r3, #23
    33ce:	18fb      	adds	r3, r7, r3
    33d0:	2202      	movs	r2, #2
    33d2:	701a      	strb	r2, [r3, #0]
    33d4:	e004      	b.n	33e0 <udi_cdc_rx_start+0xdc>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
    33d6:	2317      	movs	r3, #23
    33d8:	18fb      	adds	r3, r7, r3
    33da:	2202      	movs	r2, #2
    33dc:	701a      	strb	r2, [r3, #0]
		break;
    33de:	46c0      	nop			; (mov r8, r8)
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    33e0:	1dfb      	adds	r3, r7, #7
    33e2:	781a      	ldrb	r2, [r3, #0]
    33e4:	230f      	movs	r3, #15
    33e6:	18fb      	adds	r3, r7, r3
    33e8:	781b      	ldrb	r3, [r3, #0]
    33ea:	0052      	lsls	r2, r2, #1
    33ec:	18d3      	adds	r3, r2, r3
    33ee:	019b      	lsls	r3, r3, #6
    33f0:	4a15      	ldr	r2, [pc, #84]	; (3448 <udi_cdc_rx_start+0x144>)
    33f2:	447a      	add	r2, pc
    33f4:	189a      	adds	r2, r3, r2
	return udd_ep_run(ep,
    33f6:	2317      	movs	r3, #23
    33f8:	18fb      	adds	r3, r7, r3
    33fa:	7818      	ldrb	r0, [r3, #0]
    33fc:	4b13      	ldr	r3, [pc, #76]	; (344c <udi_cdc_rx_start+0x148>)
    33fe:	447b      	add	r3, pc
    3400:	9300      	str	r3, [sp, #0]
    3402:	2340      	movs	r3, #64	; 0x40
    3404:	2101      	movs	r1, #1
    3406:	4d12      	ldr	r5, [pc, #72]	; (3450 <udi_cdc_rx_start+0x14c>)
    3408:	5964      	ldr	r4, [r4, r5]
    340a:	47a0      	blx	r4
    340c:	0003      	movs	r3, r0
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    340e:	0018      	movs	r0, r3
    3410:	46bd      	mov	sp, r7
    3412:	b006      	add	sp, #24
    3414:	bdb0      	pop	{r4, r5, r7, pc}
    3416:	46c0      	nop			; (mov r8, r8)
    3418:	0000eabe 	.word	0x0000eabe
    341c:	fffffa6d 	.word	0xfffffa6d
    3420:	1fffd13e 	.word	0x1fffd13e
    3424:	1fffd13a 	.word	0x1fffd13a
    3428:	1fffd126 	.word	0x1fffd126
    342c:	1fffd10a 	.word	0x1fffd10a
    3430:	fffffa69 	.word	0xfffffa69
    3434:	1fffd0ee 	.word	0x1fffd0ee
    3438:	1fffd0ce 	.word	0x1fffd0ce
    343c:	1fffd0cc 	.word	0x1fffd0cc
    3440:	fffffa29 	.word	0xfffffa29
    3444:	000001ac 	.word	0x000001ac
    3448:	1fffcff6 	.word	0x1fffcff6
    344c:	00000053 	.word	0x00000053
    3450:	00000070 	.word	0x00000070

00003454 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    3454:	b5b0      	push	{r4, r5, r7, lr}
    3456:	b086      	sub	sp, #24
    3458:	af02      	add	r7, sp, #8
    345a:	6039      	str	r1, [r7, #0]
    345c:	0011      	movs	r1, r2
    345e:	1dfb      	adds	r3, r7, #7
    3460:	1c02      	adds	r2, r0, #0
    3462:	701a      	strb	r2, [r3, #0]
    3464:	1dbb      	adds	r3, r7, #6
    3466:	1c0a      	adds	r2, r1, #0
    3468:	701a      	strb	r2, [r3, #0]
    346a:	4d2e      	ldr	r5, [pc, #184]	; (3524 <udi_cdc_data_received+0xd0>)
    346c:	447d      	add	r5, pc
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
    346e:	1dbb      	adds	r3, r7, #6
    3470:	781b      	ldrb	r3, [r3, #0]
    3472:	2b02      	cmp	r3, #2
    3474:	d104      	bne.n	3480 <udi_cdc_data_received+0x2c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
    3476:	230f      	movs	r3, #15
    3478:	18fb      	adds	r3, r7, r3
    347a:	2200      	movs	r2, #0
    347c:	701a      	strb	r2, [r3, #0]
    347e:	e004      	b.n	348a <udi_cdc_data_received+0x36>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
    3480:	230f      	movs	r3, #15
    3482:	18fb      	adds	r3, r7, r3
    3484:	2200      	movs	r2, #0
    3486:	701a      	strb	r2, [r3, #0]
		break;
    3488:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    348a:	1dfb      	adds	r3, r7, #7
    348c:	781b      	ldrb	r3, [r3, #0]
    348e:	2b00      	cmp	r3, #0
    3490:	d144      	bne.n	351c <udi_cdc_data_received+0xc8>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    3492:	230f      	movs	r3, #15
    3494:	18fb      	adds	r3, r7, r3
    3496:	781b      	ldrb	r3, [r3, #0]
    3498:	4a23      	ldr	r2, [pc, #140]	; (3528 <udi_cdc_data_received+0xd4>)
    349a:	447a      	add	r2, pc
    349c:	5cd3      	ldrb	r3, [r2, r3]
    349e:	b2db      	uxtb	r3, r3
    34a0:	425a      	negs	r2, r3
    34a2:	4153      	adcs	r3, r2
    34a4:	b2da      	uxtb	r2, r3
    34a6:	230e      	movs	r3, #14
    34a8:	18fb      	adds	r3, r7, r3
    34aa:	701a      	strb	r2, [r3, #0]
	if (!n) {
    34ac:	683b      	ldr	r3, [r7, #0]
    34ae:	2b00      	cmp	r3, #0
    34b0:	d116      	bne.n	34e0 <udi_cdc_data_received+0x8c>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    34b2:	230f      	movs	r3, #15
    34b4:	18fb      	adds	r3, r7, r3
    34b6:	781a      	ldrb	r2, [r3, #0]
    34b8:	230e      	movs	r3, #14
    34ba:	18fb      	adds	r3, r7, r3
    34bc:	781b      	ldrb	r3, [r3, #0]
    34be:	0052      	lsls	r2, r2, #1
    34c0:	18d3      	adds	r3, r2, r3
    34c2:	019b      	lsls	r3, r3, #6
    34c4:	4a19      	ldr	r2, [pc, #100]	; (352c <udi_cdc_data_received+0xd8>)
    34c6:	447a      	add	r2, pc
    34c8:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
    34ca:	1dbb      	adds	r3, r7, #6
    34cc:	7818      	ldrb	r0, [r3, #0]
    34ce:	4b18      	ldr	r3, [pc, #96]	; (3530 <udi_cdc_data_received+0xdc>)
    34d0:	447b      	add	r3, pc
    34d2:	9300      	str	r3, [sp, #0]
    34d4:	2340      	movs	r3, #64	; 0x40
    34d6:	2101      	movs	r1, #1
    34d8:	4c16      	ldr	r4, [pc, #88]	; (3534 <udi_cdc_data_received+0xe0>)
    34da:	592c      	ldr	r4, [r5, r4]
    34dc:	47a0      	blx	r4
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    34de:	e01e      	b.n	351e <udi_cdc_data_received+0xca>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    34e0:	230f      	movs	r3, #15
    34e2:	18fb      	adds	r3, r7, r3
    34e4:	7819      	ldrb	r1, [r3, #0]
    34e6:	230e      	movs	r3, #14
    34e8:	18fb      	adds	r3, r7, r3
    34ea:	781a      	ldrb	r2, [r3, #0]
    34ec:	683b      	ldr	r3, [r7, #0]
    34ee:	b298      	uxth	r0, r3
    34f0:	4b11      	ldr	r3, [pc, #68]	; (3538 <udi_cdc_data_received+0xe4>)
    34f2:	447b      	add	r3, pc
    34f4:	0049      	lsls	r1, r1, #1
    34f6:	188a      	adds	r2, r1, r2
    34f8:	0052      	lsls	r2, r2, #1
    34fa:	1c01      	adds	r1, r0, #0
    34fc:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    34fe:	230f      	movs	r3, #15
    3500:	18fb      	adds	r3, r7, r3
    3502:	781b      	ldrb	r3, [r3, #0]
    3504:	4a0d      	ldr	r2, [pc, #52]	; (353c <udi_cdc_data_received+0xe8>)
    3506:	447a      	add	r2, pc
    3508:	2100      	movs	r1, #0
    350a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
    350c:	230f      	movs	r3, #15
    350e:	18fb      	adds	r3, r7, r3
    3510:	781b      	ldrb	r3, [r3, #0]
    3512:	0018      	movs	r0, r3
    3514:	4b0a      	ldr	r3, [pc, #40]	; (3540 <udi_cdc_data_received+0xec>)
    3516:	447b      	add	r3, pc
    3518:	4798      	blx	r3
    351a:	e000      	b.n	351e <udi_cdc_data_received+0xca>
		return;
    351c:	46c0      	nop			; (mov r8, r8)
}
    351e:	46bd      	mov	sp, r7
    3520:	b004      	add	sp, #16
    3522:	bdb0      	pop	{r4, r5, r7, pc}
    3524:	0000e964 	.word	0x0000e964
    3528:	1fffcfd2 	.word	0x1fffcfd2
    352c:	1fffcf22 	.word	0x1fffcf22
    3530:	ffffff81 	.word	0xffffff81
    3534:	00000070 	.word	0x00000070
    3538:	1fffcf76 	.word	0x1fffcf76
    353c:	1fffcf6e 	.word	0x1fffcf6e
    3540:	fffffdeb 	.word	0xfffffdeb

00003544 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    3544:	b580      	push	{r7, lr}
    3546:	b084      	sub	sp, #16
    3548:	af00      	add	r7, sp, #0
    354a:	6039      	str	r1, [r7, #0]
    354c:	0011      	movs	r1, r2
    354e:	1dfb      	adds	r3, r7, #7
    3550:	1c02      	adds	r2, r0, #0
    3552:	701a      	strb	r2, [r3, #0]
    3554:	1dbb      	adds	r3, r7, #6
    3556:	1c0a      	adds	r2, r1, #0
    3558:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
    355a:	1dbb      	adds	r3, r7, #6
    355c:	781b      	ldrb	r3, [r3, #0]
    355e:	2b81      	cmp	r3, #129	; 0x81
    3560:	d104      	bne.n	356c <udi_cdc_data_sent+0x28>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
    3562:	230f      	movs	r3, #15
    3564:	18fb      	adds	r3, r7, r3
    3566:	2200      	movs	r2, #0
    3568:	701a      	strb	r2, [r3, #0]
    356a:	e004      	b.n	3576 <udi_cdc_data_sent+0x32>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
    356c:	230f      	movs	r3, #15
    356e:	18fb      	adds	r3, r7, r3
    3570:	2200      	movs	r2, #0
    3572:	701a      	strb	r2, [r3, #0]
		break;
    3574:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    3576:	1dfb      	adds	r3, r7, #7
    3578:	781b      	ldrb	r3, [r3, #0]
    357a:	2b00      	cmp	r3, #0
    357c:	d12a      	bne.n	35d4 <udi_cdc_data_sent+0x90>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    357e:	230f      	movs	r3, #15
    3580:	18fb      	adds	r3, r7, r3
    3582:	781a      	ldrb	r2, [r3, #0]
    3584:	230f      	movs	r3, #15
    3586:	18fb      	adds	r3, r7, r3
    3588:	781b      	ldrb	r3, [r3, #0]
    358a:	4914      	ldr	r1, [pc, #80]	; (35dc <udi_cdc_data_sent+0x98>)
    358c:	4479      	add	r1, pc
    358e:	5ccb      	ldrb	r3, [r1, r3]
    3590:	b2db      	uxtb	r3, r3
    3592:	4259      	negs	r1, r3
    3594:	414b      	adcs	r3, r1
    3596:	b2db      	uxtb	r3, r3
    3598:	0019      	movs	r1, r3
    359a:	4b11      	ldr	r3, [pc, #68]	; (35e0 <udi_cdc_data_sent+0x9c>)
    359c:	447b      	add	r3, pc
    359e:	0052      	lsls	r2, r2, #1
    35a0:	1852      	adds	r2, r2, r1
    35a2:	0052      	lsls	r2, r2, #1
    35a4:	2100      	movs	r1, #0
    35a6:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    35a8:	230f      	movs	r3, #15
    35aa:	18fb      	adds	r3, r7, r3
    35ac:	781b      	ldrb	r3, [r3, #0]
    35ae:	4a0d      	ldr	r2, [pc, #52]	; (35e4 <udi_cdc_data_sent+0xa0>)
    35b0:	447a      	add	r2, pc
    35b2:	2100      	movs	r1, #0
    35b4:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
    35b6:	230f      	movs	r3, #15
    35b8:	18fb      	adds	r3, r7, r3
    35ba:	781b      	ldrb	r3, [r3, #0]
    35bc:	4a0a      	ldr	r2, [pc, #40]	; (35e8 <udi_cdc_data_sent+0xa4>)
    35be:	447a      	add	r2, pc
    35c0:	2100      	movs	r1, #0
    35c2:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    35c4:	230f      	movs	r3, #15
    35c6:	18fb      	adds	r3, r7, r3
    35c8:	781b      	ldrb	r3, [r3, #0]
    35ca:	0018      	movs	r0, r3
    35cc:	4b07      	ldr	r3, [pc, #28]	; (35ec <udi_cdc_data_sent+0xa8>)
    35ce:	447b      	add	r3, pc
    35d0:	4798      	blx	r3
    35d2:	e000      	b.n	35d6 <udi_cdc_data_sent+0x92>
		return;
    35d4:	46c0      	nop			; (mov r8, r8)
}
    35d6:	46bd      	mov	sp, r7
    35d8:	b004      	add	sp, #16
    35da:	bd80      	pop	{r7, pc}
    35dc:	1fffcf70 	.word	0x1fffcf70
    35e0:	1fffcf5c 	.word	0x1fffcf5c
    35e4:	1fffcf58 	.word	0x1fffcf58
    35e8:	1fffcf46 	.word	0x1fffcf46
    35ec:	0000001f 	.word	0x0000001f

000035f0 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
    35f0:	b5b0      	push	{r4, r5, r7, lr}
    35f2:	b088      	sub	sp, #32
    35f4:	af02      	add	r7, sp, #8
    35f6:	0002      	movs	r2, r0
    35f8:	1dfb      	adds	r3, r7, #7
    35fa:	701a      	strb	r2, [r3, #0]
    35fc:	4c89      	ldr	r4, [pc, #548]	; (3824 <udi_cdc_tx_send+0x234>)
    35fe:	447c      	add	r4, pc
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    3600:	1dfb      	adds	r3, r7, #7
    3602:	2200      	movs	r2, #0
    3604:	701a      	strb	r2, [r3, #0]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    3606:	1dfb      	adds	r3, r7, #7
    3608:	781b      	ldrb	r3, [r3, #0]
    360a:	4a87      	ldr	r2, [pc, #540]	; (3828 <udi_cdc_tx_send+0x238>)
    360c:	447a      	add	r2, pc
    360e:	5cd3      	ldrb	r3, [r2, r3]
    3610:	b2db      	uxtb	r3, r3
    3612:	2b00      	cmp	r3, #0
    3614:	d000      	beq.n	3618 <udi_cdc_tx_send+0x28>
    3616:	e0fe      	b.n	3816 <udi_cdc_tx_send+0x226>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    3618:	4b84      	ldr	r3, [pc, #528]	; (382c <udi_cdc_tx_send+0x23c>)
    361a:	58e3      	ldr	r3, [r4, r3]
    361c:	4798      	blx	r3
    361e:	1e03      	subs	r3, r0, #0
    3620:	d00c      	beq.n	363c <udi_cdc_tx_send+0x4c>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    3622:	1dfb      	adds	r3, r7, #7
    3624:	781a      	ldrb	r2, [r3, #0]
    3626:	4b82      	ldr	r3, [pc, #520]	; (3830 <udi_cdc_tx_send+0x240>)
    3628:	447b      	add	r3, pc
    362a:	0052      	lsls	r2, r2, #1
    362c:	5ad5      	ldrh	r5, [r2, r3]
    362e:	4b81      	ldr	r3, [pc, #516]	; (3834 <udi_cdc_tx_send+0x244>)
    3630:	58e3      	ldr	r3, [r4, r3]
    3632:	4798      	blx	r3
    3634:	0003      	movs	r3, r0
    3636:	429d      	cmp	r5, r3
    3638:	d10d      	bne.n	3656 <udi_cdc_tx_send+0x66>
			return; // Wait next SOF to send next data
    363a:	e0ef      	b.n	381c <udi_cdc_tx_send+0x22c>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    363c:	1dfb      	adds	r3, r7, #7
    363e:	781a      	ldrb	r2, [r3, #0]
    3640:	4b7d      	ldr	r3, [pc, #500]	; (3838 <udi_cdc_tx_send+0x248>)
    3642:	447b      	add	r3, pc
    3644:	0052      	lsls	r2, r2, #1
    3646:	5ad5      	ldrh	r5, [r2, r3]
    3648:	4b7c      	ldr	r3, [pc, #496]	; (383c <udi_cdc_tx_send+0x24c>)
    364a:	58e3      	ldr	r3, [r4, r3]
    364c:	4798      	blx	r3
    364e:	0003      	movs	r3, r0
    3650:	429d      	cmp	r5, r3
    3652:	d100      	bne.n	3656 <udi_cdc_tx_send+0x66>
    3654:	e0e1      	b.n	381a <udi_cdc_tx_send+0x22a>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    3656:	4b7a      	ldr	r3, [pc, #488]	; (3840 <udi_cdc_tx_send+0x250>)
    3658:	447b      	add	r3, pc
    365a:	4798      	blx	r3
    365c:	0003      	movs	r3, r0
    365e:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    3660:	1dfb      	adds	r3, r7, #7
    3662:	781a      	ldrb	r2, [r3, #0]
    3664:	2317      	movs	r3, #23
    3666:	18fb      	adds	r3, r7, r3
    3668:	4976      	ldr	r1, [pc, #472]	; (3844 <udi_cdc_tx_send+0x254>)
    366a:	4479      	add	r1, pc
    366c:	5c8a      	ldrb	r2, [r1, r2]
    366e:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    3670:	1dfb      	adds	r3, r7, #7
    3672:	7819      	ldrb	r1, [r3, #0]
    3674:	2317      	movs	r3, #23
    3676:	18fb      	adds	r3, r7, r3
    3678:	781a      	ldrb	r2, [r3, #0]
    367a:	4b73      	ldr	r3, [pc, #460]	; (3848 <udi_cdc_tx_send+0x258>)
    367c:	447b      	add	r3, pc
    367e:	0049      	lsls	r1, r1, #1
    3680:	188a      	adds	r2, r1, r2
    3682:	0052      	lsls	r2, r2, #1
    3684:	5ad3      	ldrh	r3, [r2, r3]
    3686:	2b00      	cmp	r3, #0
    3688:	d127      	bne.n	36da <udi_cdc_tx_send+0xea>
		sof_zlp_counter++;
    368a:	4b70      	ldr	r3, [pc, #448]	; (384c <udi_cdc_tx_send+0x25c>)
    368c:	447b      	add	r3, pc
    368e:	881b      	ldrh	r3, [r3, #0]
    3690:	3301      	adds	r3, #1
    3692:	b29a      	uxth	r2, r3
    3694:	4b6e      	ldr	r3, [pc, #440]	; (3850 <udi_cdc_tx_send+0x260>)
    3696:	447b      	add	r3, pc
    3698:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    369a:	4b64      	ldr	r3, [pc, #400]	; (382c <udi_cdc_tx_send+0x23c>)
    369c:	58e3      	ldr	r3, [r4, r3]
    369e:	4798      	blx	r3
    36a0:	0003      	movs	r3, r0
    36a2:	001a      	movs	r2, r3
    36a4:	2301      	movs	r3, #1
    36a6:	4053      	eors	r3, r2
    36a8:	b2db      	uxtb	r3, r3
    36aa:	2b00      	cmp	r3, #0
    36ac:	d004      	beq.n	36b8 <udi_cdc_tx_send+0xc8>
    36ae:	4b69      	ldr	r3, [pc, #420]	; (3854 <udi_cdc_tx_send+0x264>)
    36b0:	447b      	add	r3, pc
    36b2:	881b      	ldrh	r3, [r3, #0]
    36b4:	2b63      	cmp	r3, #99	; 0x63
    36b6:	d90a      	bls.n	36ce <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    36b8:	4b5c      	ldr	r3, [pc, #368]	; (382c <udi_cdc_tx_send+0x23c>)
    36ba:	58e3      	ldr	r3, [r4, r3]
    36bc:	4798      	blx	r3
    36be:	1e03      	subs	r3, r0, #0
    36c0:	d00b      	beq.n	36da <udi_cdc_tx_send+0xea>
    36c2:	4b65      	ldr	r3, [pc, #404]	; (3858 <udi_cdc_tx_send+0x268>)
    36c4:	447b      	add	r3, pc
    36c6:	881b      	ldrh	r3, [r3, #0]
    36c8:	4a64      	ldr	r2, [pc, #400]	; (385c <udi_cdc_tx_send+0x26c>)
    36ca:	4293      	cmp	r3, r2
    36cc:	d805      	bhi.n	36da <udi_cdc_tx_send+0xea>
			cpu_irq_restore(flags);
    36ce:	693b      	ldr	r3, [r7, #16]
    36d0:	0018      	movs	r0, r3
    36d2:	4b63      	ldr	r3, [pc, #396]	; (3860 <udi_cdc_tx_send+0x270>)
    36d4:	447b      	add	r3, pc
    36d6:	4798      	blx	r3
			return;
    36d8:	e0a0      	b.n	381c <udi_cdc_tx_send+0x22c>
		}
	}
	sof_zlp_counter = 0;
    36da:	4b62      	ldr	r3, [pc, #392]	; (3864 <udi_cdc_tx_send+0x274>)
    36dc:	447b      	add	r3, pc
    36de:	2200      	movs	r2, #0
    36e0:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    36e2:	1dfb      	adds	r3, r7, #7
    36e4:	781b      	ldrb	r3, [r3, #0]
    36e6:	4a60      	ldr	r2, [pc, #384]	; (3868 <udi_cdc_tx_send+0x278>)
    36e8:	447a      	add	r2, pc
    36ea:	5cd3      	ldrb	r3, [r2, r3]
    36ec:	b2db      	uxtb	r3, r3
    36ee:	2201      	movs	r2, #1
    36f0:	4053      	eors	r3, r2
    36f2:	b2db      	uxtb	r3, r3
    36f4:	2b00      	cmp	r3, #0
    36f6:	d00c      	beq.n	3712 <udi_cdc_tx_send+0x122>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    36f8:	1dfb      	adds	r3, r7, #7
    36fa:	781b      	ldrb	r3, [r3, #0]
    36fc:	2217      	movs	r2, #23
    36fe:	18ba      	adds	r2, r7, r2
    3700:	7812      	ldrb	r2, [r2, #0]
    3702:	4251      	negs	r1, r2
    3704:	414a      	adcs	r2, r1
    3706:	b2d2      	uxtb	r2, r2
    3708:	0011      	movs	r1, r2
    370a:	4a58      	ldr	r2, [pc, #352]	; (386c <udi_cdc_tx_send+0x27c>)
    370c:	447a      	add	r2, pc
    370e:	54d1      	strb	r1, [r2, r3]
    3710:	e008      	b.n	3724 <udi_cdc_tx_send+0x134>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    3712:	2317      	movs	r3, #23
    3714:	18fb      	adds	r3, r7, r3
    3716:	781b      	ldrb	r3, [r3, #0]
    3718:	425a      	negs	r2, r3
    371a:	4153      	adcs	r3, r2
    371c:	b2da      	uxtb	r2, r3
    371e:	2317      	movs	r3, #23
    3720:	18fb      	adds	r3, r7, r3
    3722:	701a      	strb	r2, [r3, #0]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    3724:	1dfb      	adds	r3, r7, #7
    3726:	781b      	ldrb	r3, [r3, #0]
    3728:	4a51      	ldr	r2, [pc, #324]	; (3870 <udi_cdc_tx_send+0x280>)
    372a:	447a      	add	r2, pc
    372c:	2101      	movs	r1, #1
    372e:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    3730:	693b      	ldr	r3, [r7, #16]
    3732:	0018      	movs	r0, r3
    3734:	4b4f      	ldr	r3, [pc, #316]	; (3874 <udi_cdc_tx_send+0x284>)
    3736:	447b      	add	r3, pc
    3738:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    373a:	1dfb      	adds	r3, r7, #7
    373c:	7819      	ldrb	r1, [r3, #0]
    373e:	2317      	movs	r3, #23
    3740:	18fb      	adds	r3, r7, r3
    3742:	781a      	ldrb	r2, [r3, #0]
    3744:	4b4c      	ldr	r3, [pc, #304]	; (3878 <udi_cdc_tx_send+0x288>)
    3746:	447b      	add	r3, pc
    3748:	0049      	lsls	r1, r1, #1
    374a:	188a      	adds	r2, r1, r2
    374c:	0052      	lsls	r2, r2, #1
    374e:	5ad2      	ldrh	r2, [r2, r3]
    3750:	230f      	movs	r3, #15
    3752:	18fb      	adds	r3, r7, r3
    3754:	3a40      	subs	r2, #64	; 0x40
    3756:	1e51      	subs	r1, r2, #1
    3758:	418a      	sbcs	r2, r1
    375a:	701a      	strb	r2, [r3, #0]
	if (b_short_packet) {
    375c:	230f      	movs	r3, #15
    375e:	18fb      	adds	r3, r7, r3
    3760:	781b      	ldrb	r3, [r3, #0]
    3762:	2b00      	cmp	r3, #0
    3764:	d01c      	beq.n	37a0 <udi_cdc_tx_send+0x1b0>
		if (udd_is_high_speed()) {
    3766:	4b31      	ldr	r3, [pc, #196]	; (382c <udi_cdc_tx_send+0x23c>)
    3768:	58e3      	ldr	r3, [r4, r3]
    376a:	4798      	blx	r3
    376c:	1e03      	subs	r3, r0, #0
    376e:	d00b      	beq.n	3788 <udi_cdc_tx_send+0x198>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    3770:	1dfb      	adds	r3, r7, #7
    3772:	781d      	ldrb	r5, [r3, #0]
    3774:	4b2f      	ldr	r3, [pc, #188]	; (3834 <udi_cdc_tx_send+0x244>)
    3776:	58e3      	ldr	r3, [r4, r3]
    3778:	4798      	blx	r3
    377a:	0003      	movs	r3, r0
    377c:	0019      	movs	r1, r3
    377e:	4b3f      	ldr	r3, [pc, #252]	; (387c <udi_cdc_tx_send+0x28c>)
    3780:	447b      	add	r3, pc
    3782:	006a      	lsls	r2, r5, #1
    3784:	52d1      	strh	r1, [r2, r3]
    3786:	e012      	b.n	37ae <udi_cdc_tx_send+0x1be>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    3788:	1dfb      	adds	r3, r7, #7
    378a:	781d      	ldrb	r5, [r3, #0]
    378c:	4b2b      	ldr	r3, [pc, #172]	; (383c <udi_cdc_tx_send+0x24c>)
    378e:	58e3      	ldr	r3, [r4, r3]
    3790:	4798      	blx	r3
    3792:	0003      	movs	r3, r0
    3794:	0019      	movs	r1, r3
    3796:	4b3a      	ldr	r3, [pc, #232]	; (3880 <udi_cdc_tx_send+0x290>)
    3798:	447b      	add	r3, pc
    379a:	006a      	lsls	r2, r5, #1
    379c:	52d1      	strh	r1, [r2, r3]
    379e:	e006      	b.n	37ae <udi_cdc_tx_send+0x1be>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    37a0:	1dfb      	adds	r3, r7, #7
    37a2:	781a      	ldrb	r2, [r3, #0]
    37a4:	4b37      	ldr	r3, [pc, #220]	; (3884 <udi_cdc_tx_send+0x294>)
    37a6:	447b      	add	r3, pc
    37a8:	0052      	lsls	r2, r2, #1
    37aa:	2100      	movs	r1, #0
    37ac:	52d1      	strh	r1, [r2, r3]
	}

	// Send the buffer with enable of short packet
	switch (port) {
    37ae:	1dfb      	adds	r3, r7, #7
    37b0:	781b      	ldrb	r3, [r3, #0]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d104      	bne.n	37c0 <udi_cdc_tx_send+0x1d0>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
    37b6:	2316      	movs	r3, #22
    37b8:	18fb      	adds	r3, r7, r3
    37ba:	2281      	movs	r2, #129	; 0x81
    37bc:	701a      	strb	r2, [r3, #0]
    37be:	e004      	b.n	37ca <udi_cdc_tx_send+0x1da>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
    37c0:	2316      	movs	r3, #22
    37c2:	18fb      	adds	r3, r7, r3
    37c4:	2281      	movs	r2, #129	; 0x81
    37c6:	701a      	strb	r2, [r3, #0]
		break;
    37c8:	46c0      	nop			; (mov r8, r8)
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    37ca:	1dfb      	adds	r3, r7, #7
    37cc:	781a      	ldrb	r2, [r3, #0]
    37ce:	2317      	movs	r3, #23
    37d0:	18fb      	adds	r3, r7, r3
    37d2:	781b      	ldrb	r3, [r3, #0]
    37d4:	0052      	lsls	r2, r2, #1
    37d6:	18d3      	adds	r3, r2, r3
    37d8:	019b      	lsls	r3, r3, #6
    37da:	4a2b      	ldr	r2, [pc, #172]	; (3888 <udi_cdc_tx_send+0x298>)
    37dc:	447a      	add	r2, pc
    37de:	189d      	adds	r5, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    37e0:	1dfb      	adds	r3, r7, #7
    37e2:	7819      	ldrb	r1, [r3, #0]
    37e4:	2317      	movs	r3, #23
    37e6:	18fb      	adds	r3, r7, r3
    37e8:	781a      	ldrb	r2, [r3, #0]
    37ea:	4b28      	ldr	r3, [pc, #160]	; (388c <udi_cdc_tx_send+0x29c>)
    37ec:	447b      	add	r3, pc
    37ee:	0049      	lsls	r1, r1, #1
    37f0:	188a      	adds	r2, r1, r2
    37f2:	0052      	lsls	r2, r2, #1
    37f4:	5ad3      	ldrh	r3, [r2, r3]
	udd_ep_run( ep,
    37f6:	001a      	movs	r2, r3
    37f8:	230f      	movs	r3, #15
    37fa:	18fb      	adds	r3, r7, r3
    37fc:	7819      	ldrb	r1, [r3, #0]
    37fe:	2316      	movs	r3, #22
    3800:	18fb      	adds	r3, r7, r3
    3802:	7818      	ldrb	r0, [r3, #0]
    3804:	4b22      	ldr	r3, [pc, #136]	; (3890 <udi_cdc_tx_send+0x2a0>)
    3806:	447b      	add	r3, pc
    3808:	9300      	str	r3, [sp, #0]
    380a:	0013      	movs	r3, r2
    380c:	002a      	movs	r2, r5
    380e:	4d21      	ldr	r5, [pc, #132]	; (3894 <udi_cdc_tx_send+0x2a4>)
    3810:	5964      	ldr	r4, [r4, r5]
    3812:	47a0      	blx	r4
    3814:	e002      	b.n	381c <udi_cdc_tx_send+0x22c>
		return; // Already on going or wait next SOF to send next data
    3816:	46c0      	nop			; (mov r8, r8)
    3818:	e000      	b.n	381c <udi_cdc_tx_send+0x22c>
			return; // Wait next SOF to send next data
    381a:	46c0      	nop			; (mov r8, r8)
			udi_cdc_data_sent);
}
    381c:	46bd      	mov	sp, r7
    381e:	b006      	add	sp, #24
    3820:	bdb0      	pop	{r4, r5, r7, pc}
    3822:	46c0      	nop			; (mov r8, r8)
    3824:	0000e7d2 	.word	0x0000e7d2
    3828:	1fffcef8 	.word	0x1fffcef8
    382c:	00000190 	.word	0x00000190
    3830:	1fffced8 	.word	0x1fffced8
    3834:	00000040 	.word	0x00000040
    3838:	1fffcebe 	.word	0x1fffcebe
    383c:	000000cc 	.word	0x000000cc
    3840:	fffff731 	.word	0xfffff731
    3844:	1fffce92 	.word	0x1fffce92
    3848:	1fffce7c 	.word	0x1fffce7c
    384c:	1fffce7e 	.word	0x1fffce7e
    3850:	1fffce74 	.word	0x1fffce74
    3854:	1fffce5a 	.word	0x1fffce5a
    3858:	1fffce46 	.word	0x1fffce46
    385c:	0000031f 	.word	0x0000031f
    3860:	fffff709 	.word	0xfffff709
    3864:	1fffce2e 	.word	0x1fffce2e
    3868:	1fffce20 	.word	0x1fffce20
    386c:	1fffcdf0 	.word	0x1fffcdf0
    3870:	1fffcdda 	.word	0x1fffcdda
    3874:	fffff6a7 	.word	0xfffff6a7
    3878:	1fffcdb2 	.word	0x1fffcdb2
    387c:	1fffcd80 	.word	0x1fffcd80
    3880:	1fffcd68 	.word	0x1fffcd68
    3884:	1fffcd5a 	.word	0x1fffcd5a
    3888:	1fffcc9c 	.word	0x1fffcc9c
    388c:	1fffcd0c 	.word	0x1fffcd0c
    3890:	fffffd3b 	.word	0xfffffd3b
    3894:	00000070 	.word	0x00000070

00003898 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    3898:	b580      	push	{r7, lr}
    389a:	b086      	sub	sp, #24
    389c:	af00      	add	r7, sp, #0
    389e:	0002      	movs	r2, r0
    38a0:	1dfb      	adds	r3, r7, #7
    38a2:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    38a4:	1dfb      	adds	r3, r7, #7
    38a6:	2200      	movs	r2, #0
    38a8:	701a      	strb	r2, [r3, #0]
#endif
	flags = cpu_irq_save();
    38aa:	4b17      	ldr	r3, [pc, #92]	; (3908 <udi_cdc_multi_get_nb_received_data+0x70>)
    38ac:	447b      	add	r3, pc
    38ae:	4798      	blx	r3
    38b0:	0003      	movs	r3, r0
    38b2:	617b      	str	r3, [r7, #20]
	pos = udi_cdc_rx_pos[port];
    38b4:	1dfb      	adds	r3, r7, #7
    38b6:	7819      	ldrb	r1, [r3, #0]
    38b8:	2312      	movs	r3, #18
    38ba:	18fb      	adds	r3, r7, r3
    38bc:	4a13      	ldr	r2, [pc, #76]	; (390c <udi_cdc_multi_get_nb_received_data+0x74>)
    38be:	447a      	add	r2, pc
    38c0:	0049      	lsls	r1, r1, #1
    38c2:	5a8a      	ldrh	r2, [r1, r2]
    38c4:	801a      	strh	r2, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    38c6:	1dfb      	adds	r3, r7, #7
    38c8:	781a      	ldrb	r2, [r3, #0]
    38ca:	1dfb      	adds	r3, r7, #7
    38cc:	781b      	ldrb	r3, [r3, #0]
    38ce:	4910      	ldr	r1, [pc, #64]	; (3910 <udi_cdc_multi_get_nb_received_data+0x78>)
    38d0:	4479      	add	r1, pc
    38d2:	5ccb      	ldrb	r3, [r1, r3]
    38d4:	b2db      	uxtb	r3, r3
    38d6:	0019      	movs	r1, r3
    38d8:	4b0e      	ldr	r3, [pc, #56]	; (3914 <udi_cdc_multi_get_nb_received_data+0x7c>)
    38da:	447b      	add	r3, pc
    38dc:	0052      	lsls	r2, r2, #1
    38de:	1852      	adds	r2, r2, r1
    38e0:	0052      	lsls	r2, r2, #1
    38e2:	5ad3      	ldrh	r3, [r2, r3]
    38e4:	b29b      	uxth	r3, r3
    38e6:	001a      	movs	r2, r3
    38e8:	2312      	movs	r3, #18
    38ea:	18fb      	adds	r3, r7, r3
    38ec:	881b      	ldrh	r3, [r3, #0]
    38ee:	1ad3      	subs	r3, r2, r3
    38f0:	60fb      	str	r3, [r7, #12]
	cpu_irq_restore(flags);
    38f2:	697b      	ldr	r3, [r7, #20]
    38f4:	0018      	movs	r0, r3
    38f6:	4b08      	ldr	r3, [pc, #32]	; (3918 <udi_cdc_multi_get_nb_received_data+0x80>)
    38f8:	447b      	add	r3, pc
    38fa:	4798      	blx	r3
	return nb_received;
    38fc:	68fb      	ldr	r3, [r7, #12]
}
    38fe:	0018      	movs	r0, r3
    3900:	46bd      	mov	sp, r7
    3902:	b006      	add	sp, #24
    3904:	bd80      	pop	{r7, pc}
    3906:	46c0      	nop			; (mov r8, r8)
    3908:	fffff4dd 	.word	0xfffff4dd
    390c:	1fffcbb2 	.word	0x1fffcbb2
    3910:	1fffcb9c 	.word	0x1fffcb9c
    3914:	1fffcb8e 	.word	0x1fffcb8e
    3918:	fffff4e5 	.word	0xfffff4e5

0000391c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    391c:	b580      	push	{r7, lr}
    391e:	b082      	sub	sp, #8
    3920:	af00      	add	r7, sp, #0
    3922:	0002      	movs	r2, r0
    3924:	1dfb      	adds	r3, r7, #7
    3926:	701a      	strb	r2, [r3, #0]
    3928:	4a07      	ldr	r2, [pc, #28]	; (3948 <udi_cdc_multi_is_rx_ready+0x2c>)
    392a:	447a      	add	r2, pc
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    392c:	1dfb      	adds	r3, r7, #7
    392e:	781b      	ldrb	r3, [r3, #0]
    3930:	0018      	movs	r0, r3
    3932:	4b06      	ldr	r3, [pc, #24]	; (394c <udi_cdc_multi_is_rx_ready+0x30>)
    3934:	58d3      	ldr	r3, [r2, r3]
    3936:	4798      	blx	r3
    3938:	0003      	movs	r3, r0
    393a:	1e5a      	subs	r2, r3, #1
    393c:	4193      	sbcs	r3, r2
    393e:	b2db      	uxtb	r3, r3
}
    3940:	0018      	movs	r0, r3
    3942:	46bd      	mov	sp, r7
    3944:	b002      	add	sp, #8
    3946:	bd80      	pop	{r7, pc}
    3948:	0000e4a6 	.word	0x0000e4a6
    394c:	00000028 	.word	0x00000028

00003950 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
    3950:	b580      	push	{r7, lr}
    3952:	b086      	sub	sp, #24
    3954:	af00      	add	r7, sp, #0
    3956:	0002      	movs	r2, r0
    3958:	1dfb      	adds	r3, r7, #7
    395a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	int rx_data = 0;
    395c:	2300      	movs	r3, #0
    395e:	617b      	str	r3, [r7, #20]
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    3960:	1dfb      	adds	r3, r7, #7
    3962:	2200      	movs	r2, #0
    3964:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    3966:	1dfb      	adds	r3, r7, #7
    3968:	781a      	ldrb	r2, [r3, #0]
    396a:	4945      	ldr	r1, [pc, #276]	; (3a80 <udi_cdc_multi_getc+0x130>)
    396c:	4479      	add	r1, pc
    396e:	0013      	movs	r3, r2
    3970:	00db      	lsls	r3, r3, #3
    3972:	1a9b      	subs	r3, r3, r2
    3974:	18cb      	adds	r3, r1, r3
    3976:	3306      	adds	r3, #6
    3978:	781a      	ldrb	r2, [r3, #0]
    397a:	2313      	movs	r3, #19
    397c:	18fb      	adds	r3, r7, r3
    397e:	3a09      	subs	r2, #9
    3980:	4251      	negs	r1, r2
    3982:	414a      	adcs	r2, r1
    3984:	701a      	strb	r2, [r3, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    3986:	4b3f      	ldr	r3, [pc, #252]	; (3a84 <udi_cdc_multi_getc+0x134>)
    3988:	447b      	add	r3, pc
    398a:	4798      	blx	r3
    398c:	0003      	movs	r3, r0
    398e:	60fb      	str	r3, [r7, #12]
	pos = udi_cdc_rx_pos[port];
    3990:	1dfb      	adds	r3, r7, #7
    3992:	7819      	ldrb	r1, [r3, #0]
    3994:	230a      	movs	r3, #10
    3996:	18fb      	adds	r3, r7, r3
    3998:	4a3b      	ldr	r2, [pc, #236]	; (3a88 <udi_cdc_multi_getc+0x138>)
    399a:	447a      	add	r2, pc
    399c:	0049      	lsls	r1, r1, #1
    399e:	5a8a      	ldrh	r2, [r1, r2]
    39a0:	801a      	strh	r2, [r3, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    39a2:	1dfb      	adds	r3, r7, #7
    39a4:	781a      	ldrb	r2, [r3, #0]
    39a6:	2309      	movs	r3, #9
    39a8:	18fb      	adds	r3, r7, r3
    39aa:	4938      	ldr	r1, [pc, #224]	; (3a8c <udi_cdc_multi_getc+0x13c>)
    39ac:	4479      	add	r1, pc
    39ae:	5c8a      	ldrb	r2, [r1, r2]
    39b0:	701a      	strb	r2, [r3, #0]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    39b2:	1dfb      	adds	r3, r7, #7
    39b4:	7819      	ldrb	r1, [r3, #0]
    39b6:	2309      	movs	r3, #9
    39b8:	18fb      	adds	r3, r7, r3
    39ba:	781a      	ldrb	r2, [r3, #0]
    39bc:	4b34      	ldr	r3, [pc, #208]	; (3a90 <udi_cdc_multi_getc+0x140>)
    39be:	447b      	add	r3, pc
    39c0:	0049      	lsls	r1, r1, #1
    39c2:	188a      	adds	r2, r1, r2
    39c4:	0052      	lsls	r2, r2, #1
    39c6:	5ad3      	ldrh	r3, [r2, r3]
    39c8:	b299      	uxth	r1, r3
    39ca:	2308      	movs	r3, #8
    39cc:	18fa      	adds	r2, r7, r3
    39ce:	230a      	movs	r3, #10
    39d0:	18fb      	adds	r3, r7, r3
    39d2:	8818      	ldrh	r0, [r3, #0]
    39d4:	2300      	movs	r3, #0
    39d6:	4288      	cmp	r0, r1
    39d8:	415b      	adcs	r3, r3
    39da:	7013      	strb	r3, [r2, #0]
	cpu_irq_restore(flags);
    39dc:	68fb      	ldr	r3, [r7, #12]
    39de:	0018      	movs	r0, r3
    39e0:	4b2c      	ldr	r3, [pc, #176]	; (3a94 <udi_cdc_multi_getc+0x144>)
    39e2:	447b      	add	r3, pc
    39e4:	4798      	blx	r3
	while (again) {
    39e6:	2308      	movs	r3, #8
    39e8:	18fb      	adds	r3, r7, r3
    39ea:	781b      	ldrb	r3, [r3, #0]
    39ec:	2b00      	cmp	r3, #0
    39ee:	d011      	beq.n	3a14 <udi_cdc_multi_getc+0xc4>
		if (!udi_cdc_data_running) {
    39f0:	4b29      	ldr	r3, [pc, #164]	; (3a98 <udi_cdc_multi_getc+0x148>)
    39f2:	447b      	add	r3, pc
    39f4:	781b      	ldrb	r3, [r3, #0]
    39f6:	b2db      	uxtb	r3, r3
    39f8:	2201      	movs	r2, #1
    39fa:	4053      	eors	r3, r2
    39fc:	b2db      	uxtb	r3, r3
    39fe:	2b00      	cmp	r3, #0
    3a00:	d001      	beq.n	3a06 <udi_cdc_multi_getc+0xb6>
			return 0;
    3a02:	2300      	movs	r3, #0
    3a04:	e038      	b.n	3a78 <udi_cdc_multi_getc+0x128>
    3a06:	2313      	movs	r3, #19
    3a08:	18fb      	adds	r3, r7, r3
    3a0a:	2213      	movs	r2, #19
    3a0c:	18ba      	adds	r2, r7, r2
    3a0e:	7812      	ldrb	r2, [r2, #0]
    3a10:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_getc_process_one_byte;
    3a12:	e7b8      	b.n	3986 <udi_cdc_multi_getc+0x36>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    3a14:	1dfb      	adds	r3, r7, #7
    3a16:	7818      	ldrb	r0, [r3, #0]
    3a18:	2309      	movs	r3, #9
    3a1a:	18fb      	adds	r3, r7, r3
    3a1c:	781a      	ldrb	r2, [r3, #0]
    3a1e:	230a      	movs	r3, #10
    3a20:	18fb      	adds	r3, r7, r3
    3a22:	881b      	ldrh	r3, [r3, #0]
    3a24:	491d      	ldr	r1, [pc, #116]	; (3a9c <udi_cdc_multi_getc+0x14c>)
    3a26:	4479      	add	r1, pc
    3a28:	0040      	lsls	r0, r0, #1
    3a2a:	1882      	adds	r2, r0, r2
    3a2c:	0192      	lsls	r2, r2, #6
    3a2e:	188a      	adds	r2, r1, r2
    3a30:	5cd3      	ldrb	r3, [r2, r3]
    3a32:	001a      	movs	r2, r3
    3a34:	697b      	ldr	r3, [r7, #20]
    3a36:	4313      	orrs	r3, r2
    3a38:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
    3a3a:	1dfb      	adds	r3, r7, #7
    3a3c:	781a      	ldrb	r2, [r3, #0]
    3a3e:	230a      	movs	r3, #10
    3a40:	18fb      	adds	r3, r7, r3
    3a42:	881b      	ldrh	r3, [r3, #0]
    3a44:	3301      	adds	r3, #1
    3a46:	b299      	uxth	r1, r3
    3a48:	4b15      	ldr	r3, [pc, #84]	; (3aa0 <udi_cdc_multi_getc+0x150>)
    3a4a:	447b      	add	r3, pc
    3a4c:	0052      	lsls	r2, r2, #1
    3a4e:	52d1      	strh	r1, [r2, r3]

	udi_cdc_rx_start(port);
    3a50:	1dfb      	adds	r3, r7, #7
    3a52:	781b      	ldrb	r3, [r3, #0]
    3a54:	0018      	movs	r0, r3
    3a56:	4b13      	ldr	r3, [pc, #76]	; (3aa4 <udi_cdc_multi_getc+0x154>)
    3a58:	447b      	add	r3, pc
    3a5a:	4798      	blx	r3

	if (b_databit_9) {
    3a5c:	2313      	movs	r3, #19
    3a5e:	18fb      	adds	r3, r7, r3
    3a60:	781b      	ldrb	r3, [r3, #0]
    3a62:	2b00      	cmp	r3, #0
    3a64:	d007      	beq.n	3a76 <udi_cdc_multi_getc+0x126>
		// Receive MSB
		b_databit_9 = false;
    3a66:	2313      	movs	r3, #19
    3a68:	18fb      	adds	r3, r7, r3
    3a6a:	2200      	movs	r2, #0
    3a6c:	701a      	strb	r2, [r3, #0]
		rx_data = rx_data << 8;
    3a6e:	697b      	ldr	r3, [r7, #20]
    3a70:	021b      	lsls	r3, r3, #8
    3a72:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
    3a74:	e787      	b.n	3986 <udi_cdc_multi_getc+0x36>
	}
	return rx_data;
    3a76:	697b      	ldr	r3, [r7, #20]
}
    3a78:	0018      	movs	r0, r3
    3a7a:	46bd      	mov	sp, r7
    3a7c:	b006      	add	sp, #24
    3a7e:	bd80      	pop	{r7, pc}
    3a80:	1fffca60 	.word	0x1fffca60
    3a84:	fffff401 	.word	0xfffff401
    3a88:	1fffcad6 	.word	0x1fffcad6
    3a8c:	1fffcac0 	.word	0x1fffcac0
    3a90:	1fffcaaa 	.word	0x1fffcaaa
    3a94:	fffff3fb 	.word	0xfffff3fb
    3a98:	1fffc9f2 	.word	0x1fffc9f2
    3a9c:	1fffc9c2 	.word	0x1fffc9c2
    3aa0:	1fffca26 	.word	0x1fffca26
    3aa4:	fffff8a9 	.word	0xfffff8a9

00003aa8 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    3aa8:	b580      	push	{r7, lr}
    3aaa:	af00      	add	r7, sp, #0
    3aac:	4a04      	ldr	r2, [pc, #16]	; (3ac0 <udi_cdc_getc+0x18>)
    3aae:	447a      	add	r2, pc
	return udi_cdc_multi_getc(0);
    3ab0:	2000      	movs	r0, #0
    3ab2:	4b04      	ldr	r3, [pc, #16]	; (3ac4 <udi_cdc_getc+0x1c>)
    3ab4:	58d3      	ldr	r3, [r2, r3]
    3ab6:	4798      	blx	r3
    3ab8:	0003      	movs	r3, r0
}
    3aba:	0018      	movs	r0, r3
    3abc:	46bd      	mov	sp, r7
    3abe:	bd80      	pop	{r7, pc}
    3ac0:	0000e322 	.word	0x0000e322
    3ac4:	000001f4 	.word	0x000001f4

00003ac8 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	b086      	sub	sp, #24
    3acc:	af00      	add	r7, sp, #0
    3ace:	0002      	movs	r2, r0
    3ad0:	1dfb      	adds	r3, r7, #7
    3ad2:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    3ad4:	1dfb      	adds	r3, r7, #7
    3ad6:	2200      	movs	r2, #0
    3ad8:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    3ada:	4b2a      	ldr	r3, [pc, #168]	; (3b84 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
    3adc:	447b      	add	r3, pc
    3ade:	4798      	blx	r3
    3ae0:	0003      	movs	r3, r0
    3ae2:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    3ae4:	1dfb      	adds	r3, r7, #7
    3ae6:	781a      	ldrb	r2, [r3, #0]
    3ae8:	230f      	movs	r3, #15
    3aea:	18fb      	adds	r3, r7, r3
    3aec:	4926      	ldr	r1, [pc, #152]	; (3b88 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
    3aee:	4479      	add	r1, pc
    3af0:	5c8a      	ldrb	r2, [r1, r2]
    3af2:	701a      	strb	r2, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    3af4:	1dfb      	adds	r3, r7, #7
    3af6:	7819      	ldrb	r1, [r3, #0]
    3af8:	230f      	movs	r3, #15
    3afa:	18fb      	adds	r3, r7, r3
    3afc:	781a      	ldrb	r2, [r3, #0]
    3afe:	4b23      	ldr	r3, [pc, #140]	; (3b8c <udi_cdc_multi_get_free_tx_buffer+0xc4>)
    3b00:	447b      	add	r3, pc
    3b02:	0049      	lsls	r1, r1, #1
    3b04:	188a      	adds	r2, r1, r2
    3b06:	0052      	lsls	r2, r2, #1
    3b08:	5ad3      	ldrh	r3, [r2, r3]
    3b0a:	617b      	str	r3, [r7, #20]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    3b0c:	697b      	ldr	r3, [r7, #20]
    3b0e:	2b40      	cmp	r3, #64	; 0x40
    3b10:	d129      	bne.n	3b66 <udi_cdc_multi_get_free_tx_buffer+0x9e>
		if ((!udi_cdc_tx_trans_ongoing[port])
    3b12:	1dfb      	adds	r3, r7, #7
    3b14:	781b      	ldrb	r3, [r3, #0]
    3b16:	4a1e      	ldr	r2, [pc, #120]	; (3b90 <udi_cdc_multi_get_free_tx_buffer+0xc8>)
    3b18:	447a      	add	r2, pc
    3b1a:	5cd3      	ldrb	r3, [r2, r3]
    3b1c:	b2db      	uxtb	r3, r3
    3b1e:	2201      	movs	r2, #1
    3b20:	4053      	eors	r3, r2
    3b22:	b2db      	uxtb	r3, r3
    3b24:	2b00      	cmp	r3, #0
    3b26:	d01e      	beq.n	3b66 <udi_cdc_multi_get_free_tx_buffer+0x9e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    3b28:	1dfb      	adds	r3, r7, #7
    3b2a:	781b      	ldrb	r3, [r3, #0]
    3b2c:	4a19      	ldr	r2, [pc, #100]	; (3b94 <udi_cdc_multi_get_free_tx_buffer+0xcc>)
    3b2e:	447a      	add	r2, pc
    3b30:	5cd3      	ldrb	r3, [r2, r3]
    3b32:	b2db      	uxtb	r3, r3
    3b34:	2201      	movs	r2, #1
    3b36:	4053      	eors	r3, r2
    3b38:	b2db      	uxtb	r3, r3
    3b3a:	2b00      	cmp	r3, #0
    3b3c:	d013      	beq.n	3b66 <udi_cdc_multi_get_free_tx_buffer+0x9e>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    3b3e:	1dfb      	adds	r3, r7, #7
    3b40:	781b      	ldrb	r3, [r3, #0]
    3b42:	4a15      	ldr	r2, [pc, #84]	; (3b98 <udi_cdc_multi_get_free_tx_buffer+0xd0>)
    3b44:	447a      	add	r2, pc
    3b46:	2101      	movs	r1, #1
    3b48:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    3b4a:	1dfb      	adds	r3, r7, #7
    3b4c:	781b      	ldrb	r3, [r3, #0]
    3b4e:	220f      	movs	r2, #15
    3b50:	18ba      	adds	r2, r7, r2
    3b52:	7812      	ldrb	r2, [r2, #0]
    3b54:	4251      	negs	r1, r2
    3b56:	414a      	adcs	r2, r1
    3b58:	b2d2      	uxtb	r2, r2
    3b5a:	0011      	movs	r1, r2
    3b5c:	4a0f      	ldr	r2, [pc, #60]	; (3b9c <udi_cdc_multi_get_free_tx_buffer+0xd4>)
    3b5e:	447a      	add	r2, pc
    3b60:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
    3b62:	2300      	movs	r3, #0
    3b64:	617b      	str	r3, [r7, #20]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    3b66:	697b      	ldr	r3, [r7, #20]
    3b68:	2240      	movs	r2, #64	; 0x40
    3b6a:	1ad3      	subs	r3, r2, r3
    3b6c:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    3b6e:	693b      	ldr	r3, [r7, #16]
    3b70:	0018      	movs	r0, r3
    3b72:	4b0b      	ldr	r3, [pc, #44]	; (3ba0 <udi_cdc_multi_get_free_tx_buffer+0xd8>)
    3b74:	447b      	add	r3, pc
    3b76:	4798      	blx	r3
	return retval;
    3b78:	68bb      	ldr	r3, [r7, #8]
}
    3b7a:	0018      	movs	r0, r3
    3b7c:	46bd      	mov	sp, r7
    3b7e:	b006      	add	sp, #24
    3b80:	bd80      	pop	{r7, pc}
    3b82:	46c0      	nop			; (mov r8, r8)
    3b84:	fffff2ad 	.word	0xfffff2ad
    3b88:	1fffca0e 	.word	0x1fffca0e
    3b8c:	1fffc9f8 	.word	0x1fffc9f8
    3b90:	1fffc9ec 	.word	0x1fffc9ec
    3b94:	1fffc9da 	.word	0x1fffc9da
    3b98:	1fffc9c4 	.word	0x1fffc9c4
    3b9c:	1fffc99e 	.word	0x1fffc99e
    3ba0:	fffff269 	.word	0xfffff269

00003ba4 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    3ba4:	b580      	push	{r7, lr}
    3ba6:	b082      	sub	sp, #8
    3ba8:	af00      	add	r7, sp, #0
    3baa:	0002      	movs	r2, r0
    3bac:	1dfb      	adds	r3, r7, #7
    3bae:	701a      	strb	r2, [r3, #0]
    3bb0:	4a07      	ldr	r2, [pc, #28]	; (3bd0 <udi_cdc_multi_is_tx_ready+0x2c>)
    3bb2:	447a      	add	r2, pc
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    3bb4:	1dfb      	adds	r3, r7, #7
    3bb6:	781b      	ldrb	r3, [r3, #0]
    3bb8:	0018      	movs	r0, r3
    3bba:	4b06      	ldr	r3, [pc, #24]	; (3bd4 <udi_cdc_multi_is_tx_ready+0x30>)
    3bbc:	58d3      	ldr	r3, [r2, r3]
    3bbe:	4798      	blx	r3
    3bc0:	0003      	movs	r3, r0
    3bc2:	1e5a      	subs	r2, r3, #1
    3bc4:	4193      	sbcs	r3, r2
    3bc6:	b2db      	uxtb	r3, r3
}
    3bc8:	0018      	movs	r0, r3
    3bca:	46bd      	mov	sp, r7
    3bcc:	b002      	add	sp, #8
    3bce:	bd80      	pop	{r7, pc}
    3bd0:	0000e21e 	.word	0x0000e21e
    3bd4:	000001bc 	.word	0x000001bc

00003bd8 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
    3bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bda:	b087      	sub	sp, #28
    3bdc:	af00      	add	r7, sp, #0
    3bde:	0002      	movs	r2, r0
    3be0:	6039      	str	r1, [r7, #0]
    3be2:	1dfb      	adds	r3, r7, #7
    3be4:	701a      	strb	r2, [r3, #0]
    3be6:	4c3e      	ldr	r4, [pc, #248]	; (3ce0 <udi_cdc_multi_putc+0x108>)
    3be8:	447c      	add	r4, pc
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    3bea:	1dfb      	adds	r3, r7, #7
    3bec:	2200      	movs	r2, #0
    3bee:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    3bf0:	1dfb      	adds	r3, r7, #7
    3bf2:	781a      	ldrb	r2, [r3, #0]
    3bf4:	493b      	ldr	r1, [pc, #236]	; (3ce4 <udi_cdc_multi_putc+0x10c>)
    3bf6:	4479      	add	r1, pc
    3bf8:	0013      	movs	r3, r2
    3bfa:	00db      	lsls	r3, r3, #3
    3bfc:	1a9b      	subs	r3, r3, r2
    3bfe:	18cb      	adds	r3, r1, r3
    3c00:	3306      	adds	r3, #6
    3c02:	781a      	ldrb	r2, [r3, #0]
    3c04:	2317      	movs	r3, #23
    3c06:	18fb      	adds	r3, r7, r3
    3c08:	3a09      	subs	r2, #9
    3c0a:	4251      	negs	r1, r2
    3c0c:	414a      	adcs	r2, r1
    3c0e:	701a      	strb	r2, [r3, #0]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    3c10:	1dfb      	adds	r3, r7, #7
    3c12:	781b      	ldrb	r3, [r3, #0]
    3c14:	0018      	movs	r0, r3
    3c16:	4b34      	ldr	r3, [pc, #208]	; (3ce8 <udi_cdc_multi_putc+0x110>)
    3c18:	58e3      	ldr	r3, [r4, r3]
    3c1a:	4798      	blx	r3
    3c1c:	0003      	movs	r3, r0
    3c1e:	001a      	movs	r2, r3
    3c20:	2301      	movs	r3, #1
    3c22:	4053      	eors	r3, r2
    3c24:	b2db      	uxtb	r3, r3
    3c26:	2b00      	cmp	r3, #0
    3c28:	d011      	beq.n	3c4e <udi_cdc_multi_putc+0x76>
		if (!udi_cdc_data_running) {
    3c2a:	4b30      	ldr	r3, [pc, #192]	; (3cec <udi_cdc_multi_putc+0x114>)
    3c2c:	447b      	add	r3, pc
    3c2e:	781b      	ldrb	r3, [r3, #0]
    3c30:	b2db      	uxtb	r3, r3
    3c32:	2201      	movs	r2, #1
    3c34:	4053      	eors	r3, r2
    3c36:	b2db      	uxtb	r3, r3
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d001      	beq.n	3c40 <udi_cdc_multi_putc+0x68>
			return false;
    3c3c:	2300      	movs	r3, #0
    3c3e:	e04a      	b.n	3cd6 <udi_cdc_multi_putc+0xfe>
    3c40:	2317      	movs	r3, #23
    3c42:	18fb      	adds	r3, r7, r3
    3c44:	2217      	movs	r2, #23
    3c46:	18ba      	adds	r2, r7, r2
    3c48:	7812      	ldrb	r2, [r2, #0]
    3c4a:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_putc_process_one_byte;
    3c4c:	e7e0      	b.n	3c10 <udi_cdc_multi_putc+0x38>
	}

	// Write value
	flags = cpu_irq_save();
    3c4e:	4b28      	ldr	r3, [pc, #160]	; (3cf0 <udi_cdc_multi_putc+0x118>)
    3c50:	447b      	add	r3, pc
    3c52:	4798      	blx	r3
    3c54:	0003      	movs	r3, r0
    3c56:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    3c58:	1dfb      	adds	r3, r7, #7
    3c5a:	781a      	ldrb	r2, [r3, #0]
    3c5c:	230f      	movs	r3, #15
    3c5e:	18fb      	adds	r3, r7, r3
    3c60:	4924      	ldr	r1, [pc, #144]	; (3cf4 <udi_cdc_multi_putc+0x11c>)
    3c62:	4479      	add	r1, pc
    3c64:	5c8a      	ldrb	r2, [r1, r2]
    3c66:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    3c68:	1dfb      	adds	r3, r7, #7
    3c6a:	781d      	ldrb	r5, [r3, #0]
    3c6c:	230f      	movs	r3, #15
    3c6e:	18fb      	adds	r3, r7, r3
    3c70:	7818      	ldrb	r0, [r3, #0]
    3c72:	1dfb      	adds	r3, r7, #7
    3c74:	781a      	ldrb	r2, [r3, #0]
    3c76:	230f      	movs	r3, #15
    3c78:	18fb      	adds	r3, r7, r3
    3c7a:	781b      	ldrb	r3, [r3, #0]
    3c7c:	491e      	ldr	r1, [pc, #120]	; (3cf8 <udi_cdc_multi_putc+0x120>)
    3c7e:	4479      	add	r1, pc
    3c80:	0056      	lsls	r6, r2, #1
    3c82:	18f6      	adds	r6, r6, r3
    3c84:	0076      	lsls	r6, r6, #1
    3c86:	5a71      	ldrh	r1, [r6, r1]
    3c88:	1c4e      	adds	r6, r1, #1
    3c8a:	b2b6      	uxth	r6, r6
    3c8c:	46b4      	mov	ip, r6
    3c8e:	4e1b      	ldr	r6, [pc, #108]	; (3cfc <udi_cdc_multi_putc+0x124>)
    3c90:	447e      	add	r6, pc
    3c92:	0052      	lsls	r2, r2, #1
    3c94:	18d3      	adds	r3, r2, r3
    3c96:	005b      	lsls	r3, r3, #1
    3c98:	4662      	mov	r2, ip
    3c9a:	539a      	strh	r2, [r3, r6]
    3c9c:	683b      	ldr	r3, [r7, #0]
    3c9e:	b2de      	uxtb	r6, r3
    3ca0:	4a17      	ldr	r2, [pc, #92]	; (3d00 <udi_cdc_multi_putc+0x128>)
    3ca2:	447a      	add	r2, pc
    3ca4:	006b      	lsls	r3, r5, #1
    3ca6:	181b      	adds	r3, r3, r0
    3ca8:	019b      	lsls	r3, r3, #6
    3caa:	18d3      	adds	r3, r2, r3
    3cac:	1c32      	adds	r2, r6, #0
    3cae:	545a      	strb	r2, [r3, r1]
	cpu_irq_restore(flags);
    3cb0:	693b      	ldr	r3, [r7, #16]
    3cb2:	0018      	movs	r0, r3
    3cb4:	4b13      	ldr	r3, [pc, #76]	; (3d04 <udi_cdc_multi_putc+0x12c>)
    3cb6:	447b      	add	r3, pc
    3cb8:	4798      	blx	r3

	if (b_databit_9) {
    3cba:	2317      	movs	r3, #23
    3cbc:	18fb      	adds	r3, r7, r3
    3cbe:	781b      	ldrb	r3, [r3, #0]
    3cc0:	2b00      	cmp	r3, #0
    3cc2:	d007      	beq.n	3cd4 <udi_cdc_multi_putc+0xfc>
		// Send MSB
		b_databit_9 = false;
    3cc4:	2317      	movs	r3, #23
    3cc6:	18fb      	adds	r3, r7, r3
    3cc8:	2200      	movs	r2, #0
    3cca:	701a      	strb	r2, [r3, #0]
		value = value >> 8;
    3ccc:	683b      	ldr	r3, [r7, #0]
    3cce:	121b      	asrs	r3, r3, #8
    3cd0:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
    3cd2:	e79d      	b.n	3c10 <udi_cdc_multi_putc+0x38>
	}
	return true;
    3cd4:	2301      	movs	r3, #1
}
    3cd6:	0018      	movs	r0, r3
    3cd8:	46bd      	mov	sp, r7
    3cda:	b007      	add	sp, #28
    3cdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3cde:	46c0      	nop			; (mov r8, r8)
    3ce0:	0000e1e8 	.word	0x0000e1e8
    3ce4:	1fffc7d6 	.word	0x1fffc7d6
    3ce8:	000002d4 	.word	0x000002d4
    3cec:	1fffc7b8 	.word	0x1fffc7b8
    3cf0:	fffff139 	.word	0xfffff139
    3cf4:	1fffc89a 	.word	0x1fffc89a
    3cf8:	1fffc87a 	.word	0x1fffc87a
    3cfc:	1fffc868 	.word	0x1fffc868
    3d00:	1fffc7d6 	.word	0x1fffc7d6
    3d04:	fffff127 	.word	0xfffff127

00003d08 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    3d08:	b580      	push	{r7, lr}
    3d0a:	b082      	sub	sp, #8
    3d0c:	af00      	add	r7, sp, #0
    3d0e:	6078      	str	r0, [r7, #4]
    3d10:	4a06      	ldr	r2, [pc, #24]	; (3d2c <udi_cdc_putc+0x24>)
    3d12:	447a      	add	r2, pc
	return udi_cdc_multi_putc(0, value);
    3d14:	687b      	ldr	r3, [r7, #4]
    3d16:	0019      	movs	r1, r3
    3d18:	2000      	movs	r0, #0
    3d1a:	4b05      	ldr	r3, [pc, #20]	; (3d30 <udi_cdc_putc+0x28>)
    3d1c:	58d3      	ldr	r3, [r2, r3]
    3d1e:	4798      	blx	r3
    3d20:	0003      	movs	r3, r0
}
    3d22:	0018      	movs	r0, r3
    3d24:	46bd      	mov	sp, r7
    3d26:	b002      	add	sp, #8
    3d28:	bd80      	pop	{r7, pc}
    3d2a:	46c0      	nop			; (mov r8, r8)
    3d2c:	0000e0be 	.word	0x0000e0be
    3d30:	0000022c 	.word	0x0000022c

00003d34 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
    3d34:	b580      	push	{r7, lr}
    3d36:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
    3d38:	4b02      	ldr	r3, [pc, #8]	; (3d44 <udc_get_string_serial_name+0x10>)
    3d3a:	447b      	add	r3, pc
	}
    3d3c:	0018      	movs	r0, r3
    3d3e:	46bd      	mov	sp, r7
    3d40:	bd80      	pop	{r7, pc}
    3d42:	46c0      	nop			; (mov r8, r8)
    3d44:	0000df76 	.word	0x0000df76

00003d48 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    3d48:	b580      	push	{r7, lr}
    3d4a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    3d4c:	4b08      	ldr	r3, [pc, #32]	; (3d70 <udc_get_eof_conf+0x28>)
    3d4e:	447b      	add	r3, pc
    3d50:	681b      	ldr	r3, [r3, #0]
    3d52:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    3d54:	4b07      	ldr	r3, [pc, #28]	; (3d74 <udc_get_eof_conf+0x2c>)
    3d56:	447b      	add	r3, pc
    3d58:	681b      	ldr	r3, [r3, #0]
    3d5a:	681b      	ldr	r3, [r3, #0]
    3d5c:	7899      	ldrb	r1, [r3, #2]
    3d5e:	78db      	ldrb	r3, [r3, #3]
    3d60:	021b      	lsls	r3, r3, #8
    3d62:	430b      	orrs	r3, r1
    3d64:	b29b      	uxth	r3, r3
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    3d66:	18d3      	adds	r3, r2, r3
}
    3d68:	0018      	movs	r0, r3
    3d6a:	46bd      	mov	sp, r7
    3d6c:	bd80      	pop	{r7, pc}
    3d6e:	46c0      	nop			; (mov r8, r8)
    3d70:	1fffc7ca 	.word	0x1fffc7ca
    3d74:	1fffc7c2 	.word	0x1fffc7c2

00003d78 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    3d78:	b580      	push	{r7, lr}
    3d7a:	b084      	sub	sp, #16
    3d7c:	af00      	add	r7, sp, #0
    3d7e:	6078      	str	r0, [r7, #4]
    3d80:	000a      	movs	r2, r1
    3d82:	1cfb      	adds	r3, r7, #3
    3d84:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    3d86:	4b14      	ldr	r3, [pc, #80]	; (3dd8 <udc_next_desc_in_iface+0x60>)
    3d88:	447b      	add	r3, pc
    3d8a:	4798      	blx	r3
    3d8c:	0003      	movs	r3, r0
    3d8e:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    3d90:	687b      	ldr	r3, [r7, #4]
    3d92:	781b      	ldrb	r3, [r3, #0]
    3d94:	001a      	movs	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3d96:	687b      	ldr	r3, [r7, #4]
    3d98:	189b      	adds	r3, r3, r2
    3d9a:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    3d9c:	e011      	b.n	3dc2 <udc_next_desc_in_iface+0x4a>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    3d9e:	687b      	ldr	r3, [r7, #4]
    3da0:	785b      	ldrb	r3, [r3, #1]
    3da2:	2b04      	cmp	r3, #4
    3da4:	d012      	beq.n	3dcc <udc_next_desc_in_iface+0x54>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    3da6:	687b      	ldr	r3, [r7, #4]
    3da8:	785b      	ldrb	r3, [r3, #1]
    3daa:	1cfa      	adds	r2, r7, #3
    3dac:	7812      	ldrb	r2, [r2, #0]
    3dae:	429a      	cmp	r2, r3
    3db0:	d101      	bne.n	3db6 <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
    3db2:	687b      	ldr	r3, [r7, #4]
    3db4:	e00c      	b.n	3dd0 <udc_next_desc_in_iface+0x58>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    3db6:	687b      	ldr	r3, [r7, #4]
    3db8:	781b      	ldrb	r3, [r3, #0]
    3dba:	001a      	movs	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    3dbc:	687b      	ldr	r3, [r7, #4]
    3dbe:	189b      	adds	r3, r3, r2
    3dc0:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
    3dc2:	68fa      	ldr	r2, [r7, #12]
    3dc4:	687b      	ldr	r3, [r7, #4]
    3dc6:	429a      	cmp	r2, r3
    3dc8:	d8e9      	bhi.n	3d9e <udc_next_desc_in_iface+0x26>
    3dca:	e000      	b.n	3dce <udc_next_desc_in_iface+0x56>
			break; // End of global interface descriptor
    3dcc:	46c0      	nop			; (mov r8, r8)
	}
	return NULL; // No specific descriptor found
    3dce:	2300      	movs	r3, #0
}
    3dd0:	0018      	movs	r0, r3
    3dd2:	46bd      	mov	sp, r7
    3dd4:	b004      	add	sp, #16
    3dd6:	bd80      	pop	{r7, pc}
    3dd8:	ffffffbd 	.word	0xffffffbd

00003ddc <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    3ddc:	b580      	push	{r7, lr}
    3dde:	b084      	sub	sp, #16
    3de0:	af00      	add	r7, sp, #0
    3de2:	0002      	movs	r2, r0
    3de4:	1dfb      	adds	r3, r7, #7
    3de6:	701a      	strb	r2, [r3, #0]
    3de8:	1dbb      	adds	r3, r7, #6
    3dea:	1c0a      	adds	r2, r1, #0
    3dec:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    3dee:	4b26      	ldr	r3, [pc, #152]	; (3e88 <udc_update_iface_desc+0xac>)
    3df0:	447b      	add	r3, pc
    3df2:	781b      	ldrb	r3, [r3, #0]
    3df4:	2b00      	cmp	r3, #0
    3df6:	d101      	bne.n	3dfc <udc_update_iface_desc+0x20>
		return false;
    3df8:	2300      	movs	r3, #0
    3dfa:	e041      	b.n	3e80 <udc_update_iface_desc+0xa4>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    3dfc:	4b23      	ldr	r3, [pc, #140]	; (3e8c <udc_update_iface_desc+0xb0>)
    3dfe:	447b      	add	r3, pc
    3e00:	681b      	ldr	r3, [r3, #0]
    3e02:	681b      	ldr	r3, [r3, #0]
    3e04:	791b      	ldrb	r3, [r3, #4]
    3e06:	1dfa      	adds	r2, r7, #7
    3e08:	7812      	ldrb	r2, [r2, #0]
    3e0a:	429a      	cmp	r2, r3
    3e0c:	d301      	bcc.n	3e12 <udc_update_iface_desc+0x36>
		return false;
    3e0e:	2300      	movs	r3, #0
    3e10:	e036      	b.n	3e80 <udc_update_iface_desc+0xa4>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    3e12:	4b1f      	ldr	r3, [pc, #124]	; (3e90 <udc_update_iface_desc+0xb4>)
    3e14:	447b      	add	r3, pc
    3e16:	681b      	ldr	r3, [r3, #0]
    3e18:	681a      	ldr	r2, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    3e1a:	4b1e      	ldr	r3, [pc, #120]	; (3e94 <udc_update_iface_desc+0xb8>)
    3e1c:	447b      	add	r3, pc
    3e1e:	601a      	str	r2, [r3, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    3e20:	4b1d      	ldr	r3, [pc, #116]	; (3e98 <udc_update_iface_desc+0xbc>)
    3e22:	447b      	add	r3, pc
    3e24:	4798      	blx	r3
    3e26:	0003      	movs	r3, r0
    3e28:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    3e2a:	e022      	b.n	3e72 <udc_update_iface_desc+0x96>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    3e2c:	4b1b      	ldr	r3, [pc, #108]	; (3e9c <udc_update_iface_desc+0xc0>)
    3e2e:	447b      	add	r3, pc
    3e30:	681b      	ldr	r3, [r3, #0]
    3e32:	785b      	ldrb	r3, [r3, #1]
    3e34:	2b04      	cmp	r3, #4
    3e36:	d111      	bne.n	3e5c <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3e38:	4b19      	ldr	r3, [pc, #100]	; (3ea0 <udc_update_iface_desc+0xc4>)
    3e3a:	447b      	add	r3, pc
    3e3c:	681b      	ldr	r3, [r3, #0]
    3e3e:	789b      	ldrb	r3, [r3, #2]
    3e40:	1dfa      	adds	r2, r7, #7
    3e42:	7812      	ldrb	r2, [r2, #0]
    3e44:	429a      	cmp	r2, r3
    3e46:	d109      	bne.n	3e5c <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    3e48:	4b16      	ldr	r3, [pc, #88]	; (3ea4 <udc_update_iface_desc+0xc8>)
    3e4a:	447b      	add	r3, pc
    3e4c:	681b      	ldr	r3, [r3, #0]
    3e4e:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    3e50:	1dba      	adds	r2, r7, #6
    3e52:	7812      	ldrb	r2, [r2, #0]
    3e54:	429a      	cmp	r2, r3
    3e56:	d101      	bne.n	3e5c <udc_update_iface_desc+0x80>
				return true; // Interface found
    3e58:	2301      	movs	r3, #1
    3e5a:	e011      	b.n	3e80 <udc_update_iface_desc+0xa4>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3e5c:	4b12      	ldr	r3, [pc, #72]	; (3ea8 <udc_update_iface_desc+0xcc>)
    3e5e:	447b      	add	r3, pc
    3e60:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    3e62:	4b12      	ldr	r3, [pc, #72]	; (3eac <udc_update_iface_desc+0xd0>)
    3e64:	447b      	add	r3, pc
    3e66:	681b      	ldr	r3, [r3, #0]
    3e68:	781b      	ldrb	r3, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    3e6a:	18d2      	adds	r2, r2, r3
    3e6c:	4b10      	ldr	r3, [pc, #64]	; (3eb0 <udc_update_iface_desc+0xd4>)
    3e6e:	447b      	add	r3, pc
    3e70:	601a      	str	r2, [r3, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    3e72:	4b10      	ldr	r3, [pc, #64]	; (3eb4 <udc_update_iface_desc+0xd8>)
    3e74:	447b      	add	r3, pc
    3e76:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
    3e78:	68fa      	ldr	r2, [r7, #12]
    3e7a:	429a      	cmp	r2, r3
    3e7c:	d8d6      	bhi.n	3e2c <udc_update_iface_desc+0x50>
	}
	return false; // Interface not found
    3e7e:	2300      	movs	r3, #0
}
    3e80:	0018      	movs	r0, r3
    3e82:	46bd      	mov	sp, r7
    3e84:	b004      	add	sp, #16
    3e86:	bd80      	pop	{r7, pc}
    3e88:	1fffc724 	.word	0x1fffc724
    3e8c:	1fffc71a 	.word	0x1fffc71a
    3e90:	1fffc704 	.word	0x1fffc704
    3e94:	1fffc700 	.word	0x1fffc700
    3e98:	ffffff23 	.word	0xffffff23
    3e9c:	1fffc6ee 	.word	0x1fffc6ee
    3ea0:	1fffc6e2 	.word	0x1fffc6e2
    3ea4:	1fffc6d2 	.word	0x1fffc6d2
    3ea8:	1fffc6be 	.word	0x1fffc6be
    3eac:	1fffc6b8 	.word	0x1fffc6b8
    3eb0:	1fffc6ae 	.word	0x1fffc6ae
    3eb4:	1fffc6a8 	.word	0x1fffc6a8

00003eb8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    3eb8:	b590      	push	{r4, r7, lr}
    3eba:	b085      	sub	sp, #20
    3ebc:	af00      	add	r7, sp, #0
    3ebe:	0002      	movs	r2, r0
    3ec0:	1dfb      	adds	r3, r7, #7
    3ec2:	701a      	strb	r2, [r3, #0]
    3ec4:	4c27      	ldr	r4, [pc, #156]	; (3f64 <udc_iface_disable+0xac>)
    3ec6:	447c      	add	r4, pc
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    3ec8:	1dfb      	adds	r3, r7, #7
    3eca:	781b      	ldrb	r3, [r3, #0]
    3ecc:	2100      	movs	r1, #0
    3ece:	0018      	movs	r0, r3
    3ed0:	4b25      	ldr	r3, [pc, #148]	; (3f68 <udc_iface_disable+0xb0>)
    3ed2:	447b      	add	r3, pc
    3ed4:	4798      	blx	r3
    3ed6:	0003      	movs	r3, r0
    3ed8:	001a      	movs	r2, r3
    3eda:	2301      	movs	r3, #1
    3edc:	4053      	eors	r3, r2
    3ede:	b2db      	uxtb	r3, r3
    3ee0:	2b00      	cmp	r3, #0
    3ee2:	d001      	beq.n	3ee8 <udc_iface_disable+0x30>
		return false;
    3ee4:	2300      	movs	r3, #0
    3ee6:	e039      	b.n	3f5c <udc_iface_disable+0xa4>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    3ee8:	4b20      	ldr	r3, [pc, #128]	; (3f6c <udc_iface_disable+0xb4>)
    3eea:	447b      	add	r3, pc
    3eec:	681b      	ldr	r3, [r3, #0]
    3eee:	685a      	ldr	r2, [r3, #4]
    3ef0:	1dfb      	adds	r3, r7, #7
    3ef2:	781b      	ldrb	r3, [r3, #0]
    3ef4:	009b      	lsls	r3, r3, #2
    3ef6:	18d3      	adds	r3, r2, r3
    3ef8:	681b      	ldr	r3, [r3, #0]
    3efa:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    3efc:	68bb      	ldr	r3, [r7, #8]
    3efe:	68db      	ldr	r3, [r3, #12]
    3f00:	4798      	blx	r3
    3f02:	0003      	movs	r3, r0
    3f04:	001a      	movs	r2, r3
    3f06:	1dfb      	adds	r3, r7, #7
    3f08:	781b      	ldrb	r3, [r3, #0]
    3f0a:	0011      	movs	r1, r2
    3f0c:	0018      	movs	r0, r3
    3f0e:	4b18      	ldr	r3, [pc, #96]	; (3f70 <udc_iface_disable+0xb8>)
    3f10:	447b      	add	r3, pc
    3f12:	4798      	blx	r3
    3f14:	0003      	movs	r3, r0
    3f16:	001a      	movs	r2, r3
    3f18:	2301      	movs	r3, #1
    3f1a:	4053      	eors	r3, r2
    3f1c:	b2db      	uxtb	r3, r3
    3f1e:	2b00      	cmp	r3, #0
    3f20:	d001      	beq.n	3f26 <udc_iface_disable+0x6e>
		return false;
    3f22:	2300      	movs	r3, #0
    3f24:	e01a      	b.n	3f5c <udc_iface_disable+0xa4>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3f26:	4b13      	ldr	r3, [pc, #76]	; (3f74 <udc_iface_disable+0xbc>)
    3f28:	447b      	add	r3, pc
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3f2e:	68fb      	ldr	r3, [r7, #12]
    3f30:	2105      	movs	r1, #5
    3f32:	0018      	movs	r0, r3
    3f34:	4b10      	ldr	r3, [pc, #64]	; (3f78 <udc_iface_disable+0xc0>)
    3f36:	447b      	add	r3, pc
    3f38:	4798      	blx	r3
    3f3a:	0003      	movs	r3, r0
    3f3c:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    3f3e:	68fb      	ldr	r3, [r7, #12]
    3f40:	2b00      	cmp	r3, #0
    3f42:	d006      	beq.n	3f52 <udc_iface_disable+0x9a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    3f44:	68fb      	ldr	r3, [r7, #12]
    3f46:	789b      	ldrb	r3, [r3, #2]
    3f48:	0018      	movs	r0, r3
    3f4a:	4b0c      	ldr	r3, [pc, #48]	; (3f7c <udc_iface_disable+0xc4>)
    3f4c:	58e3      	ldr	r3, [r4, r3]
    3f4e:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3f50:	e7ed      	b.n	3f2e <udc_iface_disable+0x76>
				break;
    3f52:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    3f54:	68bb      	ldr	r3, [r7, #8]
    3f56:	685b      	ldr	r3, [r3, #4]
    3f58:	4798      	blx	r3
	return true;
    3f5a:	2301      	movs	r3, #1
}
    3f5c:	0018      	movs	r0, r3
    3f5e:	46bd      	mov	sp, r7
    3f60:	b005      	add	sp, #20
    3f62:	bd90      	pop	{r4, r7, pc}
    3f64:	0000df0a 	.word	0x0000df0a
    3f68:	ffffff07 	.word	0xffffff07
    3f6c:	1fffc62e 	.word	0x1fffc62e
    3f70:	fffffec9 	.word	0xfffffec9
    3f74:	1fffc5f4 	.word	0x1fffc5f4
    3f78:	fffffe3f 	.word	0xfffffe3f
    3f7c:	00000188 	.word	0x00000188

00003f80 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    3f80:	b590      	push	{r4, r7, lr}
    3f82:	b085      	sub	sp, #20
    3f84:	af00      	add	r7, sp, #0
    3f86:	0002      	movs	r2, r0
    3f88:	1dfb      	adds	r3, r7, #7
    3f8a:	701a      	strb	r2, [r3, #0]
    3f8c:	1dbb      	adds	r3, r7, #6
    3f8e:	1c0a      	adds	r2, r1, #0
    3f90:	701a      	strb	r2, [r3, #0]
    3f92:	4c25      	ldr	r4, [pc, #148]	; (4028 <udc_iface_enable+0xa8>)
    3f94:	447c      	add	r4, pc
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    3f96:	1dbb      	adds	r3, r7, #6
    3f98:	781a      	ldrb	r2, [r3, #0]
    3f9a:	1dfb      	adds	r3, r7, #7
    3f9c:	781b      	ldrb	r3, [r3, #0]
    3f9e:	0011      	movs	r1, r2
    3fa0:	0018      	movs	r0, r3
    3fa2:	4b22      	ldr	r3, [pc, #136]	; (402c <udc_iface_enable+0xac>)
    3fa4:	447b      	add	r3, pc
    3fa6:	4798      	blx	r3
    3fa8:	0003      	movs	r3, r0
    3faa:	001a      	movs	r2, r3
    3fac:	2301      	movs	r3, #1
    3fae:	4053      	eors	r3, r2
    3fb0:	b2db      	uxtb	r3, r3
    3fb2:	2b00      	cmp	r3, #0
    3fb4:	d001      	beq.n	3fba <udc_iface_enable+0x3a>
		return false;
    3fb6:	2300      	movs	r3, #0
    3fb8:	e032      	b.n	4020 <udc_iface_enable+0xa0>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    3fba:	4b1d      	ldr	r3, [pc, #116]	; (4030 <udc_iface_enable+0xb0>)
    3fbc:	447b      	add	r3, pc
    3fbe:	681b      	ldr	r3, [r3, #0]
    3fc0:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    3fc2:	68fb      	ldr	r3, [r7, #12]
    3fc4:	2105      	movs	r1, #5
    3fc6:	0018      	movs	r0, r3
    3fc8:	4b1a      	ldr	r3, [pc, #104]	; (4034 <udc_iface_enable+0xb4>)
    3fca:	447b      	add	r3, pc
    3fcc:	4798      	blx	r3
    3fce:	0003      	movs	r3, r0
    3fd0:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    3fd2:	68fb      	ldr	r3, [r7, #12]
    3fd4:	2b00      	cmp	r3, #0
    3fd6:	d016      	beq.n	4006 <udc_iface_enable+0x86>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    3fd8:	68fb      	ldr	r3, [r7, #12]
    3fda:	7898      	ldrb	r0, [r3, #2]
    3fdc:	68fb      	ldr	r3, [r7, #12]
    3fde:	78d9      	ldrb	r1, [r3, #3]
    3fe0:	68fb      	ldr	r3, [r7, #12]
    3fe2:	791a      	ldrb	r2, [r3, #4]
    3fe4:	795b      	ldrb	r3, [r3, #5]
    3fe6:	021b      	lsls	r3, r3, #8
    3fe8:	4313      	orrs	r3, r2
    3fea:	b29b      	uxth	r3, r3
    3fec:	001a      	movs	r2, r3
    3fee:	4b12      	ldr	r3, [pc, #72]	; (4038 <udc_iface_enable+0xb8>)
    3ff0:	58e3      	ldr	r3, [r4, r3]
    3ff2:	4798      	blx	r3
    3ff4:	0003      	movs	r3, r0
    3ff6:	001a      	movs	r2, r3
    3ff8:	2301      	movs	r3, #1
    3ffa:	4053      	eors	r3, r2
    3ffc:	b2db      	uxtb	r3, r3
    3ffe:	2b00      	cmp	r3, #0
    4000:	d0df      	beq.n	3fc2 <udc_iface_enable+0x42>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    4002:	2300      	movs	r3, #0
    4004:	e00c      	b.n	4020 <udc_iface_enable+0xa0>
			break;
    4006:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    4008:	4b0c      	ldr	r3, [pc, #48]	; (403c <udc_iface_enable+0xbc>)
    400a:	447b      	add	r3, pc
    400c:	681b      	ldr	r3, [r3, #0]
    400e:	685a      	ldr	r2, [r3, #4]
    4010:	1dfb      	adds	r3, r7, #7
    4012:	781b      	ldrb	r3, [r3, #0]
    4014:	009b      	lsls	r3, r3, #2
    4016:	18d3      	adds	r3, r2, r3
    4018:	681b      	ldr	r3, [r3, #0]
    401a:	681b      	ldr	r3, [r3, #0]
    401c:	4798      	blx	r3
    401e:	0003      	movs	r3, r0
}
    4020:	0018      	movs	r0, r3
    4022:	46bd      	mov	sp, r7
    4024:	b005      	add	sp, #20
    4026:	bd90      	pop	{r4, r7, pc}
    4028:	0000de3c 	.word	0x0000de3c
    402c:	fffffe35 	.word	0xfffffe35
    4030:	1fffc560 	.word	0x1fffc560
    4034:	fffffdab 	.word	0xfffffdab
    4038:	000001e4 	.word	0x000001e4
    403c:	1fffc50e 	.word	0x1fffc50e

00004040 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    4040:	b580      	push	{r7, lr}
    4042:	af00      	add	r7, sp, #0
    4044:	4a03      	ldr	r2, [pc, #12]	; (4054 <udc_start+0x14>)
    4046:	447a      	add	r2, pc
	udd_enable();
    4048:	4b03      	ldr	r3, [pc, #12]	; (4058 <udc_start+0x18>)
    404a:	58d3      	ldr	r3, [r2, r3]
    404c:	4798      	blx	r3
}
    404e:	46c0      	nop			; (mov r8, r8)
    4050:	46bd      	mov	sp, r7
    4052:	bd80      	pop	{r7, pc}
    4054:	0000dd8a 	.word	0x0000dd8a
    4058:	00000194 	.word	0x00000194

0000405c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    405c:	b580      	push	{r7, lr}
    405e:	b082      	sub	sp, #8
    4060:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    4062:	4b14      	ldr	r3, [pc, #80]	; (40b4 <udc_reset+0x58>)
    4064:	447b      	add	r3, pc
    4066:	781b      	ldrb	r3, [r3, #0]
    4068:	2b00      	cmp	r3, #0
    406a:	d017      	beq.n	409c <udc_reset+0x40>
		for (iface_num = 0;
    406c:	1dfb      	adds	r3, r7, #7
    406e:	2200      	movs	r2, #0
    4070:	701a      	strb	r2, [r3, #0]
    4072:	e00a      	b.n	408a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    4074:	1dfb      	adds	r3, r7, #7
    4076:	781b      	ldrb	r3, [r3, #0]
    4078:	0018      	movs	r0, r3
    407a:	4b0f      	ldr	r3, [pc, #60]	; (40b8 <udc_reset+0x5c>)
    407c:	447b      	add	r3, pc
    407e:	4798      	blx	r3
				iface_num++) {
    4080:	1dfb      	adds	r3, r7, #7
    4082:	781a      	ldrb	r2, [r3, #0]
    4084:	1dfb      	adds	r3, r7, #7
    4086:	3201      	adds	r2, #1
    4088:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    408a:	4b0c      	ldr	r3, [pc, #48]	; (40bc <udc_reset+0x60>)
    408c:	447b      	add	r3, pc
    408e:	681b      	ldr	r3, [r3, #0]
    4090:	681b      	ldr	r3, [r3, #0]
    4092:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    4094:	1dfa      	adds	r2, r7, #7
    4096:	7812      	ldrb	r2, [r2, #0]
    4098:	429a      	cmp	r2, r3
    409a:	d3eb      	bcc.n	4074 <udc_reset+0x18>
		}
	}
	udc_num_configuration = 0;
    409c:	4b08      	ldr	r3, [pc, #32]	; (40c0 <udc_reset+0x64>)
    409e:	447b      	add	r3, pc
    40a0:	2200      	movs	r2, #0
    40a2:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    40a4:	4b07      	ldr	r3, [pc, #28]	; (40c4 <udc_reset+0x68>)
    40a6:	447b      	add	r3, pc
    40a8:	2201      	movs	r2, #1
    40aa:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    40ac:	46c0      	nop			; (mov r8, r8)
    40ae:	46bd      	mov	sp, r7
    40b0:	b002      	add	sp, #8
    40b2:	bd80      	pop	{r7, pc}
    40b4:	1fffc4b0 	.word	0x1fffc4b0
    40b8:	fffffe39 	.word	0xfffffe39
    40bc:	1fffc48c 	.word	0x1fffc48c
    40c0:	1fffc476 	.word	0x1fffc476
    40c4:	1fffc466 	.word	0x1fffc466

000040c8 <udc_sof_notify>:

void udc_sof_notify(void)
{
    40c8:	b580      	push	{r7, lr}
    40ca:	b082      	sub	sp, #8
    40cc:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    40ce:	4b19      	ldr	r3, [pc, #100]	; (4134 <udc_sof_notify+0x6c>)
    40d0:	447b      	add	r3, pc
    40d2:	781b      	ldrb	r3, [r3, #0]
    40d4:	2b00      	cmp	r3, #0
    40d6:	d028      	beq.n	412a <udc_sof_notify+0x62>
		for (iface_num = 0;
    40d8:	1dfb      	adds	r3, r7, #7
    40da:	2200      	movs	r2, #0
    40dc:	701a      	strb	r2, [r3, #0]
    40de:	e01b      	b.n	4118 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    40e0:	4b15      	ldr	r3, [pc, #84]	; (4138 <udc_sof_notify+0x70>)
    40e2:	447b      	add	r3, pc
    40e4:	681b      	ldr	r3, [r3, #0]
    40e6:	685a      	ldr	r2, [r3, #4]
    40e8:	1dfb      	adds	r3, r7, #7
    40ea:	781b      	ldrb	r3, [r3, #0]
    40ec:	009b      	lsls	r3, r3, #2
    40ee:	18d3      	adds	r3, r2, r3
    40f0:	681b      	ldr	r3, [r3, #0]
    40f2:	691b      	ldr	r3, [r3, #16]
    40f4:	2b00      	cmp	r3, #0
    40f6:	d00a      	beq.n	410e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    40f8:	4b10      	ldr	r3, [pc, #64]	; (413c <udc_sof_notify+0x74>)
    40fa:	447b      	add	r3, pc
    40fc:	681b      	ldr	r3, [r3, #0]
    40fe:	685a      	ldr	r2, [r3, #4]
    4100:	1dfb      	adds	r3, r7, #7
    4102:	781b      	ldrb	r3, [r3, #0]
    4104:	009b      	lsls	r3, r3, #2
    4106:	18d3      	adds	r3, r2, r3
    4108:	681b      	ldr	r3, [r3, #0]
    410a:	691b      	ldr	r3, [r3, #16]
    410c:	4798      	blx	r3
				iface_num++) {
    410e:	1dfb      	adds	r3, r7, #7
    4110:	781a      	ldrb	r2, [r3, #0]
    4112:	1dfb      	adds	r3, r7, #7
    4114:	3201      	adds	r2, #1
    4116:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4118:	4b09      	ldr	r3, [pc, #36]	; (4140 <udc_sof_notify+0x78>)
    411a:	447b      	add	r3, pc
    411c:	681b      	ldr	r3, [r3, #0]
    411e:	681b      	ldr	r3, [r3, #0]
    4120:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    4122:	1dfa      	adds	r2, r7, #7
    4124:	7812      	ldrb	r2, [r2, #0]
    4126:	429a      	cmp	r2, r3
    4128:	d3da      	bcc.n	40e0 <udc_sof_notify+0x18>
			}
		}
	}
}
    412a:	46c0      	nop			; (mov r8, r8)
    412c:	46bd      	mov	sp, r7
    412e:	b002      	add	sp, #8
    4130:	bd80      	pop	{r7, pc}
    4132:	46c0      	nop			; (mov r8, r8)
    4134:	1fffc444 	.word	0x1fffc444
    4138:	1fffc436 	.word	0x1fffc436
    413c:	1fffc41e 	.word	0x1fffc41e
    4140:	1fffc3fe 	.word	0x1fffc3fe

00004144 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    4144:	b580      	push	{r7, lr}
    4146:	af00      	add	r7, sp, #0
    4148:	4b09      	ldr	r3, [pc, #36]	; (4170 <udc_req_std_dev_get_status+0x2c>)
    414a:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    414c:	4a09      	ldr	r2, [pc, #36]	; (4174 <udc_req_std_dev_get_status+0x30>)
    414e:	589a      	ldr	r2, [r3, r2]
    4150:	88d2      	ldrh	r2, [r2, #6]
    4152:	2a02      	cmp	r2, #2
    4154:	d001      	beq.n	415a <udc_req_std_dev_get_status+0x16>
		return false;
    4156:	2300      	movs	r3, #0
    4158:	e007      	b.n	416a <udc_req_std_dev_get_status+0x26>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    415a:	4a07      	ldr	r2, [pc, #28]	; (4178 <udc_req_std_dev_get_status+0x34>)
    415c:	447a      	add	r2, pc
    415e:	2102      	movs	r1, #2
    4160:	0010      	movs	r0, r2
    4162:	4a06      	ldr	r2, [pc, #24]	; (417c <udc_req_std_dev_get_status+0x38>)
    4164:	589b      	ldr	r3, [r3, r2]
    4166:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    4168:	2301      	movs	r3, #1
}
    416a:	0018      	movs	r0, r3
    416c:	46bd      	mov	sp, r7
    416e:	bd80      	pop	{r7, pc}
    4170:	0000dc86 	.word	0x0000dc86
    4174:	000001e0 	.word	0x000001e0
    4178:	1fffc3b0 	.word	0x1fffc3b0
    417c:	0000005c 	.word	0x0000005c

00004180 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    4180:	b5b0      	push	{r4, r5, r7, lr}
    4182:	af00      	add	r7, sp, #0
    4184:	4c10      	ldr	r4, [pc, #64]	; (41c8 <udc_req_std_ep_get_status+0x48>)
    4186:	447c      	add	r4, pc
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    4188:	4b10      	ldr	r3, [pc, #64]	; (41cc <udc_req_std_ep_get_status+0x4c>)
    418a:	58e3      	ldr	r3, [r4, r3]
    418c:	88db      	ldrh	r3, [r3, #6]
    418e:	2b02      	cmp	r3, #2
    4190:	d001      	beq.n	4196 <udc_req_std_ep_get_status+0x16>
		return false;
    4192:	2300      	movs	r3, #0
    4194:	e014      	b.n	41c0 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    4196:	4b0d      	ldr	r3, [pc, #52]	; (41cc <udc_req_std_ep_get_status+0x4c>)
    4198:	58e3      	ldr	r3, [r4, r3]
    419a:	889b      	ldrh	r3, [r3, #4]
    419c:	b2db      	uxtb	r3, r3
    419e:	0018      	movs	r0, r3
    41a0:	4b0b      	ldr	r3, [pc, #44]	; (41d0 <udc_req_std_ep_get_status+0x50>)
    41a2:	58e3      	ldr	r3, [r4, r3]
    41a4:	4798      	blx	r3
    41a6:	0003      	movs	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    41a8:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    41aa:	4b0a      	ldr	r3, [pc, #40]	; (41d4 <udc_req_std_ep_get_status+0x54>)
    41ac:	447b      	add	r3, pc
    41ae:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    41b0:	4b09      	ldr	r3, [pc, #36]	; (41d8 <udc_req_std_ep_get_status+0x58>)
    41b2:	447b      	add	r3, pc
    41b4:	2102      	movs	r1, #2
    41b6:	0018      	movs	r0, r3
    41b8:	4b08      	ldr	r3, [pc, #32]	; (41dc <udc_req_std_ep_get_status+0x5c>)
    41ba:	58e3      	ldr	r3, [r4, r3]
    41bc:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    41be:	2301      	movs	r3, #1
}
    41c0:	0018      	movs	r0, r3
    41c2:	46bd      	mov	sp, r7
    41c4:	bdb0      	pop	{r4, r5, r7, pc}
    41c6:	46c0      	nop			; (mov r8, r8)
    41c8:	0000dc4a 	.word	0x0000dc4a
    41cc:	000001e0 	.word	0x000001e0
    41d0:	000001a0 	.word	0x000001a0
    41d4:	1fffc374 	.word	0x1fffc374
    41d8:	1fffc36e 	.word	0x1fffc36e
    41dc:	0000005c 	.word	0x0000005c

000041e0 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    41e0:	b580      	push	{r7, lr}
    41e2:	af00      	add	r7, sp, #0
    41e4:	4b0e      	ldr	r3, [pc, #56]	; (4220 <udc_req_std_dev_clear_feature+0x40>)
    41e6:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    41e8:	4a0e      	ldr	r2, [pc, #56]	; (4224 <udc_req_std_dev_clear_feature+0x44>)
    41ea:	589a      	ldr	r2, [r3, r2]
    41ec:	88d2      	ldrh	r2, [r2, #6]
    41ee:	2a00      	cmp	r2, #0
    41f0:	d001      	beq.n	41f6 <udc_req_std_dev_clear_feature+0x16>
		return false;
    41f2:	2300      	movs	r3, #0
    41f4:	e010      	b.n	4218 <udc_req_std_dev_clear_feature+0x38>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    41f6:	4a0b      	ldr	r2, [pc, #44]	; (4224 <udc_req_std_dev_clear_feature+0x44>)
    41f8:	589b      	ldr	r3, [r3, r2]
    41fa:	885b      	ldrh	r3, [r3, #2]
    41fc:	2b01      	cmp	r3, #1
    41fe:	d10a      	bne.n	4216 <udc_req_std_dev_clear_feature+0x36>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    4200:	4b09      	ldr	r3, [pc, #36]	; (4228 <udc_req_std_dev_clear_feature+0x48>)
    4202:	447b      	add	r3, pc
    4204:	881b      	ldrh	r3, [r3, #0]
    4206:	2202      	movs	r2, #2
    4208:	4393      	bics	r3, r2
    420a:	b29a      	uxth	r2, r3
    420c:	4b07      	ldr	r3, [pc, #28]	; (422c <udc_req_std_dev_clear_feature+0x4c>)
    420e:	447b      	add	r3, pc
    4210:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    4212:	2301      	movs	r3, #1
    4214:	e000      	b.n	4218 <udc_req_std_dev_clear_feature+0x38>
	}
	return false;
    4216:	2300      	movs	r3, #0
}
    4218:	0018      	movs	r0, r3
    421a:	46bd      	mov	sp, r7
    421c:	bd80      	pop	{r7, pc}
    421e:	46c0      	nop			; (mov r8, r8)
    4220:	0000dbea 	.word	0x0000dbea
    4224:	000001e0 	.word	0x000001e0
    4228:	1fffc30a 	.word	0x1fffc30a
    422c:	1fffc2fe 	.word	0x1fffc2fe

00004230 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    4230:	b580      	push	{r7, lr}
    4232:	af00      	add	r7, sp, #0
    4234:	4b0d      	ldr	r3, [pc, #52]	; (426c <udc_req_std_ep_clear_feature+0x3c>)
    4236:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    4238:	4a0d      	ldr	r2, [pc, #52]	; (4270 <udc_req_std_ep_clear_feature+0x40>)
    423a:	589a      	ldr	r2, [r3, r2]
    423c:	88d2      	ldrh	r2, [r2, #6]
    423e:	2a00      	cmp	r2, #0
    4240:	d001      	beq.n	4246 <udc_req_std_ep_clear_feature+0x16>
		return false;
    4242:	2300      	movs	r3, #0
    4244:	e00f      	b.n	4266 <udc_req_std_ep_clear_feature+0x36>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    4246:	4a0a      	ldr	r2, [pc, #40]	; (4270 <udc_req_std_ep_clear_feature+0x40>)
    4248:	589a      	ldr	r2, [r3, r2]
    424a:	8852      	ldrh	r2, [r2, #2]
    424c:	2a00      	cmp	r2, #0
    424e:	d109      	bne.n	4264 <udc_req_std_ep_clear_feature+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    4250:	4a07      	ldr	r2, [pc, #28]	; (4270 <udc_req_std_ep_clear_feature+0x40>)
    4252:	589a      	ldr	r2, [r3, r2]
    4254:	8892      	ldrh	r2, [r2, #4]
    4256:	b2d2      	uxtb	r2, r2
    4258:	0010      	movs	r0, r2
    425a:	4a06      	ldr	r2, [pc, #24]	; (4274 <udc_req_std_ep_clear_feature+0x44>)
    425c:	589b      	ldr	r3, [r3, r2]
    425e:	4798      	blx	r3
    4260:	0003      	movs	r3, r0
    4262:	e000      	b.n	4266 <udc_req_std_ep_clear_feature+0x36>
	}
	return false;
    4264:	2300      	movs	r3, #0
}
    4266:	0018      	movs	r0, r3
    4268:	46bd      	mov	sp, r7
    426a:	bd80      	pop	{r7, pc}
    426c:	0000db9a 	.word	0x0000db9a
    4270:	000001e0 	.word	0x000001e0
    4274:	000001b4 	.word	0x000001b4

00004278 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    4278:	b580      	push	{r7, lr}
    427a:	af00      	add	r7, sp, #0
    427c:	4b0a      	ldr	r3, [pc, #40]	; (42a8 <udc_req_std_dev_set_feature+0x30>)
    427e:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    4280:	4a0a      	ldr	r2, [pc, #40]	; (42ac <udc_req_std_dev_set_feature+0x34>)
    4282:	589a      	ldr	r2, [r3, r2]
    4284:	88d2      	ldrh	r2, [r2, #6]
    4286:	2a00      	cmp	r2, #0
    4288:	d001      	beq.n	428e <udc_req_std_dev_set_feature+0x16>
		return false;
    428a:	2300      	movs	r3, #0
    428c:	e008      	b.n	42a0 <udc_req_std_dev_set_feature+0x28>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    428e:	4a07      	ldr	r2, [pc, #28]	; (42ac <udc_req_std_dev_set_feature+0x34>)
    4290:	589b      	ldr	r3, [r3, r2]
    4292:	885b      	ldrh	r3, [r3, #2]
    4294:	2b01      	cmp	r3, #1
    4296:	d002      	beq.n	429e <udc_req_std_dev_set_feature+0x26>
			break;
		}
		break;
#endif
	default:
		break;
    4298:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    429a:	2300      	movs	r3, #0
    429c:	e000      	b.n	42a0 <udc_req_std_dev_set_feature+0x28>
		return false;
    429e:	2300      	movs	r3, #0
}
    42a0:	0018      	movs	r0, r3
    42a2:	46bd      	mov	sp, r7
    42a4:	bd80      	pop	{r7, pc}
    42a6:	46c0      	nop			; (mov r8, r8)
    42a8:	0000db52 	.word	0x0000db52
    42ac:	000001e0 	.word	0x000001e0

000042b0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    42b0:	b5b0      	push	{r4, r5, r7, lr}
    42b2:	af00      	add	r7, sp, #0
    42b4:	4c11      	ldr	r4, [pc, #68]	; (42fc <udc_req_std_ep_set_feature+0x4c>)
    42b6:	447c      	add	r4, pc
	if (udd_g_ctrlreq.req.wLength) {
    42b8:	4b11      	ldr	r3, [pc, #68]	; (4300 <udc_req_std_ep_set_feature+0x50>)
    42ba:	58e3      	ldr	r3, [r4, r3]
    42bc:	88db      	ldrh	r3, [r3, #6]
    42be:	2b00      	cmp	r3, #0
    42c0:	d001      	beq.n	42c6 <udc_req_std_ep_set_feature+0x16>
		return false;
    42c2:	2300      	movs	r3, #0
    42c4:	e017      	b.n	42f6 <udc_req_std_ep_set_feature+0x46>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    42c6:	4b0e      	ldr	r3, [pc, #56]	; (4300 <udc_req_std_ep_set_feature+0x50>)
    42c8:	58e3      	ldr	r3, [r4, r3]
    42ca:	885b      	ldrh	r3, [r3, #2]
    42cc:	2b00      	cmp	r3, #0
    42ce:	d111      	bne.n	42f4 <udc_req_std_ep_set_feature+0x44>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    42d0:	4b0b      	ldr	r3, [pc, #44]	; (4300 <udc_req_std_ep_set_feature+0x50>)
    42d2:	58e3      	ldr	r3, [r4, r3]
    42d4:	889b      	ldrh	r3, [r3, #4]
    42d6:	b2db      	uxtb	r3, r3
    42d8:	0018      	movs	r0, r3
    42da:	4b0a      	ldr	r3, [pc, #40]	; (4304 <udc_req_std_ep_set_feature+0x54>)
    42dc:	58e3      	ldr	r3, [r4, r3]
    42de:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    42e0:	4b07      	ldr	r3, [pc, #28]	; (4300 <udc_req_std_ep_set_feature+0x50>)
    42e2:	58e3      	ldr	r3, [r4, r3]
    42e4:	889b      	ldrh	r3, [r3, #4]
    42e6:	b2db      	uxtb	r3, r3
    42e8:	0018      	movs	r0, r3
    42ea:	4b07      	ldr	r3, [pc, #28]	; (4308 <udc_req_std_ep_set_feature+0x58>)
    42ec:	58e3      	ldr	r3, [r4, r3]
    42ee:	4798      	blx	r3
    42f0:	0003      	movs	r3, r0
    42f2:	e000      	b.n	42f6 <udc_req_std_ep_set_feature+0x46>
	}
	return false;
    42f4:	2300      	movs	r3, #0
}
    42f6:	0018      	movs	r0, r3
    42f8:	46bd      	mov	sp, r7
    42fa:	bdb0      	pop	{r4, r5, r7, pc}
    42fc:	0000db1a 	.word	0x0000db1a
    4300:	000001e0 	.word	0x000001e0
    4304:	000001b0 	.word	0x000001b0
    4308:	00000128 	.word	0x00000128

0000430c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    430c:	b580      	push	{r7, lr}
    430e:	af00      	add	r7, sp, #0
    4310:	4b07      	ldr	r3, [pc, #28]	; (4330 <udc_valid_address+0x24>)
    4312:	447b      	add	r3, pc
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    4314:	4a07      	ldr	r2, [pc, #28]	; (4334 <udc_valid_address+0x28>)
    4316:	589a      	ldr	r2, [r3, r2]
    4318:	8852      	ldrh	r2, [r2, #2]
    431a:	b2d2      	uxtb	r2, r2
    431c:	217f      	movs	r1, #127	; 0x7f
    431e:	400a      	ands	r2, r1
    4320:	b2d2      	uxtb	r2, r2
    4322:	0010      	movs	r0, r2
    4324:	4a04      	ldr	r2, [pc, #16]	; (4338 <udc_valid_address+0x2c>)
    4326:	589b      	ldr	r3, [r3, r2]
    4328:	4798      	blx	r3
}
    432a:	46c0      	nop			; (mov r8, r8)
    432c:	46bd      	mov	sp, r7
    432e:	bd80      	pop	{r7, pc}
    4330:	0000dabe 	.word	0x0000dabe
    4334:	000001e0 	.word	0x000001e0
    4338:	000002d0 	.word	0x000002d0

0000433c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    433c:	b580      	push	{r7, lr}
    433e:	af00      	add	r7, sp, #0
    4340:	4b08      	ldr	r3, [pc, #32]	; (4364 <udc_req_std_dev_set_address+0x28>)
    4342:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    4344:	4a08      	ldr	r2, [pc, #32]	; (4368 <udc_req_std_dev_set_address+0x2c>)
    4346:	589a      	ldr	r2, [r3, r2]
    4348:	88d2      	ldrh	r2, [r2, #6]
    434a:	2a00      	cmp	r2, #0
    434c:	d001      	beq.n	4352 <udc_req_std_dev_set_address+0x16>
		return false;
    434e:	2300      	movs	r3, #0
    4350:	e005      	b.n	435e <udc_req_std_dev_set_address+0x22>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    4352:	4a05      	ldr	r2, [pc, #20]	; (4368 <udc_req_std_dev_set_address+0x2c>)
    4354:	589b      	ldr	r3, [r3, r2]
    4356:	4a05      	ldr	r2, [pc, #20]	; (436c <udc_req_std_dev_set_address+0x30>)
    4358:	447a      	add	r2, pc
    435a:	611a      	str	r2, [r3, #16]
	return true;
    435c:	2301      	movs	r3, #1
}
    435e:	0018      	movs	r0, r3
    4360:	46bd      	mov	sp, r7
    4362:	bd80      	pop	{r7, pc}
    4364:	0000da8e 	.word	0x0000da8e
    4368:	000001e0 	.word	0x000001e0
    436c:	ffffffb1 	.word	0xffffffb1

00004370 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    4370:	b590      	push	{r4, r7, lr}
    4372:	b085      	sub	sp, #20
    4374:	af00      	add	r7, sp, #0
    4376:	4c3d      	ldr	r4, [pc, #244]	; (446c <udc_req_std_dev_get_str_desc+0xfc>)
    4378:	447c      	add	r4, pc
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    437a:	1dfb      	adds	r3, r7, #7
    437c:	2200      	movs	r2, #0
    437e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    4380:	4b3b      	ldr	r3, [pc, #236]	; (4470 <udc_req_std_dev_get_str_desc+0x100>)
    4382:	58e3      	ldr	r3, [r4, r3]
    4384:	885b      	ldrh	r3, [r3, #2]
    4386:	001a      	movs	r2, r3
    4388:	23ff      	movs	r3, #255	; 0xff
    438a:	4013      	ands	r3, r2
    438c:	2b03      	cmp	r3, #3
    438e:	d82a      	bhi.n	43e6 <udc_req_std_dev_get_str_desc+0x76>
    4390:	0018      	movs	r0, r3
    4392:	f00c f96d 	bl	10670 <__gnu_thumb1_case_si>
    4396:	46c0      	nop			; (mov r8, r8)
    4398:	00000010 	.word	0x00000010
    439c:	00000020 	.word	0x00000020
    43a0:	0000002e 	.word	0x0000002e
    43a4:	0000003c 	.word	0x0000003c
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    43a8:	4b32      	ldr	r3, [pc, #200]	; (4474 <udc_req_std_dev_get_str_desc+0x104>)
    43aa:	447b      	add	r3, pc
    43ac:	2104      	movs	r1, #4
    43ae:	0018      	movs	r0, r3
    43b0:	4b31      	ldr	r3, [pc, #196]	; (4478 <udc_req_std_dev_get_str_desc+0x108>)
    43b2:	58e3      	ldr	r3, [r4, r3]
    43b4:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    43b6:	e018      	b.n	43ea <udc_req_std_dev_get_str_desc+0x7a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    43b8:	1dfb      	adds	r3, r7, #7
    43ba:	220b      	movs	r2, #11
    43bc:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    43be:	4b2f      	ldr	r3, [pc, #188]	; (447c <udc_req_std_dev_get_str_desc+0x10c>)
    43c0:	447b      	add	r3, pc
    43c2:	60bb      	str	r3, [r7, #8]
		break;
    43c4:	e011      	b.n	43ea <udc_req_std_dev_get_str_desc+0x7a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    43c6:	1dfb      	adds	r3, r7, #7
    43c8:	2210      	movs	r2, #16
    43ca:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    43cc:	4b2c      	ldr	r3, [pc, #176]	; (4480 <udc_req_std_dev_get_str_desc+0x110>)
    43ce:	447b      	add	r3, pc
    43d0:	60bb      	str	r3, [r7, #8]
		break;
    43d2:	e00a      	b.n	43ea <udc_req_std_dev_get_str_desc+0x7a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    43d4:	1dfb      	adds	r3, r7, #7
    43d6:	2207      	movs	r2, #7
    43d8:	701a      	strb	r2, [r3, #0]
		str = udc_get_string_serial_name();
    43da:	4b2a      	ldr	r3, [pc, #168]	; (4484 <udc_req_std_dev_get_str_desc+0x114>)
    43dc:	447b      	add	r3, pc
    43de:	4798      	blx	r3
    43e0:	0003      	movs	r3, r0
    43e2:	60bb      	str	r3, [r7, #8]
		break;
    43e4:	e001      	b.n	43ea <udc_req_std_dev_get_str_desc+0x7a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    43e6:	2300      	movs	r3, #0
    43e8:	e03c      	b.n	4464 <udc_req_std_dev_get_str_desc+0xf4>
	}

	if (str_length) {
    43ea:	1dfb      	adds	r3, r7, #7
    43ec:	781b      	ldrb	r3, [r3, #0]
    43ee:	2b00      	cmp	r3, #0
    43f0:	d037      	beq.n	4462 <udc_req_std_dev_get_str_desc+0xf2>
		for(i = 0; i < str_length; i++) {
    43f2:	230f      	movs	r3, #15
    43f4:	18fb      	adds	r3, r7, r3
    43f6:	2200      	movs	r2, #0
    43f8:	701a      	strb	r2, [r3, #0]
    43fa:	e017      	b.n	442c <udc_req_std_dev_get_str_desc+0xbc>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    43fc:	230f      	movs	r3, #15
    43fe:	18fb      	adds	r3, r7, r3
    4400:	781b      	ldrb	r3, [r3, #0]
    4402:	220f      	movs	r2, #15
    4404:	18ba      	adds	r2, r7, r2
    4406:	7812      	ldrb	r2, [r2, #0]
    4408:	68b9      	ldr	r1, [r7, #8]
    440a:	188a      	adds	r2, r1, r2
    440c:	7812      	ldrb	r2, [r2, #0]
    440e:	b291      	uxth	r1, r2
    4410:	4a1d      	ldr	r2, [pc, #116]	; (4488 <udc_req_std_dev_get_str_desc+0x118>)
    4412:	447a      	add	r2, pc
    4414:	005b      	lsls	r3, r3, #1
    4416:	18d3      	adds	r3, r2, r3
    4418:	3302      	adds	r3, #2
    441a:	1c0a      	adds	r2, r1, #0
    441c:	801a      	strh	r2, [r3, #0]
		for(i = 0; i < str_length; i++) {
    441e:	230f      	movs	r3, #15
    4420:	18fb      	adds	r3, r7, r3
    4422:	781a      	ldrb	r2, [r3, #0]
    4424:	230f      	movs	r3, #15
    4426:	18fb      	adds	r3, r7, r3
    4428:	3201      	adds	r2, #1
    442a:	701a      	strb	r2, [r3, #0]
    442c:	230f      	movs	r3, #15
    442e:	18fa      	adds	r2, r7, r3
    4430:	1dfb      	adds	r3, r7, #7
    4432:	7812      	ldrb	r2, [r2, #0]
    4434:	781b      	ldrb	r3, [r3, #0]
    4436:	429a      	cmp	r2, r3
    4438:	d3e0      	bcc.n	43fc <udc_req_std_dev_get_str_desc+0x8c>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    443a:	1dfb      	adds	r3, r7, #7
    443c:	781b      	ldrb	r3, [r3, #0]
    443e:	3301      	adds	r3, #1
    4440:	b2db      	uxtb	r3, r3
    4442:	18db      	adds	r3, r3, r3
    4444:	b2da      	uxtb	r2, r3
    4446:	4b11      	ldr	r3, [pc, #68]	; (448c <udc_req_std_dev_get_str_desc+0x11c>)
    4448:	447b      	add	r3, pc
    444a:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    444c:	4b10      	ldr	r3, [pc, #64]	; (4490 <udc_req_std_dev_get_str_desc+0x120>)
    444e:	447b      	add	r3, pc
    4450:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
    4452:	b29b      	uxth	r3, r3
    4454:	4a0f      	ldr	r2, [pc, #60]	; (4494 <udc_req_std_dev_get_str_desc+0x124>)
    4456:	447a      	add	r2, pc
    4458:	0019      	movs	r1, r3
    445a:	0010      	movs	r0, r2
    445c:	4b06      	ldr	r3, [pc, #24]	; (4478 <udc_req_std_dev_get_str_desc+0x108>)
    445e:	58e3      	ldr	r3, [r4, r3]
    4460:	4798      	blx	r3
	}

	return true;
    4462:	2301      	movs	r3, #1
}
    4464:	0018      	movs	r0, r3
    4466:	46bd      	mov	sp, r7
    4468:	b005      	add	sp, #20
    446a:	bd90      	pop	{r4, r7, pc}
    446c:	0000da58 	.word	0x0000da58
    4470:	000001e0 	.word	0x000001e0
    4474:	1fffbcfa 	.word	0x1fffbcfa
    4478:	0000005c 	.word	0x0000005c
    447c:	1fffbce8 	.word	0x1fffbce8
    4480:	1fffbce6 	.word	0x1fffbce6
    4484:	fffff955 	.word	0xfffff955
    4488:	1fffbcb6 	.word	0x1fffbcb6
    448c:	1fffbc80 	.word	0x1fffbc80
    4490:	1fffbc7a 	.word	0x1fffbc7a
    4494:	1fffbc72 	.word	0x1fffbc72

00004498 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    4498:	b590      	push	{r4, r7, lr}
    449a:	b083      	sub	sp, #12
    449c:	af00      	add	r7, sp, #0
    449e:	4c51      	ldr	r4, [pc, #324]	; (45e4 <udc_req_std_dev_get_descriptor+0x14c>)
    44a0:	447c      	add	r4, pc
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    44a2:	4b51      	ldr	r3, [pc, #324]	; (45e8 <udc_req_std_dev_get_descriptor+0x150>)
    44a4:	58e3      	ldr	r3, [r4, r3]
    44a6:	885a      	ldrh	r2, [r3, #2]
    44a8:	1dfb      	adds	r3, r7, #7
    44aa:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    44ac:	4b4e      	ldr	r3, [pc, #312]	; (45e8 <udc_req_std_dev_get_descriptor+0x150>)
    44ae:	58e3      	ldr	r3, [r4, r3]
    44b0:	885b      	ldrh	r3, [r3, #2]
    44b2:	0a1b      	lsrs	r3, r3, #8
    44b4:	b29b      	uxth	r3, r3
    44b6:	b2db      	uxtb	r3, r3
    44b8:	3b01      	subs	r3, #1
    44ba:	2b0e      	cmp	r3, #14
    44bc:	d900      	bls.n	44c0 <udc_req_std_dev_get_descriptor+0x28>
    44be:	e07b      	b.n	45b8 <udc_req_std_dev_get_descriptor+0x120>
    44c0:	0018      	movs	r0, r3
    44c2:	f00c f8d5 	bl	10670 <__gnu_thumb1_case_si>
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	0000003c 	.word	0x0000003c
    44cc:	00000058 	.word	0x00000058
    44d0:	000000d8 	.word	0x000000d8
    44d4:	000000f0 	.word	0x000000f0
    44d8:	000000f0 	.word	0x000000f0
    44dc:	000000f0 	.word	0x000000f0
    44e0:	000000f0 	.word	0x000000f0
    44e4:	000000f0 	.word	0x000000f0
    44e8:	000000f0 	.word	0x000000f0
    44ec:	000000f0 	.word	0x000000f0
    44f0:	000000f0 	.word	0x000000f0
    44f4:	000000f0 	.word	0x000000f0
    44f8:	000000f0 	.word	0x000000f0
    44fc:	000000f0 	.word	0x000000f0
    4500:	000000aa 	.word	0x000000aa
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    4504:	4b39      	ldr	r3, [pc, #228]	; (45ec <udc_req_std_dev_get_descriptor+0x154>)
    4506:	58e3      	ldr	r3, [r4, r3]
    4508:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    450a:	4b38      	ldr	r3, [pc, #224]	; (45ec <udc_req_std_dev_get_descriptor+0x154>)
    450c:	58e3      	ldr	r3, [r4, r3]
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
    4512:	b29b      	uxth	r3, r3
    4514:	0019      	movs	r1, r3
    4516:	0010      	movs	r0, r2
    4518:	4b35      	ldr	r3, [pc, #212]	; (45f0 <udc_req_std_dev_get_descriptor+0x158>)
    451a:	58e3      	ldr	r3, [r4, r3]
    451c:	4798      	blx	r3
		}
		break;
    451e:	e04e      	b.n	45be <udc_req_std_dev_get_descriptor+0x126>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    4520:	4b32      	ldr	r3, [pc, #200]	; (45ec <udc_req_std_dev_get_descriptor+0x154>)
    4522:	58e3      	ldr	r3, [r4, r3]
    4524:	681b      	ldr	r3, [r3, #0]
    4526:	7c5b      	ldrb	r3, [r3, #17]
    4528:	1dfa      	adds	r2, r7, #7
    452a:	7812      	ldrb	r2, [r2, #0]
    452c:	429a      	cmp	r2, r3
    452e:	d301      	bcc.n	4534 <udc_req_std_dev_get_descriptor+0x9c>
					bNumConfigurations) {
				return false;
    4530:	2300      	movs	r3, #0
    4532:	e053      	b.n	45dc <udc_req_std_dev_get_descriptor+0x144>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    4534:	4b2d      	ldr	r3, [pc, #180]	; (45ec <udc_req_std_dev_get_descriptor+0x154>)
    4536:	58e3      	ldr	r3, [r4, r3]
    4538:	685a      	ldr	r2, [r3, #4]
    453a:	1dfb      	adds	r3, r7, #7
    453c:	781b      	ldrb	r3, [r3, #0]
    453e:	00db      	lsls	r3, r3, #3
    4540:	18d3      	adds	r3, r2, r3
    4542:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    4544:	4b29      	ldr	r3, [pc, #164]	; (45ec <udc_req_std_dev_get_descriptor+0x154>)
    4546:	58e3      	ldr	r3, [r4, r3]
    4548:	685a      	ldr	r2, [r3, #4]
    454a:	1dfb      	adds	r3, r7, #7
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	00db      	lsls	r3, r3, #3
    4550:	18d3      	adds	r3, r2, r3
    4552:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
    4554:	789a      	ldrb	r2, [r3, #2]
    4556:	78db      	ldrb	r3, [r3, #3]
    4558:	021b      	lsls	r3, r3, #8
    455a:	4313      	orrs	r3, r2
    455c:	b29b      	uxth	r3, r3
    455e:	0019      	movs	r1, r3
    4560:	4b23      	ldr	r3, [pc, #140]	; (45f0 <udc_req_std_dev_get_descriptor+0x158>)
    4562:	58e3      	ldr	r3, [r4, r3]
    4564:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    4566:	4b20      	ldr	r3, [pc, #128]	; (45e8 <udc_req_std_dev_get_descriptor+0x150>)
    4568:	58e3      	ldr	r3, [r4, r3]
    456a:	689b      	ldr	r3, [r3, #8]
    456c:	2202      	movs	r2, #2
    456e:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    4570:	e025      	b.n	45be <udc_req_std_dev_get_descriptor+0x126>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    4572:	4b1e      	ldr	r3, [pc, #120]	; (45ec <udc_req_std_dev_get_descriptor+0x154>)
    4574:	58e3      	ldr	r3, [r4, r3]
    4576:	689b      	ldr	r3, [r3, #8]
    4578:	2b00      	cmp	r3, #0
    457a:	d101      	bne.n	4580 <udc_req_std_dev_get_descriptor+0xe8>
			return false;
    457c:	2300      	movs	r3, #0
    457e:	e02d      	b.n	45dc <udc_req_std_dev_get_descriptor+0x144>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    4580:	4b1a      	ldr	r3, [pc, #104]	; (45ec <udc_req_std_dev_get_descriptor+0x154>)
    4582:	58e3      	ldr	r3, [r4, r3]
    4584:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    4586:	4b19      	ldr	r3, [pc, #100]	; (45ec <udc_req_std_dev_get_descriptor+0x154>)
    4588:	58e3      	ldr	r3, [r4, r3]
    458a:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    458c:	789a      	ldrb	r2, [r3, #2]
    458e:	78db      	ldrb	r3, [r3, #3]
    4590:	021b      	lsls	r3, r3, #8
    4592:	4313      	orrs	r3, r2
    4594:	b29b      	uxth	r3, r3
    4596:	0019      	movs	r1, r3
    4598:	4b15      	ldr	r3, [pc, #84]	; (45f0 <udc_req_std_dev_get_descriptor+0x158>)
    459a:	58e3      	ldr	r3, [r4, r3]
    459c:	4798      	blx	r3
		break;
    459e:	e00e      	b.n	45be <udc_req_std_dev_get_descriptor+0x126>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    45a0:	4b14      	ldr	r3, [pc, #80]	; (45f4 <udc_req_std_dev_get_descriptor+0x15c>)
    45a2:	447b      	add	r3, pc
    45a4:	4798      	blx	r3
    45a6:	0003      	movs	r3, r0
    45a8:	001a      	movs	r2, r3
    45aa:	2301      	movs	r3, #1
    45ac:	4053      	eors	r3, r2
    45ae:	b2db      	uxtb	r3, r3
    45b0:	2b00      	cmp	r3, #0
    45b2:	d003      	beq.n	45bc <udc_req_std_dev_get_descriptor+0x124>
			return false;
    45b4:	2300      	movs	r3, #0
    45b6:	e011      	b.n	45dc <udc_req_std_dev_get_descriptor+0x144>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    45b8:	2300      	movs	r3, #0
    45ba:	e00f      	b.n	45dc <udc_req_std_dev_get_descriptor+0x144>
		break;
    45bc:	46c0      	nop			; (mov r8, r8)
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    45be:	4b0a      	ldr	r3, [pc, #40]	; (45e8 <udc_req_std_dev_get_descriptor+0x150>)
    45c0:	58e3      	ldr	r3, [r4, r3]
    45c2:	88da      	ldrh	r2, [r3, #6]
    45c4:	4b08      	ldr	r3, [pc, #32]	; (45e8 <udc_req_std_dev_get_descriptor+0x150>)
    45c6:	58e3      	ldr	r3, [r4, r3]
    45c8:	899b      	ldrh	r3, [r3, #12]
    45ca:	429a      	cmp	r2, r3
    45cc:	d205      	bcs.n	45da <udc_req_std_dev_get_descriptor+0x142>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    45ce:	4b06      	ldr	r3, [pc, #24]	; (45e8 <udc_req_std_dev_get_descriptor+0x150>)
    45d0:	58e3      	ldr	r3, [r4, r3]
    45d2:	88da      	ldrh	r2, [r3, #6]
    45d4:	4b04      	ldr	r3, [pc, #16]	; (45e8 <udc_req_std_dev_get_descriptor+0x150>)
    45d6:	58e3      	ldr	r3, [r4, r3]
    45d8:	819a      	strh	r2, [r3, #12]
	}
	return true;
    45da:	2301      	movs	r3, #1
}
    45dc:	0018      	movs	r0, r3
    45de:	46bd      	mov	sp, r7
    45e0:	b003      	add	sp, #12
    45e2:	bd90      	pop	{r4, r7, pc}
    45e4:	0000d930 	.word	0x0000d930
    45e8:	000001e0 	.word	0x000001e0
    45ec:	00000118 	.word	0x00000118
    45f0:	0000005c 	.word	0x0000005c
    45f4:	fffffdcb 	.word	0xfffffdcb

000045f8 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    45f8:	b580      	push	{r7, lr}
    45fa:	af00      	add	r7, sp, #0
    45fc:	4b09      	ldr	r3, [pc, #36]	; (4624 <udc_req_std_dev_get_configuration+0x2c>)
    45fe:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength != 1) {
    4600:	4a09      	ldr	r2, [pc, #36]	; (4628 <udc_req_std_dev_get_configuration+0x30>)
    4602:	589a      	ldr	r2, [r3, r2]
    4604:	88d2      	ldrh	r2, [r2, #6]
    4606:	2a01      	cmp	r2, #1
    4608:	d001      	beq.n	460e <udc_req_std_dev_get_configuration+0x16>
		return false;
    460a:	2300      	movs	r3, #0
    460c:	e007      	b.n	461e <udc_req_std_dev_get_configuration+0x26>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    460e:	4a07      	ldr	r2, [pc, #28]	; (462c <udc_req_std_dev_get_configuration+0x34>)
    4610:	447a      	add	r2, pc
    4612:	2101      	movs	r1, #1
    4614:	0010      	movs	r0, r2
    4616:	4a06      	ldr	r2, [pc, #24]	; (4630 <udc_req_std_dev_get_configuration+0x38>)
    4618:	589b      	ldr	r3, [r3, r2]
    461a:	4798      	blx	r3
	return true;
    461c:	2301      	movs	r3, #1
}
    461e:	0018      	movs	r0, r3
    4620:	46bd      	mov	sp, r7
    4622:	bd80      	pop	{r7, pc}
    4624:	0000d7d2 	.word	0x0000d7d2
    4628:	000001e0 	.word	0x000001e0
    462c:	1fffbf04 	.word	0x1fffbf04
    4630:	0000005c 	.word	0x0000005c

00004634 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    4634:	b590      	push	{r4, r7, lr}
    4636:	b083      	sub	sp, #12
    4638:	af00      	add	r7, sp, #0
    463a:	4c32      	ldr	r4, [pc, #200]	; (4704 <udc_req_std_dev_set_configuration+0xd0>)
    463c:	447c      	add	r4, pc
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    463e:	4b32      	ldr	r3, [pc, #200]	; (4708 <udc_req_std_dev_set_configuration+0xd4>)
    4640:	58e3      	ldr	r3, [r4, r3]
    4642:	88db      	ldrh	r3, [r3, #6]
    4644:	2b00      	cmp	r3, #0
    4646:	d001      	beq.n	464c <udc_req_std_dev_set_configuration+0x18>
		return false;
    4648:	2300      	movs	r3, #0
    464a:	e056      	b.n	46fa <udc_req_std_dev_set_configuration+0xc6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    464c:	4b2f      	ldr	r3, [pc, #188]	; (470c <udc_req_std_dev_set_configuration+0xd8>)
    464e:	58e3      	ldr	r3, [r4, r3]
    4650:	4798      	blx	r3
    4652:	1e03      	subs	r3, r0, #0
    4654:	d101      	bne.n	465a <udc_req_std_dev_set_configuration+0x26>
		return false;
    4656:	2300      	movs	r3, #0
    4658:	e04f      	b.n	46fa <udc_req_std_dev_set_configuration+0xc6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    465a:	4b2b      	ldr	r3, [pc, #172]	; (4708 <udc_req_std_dev_set_configuration+0xd4>)
    465c:	58e3      	ldr	r3, [r4, r3]
    465e:	885b      	ldrh	r3, [r3, #2]
    4660:	001a      	movs	r2, r3
    4662:	23ff      	movs	r3, #255	; 0xff
    4664:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    4666:	4b2a      	ldr	r3, [pc, #168]	; (4710 <udc_req_std_dev_set_configuration+0xdc>)
    4668:	58e3      	ldr	r3, [r4, r3]
    466a:	681b      	ldr	r3, [r3, #0]
    466c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    466e:	429a      	cmp	r2, r3
    4670:	dd01      	ble.n	4676 <udc_req_std_dev_set_configuration+0x42>
			return false;
    4672:	2300      	movs	r3, #0
    4674:	e041      	b.n	46fa <udc_req_std_dev_set_configuration+0xc6>
		}
	}

	// Reset current configuration
	udc_reset();
    4676:	4b27      	ldr	r3, [pc, #156]	; (4714 <udc_req_std_dev_set_configuration+0xe0>)
    4678:	58e3      	ldr	r3, [r4, r3]
    467a:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    467c:	4b22      	ldr	r3, [pc, #136]	; (4708 <udc_req_std_dev_set_configuration+0xd4>)
    467e:	58e3      	ldr	r3, [r4, r3]
    4680:	885b      	ldrh	r3, [r3, #2]
    4682:	b2da      	uxtb	r2, r3
    4684:	4b24      	ldr	r3, [pc, #144]	; (4718 <udc_req_std_dev_set_configuration+0xe4>)
    4686:	447b      	add	r3, pc
    4688:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    468a:	4b24      	ldr	r3, [pc, #144]	; (471c <udc_req_std_dev_set_configuration+0xe8>)
    468c:	447b      	add	r3, pc
    468e:	781b      	ldrb	r3, [r3, #0]
    4690:	2b00      	cmp	r3, #0
    4692:	d101      	bne.n	4698 <udc_req_std_dev_set_configuration+0x64>
		return true; // Default empty configuration requested
    4694:	2301      	movs	r3, #1
    4696:	e030      	b.n	46fa <udc_req_std_dev_set_configuration+0xc6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    4698:	4b1d      	ldr	r3, [pc, #116]	; (4710 <udc_req_std_dev_set_configuration+0xdc>)
    469a:	58e3      	ldr	r3, [r4, r3]
    469c:	685a      	ldr	r2, [r3, #4]
    469e:	4b20      	ldr	r3, [pc, #128]	; (4720 <udc_req_std_dev_set_configuration+0xec>)
    46a0:	447b      	add	r3, pc
    46a2:	781b      	ldrb	r3, [r3, #0]
    46a4:	491f      	ldr	r1, [pc, #124]	; (4724 <udc_req_std_dev_set_configuration+0xf0>)
    46a6:	468c      	mov	ip, r1
    46a8:	4463      	add	r3, ip
    46aa:	00db      	lsls	r3, r3, #3
    46ac:	18d2      	adds	r2, r2, r3
    46ae:	4b1e      	ldr	r3, [pc, #120]	; (4728 <udc_req_std_dev_set_configuration+0xf4>)
    46b0:	447b      	add	r3, pc
    46b2:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    46b4:	1dfb      	adds	r3, r7, #7
    46b6:	2200      	movs	r2, #0
    46b8:	701a      	strb	r2, [r3, #0]
    46ba:	e014      	b.n	46e6 <udc_req_std_dev_set_configuration+0xb2>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    46bc:	1dfb      	adds	r3, r7, #7
    46be:	781b      	ldrb	r3, [r3, #0]
    46c0:	2100      	movs	r1, #0
    46c2:	0018      	movs	r0, r3
    46c4:	4b19      	ldr	r3, [pc, #100]	; (472c <udc_req_std_dev_set_configuration+0xf8>)
    46c6:	447b      	add	r3, pc
    46c8:	4798      	blx	r3
    46ca:	0003      	movs	r3, r0
    46cc:	001a      	movs	r2, r3
    46ce:	2301      	movs	r3, #1
    46d0:	4053      	eors	r3, r2
    46d2:	b2db      	uxtb	r3, r3
    46d4:	2b00      	cmp	r3, #0
    46d6:	d001      	beq.n	46dc <udc_req_std_dev_set_configuration+0xa8>
			return false;
    46d8:	2300      	movs	r3, #0
    46da:	e00e      	b.n	46fa <udc_req_std_dev_set_configuration+0xc6>
			iface_num++) {
    46dc:	1dfb      	adds	r3, r7, #7
    46de:	781a      	ldrb	r2, [r3, #0]
    46e0:	1dfb      	adds	r3, r7, #7
    46e2:	3201      	adds	r2, #1
    46e4:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    46e6:	4b12      	ldr	r3, [pc, #72]	; (4730 <udc_req_std_dev_set_configuration+0xfc>)
    46e8:	447b      	add	r3, pc
    46ea:	681b      	ldr	r3, [r3, #0]
    46ec:	681b      	ldr	r3, [r3, #0]
    46ee:	791b      	ldrb	r3, [r3, #4]
    46f0:	1dfa      	adds	r2, r7, #7
    46f2:	7812      	ldrb	r2, [r2, #0]
    46f4:	429a      	cmp	r2, r3
    46f6:	d3e1      	bcc.n	46bc <udc_req_std_dev_set_configuration+0x88>
		}
	}
	return true;
    46f8:	2301      	movs	r3, #1
}
    46fa:	0018      	movs	r0, r3
    46fc:	46bd      	mov	sp, r7
    46fe:	b003      	add	sp, #12
    4700:	bd90      	pop	{r4, r7, pc}
    4702:	46c0      	nop			; (mov r8, r8)
    4704:	0000d794 	.word	0x0000d794
    4708:	000001e0 	.word	0x000001e0
    470c:	00000038 	.word	0x00000038
    4710:	00000118 	.word	0x00000118
    4714:	000000a0 	.word	0x000000a0
    4718:	1fffbe8e 	.word	0x1fffbe8e
    471c:	1fffbe88 	.word	0x1fffbe88
    4720:	1fffbe74 	.word	0x1fffbe74
    4724:	1fffffff 	.word	0x1fffffff
    4728:	1fffbe68 	.word	0x1fffbe68
    472c:	fffff8b7 	.word	0xfffff8b7
    4730:	1fffbe30 	.word	0x1fffbe30

00004734 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    4734:	b590      	push	{r4, r7, lr}
    4736:	b083      	sub	sp, #12
    4738:	af00      	add	r7, sp, #0
    473a:	4c27      	ldr	r4, [pc, #156]	; (47d8 <udc_req_std_iface_get_setting+0xa4>)
    473c:	447c      	add	r4, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    473e:	4b27      	ldr	r3, [pc, #156]	; (47dc <udc_req_std_iface_get_setting+0xa8>)
    4740:	58e3      	ldr	r3, [r4, r3]
    4742:	88db      	ldrh	r3, [r3, #6]
    4744:	2b01      	cmp	r3, #1
    4746:	d001      	beq.n	474c <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
    4748:	2300      	movs	r3, #0
    474a:	e040      	b.n	47ce <udc_req_std_iface_get_setting+0x9a>
	}
	if (!udc_num_configuration) {
    474c:	4b24      	ldr	r3, [pc, #144]	; (47e0 <udc_req_std_iface_get_setting+0xac>)
    474e:	447b      	add	r3, pc
    4750:	781b      	ldrb	r3, [r3, #0]
    4752:	2b00      	cmp	r3, #0
    4754:	d101      	bne.n	475a <udc_req_std_iface_get_setting+0x26>
		return false; // The device is not is configured state yet
    4756:	2300      	movs	r3, #0
    4758:	e039      	b.n	47ce <udc_req_std_iface_get_setting+0x9a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    475a:	4b20      	ldr	r3, [pc, #128]	; (47dc <udc_req_std_iface_get_setting+0xa8>)
    475c:	58e3      	ldr	r3, [r4, r3]
    475e:	889a      	ldrh	r2, [r3, #4]
    4760:	1dfb      	adds	r3, r7, #7
    4762:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4764:	4b1f      	ldr	r3, [pc, #124]	; (47e4 <udc_req_std_iface_get_setting+0xb0>)
    4766:	447b      	add	r3, pc
    4768:	681b      	ldr	r3, [r3, #0]
    476a:	681b      	ldr	r3, [r3, #0]
    476c:	791b      	ldrb	r3, [r3, #4]
    476e:	1dfa      	adds	r2, r7, #7
    4770:	7812      	ldrb	r2, [r2, #0]
    4772:	429a      	cmp	r2, r3
    4774:	d301      	bcc.n	477a <udc_req_std_iface_get_setting+0x46>
		return false;
    4776:	2300      	movs	r3, #0
    4778:	e029      	b.n	47ce <udc_req_std_iface_get_setting+0x9a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    477a:	1dfb      	adds	r3, r7, #7
    477c:	781b      	ldrb	r3, [r3, #0]
    477e:	2100      	movs	r1, #0
    4780:	0018      	movs	r0, r3
    4782:	4b19      	ldr	r3, [pc, #100]	; (47e8 <udc_req_std_iface_get_setting+0xb4>)
    4784:	447b      	add	r3, pc
    4786:	4798      	blx	r3
    4788:	0003      	movs	r3, r0
    478a:	001a      	movs	r2, r3
    478c:	2301      	movs	r3, #1
    478e:	4053      	eors	r3, r2
    4790:	b2db      	uxtb	r3, r3
    4792:	2b00      	cmp	r3, #0
    4794:	d001      	beq.n	479a <udc_req_std_iface_get_setting+0x66>
		return false;
    4796:	2300      	movs	r3, #0
    4798:	e019      	b.n	47ce <udc_req_std_iface_get_setting+0x9a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    479a:	4b14      	ldr	r3, [pc, #80]	; (47ec <udc_req_std_iface_get_setting+0xb8>)
    479c:	447b      	add	r3, pc
    479e:	681b      	ldr	r3, [r3, #0]
    47a0:	685a      	ldr	r2, [r3, #4]
    47a2:	1dfb      	adds	r3, r7, #7
    47a4:	781b      	ldrb	r3, [r3, #0]
    47a6:	009b      	lsls	r3, r3, #2
    47a8:	18d3      	adds	r3, r2, r3
    47aa:	681b      	ldr	r3, [r3, #0]
    47ac:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    47ae:	683b      	ldr	r3, [r7, #0]
    47b0:	68db      	ldr	r3, [r3, #12]
    47b2:	4798      	blx	r3
    47b4:	0003      	movs	r3, r0
    47b6:	001a      	movs	r2, r3
    47b8:	4b0d      	ldr	r3, [pc, #52]	; (47f0 <udc_req_std_iface_get_setting+0xbc>)
    47ba:	447b      	add	r3, pc
    47bc:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    47be:	4b0d      	ldr	r3, [pc, #52]	; (47f4 <udc_req_std_iface_get_setting+0xc0>)
    47c0:	447b      	add	r3, pc
    47c2:	2101      	movs	r1, #1
    47c4:	0018      	movs	r0, r3
    47c6:	4b0c      	ldr	r3, [pc, #48]	; (47f8 <udc_req_std_iface_get_setting+0xc4>)
    47c8:	58e3      	ldr	r3, [r4, r3]
    47ca:	4798      	blx	r3
	return true;
    47cc:	2301      	movs	r3, #1
}
    47ce:	0018      	movs	r0, r3
    47d0:	46bd      	mov	sp, r7
    47d2:	b003      	add	sp, #12
    47d4:	bd90      	pop	{r4, r7, pc}
    47d6:	46c0      	nop			; (mov r8, r8)
    47d8:	0000d694 	.word	0x0000d694
    47dc:	000001e0 	.word	0x000001e0
    47e0:	1fffbdc6 	.word	0x1fffbdc6
    47e4:	1fffbdb2 	.word	0x1fffbdb2
    47e8:	fffff655 	.word	0xfffff655
    47ec:	1fffbd7c 	.word	0x1fffbd7c
    47f0:	1fffbd56 	.word	0x1fffbd56
    47f4:	1fffbd50 	.word	0x1fffbd50
    47f8:	0000005c 	.word	0x0000005c

000047fc <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    47fc:	b580      	push	{r7, lr}
    47fe:	b082      	sub	sp, #8
    4800:	af00      	add	r7, sp, #0
    4802:	4b1b      	ldr	r3, [pc, #108]	; (4870 <udc_req_std_iface_set_setting+0x74>)
    4804:	447b      	add	r3, pc
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    4806:	4a1b      	ldr	r2, [pc, #108]	; (4874 <udc_req_std_iface_set_setting+0x78>)
    4808:	589a      	ldr	r2, [r3, r2]
    480a:	88d2      	ldrh	r2, [r2, #6]
    480c:	2a00      	cmp	r2, #0
    480e:	d001      	beq.n	4814 <udc_req_std_iface_set_setting+0x18>
		return false; // Error in request
    4810:	2300      	movs	r3, #0
    4812:	e029      	b.n	4868 <udc_req_std_iface_set_setting+0x6c>
	}
	if (!udc_num_configuration) {
    4814:	4a18      	ldr	r2, [pc, #96]	; (4878 <udc_req_std_iface_set_setting+0x7c>)
    4816:	447a      	add	r2, pc
    4818:	7812      	ldrb	r2, [r2, #0]
    481a:	2a00      	cmp	r2, #0
    481c:	d101      	bne.n	4822 <udc_req_std_iface_set_setting+0x26>
		return false; // The device is not is configured state yet
    481e:	2300      	movs	r3, #0
    4820:	e022      	b.n	4868 <udc_req_std_iface_set_setting+0x6c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4822:	4a14      	ldr	r2, [pc, #80]	; (4874 <udc_req_std_iface_set_setting+0x78>)
    4824:	589a      	ldr	r2, [r3, r2]
    4826:	8891      	ldrh	r1, [r2, #4]
    4828:	1dfa      	adds	r2, r7, #7
    482a:	7011      	strb	r1, [r2, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    482c:	4a11      	ldr	r2, [pc, #68]	; (4874 <udc_req_std_iface_set_setting+0x78>)
    482e:	589b      	ldr	r3, [r3, r2]
    4830:	885a      	ldrh	r2, [r3, #2]
    4832:	1dbb      	adds	r3, r7, #6
    4834:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    4836:	1dfb      	adds	r3, r7, #7
    4838:	781b      	ldrb	r3, [r3, #0]
    483a:	0018      	movs	r0, r3
    483c:	4b0f      	ldr	r3, [pc, #60]	; (487c <udc_req_std_iface_set_setting+0x80>)
    483e:	447b      	add	r3, pc
    4840:	4798      	blx	r3
    4842:	0003      	movs	r3, r0
    4844:	001a      	movs	r2, r3
    4846:	2301      	movs	r3, #1
    4848:	4053      	eors	r3, r2
    484a:	b2db      	uxtb	r3, r3
    484c:	2b00      	cmp	r3, #0
    484e:	d001      	beq.n	4854 <udc_req_std_iface_set_setting+0x58>
		return false;
    4850:	2300      	movs	r3, #0
    4852:	e009      	b.n	4868 <udc_req_std_iface_set_setting+0x6c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    4854:	1dbb      	adds	r3, r7, #6
    4856:	781a      	ldrb	r2, [r3, #0]
    4858:	1dfb      	adds	r3, r7, #7
    485a:	781b      	ldrb	r3, [r3, #0]
    485c:	0011      	movs	r1, r2
    485e:	0018      	movs	r0, r3
    4860:	4b07      	ldr	r3, [pc, #28]	; (4880 <udc_req_std_iface_set_setting+0x84>)
    4862:	447b      	add	r3, pc
    4864:	4798      	blx	r3
    4866:	0003      	movs	r3, r0
}
    4868:	0018      	movs	r0, r3
    486a:	46bd      	mov	sp, r7
    486c:	b002      	add	sp, #8
    486e:	bd80      	pop	{r7, pc}
    4870:	0000d5cc 	.word	0x0000d5cc
    4874:	000001e0 	.word	0x000001e0
    4878:	1fffbcfe 	.word	0x1fffbcfe
    487c:	fffff677 	.word	0xfffff677
    4880:	fffff71b 	.word	0xfffff71b

00004884 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    4884:	b580      	push	{r7, lr}
    4886:	af00      	add	r7, sp, #0
    4888:	4b5e      	ldr	r3, [pc, #376]	; (4a04 <udc_reqstd+0x180>)
    488a:	447b      	add	r3, pc
	if (Udd_setup_is_in()) {
    488c:	4a5e      	ldr	r2, [pc, #376]	; (4a08 <udc_reqstd+0x184>)
    488e:	589a      	ldr	r2, [r3, r2]
    4890:	7812      	ldrb	r2, [r2, #0]
    4892:	b252      	sxtb	r2, r2
    4894:	2a00      	cmp	r2, #0
    4896:	da4d      	bge.n	4934 <udc_reqstd+0xb0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    4898:	4a5b      	ldr	r2, [pc, #364]	; (4a08 <udc_reqstd+0x184>)
    489a:	589a      	ldr	r2, [r3, r2]
    489c:	88d2      	ldrh	r2, [r2, #6]
    489e:	2a00      	cmp	r2, #0
    48a0:	d101      	bne.n	48a6 <udc_reqstd+0x22>
			return false; // Error for USB host
    48a2:	2300      	movs	r3, #0
    48a4:	e0ab      	b.n	49fe <udc_reqstd+0x17a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    48a6:	4a58      	ldr	r2, [pc, #352]	; (4a08 <udc_reqstd+0x184>)
    48a8:	589a      	ldr	r2, [r3, r2]
    48aa:	7812      	ldrb	r2, [r2, #0]
    48ac:	0011      	movs	r1, r2
    48ae:	221f      	movs	r2, #31
    48b0:	400a      	ands	r2, r1
    48b2:	d118      	bne.n	48e6 <udc_reqstd+0x62>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    48b4:	4a54      	ldr	r2, [pc, #336]	; (4a08 <udc_reqstd+0x184>)
    48b6:	589a      	ldr	r2, [r3, r2]
    48b8:	7852      	ldrb	r2, [r2, #1]
    48ba:	2a06      	cmp	r2, #6
    48bc:	d009      	beq.n	48d2 <udc_reqstd+0x4e>
    48be:	2a08      	cmp	r2, #8
    48c0:	d00c      	beq.n	48dc <udc_reqstd+0x58>
    48c2:	2a00      	cmp	r2, #0
    48c4:	d000      	beq.n	48c8 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    48c6:	e00e      	b.n	48e6 <udc_reqstd+0x62>
				return udc_req_std_dev_get_status();
    48c8:	4b50      	ldr	r3, [pc, #320]	; (4a0c <udc_reqstd+0x188>)
    48ca:	447b      	add	r3, pc
    48cc:	4798      	blx	r3
    48ce:	0003      	movs	r3, r0
    48d0:	e095      	b.n	49fe <udc_reqstd+0x17a>
				return udc_req_std_dev_get_descriptor();
    48d2:	4b4f      	ldr	r3, [pc, #316]	; (4a10 <udc_reqstd+0x18c>)
    48d4:	447b      	add	r3, pc
    48d6:	4798      	blx	r3
    48d8:	0003      	movs	r3, r0
    48da:	e090      	b.n	49fe <udc_reqstd+0x17a>
				return udc_req_std_dev_get_configuration();
    48dc:	4b4d      	ldr	r3, [pc, #308]	; (4a14 <udc_reqstd+0x190>)
    48de:	447b      	add	r3, pc
    48e0:	4798      	blx	r3
    48e2:	0003      	movs	r3, r0
    48e4:	e08b      	b.n	49fe <udc_reqstd+0x17a>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    48e6:	4a48      	ldr	r2, [pc, #288]	; (4a08 <udc_reqstd+0x184>)
    48e8:	589a      	ldr	r2, [r3, r2]
    48ea:	7812      	ldrb	r2, [r2, #0]
    48ec:	0011      	movs	r1, r2
    48ee:	221f      	movs	r2, #31
    48f0:	400a      	ands	r2, r1
    48f2:	2a01      	cmp	r2, #1
    48f4:	d10a      	bne.n	490c <udc_reqstd+0x88>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    48f6:	4a44      	ldr	r2, [pc, #272]	; (4a08 <udc_reqstd+0x184>)
    48f8:	589a      	ldr	r2, [r3, r2]
    48fa:	7852      	ldrb	r2, [r2, #1]
    48fc:	2a0a      	cmp	r2, #10
    48fe:	d000      	beq.n	4902 <udc_reqstd+0x7e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    4900:	e004      	b.n	490c <udc_reqstd+0x88>
				return udc_req_std_iface_get_setting();
    4902:	4b45      	ldr	r3, [pc, #276]	; (4a18 <udc_reqstd+0x194>)
    4904:	447b      	add	r3, pc
    4906:	4798      	blx	r3
    4908:	0003      	movs	r3, r0
    490a:	e078      	b.n	49fe <udc_reqstd+0x17a>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    490c:	4a3e      	ldr	r2, [pc, #248]	; (4a08 <udc_reqstd+0x184>)
    490e:	589a      	ldr	r2, [r3, r2]
    4910:	7812      	ldrb	r2, [r2, #0]
    4912:	0011      	movs	r1, r2
    4914:	221f      	movs	r2, #31
    4916:	400a      	ands	r2, r1
    4918:	2a02      	cmp	r2, #2
    491a:	d000      	beq.n	491e <udc_reqstd+0x9a>
    491c:	e06e      	b.n	49fc <udc_reqstd+0x178>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    491e:	4a3a      	ldr	r2, [pc, #232]	; (4a08 <udc_reqstd+0x184>)
    4920:	589b      	ldr	r3, [r3, r2]
    4922:	785b      	ldrb	r3, [r3, #1]
    4924:	2b00      	cmp	r3, #0
    4926:	d000      	beq.n	492a <udc_reqstd+0xa6>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    4928:	e068      	b.n	49fc <udc_reqstd+0x178>
				return udc_req_std_ep_get_status();
    492a:	4b3c      	ldr	r3, [pc, #240]	; (4a1c <udc_reqstd+0x198>)
    492c:	447b      	add	r3, pc
    492e:	4798      	blx	r3
    4930:	0003      	movs	r3, r0
    4932:	e064      	b.n	49fe <udc_reqstd+0x17a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    4934:	4a34      	ldr	r2, [pc, #208]	; (4a08 <udc_reqstd+0x184>)
    4936:	589a      	ldr	r2, [r3, r2]
    4938:	7812      	ldrb	r2, [r2, #0]
    493a:	0011      	movs	r1, r2
    493c:	221f      	movs	r2, #31
    493e:	400a      	ands	r2, r1
    4940:	d12f      	bne.n	49a2 <udc_reqstd+0x11e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    4942:	4a31      	ldr	r2, [pc, #196]	; (4a08 <udc_reqstd+0x184>)
    4944:	589a      	ldr	r2, [r3, r2]
    4946:	7852      	ldrb	r2, [r2, #1]
    4948:	3a01      	subs	r2, #1
    494a:	2a08      	cmp	r2, #8
    494c:	d828      	bhi.n	49a0 <udc_reqstd+0x11c>
    494e:	0010      	movs	r0, r2
    4950:	f00b fe8e 	bl	10670 <__gnu_thumb1_case_si>
    4954:	0000002e 	.word	0x0000002e
    4958:	0000004c 	.word	0x0000004c
    495c:	00000038 	.word	0x00000038
    4960:	0000004c 	.word	0x0000004c
    4964:	00000024 	.word	0x00000024
    4968:	0000004c 	.word	0x0000004c
    496c:	0000004c 	.word	0x0000004c
    4970:	0000004c 	.word	0x0000004c
    4974:	00000042 	.word	0x00000042
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    4978:	4b29      	ldr	r3, [pc, #164]	; (4a20 <udc_reqstd+0x19c>)
    497a:	447b      	add	r3, pc
    497c:	4798      	blx	r3
    497e:	0003      	movs	r3, r0
    4980:	e03d      	b.n	49fe <udc_reqstd+0x17a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    4982:	4b28      	ldr	r3, [pc, #160]	; (4a24 <udc_reqstd+0x1a0>)
    4984:	447b      	add	r3, pc
    4986:	4798      	blx	r3
    4988:	0003      	movs	r3, r0
    498a:	e038      	b.n	49fe <udc_reqstd+0x17a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    498c:	4b26      	ldr	r3, [pc, #152]	; (4a28 <udc_reqstd+0x1a4>)
    498e:	447b      	add	r3, pc
    4990:	4798      	blx	r3
    4992:	0003      	movs	r3, r0
    4994:	e033      	b.n	49fe <udc_reqstd+0x17a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    4996:	4b25      	ldr	r3, [pc, #148]	; (4a2c <udc_reqstd+0x1a8>)
    4998:	447b      	add	r3, pc
    499a:	4798      	blx	r3
    499c:	0003      	movs	r3, r0
    499e:	e02e      	b.n	49fe <udc_reqstd+0x17a>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    49a0:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    49a2:	4a19      	ldr	r2, [pc, #100]	; (4a08 <udc_reqstd+0x184>)
    49a4:	589a      	ldr	r2, [r3, r2]
    49a6:	7812      	ldrb	r2, [r2, #0]
    49a8:	0011      	movs	r1, r2
    49aa:	221f      	movs	r2, #31
    49ac:	400a      	ands	r2, r1
    49ae:	2a01      	cmp	r2, #1
    49b0:	d10a      	bne.n	49c8 <udc_reqstd+0x144>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    49b2:	4a15      	ldr	r2, [pc, #84]	; (4a08 <udc_reqstd+0x184>)
    49b4:	589a      	ldr	r2, [r3, r2]
    49b6:	7852      	ldrb	r2, [r2, #1]
    49b8:	2a0b      	cmp	r2, #11
    49ba:	d000      	beq.n	49be <udc_reqstd+0x13a>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    49bc:	e004      	b.n	49c8 <udc_reqstd+0x144>
				return udc_req_std_iface_set_setting();
    49be:	4b1c      	ldr	r3, [pc, #112]	; (4a30 <udc_reqstd+0x1ac>)
    49c0:	447b      	add	r3, pc
    49c2:	4798      	blx	r3
    49c4:	0003      	movs	r3, r0
    49c6:	e01a      	b.n	49fe <udc_reqstd+0x17a>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    49c8:	4a0f      	ldr	r2, [pc, #60]	; (4a08 <udc_reqstd+0x184>)
    49ca:	589a      	ldr	r2, [r3, r2]
    49cc:	7812      	ldrb	r2, [r2, #0]
    49ce:	0011      	movs	r1, r2
    49d0:	221f      	movs	r2, #31
    49d2:	400a      	ands	r2, r1
    49d4:	2a02      	cmp	r2, #2
    49d6:	d111      	bne.n	49fc <udc_reqstd+0x178>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    49d8:	4a0b      	ldr	r2, [pc, #44]	; (4a08 <udc_reqstd+0x184>)
    49da:	589b      	ldr	r3, [r3, r2]
    49dc:	785b      	ldrb	r3, [r3, #1]
    49de:	2b01      	cmp	r3, #1
    49e0:	d002      	beq.n	49e8 <udc_reqstd+0x164>
    49e2:	2b03      	cmp	r3, #3
    49e4:	d005      	beq.n	49f2 <udc_reqstd+0x16e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    49e6:	e009      	b.n	49fc <udc_reqstd+0x178>
				return udc_req_std_ep_clear_feature();
    49e8:	4b12      	ldr	r3, [pc, #72]	; (4a34 <udc_reqstd+0x1b0>)
    49ea:	447b      	add	r3, pc
    49ec:	4798      	blx	r3
    49ee:	0003      	movs	r3, r0
    49f0:	e005      	b.n	49fe <udc_reqstd+0x17a>
				return udc_req_std_ep_set_feature();
    49f2:	4b11      	ldr	r3, [pc, #68]	; (4a38 <udc_reqstd+0x1b4>)
    49f4:	447b      	add	r3, pc
    49f6:	4798      	blx	r3
    49f8:	0003      	movs	r3, r0
    49fa:	e000      	b.n	49fe <udc_reqstd+0x17a>
			}
		}
#endif
	}
	return false;
    49fc:	2300      	movs	r3, #0
}
    49fe:	0018      	movs	r0, r3
    4a00:	46bd      	mov	sp, r7
    4a02:	bd80      	pop	{r7, pc}
    4a04:	0000d546 	.word	0x0000d546
    4a08:	000001e0 	.word	0x000001e0
    4a0c:	fffff877 	.word	0xfffff877
    4a10:	fffffbc1 	.word	0xfffffbc1
    4a14:	fffffd17 	.word	0xfffffd17
    4a18:	fffffe2d 	.word	0xfffffe2d
    4a1c:	fffff851 	.word	0xfffff851
    4a20:	fffff9bf 	.word	0xfffff9bf
    4a24:	fffff859 	.word	0xfffff859
    4a28:	fffff8e7 	.word	0xfffff8e7
    4a2c:	fffffc99 	.word	0xfffffc99
    4a30:	fffffe39 	.word	0xfffffe39
    4a34:	fffff843 	.word	0xfffff843
    4a38:	fffff8b9 	.word	0xfffff8b9

00004a3c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    4a3c:	b580      	push	{r7, lr}
    4a3e:	b082      	sub	sp, #8
    4a40:	af00      	add	r7, sp, #0
    4a42:	4a28      	ldr	r2, [pc, #160]	; (4ae4 <udc_req_iface+0xa8>)
    4a44:	447a      	add	r2, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4a46:	4b28      	ldr	r3, [pc, #160]	; (4ae8 <udc_req_iface+0xac>)
    4a48:	447b      	add	r3, pc
    4a4a:	781b      	ldrb	r3, [r3, #0]
    4a4c:	2b00      	cmp	r3, #0
    4a4e:	d101      	bne.n	4a54 <udc_req_iface+0x18>
		return false; // The device is not is configured state yet
    4a50:	2300      	movs	r3, #0
    4a52:	e042      	b.n	4ada <udc_req_iface+0x9e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4a54:	4b25      	ldr	r3, [pc, #148]	; (4aec <udc_req_iface+0xb0>)
    4a56:	58d3      	ldr	r3, [r2, r3]
    4a58:	889a      	ldrh	r2, [r3, #4]
    4a5a:	1dfb      	adds	r3, r7, #7
    4a5c:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    4a5e:	4b24      	ldr	r3, [pc, #144]	; (4af0 <udc_req_iface+0xb4>)
    4a60:	447b      	add	r3, pc
    4a62:	681b      	ldr	r3, [r3, #0]
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	791b      	ldrb	r3, [r3, #4]
    4a68:	1dfa      	adds	r2, r7, #7
    4a6a:	7812      	ldrb	r2, [r2, #0]
    4a6c:	429a      	cmp	r2, r3
    4a6e:	d301      	bcc.n	4a74 <udc_req_iface+0x38>
		return false;
    4a70:	2300      	movs	r3, #0
    4a72:	e032      	b.n	4ada <udc_req_iface+0x9e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    4a74:	1dfb      	adds	r3, r7, #7
    4a76:	781b      	ldrb	r3, [r3, #0]
    4a78:	2100      	movs	r1, #0
    4a7a:	0018      	movs	r0, r3
    4a7c:	4b1d      	ldr	r3, [pc, #116]	; (4af4 <udc_req_iface+0xb8>)
    4a7e:	447b      	add	r3, pc
    4a80:	4798      	blx	r3
    4a82:	0003      	movs	r3, r0
    4a84:	001a      	movs	r2, r3
    4a86:	2301      	movs	r3, #1
    4a88:	4053      	eors	r3, r2
    4a8a:	b2db      	uxtb	r3, r3
    4a8c:	2b00      	cmp	r3, #0
    4a8e:	d001      	beq.n	4a94 <udc_req_iface+0x58>
		return false;
    4a90:	2300      	movs	r3, #0
    4a92:	e022      	b.n	4ada <udc_req_iface+0x9e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    4a94:	4b18      	ldr	r3, [pc, #96]	; (4af8 <udc_req_iface+0xbc>)
    4a96:	447b      	add	r3, pc
    4a98:	681b      	ldr	r3, [r3, #0]
    4a9a:	685a      	ldr	r2, [r3, #4]
    4a9c:	1dfb      	adds	r3, r7, #7
    4a9e:	781b      	ldrb	r3, [r3, #0]
    4aa0:	009b      	lsls	r3, r3, #2
    4aa2:	18d3      	adds	r3, r2, r3
    4aa4:	681b      	ldr	r3, [r3, #0]
    4aa6:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4aa8:	683b      	ldr	r3, [r7, #0]
    4aaa:	68db      	ldr	r3, [r3, #12]
    4aac:	4798      	blx	r3
    4aae:	0003      	movs	r3, r0
    4ab0:	001a      	movs	r2, r3
    4ab2:	1dfb      	adds	r3, r7, #7
    4ab4:	781b      	ldrb	r3, [r3, #0]
    4ab6:	0011      	movs	r1, r2
    4ab8:	0018      	movs	r0, r3
    4aba:	4b10      	ldr	r3, [pc, #64]	; (4afc <udc_req_iface+0xc0>)
    4abc:	447b      	add	r3, pc
    4abe:	4798      	blx	r3
    4ac0:	0003      	movs	r3, r0
    4ac2:	001a      	movs	r2, r3
    4ac4:	2301      	movs	r3, #1
    4ac6:	4053      	eors	r3, r2
    4ac8:	b2db      	uxtb	r3, r3
    4aca:	2b00      	cmp	r3, #0
    4acc:	d001      	beq.n	4ad2 <udc_req_iface+0x96>
		return false;
    4ace:	2300      	movs	r3, #0
    4ad0:	e003      	b.n	4ada <udc_req_iface+0x9e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    4ad2:	683b      	ldr	r3, [r7, #0]
    4ad4:	689b      	ldr	r3, [r3, #8]
    4ad6:	4798      	blx	r3
    4ad8:	0003      	movs	r3, r0
}
    4ada:	0018      	movs	r0, r3
    4adc:	46bd      	mov	sp, r7
    4ade:	b002      	add	sp, #8
    4ae0:	bd80      	pop	{r7, pc}
    4ae2:	46c0      	nop			; (mov r8, r8)
    4ae4:	0000d38c 	.word	0x0000d38c
    4ae8:	1fffbacc 	.word	0x1fffbacc
    4aec:	000001e0 	.word	0x000001e0
    4af0:	1fffbab8 	.word	0x1fffbab8
    4af4:	fffff35b 	.word	0xfffff35b
    4af8:	1fffba82 	.word	0x1fffba82
    4afc:	fffff31d 	.word	0xfffff31d

00004b00 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    4b00:	b580      	push	{r7, lr}
    4b02:	b082      	sub	sp, #8
    4b04:	af00      	add	r7, sp, #0
    4b06:	4a25      	ldr	r2, [pc, #148]	; (4b9c <udc_req_ep+0x9c>)
    4b08:	447a      	add	r2, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    4b0a:	4b25      	ldr	r3, [pc, #148]	; (4ba0 <udc_req_ep+0xa0>)
    4b0c:	447b      	add	r3, pc
    4b0e:	781b      	ldrb	r3, [r3, #0]
    4b10:	2b00      	cmp	r3, #0
    4b12:	d101      	bne.n	4b18 <udc_req_ep+0x18>
		return false; // The device is not is configured state yet
    4b14:	2300      	movs	r3, #0
    4b16:	e03d      	b.n	4b94 <udc_req_ep+0x94>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    4b18:	4b22      	ldr	r3, [pc, #136]	; (4ba4 <udc_req_ep+0xa4>)
    4b1a:	58d3      	ldr	r3, [r2, r3]
    4b1c:	889a      	ldrh	r2, [r3, #4]
    4b1e:	1dfb      	adds	r3, r7, #7
    4b20:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4b22:	1dfb      	adds	r3, r7, #7
    4b24:	2200      	movs	r2, #0
    4b26:	701a      	strb	r2, [r3, #0]
    4b28:	e02a      	b.n	4b80 <udc_req_ep+0x80>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    4b2a:	4b1f      	ldr	r3, [pc, #124]	; (4ba8 <udc_req_ep+0xa8>)
    4b2c:	447b      	add	r3, pc
    4b2e:	681b      	ldr	r3, [r3, #0]
    4b30:	685a      	ldr	r2, [r3, #4]
    4b32:	1dfb      	adds	r3, r7, #7
    4b34:	781b      	ldrb	r3, [r3, #0]
    4b36:	009b      	lsls	r3, r3, #2
    4b38:	18d3      	adds	r3, r2, r3
    4b3a:	681b      	ldr	r3, [r3, #0]
    4b3c:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    4b3e:	683b      	ldr	r3, [r7, #0]
    4b40:	68db      	ldr	r3, [r3, #12]
    4b42:	4798      	blx	r3
    4b44:	0003      	movs	r3, r0
    4b46:	001a      	movs	r2, r3
    4b48:	1dfb      	adds	r3, r7, #7
    4b4a:	781b      	ldrb	r3, [r3, #0]
    4b4c:	0011      	movs	r1, r2
    4b4e:	0018      	movs	r0, r3
    4b50:	4b16      	ldr	r3, [pc, #88]	; (4bac <udc_req_ep+0xac>)
    4b52:	447b      	add	r3, pc
    4b54:	4798      	blx	r3
    4b56:	0003      	movs	r3, r0
    4b58:	001a      	movs	r2, r3
    4b5a:	2301      	movs	r3, #1
    4b5c:	4053      	eors	r3, r2
    4b5e:	b2db      	uxtb	r3, r3
    4b60:	2b00      	cmp	r3, #0
    4b62:	d001      	beq.n	4b68 <udc_req_ep+0x68>
			return false;
    4b64:	2300      	movs	r3, #0
    4b66:	e015      	b.n	4b94 <udc_req_ep+0x94>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    4b68:	683b      	ldr	r3, [r7, #0]
    4b6a:	689b      	ldr	r3, [r3, #8]
    4b6c:	4798      	blx	r3
    4b6e:	1e03      	subs	r3, r0, #0
    4b70:	d001      	beq.n	4b76 <udc_req_ep+0x76>
			return true;
    4b72:	2301      	movs	r3, #1
    4b74:	e00e      	b.n	4b94 <udc_req_ep+0x94>
			iface_num++) {
    4b76:	1dfb      	adds	r3, r7, #7
    4b78:	781a      	ldrb	r2, [r3, #0]
    4b7a:	1dfb      	adds	r3, r7, #7
    4b7c:	3201      	adds	r2, #1
    4b7e:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    4b80:	4b0b      	ldr	r3, [pc, #44]	; (4bb0 <udc_req_ep+0xb0>)
    4b82:	447b      	add	r3, pc
    4b84:	681b      	ldr	r3, [r3, #0]
    4b86:	681b      	ldr	r3, [r3, #0]
    4b88:	791b      	ldrb	r3, [r3, #4]
    4b8a:	1dfa      	adds	r2, r7, #7
    4b8c:	7812      	ldrb	r2, [r2, #0]
    4b8e:	429a      	cmp	r2, r3
    4b90:	d3cb      	bcc.n	4b2a <udc_req_ep+0x2a>
		}
	}
	return false;
    4b92:	2300      	movs	r3, #0
}
    4b94:	0018      	movs	r0, r3
    4b96:	46bd      	mov	sp, r7
    4b98:	b002      	add	sp, #8
    4b9a:	bd80      	pop	{r7, pc}
    4b9c:	0000d2c8 	.word	0x0000d2c8
    4ba0:	1fffba08 	.word	0x1fffba08
    4ba4:	000001e0 	.word	0x000001e0
    4ba8:	1fffb9ec 	.word	0x1fffb9ec
    4bac:	fffff287 	.word	0xfffff287
    4bb0:	1fffb996 	.word	0x1fffb996

00004bb4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    4bb4:	b5b0      	push	{r4, r5, r7, lr}
    4bb6:	af00      	add	r7, sp, #0
    4bb8:	4c25      	ldr	r4, [pc, #148]	; (4c50 <udc_process_setup+0x9c>)
    4bba:	447c      	add	r4, pc
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    4bbc:	4b25      	ldr	r3, [pc, #148]	; (4c54 <udc_process_setup+0xa0>)
    4bbe:	58e3      	ldr	r3, [r4, r3]
    4bc0:	2200      	movs	r2, #0
    4bc2:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    4bc4:	4b23      	ldr	r3, [pc, #140]	; (4c54 <udc_process_setup+0xa0>)
    4bc6:	58e3      	ldr	r3, [r4, r3]
    4bc8:	2200      	movs	r2, #0
    4bca:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    4bcc:	4b21      	ldr	r3, [pc, #132]	; (4c54 <udc_process_setup+0xa0>)
    4bce:	58e3      	ldr	r3, [r4, r3]
    4bd0:	2200      	movs	r2, #0
    4bd2:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    4bd4:	4b1f      	ldr	r3, [pc, #124]	; (4c54 <udc_process_setup+0xa0>)
    4bd6:	58e3      	ldr	r3, [r4, r3]
    4bd8:	781b      	ldrb	r3, [r3, #0]
    4bda:	b25b      	sxtb	r3, r3
    4bdc:	2b00      	cmp	r3, #0
    4bde:	da06      	bge.n	4bee <udc_process_setup+0x3a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    4be0:	4b1c      	ldr	r3, [pc, #112]	; (4c54 <udc_process_setup+0xa0>)
    4be2:	58e3      	ldr	r3, [r4, r3]
    4be4:	88db      	ldrh	r3, [r3, #6]
    4be6:	2b00      	cmp	r3, #0
    4be8:	d101      	bne.n	4bee <udc_process_setup+0x3a>
			return false; // Error from USB host
    4bea:	2300      	movs	r3, #0
    4bec:	e02c      	b.n	4c48 <udc_process_setup+0x94>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    4bee:	4b19      	ldr	r3, [pc, #100]	; (4c54 <udc_process_setup+0xa0>)
    4bf0:	58e3      	ldr	r3, [r4, r3]
    4bf2:	781b      	ldrb	r3, [r3, #0]
    4bf4:	001a      	movs	r2, r3
    4bf6:	2360      	movs	r3, #96	; 0x60
    4bf8:	4013      	ands	r3, r2
    4bfa:	d106      	bne.n	4c0a <udc_process_setup+0x56>
		if (udc_reqstd()) {
    4bfc:	4b16      	ldr	r3, [pc, #88]	; (4c58 <udc_process_setup+0xa4>)
    4bfe:	447b      	add	r3, pc
    4c00:	4798      	blx	r3
    4c02:	1e03      	subs	r3, r0, #0
    4c04:	d001      	beq.n	4c0a <udc_process_setup+0x56>
			return true;
    4c06:	2301      	movs	r3, #1
    4c08:	e01e      	b.n	4c48 <udc_process_setup+0x94>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    4c0a:	4b12      	ldr	r3, [pc, #72]	; (4c54 <udc_process_setup+0xa0>)
    4c0c:	58e3      	ldr	r3, [r4, r3]
    4c0e:	781b      	ldrb	r3, [r3, #0]
    4c10:	001a      	movs	r2, r3
    4c12:	231f      	movs	r3, #31
    4c14:	4013      	ands	r3, r2
    4c16:	2b01      	cmp	r3, #1
    4c18:	d106      	bne.n	4c28 <udc_process_setup+0x74>
		if (udc_req_iface()) {
    4c1a:	4b10      	ldr	r3, [pc, #64]	; (4c5c <udc_process_setup+0xa8>)
    4c1c:	447b      	add	r3, pc
    4c1e:	4798      	blx	r3
    4c20:	1e03      	subs	r3, r0, #0
    4c22:	d001      	beq.n	4c28 <udc_process_setup+0x74>
			return true;
    4c24:	2301      	movs	r3, #1
    4c26:	e00f      	b.n	4c48 <udc_process_setup+0x94>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    4c28:	4b0a      	ldr	r3, [pc, #40]	; (4c54 <udc_process_setup+0xa0>)
    4c2a:	58e3      	ldr	r3, [r4, r3]
    4c2c:	781b      	ldrb	r3, [r3, #0]
    4c2e:	001a      	movs	r2, r3
    4c30:	231f      	movs	r3, #31
    4c32:	4013      	ands	r3, r2
    4c34:	2b02      	cmp	r3, #2
    4c36:	d106      	bne.n	4c46 <udc_process_setup+0x92>
		if (udc_req_ep()) {
    4c38:	4b09      	ldr	r3, [pc, #36]	; (4c60 <udc_process_setup+0xac>)
    4c3a:	447b      	add	r3, pc
    4c3c:	4798      	blx	r3
    4c3e:	1e03      	subs	r3, r0, #0
    4c40:	d001      	beq.n	4c46 <udc_process_setup+0x92>
			return true;
    4c42:	2301      	movs	r3, #1
    4c44:	e000      	b.n	4c48 <udc_process_setup+0x94>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    4c46:	2300      	movs	r3, #0
#endif
}
    4c48:	0018      	movs	r0, r3
    4c4a:	46bd      	mov	sp, r7
    4c4c:	bdb0      	pop	{r4, r5, r7, pc}
    4c4e:	46c0      	nop			; (mov r8, r8)
    4c50:	0000d216 	.word	0x0000d216
    4c54:	000001e0 	.word	0x000001e0
    4c58:	fffffc83 	.word	0xfffffc83
    4c5c:	fffffe1d 	.word	0xfffffe1d
    4c60:	fffffec3 	.word	0xfffffec3

00004c64 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
    4c64:	b580      	push	{r7, lr}
    4c66:	b082      	sub	sp, #8
    4c68:	af00      	add	r7, sp, #0
    4c6a:	6078      	str	r0, [r7, #4]
    4c6c:	000a      	movs	r2, r1
    4c6e:	1cfb      	adds	r3, r7, #3
    4c70:	701a      	strb	r2, [r3, #0]
    4c72:	4a0e      	ldr	r2, [pc, #56]	; (4cac <stdio_usb_putchar+0x48>)
    4c74:	447a      	add	r2, pc
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    4c76:	4b0e      	ldr	r3, [pc, #56]	; (4cb0 <stdio_usb_putchar+0x4c>)
    4c78:	447b      	add	r3, pc
    4c7a:	781b      	ldrb	r3, [r3, #0]
    4c7c:	2101      	movs	r1, #1
    4c7e:	404b      	eors	r3, r1
    4c80:	b2db      	uxtb	r3, r3
    4c82:	2b00      	cmp	r3, #0
    4c84:	d001      	beq.n	4c8a <stdio_usb_putchar+0x26>
		return 0;  // -1
    4c86:	2300      	movs	r3, #0
    4c88:	e00b      	b.n	4ca2 <stdio_usb_putchar+0x3e>
	}

	return udi_cdc_putc(data) ? 0 : -1;
    4c8a:	1cfb      	adds	r3, r7, #3
    4c8c:	781b      	ldrb	r3, [r3, #0]
    4c8e:	0018      	movs	r0, r3
    4c90:	4b08      	ldr	r3, [pc, #32]	; (4cb4 <stdio_usb_putchar+0x50>)
    4c92:	58d3      	ldr	r3, [r2, r3]
    4c94:	4798      	blx	r3
    4c96:	1e03      	subs	r3, r0, #0
    4c98:	d001      	beq.n	4c9e <stdio_usb_putchar+0x3a>
    4c9a:	2300      	movs	r3, #0
    4c9c:	e001      	b.n	4ca2 <stdio_usb_putchar+0x3e>
    4c9e:	2301      	movs	r3, #1
    4ca0:	425b      	negs	r3, r3
}
    4ca2:	0018      	movs	r0, r3
    4ca4:	46bd      	mov	sp, r7
    4ca6:	b002      	add	sp, #8
    4ca8:	bd80      	pop	{r7, pc}
    4caa:	46c0      	nop			; (mov r8, r8)
    4cac:	0000d15c 	.word	0x0000d15c
    4cb0:	1fffb8aa 	.word	0x1fffb8aa
    4cb4:	00000098 	.word	0x00000098

00004cb8 <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    4cb8:	b580      	push	{r7, lr}
    4cba:	b082      	sub	sp, #8
    4cbc:	af00      	add	r7, sp, #0
    4cbe:	6078      	str	r0, [r7, #4]
    4cc0:	6039      	str	r1, [r7, #0]
    4cc2:	4a0c      	ldr	r2, [pc, #48]	; (4cf4 <stdio_usb_getchar+0x3c>)
    4cc4:	447a      	add	r2, pc
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    4cc6:	4b0c      	ldr	r3, [pc, #48]	; (4cf8 <stdio_usb_getchar+0x40>)
    4cc8:	447b      	add	r3, pc
    4cca:	781b      	ldrb	r3, [r3, #0]
    4ccc:	2101      	movs	r1, #1
    4cce:	404b      	eors	r3, r1
    4cd0:	b2db      	uxtb	r3, r3
    4cd2:	2b00      	cmp	r3, #0
    4cd4:	d003      	beq.n	4cde <stdio_usb_getchar+0x26>
		*data = 0;  // -1
    4cd6:	683b      	ldr	r3, [r7, #0]
    4cd8:	2200      	movs	r2, #0
    4cda:	701a      	strb	r2, [r3, #0]
		return;
    4cdc:	e006      	b.n	4cec <stdio_usb_getchar+0x34>
	}

	*data = (char)udi_cdc_getc();
    4cde:	4b07      	ldr	r3, [pc, #28]	; (4cfc <stdio_usb_getchar+0x44>)
    4ce0:	58d3      	ldr	r3, [r2, r3]
    4ce2:	4798      	blx	r3
    4ce4:	0003      	movs	r3, r0
    4ce6:	b2da      	uxtb	r2, r3
    4ce8:	683b      	ldr	r3, [r7, #0]
    4cea:	701a      	strb	r2, [r3, #0]
}
    4cec:	46bd      	mov	sp, r7
    4cee:	b002      	add	sp, #8
    4cf0:	bd80      	pop	{r7, pc}
    4cf2:	46c0      	nop			; (mov r8, r8)
    4cf4:	0000d10c 	.word	0x0000d10c
    4cf8:	1fffb85a 	.word	0x1fffb85a
    4cfc:	0000027c 	.word	0x0000027c

00004d00 <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
    4d00:	b580      	push	{r7, lr}
    4d02:	af00      	add	r7, sp, #0
	stdio_usb_interface_enable = true;
    4d04:	4b03      	ldr	r3, [pc, #12]	; (4d14 <stdio_usb_enable+0x14>)
    4d06:	447b      	add	r3, pc
    4d08:	2201      	movs	r2, #1
    4d0a:	701a      	strb	r2, [r3, #0]
	return true;
    4d0c:	2301      	movs	r3, #1
}
    4d0e:	0018      	movs	r0, r3
    4d10:	46bd      	mov	sp, r7
    4d12:	bd80      	pop	{r7, pc}
    4d14:	1fffb81c 	.word	0x1fffb81c

00004d18 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
    4d18:	b5b0      	push	{r4, r5, r7, lr}
    4d1a:	af00      	add	r7, sp, #0
    4d1c:	4c13      	ldr	r4, [pc, #76]	; (4d6c <stdio_usb_init+0x54>)
    4d1e:	447c      	add	r4, pc
	stdio_base = NULL;
    4d20:	4b13      	ldr	r3, [pc, #76]	; (4d70 <stdio_usb_init+0x58>)
    4d22:	58e3      	ldr	r3, [r4, r3]
    4d24:	2200      	movs	r2, #0
    4d26:	601a      	str	r2, [r3, #0]
	ptr_put = stdio_usb_putchar;
    4d28:	4b12      	ldr	r3, [pc, #72]	; (4d74 <stdio_usb_init+0x5c>)
    4d2a:	58e3      	ldr	r3, [r4, r3]
    4d2c:	4a12      	ldr	r2, [pc, #72]	; (4d78 <stdio_usb_init+0x60>)
    4d2e:	58a2      	ldr	r2, [r4, r2]
    4d30:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
    4d32:	4b12      	ldr	r3, [pc, #72]	; (4d7c <stdio_usb_init+0x64>)
    4d34:	58e3      	ldr	r3, [r4, r3]
    4d36:	4a12      	ldr	r2, [pc, #72]	; (4d80 <stdio_usb_init+0x68>)
    4d38:	58a2      	ldr	r2, [r4, r2]
    4d3a:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    4d3c:	4b11      	ldr	r3, [pc, #68]	; (4d84 <stdio_usb_init+0x6c>)
    4d3e:	58e3      	ldr	r3, [r4, r3]
    4d40:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    4d42:	4b11      	ldr	r3, [pc, #68]	; (4d88 <stdio_usb_init+0x70>)
    4d44:	58e3      	ldr	r3, [r4, r3]
    4d46:	681b      	ldr	r3, [r3, #0]
    4d48:	689b      	ldr	r3, [r3, #8]
    4d4a:	2100      	movs	r1, #0
    4d4c:	0018      	movs	r0, r3
    4d4e:	4b0f      	ldr	r3, [pc, #60]	; (4d8c <stdio_usb_init+0x74>)
    4d50:	58e3      	ldr	r3, [r4, r3]
    4d52:	4798      	blx	r3
	setbuf(stdin, NULL);
    4d54:	4b0c      	ldr	r3, [pc, #48]	; (4d88 <stdio_usb_init+0x70>)
    4d56:	58e3      	ldr	r3, [r4, r3]
    4d58:	681b      	ldr	r3, [r3, #0]
    4d5a:	685b      	ldr	r3, [r3, #4]
    4d5c:	2100      	movs	r1, #0
    4d5e:	0018      	movs	r0, r3
    4d60:	4b0a      	ldr	r3, [pc, #40]	; (4d8c <stdio_usb_init+0x74>)
    4d62:	58e3      	ldr	r3, [r4, r3]
    4d64:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
    4d66:	46c0      	nop			; (mov r8, r8)
    4d68:	46bd      	mov	sp, r7
    4d6a:	bdb0      	pop	{r4, r5, r7, pc}
    4d6c:	0000d0b2 	.word	0x0000d0b2
    4d70:	000001fc 	.word	0x000001fc
    4d74:	0000011c 	.word	0x0000011c
    4d78:	00000160 	.word	0x00000160
    4d7c:	000000f0 	.word	0x000000f0
    4d80:	00000120 	.word	0x00000120
    4d84:	000002c0 	.word	0x000002c0
    4d88:	00000248 	.word	0x00000248
    4d8c:	000002a0 	.word	0x000002a0

00004d90 <system_gclk_chan_get_config_defaults>:
{
    4d90:	b580      	push	{r7, lr}
    4d92:	b082      	sub	sp, #8
    4d94:	af00      	add	r7, sp, #0
    4d96:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    4d98:	687b      	ldr	r3, [r7, #4]
    4d9a:	2200      	movs	r2, #0
    4d9c:	701a      	strb	r2, [r3, #0]
}
    4d9e:	46c0      	nop			; (mov r8, r8)
    4da0:	46bd      	mov	sp, r7
    4da2:	b002      	add	sp, #8
    4da4:	bd80      	pop	{r7, pc}
	...

00004da8 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    4da8:	b580      	push	{r7, lr}
    4daa:	b082      	sub	sp, #8
    4dac:	af00      	add	r7, sp, #0
    4dae:	0002      	movs	r2, r0
    4db0:	6039      	str	r1, [r7, #0]
    4db2:	1dfb      	adds	r3, r7, #7
    4db4:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    4db6:	1dfb      	adds	r3, r7, #7
    4db8:	781b      	ldrb	r3, [r3, #0]
    4dba:	2b01      	cmp	r3, #1
    4dbc:	d00a      	beq.n	4dd4 <system_apb_clock_set_mask+0x2c>
    4dbe:	2b02      	cmp	r3, #2
    4dc0:	d00f      	beq.n	4de2 <system_apb_clock_set_mask+0x3a>
    4dc2:	2b00      	cmp	r3, #0
    4dc4:	d114      	bne.n	4df0 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    4dc6:	4b0e      	ldr	r3, [pc, #56]	; (4e00 <system_apb_clock_set_mask+0x58>)
    4dc8:	4a0d      	ldr	r2, [pc, #52]	; (4e00 <system_apb_clock_set_mask+0x58>)
    4dca:	6991      	ldr	r1, [r2, #24]
    4dcc:	683a      	ldr	r2, [r7, #0]
    4dce:	430a      	orrs	r2, r1
    4dd0:	619a      	str	r2, [r3, #24]
			break;
    4dd2:	e00f      	b.n	4df4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    4dd4:	4b0a      	ldr	r3, [pc, #40]	; (4e00 <system_apb_clock_set_mask+0x58>)
    4dd6:	4a0a      	ldr	r2, [pc, #40]	; (4e00 <system_apb_clock_set_mask+0x58>)
    4dd8:	69d1      	ldr	r1, [r2, #28]
    4dda:	683a      	ldr	r2, [r7, #0]
    4ddc:	430a      	orrs	r2, r1
    4dde:	61da      	str	r2, [r3, #28]
			break;
    4de0:	e008      	b.n	4df4 <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    4de2:	4b07      	ldr	r3, [pc, #28]	; (4e00 <system_apb_clock_set_mask+0x58>)
    4de4:	4a06      	ldr	r2, [pc, #24]	; (4e00 <system_apb_clock_set_mask+0x58>)
    4de6:	6a11      	ldr	r1, [r2, #32]
    4de8:	683a      	ldr	r2, [r7, #0]
    4dea:	430a      	orrs	r2, r1
    4dec:	621a      	str	r2, [r3, #32]
			break;
    4dee:	e001      	b.n	4df4 <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    4df0:	2317      	movs	r3, #23
    4df2:	e000      	b.n	4df6 <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    4df4:	2300      	movs	r3, #0
}
    4df6:	0018      	movs	r0, r3
    4df8:	46bd      	mov	sp, r7
    4dfa:	b002      	add	sp, #8
    4dfc:	bd80      	pop	{r7, pc}
    4dfe:	46c0      	nop			; (mov r8, r8)
    4e00:	40000400 	.word	0x40000400

00004e04 <system_pinmux_get_config_defaults>:
{
    4e04:	b580      	push	{r7, lr}
    4e06:	b082      	sub	sp, #8
    4e08:	af00      	add	r7, sp, #0
    4e0a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    4e0c:	687b      	ldr	r3, [r7, #4]
    4e0e:	2280      	movs	r2, #128	; 0x80
    4e10:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	2200      	movs	r2, #0
    4e16:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    4e18:	687b      	ldr	r3, [r7, #4]
    4e1a:	2201      	movs	r2, #1
    4e1c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	2200      	movs	r2, #0
    4e22:	70da      	strb	r2, [r3, #3]
}
    4e24:	46c0      	nop			; (mov r8, r8)
    4e26:	46bd      	mov	sp, r7
    4e28:	b002      	add	sp, #8
    4e2a:	bd80      	pop	{r7, pc}

00004e2c <system_interrupt_enable>:
{
    4e2c:	b580      	push	{r7, lr}
    4e2e:	b082      	sub	sp, #8
    4e30:	af00      	add	r7, sp, #0
    4e32:	0002      	movs	r2, r0
    4e34:	1dfb      	adds	r3, r7, #7
    4e36:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4e38:	4b06      	ldr	r3, [pc, #24]	; (4e54 <system_interrupt_enable+0x28>)
    4e3a:	1dfa      	adds	r2, r7, #7
    4e3c:	7812      	ldrb	r2, [r2, #0]
    4e3e:	0011      	movs	r1, r2
    4e40:	221f      	movs	r2, #31
    4e42:	400a      	ands	r2, r1
    4e44:	2101      	movs	r1, #1
    4e46:	4091      	lsls	r1, r2
    4e48:	000a      	movs	r2, r1
    4e4a:	601a      	str	r2, [r3, #0]
}
    4e4c:	46c0      	nop			; (mov r8, r8)
    4e4e:	46bd      	mov	sp, r7
    4e50:	b002      	add	sp, #8
    4e52:	bd80      	pop	{r7, pc}
    4e54:	e000e100 	.word	0xe000e100

00004e58 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    4e58:	b580      	push	{r7, lr}
    4e5a:	b084      	sub	sp, #16
    4e5c:	af00      	add	r7, sp, #0
    4e5e:	0002      	movs	r2, r0
    4e60:	1dfb      	adds	r3, r7, #7
    4e62:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    4e64:	230f      	movs	r3, #15
    4e66:	18fb      	adds	r3, r7, r3
    4e68:	1dfa      	adds	r2, r7, #7
    4e6a:	7812      	ldrb	r2, [r2, #0]
    4e6c:	0952      	lsrs	r2, r2, #5
    4e6e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    4e70:	230f      	movs	r3, #15
    4e72:	18fb      	adds	r3, r7, r3
    4e74:	781b      	ldrb	r3, [r3, #0]
    4e76:	2b00      	cmp	r3, #0
    4e78:	d10c      	bne.n	4e94 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4e7a:	4b09      	ldr	r3, [pc, #36]	; (4ea0 <_extint_get_eic_from_channel+0x48>)
    4e7c:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    4e7e:	230f      	movs	r3, #15
    4e80:	18fb      	adds	r3, r7, r3
    4e82:	781b      	ldrb	r3, [r3, #0]
    4e84:	009b      	lsls	r3, r3, #2
    4e86:	2210      	movs	r2, #16
    4e88:	4694      	mov	ip, r2
    4e8a:	44bc      	add	ip, r7
    4e8c:	4463      	add	r3, ip
    4e8e:	3b08      	subs	r3, #8
    4e90:	681b      	ldr	r3, [r3, #0]
    4e92:	e000      	b.n	4e96 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    4e94:	2300      	movs	r3, #0
	}
}
    4e96:	0018      	movs	r0, r3
    4e98:	46bd      	mov	sp, r7
    4e9a:	b004      	add	sp, #16
    4e9c:	bd80      	pop	{r7, pc}
    4e9e:	46c0      	nop			; (mov r8, r8)
    4ea0:	40001800 	.word	0x40001800

00004ea4 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    4ea4:	b580      	push	{r7, lr}
    4ea6:	b082      	sub	sp, #8
    4ea8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4eaa:	4b0f      	ldr	r3, [pc, #60]	; (4ee8 <extint_is_syncing+0x44>)
    4eac:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4eae:	2300      	movs	r3, #0
    4eb0:	607b      	str	r3, [r7, #4]
    4eb2:	e011      	b.n	4ed8 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	009b      	lsls	r3, r3, #2
    4eb8:	2208      	movs	r2, #8
    4eba:	4694      	mov	ip, r2
    4ebc:	44bc      	add	ip, r7
    4ebe:	4463      	add	r3, ip
    4ec0:	3b08      	subs	r3, #8
    4ec2:	681b      	ldr	r3, [r3, #0]
    4ec4:	785b      	ldrb	r3, [r3, #1]
    4ec6:	b2db      	uxtb	r3, r3
    4ec8:	b25b      	sxtb	r3, r3
    4eca:	2b00      	cmp	r3, #0
    4ecc:	da01      	bge.n	4ed2 <extint_is_syncing+0x2e>
			return true;
    4ece:	2301      	movs	r3, #1
    4ed0:	e006      	b.n	4ee0 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	3301      	adds	r3, #1
    4ed6:	607b      	str	r3, [r7, #4]
    4ed8:	687b      	ldr	r3, [r7, #4]
    4eda:	2b00      	cmp	r3, #0
    4edc:	d0ea      	beq.n	4eb4 <extint_is_syncing+0x10>
		}
	}
	return false;
    4ede:	2300      	movs	r3, #0
}
    4ee0:	0018      	movs	r0, r3
    4ee2:	46bd      	mov	sp, r7
    4ee4:	b002      	add	sp, #8
    4ee6:	bd80      	pop	{r7, pc}
    4ee8:	40001800 	.word	0x40001800

00004eec <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    4eec:	b590      	push	{r4, r7, lr}
    4eee:	b085      	sub	sp, #20
    4ef0:	af00      	add	r7, sp, #0
    4ef2:	4c32      	ldr	r4, [pc, #200]	; (4fbc <_system_extint_init+0xd0>)
    4ef4:	447c      	add	r4, pc
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4ef6:	4b32      	ldr	r3, [pc, #200]	; (4fc0 <_system_extint_init+0xd4>)
    4ef8:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    4efa:	2140      	movs	r1, #64	; 0x40
    4efc:	2000      	movs	r0, #0
    4efe:	4b31      	ldr	r3, [pc, #196]	; (4fc4 <_system_extint_init+0xd8>)
    4f00:	447b      	add	r3, pc
    4f02:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    4f04:	003b      	movs	r3, r7
    4f06:	0018      	movs	r0, r3
    4f08:	4b2f      	ldr	r3, [pc, #188]	; (4fc8 <_system_extint_init+0xdc>)
    4f0a:	447b      	add	r3, pc
    4f0c:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    4f0e:	003b      	movs	r3, r7
    4f10:	2202      	movs	r2, #2
    4f12:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    4f14:	003b      	movs	r3, r7
    4f16:	0019      	movs	r1, r3
    4f18:	2005      	movs	r0, #5
    4f1a:	4b2c      	ldr	r3, [pc, #176]	; (4fcc <_system_extint_init+0xe0>)
    4f1c:	58e3      	ldr	r3, [r4, r3]
    4f1e:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    4f20:	2005      	movs	r0, #5
    4f22:	4b2b      	ldr	r3, [pc, #172]	; (4fd0 <_system_extint_init+0xe4>)
    4f24:	58e3      	ldr	r3, [r4, r3]
    4f26:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4f28:	2300      	movs	r3, #0
    4f2a:	60fb      	str	r3, [r7, #12]
    4f2c:	e018      	b.n	4f60 <_system_extint_init+0x74>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    4f2e:	68fb      	ldr	r3, [r7, #12]
    4f30:	009b      	lsls	r3, r3, #2
    4f32:	2210      	movs	r2, #16
    4f34:	4694      	mov	ip, r2
    4f36:	44bc      	add	ip, r7
    4f38:	4463      	add	r3, ip
    4f3a:	3b0c      	subs	r3, #12
    4f3c:	681a      	ldr	r2, [r3, #0]
    4f3e:	68fb      	ldr	r3, [r7, #12]
    4f40:	009b      	lsls	r3, r3, #2
    4f42:	2110      	movs	r1, #16
    4f44:	468c      	mov	ip, r1
    4f46:	44bc      	add	ip, r7
    4f48:	4463      	add	r3, ip
    4f4a:	3b0c      	subs	r3, #12
    4f4c:	681b      	ldr	r3, [r3, #0]
    4f4e:	781b      	ldrb	r3, [r3, #0]
    4f50:	b2db      	uxtb	r3, r3
    4f52:	2101      	movs	r1, #1
    4f54:	430b      	orrs	r3, r1
    4f56:	b2db      	uxtb	r3, r3
    4f58:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4f5a:	68fb      	ldr	r3, [r7, #12]
    4f5c:	3301      	adds	r3, #1
    4f5e:	60fb      	str	r3, [r7, #12]
    4f60:	68fb      	ldr	r3, [r7, #12]
    4f62:	2b00      	cmp	r3, #0
    4f64:	d0e3      	beq.n	4f2e <_system_extint_init+0x42>
	}

	while (extint_is_syncing()) {
    4f66:	46c0      	nop			; (mov r8, r8)
    4f68:	4b1a      	ldr	r3, [pc, #104]	; (4fd4 <_system_extint_init+0xe8>)
    4f6a:	447b      	add	r3, pc
    4f6c:	4798      	blx	r3
    4f6e:	1e03      	subs	r3, r0, #0
    4f70:	d1fa      	bne.n	4f68 <_system_extint_init+0x7c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4f72:	230b      	movs	r3, #11
    4f74:	18fb      	adds	r3, r7, r3
    4f76:	2200      	movs	r2, #0
    4f78:	701a      	strb	r2, [r3, #0]
    4f7a:	e00e      	b.n	4f9a <_system_extint_init+0xae>
		_extint_dev.callbacks[j] = NULL;
    4f7c:	230b      	movs	r3, #11
    4f7e:	18fb      	adds	r3, r7, r3
    4f80:	781a      	ldrb	r2, [r3, #0]
    4f82:	4b15      	ldr	r3, [pc, #84]	; (4fd8 <_system_extint_init+0xec>)
    4f84:	58e3      	ldr	r3, [r4, r3]
    4f86:	0092      	lsls	r2, r2, #2
    4f88:	2100      	movs	r1, #0
    4f8a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    4f8c:	230b      	movs	r3, #11
    4f8e:	18fb      	adds	r3, r7, r3
    4f90:	781a      	ldrb	r2, [r3, #0]
    4f92:	230b      	movs	r3, #11
    4f94:	18fb      	adds	r3, r7, r3
    4f96:	3201      	adds	r2, #1
    4f98:	701a      	strb	r2, [r3, #0]
    4f9a:	230b      	movs	r3, #11
    4f9c:	18fb      	adds	r3, r7, r3
    4f9e:	781b      	ldrb	r3, [r3, #0]
    4fa0:	2b0f      	cmp	r3, #15
    4fa2:	d9eb      	bls.n	4f7c <_system_extint_init+0x90>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    4fa4:	2004      	movs	r0, #4
    4fa6:	4b0d      	ldr	r3, [pc, #52]	; (4fdc <_system_extint_init+0xf0>)
    4fa8:	447b      	add	r3, pc
    4faa:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    4fac:	4b0c      	ldr	r3, [pc, #48]	; (4fe0 <_system_extint_init+0xf4>)
    4fae:	447b      	add	r3, pc
    4fb0:	4798      	blx	r3
}
    4fb2:	46c0      	nop			; (mov r8, r8)
    4fb4:	46bd      	mov	sp, r7
    4fb6:	b005      	add	sp, #20
    4fb8:	bd90      	pop	{r4, r7, pc}
    4fba:	46c0      	nop			; (mov r8, r8)
    4fbc:	0000cedc 	.word	0x0000cedc
    4fc0:	40001800 	.word	0x40001800
    4fc4:	fffffea5 	.word	0xfffffea5
    4fc8:	fffffe83 	.word	0xfffffe83
    4fcc:	000000b0 	.word	0x000000b0
    4fd0:	00000230 	.word	0x00000230
    4fd4:	ffffff37 	.word	0xffffff37
    4fd8:	0000017c 	.word	0x0000017c
    4fdc:	fffffe81 	.word	0xfffffe81
    4fe0:	00000033 	.word	0x00000033

00004fe4 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    4fe4:	b580      	push	{r7, lr}
    4fe6:	b082      	sub	sp, #8
    4fe8:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    4fea:	4b15      	ldr	r3, [pc, #84]	; (5040 <_extint_enable+0x5c>)
    4fec:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    4fee:	2300      	movs	r3, #0
    4ff0:	607b      	str	r3, [r7, #4]
    4ff2:	e018      	b.n	5026 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	009b      	lsls	r3, r3, #2
    4ff8:	2208      	movs	r2, #8
    4ffa:	4694      	mov	ip, r2
    4ffc:	44bc      	add	ip, r7
    4ffe:	4463      	add	r3, ip
    5000:	3b08      	subs	r3, #8
    5002:	681a      	ldr	r2, [r3, #0]
    5004:	687b      	ldr	r3, [r7, #4]
    5006:	009b      	lsls	r3, r3, #2
    5008:	2108      	movs	r1, #8
    500a:	468c      	mov	ip, r1
    500c:	44bc      	add	ip, r7
    500e:	4463      	add	r3, ip
    5010:	3b08      	subs	r3, #8
    5012:	681b      	ldr	r3, [r3, #0]
    5014:	781b      	ldrb	r3, [r3, #0]
    5016:	b2db      	uxtb	r3, r3
    5018:	2102      	movs	r1, #2
    501a:	430b      	orrs	r3, r1
    501c:	b2db      	uxtb	r3, r3
    501e:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    5020:	687b      	ldr	r3, [r7, #4]
    5022:	3301      	adds	r3, #1
    5024:	607b      	str	r3, [r7, #4]
    5026:	687b      	ldr	r3, [r7, #4]
    5028:	2b00      	cmp	r3, #0
    502a:	d0e3      	beq.n	4ff4 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    502c:	46c0      	nop			; (mov r8, r8)
    502e:	4b05      	ldr	r3, [pc, #20]	; (5044 <_extint_enable+0x60>)
    5030:	447b      	add	r3, pc
    5032:	4798      	blx	r3
    5034:	1e03      	subs	r3, r0, #0
    5036:	d1fa      	bne.n	502e <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    5038:	46c0      	nop			; (mov r8, r8)
    503a:	46bd      	mov	sp, r7
    503c:	b002      	add	sp, #8
    503e:	bd80      	pop	{r7, pc}
    5040:	40001800 	.word	0x40001800
    5044:	fffffe71 	.word	0xfffffe71

00005048 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    5048:	b580      	push	{r7, lr}
    504a:	b082      	sub	sp, #8
    504c:	af00      	add	r7, sp, #0
    504e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    5050:	687b      	ldr	r3, [r7, #4]
    5052:	2200      	movs	r2, #0
    5054:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    5056:	687b      	ldr	r3, [r7, #4]
    5058:	2200      	movs	r2, #0
    505a:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    505c:	687b      	ldr	r3, [r7, #4]
    505e:	2201      	movs	r2, #1
    5060:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    5062:	687b      	ldr	r3, [r7, #4]
    5064:	2201      	movs	r2, #1
    5066:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    5068:	687b      	ldr	r3, [r7, #4]
    506a:	2200      	movs	r2, #0
    506c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    506e:	687b      	ldr	r3, [r7, #4]
    5070:	2202      	movs	r2, #2
    5072:	72da      	strb	r2, [r3, #11]
}
    5074:	46c0      	nop			; (mov r8, r8)
    5076:	46bd      	mov	sp, r7
    5078:	b002      	add	sp, #8
    507a:	bd80      	pop	{r7, pc}

0000507c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    507c:	b590      	push	{r4, r7, lr}
    507e:	b087      	sub	sp, #28
    5080:	af00      	add	r7, sp, #0
    5082:	0002      	movs	r2, r0
    5084:	6039      	str	r1, [r7, #0]
    5086:	1dfb      	adds	r3, r7, #7
    5088:	701a      	strb	r2, [r3, #0]
    508a:	4c3b      	ldr	r4, [pc, #236]	; (5178 <extint_chan_set_config+0xfc>)
    508c:	447c      	add	r4, pc
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    508e:	2308      	movs	r3, #8
    5090:	18fb      	adds	r3, r7, r3
    5092:	0018      	movs	r0, r3
    5094:	4b39      	ldr	r3, [pc, #228]	; (517c <extint_chan_set_config+0x100>)
    5096:	447b      	add	r3, pc
    5098:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    509a:	683b      	ldr	r3, [r7, #0]
    509c:	685b      	ldr	r3, [r3, #4]
    509e:	b2da      	uxtb	r2, r3
    50a0:	2308      	movs	r3, #8
    50a2:	18fb      	adds	r3, r7, r3
    50a4:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    50a6:	2308      	movs	r3, #8
    50a8:	18fb      	adds	r3, r7, r3
    50aa:	2200      	movs	r2, #0
    50ac:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    50ae:	683b      	ldr	r3, [r7, #0]
    50b0:	7a1a      	ldrb	r2, [r3, #8]
    50b2:	2308      	movs	r3, #8
    50b4:	18fb      	adds	r3, r7, r3
    50b6:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    50b8:	683b      	ldr	r3, [r7, #0]
    50ba:	681b      	ldr	r3, [r3, #0]
    50bc:	b2db      	uxtb	r3, r3
    50be:	2208      	movs	r2, #8
    50c0:	18ba      	adds	r2, r7, r2
    50c2:	0011      	movs	r1, r2
    50c4:	0018      	movs	r0, r3
    50c6:	4b2e      	ldr	r3, [pc, #184]	; (5180 <extint_chan_set_config+0x104>)
    50c8:	58e3      	ldr	r3, [r4, r3]
    50ca:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    50cc:	1dfb      	adds	r3, r7, #7
    50ce:	781b      	ldrb	r3, [r3, #0]
    50d0:	0018      	movs	r0, r3
    50d2:	4b2c      	ldr	r3, [pc, #176]	; (5184 <extint_chan_set_config+0x108>)
    50d4:	447b      	add	r3, pc
    50d6:	4798      	blx	r3
    50d8:	0003      	movs	r3, r0
    50da:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    50dc:	1dfb      	adds	r3, r7, #7
    50de:	781b      	ldrb	r3, [r3, #0]
    50e0:	2207      	movs	r2, #7
    50e2:	4013      	ands	r3, r2
    50e4:	009b      	lsls	r3, r3, #2
    50e6:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    50e8:	683b      	ldr	r3, [r7, #0]
    50ea:	7adb      	ldrb	r3, [r3, #11]
    50ec:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    50ee:	683b      	ldr	r3, [r7, #0]
    50f0:	7a9b      	ldrb	r3, [r3, #10]
    50f2:	2b00      	cmp	r3, #0
    50f4:	d003      	beq.n	50fe <extint_chan_set_config+0x82>
		new_config |= EIC_CONFIG_FILTEN0;
    50f6:	697b      	ldr	r3, [r7, #20]
    50f8:	2208      	movs	r2, #8
    50fa:	4313      	orrs	r3, r2
    50fc:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    50fe:	1dfb      	adds	r3, r7, #7
    5100:	781b      	ldrb	r3, [r3, #0]
    5102:	08db      	lsrs	r3, r3, #3
    5104:	b2db      	uxtb	r3, r3
    5106:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    5108:	1dfb      	adds	r3, r7, #7
    510a:	781b      	ldrb	r3, [r3, #0]
    510c:	08db      	lsrs	r3, r3, #3
    510e:	b2db      	uxtb	r3, r3
    5110:	001a      	movs	r2, r3
    5112:	693b      	ldr	r3, [r7, #16]
    5114:	3206      	adds	r2, #6
    5116:	0092      	lsls	r2, r2, #2
    5118:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    511a:	210f      	movs	r1, #15
    511c:	68fa      	ldr	r2, [r7, #12]
    511e:	4091      	lsls	r1, r2
    5120:	000a      	movs	r2, r1
    5122:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    5124:	401a      	ands	r2, r3
			(new_config << config_pos);
    5126:	6979      	ldr	r1, [r7, #20]
    5128:	68fb      	ldr	r3, [r7, #12]
    512a:	4099      	lsls	r1, r3
    512c:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    512e:	431a      	orrs	r2, r3
    5130:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    5132:	693b      	ldr	r3, [r7, #16]
    5134:	1d82      	adds	r2, r0, #6
    5136:	0092      	lsls	r2, r2, #2
    5138:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    513a:	683b      	ldr	r3, [r7, #0]
    513c:	7a5b      	ldrb	r3, [r3, #9]
    513e:	2b00      	cmp	r3, #0
    5140:	d00a      	beq.n	5158 <extint_chan_set_config+0xdc>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    5142:	693b      	ldr	r3, [r7, #16]
    5144:	695a      	ldr	r2, [r3, #20]
    5146:	1dfb      	adds	r3, r7, #7
    5148:	781b      	ldrb	r3, [r3, #0]
    514a:	2101      	movs	r1, #1
    514c:	4099      	lsls	r1, r3
    514e:	000b      	movs	r3, r1
    5150:	431a      	orrs	r2, r3
    5152:	693b      	ldr	r3, [r7, #16]
    5154:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    5156:	e00a      	b.n	516e <extint_chan_set_config+0xf2>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    5158:	693b      	ldr	r3, [r7, #16]
    515a:	695b      	ldr	r3, [r3, #20]
    515c:	1dfa      	adds	r2, r7, #7
    515e:	7812      	ldrb	r2, [r2, #0]
    5160:	2101      	movs	r1, #1
    5162:	4091      	lsls	r1, r2
    5164:	000a      	movs	r2, r1
    5166:	43d2      	mvns	r2, r2
    5168:	401a      	ands	r2, r3
    516a:	693b      	ldr	r3, [r7, #16]
    516c:	615a      	str	r2, [r3, #20]
}
    516e:	46c0      	nop			; (mov r8, r8)
    5170:	46bd      	mov	sp, r7
    5172:	b007      	add	sp, #28
    5174:	bd90      	pop	{r4, r7, pc}
    5176:	46c0      	nop			; (mov r8, r8)
    5178:	0000cd44 	.word	0x0000cd44
    517c:	fffffd6b 	.word	0xfffffd6b
    5180:	000002b0 	.word	0x000002b0
    5184:	fffffd81 	.word	0xfffffd81

00005188 <system_gclk_chan_get_config_defaults>:
{
    5188:	b580      	push	{r7, lr}
    518a:	b082      	sub	sp, #8
    518c:	af00      	add	r7, sp, #0
    518e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5190:	687b      	ldr	r3, [r7, #4]
    5192:	2200      	movs	r2, #0
    5194:	701a      	strb	r2, [r3, #0]
}
    5196:	46c0      	nop			; (mov r8, r8)
    5198:	46bd      	mov	sp, r7
    519a:	b002      	add	sp, #8
    519c:	bd80      	pop	{r7, pc}
	...

000051a0 <system_apb_clock_set_mask>:
{
    51a0:	b580      	push	{r7, lr}
    51a2:	b082      	sub	sp, #8
    51a4:	af00      	add	r7, sp, #0
    51a6:	0002      	movs	r2, r0
    51a8:	6039      	str	r1, [r7, #0]
    51aa:	1dfb      	adds	r3, r7, #7
    51ac:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    51ae:	1dfb      	adds	r3, r7, #7
    51b0:	781b      	ldrb	r3, [r3, #0]
    51b2:	2b01      	cmp	r3, #1
    51b4:	d00a      	beq.n	51cc <system_apb_clock_set_mask+0x2c>
    51b6:	2b02      	cmp	r3, #2
    51b8:	d00f      	beq.n	51da <system_apb_clock_set_mask+0x3a>
    51ba:	2b00      	cmp	r3, #0
    51bc:	d114      	bne.n	51e8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    51be:	4b0e      	ldr	r3, [pc, #56]	; (51f8 <system_apb_clock_set_mask+0x58>)
    51c0:	4a0d      	ldr	r2, [pc, #52]	; (51f8 <system_apb_clock_set_mask+0x58>)
    51c2:	6991      	ldr	r1, [r2, #24]
    51c4:	683a      	ldr	r2, [r7, #0]
    51c6:	430a      	orrs	r2, r1
    51c8:	619a      	str	r2, [r3, #24]
			break;
    51ca:	e00f      	b.n	51ec <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    51cc:	4b0a      	ldr	r3, [pc, #40]	; (51f8 <system_apb_clock_set_mask+0x58>)
    51ce:	4a0a      	ldr	r2, [pc, #40]	; (51f8 <system_apb_clock_set_mask+0x58>)
    51d0:	69d1      	ldr	r1, [r2, #28]
    51d2:	683a      	ldr	r2, [r7, #0]
    51d4:	430a      	orrs	r2, r1
    51d6:	61da      	str	r2, [r3, #28]
			break;
    51d8:	e008      	b.n	51ec <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    51da:	4b07      	ldr	r3, [pc, #28]	; (51f8 <system_apb_clock_set_mask+0x58>)
    51dc:	4a06      	ldr	r2, [pc, #24]	; (51f8 <system_apb_clock_set_mask+0x58>)
    51de:	6a11      	ldr	r1, [r2, #32]
    51e0:	683a      	ldr	r2, [r7, #0]
    51e2:	430a      	orrs	r2, r1
    51e4:	621a      	str	r2, [r3, #32]
			break;
    51e6:	e001      	b.n	51ec <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    51e8:	2317      	movs	r3, #23
    51ea:	e000      	b.n	51ee <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    51ec:	2300      	movs	r3, #0
}
    51ee:	0018      	movs	r0, r3
    51f0:	46bd      	mov	sp, r7
    51f2:	b002      	add	sp, #8
    51f4:	bd80      	pop	{r7, pc}
    51f6:	46c0      	nop			; (mov r8, r8)
    51f8:	40000400 	.word	0x40000400

000051fc <system_interrupt_enable>:
{
    51fc:	b580      	push	{r7, lr}
    51fe:	b082      	sub	sp, #8
    5200:	af00      	add	r7, sp, #0
    5202:	0002      	movs	r2, r0
    5204:	1dfb      	adds	r3, r7, #7
    5206:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5208:	4b06      	ldr	r3, [pc, #24]	; (5224 <system_interrupt_enable+0x28>)
    520a:	1dfa      	adds	r2, r7, #7
    520c:	7812      	ldrb	r2, [r2, #0]
    520e:	0011      	movs	r1, r2
    5210:	221f      	movs	r2, #31
    5212:	400a      	ands	r2, r1
    5214:	2101      	movs	r1, #1
    5216:	4091      	lsls	r1, r2
    5218:	000a      	movs	r2, r1
    521a:	601a      	str	r2, [r3, #0]
}
    521c:	46c0      	nop			; (mov r8, r8)
    521e:	46bd      	mov	sp, r7
    5220:	b002      	add	sp, #8
    5222:	bd80      	pop	{r7, pc}
    5224:	e000e100 	.word	0xe000e100

00005228 <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    5228:	b580      	push	{r7, lr}
    522a:	b084      	sub	sp, #16
    522c:	af00      	add	r7, sp, #0
    522e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5230:	687b      	ldr	r3, [r7, #4]
    5232:	681b      	ldr	r3, [r3, #0]
    5234:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    5236:	68fb      	ldr	r3, [r7, #12]
    5238:	7a9b      	ldrb	r3, [r3, #10]
    523a:	b2db      	uxtb	r3, r3
    523c:	b25b      	sxtb	r3, r3
    523e:	2b00      	cmp	r3, #0
    5240:	da01      	bge.n	5246 <rtc_calendar_is_syncing+0x1e>
                return true;
    5242:	2301      	movs	r3, #1
    5244:	e000      	b.n	5248 <rtc_calendar_is_syncing+0x20>
        }

        return false;
    5246:	2300      	movs	r3, #0
}
    5248:	0018      	movs	r0, r3
    524a:	46bd      	mov	sp, r7
    524c:	b004      	add	sp, #16
    524e:	bd80      	pop	{r7, pc}

00005250 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    5250:	b580      	push	{r7, lr}
    5252:	b084      	sub	sp, #16
    5254:	af00      	add	r7, sp, #0
    5256:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    5258:	687b      	ldr	r3, [r7, #4]
    525a:	681b      	ldr	r3, [r3, #0]
    525c:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    525e:	2003      	movs	r0, #3
    5260:	4b0b      	ldr	r3, [pc, #44]	; (5290 <rtc_calendar_enable+0x40>)
    5262:	447b      	add	r3, pc
    5264:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
    5266:	46c0      	nop			; (mov r8, r8)
    5268:	687b      	ldr	r3, [r7, #4]
    526a:	0018      	movs	r0, r3
    526c:	4b09      	ldr	r3, [pc, #36]	; (5294 <rtc_calendar_enable+0x44>)
    526e:	447b      	add	r3, pc
    5270:	4798      	blx	r3
    5272:	1e03      	subs	r3, r0, #0
    5274:	d1f8      	bne.n	5268 <rtc_calendar_enable+0x18>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    5276:	68fb      	ldr	r3, [r7, #12]
    5278:	881b      	ldrh	r3, [r3, #0]
    527a:	b29b      	uxth	r3, r3
    527c:	2202      	movs	r2, #2
    527e:	4313      	orrs	r3, r2
    5280:	b29a      	uxth	r2, r3
    5282:	68fb      	ldr	r3, [r7, #12]
    5284:	801a      	strh	r2, [r3, #0]
}
    5286:	46c0      	nop			; (mov r8, r8)
    5288:	46bd      	mov	sp, r7
    528a:	b004      	add	sp, #16
    528c:	bd80      	pop	{r7, pc}
    528e:	46c0      	nop			; (mov r8, r8)
    5290:	ffffff97 	.word	0xffffff97
    5294:	ffffffb7 	.word	0xffffffb7

00005298 <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    5298:	b580      	push	{r7, lr}
    529a:	b084      	sub	sp, #16
    529c:	af00      	add	r7, sp, #0
    529e:	6078      	str	r0, [r7, #4]
    52a0:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    52a2:	683b      	ldr	r3, [r7, #0]
    52a4:	88db      	ldrh	r3, [r3, #6]
    52a6:	001a      	movs	r2, r3
    52a8:	687b      	ldr	r3, [r7, #4]
    52aa:	88db      	ldrh	r3, [r3, #6]
    52ac:	1ad3      	subs	r3, r2, r3
    52ae:	069b      	lsls	r3, r3, #26
    52b0:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    52b2:	683b      	ldr	r3, [r7, #0]
    52b4:	795b      	ldrb	r3, [r3, #5]
    52b6:	059b      	lsls	r3, r3, #22
    52b8:	001a      	movs	r2, r3
    52ba:	68fb      	ldr	r3, [r7, #12]
    52bc:	4313      	orrs	r3, r2
    52be:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    52c0:	683b      	ldr	r3, [r7, #0]
    52c2:	791b      	ldrb	r3, [r3, #4]
    52c4:	045b      	lsls	r3, r3, #17
    52c6:	001a      	movs	r2, r3
    52c8:	68fb      	ldr	r3, [r7, #12]
    52ca:	4313      	orrs	r3, r2
    52cc:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    52ce:	683b      	ldr	r3, [r7, #0]
    52d0:	789b      	ldrb	r3, [r3, #2]
    52d2:	031b      	lsls	r3, r3, #12
    52d4:	001a      	movs	r2, r3
    52d6:	68fb      	ldr	r3, [r7, #12]
    52d8:	4313      	orrs	r3, r2
    52da:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	791b      	ldrb	r3, [r3, #4]
    52e0:	2201      	movs	r2, #1
    52e2:	4053      	eors	r3, r2
    52e4:	b2db      	uxtb	r3, r3
    52e6:	2b00      	cmp	r3, #0
    52e8:	d008      	beq.n	52fc <rtc_calendar_time_to_register_value+0x64>
    52ea:	683b      	ldr	r3, [r7, #0]
    52ec:	78db      	ldrb	r3, [r3, #3]
    52ee:	2b00      	cmp	r3, #0
    52f0:	d004      	beq.n	52fc <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    52f2:	68fb      	ldr	r3, [r7, #12]
    52f4:	2280      	movs	r2, #128	; 0x80
    52f6:	0252      	lsls	r2, r2, #9
    52f8:	4313      	orrs	r3, r2
    52fa:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    52fc:	683b      	ldr	r3, [r7, #0]
    52fe:	785b      	ldrb	r3, [r3, #1]
    5300:	019b      	lsls	r3, r3, #6
    5302:	001a      	movs	r2, r3
    5304:	68fb      	ldr	r3, [r7, #12]
    5306:	4313      	orrs	r3, r2
    5308:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    530a:	683b      	ldr	r3, [r7, #0]
    530c:	781b      	ldrb	r3, [r3, #0]
    530e:	001a      	movs	r2, r3
    5310:	68fb      	ldr	r3, [r7, #12]
    5312:	4313      	orrs	r3, r2
    5314:	60fb      	str	r3, [r7, #12]

	return register_value;
    5316:	68fb      	ldr	r3, [r7, #12]
}
    5318:	0018      	movs	r0, r3
    531a:	46bd      	mov	sp, r7
    531c:	b004      	add	sp, #16
    531e:	bd80      	pop	{r7, pc}

00005320 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
    5320:	b580      	push	{r7, lr}
    5322:	b084      	sub	sp, #16
    5324:	af00      	add	r7, sp, #0
    5326:	60f8      	str	r0, [r7, #12]
    5328:	60b9      	str	r1, [r7, #8]
    532a:	607a      	str	r2, [r7, #4]
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    532c:	68bb      	ldr	r3, [r7, #8]
    532e:	0e9b      	lsrs	r3, r3, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
    5330:	b29a      	uxth	r2, r3
    5332:	68fb      	ldr	r3, [r7, #12]
    5334:	88db      	ldrh	r3, [r3, #6]
    5336:	18d3      	adds	r3, r2, r3
    5338:	b29a      	uxth	r2, r3
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	80da      	strh	r2, [r3, #6]

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
    533e:	68bb      	ldr	r3, [r7, #8]
    5340:	0d9b      	lsrs	r3, r3, #22
    5342:	b2db      	uxtb	r3, r3
    5344:	220f      	movs	r2, #15
    5346:	4013      	ands	r3, r2
    5348:	b2da      	uxtb	r2, r3
    534a:	687b      	ldr	r3, [r7, #4]
    534c:	715a      	strb	r2, [r3, #5]
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
    534e:	68bb      	ldr	r3, [r7, #8]
    5350:	0c5b      	lsrs	r3, r3, #17
    5352:	b2db      	uxtb	r3, r3
    5354:	221f      	movs	r2, #31
    5356:	4013      	ands	r3, r2
    5358:	b2da      	uxtb	r2, r3
    535a:	687b      	ldr	r3, [r7, #4]
    535c:	711a      	strb	r2, [r3, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
    535e:	68fb      	ldr	r3, [r7, #12]
    5360:	791b      	ldrb	r3, [r3, #4]
    5362:	2b00      	cmp	r3, #0
    5364:	d008      	beq.n	5378 <rtc_calendar_register_value_to_time+0x58>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
    5366:	68bb      	ldr	r3, [r7, #8]
    5368:	0b1b      	lsrs	r3, r3, #12
    536a:	b2db      	uxtb	r3, r3
    536c:	221f      	movs	r2, #31
    536e:	4013      	ands	r3, r2
    5370:	b2da      	uxtb	r2, r3
    5372:	687b      	ldr	r3, [r7, #4]
    5374:	709a      	strb	r2, [r3, #2]
    5376:	e010      	b.n	539a <rtc_calendar_register_value_to_time+0x7a>
				RTC_MODE2_CLOCK_HOUR_Pos);
	} else {
		/* Set hour in 12h mode. */
		time->hour = ((register_value &
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
    5378:	68bb      	ldr	r3, [r7, #8]
    537a:	0b1b      	lsrs	r3, r3, #12
    537c:	b2db      	uxtb	r3, r3
    537e:	220f      	movs	r2, #15
    5380:	4013      	ands	r3, r2
    5382:	b2da      	uxtb	r2, r3
		time->hour = ((register_value &
    5384:	687b      	ldr	r3, [r7, #4]
    5386:	709a      	strb	r2, [r3, #2]
				RTC_MODE2_CLOCK_HOUR_Pos);

		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
    5388:	68ba      	ldr	r2, [r7, #8]
    538a:	2380      	movs	r3, #128	; 0x80
    538c:	025b      	lsls	r3, r3, #9
    538e:	4013      	ands	r3, r2
    5390:	1e5a      	subs	r2, r3, #1
    5392:	4193      	sbcs	r3, r2
    5394:	b2da      	uxtb	r2, r3
    5396:	687b      	ldr	r3, [r7, #4]
    5398:	70da      	strb	r2, [r3, #3]
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
    539a:	68bb      	ldr	r3, [r7, #8]
    539c:	099b      	lsrs	r3, r3, #6
    539e:	b2db      	uxtb	r3, r3
    53a0:	223f      	movs	r2, #63	; 0x3f
    53a2:	4013      	ands	r3, r2
    53a4:	b2da      	uxtb	r2, r3
    53a6:	687b      	ldr	r3, [r7, #4]
    53a8:	705a      	strb	r2, [r3, #1]
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
    53aa:	68bb      	ldr	r3, [r7, #8]
    53ac:	b2db      	uxtb	r3, r3
    53ae:	223f      	movs	r2, #63	; 0x3f
    53b0:	4013      	ands	r3, r2
    53b2:	b2da      	uxtb	r2, r3
    53b4:	687b      	ldr	r3, [r7, #4]
    53b6:	701a      	strb	r2, [r3, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
    53b8:	46c0      	nop			; (mov r8, r8)
    53ba:	46bd      	mov	sp, r7
    53bc:	b004      	add	sp, #16
    53be:	bd80      	pop	{r7, pc}

000053c0 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    53c0:	b590      	push	{r4, r7, lr}
    53c2:	b085      	sub	sp, #20
    53c4:	af00      	add	r7, sp, #0
    53c6:	6078      	str	r0, [r7, #4]
    53c8:	6039      	str	r1, [r7, #0]
    53ca:	4c30      	ldr	r4, [pc, #192]	; (548c <_rtc_calendar_set_config+0xcc>)
    53cc:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    53ce:	687b      	ldr	r3, [r7, #4]
    53d0:	681b      	ldr	r3, [r3, #0]
    53d2:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    53d4:	683b      	ldr	r3, [r7, #0]
    53d6:	881a      	ldrh	r2, [r3, #0]
    53d8:	230e      	movs	r3, #14
    53da:	18fb      	adds	r3, r7, r3
    53dc:	2108      	movs	r1, #8
    53de:	430a      	orrs	r2, r1
    53e0:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    53e2:	683b      	ldr	r3, [r7, #0]
    53e4:	791b      	ldrb	r3, [r3, #4]
    53e6:	2201      	movs	r2, #1
    53e8:	4053      	eors	r3, r2
    53ea:	b2db      	uxtb	r3, r3
    53ec:	2b00      	cmp	r3, #0
    53ee:	d007      	beq.n	5400 <_rtc_calendar_set_config+0x40>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    53f0:	230e      	movs	r3, #14
    53f2:	18fb      	adds	r3, r7, r3
    53f4:	220e      	movs	r2, #14
    53f6:	18ba      	adds	r2, r7, r2
    53f8:	8812      	ldrh	r2, [r2, #0]
    53fa:	2140      	movs	r1, #64	; 0x40
    53fc:	430a      	orrs	r2, r1
    53fe:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    5400:	683b      	ldr	r3, [r7, #0]
    5402:	789b      	ldrb	r3, [r3, #2]
    5404:	2b00      	cmp	r3, #0
    5406:	d007      	beq.n	5418 <_rtc_calendar_set_config+0x58>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    5408:	230e      	movs	r3, #14
    540a:	18fb      	adds	r3, r7, r3
    540c:	220e      	movs	r2, #14
    540e:	18ba      	adds	r2, r7, r2
    5410:	8812      	ldrh	r2, [r2, #0]
    5412:	2180      	movs	r1, #128	; 0x80
    5414:	430a      	orrs	r2, r1
    5416:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    5418:	68bb      	ldr	r3, [r7, #8]
    541a:	220e      	movs	r2, #14
    541c:	18ba      	adds	r2, r7, r2
    541e:	8812      	ldrh	r2, [r2, #0]
    5420:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    5422:	683b      	ldr	r3, [r7, #0]
    5424:	78db      	ldrb	r3, [r3, #3]
    5426:	2b00      	cmp	r3, #0
    5428:	d008      	beq.n	543c <_rtc_calendar_set_config+0x7c>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    542a:	68bb      	ldr	r3, [r7, #8]
    542c:	885b      	ldrh	r3, [r3, #2]
    542e:	b29b      	uxth	r3, r3
    5430:	2280      	movs	r2, #128	; 0x80
    5432:	01d2      	lsls	r2, r2, #7
    5434:	4313      	orrs	r3, r2
    5436:	b29a      	uxth	r2, r3
    5438:	68bb      	ldr	r3, [r7, #8]
    543a:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    543c:	230d      	movs	r3, #13
    543e:	18fb      	adds	r3, r7, r3
    5440:	2200      	movs	r2, #0
    5442:	701a      	strb	r2, [r3, #0]
    5444:	e018      	b.n	5478 <_rtc_calendar_set_config+0xb8>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    5446:	230d      	movs	r3, #13
    5448:	18fb      	adds	r3, r7, r3
    544a:	781a      	ldrb	r2, [r3, #0]
    544c:	0013      	movs	r3, r2
    544e:	009b      	lsls	r3, r3, #2
    5450:	189b      	adds	r3, r3, r2
    5452:	005b      	lsls	r3, r3, #1
    5454:	3308      	adds	r3, #8
    5456:	683a      	ldr	r2, [r7, #0]
    5458:	18d1      	adds	r1, r2, r3
    545a:	230d      	movs	r3, #13
    545c:	18fb      	adds	r3, r7, r3
    545e:	781a      	ldrb	r2, [r3, #0]
    5460:	687b      	ldr	r3, [r7, #4]
    5462:	0018      	movs	r0, r3
    5464:	4b0a      	ldr	r3, [pc, #40]	; (5490 <_rtc_calendar_set_config+0xd0>)
    5466:	58e3      	ldr	r3, [r4, r3]
    5468:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    546a:	230d      	movs	r3, #13
    546c:	18fb      	adds	r3, r7, r3
    546e:	781a      	ldrb	r2, [r3, #0]
    5470:	230d      	movs	r3, #13
    5472:	18fb      	adds	r3, r7, r3
    5474:	3201      	adds	r2, #1
    5476:	701a      	strb	r2, [r3, #0]
    5478:	230d      	movs	r3, #13
    547a:	18fb      	adds	r3, r7, r3
    547c:	781b      	ldrb	r3, [r3, #0]
    547e:	2b00      	cmp	r3, #0
    5480:	d0e1      	beq.n	5446 <_rtc_calendar_set_config+0x86>
	}
}
    5482:	46c0      	nop			; (mov r8, r8)
    5484:	46bd      	mov	sp, r7
    5486:	b005      	add	sp, #20
    5488:	bd90      	pop	{r4, r7, pc}
    548a:	46c0      	nop			; (mov r8, r8)
    548c:	0000ca04 	.word	0x0000ca04
    5490:	000002a4 	.word	0x000002a4

00005494 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    5494:	b590      	push	{r4, r7, lr}
    5496:	b087      	sub	sp, #28
    5498:	af00      	add	r7, sp, #0
    549a:	60f8      	str	r0, [r7, #12]
    549c:	60b9      	str	r1, [r7, #8]
    549e:	607a      	str	r2, [r7, #4]
    54a0:	4c1c      	ldr	r4, [pc, #112]	; (5514 <rtc_calendar_init+0x80>)
    54a2:	447c      	add	r4, pc
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    54a4:	68fb      	ldr	r3, [r7, #12]
    54a6:	68ba      	ldr	r2, [r7, #8]
    54a8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    54aa:	2120      	movs	r1, #32
    54ac:	2000      	movs	r0, #0
    54ae:	4b1a      	ldr	r3, [pc, #104]	; (5518 <rtc_calendar_init+0x84>)
    54b0:	447b      	add	r3, pc
    54b2:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    54b4:	2314      	movs	r3, #20
    54b6:	18fb      	adds	r3, r7, r3
    54b8:	0018      	movs	r0, r3
    54ba:	4b18      	ldr	r3, [pc, #96]	; (551c <rtc_calendar_init+0x88>)
    54bc:	447b      	add	r3, pc
    54be:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    54c0:	2314      	movs	r3, #20
    54c2:	18fb      	adds	r3, r7, r3
    54c4:	2202      	movs	r2, #2
    54c6:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    54c8:	2314      	movs	r3, #20
    54ca:	18fb      	adds	r3, r7, r3
    54cc:	0019      	movs	r1, r3
    54ce:	2004      	movs	r0, #4
    54d0:	4b13      	ldr	r3, [pc, #76]	; (5520 <rtc_calendar_init+0x8c>)
    54d2:	58e3      	ldr	r3, [r4, r3]
    54d4:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    54d6:	2004      	movs	r0, #4
    54d8:	4b12      	ldr	r3, [pc, #72]	; (5524 <rtc_calendar_init+0x90>)
    54da:	58e3      	ldr	r3, [r4, r3]
    54dc:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	//rtc_calendar_reset(module);

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	791a      	ldrb	r2, [r3, #4]
    54e2:	68fb      	ldr	r3, [r7, #12]
    54e4:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    54e6:	687b      	ldr	r3, [r7, #4]
    54e8:	78da      	ldrb	r2, [r3, #3]
    54ea:	68fb      	ldr	r3, [r7, #12]
    54ec:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    54ee:	687b      	ldr	r3, [r7, #4]
    54f0:	88da      	ldrh	r2, [r3, #6]
    54f2:	68fb      	ldr	r3, [r7, #12]
    54f4:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    54f6:	4b0c      	ldr	r3, [pc, #48]	; (5528 <rtc_calendar_init+0x94>)
    54f8:	58e3      	ldr	r3, [r4, r3]
    54fa:	68fa      	ldr	r2, [r7, #12]
    54fc:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    54fe:	687a      	ldr	r2, [r7, #4]
    5500:	68fb      	ldr	r3, [r7, #12]
    5502:	0011      	movs	r1, r2
    5504:	0018      	movs	r0, r3
    5506:	4b09      	ldr	r3, [pc, #36]	; (552c <rtc_calendar_init+0x98>)
    5508:	447b      	add	r3, pc
    550a:	4798      	blx	r3
}
    550c:	46c0      	nop			; (mov r8, r8)
    550e:	46bd      	mov	sp, r7
    5510:	b007      	add	sp, #28
    5512:	bd90      	pop	{r4, r7, pc}
    5514:	0000c92e 	.word	0x0000c92e
    5518:	fffffced 	.word	0xfffffced
    551c:	fffffcc9 	.word	0xfffffcc9
    5520:	000000b0 	.word	0x000000b0
    5524:	00000230 	.word	0x00000230
    5528:	00000018 	.word	0x00000018
    552c:	fffffeb5 	.word	0xfffffeb5

00005530 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
    5530:	b590      	push	{r4, r7, lr}
    5532:	b085      	sub	sp, #20
    5534:	af00      	add	r7, sp, #0
    5536:	6078      	str	r0, [r7, #4]
    5538:	6039      	str	r1, [r7, #0]
    553a:	4c1f      	ldr	r4, [pc, #124]	; (55b8 <rtc_calendar_get_time+0x88>)
    553c:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    553e:	687b      	ldr	r3, [r7, #4]
    5540:	681b      	ldr	r3, [r3, #0]
    5542:	60fb      	str	r3, [r7, #12]

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
    5544:	687b      	ldr	r3, [r7, #4]
    5546:	795b      	ldrb	r3, [r3, #5]
    5548:	2201      	movs	r2, #1
    554a:	4053      	eors	r3, r2
    554c:	b2db      	uxtb	r3, r3
    554e:	2b00      	cmp	r3, #0
    5550:	d00b      	beq.n	556a <rtc_calendar_get_time+0x3a>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
    5552:	68fb      	ldr	r3, [r7, #12]
    5554:	4a19      	ldr	r2, [pc, #100]	; (55bc <rtc_calendar_get_time+0x8c>)
    5556:	805a      	strh	r2, [r3, #2]

		while (rtc_calendar_is_syncing(module)) {
    5558:	46c0      	nop			; (mov r8, r8)
    555a:	687b      	ldr	r3, [r7, #4]
    555c:	0018      	movs	r0, r3
    555e:	4b18      	ldr	r3, [pc, #96]	; (55c0 <rtc_calendar_get_time+0x90>)
    5560:	447b      	add	r3, pc
    5562:	4798      	blx	r3
    5564:	1e03      	subs	r3, r0, #0
    5566:	d1f8      	bne.n	555a <rtc_calendar_get_time+0x2a>
    5568:	e017      	b.n	559a <rtc_calendar_get_time+0x6a>
			/* Wait for synchronization */
		}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
    556a:	68fb      	ldr	r3, [r7, #12]
    556c:	885b      	ldrh	r3, [r3, #2]
    556e:	b29b      	uxth	r3, r3
    5570:	001a      	movs	r2, r3
    5572:	2380      	movs	r3, #128	; 0x80
    5574:	01db      	lsls	r3, r3, #7
    5576:	4013      	ands	r3, r2
    5578:	d10f      	bne.n	559a <rtc_calendar_get_time+0x6a>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
    557a:	68fb      	ldr	r3, [r7, #12]
    557c:	885b      	ldrh	r3, [r3, #2]
    557e:	b29b      	uxth	r3, r3
    5580:	4a10      	ldr	r2, [pc, #64]	; (55c4 <rtc_calendar_get_time+0x94>)
    5582:	4313      	orrs	r3, r2
    5584:	b29a      	uxth	r2, r3
    5586:	68fb      	ldr	r3, [r7, #12]
    5588:	805a      	strh	r2, [r3, #2]
		 /* wait that the first Read request finishes */
		while (rtc_calendar_is_syncing(module)) {
    558a:	46c0      	nop			; (mov r8, r8)
    558c:	687b      	ldr	r3, [r7, #4]
    558e:	0018      	movs	r0, r3
    5590:	4b0d      	ldr	r3, [pc, #52]	; (55c8 <rtc_calendar_get_time+0x98>)
    5592:	447b      	add	r3, pc
    5594:	4798      	blx	r3
    5596:	1e03      	subs	r3, r0, #0
    5598:	d1f8      	bne.n	558c <rtc_calendar_get_time+0x5c>
			/* Wait for synchronization */
		}
	}

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
    559a:	68fb      	ldr	r3, [r7, #12]
    559c:	691b      	ldr	r3, [r3, #16]
    559e:	60bb      	str	r3, [r7, #8]

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
    55a0:	683a      	ldr	r2, [r7, #0]
    55a2:	68b9      	ldr	r1, [r7, #8]
    55a4:	687b      	ldr	r3, [r7, #4]
    55a6:	0018      	movs	r0, r3
    55a8:	4b08      	ldr	r3, [pc, #32]	; (55cc <rtc_calendar_get_time+0x9c>)
    55aa:	58e3      	ldr	r3, [r4, r3]
    55ac:	4798      	blx	r3
}
    55ae:	46c0      	nop			; (mov r8, r8)
    55b0:	46bd      	mov	sp, r7
    55b2:	b005      	add	sp, #20
    55b4:	bd90      	pop	{r4, r7, pc}
    55b6:	46c0      	nop			; (mov r8, r8)
    55b8:	0000c894 	.word	0x0000c894
    55bc:	ffff8000 	.word	0xffff8000
    55c0:	fffffcc5 	.word	0xfffffcc5
    55c4:	ffffc000 	.word	0xffffc000
    55c8:	fffffc93 	.word	0xfffffc93
    55cc:	00000034 	.word	0x00000034

000055d0 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    55d0:	b580      	push	{r7, lr}
    55d2:	b086      	sub	sp, #24
    55d4:	af00      	add	r7, sp, #0
    55d6:	60f8      	str	r0, [r7, #12]
    55d8:	60b9      	str	r1, [r7, #8]
    55da:	1dfb      	adds	r3, r7, #7
    55dc:	701a      	strb	r2, [r3, #0]
    55de:	4a19      	ldr	r2, [pc, #100]	; (5644 <rtc_calendar_set_alarm+0x74>)
    55e0:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    55e2:	68fb      	ldr	r3, [r7, #12]
    55e4:	681b      	ldr	r3, [r3, #0]
    55e6:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    55e8:	1dfb      	adds	r3, r7, #7
    55ea:	781b      	ldrb	r3, [r3, #0]
    55ec:	2b01      	cmp	r3, #1
    55ee:	d901      	bls.n	55f4 <rtc_calendar_set_alarm+0x24>
		return STATUS_ERR_INVALID_ARG;
    55f0:	2317      	movs	r3, #23
    55f2:	e022      	b.n	563a <rtc_calendar_set_alarm+0x6a>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    55f4:	68b9      	ldr	r1, [r7, #8]
    55f6:	68fb      	ldr	r3, [r7, #12]
    55f8:	0018      	movs	r0, r3
    55fa:	4b13      	ldr	r3, [pc, #76]	; (5648 <rtc_calendar_set_alarm+0x78>)
    55fc:	58d3      	ldr	r3, [r2, r3]
    55fe:	4798      	blx	r3
    5600:	0003      	movs	r3, r0
    5602:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    5604:	46c0      	nop			; (mov r8, r8)
    5606:	68fb      	ldr	r3, [r7, #12]
    5608:	0018      	movs	r0, r3
    560a:	4b10      	ldr	r3, [pc, #64]	; (564c <rtc_calendar_set_alarm+0x7c>)
    560c:	447b      	add	r3, pc
    560e:	4798      	blx	r3
    5610:	1e03      	subs	r3, r0, #0
    5612:	d1f8      	bne.n	5606 <rtc_calendar_set_alarm+0x36>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    5614:	1dfb      	adds	r3, r7, #7
    5616:	781a      	ldrb	r2, [r3, #0]
    5618:	697b      	ldr	r3, [r7, #20]
    561a:	3203      	adds	r2, #3
    561c:	00d2      	lsls	r2, r2, #3
    561e:	6939      	ldr	r1, [r7, #16]
    5620:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    5622:	1dfb      	adds	r3, r7, #7
    5624:	781b      	ldrb	r3, [r3, #0]
    5626:	68ba      	ldr	r2, [r7, #8]
    5628:	7a11      	ldrb	r1, [r2, #8]
    562a:	697a      	ldr	r2, [r7, #20]
    562c:	3303      	adds	r3, #3
    562e:	00db      	lsls	r3, r3, #3
    5630:	18d3      	adds	r3, r2, r3
    5632:	3304      	adds	r3, #4
    5634:	1c0a      	adds	r2, r1, #0
    5636:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    5638:	2300      	movs	r3, #0
}
    563a:	0018      	movs	r0, r3
    563c:	46bd      	mov	sp, r7
    563e:	b006      	add	sp, #24
    5640:	bd80      	pop	{r7, pc}
    5642:	46c0      	nop			; (mov r8, r8)
    5644:	0000c7f0 	.word	0x0000c7f0
    5648:	0000028c 	.word	0x0000028c
    564c:	fffffc19 	.word	0xfffffc19

00005650 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    5650:	b580      	push	{r7, lr}
    5652:	b086      	sub	sp, #24
    5654:	af00      	add	r7, sp, #0
    5656:	6078      	str	r0, [r7, #4]
    5658:	4a29      	ldr	r2, [pc, #164]	; (5700 <_rtc_interrupt_handler+0xb0>)
    565a:	447a      	add	r2, pc
	struct rtc_module *module = _rtc_instance[instance_index];
    565c:	4b29      	ldr	r3, [pc, #164]	; (5704 <_rtc_interrupt_handler+0xb4>)
    565e:	58d3      	ldr	r3, [r2, r3]
    5660:	687a      	ldr	r2, [r7, #4]
    5662:	0092      	lsls	r2, r2, #2
    5664:	58d3      	ldr	r3, [r2, r3]
    5666:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    5668:	697b      	ldr	r3, [r7, #20]
    566a:	681b      	ldr	r3, [r3, #0]
    566c:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    566e:	230e      	movs	r3, #14
    5670:	18fb      	adds	r3, r7, r3
    5672:	697a      	ldr	r2, [r7, #20]
    5674:	8a52      	ldrh	r2, [r2, #18]
    5676:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    5678:	697b      	ldr	r3, [r7, #20]
    567a:	8a1b      	ldrh	r3, [r3, #16]
    567c:	b29a      	uxth	r2, r3
    567e:	230e      	movs	r3, #14
    5680:	18fb      	adds	r3, r7, r3
    5682:	210e      	movs	r1, #14
    5684:	1879      	adds	r1, r7, r1
    5686:	8809      	ldrh	r1, [r1, #0]
    5688:	400a      	ands	r2, r1
    568a:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    568c:	693b      	ldr	r3, [r7, #16]
    568e:	7a1b      	ldrb	r3, [r3, #8]
    5690:	b2da      	uxtb	r2, r3
    5692:	230c      	movs	r3, #12
    5694:	18fb      	adds	r3, r7, r3
    5696:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    5698:	693b      	ldr	r3, [r7, #16]
    569a:	79db      	ldrb	r3, [r3, #7]
    569c:	b2db      	uxtb	r3, r3
    569e:	b29a      	uxth	r2, r3
    56a0:	230c      	movs	r3, #12
    56a2:	18fb      	adds	r3, r7, r3
    56a4:	210c      	movs	r1, #12
    56a6:	1879      	adds	r1, r7, r1
    56a8:	8809      	ldrh	r1, [r1, #0]
    56aa:	400a      	ands	r2, r1
    56ac:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    56ae:	230c      	movs	r3, #12
    56b0:	18fb      	adds	r3, r7, r3
    56b2:	881b      	ldrh	r3, [r3, #0]
    56b4:	2280      	movs	r2, #128	; 0x80
    56b6:	4013      	ands	r3, r2
    56b8:	d00c      	beq.n	56d4 <_rtc_interrupt_handler+0x84>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    56ba:	230e      	movs	r3, #14
    56bc:	18fb      	adds	r3, r7, r3
    56be:	881b      	ldrh	r3, [r3, #0]
    56c0:	2202      	movs	r2, #2
    56c2:	4013      	ands	r3, r2
    56c4:	d002      	beq.n	56cc <_rtc_interrupt_handler+0x7c>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    56c6:	697b      	ldr	r3, [r7, #20]
    56c8:	68db      	ldr	r3, [r3, #12]
    56ca:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    56cc:	693b      	ldr	r3, [r7, #16]
    56ce:	2280      	movs	r2, #128	; 0x80
    56d0:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    56d2:	e011      	b.n	56f8 <_rtc_interrupt_handler+0xa8>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    56d4:	230c      	movs	r3, #12
    56d6:	18fb      	adds	r3, r7, r3
    56d8:	881b      	ldrh	r3, [r3, #0]
    56da:	2201      	movs	r2, #1
    56dc:	4013      	ands	r3, r2
    56de:	d00b      	beq.n	56f8 <_rtc_interrupt_handler+0xa8>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    56e0:	230e      	movs	r3, #14
    56e2:	18fb      	adds	r3, r7, r3
    56e4:	881b      	ldrh	r3, [r3, #0]
    56e6:	2201      	movs	r2, #1
    56e8:	4013      	ands	r3, r2
    56ea:	d002      	beq.n	56f2 <_rtc_interrupt_handler+0xa2>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    56ec:	697b      	ldr	r3, [r7, #20]
    56ee:	689b      	ldr	r3, [r3, #8]
    56f0:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    56f2:	693b      	ldr	r3, [r7, #16]
    56f4:	2201      	movs	r2, #1
    56f6:	721a      	strb	r2, [r3, #8]
}
    56f8:	46c0      	nop			; (mov r8, r8)
    56fa:	46bd      	mov	sp, r7
    56fc:	b006      	add	sp, #24
    56fe:	bd80      	pop	{r7, pc}
    5700:	0000c776 	.word	0x0000c776
    5704:	00000018 	.word	0x00000018

00005708 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    5708:	b580      	push	{r7, lr}
    570a:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    570c:	2000      	movs	r0, #0
    570e:	4b03      	ldr	r3, [pc, #12]	; (571c <RTC_Handler+0x14>)
    5710:	447b      	add	r3, pc
    5712:	4798      	blx	r3
}
    5714:	46c0      	nop			; (mov r8, r8)
    5716:	46bd      	mov	sp, r7
    5718:	bd80      	pop	{r7, pc}
    571a:	46c0      	nop			; (mov r8, r8)
    571c:	ffffff3d 	.word	0xffffff3d

00005720 <system_gclk_chan_get_config_defaults>:
{
    5720:	b580      	push	{r7, lr}
    5722:	b082      	sub	sp, #8
    5724:	af00      	add	r7, sp, #0
    5726:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5728:	687b      	ldr	r3, [r7, #4]
    572a:	2200      	movs	r2, #0
    572c:	701a      	strb	r2, [r3, #0]
}
    572e:	46c0      	nop			; (mov r8, r8)
    5730:	46bd      	mov	sp, r7
    5732:	b002      	add	sp, #8
    5734:	bd80      	pop	{r7, pc}

00005736 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    5736:	b580      	push	{r7, lr}
    5738:	b086      	sub	sp, #24
    573a:	af00      	add	r7, sp, #0
    573c:	60f8      	str	r0, [r7, #12]
    573e:	60b9      	str	r1, [r7, #8]
    5740:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    5742:	2316      	movs	r3, #22
    5744:	18fb      	adds	r3, r7, r3
    5746:	2200      	movs	r2, #0
    5748:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    574a:	68bb      	ldr	r3, [r7, #8]
    574c:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    574e:	68bb      	ldr	r3, [r7, #8]
    5750:	085a      	lsrs	r2, r3, #1
    5752:	68fb      	ldr	r3, [r7, #12]
    5754:	429a      	cmp	r2, r3
    5756:	d201      	bcs.n	575c <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    5758:	2340      	movs	r3, #64	; 0x40
    575a:	e026      	b.n	57aa <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    575c:	68bb      	ldr	r3, [r7, #8]
    575e:	085b      	lsrs	r3, r3, #1
    5760:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    5762:	e00a      	b.n	577a <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    5764:	693a      	ldr	r2, [r7, #16]
    5766:	68fb      	ldr	r3, [r7, #12]
    5768:	1ad3      	subs	r3, r2, r3
    576a:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    576c:	2316      	movs	r3, #22
    576e:	18fb      	adds	r3, r7, r3
    5770:	881a      	ldrh	r2, [r3, #0]
    5772:	2316      	movs	r3, #22
    5774:	18fb      	adds	r3, r7, r3
    5776:	3201      	adds	r2, #1
    5778:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    577a:	693a      	ldr	r2, [r7, #16]
    577c:	68fb      	ldr	r3, [r7, #12]
    577e:	429a      	cmp	r2, r3
    5780:	d2f0      	bcs.n	5764 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    5782:	2316      	movs	r3, #22
    5784:	18fb      	adds	r3, r7, r3
    5786:	2216      	movs	r2, #22
    5788:	18ba      	adds	r2, r7, r2
    578a:	8812      	ldrh	r2, [r2, #0]
    578c:	3a01      	subs	r2, #1
    578e:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    5790:	2316      	movs	r3, #22
    5792:	18fb      	adds	r3, r7, r3
    5794:	881b      	ldrh	r3, [r3, #0]
    5796:	2bff      	cmp	r3, #255	; 0xff
    5798:	d901      	bls.n	579e <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    579a:	2340      	movs	r3, #64	; 0x40
    579c:	e005      	b.n	57aa <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    579e:	687b      	ldr	r3, [r7, #4]
    57a0:	2216      	movs	r2, #22
    57a2:	18ba      	adds	r2, r7, r2
    57a4:	8812      	ldrh	r2, [r2, #0]
    57a6:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    57a8:	2300      	movs	r3, #0
	}
}
    57aa:	0018      	movs	r0, r3
    57ac:	46bd      	mov	sp, r7
    57ae:	b006      	add	sp, #24
    57b0:	bd80      	pop	{r7, pc}
	...

000057b4 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    57b4:	b590      	push	{r4, r7, lr}
    57b6:	b085      	sub	sp, #20
    57b8:	af00      	add	r7, sp, #0
    57ba:	0002      	movs	r2, r0
    57bc:	1dfb      	adds	r3, r7, #7
    57be:	701a      	strb	r2, [r3, #0]
    57c0:	1dbb      	adds	r3, r7, #6
    57c2:	1c0a      	adds	r2, r1, #0
    57c4:	701a      	strb	r2, [r3, #0]
    57c6:	4c1e      	ldr	r4, [pc, #120]	; (5840 <sercom_set_gclk_generator+0x8c>)
    57c8:	447c      	add	r4, pc
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    57ca:	4b1e      	ldr	r3, [pc, #120]	; (5844 <sercom_set_gclk_generator+0x90>)
    57cc:	447b      	add	r3, pc
    57ce:	781b      	ldrb	r3, [r3, #0]
    57d0:	2201      	movs	r2, #1
    57d2:	4053      	eors	r3, r2
    57d4:	b2db      	uxtb	r3, r3
    57d6:	2b00      	cmp	r3, #0
    57d8:	d103      	bne.n	57e2 <sercom_set_gclk_generator+0x2e>
    57da:	1dbb      	adds	r3, r7, #6
    57dc:	781b      	ldrb	r3, [r3, #0]
    57de:	2b00      	cmp	r3, #0
    57e0:	d020      	beq.n	5824 <sercom_set_gclk_generator+0x70>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    57e2:	230c      	movs	r3, #12
    57e4:	18fb      	adds	r3, r7, r3
    57e6:	0018      	movs	r0, r3
    57e8:	4b17      	ldr	r3, [pc, #92]	; (5848 <sercom_set_gclk_generator+0x94>)
    57ea:	447b      	add	r3, pc
    57ec:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    57ee:	230c      	movs	r3, #12
    57f0:	18fb      	adds	r3, r7, r3
    57f2:	1dfa      	adds	r2, r7, #7
    57f4:	7812      	ldrb	r2, [r2, #0]
    57f6:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    57f8:	230c      	movs	r3, #12
    57fa:	18fb      	adds	r3, r7, r3
    57fc:	0019      	movs	r1, r3
    57fe:	2013      	movs	r0, #19
    5800:	4b12      	ldr	r3, [pc, #72]	; (584c <sercom_set_gclk_generator+0x98>)
    5802:	58e3      	ldr	r3, [r4, r3]
    5804:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    5806:	2013      	movs	r0, #19
    5808:	4b11      	ldr	r3, [pc, #68]	; (5850 <sercom_set_gclk_generator+0x9c>)
    580a:	58e3      	ldr	r3, [r4, r3]
    580c:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    580e:	4b11      	ldr	r3, [pc, #68]	; (5854 <sercom_set_gclk_generator+0xa0>)
    5810:	447b      	add	r3, pc
    5812:	1dfa      	adds	r2, r7, #7
    5814:	7812      	ldrb	r2, [r2, #0]
    5816:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    5818:	4b0f      	ldr	r3, [pc, #60]	; (5858 <sercom_set_gclk_generator+0xa4>)
    581a:	447b      	add	r3, pc
    581c:	2201      	movs	r2, #1
    581e:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    5820:	2300      	movs	r3, #0
    5822:	e009      	b.n	5838 <sercom_set_gclk_generator+0x84>
	} else if (generator_source == _sercom_config.generator_source) {
    5824:	4b0d      	ldr	r3, [pc, #52]	; (585c <sercom_set_gclk_generator+0xa8>)
    5826:	447b      	add	r3, pc
    5828:	785b      	ldrb	r3, [r3, #1]
    582a:	1dfa      	adds	r2, r7, #7
    582c:	7812      	ldrb	r2, [r2, #0]
    582e:	429a      	cmp	r2, r3
    5830:	d101      	bne.n	5836 <sercom_set_gclk_generator+0x82>
		/* Return status OK if same config */
		return STATUS_OK;
    5832:	2300      	movs	r3, #0
    5834:	e000      	b.n	5838 <sercom_set_gclk_generator+0x84>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    5836:	231d      	movs	r3, #29
}
    5838:	0018      	movs	r0, r3
    583a:	46bd      	mov	sp, r7
    583c:	b005      	add	sp, #20
    583e:	bd90      	pop	{r4, r7, pc}
    5840:	0000c608 	.word	0x0000c608
    5844:	1fffad58 	.word	0x1fffad58
    5848:	ffffff33 	.word	0xffffff33
    584c:	000000b0 	.word	0x000000b0
    5850:	00000230 	.word	0x00000230
    5854:	1fffad14 	.word	0x1fffad14
    5858:	1fffad0a 	.word	0x1fffad0a
    585c:	1fffacfe 	.word	0x1fffacfe

00005860 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    5860:	b580      	push	{r7, lr}
    5862:	b082      	sub	sp, #8
    5864:	af00      	add	r7, sp, #0
    5866:	6078      	str	r0, [r7, #4]
    5868:	000a      	movs	r2, r1
    586a:	1cfb      	adds	r3, r7, #3
    586c:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    586e:	687b      	ldr	r3, [r7, #4]
    5870:	4a57      	ldr	r2, [pc, #348]	; (59d0 <_sercom_get_default_pad+0x170>)
    5872:	4293      	cmp	r3, r2
    5874:	d046      	beq.n	5904 <_sercom_get_default_pad+0xa4>
    5876:	4a56      	ldr	r2, [pc, #344]	; (59d0 <_sercom_get_default_pad+0x170>)
    5878:	4293      	cmp	r3, r2
    587a:	d806      	bhi.n	588a <_sercom_get_default_pad+0x2a>
    587c:	4a55      	ldr	r2, [pc, #340]	; (59d4 <_sercom_get_default_pad+0x174>)
    587e:	4293      	cmp	r3, r2
    5880:	d00f      	beq.n	58a2 <_sercom_get_default_pad+0x42>
    5882:	4a55      	ldr	r2, [pc, #340]	; (59d8 <_sercom_get_default_pad+0x178>)
    5884:	4293      	cmp	r3, r2
    5886:	d025      	beq.n	58d4 <_sercom_get_default_pad+0x74>
    5888:	e09d      	b.n	59c6 <_sercom_get_default_pad+0x166>
    588a:	4a54      	ldr	r2, [pc, #336]	; (59dc <_sercom_get_default_pad+0x17c>)
    588c:	4293      	cmp	r3, r2
    588e:	d100      	bne.n	5892 <_sercom_get_default_pad+0x32>
    5890:	e068      	b.n	5964 <_sercom_get_default_pad+0x104>
    5892:	4a53      	ldr	r2, [pc, #332]	; (59e0 <_sercom_get_default_pad+0x180>)
    5894:	4293      	cmp	r3, r2
    5896:	d100      	bne.n	589a <_sercom_get_default_pad+0x3a>
    5898:	e07c      	b.n	5994 <_sercom_get_default_pad+0x134>
    589a:	4a52      	ldr	r2, [pc, #328]	; (59e4 <_sercom_get_default_pad+0x184>)
    589c:	4293      	cmp	r3, r2
    589e:	d049      	beq.n	5934 <_sercom_get_default_pad+0xd4>
    58a0:	e091      	b.n	59c6 <_sercom_get_default_pad+0x166>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    58a2:	1cfb      	adds	r3, r7, #3
    58a4:	781b      	ldrb	r3, [r3, #0]
    58a6:	2b03      	cmp	r3, #3
    58a8:	d900      	bls.n	58ac <_sercom_get_default_pad+0x4c>
    58aa:	e08b      	b.n	59c4 <_sercom_get_default_pad+0x164>
    58ac:	0018      	movs	r0, r3
    58ae:	f00a fedf 	bl	10670 <__gnu_thumb1_case_si>
    58b2:	46c0      	nop			; (mov r8, r8)
    58b4:	00000010 	.word	0x00000010
    58b8:	00000014 	.word	0x00000014
    58bc:	00000018 	.word	0x00000018
    58c0:	0000001c 	.word	0x0000001c
    58c4:	4b48      	ldr	r3, [pc, #288]	; (59e8 <_sercom_get_default_pad+0x188>)
    58c6:	e07f      	b.n	59c8 <_sercom_get_default_pad+0x168>
    58c8:	4b48      	ldr	r3, [pc, #288]	; (59ec <_sercom_get_default_pad+0x18c>)
    58ca:	e07d      	b.n	59c8 <_sercom_get_default_pad+0x168>
    58cc:	4b48      	ldr	r3, [pc, #288]	; (59f0 <_sercom_get_default_pad+0x190>)
    58ce:	e07b      	b.n	59c8 <_sercom_get_default_pad+0x168>
    58d0:	4b48      	ldr	r3, [pc, #288]	; (59f4 <_sercom_get_default_pad+0x194>)
    58d2:	e079      	b.n	59c8 <_sercom_get_default_pad+0x168>
    58d4:	1cfb      	adds	r3, r7, #3
    58d6:	781b      	ldrb	r3, [r3, #0]
    58d8:	2b03      	cmp	r3, #3
    58da:	d900      	bls.n	58de <_sercom_get_default_pad+0x7e>
    58dc:	e072      	b.n	59c4 <_sercom_get_default_pad+0x164>
    58de:	0018      	movs	r0, r3
    58e0:	f00a fec6 	bl	10670 <__gnu_thumb1_case_si>
    58e4:	00000010 	.word	0x00000010
    58e8:	00000014 	.word	0x00000014
    58ec:	00000018 	.word	0x00000018
    58f0:	0000001c 	.word	0x0000001c
    58f4:	2303      	movs	r3, #3
    58f6:	e067      	b.n	59c8 <_sercom_get_default_pad+0x168>
    58f8:	4b3f      	ldr	r3, [pc, #252]	; (59f8 <_sercom_get_default_pad+0x198>)
    58fa:	e065      	b.n	59c8 <_sercom_get_default_pad+0x168>
    58fc:	4b3f      	ldr	r3, [pc, #252]	; (59fc <_sercom_get_default_pad+0x19c>)
    58fe:	e063      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5900:	4b3f      	ldr	r3, [pc, #252]	; (5a00 <_sercom_get_default_pad+0x1a0>)
    5902:	e061      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5904:	1cfb      	adds	r3, r7, #3
    5906:	781b      	ldrb	r3, [r3, #0]
    5908:	2b03      	cmp	r3, #3
    590a:	d85b      	bhi.n	59c4 <_sercom_get_default_pad+0x164>
    590c:	0018      	movs	r0, r3
    590e:	f00a feaf 	bl	10670 <__gnu_thumb1_case_si>
    5912:	46c0      	nop			; (mov r8, r8)
    5914:	00000010 	.word	0x00000010
    5918:	00000014 	.word	0x00000014
    591c:	00000018 	.word	0x00000018
    5920:	0000001c 	.word	0x0000001c
    5924:	4b37      	ldr	r3, [pc, #220]	; (5a04 <_sercom_get_default_pad+0x1a4>)
    5926:	e04f      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5928:	4b37      	ldr	r3, [pc, #220]	; (5a08 <_sercom_get_default_pad+0x1a8>)
    592a:	e04d      	b.n	59c8 <_sercom_get_default_pad+0x168>
    592c:	4b37      	ldr	r3, [pc, #220]	; (5a0c <_sercom_get_default_pad+0x1ac>)
    592e:	e04b      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5930:	4b37      	ldr	r3, [pc, #220]	; (5a10 <_sercom_get_default_pad+0x1b0>)
    5932:	e049      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5934:	1cfb      	adds	r3, r7, #3
    5936:	781b      	ldrb	r3, [r3, #0]
    5938:	2b03      	cmp	r3, #3
    593a:	d843      	bhi.n	59c4 <_sercom_get_default_pad+0x164>
    593c:	0018      	movs	r0, r3
    593e:	f00a fe97 	bl	10670 <__gnu_thumb1_case_si>
    5942:	46c0      	nop			; (mov r8, r8)
    5944:	00000010 	.word	0x00000010
    5948:	00000014 	.word	0x00000014
    594c:	00000018 	.word	0x00000018
    5950:	0000001c 	.word	0x0000001c
    5954:	4b2f      	ldr	r3, [pc, #188]	; (5a14 <_sercom_get_default_pad+0x1b4>)
    5956:	e037      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5958:	4b2f      	ldr	r3, [pc, #188]	; (5a18 <_sercom_get_default_pad+0x1b8>)
    595a:	e035      	b.n	59c8 <_sercom_get_default_pad+0x168>
    595c:	4b2f      	ldr	r3, [pc, #188]	; (5a1c <_sercom_get_default_pad+0x1bc>)
    595e:	e033      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5960:	4b2f      	ldr	r3, [pc, #188]	; (5a20 <_sercom_get_default_pad+0x1c0>)
    5962:	e031      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5964:	1cfb      	adds	r3, r7, #3
    5966:	781b      	ldrb	r3, [r3, #0]
    5968:	2b03      	cmp	r3, #3
    596a:	d82b      	bhi.n	59c4 <_sercom_get_default_pad+0x164>
    596c:	0018      	movs	r0, r3
    596e:	f00a fe7f 	bl	10670 <__gnu_thumb1_case_si>
    5972:	46c0      	nop			; (mov r8, r8)
    5974:	00000010 	.word	0x00000010
    5978:	00000014 	.word	0x00000014
    597c:	00000018 	.word	0x00000018
    5980:	0000001c 	.word	0x0000001c
    5984:	4b27      	ldr	r3, [pc, #156]	; (5a24 <_sercom_get_default_pad+0x1c4>)
    5986:	e01f      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5988:	4b27      	ldr	r3, [pc, #156]	; (5a28 <_sercom_get_default_pad+0x1c8>)
    598a:	e01d      	b.n	59c8 <_sercom_get_default_pad+0x168>
    598c:	4b27      	ldr	r3, [pc, #156]	; (5a2c <_sercom_get_default_pad+0x1cc>)
    598e:	e01b      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5990:	4b27      	ldr	r3, [pc, #156]	; (5a30 <_sercom_get_default_pad+0x1d0>)
    5992:	e019      	b.n	59c8 <_sercom_get_default_pad+0x168>
    5994:	1cfb      	adds	r3, r7, #3
    5996:	781b      	ldrb	r3, [r3, #0]
    5998:	2b03      	cmp	r3, #3
    599a:	d813      	bhi.n	59c4 <_sercom_get_default_pad+0x164>
    599c:	0018      	movs	r0, r3
    599e:	f00a fe67 	bl	10670 <__gnu_thumb1_case_si>
    59a2:	46c0      	nop			; (mov r8, r8)
    59a4:	00000010 	.word	0x00000010
    59a8:	00000014 	.word	0x00000014
    59ac:	00000018 	.word	0x00000018
    59b0:	0000001c 	.word	0x0000001c
    59b4:	4b1f      	ldr	r3, [pc, #124]	; (5a34 <_sercom_get_default_pad+0x1d4>)
    59b6:	e007      	b.n	59c8 <_sercom_get_default_pad+0x168>
    59b8:	4b1f      	ldr	r3, [pc, #124]	; (5a38 <_sercom_get_default_pad+0x1d8>)
    59ba:	e005      	b.n	59c8 <_sercom_get_default_pad+0x168>
    59bc:	4b1f      	ldr	r3, [pc, #124]	; (5a3c <_sercom_get_default_pad+0x1dc>)
    59be:	e003      	b.n	59c8 <_sercom_get_default_pad+0x168>
    59c0:	4b1f      	ldr	r3, [pc, #124]	; (5a40 <_sercom_get_default_pad+0x1e0>)
    59c2:	e001      	b.n	59c8 <_sercom_get_default_pad+0x168>
    59c4:	46c0      	nop			; (mov r8, r8)
	}

	Assert(false);
	return 0;
    59c6:	2300      	movs	r3, #0
}
    59c8:	0018      	movs	r0, r3
    59ca:	46bd      	mov	sp, r7
    59cc:	b002      	add	sp, #8
    59ce:	bd80      	pop	{r7, pc}
    59d0:	42001000 	.word	0x42001000
    59d4:	42000800 	.word	0x42000800
    59d8:	42000c00 	.word	0x42000c00
    59dc:	42001800 	.word	0x42001800
    59e0:	42001c00 	.word	0x42001c00
    59e4:	42001400 	.word	0x42001400
    59e8:	00040003 	.word	0x00040003
    59ec:	00050003 	.word	0x00050003
    59f0:	00060003 	.word	0x00060003
    59f4:	00070003 	.word	0x00070003
    59f8:	00010003 	.word	0x00010003
    59fc:	001e0003 	.word	0x001e0003
    5a00:	001f0003 	.word	0x001f0003
    5a04:	00080003 	.word	0x00080003
    5a08:	00090003 	.word	0x00090003
    5a0c:	000a0003 	.word	0x000a0003
    5a10:	000b0003 	.word	0x000b0003
    5a14:	00100003 	.word	0x00100003
    5a18:	00110003 	.word	0x00110003
    5a1c:	00120003 	.word	0x00120003
    5a20:	00130003 	.word	0x00130003
    5a24:	000c0003 	.word	0x000c0003
    5a28:	000d0003 	.word	0x000d0003
    5a2c:	000e0003 	.word	0x000e0003
    5a30:	000f0003 	.word	0x000f0003
    5a34:	00160003 	.word	0x00160003
    5a38:	00170003 	.word	0x00170003
    5a3c:	00180003 	.word	0x00180003
    5a40:	00190003 	.word	0x00190003

00005a44 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    5a44:	b590      	push	{r4, r7, lr}
    5a46:	b08b      	sub	sp, #44	; 0x2c
    5a48:	af00      	add	r7, sp, #0
    5a4a:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    5a4c:	230c      	movs	r3, #12
    5a4e:	18fb      	adds	r3, r7, r3
    5a50:	4a0f      	ldr	r2, [pc, #60]	; (5a90 <_sercom_get_sercom_inst_index+0x4c>)
    5a52:	447a      	add	r2, pc
    5a54:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a56:	c313      	stmia	r3!, {r0, r1, r4}
    5a58:	ca13      	ldmia	r2!, {r0, r1, r4}
    5a5a:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5a5c:	2300      	movs	r3, #0
    5a5e:	627b      	str	r3, [r7, #36]	; 0x24
    5a60:	e00e      	b.n	5a80 <_sercom_get_sercom_inst_index+0x3c>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    5a62:	230c      	movs	r3, #12
    5a64:	18fb      	adds	r3, r7, r3
    5a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    5a68:	0092      	lsls	r2, r2, #2
    5a6a:	58d3      	ldr	r3, [r2, r3]
    5a6c:	001a      	movs	r2, r3
    5a6e:	687b      	ldr	r3, [r7, #4]
    5a70:	429a      	cmp	r2, r3
    5a72:	d102      	bne.n	5a7a <_sercom_get_sercom_inst_index+0x36>
			return i;
    5a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a76:	b2db      	uxtb	r3, r3
    5a78:	e006      	b.n	5a88 <_sercom_get_sercom_inst_index+0x44>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    5a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a7c:	3301      	adds	r3, #1
    5a7e:	627b      	str	r3, [r7, #36]	; 0x24
    5a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5a82:	2b05      	cmp	r3, #5
    5a84:	d9ed      	bls.n	5a62 <_sercom_get_sercom_inst_index+0x1e>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    5a86:	2300      	movs	r3, #0
}
    5a88:	0018      	movs	r0, r3
    5a8a:	46bd      	mov	sp, r7
    5a8c:	b00b      	add	sp, #44	; 0x2c
    5a8e:	bd90      	pop	{r4, r7, pc}
    5a90:	0000c266 	.word	0x0000c266

00005a94 <system_pinmux_get_config_defaults>:
{
    5a94:	b580      	push	{r7, lr}
    5a96:	b082      	sub	sp, #8
    5a98:	af00      	add	r7, sp, #0
    5a9a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    5a9c:	687b      	ldr	r3, [r7, #4]
    5a9e:	2280      	movs	r2, #128	; 0x80
    5aa0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    5aa2:	687b      	ldr	r3, [r7, #4]
    5aa4:	2200      	movs	r2, #0
    5aa6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    5aa8:	687b      	ldr	r3, [r7, #4]
    5aaa:	2201      	movs	r2, #1
    5aac:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    5aae:	687b      	ldr	r3, [r7, #4]
    5ab0:	2200      	movs	r2, #0
    5ab2:	70da      	strb	r2, [r3, #3]
}
    5ab4:	46c0      	nop			; (mov r8, r8)
    5ab6:	46bd      	mov	sp, r7
    5ab8:	b002      	add	sp, #8
    5aba:	bd80      	pop	{r7, pc}

00005abc <system_pinmux_get_group_from_gpio_pin>:
{
    5abc:	b580      	push	{r7, lr}
    5abe:	b084      	sub	sp, #16
    5ac0:	af00      	add	r7, sp, #0
    5ac2:	0002      	movs	r2, r0
    5ac4:	1dfb      	adds	r3, r7, #7
    5ac6:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    5ac8:	230f      	movs	r3, #15
    5aca:	18fb      	adds	r3, r7, r3
    5acc:	1dfa      	adds	r2, r7, #7
    5ace:	7812      	ldrb	r2, [r2, #0]
    5ad0:	09d2      	lsrs	r2, r2, #7
    5ad2:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    5ad4:	230e      	movs	r3, #14
    5ad6:	18fb      	adds	r3, r7, r3
    5ad8:	1dfa      	adds	r2, r7, #7
    5ada:	7812      	ldrb	r2, [r2, #0]
    5adc:	0952      	lsrs	r2, r2, #5
    5ade:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    5ae0:	4b0d      	ldr	r3, [pc, #52]	; (5b18 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    5ae2:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    5ae4:	230f      	movs	r3, #15
    5ae6:	18fb      	adds	r3, r7, r3
    5ae8:	781b      	ldrb	r3, [r3, #0]
    5aea:	2b00      	cmp	r3, #0
    5aec:	d10f      	bne.n	5b0e <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    5aee:	230f      	movs	r3, #15
    5af0:	18fb      	adds	r3, r7, r3
    5af2:	781b      	ldrb	r3, [r3, #0]
    5af4:	009b      	lsls	r3, r3, #2
    5af6:	2210      	movs	r2, #16
    5af8:	4694      	mov	ip, r2
    5afa:	44bc      	add	ip, r7
    5afc:	4463      	add	r3, ip
    5afe:	3b08      	subs	r3, #8
    5b00:	681a      	ldr	r2, [r3, #0]
    5b02:	230e      	movs	r3, #14
    5b04:	18fb      	adds	r3, r7, r3
    5b06:	781b      	ldrb	r3, [r3, #0]
    5b08:	01db      	lsls	r3, r3, #7
    5b0a:	18d3      	adds	r3, r2, r3
    5b0c:	e000      	b.n	5b10 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    5b0e:	2300      	movs	r3, #0
}
    5b10:	0018      	movs	r0, r3
    5b12:	46bd      	mov	sp, r7
    5b14:	b004      	add	sp, #16
    5b16:	bd80      	pop	{r7, pc}
    5b18:	41004400 	.word	0x41004400

00005b1c <port_get_group_from_gpio_pin>:
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	b082      	sub	sp, #8
    5b20:	af00      	add	r7, sp, #0
    5b22:	0002      	movs	r2, r0
    5b24:	1dfb      	adds	r3, r7, #7
    5b26:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    5b28:	1dfb      	adds	r3, r7, #7
    5b2a:	781b      	ldrb	r3, [r3, #0]
    5b2c:	0018      	movs	r0, r3
    5b2e:	4b04      	ldr	r3, [pc, #16]	; (5b40 <port_get_group_from_gpio_pin+0x24>)
    5b30:	447b      	add	r3, pc
    5b32:	4798      	blx	r3
    5b34:	0003      	movs	r3, r0
}
    5b36:	0018      	movs	r0, r3
    5b38:	46bd      	mov	sp, r7
    5b3a:	b002      	add	sp, #8
    5b3c:	bd80      	pop	{r7, pc}
    5b3e:	46c0      	nop			; (mov r8, r8)
    5b40:	ffffff89 	.word	0xffffff89

00005b44 <port_pin_set_output_level>:
{
    5b44:	b580      	push	{r7, lr}
    5b46:	b084      	sub	sp, #16
    5b48:	af00      	add	r7, sp, #0
    5b4a:	0002      	movs	r2, r0
    5b4c:	1dfb      	adds	r3, r7, #7
    5b4e:	701a      	strb	r2, [r3, #0]
    5b50:	1dbb      	adds	r3, r7, #6
    5b52:	1c0a      	adds	r2, r1, #0
    5b54:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    5b56:	1dfb      	adds	r3, r7, #7
    5b58:	781b      	ldrb	r3, [r3, #0]
    5b5a:	0018      	movs	r0, r3
    5b5c:	4b0d      	ldr	r3, [pc, #52]	; (5b94 <port_pin_set_output_level+0x50>)
    5b5e:	447b      	add	r3, pc
    5b60:	4798      	blx	r3
    5b62:	0003      	movs	r3, r0
    5b64:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5b66:	1dfb      	adds	r3, r7, #7
    5b68:	781b      	ldrb	r3, [r3, #0]
    5b6a:	221f      	movs	r2, #31
    5b6c:	4013      	ands	r3, r2
    5b6e:	2201      	movs	r2, #1
    5b70:	409a      	lsls	r2, r3
    5b72:	0013      	movs	r3, r2
    5b74:	60bb      	str	r3, [r7, #8]
	if (level) {
    5b76:	1dbb      	adds	r3, r7, #6
    5b78:	781b      	ldrb	r3, [r3, #0]
    5b7a:	2b00      	cmp	r3, #0
    5b7c:	d003      	beq.n	5b86 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    5b7e:	68fb      	ldr	r3, [r7, #12]
    5b80:	68ba      	ldr	r2, [r7, #8]
    5b82:	619a      	str	r2, [r3, #24]
}
    5b84:	e002      	b.n	5b8c <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    5b86:	68fb      	ldr	r3, [r7, #12]
    5b88:	68ba      	ldr	r2, [r7, #8]
    5b8a:	615a      	str	r2, [r3, #20]
}
    5b8c:	46c0      	nop			; (mov r8, r8)
    5b8e:	46bd      	mov	sp, r7
    5b90:	b004      	add	sp, #16
    5b92:	bd80      	pop	{r7, pc}
    5b94:	ffffffbb 	.word	0xffffffbb

00005b98 <system_gclk_chan_get_config_defaults>:
{
    5b98:	b580      	push	{r7, lr}
    5b9a:	b082      	sub	sp, #8
    5b9c:	af00      	add	r7, sp, #0
    5b9e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    5ba0:	687b      	ldr	r3, [r7, #4]
    5ba2:	2200      	movs	r2, #0
    5ba4:	701a      	strb	r2, [r3, #0]
}
    5ba6:	46c0      	nop			; (mov r8, r8)
    5ba8:	46bd      	mov	sp, r7
    5baa:	b002      	add	sp, #8
    5bac:	bd80      	pop	{r7, pc}
	...

00005bb0 <system_apb_clock_set_mask>:
{
    5bb0:	b580      	push	{r7, lr}
    5bb2:	b082      	sub	sp, #8
    5bb4:	af00      	add	r7, sp, #0
    5bb6:	0002      	movs	r2, r0
    5bb8:	6039      	str	r1, [r7, #0]
    5bba:	1dfb      	adds	r3, r7, #7
    5bbc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    5bbe:	1dfb      	adds	r3, r7, #7
    5bc0:	781b      	ldrb	r3, [r3, #0]
    5bc2:	2b01      	cmp	r3, #1
    5bc4:	d00a      	beq.n	5bdc <system_apb_clock_set_mask+0x2c>
    5bc6:	2b02      	cmp	r3, #2
    5bc8:	d00f      	beq.n	5bea <system_apb_clock_set_mask+0x3a>
    5bca:	2b00      	cmp	r3, #0
    5bcc:	d114      	bne.n	5bf8 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    5bce:	4b0e      	ldr	r3, [pc, #56]	; (5c08 <system_apb_clock_set_mask+0x58>)
    5bd0:	4a0d      	ldr	r2, [pc, #52]	; (5c08 <system_apb_clock_set_mask+0x58>)
    5bd2:	6991      	ldr	r1, [r2, #24]
    5bd4:	683a      	ldr	r2, [r7, #0]
    5bd6:	430a      	orrs	r2, r1
    5bd8:	619a      	str	r2, [r3, #24]
			break;
    5bda:	e00f      	b.n	5bfc <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    5bdc:	4b0a      	ldr	r3, [pc, #40]	; (5c08 <system_apb_clock_set_mask+0x58>)
    5bde:	4a0a      	ldr	r2, [pc, #40]	; (5c08 <system_apb_clock_set_mask+0x58>)
    5be0:	69d1      	ldr	r1, [r2, #28]
    5be2:	683a      	ldr	r2, [r7, #0]
    5be4:	430a      	orrs	r2, r1
    5be6:	61da      	str	r2, [r3, #28]
			break;
    5be8:	e008      	b.n	5bfc <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    5bea:	4b07      	ldr	r3, [pc, #28]	; (5c08 <system_apb_clock_set_mask+0x58>)
    5bec:	4a06      	ldr	r2, [pc, #24]	; (5c08 <system_apb_clock_set_mask+0x58>)
    5bee:	6a11      	ldr	r1, [r2, #32]
    5bf0:	683a      	ldr	r2, [r7, #0]
    5bf2:	430a      	orrs	r2, r1
    5bf4:	621a      	str	r2, [r3, #32]
			break;
    5bf6:	e001      	b.n	5bfc <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    5bf8:	2317      	movs	r3, #23
    5bfa:	e000      	b.n	5bfe <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    5bfc:	2300      	movs	r3, #0
}
    5bfe:	0018      	movs	r0, r3
    5c00:	46bd      	mov	sp, r7
    5c02:	b002      	add	sp, #8
    5c04:	bd80      	pop	{r7, pc}
    5c06:	46c0      	nop			; (mov r8, r8)
    5c08:	40000400 	.word	0x40000400

00005c0c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    5c0c:	b580      	push	{r7, lr}
    5c0e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    5c10:	4b05      	ldr	r3, [pc, #20]	; (5c28 <system_is_debugger_present+0x1c>)
    5c12:	789b      	ldrb	r3, [r3, #2]
    5c14:	b2db      	uxtb	r3, r3
    5c16:	001a      	movs	r2, r3
    5c18:	2302      	movs	r3, #2
    5c1a:	4013      	ands	r3, r2
    5c1c:	1e5a      	subs	r2, r3, #1
    5c1e:	4193      	sbcs	r3, r2
    5c20:	b2db      	uxtb	r3, r3
}
    5c22:	0018      	movs	r0, r3
    5c24:	46bd      	mov	sp, r7
    5c26:	bd80      	pop	{r7, pc}
    5c28:	41002000 	.word	0x41002000

00005c2c <system_interrupt_enable>:
{
    5c2c:	b580      	push	{r7, lr}
    5c2e:	b082      	sub	sp, #8
    5c30:	af00      	add	r7, sp, #0
    5c32:	0002      	movs	r2, r0
    5c34:	1dfb      	adds	r3, r7, #7
    5c36:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5c38:	4b06      	ldr	r3, [pc, #24]	; (5c54 <system_interrupt_enable+0x28>)
    5c3a:	1dfa      	adds	r2, r7, #7
    5c3c:	7812      	ldrb	r2, [r2, #0]
    5c3e:	0011      	movs	r1, r2
    5c40:	221f      	movs	r2, #31
    5c42:	400a      	ands	r2, r1
    5c44:	2101      	movs	r1, #1
    5c46:	4091      	lsls	r1, r2
    5c48:	000a      	movs	r2, r1
    5c4a:	601a      	str	r2, [r3, #0]
}
    5c4c:	46c0      	nop			; (mov r8, r8)
    5c4e:	46bd      	mov	sp, r7
    5c50:	b002      	add	sp, #8
    5c52:	bd80      	pop	{r7, pc}
    5c54:	e000e100 	.word	0xe000e100

00005c58 <system_interrupt_disable>:
{
    5c58:	b580      	push	{r7, lr}
    5c5a:	b082      	sub	sp, #8
    5c5c:	af00      	add	r7, sp, #0
    5c5e:	0002      	movs	r2, r0
    5c60:	1dfb      	adds	r3, r7, #7
    5c62:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    5c64:	4a07      	ldr	r2, [pc, #28]	; (5c84 <system_interrupt_disable+0x2c>)
    5c66:	1dfb      	adds	r3, r7, #7
    5c68:	781b      	ldrb	r3, [r3, #0]
    5c6a:	0019      	movs	r1, r3
    5c6c:	231f      	movs	r3, #31
    5c6e:	400b      	ands	r3, r1
    5c70:	2101      	movs	r1, #1
    5c72:	4099      	lsls	r1, r3
    5c74:	000b      	movs	r3, r1
    5c76:	0019      	movs	r1, r3
    5c78:	2380      	movs	r3, #128	; 0x80
    5c7a:	50d1      	str	r1, [r2, r3]
}
    5c7c:	46c0      	nop			; (mov r8, r8)
    5c7e:	46bd      	mov	sp, r7
    5c80:	b002      	add	sp, #8
    5c82:	bd80      	pop	{r7, pc}
    5c84:	e000e100 	.word	0xe000e100

00005c88 <spi_is_syncing>:
{
    5c88:	b580      	push	{r7, lr}
    5c8a:	b084      	sub	sp, #16
    5c8c:	af00      	add	r7, sp, #0
    5c8e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    5c90:	687b      	ldr	r3, [r7, #4]
    5c92:	681b      	ldr	r3, [r3, #0]
    5c94:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    5c96:	68fb      	ldr	r3, [r7, #12]
    5c98:	69db      	ldr	r3, [r3, #28]
    5c9a:	1e5a      	subs	r2, r3, #1
    5c9c:	4193      	sbcs	r3, r2
    5c9e:	b2db      	uxtb	r3, r3
}
    5ca0:	0018      	movs	r0, r3
    5ca2:	46bd      	mov	sp, r7
    5ca4:	b004      	add	sp, #16
    5ca6:	bd80      	pop	{r7, pc}

00005ca8 <spi_enable>:
{
    5ca8:	b580      	push	{r7, lr}
    5caa:	b084      	sub	sp, #16
    5cac:	af00      	add	r7, sp, #0
    5cae:	6078      	str	r0, [r7, #4]
    5cb0:	4a10      	ldr	r2, [pc, #64]	; (5cf4 <spi_enable+0x4c>)
    5cb2:	447a      	add	r2, pc
	SercomSpi *const spi_module = &(module->hw->SPI);
    5cb4:	687b      	ldr	r3, [r7, #4]
    5cb6:	681b      	ldr	r3, [r3, #0]
    5cb8:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    5cba:	687b      	ldr	r3, [r7, #4]
    5cbc:	681b      	ldr	r3, [r3, #0]
    5cbe:	0018      	movs	r0, r3
    5cc0:	4b0d      	ldr	r3, [pc, #52]	; (5cf8 <spi_enable+0x50>)
    5cc2:	58d3      	ldr	r3, [r2, r3]
    5cc4:	4798      	blx	r3
    5cc6:	0003      	movs	r3, r0
    5cc8:	0018      	movs	r0, r3
    5cca:	4b0c      	ldr	r3, [pc, #48]	; (5cfc <spi_enable+0x54>)
    5ccc:	447b      	add	r3, pc
    5cce:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    5cd0:	46c0      	nop			; (mov r8, r8)
    5cd2:	687b      	ldr	r3, [r7, #4]
    5cd4:	0018      	movs	r0, r3
    5cd6:	4b0a      	ldr	r3, [pc, #40]	; (5d00 <spi_enable+0x58>)
    5cd8:	447b      	add	r3, pc
    5cda:	4798      	blx	r3
    5cdc:	1e03      	subs	r3, r0, #0
    5cde:	d1f8      	bne.n	5cd2 <spi_enable+0x2a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5ce0:	68fb      	ldr	r3, [r7, #12]
    5ce2:	681b      	ldr	r3, [r3, #0]
    5ce4:	2202      	movs	r2, #2
    5ce6:	431a      	orrs	r2, r3
    5ce8:	68fb      	ldr	r3, [r7, #12]
    5cea:	601a      	str	r2, [r3, #0]
}
    5cec:	46c0      	nop			; (mov r8, r8)
    5cee:	46bd      	mov	sp, r7
    5cf0:	b004      	add	sp, #16
    5cf2:	bd80      	pop	{r7, pc}
    5cf4:	0000c11e 	.word	0x0000c11e
    5cf8:	000000a8 	.word	0x000000a8
    5cfc:	ffffff5d 	.word	0xffffff5d
    5d00:	ffffffad 	.word	0xffffffad

00005d04 <spi_disable>:
{
    5d04:	b580      	push	{r7, lr}
    5d06:	b084      	sub	sp, #16
    5d08:	af00      	add	r7, sp, #0
    5d0a:	6078      	str	r0, [r7, #4]
    5d0c:	4a14      	ldr	r2, [pc, #80]	; (5d60 <spi_disable+0x5c>)
    5d0e:	447a      	add	r2, pc
	SercomSpi *const spi_module = &(module->hw->SPI);
    5d10:	687b      	ldr	r3, [r7, #4]
    5d12:	681b      	ldr	r3, [r3, #0]
    5d14:	60fb      	str	r3, [r7, #12]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    5d16:	687b      	ldr	r3, [r7, #4]
    5d18:	681b      	ldr	r3, [r3, #0]
    5d1a:	0018      	movs	r0, r3
    5d1c:	4b11      	ldr	r3, [pc, #68]	; (5d64 <spi_disable+0x60>)
    5d1e:	58d3      	ldr	r3, [r2, r3]
    5d20:	4798      	blx	r3
    5d22:	0003      	movs	r3, r0
    5d24:	0018      	movs	r0, r3
    5d26:	4b10      	ldr	r3, [pc, #64]	; (5d68 <spi_disable+0x64>)
    5d28:	447b      	add	r3, pc
    5d2a:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    5d2c:	46c0      	nop			; (mov r8, r8)
    5d2e:	687b      	ldr	r3, [r7, #4]
    5d30:	0018      	movs	r0, r3
    5d32:	4b0e      	ldr	r3, [pc, #56]	; (5d6c <spi_disable+0x68>)
    5d34:	447b      	add	r3, pc
    5d36:	4798      	blx	r3
    5d38:	1e03      	subs	r3, r0, #0
    5d3a:	d1f8      	bne.n	5d2e <spi_disable+0x2a>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    5d3c:	68fb      	ldr	r3, [r7, #12]
    5d3e:	228f      	movs	r2, #143	; 0x8f
    5d40:	751a      	strb	r2, [r3, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    5d42:	68fb      	ldr	r3, [r7, #12]
    5d44:	228f      	movs	r2, #143	; 0x8f
    5d46:	761a      	strb	r2, [r3, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    5d48:	68fb      	ldr	r3, [r7, #12]
    5d4a:	681b      	ldr	r3, [r3, #0]
    5d4c:	2202      	movs	r2, #2
    5d4e:	4393      	bics	r3, r2
    5d50:	001a      	movs	r2, r3
    5d52:	68fb      	ldr	r3, [r7, #12]
    5d54:	601a      	str	r2, [r3, #0]
}
    5d56:	46c0      	nop			; (mov r8, r8)
    5d58:	46bd      	mov	sp, r7
    5d5a:	b004      	add	sp, #16
    5d5c:	bd80      	pop	{r7, pc}
    5d5e:	46c0      	nop			; (mov r8, r8)
    5d60:	0000c0c2 	.word	0x0000c0c2
    5d64:	000000a8 	.word	0x000000a8
    5d68:	ffffff2d 	.word	0xffffff2d
    5d6c:	ffffff51 	.word	0xffffff51

00005d70 <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    5d70:	b580      	push	{r7, lr}
    5d72:	b084      	sub	sp, #16
    5d74:	af00      	add	r7, sp, #0
    5d76:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5d78:	687b      	ldr	r3, [r7, #4]
    5d7a:	681b      	ldr	r3, [r3, #0]
    5d7c:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    5d7e:	68fb      	ldr	r3, [r7, #12]
    5d80:	7e1b      	ldrb	r3, [r3, #24]
    5d82:	b2db      	uxtb	r3, r3
    5d84:	001a      	movs	r2, r3
    5d86:	2302      	movs	r3, #2
    5d88:	4013      	ands	r3, r2
    5d8a:	1e5a      	subs	r2, r3, #1
    5d8c:	4193      	sbcs	r3, r2
    5d8e:	b2db      	uxtb	r3, r3
}
    5d90:	0018      	movs	r0, r3
    5d92:	46bd      	mov	sp, r7
    5d94:	b004      	add	sp, #16
    5d96:	bd80      	pop	{r7, pc}

00005d98 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    5d98:	b580      	push	{r7, lr}
    5d9a:	b084      	sub	sp, #16
    5d9c:	af00      	add	r7, sp, #0
    5d9e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5da0:	687b      	ldr	r3, [r7, #4]
    5da2:	681b      	ldr	r3, [r3, #0]
    5da4:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    5da6:	68fb      	ldr	r3, [r7, #12]
    5da8:	7e1b      	ldrb	r3, [r3, #24]
    5daa:	b2db      	uxtb	r3, r3
    5dac:	001a      	movs	r2, r3
    5dae:	2301      	movs	r3, #1
    5db0:	4013      	ands	r3, r2
    5db2:	1e5a      	subs	r2, r3, #1
    5db4:	4193      	sbcs	r3, r2
    5db6:	b2db      	uxtb	r3, r3
}
    5db8:	0018      	movs	r0, r3
    5dba:	46bd      	mov	sp, r7
    5dbc:	b004      	add	sp, #16
    5dbe:	bd80      	pop	{r7, pc}

00005dc0 <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    5dc0:	b580      	push	{r7, lr}
    5dc2:	b084      	sub	sp, #16
    5dc4:	af00      	add	r7, sp, #0
    5dc6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5dc8:	687b      	ldr	r3, [r7, #4]
    5dca:	681b      	ldr	r3, [r3, #0]
    5dcc:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5dce:	68fb      	ldr	r3, [r7, #12]
    5dd0:	7e1b      	ldrb	r3, [r3, #24]
    5dd2:	b2db      	uxtb	r3, r3
    5dd4:	001a      	movs	r2, r3
    5dd6:	2304      	movs	r3, #4
    5dd8:	4013      	ands	r3, r2
    5dda:	1e5a      	subs	r2, r3, #1
    5ddc:	4193      	sbcs	r3, r2
    5dde:	b2db      	uxtb	r3, r3
}
    5de0:	0018      	movs	r0, r3
    5de2:	46bd      	mov	sp, r7
    5de4:	b004      	add	sp, #16
    5de6:	bd80      	pop	{r7, pc}

00005de8 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    5de8:	b580      	push	{r7, lr}
    5dea:	b084      	sub	sp, #16
    5dec:	af00      	add	r7, sp, #0
    5dee:	6078      	str	r0, [r7, #4]
    5df0:	000a      	movs	r2, r1
    5df2:	1cbb      	adds	r3, r7, #2
    5df4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5df6:	687b      	ldr	r3, [r7, #4]
    5df8:	681b      	ldr	r3, [r3, #0]
    5dfa:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    5dfc:	687b      	ldr	r3, [r7, #4]
    5dfe:	0018      	movs	r0, r3
    5e00:	4b0b      	ldr	r3, [pc, #44]	; (5e30 <spi_write+0x48>)
    5e02:	447b      	add	r3, pc
    5e04:	4798      	blx	r3
    5e06:	0003      	movs	r3, r0
    5e08:	001a      	movs	r2, r3
    5e0a:	2301      	movs	r3, #1
    5e0c:	4053      	eors	r3, r2
    5e0e:	b2db      	uxtb	r3, r3
    5e10:	2b00      	cmp	r3, #0
    5e12:	d001      	beq.n	5e18 <spi_write+0x30>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    5e14:	2305      	movs	r3, #5
    5e16:	e006      	b.n	5e26 <spi_write+0x3e>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5e18:	1cbb      	adds	r3, r7, #2
    5e1a:	881b      	ldrh	r3, [r3, #0]
    5e1c:	05db      	lsls	r3, r3, #23
    5e1e:	0dda      	lsrs	r2, r3, #23
    5e20:	68fb      	ldr	r3, [r7, #12]
    5e22:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    5e24:	2300      	movs	r3, #0
}
    5e26:	0018      	movs	r0, r3
    5e28:	46bd      	mov	sp, r7
    5e2a:	b004      	add	sp, #16
    5e2c:	bd80      	pop	{r7, pc}
    5e2e:	46c0      	nop			; (mov r8, r8)
    5e30:	ffffff93 	.word	0xffffff93

00005e34 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    5e34:	b580      	push	{r7, lr}
    5e36:	b084      	sub	sp, #16
    5e38:	af00      	add	r7, sp, #0
    5e3a:	6078      	str	r0, [r7, #4]
    5e3c:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5e3e:	687b      	ldr	r3, [r7, #4]
    5e40:	681b      	ldr	r3, [r3, #0]
    5e42:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    5e44:	687b      	ldr	r3, [r7, #4]
    5e46:	0018      	movs	r0, r3
    5e48:	4b1b      	ldr	r3, [pc, #108]	; (5eb8 <spi_read+0x84>)
    5e4a:	447b      	add	r3, pc
    5e4c:	4798      	blx	r3
    5e4e:	0003      	movs	r3, r0
    5e50:	001a      	movs	r2, r3
    5e52:	2301      	movs	r3, #1
    5e54:	4053      	eors	r3, r2
    5e56:	b2db      	uxtb	r3, r3
    5e58:	2b00      	cmp	r3, #0
    5e5a:	d001      	beq.n	5e60 <spi_read+0x2c>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    5e5c:	2310      	movs	r3, #16
    5e5e:	e027      	b.n	5eb0 <spi_read+0x7c>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    5e60:	230f      	movs	r3, #15
    5e62:	18fb      	adds	r3, r7, r3
    5e64:	2200      	movs	r2, #0
    5e66:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5e68:	68bb      	ldr	r3, [r7, #8]
    5e6a:	8b5b      	ldrh	r3, [r3, #26]
    5e6c:	b29b      	uxth	r3, r3
    5e6e:	001a      	movs	r2, r3
    5e70:	2304      	movs	r3, #4
    5e72:	4013      	ands	r3, r2
    5e74:	d006      	beq.n	5e84 <spi_read+0x50>
		retval = STATUS_ERR_OVERFLOW;
    5e76:	230f      	movs	r3, #15
    5e78:	18fb      	adds	r3, r7, r3
    5e7a:	221e      	movs	r2, #30
    5e7c:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5e7e:	68bb      	ldr	r3, [r7, #8]
    5e80:	2204      	movs	r2, #4
    5e82:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    5e84:	687b      	ldr	r3, [r7, #4]
    5e86:	799b      	ldrb	r3, [r3, #6]
    5e88:	2b01      	cmp	r3, #1
    5e8a:	d108      	bne.n	5e9e <spi_read+0x6a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    5e8c:	68bb      	ldr	r3, [r7, #8]
    5e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e90:	b29b      	uxth	r3, r3
    5e92:	05db      	lsls	r3, r3, #23
    5e94:	0ddb      	lsrs	r3, r3, #23
    5e96:	b29a      	uxth	r2, r3
    5e98:	683b      	ldr	r3, [r7, #0]
    5e9a:	801a      	strh	r2, [r3, #0]
    5e9c:	e005      	b.n	5eaa <spi_read+0x76>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    5e9e:	68bb      	ldr	r3, [r7, #8]
    5ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ea2:	b2db      	uxtb	r3, r3
    5ea4:	b29a      	uxth	r2, r3
    5ea6:	683b      	ldr	r3, [r7, #0]
    5ea8:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    5eaa:	230f      	movs	r3, #15
    5eac:	18fb      	adds	r3, r7, r3
    5eae:	781b      	ldrb	r3, [r3, #0]
}
    5eb0:	0018      	movs	r0, r3
    5eb2:	46bd      	mov	sp, r7
    5eb4:	b004      	add	sp, #16
    5eb6:	bd80      	pop	{r7, pc}
    5eb8:	ffffff73 	.word	0xffffff73

00005ebc <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    5ebc:	b580      	push	{r7, lr}
    5ebe:	b084      	sub	sp, #16
    5ec0:	af00      	add	r7, sp, #0
    5ec2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5ec4:	687b      	ldr	r3, [r7, #4]
    5ec6:	681b      	ldr	r3, [r3, #0]
    5ec8:	60fb      	str	r3, [r7, #12]

	/* Disable the module */
	spi_disable(module);
    5eca:	687b      	ldr	r3, [r7, #4]
    5ecc:	0018      	movs	r0, r3
    5ece:	4b0a      	ldr	r3, [pc, #40]	; (5ef8 <spi_reset+0x3c>)
    5ed0:	447b      	add	r3, pc
    5ed2:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    5ed4:	46c0      	nop			; (mov r8, r8)
    5ed6:	687b      	ldr	r3, [r7, #4]
    5ed8:	0018      	movs	r0, r3
    5eda:	4b08      	ldr	r3, [pc, #32]	; (5efc <spi_reset+0x40>)
    5edc:	447b      	add	r3, pc
    5ede:	4798      	blx	r3
    5ee0:	1e03      	subs	r3, r0, #0
    5ee2:	d1f8      	bne.n	5ed6 <spi_reset+0x1a>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    5ee4:	68fb      	ldr	r3, [r7, #12]
    5ee6:	681b      	ldr	r3, [r3, #0]
    5ee8:	2201      	movs	r2, #1
    5eea:	431a      	orrs	r2, r3
    5eec:	68fb      	ldr	r3, [r7, #12]
    5eee:	601a      	str	r2, [r3, #0]
}
    5ef0:	46c0      	nop			; (mov r8, r8)
    5ef2:	46bd      	mov	sp, r7
    5ef4:	b004      	add	sp, #16
    5ef6:	bd80      	pop	{r7, pc}
    5ef8:	fffffe31 	.word	0xfffffe31
    5efc:	fffffda9 	.word	0xfffffda9

00005f00 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    5f00:	b5b0      	push	{r4, r5, r7, lr}
    5f02:	b088      	sub	sp, #32
    5f04:	af00      	add	r7, sp, #0
    5f06:	6078      	str	r0, [r7, #4]
    5f08:	6039      	str	r1, [r7, #0]
    5f0a:	4c2e      	ldr	r4, [pc, #184]	; (5fc4 <spi_set_baudrate+0xc4>)
    5f0c:	447c      	add	r4, pc
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    5f0e:	230c      	movs	r3, #12
    5f10:	18fb      	adds	r3, r7, r3
    5f12:	2200      	movs	r2, #0
    5f14:	801a      	strh	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	681b      	ldr	r3, [r3, #0]
    5f1a:	61fb      	str	r3, [r7, #28]

	/* Disable the module */
	spi_disable(module);
    5f1c:	687b      	ldr	r3, [r7, #4]
    5f1e:	0018      	movs	r0, r3
    5f20:	4b29      	ldr	r3, [pc, #164]	; (5fc8 <spi_set_baudrate+0xc8>)
    5f22:	447b      	add	r3, pc
    5f24:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    5f26:	46c0      	nop			; (mov r8, r8)
    5f28:	687b      	ldr	r3, [r7, #4]
    5f2a:	0018      	movs	r0, r3
    5f2c:	4b27      	ldr	r3, [pc, #156]	; (5fcc <spi_set_baudrate+0xcc>)
    5f2e:	447b      	add	r3, pc
    5f30:	4798      	blx	r3
    5f32:	1e03      	subs	r3, r0, #0
    5f34:	d1f8      	bne.n	5f28 <spi_set_baudrate+0x28>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    5f36:	687b      	ldr	r3, [r7, #4]
    5f38:	681b      	ldr	r3, [r3, #0]
    5f3a:	0018      	movs	r0, r3
    5f3c:	4b24      	ldr	r3, [pc, #144]	; (5fd0 <spi_set_baudrate+0xd0>)
    5f3e:	58e3      	ldr	r3, [r4, r3]
    5f40:	4798      	blx	r3
    5f42:	0003      	movs	r3, r0
    5f44:	61bb      	str	r3, [r7, #24]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    5f46:	69bb      	ldr	r3, [r7, #24]
    5f48:	3314      	adds	r3, #20
    5f4a:	617b      	str	r3, [r7, #20]
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    5f4c:	697b      	ldr	r3, [r7, #20]
    5f4e:	b2db      	uxtb	r3, r3
    5f50:	0018      	movs	r0, r3
    5f52:	4b20      	ldr	r3, [pc, #128]	; (5fd4 <spi_set_baudrate+0xd4>)
    5f54:	58e3      	ldr	r3, [r4, r3]
    5f56:	4798      	blx	r3
    5f58:	0003      	movs	r3, r0
    5f5a:	613b      	str	r3, [r7, #16]

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    5f5c:	230f      	movs	r3, #15
    5f5e:	18fd      	adds	r5, r7, r3
    5f60:	230c      	movs	r3, #12
    5f62:	18fa      	adds	r2, r7, r3
    5f64:	6939      	ldr	r1, [r7, #16]
    5f66:	683b      	ldr	r3, [r7, #0]
    5f68:	0018      	movs	r0, r3
    5f6a:	4b1b      	ldr	r3, [pc, #108]	; (5fd8 <spi_set_baudrate+0xd8>)
    5f6c:	58e3      	ldr	r3, [r4, r3]
    5f6e:	4798      	blx	r3
    5f70:	0003      	movs	r3, r0
    5f72:	702b      	strb	r3, [r5, #0]
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    5f74:	230f      	movs	r3, #15
    5f76:	18fb      	adds	r3, r7, r3
    5f78:	781b      	ldrb	r3, [r3, #0]
    5f7a:	2b00      	cmp	r3, #0
    5f7c:	d001      	beq.n	5f82 <spi_set_baudrate+0x82>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
    5f7e:	2317      	movs	r3, #23
    5f80:	e01b      	b.n	5fba <spi_set_baudrate+0xba>
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    5f82:	230c      	movs	r3, #12
    5f84:	18fb      	adds	r3, r7, r3
    5f86:	881b      	ldrh	r3, [r3, #0]
    5f88:	b2da      	uxtb	r2, r3
    5f8a:	69fb      	ldr	r3, [r7, #28]
    5f8c:	731a      	strb	r2, [r3, #12]

	while (spi_is_syncing(module)) {
    5f8e:	46c0      	nop			; (mov r8, r8)
    5f90:	687b      	ldr	r3, [r7, #4]
    5f92:	0018      	movs	r0, r3
    5f94:	4b11      	ldr	r3, [pc, #68]	; (5fdc <spi_set_baudrate+0xdc>)
    5f96:	447b      	add	r3, pc
    5f98:	4798      	blx	r3
    5f9a:	1e03      	subs	r3, r0, #0
    5f9c:	d1f8      	bne.n	5f90 <spi_set_baudrate+0x90>
		/* Wait until the synchronization is complete */
	}

	/* Enable the module */
	spi_enable(module);
    5f9e:	687b      	ldr	r3, [r7, #4]
    5fa0:	0018      	movs	r0, r3
    5fa2:	4b0f      	ldr	r3, [pc, #60]	; (5fe0 <spi_set_baudrate+0xe0>)
    5fa4:	447b      	add	r3, pc
    5fa6:	4798      	blx	r3

	while (spi_is_syncing(module)) {
    5fa8:	46c0      	nop			; (mov r8, r8)
    5faa:	687b      	ldr	r3, [r7, #4]
    5fac:	0018      	movs	r0, r3
    5fae:	4b0d      	ldr	r3, [pc, #52]	; (5fe4 <spi_set_baudrate+0xe4>)
    5fb0:	447b      	add	r3, pc
    5fb2:	4798      	blx	r3
    5fb4:	1e03      	subs	r3, r0, #0
    5fb6:	d1f8      	bne.n	5faa <spi_set_baudrate+0xaa>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
    5fb8:	2300      	movs	r3, #0
}
    5fba:	0018      	movs	r0, r3
    5fbc:	46bd      	mov	sp, r7
    5fbe:	b008      	add	sp, #32
    5fc0:	bdb0      	pop	{r4, r5, r7, pc}
    5fc2:	46c0      	nop			; (mov r8, r8)
    5fc4:	0000bec4 	.word	0x0000bec4
    5fc8:	fffffddf 	.word	0xfffffddf
    5fcc:	fffffd57 	.word	0xfffffd57
    5fd0:	000002ac 	.word	0x000002ac
    5fd4:	0000019c 	.word	0x0000019c
    5fd8:	00000108 	.word	0x00000108
    5fdc:	fffffcef 	.word	0xfffffcef
    5fe0:	fffffd01 	.word	0xfffffd01
    5fe4:	fffffcd5 	.word	0xfffffcd5

00005fe8 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    5fe8:	b5b0      	push	{r4, r5, r7, lr}
    5fea:	b092      	sub	sp, #72	; 0x48
    5fec:	af00      	add	r7, sp, #0
    5fee:	6078      	str	r0, [r7, #4]
    5ff0:	6039      	str	r1, [r7, #0]
    5ff2:	4c7f      	ldr	r4, [pc, #508]	; (61f0 <_spi_set_config+0x208>)
    5ff4:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    5ff6:	687b      	ldr	r3, [r7, #4]
    5ff8:	681b      	ldr	r3, [r3, #0]
    5ffa:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    5ffc:	687b      	ldr	r3, [r7, #4]
    5ffe:	681b      	ldr	r3, [r3, #0]
    6000:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    6002:	231c      	movs	r3, #28
    6004:	18fb      	adds	r3, r7, r3
    6006:	0018      	movs	r0, r3
    6008:	4b7a      	ldr	r3, [pc, #488]	; (61f4 <_spi_set_config+0x20c>)
    600a:	447b      	add	r3, pc
    600c:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    600e:	231c      	movs	r3, #28
    6010:	18fb      	adds	r3, r7, r3
    6012:	2200      	movs	r2, #0
    6014:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    6016:	683b      	ldr	r3, [r7, #0]
    6018:	781b      	ldrb	r3, [r3, #0]
    601a:	2b00      	cmp	r3, #0
    601c:	d103      	bne.n	6026 <_spi_set_config+0x3e>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    601e:	231c      	movs	r3, #28
    6020:	18fb      	adds	r3, r7, r3
    6022:	2200      	movs	r2, #0
    6024:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    6026:	683b      	ldr	r3, [r7, #0]
    6028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    602a:	230c      	movs	r3, #12
    602c:	18fb      	adds	r3, r7, r3
    602e:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    6030:	683b      	ldr	r3, [r7, #0]
    6032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    6034:	230c      	movs	r3, #12
    6036:	18fb      	adds	r3, r7, r3
    6038:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    603a:	683b      	ldr	r3, [r7, #0]
    603c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    603e:	230c      	movs	r3, #12
    6040:	18fb      	adds	r3, r7, r3
    6042:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    6044:	683b      	ldr	r3, [r7, #0]
    6046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    6048:	230c      	movs	r3, #12
    604a:	18fb      	adds	r3, r7, r3
    604c:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    604e:	2347      	movs	r3, #71	; 0x47
    6050:	18fb      	adds	r3, r7, r3
    6052:	2200      	movs	r2, #0
    6054:	701a      	strb	r2, [r3, #0]
    6056:	e02e      	b.n	60b6 <_spi_set_config+0xce>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    6058:	2347      	movs	r3, #71	; 0x47
    605a:	18fb      	adds	r3, r7, r3
    605c:	781a      	ldrb	r2, [r3, #0]
    605e:	230c      	movs	r3, #12
    6060:	18fb      	adds	r3, r7, r3
    6062:	0092      	lsls	r2, r2, #2
    6064:	58d3      	ldr	r3, [r2, r3]
    6066:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    6068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    606a:	2b00      	cmp	r3, #0
    606c:	d10a      	bne.n	6084 <_spi_set_config+0x9c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    606e:	2347      	movs	r3, #71	; 0x47
    6070:	18fb      	adds	r3, r7, r3
    6072:	781a      	ldrb	r2, [r3, #0]
    6074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    6076:	0011      	movs	r1, r2
    6078:	0018      	movs	r0, r3
    607a:	4b5f      	ldr	r3, [pc, #380]	; (61f8 <_spi_set_config+0x210>)
    607c:	58e3      	ldr	r3, [r4, r3]
    607e:	4798      	blx	r3
    6080:	0003      	movs	r3, r0
    6082:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    6084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6086:	3301      	adds	r3, #1
    6088:	d00e      	beq.n	60a8 <_spi_set_config+0xc0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    608a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    608c:	b2da      	uxtb	r2, r3
    608e:	231c      	movs	r3, #28
    6090:	18fb      	adds	r3, r7, r3
    6092:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    6094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6096:	0c1b      	lsrs	r3, r3, #16
    6098:	b2db      	uxtb	r3, r3
    609a:	221c      	movs	r2, #28
    609c:	18ba      	adds	r2, r7, r2
    609e:	0011      	movs	r1, r2
    60a0:	0018      	movs	r0, r3
    60a2:	4b56      	ldr	r3, [pc, #344]	; (61fc <_spi_set_config+0x214>)
    60a4:	58e3      	ldr	r3, [r4, r3]
    60a6:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    60a8:	2347      	movs	r3, #71	; 0x47
    60aa:	18fb      	adds	r3, r7, r3
    60ac:	781a      	ldrb	r2, [r3, #0]
    60ae:	2347      	movs	r3, #71	; 0x47
    60b0:	18fb      	adds	r3, r7, r3
    60b2:	3201      	adds	r2, #1
    60b4:	701a      	strb	r2, [r3, #0]
    60b6:	2347      	movs	r3, #71	; 0x47
    60b8:	18fb      	adds	r3, r7, r3
    60ba:	781b      	ldrb	r3, [r3, #0]
    60bc:	2b03      	cmp	r3, #3
    60be:	d9cb      	bls.n	6058 <_spi_set_config+0x70>
		}
	}

	module->mode             = config->mode;
    60c0:	683b      	ldr	r3, [r7, #0]
    60c2:	781a      	ldrb	r2, [r3, #0]
    60c4:	687b      	ldr	r3, [r7, #4]
    60c6:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    60c8:	683b      	ldr	r3, [r7, #0]
    60ca:	7c1a      	ldrb	r2, [r3, #16]
    60cc:	687b      	ldr	r3, [r7, #4]
    60ce:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    60d0:	683b      	ldr	r3, [r7, #0]
    60d2:	7c9a      	ldrb	r2, [r3, #18]
    60d4:	687b      	ldr	r3, [r7, #4]
    60d6:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    60d8:	683b      	ldr	r3, [r7, #0]
    60da:	7d1a      	ldrb	r2, [r3, #20]
    60dc:	687b      	ldr	r3, [r7, #4]
    60de:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    60e0:	230a      	movs	r3, #10
    60e2:	18fb      	adds	r3, r7, r3
    60e4:	2200      	movs	r2, #0
    60e6:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    60e8:	2300      	movs	r3, #0
    60ea:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    60ec:	2300      	movs	r3, #0
    60ee:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    60f0:	683b      	ldr	r3, [r7, #0]
    60f2:	781b      	ldrb	r3, [r3, #0]
    60f4:	2b01      	cmp	r3, #1
    60f6:	d12c      	bne.n	6152 <_spi_set_config+0x16a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    60f8:	687b      	ldr	r3, [r7, #4]
    60fa:	681b      	ldr	r3, [r3, #0]
    60fc:	0018      	movs	r0, r3
    60fe:	4b40      	ldr	r3, [pc, #256]	; (6200 <_spi_set_config+0x218>)
    6100:	58e3      	ldr	r3, [r4, r3]
    6102:	4798      	blx	r3
    6104:	0003      	movs	r3, r0
    6106:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    6108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    610a:	3314      	adds	r3, #20
    610c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6110:	b2db      	uxtb	r3, r3
    6112:	0018      	movs	r0, r3
    6114:	4b3b      	ldr	r3, [pc, #236]	; (6204 <_spi_set_config+0x21c>)
    6116:	58e3      	ldr	r3, [r4, r3]
    6118:	4798      	blx	r3
    611a:	0003      	movs	r3, r0
    611c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    611e:	683b      	ldr	r3, [r7, #0]
    6120:	699b      	ldr	r3, [r3, #24]
    6122:	2223      	movs	r2, #35	; 0x23
    6124:	18bd      	adds	r5, r7, r2
    6126:	220a      	movs	r2, #10
    6128:	18ba      	adds	r2, r7, r2
    612a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    612c:	0018      	movs	r0, r3
    612e:	4b36      	ldr	r3, [pc, #216]	; (6208 <_spi_set_config+0x220>)
    6130:	58e3      	ldr	r3, [r4, r3]
    6132:	4798      	blx	r3
    6134:	0003      	movs	r3, r0
    6136:	702b      	strb	r3, [r5, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    6138:	2323      	movs	r3, #35	; 0x23
    613a:	18fb      	adds	r3, r7, r3
    613c:	781b      	ldrb	r3, [r3, #0]
    613e:	2b00      	cmp	r3, #0
    6140:	d001      	beq.n	6146 <_spi_set_config+0x15e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    6142:	2317      	movs	r3, #23
    6144:	e04f      	b.n	61e6 <_spi_set_config+0x1fe>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    6146:	230a      	movs	r3, #10
    6148:	18fb      	adds	r3, r7, r3
    614a:	881b      	ldrh	r3, [r3, #0]
    614c:	b2da      	uxtb	r2, r3
    614e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6150:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    6152:	683b      	ldr	r3, [r7, #0]
    6154:	685b      	ldr	r3, [r3, #4]
    6156:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6158:	4313      	orrs	r3, r2
    615a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    615c:	683b      	ldr	r3, [r7, #0]
    615e:	689b      	ldr	r3, [r3, #8]
    6160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    6162:	4313      	orrs	r3, r2
    6164:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    6166:	683b      	ldr	r3, [r7, #0]
    6168:	68db      	ldr	r3, [r3, #12]
    616a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    616c:	4313      	orrs	r3, r2
    616e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    6170:	683b      	ldr	r3, [r7, #0]
    6172:	7c1b      	ldrb	r3, [r3, #16]
    6174:	001a      	movs	r2, r3
    6176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6178:	4313      	orrs	r3, r2
    617a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    617c:	683b      	ldr	r3, [r7, #0]
    617e:	7c5b      	ldrb	r3, [r3, #17]
    6180:	2b00      	cmp	r3, #0
    6182:	d104      	bne.n	618e <_spi_set_config+0x1a6>
    6184:	4b21      	ldr	r3, [pc, #132]	; (620c <_spi_set_config+0x224>)
    6186:	447b      	add	r3, pc
    6188:	4798      	blx	r3
    618a:	1e03      	subs	r3, r0, #0
    618c:	d003      	beq.n	6196 <_spi_set_config+0x1ae>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    618e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6190:	2280      	movs	r2, #128	; 0x80
    6192:	4313      	orrs	r3, r2
    6194:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    6196:	683b      	ldr	r3, [r7, #0]
    6198:	7c9b      	ldrb	r3, [r3, #18]
    619a:	2b00      	cmp	r3, #0
    619c:	d004      	beq.n	61a8 <_spi_set_config+0x1c0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    61a0:	2280      	movs	r2, #128	; 0x80
    61a2:	0292      	lsls	r2, r2, #10
    61a4:	4313      	orrs	r3, r2
    61a6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    61a8:	683b      	ldr	r3, [r7, #0]
    61aa:	7cdb      	ldrb	r3, [r3, #19]
    61ac:	2b00      	cmp	r3, #0
    61ae:	d004      	beq.n	61ba <_spi_set_config+0x1d2>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    61b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    61b2:	2280      	movs	r2, #128	; 0x80
    61b4:	0092      	lsls	r2, r2, #2
    61b6:	4313      	orrs	r3, r2
    61b8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    61ba:	683b      	ldr	r3, [r7, #0]
    61bc:	7d1b      	ldrb	r3, [r3, #20]
    61be:	2b00      	cmp	r3, #0
    61c0:	d004      	beq.n	61cc <_spi_set_config+0x1e4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    61c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    61c4:	2280      	movs	r2, #128	; 0x80
    61c6:	0192      	lsls	r2, r2, #6
    61c8:	4313      	orrs	r3, r2
    61ca:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    61cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    61ce:	681a      	ldr	r2, [r3, #0]
    61d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    61d2:	431a      	orrs	r2, r3
    61d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    61d6:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    61d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    61da:	685a      	ldr	r2, [r3, #4]
    61dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    61de:	431a      	orrs	r2, r3
    61e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    61e2:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    61e4:	2300      	movs	r3, #0
}
    61e6:	0018      	movs	r0, r3
    61e8:	46bd      	mov	sp, r7
    61ea:	b012      	add	sp, #72	; 0x48
    61ec:	bdb0      	pop	{r4, r5, r7, pc}
    61ee:	46c0      	nop			; (mov r8, r8)
    61f0:	0000bddc 	.word	0x0000bddc
    61f4:	fffffa87 	.word	0xfffffa87
    61f8:	000002c4 	.word	0x000002c4
    61fc:	000002b0 	.word	0x000002b0
    6200:	000002ac 	.word	0x000002ac
    6204:	0000019c 	.word	0x0000019c
    6208:	00000108 	.word	0x00000108
    620c:	fffffa83 	.word	0xfffffa83

00006210 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    6210:	b5b0      	push	{r4, r5, r7, lr}
    6212:	b08a      	sub	sp, #40	; 0x28
    6214:	af00      	add	r7, sp, #0
    6216:	60f8      	str	r0, [r7, #12]
    6218:	60b9      	str	r1, [r7, #8]
    621a:	607a      	str	r2, [r7, #4]
    621c:	4c5d      	ldr	r4, [pc, #372]	; (6394 <spi_init+0x184>)
    621e:	447c      	add	r4, pc
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    6220:	68fb      	ldr	r3, [r7, #12]
    6222:	68ba      	ldr	r2, [r7, #8]
    6224:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    6226:	68fb      	ldr	r3, [r7, #12]
    6228:	681b      	ldr	r3, [r3, #0]
    622a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    622c:	6a3b      	ldr	r3, [r7, #32]
    622e:	681b      	ldr	r3, [r3, #0]
    6230:	2202      	movs	r2, #2
    6232:	4013      	ands	r3, r2
    6234:	d001      	beq.n	623a <spi_init+0x2a>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    6236:	231c      	movs	r3, #28
    6238:	e0a8      	b.n	638c <spi_init+0x17c>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    623a:	6a3b      	ldr	r3, [r7, #32]
    623c:	681b      	ldr	r3, [r3, #0]
    623e:	2201      	movs	r2, #1
    6240:	4013      	ands	r3, r2
    6242:	d001      	beq.n	6248 <spi_init+0x38>
		return STATUS_BUSY;
    6244:	2305      	movs	r3, #5
    6246:	e0a1      	b.n	638c <spi_init+0x17c>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    6248:	68fb      	ldr	r3, [r7, #12]
    624a:	681b      	ldr	r3, [r3, #0]
    624c:	0018      	movs	r0, r3
    624e:	4b52      	ldr	r3, [pc, #328]	; (6398 <spi_init+0x188>)
    6250:	58e3      	ldr	r3, [r4, r3]
    6252:	4798      	blx	r3
    6254:	0003      	movs	r3, r0
    6256:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    6258:	69fb      	ldr	r3, [r7, #28]
    625a:	3302      	adds	r3, #2
    625c:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    625e:	69fb      	ldr	r3, [r7, #28]
    6260:	3314      	adds	r3, #20
    6262:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    6264:	2201      	movs	r2, #1
    6266:	69bb      	ldr	r3, [r7, #24]
    6268:	409a      	lsls	r2, r3
    626a:	0013      	movs	r3, r2
    626c:	0019      	movs	r1, r3
    626e:	2002      	movs	r0, #2
    6270:	4b4a      	ldr	r3, [pc, #296]	; (639c <spi_init+0x18c>)
    6272:	447b      	add	r3, pc
    6274:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6276:	2310      	movs	r3, #16
    6278:	18fb      	adds	r3, r7, r3
    627a:	0018      	movs	r0, r3
    627c:	4b48      	ldr	r3, [pc, #288]	; (63a0 <spi_init+0x190>)
    627e:	447b      	add	r3, pc
    6280:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    6282:	687b      	ldr	r3, [r7, #4]
    6284:	2224      	movs	r2, #36	; 0x24
    6286:	5c9a      	ldrb	r2, [r3, r2]
    6288:	2310      	movs	r3, #16
    628a:	18fb      	adds	r3, r7, r3
    628c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    628e:	697b      	ldr	r3, [r7, #20]
    6290:	b2db      	uxtb	r3, r3
    6292:	2210      	movs	r2, #16
    6294:	18ba      	adds	r2, r7, r2
    6296:	0011      	movs	r1, r2
    6298:	0018      	movs	r0, r3
    629a:	4b42      	ldr	r3, [pc, #264]	; (63a4 <spi_init+0x194>)
    629c:	58e3      	ldr	r3, [r4, r3]
    629e:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    62a0:	697b      	ldr	r3, [r7, #20]
    62a2:	b2db      	uxtb	r3, r3
    62a4:	0018      	movs	r0, r3
    62a6:	4b40      	ldr	r3, [pc, #256]	; (63a8 <spi_init+0x198>)
    62a8:	58e3      	ldr	r3, [r4, r3]
    62aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    62ac:	687b      	ldr	r3, [r7, #4]
    62ae:	2224      	movs	r2, #36	; 0x24
    62b0:	5c9b      	ldrb	r3, [r3, r2]
    62b2:	2100      	movs	r1, #0
    62b4:	0018      	movs	r0, r3
    62b6:	4b3d      	ldr	r3, [pc, #244]	; (63ac <spi_init+0x19c>)
    62b8:	58e3      	ldr	r3, [r4, r3]
    62ba:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    62bc:	687b      	ldr	r3, [r7, #4]
    62be:	781b      	ldrb	r3, [r3, #0]
    62c0:	2b01      	cmp	r3, #1
    62c2:	d105      	bne.n	62d0 <spi_init+0xc0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    62c4:	6a3b      	ldr	r3, [r7, #32]
    62c6:	681b      	ldr	r3, [r3, #0]
    62c8:	220c      	movs	r2, #12
    62ca:	431a      	orrs	r2, r3
    62cc:	6a3b      	ldr	r3, [r7, #32]
    62ce:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    62d0:	2327      	movs	r3, #39	; 0x27
    62d2:	18fb      	adds	r3, r7, r3
    62d4:	2200      	movs	r2, #0
    62d6:	701a      	strb	r2, [r3, #0]
    62d8:	e010      	b.n	62fc <spi_init+0xec>
		module->callback[i]        = NULL;
    62da:	2327      	movs	r3, #39	; 0x27
    62dc:	18fb      	adds	r3, r7, r3
    62de:	781b      	ldrb	r3, [r3, #0]
    62e0:	68fa      	ldr	r2, [r7, #12]
    62e2:	3302      	adds	r3, #2
    62e4:	009b      	lsls	r3, r3, #2
    62e6:	18d3      	adds	r3, r2, r3
    62e8:	3304      	adds	r3, #4
    62ea:	2200      	movs	r2, #0
    62ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    62ee:	2327      	movs	r3, #39	; 0x27
    62f0:	18fb      	adds	r3, r7, r3
    62f2:	781a      	ldrb	r2, [r3, #0]
    62f4:	2327      	movs	r3, #39	; 0x27
    62f6:	18fb      	adds	r3, r7, r3
    62f8:	3201      	adds	r2, #1
    62fa:	701a      	strb	r2, [r3, #0]
    62fc:	2327      	movs	r3, #39	; 0x27
    62fe:	18fb      	adds	r3, r7, r3
    6300:	781b      	ldrb	r3, [r3, #0]
    6302:	2b06      	cmp	r3, #6
    6304:	d9e9      	bls.n	62da <spi_init+0xca>
	}
	module->tx_buffer_ptr              = NULL;
    6306:	68fb      	ldr	r3, [r7, #12]
    6308:	2200      	movs	r2, #0
    630a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    630c:	68fb      	ldr	r3, [r7, #12]
    630e:	2200      	movs	r2, #0
    6310:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    6312:	68fb      	ldr	r3, [r7, #12]
    6314:	2200      	movs	r2, #0
    6316:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    6318:	68fb      	ldr	r3, [r7, #12]
    631a:	2200      	movs	r2, #0
    631c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    631e:	68fb      	ldr	r3, [r7, #12]
    6320:	2236      	movs	r2, #54	; 0x36
    6322:	2100      	movs	r1, #0
    6324:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    6326:	68fb      	ldr	r3, [r7, #12]
    6328:	2237      	movs	r2, #55	; 0x37
    632a:	2100      	movs	r1, #0
    632c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    632e:	68fb      	ldr	r3, [r7, #12]
    6330:	2238      	movs	r2, #56	; 0x38
    6332:	2100      	movs	r1, #0
    6334:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    6336:	68fb      	ldr	r3, [r7, #12]
    6338:	2203      	movs	r2, #3
    633a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    633c:	68fb      	ldr	r3, [r7, #12]
    633e:	2200      	movs	r2, #0
    6340:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    6342:	68fb      	ldr	r3, [r7, #12]
    6344:	681b      	ldr	r3, [r3, #0]
    6346:	2213      	movs	r2, #19
    6348:	18bd      	adds	r5, r7, r2
    634a:	0018      	movs	r0, r3
    634c:	4b12      	ldr	r3, [pc, #72]	; (6398 <spi_init+0x188>)
    634e:	58e3      	ldr	r3, [r4, r3]
    6350:	4798      	blx	r3
    6352:	0003      	movs	r3, r0
    6354:	702b      	strb	r3, [r5, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    6356:	4b16      	ldr	r3, [pc, #88]	; (63b0 <spi_init+0x1a0>)
    6358:	58e3      	ldr	r3, [r4, r3]
    635a:	001a      	movs	r2, r3
    635c:	2313      	movs	r3, #19
    635e:	18fb      	adds	r3, r7, r3
    6360:	781b      	ldrb	r3, [r3, #0]
    6362:	0011      	movs	r1, r2
    6364:	0018      	movs	r0, r3
    6366:	4b13      	ldr	r3, [pc, #76]	; (63b4 <spi_init+0x1a4>)
    6368:	58e3      	ldr	r3, [r4, r3]
    636a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    636c:	2313      	movs	r3, #19
    636e:	18fb      	adds	r3, r7, r3
    6370:	781a      	ldrb	r2, [r3, #0]
    6372:	4b11      	ldr	r3, [pc, #68]	; (63b8 <spi_init+0x1a8>)
    6374:	58e3      	ldr	r3, [r4, r3]
    6376:	0092      	lsls	r2, r2, #2
    6378:	68f9      	ldr	r1, [r7, #12]
    637a:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    637c:	687a      	ldr	r2, [r7, #4]
    637e:	68fb      	ldr	r3, [r7, #12]
    6380:	0011      	movs	r1, r2
    6382:	0018      	movs	r0, r3
    6384:	4b0d      	ldr	r3, [pc, #52]	; (63bc <spi_init+0x1ac>)
    6386:	447b      	add	r3, pc
    6388:	4798      	blx	r3
    638a:	0003      	movs	r3, r0
}
    638c:	0018      	movs	r0, r3
    638e:	46bd      	mov	sp, r7
    6390:	b00a      	add	sp, #40	; 0x28
    6392:	bdb0      	pop	{r4, r5, r7, pc}
    6394:	0000bbb2 	.word	0x0000bbb2
    6398:	000002ac 	.word	0x000002ac
    639c:	fffff93b 	.word	0xfffff93b
    63a0:	fffff917 	.word	0xfffff917
    63a4:	000000b0 	.word	0x000000b0
    63a8:	00000230 	.word	0x00000230
    63ac:	00000228 	.word	0x00000228
    63b0:	000000c4 	.word	0x000000c4
    63b4:	00000164 	.word	0x00000164
    63b8:	00000158 	.word	0x00000158
    63bc:	fffffc5f 	.word	0xfffffc5f

000063c0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    63c0:	b590      	push	{r4, r7, lr}
    63c2:	b087      	sub	sp, #28
    63c4:	af00      	add	r7, sp, #0
    63c6:	60f8      	str	r0, [r7, #12]
    63c8:	60b9      	str	r1, [r7, #8]
    63ca:	0019      	movs	r1, r3
    63cc:	1dbb      	adds	r3, r7, #6
    63ce:	801a      	strh	r2, [r3, #0]
    63d0:	1d3b      	adds	r3, r7, #4
    63d2:	1c0a      	adds	r2, r1, #0
    63d4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    63d6:	68fb      	ldr	r3, [r7, #12]
    63d8:	2238      	movs	r2, #56	; 0x38
    63da:	5c9b      	ldrb	r3, [r3, r2]
    63dc:	b2db      	uxtb	r3, r3
    63de:	2b05      	cmp	r3, #5
    63e0:	d101      	bne.n	63e6 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    63e2:	2305      	movs	r3, #5
    63e4:	e07e      	b.n	64e4 <spi_read_buffer_wait+0x124>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    63e6:	1dbb      	adds	r3, r7, #6
    63e8:	881b      	ldrh	r3, [r3, #0]
    63ea:	2b00      	cmp	r3, #0
    63ec:	d101      	bne.n	63f2 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    63ee:	2317      	movs	r3, #23
    63f0:	e078      	b.n	64e4 <spi_read_buffer_wait+0x124>
	}

	if (!(module->receiver_enabled)) {
    63f2:	68fb      	ldr	r3, [r7, #12]
    63f4:	79db      	ldrb	r3, [r3, #7]
    63f6:	2201      	movs	r2, #1
    63f8:	4053      	eors	r3, r2
    63fa:	b2db      	uxtb	r3, r3
    63fc:	2b00      	cmp	r3, #0
    63fe:	d001      	beq.n	6404 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    6400:	231c      	movs	r3, #28
    6402:	e06f      	b.n	64e4 <spi_read_buffer_wait+0x124>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    6404:	2316      	movs	r3, #22
    6406:	18fb      	adds	r3, r7, r3
    6408:	2200      	movs	r2, #0
    640a:	801a      	strh	r2, [r3, #0]

	while (length--) {
    640c:	e062      	b.n	64d4 <spi_read_buffer_wait+0x114>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    640e:	68fb      	ldr	r3, [r7, #12]
    6410:	795b      	ldrb	r3, [r3, #5]
    6412:	2b01      	cmp	r3, #1
    6414:	d114      	bne.n	6440 <spi_read_buffer_wait+0x80>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    6416:	46c0      	nop			; (mov r8, r8)
    6418:	68fb      	ldr	r3, [r7, #12]
    641a:	0018      	movs	r0, r3
    641c:	4b33      	ldr	r3, [pc, #204]	; (64ec <spi_read_buffer_wait+0x12c>)
    641e:	447b      	add	r3, pc
    6420:	4798      	blx	r3
    6422:	0003      	movs	r3, r0
    6424:	001a      	movs	r2, r3
    6426:	2301      	movs	r3, #1
    6428:	4053      	eors	r3, r2
    642a:	b2db      	uxtb	r3, r3
    642c:	2b00      	cmp	r3, #0
    642e:	d1f3      	bne.n	6418 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    6430:	1d3b      	adds	r3, r7, #4
    6432:	881a      	ldrh	r2, [r3, #0]
    6434:	68fb      	ldr	r3, [r7, #12]
    6436:	0011      	movs	r1, r2
    6438:	0018      	movs	r0, r3
    643a:	4b2d      	ldr	r3, [pc, #180]	; (64f0 <spi_read_buffer_wait+0x130>)
    643c:	447b      	add	r3, pc
    643e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    6440:	46c0      	nop			; (mov r8, r8)
    6442:	68fb      	ldr	r3, [r7, #12]
    6444:	0018      	movs	r0, r3
    6446:	4b2b      	ldr	r3, [pc, #172]	; (64f4 <spi_read_buffer_wait+0x134>)
    6448:	447b      	add	r3, pc
    644a:	4798      	blx	r3
    644c:	0003      	movs	r3, r0
    644e:	001a      	movs	r2, r3
    6450:	2301      	movs	r3, #1
    6452:	4053      	eors	r3, r2
    6454:	b2db      	uxtb	r3, r3
    6456:	2b00      	cmp	r3, #0
    6458:	d1f3      	bne.n	6442 <spi_read_buffer_wait+0x82>
		}

		uint16_t received_data = 0;
    645a:	2312      	movs	r3, #18
    645c:	18fb      	adds	r3, r7, r3
    645e:	2200      	movs	r2, #0
    6460:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    6462:	2315      	movs	r3, #21
    6464:	18fc      	adds	r4, r7, r3
    6466:	2312      	movs	r3, #18
    6468:	18fa      	adds	r2, r7, r3
    646a:	68fb      	ldr	r3, [r7, #12]
    646c:	0011      	movs	r1, r2
    646e:	0018      	movs	r0, r3
    6470:	4b21      	ldr	r3, [pc, #132]	; (64f8 <spi_read_buffer_wait+0x138>)
    6472:	447b      	add	r3, pc
    6474:	4798      	blx	r3
    6476:	0003      	movs	r3, r0
    6478:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    647a:	2315      	movs	r3, #21
    647c:	18fb      	adds	r3, r7, r3
    647e:	781b      	ldrb	r3, [r3, #0]
    6480:	2b00      	cmp	r3, #0
    6482:	d003      	beq.n	648c <spi_read_buffer_wait+0xcc>
			/* Overflow, abort */
			return retval;
    6484:	2315      	movs	r3, #21
    6486:	18fb      	adds	r3, r7, r3
    6488:	781b      	ldrb	r3, [r3, #0]
    648a:	e02b      	b.n	64e4 <spi_read_buffer_wait+0x124>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    648c:	2316      	movs	r3, #22
    648e:	18fb      	adds	r3, r7, r3
    6490:	881b      	ldrh	r3, [r3, #0]
    6492:	2216      	movs	r2, #22
    6494:	18ba      	adds	r2, r7, r2
    6496:	1c59      	adds	r1, r3, #1
    6498:	8011      	strh	r1, [r2, #0]
    649a:	001a      	movs	r2, r3
    649c:	68bb      	ldr	r3, [r7, #8]
    649e:	189b      	adds	r3, r3, r2
    64a0:	2212      	movs	r2, #18
    64a2:	18ba      	adds	r2, r7, r2
    64a4:	8812      	ldrh	r2, [r2, #0]
    64a6:	b2d2      	uxtb	r2, r2
    64a8:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    64aa:	68fb      	ldr	r3, [r7, #12]
    64ac:	799b      	ldrb	r3, [r3, #6]
    64ae:	2b01      	cmp	r3, #1
    64b0:	d110      	bne.n	64d4 <spi_read_buffer_wait+0x114>
			rx_data[rx_pos++] = (received_data >> 8);
    64b2:	2316      	movs	r3, #22
    64b4:	18fb      	adds	r3, r7, r3
    64b6:	881b      	ldrh	r3, [r3, #0]
    64b8:	2216      	movs	r2, #22
    64ba:	18ba      	adds	r2, r7, r2
    64bc:	1c59      	adds	r1, r3, #1
    64be:	8011      	strh	r1, [r2, #0]
    64c0:	001a      	movs	r2, r3
    64c2:	68bb      	ldr	r3, [r7, #8]
    64c4:	189b      	adds	r3, r3, r2
    64c6:	2212      	movs	r2, #18
    64c8:	18ba      	adds	r2, r7, r2
    64ca:	8812      	ldrh	r2, [r2, #0]
    64cc:	0a12      	lsrs	r2, r2, #8
    64ce:	b292      	uxth	r2, r2
    64d0:	b2d2      	uxtb	r2, r2
    64d2:	701a      	strb	r2, [r3, #0]
	while (length--) {
    64d4:	1dbb      	adds	r3, r7, #6
    64d6:	881b      	ldrh	r3, [r3, #0]
    64d8:	1dba      	adds	r2, r7, #6
    64da:	1e59      	subs	r1, r3, #1
    64dc:	8011      	strh	r1, [r2, #0]
    64de:	2b00      	cmp	r3, #0
    64e0:	d195      	bne.n	640e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    64e2:	2300      	movs	r3, #0
}
    64e4:	0018      	movs	r0, r3
    64e6:	46bd      	mov	sp, r7
    64e8:	b007      	add	sp, #28
    64ea:	bd90      	pop	{r4, r7, pc}
    64ec:	fffff977 	.word	0xfffff977
    64f0:	fffff9a9 	.word	0xfffff9a9
    64f4:	fffff975 	.word	0xfffff975
    64f8:	fffff9bf 	.word	0xfffff9bf

000064fc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    64fc:	b580      	push	{r7, lr}
    64fe:	b086      	sub	sp, #24
    6500:	af00      	add	r7, sp, #0
    6502:	60f8      	str	r0, [r7, #12]
    6504:	60b9      	str	r1, [r7, #8]
    6506:	1dfb      	adds	r3, r7, #7
    6508:	701a      	strb	r2, [r3, #0]
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    650a:	68fb      	ldr	r3, [r7, #12]
    650c:	795b      	ldrb	r3, [r3, #5]
    650e:	2b01      	cmp	r3, #1
    6510:	d001      	beq.n	6516 <spi_select_slave+0x1a>
		return STATUS_ERR_UNSUPPORTED_DEV;
    6512:	2315      	movs	r3, #21
    6514:	e064      	b.n	65e0 <spi_select_slave+0xe4>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    6516:	68fb      	ldr	r3, [r7, #12]
    6518:	7a1b      	ldrb	r3, [r3, #8]
    651a:	2201      	movs	r2, #1
    651c:	4053      	eors	r3, r2
    651e:	b2db      	uxtb	r3, r3
    6520:	2b00      	cmp	r3, #0
    6522:	d05c      	beq.n	65de <spi_select_slave+0xe2>
#  endif
	{
		if (select) {
    6524:	1dfb      	adds	r3, r7, #7
    6526:	781b      	ldrb	r3, [r3, #0]
    6528:	2b00      	cmp	r3, #0
    652a:	d051      	beq.n	65d0 <spi_select_slave+0xd4>
			/* Check if address recognition is enabled */
			if (slave->address_enabled) {
    652c:	68bb      	ldr	r3, [r7, #8]
    652e:	785b      	ldrb	r3, [r3, #1]
    6530:	2b00      	cmp	r3, #0
    6532:	d045      	beq.n	65c0 <spi_select_slave+0xc4>
				/* Check if the module is ready to write the address */
				if (!spi_is_ready_to_write(module)) {
    6534:	68fb      	ldr	r3, [r7, #12]
    6536:	0018      	movs	r0, r3
    6538:	4b2b      	ldr	r3, [pc, #172]	; (65e8 <spi_select_slave+0xec>)
    653a:	447b      	add	r3, pc
    653c:	4798      	blx	r3
    653e:	0003      	movs	r3, r0
    6540:	001a      	movs	r2, r3
    6542:	2301      	movs	r3, #1
    6544:	4053      	eors	r3, r2
    6546:	b2db      	uxtb	r3, r3
    6548:	2b00      	cmp	r3, #0
    654a:	d008      	beq.n	655e <spi_select_slave+0x62>
					/* Not ready, do not select slave and return */
					port_pin_set_output_level(slave->ss_pin, true);
    654c:	68bb      	ldr	r3, [r7, #8]
    654e:	781b      	ldrb	r3, [r3, #0]
    6550:	2101      	movs	r1, #1
    6552:	0018      	movs	r0, r3
    6554:	4b25      	ldr	r3, [pc, #148]	; (65ec <spi_select_slave+0xf0>)
    6556:	447b      	add	r3, pc
    6558:	4798      	blx	r3
					return STATUS_BUSY;
    655a:	2305      	movs	r3, #5
    655c:	e040      	b.n	65e0 <spi_select_slave+0xe4>
				}

				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    655e:	68bb      	ldr	r3, [r7, #8]
    6560:	781b      	ldrb	r3, [r3, #0]
    6562:	2100      	movs	r1, #0
    6564:	0018      	movs	r0, r3
    6566:	4b22      	ldr	r3, [pc, #136]	; (65f0 <spi_select_slave+0xf4>)
    6568:	447b      	add	r3, pc
    656a:	4798      	blx	r3

				/* Write address to slave */
				spi_write(module, slave->address);
    656c:	68bb      	ldr	r3, [r7, #8]
    656e:	789b      	ldrb	r3, [r3, #2]
    6570:	b29a      	uxth	r2, r3
    6572:	68fb      	ldr	r3, [r7, #12]
    6574:	0011      	movs	r1, r2
    6576:	0018      	movs	r0, r3
    6578:	4b1e      	ldr	r3, [pc, #120]	; (65f4 <spi_select_slave+0xf8>)
    657a:	447b      	add	r3, pc
    657c:	4798      	blx	r3

				if (!(module->receiver_enabled)) {
    657e:	68fb      	ldr	r3, [r7, #12]
    6580:	79db      	ldrb	r3, [r3, #7]
    6582:	2201      	movs	r2, #1
    6584:	4053      	eors	r3, r2
    6586:	b2db      	uxtb	r3, r3
    6588:	2b00      	cmp	r3, #0
    658a:	d028      	beq.n	65de <spi_select_slave+0xe2>
					/* Flush contents of shift register shifted back from slave */
					while (!spi_is_ready_to_read(module)) {
    658c:	46c0      	nop			; (mov r8, r8)
    658e:	68fb      	ldr	r3, [r7, #12]
    6590:	0018      	movs	r0, r3
    6592:	4b19      	ldr	r3, [pc, #100]	; (65f8 <spi_select_slave+0xfc>)
    6594:	447b      	add	r3, pc
    6596:	4798      	blx	r3
    6598:	0003      	movs	r3, r0
    659a:	001a      	movs	r2, r3
    659c:	2301      	movs	r3, #1
    659e:	4053      	eors	r3, r2
    65a0:	b2db      	uxtb	r3, r3
    65a2:	2b00      	cmp	r3, #0
    65a4:	d1f3      	bne.n	658e <spi_select_slave+0x92>
					}
					uint16_t flush = 0;
    65a6:	2316      	movs	r3, #22
    65a8:	18fb      	adds	r3, r7, r3
    65aa:	2200      	movs	r2, #0
    65ac:	801a      	strh	r2, [r3, #0]
					spi_read(module, &flush);
    65ae:	2316      	movs	r3, #22
    65b0:	18fa      	adds	r2, r7, r3
    65b2:	68fb      	ldr	r3, [r7, #12]
    65b4:	0011      	movs	r1, r2
    65b6:	0018      	movs	r0, r3
    65b8:	4b10      	ldr	r3, [pc, #64]	; (65fc <spi_select_slave+0x100>)
    65ba:	447b      	add	r3, pc
    65bc:	4798      	blx	r3
    65be:	e00e      	b.n	65de <spi_select_slave+0xe2>
				}
			} else {
				/* Drive Slave Select low */
				port_pin_set_output_level(slave->ss_pin, false);
    65c0:	68bb      	ldr	r3, [r7, #8]
    65c2:	781b      	ldrb	r3, [r3, #0]
    65c4:	2100      	movs	r1, #0
    65c6:	0018      	movs	r0, r3
    65c8:	4b0d      	ldr	r3, [pc, #52]	; (6600 <spi_select_slave+0x104>)
    65ca:	447b      	add	r3, pc
    65cc:	4798      	blx	r3
    65ce:	e006      	b.n	65de <spi_select_slave+0xe2>
			}
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
    65d0:	68bb      	ldr	r3, [r7, #8]
    65d2:	781b      	ldrb	r3, [r3, #0]
    65d4:	2101      	movs	r1, #1
    65d6:	0018      	movs	r0, r3
    65d8:	4b0a      	ldr	r3, [pc, #40]	; (6604 <spi_select_slave+0x108>)
    65da:	447b      	add	r3, pc
    65dc:	4798      	blx	r3
		}
	}
	return STATUS_OK;
    65de:	2300      	movs	r3, #0
}
    65e0:	0018      	movs	r0, r3
    65e2:	46bd      	mov	sp, r7
    65e4:	b006      	add	sp, #24
    65e6:	bd80      	pop	{r7, pc}
    65e8:	fffff85b 	.word	0xfffff85b
    65ec:	fffff5eb 	.word	0xfffff5eb
    65f0:	fffff5d9 	.word	0xfffff5d9
    65f4:	fffff86b 	.word	0xfffff86b
    65f8:	fffff829 	.word	0xfffff829
    65fc:	fffff877 	.word	0xfffff877
    6600:	fffff577 	.word	0xfffff577
    6604:	fffff567 	.word	0xfffff567

00006608 <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    6608:	b580      	push	{r7, lr}
    660a:	b086      	sub	sp, #24
    660c:	af00      	add	r7, sp, #0
    660e:	60f8      	str	r0, [r7, #12]
    6610:	60b9      	str	r1, [r7, #8]
    6612:	1dbb      	adds	r3, r7, #6
    6614:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    6616:	68fb      	ldr	r3, [r7, #12]
    6618:	2238      	movs	r2, #56	; 0x38
    661a:	5c9b      	ldrb	r3, [r3, r2]
    661c:	b2db      	uxtb	r3, r3
    661e:	2b05      	cmp	r3, #5
    6620:	d101      	bne.n	6626 <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    6622:	2305      	movs	r3, #5
    6624:	e08c      	b.n	6740 <spi_write_buffer_wait+0x138>
	}
#  endif

	if (length == 0) {
    6626:	1dbb      	adds	r3, r7, #6
    6628:	881b      	ldrh	r3, [r3, #0]
    662a:	2b00      	cmp	r3, #0
    662c:	d101      	bne.n	6632 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    662e:	2317      	movs	r3, #23
    6630:	e086      	b.n	6740 <spi_write_buffer_wait+0x138>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    6632:	2316      	movs	r3, #22
    6634:	18fb      	adds	r3, r7, r3
    6636:	2200      	movs	r2, #0
    6638:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    663a:	2314      	movs	r3, #20
    663c:	18fb      	adds	r3, r7, r3
    663e:	1dba      	adds	r2, r7, #6
    6640:	8812      	ldrh	r2, [r2, #0]
    6642:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    6644:	e063      	b.n	670e <spi_write_buffer_wait+0x106>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    6646:	46c0      	nop			; (mov r8, r8)
    6648:	68fb      	ldr	r3, [r7, #12]
    664a:	0018      	movs	r0, r3
    664c:	4b3e      	ldr	r3, [pc, #248]	; (6748 <spi_write_buffer_wait+0x140>)
    664e:	447b      	add	r3, pc
    6650:	4798      	blx	r3
    6652:	0003      	movs	r3, r0
    6654:	001a      	movs	r2, r3
    6656:	2301      	movs	r3, #1
    6658:	4053      	eors	r3, r2
    665a:	b2db      	uxtb	r3, r3
    665c:	2b00      	cmp	r3, #0
    665e:	d1f3      	bne.n	6648 <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    6660:	2316      	movs	r3, #22
    6662:	18fb      	adds	r3, r7, r3
    6664:	881b      	ldrh	r3, [r3, #0]
    6666:	2216      	movs	r2, #22
    6668:	18ba      	adds	r2, r7, r2
    666a:	1c59      	adds	r1, r3, #1
    666c:	8011      	strh	r1, [r2, #0]
    666e:	001a      	movs	r2, r3
    6670:	68bb      	ldr	r3, [r7, #8]
    6672:	189b      	adds	r3, r3, r2
    6674:	781a      	ldrb	r2, [r3, #0]
    6676:	2312      	movs	r3, #18
    6678:	18fb      	adds	r3, r7, r3
    667a:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    667c:	68fb      	ldr	r3, [r7, #12]
    667e:	799b      	ldrb	r3, [r3, #6]
    6680:	2b01      	cmp	r3, #1
    6682:	d115      	bne.n	66b0 <spi_write_buffer_wait+0xa8>
			data_to_send |= (tx_data[tx_pos++] << 8);
    6684:	2316      	movs	r3, #22
    6686:	18fb      	adds	r3, r7, r3
    6688:	881b      	ldrh	r3, [r3, #0]
    668a:	2216      	movs	r2, #22
    668c:	18ba      	adds	r2, r7, r2
    668e:	1c59      	adds	r1, r3, #1
    6690:	8011      	strh	r1, [r2, #0]
    6692:	001a      	movs	r2, r3
    6694:	68bb      	ldr	r3, [r7, #8]
    6696:	189b      	adds	r3, r3, r2
    6698:	781b      	ldrb	r3, [r3, #0]
    669a:	021b      	lsls	r3, r3, #8
    669c:	b21a      	sxth	r2, r3
    669e:	2312      	movs	r3, #18
    66a0:	18fb      	adds	r3, r7, r3
    66a2:	2100      	movs	r1, #0
    66a4:	5e5b      	ldrsh	r3, [r3, r1]
    66a6:	4313      	orrs	r3, r2
    66a8:	b21a      	sxth	r2, r3
    66aa:	2312      	movs	r3, #18
    66ac:	18fb      	adds	r3, r7, r3
    66ae:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    66b0:	2312      	movs	r3, #18
    66b2:	18fb      	adds	r3, r7, r3
    66b4:	881a      	ldrh	r2, [r3, #0]
    66b6:	68fb      	ldr	r3, [r7, #12]
    66b8:	0011      	movs	r1, r2
    66ba:	0018      	movs	r0, r3
    66bc:	4b23      	ldr	r3, [pc, #140]	; (674c <spi_write_buffer_wait+0x144>)
    66be:	447b      	add	r3, pc
    66c0:	4798      	blx	r3

		if (module->receiver_enabled) {
    66c2:	68fb      	ldr	r3, [r7, #12]
    66c4:	79db      	ldrb	r3, [r3, #7]
    66c6:	2214      	movs	r2, #20
    66c8:	18ba      	adds	r2, r7, r2
    66ca:	2114      	movs	r1, #20
    66cc:	1879      	adds	r1, r7, r1
    66ce:	8809      	ldrh	r1, [r1, #0]
    66d0:	8011      	strh	r1, [r2, #0]
    66d2:	2b00      	cmp	r3, #0
    66d4:	d01b      	beq.n	670e <spi_write_buffer_wait+0x106>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    66d6:	46c0      	nop			; (mov r8, r8)
    66d8:	68fb      	ldr	r3, [r7, #12]
    66da:	0018      	movs	r0, r3
    66dc:	4b1c      	ldr	r3, [pc, #112]	; (6750 <spi_write_buffer_wait+0x148>)
    66de:	447b      	add	r3, pc
    66e0:	4798      	blx	r3
    66e2:	0003      	movs	r3, r0
    66e4:	001a      	movs	r2, r3
    66e6:	2301      	movs	r3, #1
    66e8:	4053      	eors	r3, r2
    66ea:	b2db      	uxtb	r3, r3
    66ec:	2b00      	cmp	r3, #0
    66ee:	d1f3      	bne.n	66d8 <spi_write_buffer_wait+0xd0>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    66f0:	2310      	movs	r3, #16
    66f2:	18fa      	adds	r2, r7, r3
    66f4:	68fb      	ldr	r3, [r7, #12]
    66f6:	0011      	movs	r1, r2
    66f8:	0018      	movs	r0, r3
    66fa:	4b16      	ldr	r3, [pc, #88]	; (6754 <spi_write_buffer_wait+0x14c>)
    66fc:	447b      	add	r3, pc
    66fe:	4798      	blx	r3
			flush_length--;
    6700:	2314      	movs	r3, #20
    6702:	18fb      	adds	r3, r7, r3
    6704:	881a      	ldrh	r2, [r3, #0]
    6706:	2314      	movs	r3, #20
    6708:	18fb      	adds	r3, r7, r3
    670a:	3a01      	subs	r2, #1
    670c:	801a      	strh	r2, [r3, #0]
	while (length--) {
    670e:	1dbb      	adds	r3, r7, #6
    6710:	881b      	ldrh	r3, [r3, #0]
    6712:	1dba      	adds	r2, r7, #6
    6714:	1e59      	subs	r1, r3, #1
    6716:	8011      	strh	r1, [r2, #0]
    6718:	2b00      	cmp	r3, #0
    671a:	d194      	bne.n	6646 <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    671c:	68fb      	ldr	r3, [r7, #12]
    671e:	795b      	ldrb	r3, [r3, #5]
    6720:	2b01      	cmp	r3, #1
    6722:	d10c      	bne.n	673e <spi_write_buffer_wait+0x136>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    6724:	46c0      	nop			; (mov r8, r8)
    6726:	68fb      	ldr	r3, [r7, #12]
    6728:	0018      	movs	r0, r3
    672a:	4b0b      	ldr	r3, [pc, #44]	; (6758 <spi_write_buffer_wait+0x150>)
    672c:	447b      	add	r3, pc
    672e:	4798      	blx	r3
    6730:	0003      	movs	r3, r0
    6732:	001a      	movs	r2, r3
    6734:	2301      	movs	r3, #1
    6736:	4053      	eors	r3, r2
    6738:	b2db      	uxtb	r3, r3
    673a:	2b00      	cmp	r3, #0
    673c:	d1f3      	bne.n	6726 <spi_write_buffer_wait+0x11e>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    673e:	2300      	movs	r3, #0
}
    6740:	0018      	movs	r0, r3
    6742:	46bd      	mov	sp, r7
    6744:	b006      	add	sp, #24
    6746:	bd80      	pop	{r7, pc}
    6748:	fffff747 	.word	0xfffff747
    674c:	fffff727 	.word	0xfffff727
    6750:	fffff6df 	.word	0xfffff6df
    6754:	fffff735 	.word	0xfffff735
    6758:	fffff641 	.word	0xfffff641

0000675c <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    675c:	b580      	push	{r7, lr}
    675e:	b084      	sub	sp, #16
    6760:	af00      	add	r7, sp, #0
    6762:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6764:	687b      	ldr	r3, [r7, #4]
    6766:	681b      	ldr	r3, [r3, #0]
    6768:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    676a:	687b      	ldr	r3, [r7, #4]
    676c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	b2da      	uxtb	r2, r3
    6772:	230e      	movs	r3, #14
    6774:	18fb      	adds	r3, r7, r3
    6776:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    6778:	687b      	ldr	r3, [r7, #4]
    677a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    677c:	1c5a      	adds	r2, r3, #1
    677e:	687b      	ldr	r3, [r7, #4]
    6780:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6782:	687b      	ldr	r3, [r7, #4]
    6784:	799b      	ldrb	r3, [r3, #6]
    6786:	2b01      	cmp	r3, #1
    6788:	d113      	bne.n	67b2 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    678e:	781b      	ldrb	r3, [r3, #0]
    6790:	b2db      	uxtb	r3, r3
    6792:	021b      	lsls	r3, r3, #8
    6794:	b21a      	sxth	r2, r3
    6796:	230e      	movs	r3, #14
    6798:	18fb      	adds	r3, r7, r3
    679a:	2100      	movs	r1, #0
    679c:	5e5b      	ldrsh	r3, [r3, r1]
    679e:	4313      	orrs	r3, r2
    67a0:	b21a      	sxth	r2, r3
    67a2:	230e      	movs	r3, #14
    67a4:	18fb      	adds	r3, r7, r3
    67a6:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    67a8:	687b      	ldr	r3, [r7, #4]
    67aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    67ac:	1c5a      	adds	r2, r3, #1
    67ae:	687b      	ldr	r3, [r7, #4]
    67b0:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    67b2:	230e      	movs	r3, #14
    67b4:	18fb      	adds	r3, r7, r3
    67b6:	881b      	ldrh	r3, [r3, #0]
    67b8:	05db      	lsls	r3, r3, #23
    67ba:	0dda      	lsrs	r2, r3, #23
    67bc:	68bb      	ldr	r3, [r7, #8]
    67be:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    67c0:	687b      	ldr	r3, [r7, #4]
    67c2:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    67c4:	b29b      	uxth	r3, r3
    67c6:	3b01      	subs	r3, #1
    67c8:	b29a      	uxth	r2, r3
    67ca:	687b      	ldr	r3, [r7, #4]
    67cc:	869a      	strh	r2, [r3, #52]	; 0x34
}
    67ce:	46c0      	nop			; (mov r8, r8)
    67d0:	46bd      	mov	sp, r7
    67d2:	b004      	add	sp, #16
    67d4:	bd80      	pop	{r7, pc}
	...

000067d8 <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    67d8:	b580      	push	{r7, lr}
    67da:	b084      	sub	sp, #16
    67dc:	af00      	add	r7, sp, #0
    67de:	6078      	str	r0, [r7, #4]
    67e0:	4a0a      	ldr	r2, [pc, #40]	; (680c <_spi_write_dummy+0x34>)
    67e2:	447a      	add	r2, pc
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    67e4:	687b      	ldr	r3, [r7, #4]
    67e6:	681b      	ldr	r3, [r3, #0]
    67e8:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    67ea:	4b09      	ldr	r3, [pc, #36]	; (6810 <_spi_write_dummy+0x38>)
    67ec:	58d3      	ldr	r3, [r2, r3]
    67ee:	881b      	ldrh	r3, [r3, #0]
    67f0:	001a      	movs	r2, r3
    67f2:	68fb      	ldr	r3, [r7, #12]
    67f4:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    67f6:	687b      	ldr	r3, [r7, #4]
    67f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    67fa:	b29b      	uxth	r3, r3
    67fc:	3b01      	subs	r3, #1
    67fe:	b29a      	uxth	r2, r3
    6800:	687b      	ldr	r3, [r7, #4]
    6802:	865a      	strh	r2, [r3, #50]	; 0x32
}
    6804:	46c0      	nop			; (mov r8, r8)
    6806:	46bd      	mov	sp, r7
    6808:	b004      	add	sp, #16
    680a:	bd80      	pop	{r7, pc}
    680c:	0000b5ee 	.word	0x0000b5ee
    6810:	0000013c 	.word	0x0000013c

00006814 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    6814:	b580      	push	{r7, lr}
    6816:	b084      	sub	sp, #16
    6818:	af00      	add	r7, sp, #0
    681a:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    681c:	687b      	ldr	r3, [r7, #4]
    681e:	681b      	ldr	r3, [r3, #0]
    6820:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    6822:	230a      	movs	r3, #10
    6824:	18fb      	adds	r3, r7, r3
    6826:	2200      	movs	r2, #0
    6828:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    682a:	68fb      	ldr	r3, [r7, #12]
    682c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    682e:	230a      	movs	r3, #10
    6830:	18fb      	adds	r3, r7, r3
    6832:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    6834:	687b      	ldr	r3, [r7, #4]
    6836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    6838:	b29b      	uxth	r3, r3
    683a:	3b01      	subs	r3, #1
    683c:	b29a      	uxth	r2, r3
    683e:	687b      	ldr	r3, [r7, #4]
    6840:	865a      	strh	r2, [r3, #50]	; 0x32
}
    6842:	46c0      	nop			; (mov r8, r8)
    6844:	46bd      	mov	sp, r7
    6846:	b004      	add	sp, #16
    6848:	bd80      	pop	{r7, pc}

0000684a <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    684a:	b580      	push	{r7, lr}
    684c:	b084      	sub	sp, #16
    684e:	af00      	add	r7, sp, #0
    6850:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    6852:	687b      	ldr	r3, [r7, #4]
    6854:	681b      	ldr	r3, [r3, #0]
    6856:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    6858:	68fb      	ldr	r3, [r7, #12]
    685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    685c:	b29a      	uxth	r2, r3
    685e:	230a      	movs	r3, #10
    6860:	18fb      	adds	r3, r7, r3
    6862:	05d2      	lsls	r2, r2, #23
    6864:	0dd2      	lsrs	r2, r2, #23
    6866:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    6868:	687b      	ldr	r3, [r7, #4]
    686a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    686c:	220a      	movs	r2, #10
    686e:	18ba      	adds	r2, r7, r2
    6870:	8812      	ldrh	r2, [r2, #0]
    6872:	b2d2      	uxtb	r2, r2
    6874:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    6876:	687b      	ldr	r3, [r7, #4]
    6878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    687a:	1c5a      	adds	r2, r3, #1
    687c:	687b      	ldr	r3, [r7, #4]
    687e:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    6880:	687b      	ldr	r3, [r7, #4]
    6882:	799b      	ldrb	r3, [r3, #6]
    6884:	2b01      	cmp	r3, #1
    6886:	d10d      	bne.n	68a4 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    6888:	687b      	ldr	r3, [r7, #4]
    688a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    688c:	220a      	movs	r2, #10
    688e:	18ba      	adds	r2, r7, r2
    6890:	8812      	ldrh	r2, [r2, #0]
    6892:	0a12      	lsrs	r2, r2, #8
    6894:	b292      	uxth	r2, r2
    6896:	b2d2      	uxtb	r2, r2
    6898:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    689a:	687b      	ldr	r3, [r7, #4]
    689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    689e:	1c5a      	adds	r2, r3, #1
    68a0:	687b      	ldr	r3, [r7, #4]
    68a2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    68a4:	687b      	ldr	r3, [r7, #4]
    68a6:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    68a8:	b29b      	uxth	r3, r3
    68aa:	3b01      	subs	r3, #1
    68ac:	b29a      	uxth	r2, r3
    68ae:	687b      	ldr	r3, [r7, #4]
    68b0:	861a      	strh	r2, [r3, #48]	; 0x30
}
    68b2:	46c0      	nop			; (mov r8, r8)
    68b4:	46bd      	mov	sp, r7
    68b6:	b004      	add	sp, #16
    68b8:	bd80      	pop	{r7, pc}
	...

000068bc <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    68bc:	b580      	push	{r7, lr}
    68be:	b086      	sub	sp, #24
    68c0:	af00      	add	r7, sp, #0
    68c2:	0002      	movs	r2, r0
    68c4:	1dfb      	adds	r3, r7, #7
    68c6:	701a      	strb	r2, [r3, #0]
    68c8:	499a      	ldr	r1, [pc, #616]	; (6b34 <_spi_interrupt_handler+0x278>)
    68ca:	4479      	add	r1, pc
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    68cc:	1dfb      	adds	r3, r7, #7
    68ce:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    68d0:	4b99      	ldr	r3, [pc, #612]	; (6b38 <_spi_interrupt_handler+0x27c>)
    68d2:	58cb      	ldr	r3, [r1, r3]
    68d4:	0092      	lsls	r2, r2, #2
    68d6:	58d3      	ldr	r3, [r2, r3]
    68d8:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    68da:	697b      	ldr	r3, [r7, #20]
    68dc:	681b      	ldr	r3, [r3, #0]
    68de:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    68e0:	697b      	ldr	r3, [r7, #20]
    68e2:	2237      	movs	r2, #55	; 0x37
    68e4:	5c9a      	ldrb	r2, [r3, r2]
    68e6:	697b      	ldr	r3, [r7, #20]
    68e8:	2136      	movs	r1, #54	; 0x36
    68ea:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    68ec:	230f      	movs	r3, #15
    68ee:	18fb      	adds	r3, r7, r3
    68f0:	400a      	ands	r2, r1
    68f2:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    68f4:	693b      	ldr	r3, [r7, #16]
    68f6:	7e1b      	ldrb	r3, [r3, #24]
    68f8:	b2da      	uxtb	r2, r3
    68fa:	230c      	movs	r3, #12
    68fc:	18fb      	adds	r3, r7, r3
    68fe:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    6900:	693b      	ldr	r3, [r7, #16]
    6902:	7d9b      	ldrb	r3, [r3, #22]
    6904:	b2db      	uxtb	r3, r3
    6906:	b29a      	uxth	r2, r3
    6908:	230c      	movs	r3, #12
    690a:	18fb      	adds	r3, r7, r3
    690c:	210c      	movs	r1, #12
    690e:	1879      	adds	r1, r7, r1
    6910:	8809      	ldrh	r1, [r1, #0]
    6912:	400a      	ands	r2, r1
    6914:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    6916:	230c      	movs	r3, #12
    6918:	18fb      	adds	r3, r7, r3
    691a:	881b      	ldrh	r3, [r3, #0]
    691c:	2201      	movs	r2, #1
    691e:	4013      	ands	r3, r2
    6920:	d03a      	beq.n	6998 <_spi_interrupt_handler+0xdc>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    6922:	697b      	ldr	r3, [r7, #20]
    6924:	795b      	ldrb	r3, [r3, #5]
    6926:	2b01      	cmp	r3, #1
    6928:	d111      	bne.n	694e <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
    692a:	697b      	ldr	r3, [r7, #20]
    692c:	7a5b      	ldrb	r3, [r3, #9]
    692e:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    6930:	2b00      	cmp	r3, #0
    6932:	d10c      	bne.n	694e <_spi_interrupt_handler+0x92>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    6934:	697b      	ldr	r3, [r7, #20]
    6936:	0018      	movs	r0, r3
    6938:	4b80      	ldr	r3, [pc, #512]	; (6b3c <_spi_interrupt_handler+0x280>)
    693a:	447b      	add	r3, pc
    693c:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    693e:	697b      	ldr	r3, [r7, #20]
    6940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    6942:	b29b      	uxth	r3, r3
    6944:	2b00      	cmp	r3, #0
    6946:	d102      	bne.n	694e <_spi_interrupt_handler+0x92>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    6948:	693b      	ldr	r3, [r7, #16]
    694a:	2201      	movs	r2, #1
    694c:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    694e:	697b      	ldr	r3, [r7, #20]
    6950:	795b      	ldrb	r3, [r3, #5]
		if (0
    6952:	2b01      	cmp	r3, #1
    6954:	d120      	bne.n	6998 <_spi_interrupt_handler+0xdc>
			(module->dir != SPI_DIRECTION_READ))
    6956:	697b      	ldr	r3, [r7, #20]
    6958:	7a5b      	ldrb	r3, [r3, #9]
    695a:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    695c:	2b00      	cmp	r3, #0
    695e:	d01b      	beq.n	6998 <_spi_interrupt_handler+0xdc>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    6960:	697b      	ldr	r3, [r7, #20]
    6962:	0018      	movs	r0, r3
    6964:	4b76      	ldr	r3, [pc, #472]	; (6b40 <_spi_interrupt_handler+0x284>)
    6966:	447b      	add	r3, pc
    6968:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    696a:	697b      	ldr	r3, [r7, #20]
    696c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    696e:	b29b      	uxth	r3, r3
    6970:	2b00      	cmp	r3, #0
    6972:	d111      	bne.n	6998 <_spi_interrupt_handler+0xdc>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    6974:	693b      	ldr	r3, [r7, #16]
    6976:	2201      	movs	r2, #1
    6978:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    697a:	697b      	ldr	r3, [r7, #20]
    697c:	7a5b      	ldrb	r3, [r3, #9]
    697e:	b2db      	uxtb	r3, r3
    6980:	2b01      	cmp	r3, #1
    6982:	d109      	bne.n	6998 <_spi_interrupt_handler+0xdc>
						!(module->receiver_enabled)) {
    6984:	697b      	ldr	r3, [r7, #20]
    6986:	79db      	ldrb	r3, [r3, #7]
    6988:	2201      	movs	r2, #1
    698a:	4053      	eors	r3, r2
    698c:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    698e:	2b00      	cmp	r3, #0
    6990:	d002      	beq.n	6998 <_spi_interrupt_handler+0xdc>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6992:	693b      	ldr	r3, [r7, #16]
    6994:	2202      	movs	r2, #2
    6996:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    6998:	230c      	movs	r3, #12
    699a:	18fb      	adds	r3, r7, r3
    699c:	881b      	ldrh	r3, [r3, #0]
    699e:	2204      	movs	r2, #4
    69a0:	4013      	ands	r3, r2
    69a2:	d100      	bne.n	69a6 <_spi_interrupt_handler+0xea>
    69a4:	e080      	b.n	6aa8 <_spi_interrupt_handler+0x1ec>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    69a6:	693b      	ldr	r3, [r7, #16]
    69a8:	8b5b      	ldrh	r3, [r3, #26]
    69aa:	b29b      	uxth	r3, r3
    69ac:	001a      	movs	r2, r3
    69ae:	2304      	movs	r3, #4
    69b0:	4013      	ands	r3, r2
    69b2:	d022      	beq.n	69fa <_spi_interrupt_handler+0x13e>
			if (module->dir != SPI_DIRECTION_WRITE) {
    69b4:	697b      	ldr	r3, [r7, #20]
    69b6:	7a5b      	ldrb	r3, [r3, #9]
    69b8:	b2db      	uxtb	r3, r3
    69ba:	2b01      	cmp	r3, #1
    69bc:	d014      	beq.n	69e8 <_spi_interrupt_handler+0x12c>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    69be:	697b      	ldr	r3, [r7, #20]
    69c0:	2238      	movs	r2, #56	; 0x38
    69c2:	211e      	movs	r1, #30
    69c4:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    69c6:	697b      	ldr	r3, [r7, #20]
    69c8:	2203      	movs	r2, #3
    69ca:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    69cc:	693b      	ldr	r3, [r7, #16]
    69ce:	2205      	movs	r2, #5
    69d0:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    69d2:	230f      	movs	r3, #15
    69d4:	18fb      	adds	r3, r7, r3
    69d6:	781b      	ldrb	r3, [r3, #0]
    69d8:	2208      	movs	r2, #8
    69da:	4013      	ands	r3, r2
    69dc:	d004      	beq.n	69e8 <_spi_interrupt_handler+0x12c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    69de:	697b      	ldr	r3, [r7, #20]
    69e0:	699b      	ldr	r3, [r3, #24]
    69e2:	697a      	ldr	r2, [r7, #20]
    69e4:	0010      	movs	r0, r2
    69e6:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    69e8:	693b      	ldr	r3, [r7, #16]
    69ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    69ec:	230a      	movs	r3, #10
    69ee:	18fb      	adds	r3, r7, r3
    69f0:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    69f2:	693b      	ldr	r3, [r7, #16]
    69f4:	2204      	movs	r2, #4
    69f6:	835a      	strh	r2, [r3, #26]
    69f8:	e056      	b.n	6aa8 <_spi_interrupt_handler+0x1ec>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    69fa:	697b      	ldr	r3, [r7, #20]
    69fc:	7a5b      	ldrb	r3, [r3, #9]
    69fe:	b2db      	uxtb	r3, r3
    6a00:	2b01      	cmp	r3, #1
    6a02:	d11f      	bne.n	6a44 <_spi_interrupt_handler+0x188>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    6a04:	697b      	ldr	r3, [r7, #20]
    6a06:	0018      	movs	r0, r3
    6a08:	4b4e      	ldr	r3, [pc, #312]	; (6b44 <_spi_interrupt_handler+0x288>)
    6a0a:	447b      	add	r3, pc
    6a0c:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    6a0e:	697b      	ldr	r3, [r7, #20]
    6a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    6a12:	b29b      	uxth	r3, r3
    6a14:	2b00      	cmp	r3, #0
    6a16:	d147      	bne.n	6aa8 <_spi_interrupt_handler+0x1ec>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    6a18:	693b      	ldr	r3, [r7, #16]
    6a1a:	2204      	movs	r2, #4
    6a1c:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    6a1e:	697b      	ldr	r3, [r7, #20]
    6a20:	2238      	movs	r2, #56	; 0x38
    6a22:	2100      	movs	r1, #0
    6a24:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    6a26:	697b      	ldr	r3, [r7, #20]
    6a28:	2203      	movs	r2, #3
    6a2a:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    6a2c:	230f      	movs	r3, #15
    6a2e:	18fb      	adds	r3, r7, r3
    6a30:	781b      	ldrb	r3, [r3, #0]
    6a32:	2201      	movs	r2, #1
    6a34:	4013      	ands	r3, r2
    6a36:	d037      	beq.n	6aa8 <_spi_interrupt_handler+0x1ec>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    6a38:	697b      	ldr	r3, [r7, #20]
    6a3a:	68db      	ldr	r3, [r3, #12]
    6a3c:	697a      	ldr	r2, [r7, #20]
    6a3e:	0010      	movs	r0, r2
    6a40:	4798      	blx	r3
    6a42:	e031      	b.n	6aa8 <_spi_interrupt_handler+0x1ec>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    6a44:	697b      	ldr	r3, [r7, #20]
    6a46:	0018      	movs	r0, r3
    6a48:	4b3f      	ldr	r3, [pc, #252]	; (6b48 <_spi_interrupt_handler+0x28c>)
    6a4a:	447b      	add	r3, pc
    6a4c:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    6a4e:	697b      	ldr	r3, [r7, #20]
    6a50:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    6a52:	b29b      	uxth	r3, r3
    6a54:	2b00      	cmp	r3, #0
    6a56:	d127      	bne.n	6aa8 <_spi_interrupt_handler+0x1ec>
					module->status = STATUS_OK;
    6a58:	697b      	ldr	r3, [r7, #20]
    6a5a:	2238      	movs	r2, #56	; 0x38
    6a5c:	2100      	movs	r1, #0
    6a5e:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    6a60:	693b      	ldr	r3, [r7, #16]
    6a62:	2204      	movs	r2, #4
    6a64:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    6a66:	697b      	ldr	r3, [r7, #20]
    6a68:	7a5b      	ldrb	r3, [r3, #9]
    6a6a:	b2db      	uxtb	r3, r3
    6a6c:	2b02      	cmp	r3, #2
    6a6e:	d10b      	bne.n	6a88 <_spi_interrupt_handler+0x1cc>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    6a70:	230f      	movs	r3, #15
    6a72:	18fb      	adds	r3, r7, r3
    6a74:	781b      	ldrb	r3, [r3, #0]
    6a76:	2204      	movs	r2, #4
    6a78:	4013      	ands	r3, r2
    6a7a:	d015      	beq.n	6aa8 <_spi_interrupt_handler+0x1ec>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    6a7c:	697b      	ldr	r3, [r7, #20]
    6a7e:	695b      	ldr	r3, [r3, #20]
    6a80:	697a      	ldr	r2, [r7, #20]
    6a82:	0010      	movs	r0, r2
    6a84:	4798      	blx	r3
    6a86:	e00f      	b.n	6aa8 <_spi_interrupt_handler+0x1ec>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    6a88:	697b      	ldr	r3, [r7, #20]
    6a8a:	7a5b      	ldrb	r3, [r3, #9]
    6a8c:	b2db      	uxtb	r3, r3
    6a8e:	2b00      	cmp	r3, #0
    6a90:	d10a      	bne.n	6aa8 <_spi_interrupt_handler+0x1ec>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    6a92:	230f      	movs	r3, #15
    6a94:	18fb      	adds	r3, r7, r3
    6a96:	781b      	ldrb	r3, [r3, #0]
    6a98:	2202      	movs	r2, #2
    6a9a:	4013      	ands	r3, r2
    6a9c:	d004      	beq.n	6aa8 <_spi_interrupt_handler+0x1ec>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    6a9e:	697b      	ldr	r3, [r7, #20]
    6aa0:	691b      	ldr	r3, [r3, #16]
    6aa2:	697a      	ldr	r2, [r7, #20]
    6aa4:	0010      	movs	r0, r2
    6aa6:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    6aa8:	230c      	movs	r3, #12
    6aaa:	18fb      	adds	r3, r7, r3
    6aac:	881b      	ldrh	r3, [r3, #0]
    6aae:	2202      	movs	r2, #2
    6ab0:	4013      	ands	r3, r2
    6ab2:	d024      	beq.n	6afe <_spi_interrupt_handler+0x242>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    6ab4:	697b      	ldr	r3, [r7, #20]
    6ab6:	795b      	ldrb	r3, [r3, #5]
    6ab8:	2b01      	cmp	r3, #1
    6aba:	d120      	bne.n	6afe <_spi_interrupt_handler+0x242>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    6abc:	697b      	ldr	r3, [r7, #20]
    6abe:	7a5b      	ldrb	r3, [r3, #9]
    6ac0:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    6ac2:	2b01      	cmp	r3, #1
    6ac4:	d11b      	bne.n	6afe <_spi_interrupt_handler+0x242>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    6ac6:	697b      	ldr	r3, [r7, #20]
    6ac8:	79db      	ldrb	r3, [r3, #7]
    6aca:	2201      	movs	r2, #1
    6acc:	4053      	eors	r3, r2
    6ace:	b2db      	uxtb	r3, r3
    6ad0:	2b00      	cmp	r3, #0
    6ad2:	d014      	beq.n	6afe <_spi_interrupt_handler+0x242>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    6ad4:	693b      	ldr	r3, [r7, #16]
    6ad6:	2202      	movs	r2, #2
    6ad8:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    6ada:	697b      	ldr	r3, [r7, #20]
    6adc:	2203      	movs	r2, #3
    6ade:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    6ae0:	697b      	ldr	r3, [r7, #20]
    6ae2:	2238      	movs	r2, #56	; 0x38
    6ae4:	2100      	movs	r1, #0
    6ae6:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    6ae8:	230f      	movs	r3, #15
    6aea:	18fb      	adds	r3, r7, r3
    6aec:	781b      	ldrb	r3, [r3, #0]
    6aee:	2201      	movs	r2, #1
    6af0:	4013      	ands	r3, r2
    6af2:	d004      	beq.n	6afe <_spi_interrupt_handler+0x242>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    6af4:	697b      	ldr	r3, [r7, #20]
    6af6:	68db      	ldr	r3, [r3, #12]
    6af8:	697a      	ldr	r2, [r7, #20]
    6afa:	0010      	movs	r0, r2
    6afc:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    6afe:	230c      	movs	r3, #12
    6b00:	18fb      	adds	r3, r7, r3
    6b02:	881b      	ldrh	r3, [r3, #0]
    6b04:	2280      	movs	r2, #128	; 0x80
    6b06:	4013      	ands	r3, r2
    6b08:	d010      	beq.n	6b2c <_spi_interrupt_handler+0x270>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    6b0a:	693b      	ldr	r3, [r7, #16]
    6b0c:	2280      	movs	r2, #128	; 0x80
    6b0e:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    6b10:	693b      	ldr	r3, [r7, #16]
    6b12:	2280      	movs	r2, #128	; 0x80
    6b14:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    6b16:	230f      	movs	r3, #15
    6b18:	18fb      	adds	r3, r7, r3
    6b1a:	781b      	ldrb	r3, [r3, #0]
    6b1c:	2240      	movs	r2, #64	; 0x40
    6b1e:	4013      	ands	r3, r2
    6b20:	d004      	beq.n	6b2c <_spi_interrupt_handler+0x270>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    6b22:	697b      	ldr	r3, [r7, #20]
    6b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6b26:	697a      	ldr	r2, [r7, #20]
    6b28:	0010      	movs	r0, r2
    6b2a:	4798      	blx	r3
		}
	}
#  endif
}
    6b2c:	46c0      	nop			; (mov r8, r8)
    6b2e:	46bd      	mov	sp, r7
    6b30:	b006      	add	sp, #24
    6b32:	bd80      	pop	{r7, pc}
    6b34:	0000b506 	.word	0x0000b506
    6b38:	00000158 	.word	0x00000158
    6b3c:	fffffe9b 	.word	0xfffffe9b
    6b40:	fffffdf3 	.word	0xfffffdf3
    6b44:	fffffe07 	.word	0xfffffe07
    6b48:	fffffdfd 	.word	0xfffffdfd

00006b4c <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    6b4c:	b580      	push	{r7, lr}
    6b4e:	b082      	sub	sp, #8
    6b50:	af00      	add	r7, sp, #0
    6b52:	0002      	movs	r2, r0
    6b54:	1dfb      	adds	r3, r7, #7
    6b56:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    6b58:	46c0      	nop			; (mov r8, r8)
    6b5a:	46bd      	mov	sp, r7
    6b5c:	b002      	add	sp, #8
    6b5e:	bd80      	pop	{r7, pc}

00006b60 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    6b60:	b580      	push	{r7, lr}
    6b62:	b084      	sub	sp, #16
    6b64:	af00      	add	r7, sp, #0
    6b66:	0002      	movs	r2, r0
    6b68:	6039      	str	r1, [r7, #0]
    6b6a:	1dfb      	adds	r3, r7, #7
    6b6c:	701a      	strb	r2, [r3, #0]
    6b6e:	4a17      	ldr	r2, [pc, #92]	; (6bcc <_sercom_set_handler+0x6c>)
    6b70:	447a      	add	r2, pc
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    6b72:	4b17      	ldr	r3, [pc, #92]	; (6bd0 <_sercom_set_handler+0x70>)
    6b74:	447b      	add	r3, pc
    6b76:	781b      	ldrb	r3, [r3, #0]
    6b78:	2101      	movs	r1, #1
    6b7a:	404b      	eors	r3, r1
    6b7c:	b2db      	uxtb	r3, r3
    6b7e:	2b00      	cmp	r3, #0
    6b80:	d019      	beq.n	6bb6 <_sercom_set_handler+0x56>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6b82:	2300      	movs	r3, #0
    6b84:	60fb      	str	r3, [r7, #12]
    6b86:	e00f      	b.n	6ba8 <_sercom_set_handler+0x48>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    6b88:	4b12      	ldr	r3, [pc, #72]	; (6bd4 <_sercom_set_handler+0x74>)
    6b8a:	447b      	add	r3, pc
    6b8c:	68f9      	ldr	r1, [r7, #12]
    6b8e:	0089      	lsls	r1, r1, #2
    6b90:	4811      	ldr	r0, [pc, #68]	; (6bd8 <_sercom_set_handler+0x78>)
    6b92:	4478      	add	r0, pc
    6b94:	50c8      	str	r0, [r1, r3]
			_sercom_instances[i] = NULL;
    6b96:	4b11      	ldr	r3, [pc, #68]	; (6bdc <_sercom_set_handler+0x7c>)
    6b98:	58d3      	ldr	r3, [r2, r3]
    6b9a:	68f9      	ldr	r1, [r7, #12]
    6b9c:	0089      	lsls	r1, r1, #2
    6b9e:	2000      	movs	r0, #0
    6ba0:	50c8      	str	r0, [r1, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    6ba2:	68fb      	ldr	r3, [r7, #12]
    6ba4:	3301      	adds	r3, #1
    6ba6:	60fb      	str	r3, [r7, #12]
    6ba8:	68fb      	ldr	r3, [r7, #12]
    6baa:	2b05      	cmp	r3, #5
    6bac:	d9ec      	bls.n	6b88 <_sercom_set_handler+0x28>
		}

		_handler_table_initialized = true;
    6bae:	4b0c      	ldr	r3, [pc, #48]	; (6be0 <_sercom_set_handler+0x80>)
    6bb0:	447b      	add	r3, pc
    6bb2:	2201      	movs	r2, #1
    6bb4:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    6bb6:	1dfb      	adds	r3, r7, #7
    6bb8:	781a      	ldrb	r2, [r3, #0]
    6bba:	4b0a      	ldr	r3, [pc, #40]	; (6be4 <_sercom_set_handler+0x84>)
    6bbc:	447b      	add	r3, pc
    6bbe:	0092      	lsls	r2, r2, #2
    6bc0:	6839      	ldr	r1, [r7, #0]
    6bc2:	50d1      	str	r1, [r2, r3]
}
    6bc4:	46c0      	nop			; (mov r8, r8)
    6bc6:	46bd      	mov	sp, r7
    6bc8:	b004      	add	sp, #16
    6bca:	bd80      	pop	{r7, pc}
    6bcc:	0000b260 	.word	0x0000b260
    6bd0:	1fff99b2 	.word	0x1fff99b2
    6bd4:	1fff999e 	.word	0x1fff999e
    6bd8:	ffffffb7 	.word	0xffffffb7
    6bdc:	00000158 	.word	0x00000158
    6be0:	1fff9976 	.word	0x1fff9976
    6be4:	1fff996c 	.word	0x1fff996c

00006be8 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    6be8:	b5b0      	push	{r4, r5, r7, lr}
    6bea:	b084      	sub	sp, #16
    6bec:	af00      	add	r7, sp, #0
    6bee:	6078      	str	r0, [r7, #4]
    6bf0:	4c10      	ldr	r4, [pc, #64]	; (6c34 <_sercom_get_interrupt_vector+0x4c>)
    6bf2:	447c      	add	r4, pc
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    6bf4:	2308      	movs	r3, #8
    6bf6:	18fa      	adds	r2, r7, r3
    6bf8:	4b0f      	ldr	r3, [pc, #60]	; (6c38 <_sercom_get_interrupt_vector+0x50>)
    6bfa:	447b      	add	r3, pc
    6bfc:	0010      	movs	r0, r2
    6bfe:	0019      	movs	r1, r3
    6c00:	2306      	movs	r3, #6
    6c02:	001a      	movs	r2, r3
    6c04:	4b0d      	ldr	r3, [pc, #52]	; (6c3c <_sercom_get_interrupt_vector+0x54>)
    6c06:	58e3      	ldr	r3, [r4, r3]
    6c08:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    6c0a:	230f      	movs	r3, #15
    6c0c:	18fd      	adds	r5, r7, r3
    6c0e:	687b      	ldr	r3, [r7, #4]
    6c10:	0018      	movs	r0, r3
    6c12:	4b0b      	ldr	r3, [pc, #44]	; (6c40 <_sercom_get_interrupt_vector+0x58>)
    6c14:	58e3      	ldr	r3, [r4, r3]
    6c16:	4798      	blx	r3
    6c18:	0003      	movs	r3, r0
    6c1a:	702b      	strb	r3, [r5, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    6c1c:	230f      	movs	r3, #15
    6c1e:	18fb      	adds	r3, r7, r3
    6c20:	781b      	ldrb	r3, [r3, #0]
    6c22:	2208      	movs	r2, #8
    6c24:	18ba      	adds	r2, r7, r2
    6c26:	5cd3      	ldrb	r3, [r2, r3]
    6c28:	b25b      	sxtb	r3, r3
}
    6c2a:	0018      	movs	r0, r3
    6c2c:	46bd      	mov	sp, r7
    6c2e:	b004      	add	sp, #16
    6c30:	bdb0      	pop	{r4, r5, r7, pc}
    6c32:	46c0      	nop			; (mov r8, r8)
    6c34:	0000b1de 	.word	0x0000b1de
    6c38:	0000b0d6 	.word	0x0000b0d6
    6c3c:	0000008c 	.word	0x0000008c
    6c40:	000002ac 	.word	0x000002ac

00006c44 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    6c44:	b580      	push	{r7, lr}
    6c46:	af00      	add	r7, sp, #0
    6c48:	4b03      	ldr	r3, [pc, #12]	; (6c58 <SERCOM0_Handler+0x14>)
    6c4a:	447b      	add	r3, pc
    6c4c:	681b      	ldr	r3, [r3, #0]
    6c4e:	2000      	movs	r0, #0
    6c50:	4798      	blx	r3
    6c52:	46c0      	nop			; (mov r8, r8)
    6c54:	46bd      	mov	sp, r7
    6c56:	bd80      	pop	{r7, pc}
    6c58:	1fff98de 	.word	0x1fff98de

00006c5c <SERCOM1_Handler>:
    6c5c:	b580      	push	{r7, lr}
    6c5e:	af00      	add	r7, sp, #0
    6c60:	4b03      	ldr	r3, [pc, #12]	; (6c70 <SERCOM1_Handler+0x14>)
    6c62:	447b      	add	r3, pc
    6c64:	685b      	ldr	r3, [r3, #4]
    6c66:	2001      	movs	r0, #1
    6c68:	4798      	blx	r3
    6c6a:	46c0      	nop			; (mov r8, r8)
    6c6c:	46bd      	mov	sp, r7
    6c6e:	bd80      	pop	{r7, pc}
    6c70:	1fff98c6 	.word	0x1fff98c6

00006c74 <SERCOM2_Handler>:
    6c74:	b580      	push	{r7, lr}
    6c76:	af00      	add	r7, sp, #0
    6c78:	4b03      	ldr	r3, [pc, #12]	; (6c88 <SERCOM2_Handler+0x14>)
    6c7a:	447b      	add	r3, pc
    6c7c:	689b      	ldr	r3, [r3, #8]
    6c7e:	2002      	movs	r0, #2
    6c80:	4798      	blx	r3
    6c82:	46c0      	nop			; (mov r8, r8)
    6c84:	46bd      	mov	sp, r7
    6c86:	bd80      	pop	{r7, pc}
    6c88:	1fff98ae 	.word	0x1fff98ae

00006c8c <SERCOM3_Handler>:
    6c8c:	b580      	push	{r7, lr}
    6c8e:	af00      	add	r7, sp, #0
    6c90:	4b03      	ldr	r3, [pc, #12]	; (6ca0 <SERCOM3_Handler+0x14>)
    6c92:	447b      	add	r3, pc
    6c94:	68db      	ldr	r3, [r3, #12]
    6c96:	2003      	movs	r0, #3
    6c98:	4798      	blx	r3
    6c9a:	46c0      	nop			; (mov r8, r8)
    6c9c:	46bd      	mov	sp, r7
    6c9e:	bd80      	pop	{r7, pc}
    6ca0:	1fff9896 	.word	0x1fff9896

00006ca4 <SERCOM4_Handler>:
    6ca4:	b580      	push	{r7, lr}
    6ca6:	af00      	add	r7, sp, #0
    6ca8:	4b03      	ldr	r3, [pc, #12]	; (6cb8 <SERCOM4_Handler+0x14>)
    6caa:	447b      	add	r3, pc
    6cac:	691b      	ldr	r3, [r3, #16]
    6cae:	2004      	movs	r0, #4
    6cb0:	4798      	blx	r3
    6cb2:	46c0      	nop			; (mov r8, r8)
    6cb4:	46bd      	mov	sp, r7
    6cb6:	bd80      	pop	{r7, pc}
    6cb8:	1fff987e 	.word	0x1fff987e

00006cbc <SERCOM5_Handler>:
    6cbc:	b580      	push	{r7, lr}
    6cbe:	af00      	add	r7, sp, #0
    6cc0:	4b03      	ldr	r3, [pc, #12]	; (6cd0 <SERCOM5_Handler+0x14>)
    6cc2:	447b      	add	r3, pc
    6cc4:	695b      	ldr	r3, [r3, #20]
    6cc6:	2005      	movs	r0, #5
    6cc8:	4798      	blx	r3
    6cca:	46c0      	nop			; (mov r8, r8)
    6ccc:	46bd      	mov	sp, r7
    6cce:	bd80      	pop	{r7, pc}
    6cd0:	1fff9866 	.word	0x1fff9866

00006cd4 <_extint_get_eic_from_channel>:
{
    6cd4:	b580      	push	{r7, lr}
    6cd6:	b084      	sub	sp, #16
    6cd8:	af00      	add	r7, sp, #0
    6cda:	0002      	movs	r2, r0
    6cdc:	1dfb      	adds	r3, r7, #7
    6cde:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6ce0:	230f      	movs	r3, #15
    6ce2:	18fb      	adds	r3, r7, r3
    6ce4:	1dfa      	adds	r2, r7, #7
    6ce6:	7812      	ldrb	r2, [r2, #0]
    6ce8:	0952      	lsrs	r2, r2, #5
    6cea:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    6cec:	230f      	movs	r3, #15
    6cee:	18fb      	adds	r3, r7, r3
    6cf0:	781b      	ldrb	r3, [r3, #0]
    6cf2:	2b00      	cmp	r3, #0
    6cf4:	d10c      	bne.n	6d10 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6cf6:	4b09      	ldr	r3, [pc, #36]	; (6d1c <_extint_get_eic_from_channel+0x48>)
    6cf8:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    6cfa:	230f      	movs	r3, #15
    6cfc:	18fb      	adds	r3, r7, r3
    6cfe:	781b      	ldrb	r3, [r3, #0]
    6d00:	009b      	lsls	r3, r3, #2
    6d02:	2210      	movs	r2, #16
    6d04:	4694      	mov	ip, r2
    6d06:	44bc      	add	ip, r7
    6d08:	4463      	add	r3, ip
    6d0a:	3b08      	subs	r3, #8
    6d0c:	681b      	ldr	r3, [r3, #0]
    6d0e:	e000      	b.n	6d12 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    6d10:	2300      	movs	r3, #0
}
    6d12:	0018      	movs	r0, r3
    6d14:	46bd      	mov	sp, r7
    6d16:	b004      	add	sp, #16
    6d18:	bd80      	pop	{r7, pc}
    6d1a:	46c0      	nop			; (mov r8, r8)
    6d1c:	40001800 	.word	0x40001800

00006d20 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    6d20:	b580      	push	{r7, lr}
    6d22:	b084      	sub	sp, #16
    6d24:	af00      	add	r7, sp, #0
    6d26:	0002      	movs	r2, r0
    6d28:	1dfb      	adds	r3, r7, #7
    6d2a:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6d2c:	1dfb      	adds	r3, r7, #7
    6d2e:	781b      	ldrb	r3, [r3, #0]
    6d30:	0018      	movs	r0, r3
    6d32:	4b0c      	ldr	r3, [pc, #48]	; (6d64 <extint_chan_is_detected+0x44>)
    6d34:	447b      	add	r3, pc
    6d36:	4798      	blx	r3
    6d38:	0003      	movs	r3, r0
    6d3a:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    6d3c:	1dfb      	adds	r3, r7, #7
    6d3e:	781b      	ldrb	r3, [r3, #0]
    6d40:	221f      	movs	r2, #31
    6d42:	4013      	ands	r3, r2
    6d44:	2201      	movs	r2, #1
    6d46:	409a      	lsls	r2, r3
    6d48:	0013      	movs	r3, r2
    6d4a:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    6d4c:	68fb      	ldr	r3, [r7, #12]
    6d4e:	691b      	ldr	r3, [r3, #16]
    6d50:	68ba      	ldr	r2, [r7, #8]
    6d52:	4013      	ands	r3, r2
    6d54:	1e5a      	subs	r2, r3, #1
    6d56:	4193      	sbcs	r3, r2
    6d58:	b2db      	uxtb	r3, r3
}
    6d5a:	0018      	movs	r0, r3
    6d5c:	46bd      	mov	sp, r7
    6d5e:	b004      	add	sp, #16
    6d60:	bd80      	pop	{r7, pc}
    6d62:	46c0      	nop			; (mov r8, r8)
    6d64:	ffffff9d 	.word	0xffffff9d

00006d68 <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    6d68:	b580      	push	{r7, lr}
    6d6a:	b084      	sub	sp, #16
    6d6c:	af00      	add	r7, sp, #0
    6d6e:	0002      	movs	r2, r0
    6d70:	1dfb      	adds	r3, r7, #7
    6d72:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6d74:	1dfb      	adds	r3, r7, #7
    6d76:	781b      	ldrb	r3, [r3, #0]
    6d78:	0018      	movs	r0, r3
    6d7a:	4b0a      	ldr	r3, [pc, #40]	; (6da4 <extint_chan_clear_detected+0x3c>)
    6d7c:	447b      	add	r3, pc
    6d7e:	4798      	blx	r3
    6d80:	0003      	movs	r3, r0
    6d82:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    6d84:	1dfb      	adds	r3, r7, #7
    6d86:	781b      	ldrb	r3, [r3, #0]
    6d88:	221f      	movs	r2, #31
    6d8a:	4013      	ands	r3, r2
    6d8c:	2201      	movs	r2, #1
    6d8e:	409a      	lsls	r2, r3
    6d90:	0013      	movs	r3, r2
    6d92:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    6d94:	68fb      	ldr	r3, [r7, #12]
    6d96:	68ba      	ldr	r2, [r7, #8]
    6d98:	611a      	str	r2, [r3, #16]
}
    6d9a:	46c0      	nop			; (mov r8, r8)
    6d9c:	46bd      	mov	sp, r7
    6d9e:	b004      	add	sp, #16
    6da0:	bd80      	pop	{r7, pc}
    6da2:	46c0      	nop			; (mov r8, r8)
    6da4:	ffffff55 	.word	0xffffff55

00006da8 <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    6da8:	b580      	push	{r7, lr}
    6daa:	b084      	sub	sp, #16
    6dac:	af00      	add	r7, sp, #0
    6dae:	0002      	movs	r2, r0
    6db0:	1dfb      	adds	r3, r7, #7
    6db2:	701a      	strb	r2, [r3, #0]
    6db4:	1dbb      	adds	r3, r7, #6
    6db6:	1c0a      	adds	r2, r1, #0
    6db8:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6dba:	1dbb      	adds	r3, r7, #6
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	2b00      	cmp	r3, #0
    6dc0:	d10f      	bne.n	6de2 <extint_chan_enable_callback+0x3a>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    6dc2:	1dfb      	adds	r3, r7, #7
    6dc4:	781b      	ldrb	r3, [r3, #0]
    6dc6:	0018      	movs	r0, r3
    6dc8:	4b08      	ldr	r3, [pc, #32]	; (6dec <extint_chan_enable_callback+0x44>)
    6dca:	447b      	add	r3, pc
    6dcc:	4798      	blx	r3
    6dce:	0003      	movs	r3, r0
    6dd0:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    6dd2:	1dfb      	adds	r3, r7, #7
    6dd4:	781b      	ldrb	r3, [r3, #0]
    6dd6:	2201      	movs	r2, #1
    6dd8:	409a      	lsls	r2, r3
    6dda:	68fb      	ldr	r3, [r7, #12]
    6ddc:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    6dde:	2300      	movs	r3, #0
    6de0:	e000      	b.n	6de4 <extint_chan_enable_callback+0x3c>
		return STATUS_ERR_INVALID_ARG;
    6de2:	2317      	movs	r3, #23
}
    6de4:	0018      	movs	r0, r3
    6de6:	46bd      	mov	sp, r7
    6de8:	b004      	add	sp, #16
    6dea:	bd80      	pop	{r7, pc}
    6dec:	ffffff07 	.word	0xffffff07

00006df0 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6df0:	b5b0      	push	{r4, r5, r7, lr}
    6df2:	af00      	add	r7, sp, #0
    6df4:	4c1c      	ldr	r4, [pc, #112]	; (6e68 <EIC_Handler+0x78>)
    6df6:	447c      	add	r4, pc
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6df8:	4b1c      	ldr	r3, [pc, #112]	; (6e6c <EIC_Handler+0x7c>)
    6dfa:	58e3      	ldr	r3, [r4, r3]
    6dfc:	2200      	movs	r2, #0
    6dfe:	701a      	strb	r2, [r3, #0]
    6e00:	e02a      	b.n	6e58 <EIC_Handler+0x68>
		if (extint_chan_is_detected(_current_channel)) {
    6e02:	4b1a      	ldr	r3, [pc, #104]	; (6e6c <EIC_Handler+0x7c>)
    6e04:	58e3      	ldr	r3, [r4, r3]
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	0018      	movs	r0, r3
    6e0a:	4b19      	ldr	r3, [pc, #100]	; (6e70 <EIC_Handler+0x80>)
    6e0c:	447b      	add	r3, pc
    6e0e:	4798      	blx	r3
    6e10:	1e03      	subs	r3, r0, #0
    6e12:	d019      	beq.n	6e48 <EIC_Handler+0x58>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    6e14:	4b15      	ldr	r3, [pc, #84]	; (6e6c <EIC_Handler+0x7c>)
    6e16:	58e3      	ldr	r3, [r4, r3]
    6e18:	781b      	ldrb	r3, [r3, #0]
    6e1a:	0018      	movs	r0, r3
    6e1c:	4b15      	ldr	r3, [pc, #84]	; (6e74 <EIC_Handler+0x84>)
    6e1e:	447b      	add	r3, pc
    6e20:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6e22:	4b12      	ldr	r3, [pc, #72]	; (6e6c <EIC_Handler+0x7c>)
    6e24:	58e3      	ldr	r3, [r4, r3]
    6e26:	781b      	ldrb	r3, [r3, #0]
    6e28:	001a      	movs	r2, r3
    6e2a:	4b13      	ldr	r3, [pc, #76]	; (6e78 <EIC_Handler+0x88>)
    6e2c:	58e3      	ldr	r3, [r4, r3]
    6e2e:	0092      	lsls	r2, r2, #2
    6e30:	58d3      	ldr	r3, [r2, r3]
    6e32:	2b00      	cmp	r3, #0
    6e34:	d008      	beq.n	6e48 <EIC_Handler+0x58>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    6e36:	4b0d      	ldr	r3, [pc, #52]	; (6e6c <EIC_Handler+0x7c>)
    6e38:	58e3      	ldr	r3, [r4, r3]
    6e3a:	781b      	ldrb	r3, [r3, #0]
    6e3c:	001a      	movs	r2, r3
    6e3e:	4b0e      	ldr	r3, [pc, #56]	; (6e78 <EIC_Handler+0x88>)
    6e40:	58e3      	ldr	r3, [r4, r3]
    6e42:	0092      	lsls	r2, r2, #2
    6e44:	58d3      	ldr	r3, [r2, r3]
    6e46:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6e48:	4b08      	ldr	r3, [pc, #32]	; (6e6c <EIC_Handler+0x7c>)
    6e4a:	58e3      	ldr	r3, [r4, r3]
    6e4c:	781b      	ldrb	r3, [r3, #0]
    6e4e:	3301      	adds	r3, #1
    6e50:	b2da      	uxtb	r2, r3
    6e52:	4b06      	ldr	r3, [pc, #24]	; (6e6c <EIC_Handler+0x7c>)
    6e54:	58e3      	ldr	r3, [r4, r3]
    6e56:	701a      	strb	r2, [r3, #0]
    6e58:	4b04      	ldr	r3, [pc, #16]	; (6e6c <EIC_Handler+0x7c>)
    6e5a:	58e3      	ldr	r3, [r4, r3]
    6e5c:	781b      	ldrb	r3, [r3, #0]
    6e5e:	2b0f      	cmp	r3, #15
    6e60:	d9cf      	bls.n	6e02 <EIC_Handler+0x12>
			}
		}
	}
}
    6e62:	46c0      	nop			; (mov r8, r8)
    6e64:	46bd      	mov	sp, r7
    6e66:	bdb0      	pop	{r4, r5, r7, pc}
    6e68:	0000afda 	.word	0x0000afda
    6e6c:	000001ec 	.word	0x000001ec
    6e70:	ffffff11 	.word	0xffffff11
    6e74:	ffffff47 	.word	0xffffff47
    6e78:	0000017c 	.word	0x0000017c

00006e7c <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
    6e7c:	b580      	push	{r7, lr}
    6e7e:	b084      	sub	sp, #16
    6e80:	af00      	add	r7, sp, #0
    6e82:	0002      	movs	r2, r0
    6e84:	6039      	str	r1, [r7, #0]
    6e86:	1dfb      	adds	r3, r7, #7
    6e88:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(conf);

	uint32_t temp = 0;
    6e8a:	2300      	movs	r3, #0
    6e8c:	60fb      	str	r3, [r7, #12]

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    6e8e:	4b2b      	ldr	r3, [pc, #172]	; (6f3c <bod_set_config+0xc0>)
    6e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6e92:	2202      	movs	r2, #2
    6e94:	4013      	ands	r3, r2
    6e96:	d005      	beq.n	6ea4 <bod_set_config+0x28>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    6e98:	4b28      	ldr	r3, [pc, #160]	; (6f3c <bod_set_config+0xc0>)
    6e9a:	4a28      	ldr	r2, [pc, #160]	; (6f3c <bod_set_config+0xc0>)
    6e9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    6e9e:	2102      	movs	r1, #2
    6ea0:	438a      	bics	r2, r1
    6ea2:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    6ea4:	683b      	ldr	r3, [r7, #0]
    6ea6:	881b      	ldrh	r3, [r3, #0]
    6ea8:	001a      	movs	r2, r3
    6eaa:	683b      	ldr	r3, [r7, #0]
    6eac:	791b      	ldrb	r3, [r3, #4]
    6eae:	4313      	orrs	r3, r2
			(uint32_t)conf->mode;
    6eb0:	683a      	ldr	r2, [r7, #0]
    6eb2:	8852      	ldrh	r2, [r2, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    6eb4:	4313      	orrs	r3, r2
    6eb6:	68fa      	ldr	r2, [r7, #12]
    6eb8:	4313      	orrs	r3, r2
    6eba:	60fb      	str	r3, [r7, #12]

	if (conf->mode == BOD_MODE_SAMPLED) {
    6ebc:	683b      	ldr	r3, [r7, #0]
    6ebe:	885a      	ldrh	r2, [r3, #2]
    6ec0:	2380      	movs	r3, #128	; 0x80
    6ec2:	005b      	lsls	r3, r3, #1
    6ec4:	429a      	cmp	r2, r3
    6ec6:	d104      	bne.n	6ed2 <bod_set_config+0x56>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
    6ec8:	68fb      	ldr	r3, [r7, #12]
    6eca:	2280      	movs	r2, #128	; 0x80
    6ecc:	0092      	lsls	r2, r2, #2
    6ece:	4313      	orrs	r3, r2
    6ed0:	60fb      	str	r3, [r7, #12]
	}

	if (conf->hysteresis == true) {
    6ed2:	683b      	ldr	r3, [r7, #0]
    6ed4:	799b      	ldrb	r3, [r3, #6]
    6ed6:	2b00      	cmp	r3, #0
    6ed8:	d003      	beq.n	6ee2 <bod_set_config+0x66>
		temp |= SYSCTRL_BOD33_HYST;
    6eda:	68fb      	ldr	r3, [r7, #12]
    6edc:	2204      	movs	r2, #4
    6ede:	4313      	orrs	r3, r2
    6ee0:	60fb      	str	r3, [r7, #12]
	}

	if (conf->run_in_standby == true) {
    6ee2:	683b      	ldr	r3, [r7, #0]
    6ee4:	79db      	ldrb	r3, [r3, #7]
    6ee6:	2b00      	cmp	r3, #0
    6ee8:	d003      	beq.n	6ef2 <bod_set_config+0x76>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    6eea:	68fb      	ldr	r3, [r7, #12]
    6eec:	2240      	movs	r2, #64	; 0x40
    6eee:	4313      	orrs	r3, r2
    6ef0:	60fb      	str	r3, [r7, #12]
	}

	switch (bod_id) {
    6ef2:	1dfb      	adds	r3, r7, #7
    6ef4:	781b      	ldrb	r3, [r3, #0]
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	d118      	bne.n	6f2c <bod_set_config+0xb0>
		case BOD_BOD33:
			if (conf->level > 0x3F) {
    6efa:	683b      	ldr	r3, [r7, #0]
    6efc:	795b      	ldrb	r3, [r3, #5]
    6efe:	2b3f      	cmp	r3, #63	; 0x3f
    6f00:	d901      	bls.n	6f06 <bod_set_config+0x8a>
				return STATUS_ERR_INVALID_ARG;
    6f02:	2317      	movs	r3, #23
    6f04:	e015      	b.n	6f32 <bod_set_config+0xb6>
			}

			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    6f06:	4b0d      	ldr	r3, [pc, #52]	; (6f3c <bod_set_config+0xc0>)
    6f08:	683a      	ldr	r2, [r7, #0]
    6f0a:	7952      	ldrb	r2, [r2, #5]
    6f0c:	0412      	lsls	r2, r2, #16
    6f0e:	0011      	movs	r1, r2
    6f10:	22fc      	movs	r2, #252	; 0xfc
    6f12:	0392      	lsls	r2, r2, #14
    6f14:	4011      	ands	r1, r2
    6f16:	68fa      	ldr	r2, [r7, #12]
    6f18:	430a      	orrs	r2, r1
    6f1a:	635a      	str	r2, [r3, #52]	; 0x34

			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    6f1c:	46c0      	nop			; (mov r8, r8)
    6f1e:	4b07      	ldr	r3, [pc, #28]	; (6f3c <bod_set_config+0xc0>)
    6f20:	68da      	ldr	r2, [r3, #12]
    6f22:	2380      	movs	r3, #128	; 0x80
    6f24:	011b      	lsls	r3, r3, #4
    6f26:	4013      	ands	r3, r2
    6f28:	d0f9      	beq.n	6f1e <bod_set_config+0xa2>
				/* Wait for BOD33 register sync ready */
			}
			break;
    6f2a:	e001      	b.n	6f30 <bod_set_config+0xb4>
		default:
			return STATUS_ERR_INVALID_ARG;
    6f2c:	2317      	movs	r3, #23
    6f2e:	e000      	b.n	6f32 <bod_set_config+0xb6>
	}

	return STATUS_OK;
    6f30:	2300      	movs	r3, #0
}
    6f32:	0018      	movs	r0, r3
    6f34:	46bd      	mov	sp, r7
    6f36:	b004      	add	sp, #16
    6f38:	bd80      	pop	{r7, pc}
    6f3a:	46c0      	nop			; (mov r8, r8)
    6f3c:	40000800 	.word	0x40000800

00006f40 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    6f40:	b580      	push	{r7, lr}
    6f42:	b082      	sub	sp, #8
    6f44:	af00      	add	r7, sp, #0
    6f46:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    6f48:	687b      	ldr	r3, [r7, #4]
    6f4a:	2b00      	cmp	r3, #0
    6f4c:	d00c      	beq.n	6f68 <delay_cycles+0x28>
		SysTick->LOAD = n;
    6f4e:	4b08      	ldr	r3, [pc, #32]	; (6f70 <delay_cycles+0x30>)
    6f50:	687a      	ldr	r2, [r7, #4]
    6f52:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    6f54:	4b06      	ldr	r3, [pc, #24]	; (6f70 <delay_cycles+0x30>)
    6f56:	2200      	movs	r2, #0
    6f58:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    6f5a:	46c0      	nop			; (mov r8, r8)
    6f5c:	4b04      	ldr	r3, [pc, #16]	; (6f70 <delay_cycles+0x30>)
    6f5e:	681a      	ldr	r2, [r3, #0]
    6f60:	2380      	movs	r3, #128	; 0x80
    6f62:	025b      	lsls	r3, r3, #9
    6f64:	4013      	ands	r3, r2
    6f66:	d0f9      	beq.n	6f5c <delay_cycles+0x1c>
		};
	}
}
    6f68:	46c0      	nop			; (mov r8, r8)
    6f6a:	46bd      	mov	sp, r7
    6f6c:	b002      	add	sp, #8
    6f6e:	bd80      	pop	{r7, pc}
    6f70:	e000e010 	.word	0xe000e010

00006f74 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    6f74:	b5b0      	push	{r4, r5, r7, lr}
    6f76:	af00      	add	r7, sp, #0
    6f78:	4c15      	ldr	r4, [pc, #84]	; (6fd0 <delay_init+0x5c>)
    6f7a:	447c      	add	r4, pc
	cycles_per_ms = system_gclk_gen_get_hz(0);
    6f7c:	2000      	movs	r0, #0
    6f7e:	4b15      	ldr	r3, [pc, #84]	; (6fd4 <delay_init+0x60>)
    6f80:	58e3      	ldr	r3, [r4, r3]
    6f82:	4798      	blx	r3
    6f84:	0002      	movs	r2, r0
    6f86:	4b14      	ldr	r3, [pc, #80]	; (6fd8 <delay_init+0x64>)
    6f88:	447b      	add	r3, pc
    6f8a:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    6f8c:	4b13      	ldr	r3, [pc, #76]	; (6fdc <delay_init+0x68>)
    6f8e:	447b      	add	r3, pc
    6f90:	6818      	ldr	r0, [r3, #0]
    6f92:	4b13      	ldr	r3, [pc, #76]	; (6fe0 <delay_init+0x6c>)
    6f94:	58e3      	ldr	r3, [r4, r3]
    6f96:	001a      	movs	r2, r3
    6f98:	23fa      	movs	r3, #250	; 0xfa
    6f9a:	0099      	lsls	r1, r3, #2
    6f9c:	4790      	blx	r2
    6f9e:	0003      	movs	r3, r0
    6fa0:	001a      	movs	r2, r3
    6fa2:	4b10      	ldr	r3, [pc, #64]	; (6fe4 <delay_init+0x70>)
    6fa4:	447b      	add	r3, pc
    6fa6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    6fa8:	4b0f      	ldr	r3, [pc, #60]	; (6fe8 <delay_init+0x74>)
    6faa:	447b      	add	r3, pc
    6fac:	6818      	ldr	r0, [r3, #0]
    6fae:	4b0c      	ldr	r3, [pc, #48]	; (6fe0 <delay_init+0x6c>)
    6fb0:	58e3      	ldr	r3, [r4, r3]
    6fb2:	001a      	movs	r2, r3
    6fb4:	23fa      	movs	r3, #250	; 0xfa
    6fb6:	0099      	lsls	r1, r3, #2
    6fb8:	4790      	blx	r2
    6fba:	0003      	movs	r3, r0
    6fbc:	001a      	movs	r2, r3
    6fbe:	4b0b      	ldr	r3, [pc, #44]	; (6fec <delay_init+0x78>)
    6fc0:	447b      	add	r3, pc
    6fc2:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    6fc4:	4b0a      	ldr	r3, [pc, #40]	; (6ff0 <delay_init+0x7c>)
    6fc6:	2205      	movs	r2, #5
    6fc8:	601a      	str	r2, [r3, #0]
}
    6fca:	46c0      	nop			; (mov r8, r8)
    6fcc:	46bd      	mov	sp, r7
    6fce:	bdb0      	pop	{r4, r5, r7, pc}
    6fd0:	0000ae56 	.word	0x0000ae56
    6fd4:	000000e0 	.word	0x000000e0
    6fd8:	1fff9164 	.word	0x1fff9164
    6fdc:	1fff915e 	.word	0x1fff915e
    6fe0:	00000204 	.word	0x00000204
    6fe4:	1fff9148 	.word	0x1fff9148
    6fe8:	1fff9142 	.word	0x1fff9142
    6fec:	1fff9130 	.word	0x1fff9130
    6ff0:	e000e010 	.word	0xe000e010

00006ff4 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    6ff4:	b580      	push	{r7, lr}
    6ff6:	b082      	sub	sp, #8
    6ff8:	af00      	add	r7, sp, #0
    6ffa:	6078      	str	r0, [r7, #4]
	while (n--) {
    6ffc:	e006      	b.n	700c <delay_cycles_us+0x18>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    6ffe:	4b08      	ldr	r3, [pc, #32]	; (7020 <delay_cycles_us+0x2c>)
    7000:	447b      	add	r3, pc
    7002:	681b      	ldr	r3, [r3, #0]
    7004:	0018      	movs	r0, r3
    7006:	4b07      	ldr	r3, [pc, #28]	; (7024 <delay_cycles_us+0x30>)
    7008:	447b      	add	r3, pc
    700a:	4798      	blx	r3
	while (n--) {
    700c:	687b      	ldr	r3, [r7, #4]
    700e:	1e5a      	subs	r2, r3, #1
    7010:	607a      	str	r2, [r7, #4]
    7012:	2b00      	cmp	r3, #0
    7014:	d1f3      	bne.n	6ffe <delay_cycles_us+0xa>
	}
}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	46bd      	mov	sp, r7
    701a:	b002      	add	sp, #8
    701c:	bd80      	pop	{r7, pc}
    701e:	46c0      	nop			; (mov r8, r8)
    7020:	1fff90f0 	.word	0x1fff90f0
    7024:	ffffff35 	.word	0xffffff35

00007028 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    7028:	b580      	push	{r7, lr}
    702a:	b082      	sub	sp, #8
    702c:	af00      	add	r7, sp, #0
    702e:	6078      	str	r0, [r7, #4]
	while (n--) {
    7030:	e006      	b.n	7040 <delay_cycles_ms+0x18>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    7032:	4b08      	ldr	r3, [pc, #32]	; (7054 <delay_cycles_ms+0x2c>)
    7034:	447b      	add	r3, pc
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	0018      	movs	r0, r3
    703a:	4b07      	ldr	r3, [pc, #28]	; (7058 <delay_cycles_ms+0x30>)
    703c:	447b      	add	r3, pc
    703e:	4798      	blx	r3
	while (n--) {
    7040:	687b      	ldr	r3, [r7, #4]
    7042:	1e5a      	subs	r2, r3, #1
    7044:	607a      	str	r2, [r7, #4]
    7046:	2b00      	cmp	r3, #0
    7048:	d1f3      	bne.n	7032 <delay_cycles_ms+0xa>
	}
}
    704a:	46c0      	nop			; (mov r8, r8)
    704c:	46bd      	mov	sp, r7
    704e:	b002      	add	sp, #8
    7050:	bd80      	pop	{r7, pc}
    7052:	46c0      	nop			; (mov r8, r8)
    7054:	1fff90b8 	.word	0x1fff90b8
    7058:	ffffff01 	.word	0xffffff01

0000705c <system_pinmux_get_group_from_gpio_pin>:
{
    705c:	b580      	push	{r7, lr}
    705e:	b084      	sub	sp, #16
    7060:	af00      	add	r7, sp, #0
    7062:	0002      	movs	r2, r0
    7064:	1dfb      	adds	r3, r7, #7
    7066:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    7068:	230f      	movs	r3, #15
    706a:	18fb      	adds	r3, r7, r3
    706c:	1dfa      	adds	r2, r7, #7
    706e:	7812      	ldrb	r2, [r2, #0]
    7070:	09d2      	lsrs	r2, r2, #7
    7072:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    7074:	230e      	movs	r3, #14
    7076:	18fb      	adds	r3, r7, r3
    7078:	1dfa      	adds	r2, r7, #7
    707a:	7812      	ldrb	r2, [r2, #0]
    707c:	0952      	lsrs	r2, r2, #5
    707e:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    7080:	4b0d      	ldr	r3, [pc, #52]	; (70b8 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    7082:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    7084:	230f      	movs	r3, #15
    7086:	18fb      	adds	r3, r7, r3
    7088:	781b      	ldrb	r3, [r3, #0]
    708a:	2b00      	cmp	r3, #0
    708c:	d10f      	bne.n	70ae <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    708e:	230f      	movs	r3, #15
    7090:	18fb      	adds	r3, r7, r3
    7092:	781b      	ldrb	r3, [r3, #0]
    7094:	009b      	lsls	r3, r3, #2
    7096:	2210      	movs	r2, #16
    7098:	4694      	mov	ip, r2
    709a:	44bc      	add	ip, r7
    709c:	4463      	add	r3, ip
    709e:	3b08      	subs	r3, #8
    70a0:	681a      	ldr	r2, [r3, #0]
    70a2:	230e      	movs	r3, #14
    70a4:	18fb      	adds	r3, r7, r3
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	01db      	lsls	r3, r3, #7
    70aa:	18d3      	adds	r3, r2, r3
    70ac:	e000      	b.n	70b0 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    70ae:	2300      	movs	r3, #0
}
    70b0:	0018      	movs	r0, r3
    70b2:	46bd      	mov	sp, r7
    70b4:	b004      	add	sp, #16
    70b6:	bd80      	pop	{r7, pc}
    70b8:	41004400 	.word	0x41004400

000070bc <port_get_group_from_gpio_pin>:
{
    70bc:	b580      	push	{r7, lr}
    70be:	b082      	sub	sp, #8
    70c0:	af00      	add	r7, sp, #0
    70c2:	0002      	movs	r2, r0
    70c4:	1dfb      	adds	r3, r7, #7
    70c6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    70c8:	1dfb      	adds	r3, r7, #7
    70ca:	781b      	ldrb	r3, [r3, #0]
    70cc:	0018      	movs	r0, r3
    70ce:	4b04      	ldr	r3, [pc, #16]	; (70e0 <port_get_group_from_gpio_pin+0x24>)
    70d0:	447b      	add	r3, pc
    70d2:	4798      	blx	r3
    70d4:	0003      	movs	r3, r0
}
    70d6:	0018      	movs	r0, r3
    70d8:	46bd      	mov	sp, r7
    70da:	b002      	add	sp, #8
    70dc:	bd80      	pop	{r7, pc}
    70de:	46c0      	nop			; (mov r8, r8)
    70e0:	ffffff89 	.word	0xffffff89

000070e4 <port_get_config_defaults>:
{
    70e4:	b580      	push	{r7, lr}
    70e6:	b082      	sub	sp, #8
    70e8:	af00      	add	r7, sp, #0
    70ea:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	2200      	movs	r2, #0
    70f0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    70f2:	687b      	ldr	r3, [r7, #4]
    70f4:	2201      	movs	r2, #1
    70f6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    70f8:	687b      	ldr	r3, [r7, #4]
    70fa:	2200      	movs	r2, #0
    70fc:	709a      	strb	r2, [r3, #2]
}
    70fe:	46c0      	nop			; (mov r8, r8)
    7100:	46bd      	mov	sp, r7
    7102:	b002      	add	sp, #8
    7104:	bd80      	pop	{r7, pc}
	...

00007108 <port_pin_set_output_level>:
{
    7108:	b580      	push	{r7, lr}
    710a:	b084      	sub	sp, #16
    710c:	af00      	add	r7, sp, #0
    710e:	0002      	movs	r2, r0
    7110:	1dfb      	adds	r3, r7, #7
    7112:	701a      	strb	r2, [r3, #0]
    7114:	1dbb      	adds	r3, r7, #6
    7116:	1c0a      	adds	r2, r1, #0
    7118:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    711a:	1dfb      	adds	r3, r7, #7
    711c:	781b      	ldrb	r3, [r3, #0]
    711e:	0018      	movs	r0, r3
    7120:	4b0d      	ldr	r3, [pc, #52]	; (7158 <port_pin_set_output_level+0x50>)
    7122:	447b      	add	r3, pc
    7124:	4798      	blx	r3
    7126:	0003      	movs	r3, r0
    7128:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    712a:	1dfb      	adds	r3, r7, #7
    712c:	781b      	ldrb	r3, [r3, #0]
    712e:	221f      	movs	r2, #31
    7130:	4013      	ands	r3, r2
    7132:	2201      	movs	r2, #1
    7134:	409a      	lsls	r2, r3
    7136:	0013      	movs	r3, r2
    7138:	60bb      	str	r3, [r7, #8]
	if (level) {
    713a:	1dbb      	adds	r3, r7, #6
    713c:	781b      	ldrb	r3, [r3, #0]
    713e:	2b00      	cmp	r3, #0
    7140:	d003      	beq.n	714a <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    7142:	68fb      	ldr	r3, [r7, #12]
    7144:	68ba      	ldr	r2, [r7, #8]
    7146:	619a      	str	r2, [r3, #24]
}
    7148:	e002      	b.n	7150 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    714a:	68fb      	ldr	r3, [r7, #12]
    714c:	68ba      	ldr	r2, [r7, #8]
    714e:	615a      	str	r2, [r3, #20]
}
    7150:	46c0      	nop			; (mov r8, r8)
    7152:	46bd      	mov	sp, r7
    7154:	b004      	add	sp, #16
    7156:	bd80      	pop	{r7, pc}
    7158:	ffffff97 	.word	0xffffff97

0000715c <system_interrupt_enable>:
{
    715c:	b580      	push	{r7, lr}
    715e:	b082      	sub	sp, #8
    7160:	af00      	add	r7, sp, #0
    7162:	0002      	movs	r2, r0
    7164:	1dfb      	adds	r3, r7, #7
    7166:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7168:	4b06      	ldr	r3, [pc, #24]	; (7184 <system_interrupt_enable+0x28>)
    716a:	1dfa      	adds	r2, r7, #7
    716c:	7812      	ldrb	r2, [r2, #0]
    716e:	0011      	movs	r1, r2
    7170:	221f      	movs	r2, #31
    7172:	400a      	ands	r2, r1
    7174:	2101      	movs	r1, #1
    7176:	4091      	lsls	r1, r2
    7178:	000a      	movs	r2, r1
    717a:	601a      	str	r2, [r3, #0]
}
    717c:	46c0      	nop			; (mov r8, r8)
    717e:	46bd      	mov	sp, r7
    7180:	b002      	add	sp, #8
    7182:	bd80      	pop	{r7, pc}
    7184:	e000e100 	.word	0xe000e100

00007188 <spi_is_syncing>:
{
    7188:	b580      	push	{r7, lr}
    718a:	b084      	sub	sp, #16
    718c:	af00      	add	r7, sp, #0
    718e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    7190:	687b      	ldr	r3, [r7, #4]
    7192:	681b      	ldr	r3, [r3, #0]
    7194:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    7196:	68fb      	ldr	r3, [r7, #12]
    7198:	69db      	ldr	r3, [r3, #28]
    719a:	1e5a      	subs	r2, r3, #1
    719c:	4193      	sbcs	r3, r2
    719e:	b2db      	uxtb	r3, r3
}
    71a0:	0018      	movs	r0, r3
    71a2:	46bd      	mov	sp, r7
    71a4:	b004      	add	sp, #16
    71a6:	bd80      	pop	{r7, pc}

000071a8 <spi_get_config_defaults>:
{
    71a8:	b590      	push	{r4, r7, lr}
    71aa:	b083      	sub	sp, #12
    71ac:	af00      	add	r7, sp, #0
    71ae:	6078      	str	r0, [r7, #4]
    71b0:	4c1e      	ldr	r4, [pc, #120]	; (722c <spi_get_config_defaults+0x84>)
    71b2:	447c      	add	r4, pc
	config->mode             = SPI_MODE_MASTER;
    71b4:	687b      	ldr	r3, [r7, #4]
    71b6:	2201      	movs	r2, #1
    71b8:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    71ba:	687b      	ldr	r3, [r7, #4]
    71bc:	2200      	movs	r2, #0
    71be:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    71c0:	687b      	ldr	r3, [r7, #4]
    71c2:	2200      	movs	r2, #0
    71c4:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    71c6:	687b      	ldr	r3, [r7, #4]
    71c8:	22c0      	movs	r2, #192	; 0xc0
    71ca:	0392      	lsls	r2, r2, #14
    71cc:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    71ce:	687b      	ldr	r3, [r7, #4]
    71d0:	2200      	movs	r2, #0
    71d2:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    71d4:	687b      	ldr	r3, [r7, #4]
    71d6:	2200      	movs	r2, #0
    71d8:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    71da:	687b      	ldr	r3, [r7, #4]
    71dc:	2201      	movs	r2, #1
    71de:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    71e0:	687b      	ldr	r3, [r7, #4]
    71e2:	2201      	movs	r2, #1
    71e4:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    71e6:	687b      	ldr	r3, [r7, #4]
    71e8:	2200      	movs	r2, #0
    71ea:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    71ec:	687b      	ldr	r3, [r7, #4]
    71ee:	2224      	movs	r2, #36	; 0x24
    71f0:	2100      	movs	r1, #0
    71f2:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    71f4:	687b      	ldr	r3, [r7, #4]
    71f6:	3318      	adds	r3, #24
    71f8:	220c      	movs	r2, #12
    71fa:	2100      	movs	r1, #0
    71fc:	0018      	movs	r0, r3
    71fe:	4b0c      	ldr	r3, [pc, #48]	; (7230 <spi_get_config_defaults+0x88>)
    7200:	58e3      	ldr	r3, [r4, r3]
    7202:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	4a0b      	ldr	r2, [pc, #44]	; (7234 <spi_get_config_defaults+0x8c>)
    7208:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    720a:	687b      	ldr	r3, [r7, #4]
    720c:	2200      	movs	r2, #0
    720e:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    7210:	687b      	ldr	r3, [r7, #4]
    7212:	2200      	movs	r2, #0
    7214:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    7216:	687b      	ldr	r3, [r7, #4]
    7218:	2200      	movs	r2, #0
    721a:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    721c:	687b      	ldr	r3, [r7, #4]
    721e:	2200      	movs	r2, #0
    7220:	635a      	str	r2, [r3, #52]	; 0x34
};
    7222:	46c0      	nop			; (mov r8, r8)
    7224:	46bd      	mov	sp, r7
    7226:	b003      	add	sp, #12
    7228:	bd90      	pop	{r4, r7, pc}
    722a:	46c0      	nop			; (mov r8, r8)
    722c:	0000ac1e 	.word	0x0000ac1e
    7230:	000001f0 	.word	0x000001f0
    7234:	000186a0 	.word	0x000186a0

00007238 <spi_slave_inst_get_config_defaults>:
{
    7238:	b580      	push	{r7, lr}
    723a:	b082      	sub	sp, #8
    723c:	af00      	add	r7, sp, #0
    723e:	6078      	str	r0, [r7, #4]
	config->ss_pin          = 10;
    7240:	687b      	ldr	r3, [r7, #4]
    7242:	220a      	movs	r2, #10
    7244:	701a      	strb	r2, [r3, #0]
	config->address_enabled = false;
    7246:	687b      	ldr	r3, [r7, #4]
    7248:	2200      	movs	r2, #0
    724a:	705a      	strb	r2, [r3, #1]
	config->address         = 0;
    724c:	687b      	ldr	r3, [r7, #4]
    724e:	2200      	movs	r2, #0
    7250:	709a      	strb	r2, [r3, #2]
}
    7252:	46c0      	nop			; (mov r8, r8)
    7254:	46bd      	mov	sp, r7
    7256:	b002      	add	sp, #8
    7258:	bd80      	pop	{r7, pc}
	...

0000725c <spi_attach_slave>:
{
    725c:	b590      	push	{r4, r7, lr}
    725e:	b085      	sub	sp, #20
    7260:	af00      	add	r7, sp, #0
    7262:	6078      	str	r0, [r7, #4]
    7264:	6039      	str	r1, [r7, #0]
    7266:	4c16      	ldr	r4, [pc, #88]	; (72c0 <spi_attach_slave+0x64>)
    7268:	447c      	add	r4, pc
	slave->ss_pin          = config->ss_pin;
    726a:	683b      	ldr	r3, [r7, #0]
    726c:	781a      	ldrb	r2, [r3, #0]
    726e:	687b      	ldr	r3, [r7, #4]
    7270:	701a      	strb	r2, [r3, #0]
	slave->address_enabled = config->address_enabled;
    7272:	683b      	ldr	r3, [r7, #0]
    7274:	785a      	ldrb	r2, [r3, #1]
    7276:	687b      	ldr	r3, [r7, #4]
    7278:	705a      	strb	r2, [r3, #1]
	slave->address         = config->address;
    727a:	683b      	ldr	r3, [r7, #0]
    727c:	789a      	ldrb	r2, [r3, #2]
    727e:	687b      	ldr	r3, [r7, #4]
    7280:	709a      	strb	r2, [r3, #2]
	port_get_config_defaults(&pin_conf);
    7282:	230c      	movs	r3, #12
    7284:	18fb      	adds	r3, r7, r3
    7286:	0018      	movs	r0, r3
    7288:	4b0e      	ldr	r3, [pc, #56]	; (72c4 <spi_attach_slave+0x68>)
    728a:	447b      	add	r3, pc
    728c:	4798      	blx	r3
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    728e:	230c      	movs	r3, #12
    7290:	18fb      	adds	r3, r7, r3
    7292:	2201      	movs	r2, #1
    7294:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    7296:	687b      	ldr	r3, [r7, #4]
    7298:	781b      	ldrb	r3, [r3, #0]
    729a:	220c      	movs	r2, #12
    729c:	18ba      	adds	r2, r7, r2
    729e:	0011      	movs	r1, r2
    72a0:	0018      	movs	r0, r3
    72a2:	4b09      	ldr	r3, [pc, #36]	; (72c8 <spi_attach_slave+0x6c>)
    72a4:	58e3      	ldr	r3, [r4, r3]
    72a6:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    72a8:	687b      	ldr	r3, [r7, #4]
    72aa:	781b      	ldrb	r3, [r3, #0]
    72ac:	2101      	movs	r1, #1
    72ae:	0018      	movs	r0, r3
    72b0:	4b06      	ldr	r3, [pc, #24]	; (72cc <spi_attach_slave+0x70>)
    72b2:	447b      	add	r3, pc
    72b4:	4798      	blx	r3
}
    72b6:	46c0      	nop			; (mov r8, r8)
    72b8:	46bd      	mov	sp, r7
    72ba:	b005      	add	sp, #20
    72bc:	bd90      	pop	{r4, r7, pc}
    72be:	46c0      	nop			; (mov r8, r8)
    72c0:	0000ab68 	.word	0x0000ab68
    72c4:	fffffe57 	.word	0xfffffe57
    72c8:	00000238 	.word	0x00000238
    72cc:	fffffe53 	.word	0xfffffe53

000072d0 <spi_enable>:
{
    72d0:	b580      	push	{r7, lr}
    72d2:	b084      	sub	sp, #16
    72d4:	af00      	add	r7, sp, #0
    72d6:	6078      	str	r0, [r7, #4]
    72d8:	4a10      	ldr	r2, [pc, #64]	; (731c <spi_enable+0x4c>)
    72da:	447a      	add	r2, pc
	SercomSpi *const spi_module = &(module->hw->SPI);
    72dc:	687b      	ldr	r3, [r7, #4]
    72de:	681b      	ldr	r3, [r3, #0]
    72e0:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    72e2:	687b      	ldr	r3, [r7, #4]
    72e4:	681b      	ldr	r3, [r3, #0]
    72e6:	0018      	movs	r0, r3
    72e8:	4b0d      	ldr	r3, [pc, #52]	; (7320 <spi_enable+0x50>)
    72ea:	58d3      	ldr	r3, [r2, r3]
    72ec:	4798      	blx	r3
    72ee:	0003      	movs	r3, r0
    72f0:	0018      	movs	r0, r3
    72f2:	4b0c      	ldr	r3, [pc, #48]	; (7324 <spi_enable+0x54>)
    72f4:	447b      	add	r3, pc
    72f6:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    72f8:	46c0      	nop			; (mov r8, r8)
    72fa:	687b      	ldr	r3, [r7, #4]
    72fc:	0018      	movs	r0, r3
    72fe:	4b0a      	ldr	r3, [pc, #40]	; (7328 <spi_enable+0x58>)
    7300:	447b      	add	r3, pc
    7302:	4798      	blx	r3
    7304:	1e03      	subs	r3, r0, #0
    7306:	d1f8      	bne.n	72fa <spi_enable+0x2a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    7308:	68fb      	ldr	r3, [r7, #12]
    730a:	681b      	ldr	r3, [r3, #0]
    730c:	2202      	movs	r2, #2
    730e:	431a      	orrs	r2, r3
    7310:	68fb      	ldr	r3, [r7, #12]
    7312:	601a      	str	r2, [r3, #0]
}
    7314:	46c0      	nop			; (mov r8, r8)
    7316:	46bd      	mov	sp, r7
    7318:	b004      	add	sp, #16
    731a:	bd80      	pop	{r7, pc}
    731c:	0000aaf6 	.word	0x0000aaf6
    7320:	000000a8 	.word	0x000000a8
    7324:	fffffe65 	.word	0xfffffe65
    7328:	fffffe85 	.word	0xfffffe85

0000732c <sd_mmc_spi_crc7>:
 * \param size    Size of buffer data
 *
 * \return CRC7 computed
 */
static uint8_t sd_mmc_spi_crc7(uint8_t * buf, uint8_t size)
{
    732c:	b580      	push	{r7, lr}
    732e:	b084      	sub	sp, #16
    7330:	af00      	add	r7, sp, #0
    7332:	6078      	str	r0, [r7, #4]
    7334:	000a      	movs	r2, r1
    7336:	1cfb      	adds	r3, r7, #3
    7338:	701a      	strb	r2, [r3, #0]
	uint8_t crc, value, i;

	crc = 0;
    733a:	230f      	movs	r3, #15
    733c:	18fb      	adds	r3, r7, r3
    733e:	2200      	movs	r2, #0
    7340:	701a      	strb	r2, [r3, #0]
	while (size--) {
    7342:	e038      	b.n	73b6 <sd_mmc_spi_crc7+0x8a>
		value = *buf++;
    7344:	687b      	ldr	r3, [r7, #4]
    7346:	1c5a      	adds	r2, r3, #1
    7348:	607a      	str	r2, [r7, #4]
    734a:	220e      	movs	r2, #14
    734c:	18ba      	adds	r2, r7, r2
    734e:	781b      	ldrb	r3, [r3, #0]
    7350:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    7352:	230d      	movs	r3, #13
    7354:	18fb      	adds	r3, r7, r3
    7356:	2200      	movs	r2, #0
    7358:	701a      	strb	r2, [r3, #0]
    735a:	e027      	b.n	73ac <sd_mmc_spi_crc7+0x80>
			crc <<= 1;
    735c:	230f      	movs	r3, #15
    735e:	18fa      	adds	r2, r7, r3
    7360:	230f      	movs	r3, #15
    7362:	18fb      	adds	r3, r7, r3
    7364:	781b      	ldrb	r3, [r3, #0]
    7366:	18db      	adds	r3, r3, r3
    7368:	7013      	strb	r3, [r2, #0]
			if ((value & 0x80) ^ (crc & 0x80)) {
    736a:	230e      	movs	r3, #14
    736c:	18fa      	adds	r2, r7, r3
    736e:	230f      	movs	r3, #15
    7370:	18fb      	adds	r3, r7, r3
    7372:	7812      	ldrb	r2, [r2, #0]
    7374:	781b      	ldrb	r3, [r3, #0]
    7376:	4053      	eors	r3, r2
    7378:	b2db      	uxtb	r3, r3
    737a:	b25b      	sxtb	r3, r3
    737c:	2b00      	cmp	r3, #0
    737e:	da07      	bge.n	7390 <sd_mmc_spi_crc7+0x64>
				crc ^= 0x09;
    7380:	230f      	movs	r3, #15
    7382:	18fb      	adds	r3, r7, r3
    7384:	220f      	movs	r2, #15
    7386:	18ba      	adds	r2, r7, r2
    7388:	7812      	ldrb	r2, [r2, #0]
    738a:	2109      	movs	r1, #9
    738c:	404a      	eors	r2, r1
    738e:	701a      	strb	r2, [r3, #0]
			}
			value <<= 1;
    7390:	230e      	movs	r3, #14
    7392:	18fa      	adds	r2, r7, r3
    7394:	230e      	movs	r3, #14
    7396:	18fb      	adds	r3, r7, r3
    7398:	781b      	ldrb	r3, [r3, #0]
    739a:	18db      	adds	r3, r3, r3
    739c:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < 8; i++) {
    739e:	230d      	movs	r3, #13
    73a0:	18fb      	adds	r3, r7, r3
    73a2:	781a      	ldrb	r2, [r3, #0]
    73a4:	230d      	movs	r3, #13
    73a6:	18fb      	adds	r3, r7, r3
    73a8:	3201      	adds	r2, #1
    73aa:	701a      	strb	r2, [r3, #0]
    73ac:	230d      	movs	r3, #13
    73ae:	18fb      	adds	r3, r7, r3
    73b0:	781b      	ldrb	r3, [r3, #0]
    73b2:	2b07      	cmp	r3, #7
    73b4:	d9d2      	bls.n	735c <sd_mmc_spi_crc7+0x30>
	while (size--) {
    73b6:	1cfb      	adds	r3, r7, #3
    73b8:	781b      	ldrb	r3, [r3, #0]
    73ba:	1cfa      	adds	r2, r7, #3
    73bc:	1e59      	subs	r1, r3, #1
    73be:	7011      	strb	r1, [r2, #0]
    73c0:	2b00      	cmp	r3, #0
    73c2:	d1bf      	bne.n	7344 <sd_mmc_spi_crc7+0x18>
		}
	}
	crc = (crc << 1) | 1;
    73c4:	230f      	movs	r3, #15
    73c6:	18fb      	adds	r3, r7, r3
    73c8:	781b      	ldrb	r3, [r3, #0]
    73ca:	005b      	lsls	r3, r3, #1
    73cc:	b25b      	sxtb	r3, r3
    73ce:	2201      	movs	r2, #1
    73d0:	4313      	orrs	r3, r2
    73d2:	b25a      	sxtb	r2, r3
    73d4:	230f      	movs	r3, #15
    73d6:	18fb      	adds	r3, r7, r3
    73d8:	701a      	strb	r2, [r3, #0]
	return crc;
    73da:	230f      	movs	r3, #15
    73dc:	18fb      	adds	r3, r7, r3
    73de:	781b      	ldrb	r3, [r3, #0]
}
    73e0:	0018      	movs	r0, r3
    73e2:	46bd      	mov	sp, r7
    73e4:	b004      	add	sp, #16
    73e6:	bd80      	pop	{r7, pc}

000073e8 <sd_mmc_spi_wait_busy>:
 * \brief Wait the end of busy on DAT0 line
 *
 * \return true if success, otherwise false
 */
static bool sd_mmc_spi_wait_busy(void)
{
    73e8:	b5b0      	push	{r4, r5, r7, lr}
    73ea:	b082      	sub	sp, #8
    73ec:	af00      	add	r7, sp, #0
    73ee:	4c1c      	ldr	r4, [pc, #112]	; (7460 <sd_mmc_spi_wait_busy+0x78>)
    73f0:	447c      	add	r4, pc
	uint8_t line = 0xFF;
    73f2:	1c7b      	adds	r3, r7, #1
    73f4:	22ff      	movs	r2, #255	; 0xff
    73f6:	701a      	strb	r2, [r3, #0]
	uint16_t dummy = 0xFF;
    73f8:	1cbb      	adds	r3, r7, #2
    73fa:	22ff      	movs	r2, #255	; 0xff
    73fc:	801a      	strh	r2, [r3, #0]

	/* Delay before check busy
	 * Nbr timing minimum = 8 cylces
	 */
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    73fe:	1cbb      	adds	r3, r7, #2
    7400:	881b      	ldrh	r3, [r3, #0]
    7402:	1c79      	adds	r1, r7, #1
    7404:	4a17      	ldr	r2, [pc, #92]	; (7464 <sd_mmc_spi_wait_busy+0x7c>)
    7406:	447a      	add	r2, pc
    7408:	0010      	movs	r0, r2
    740a:	2201      	movs	r2, #1
    740c:	4d16      	ldr	r5, [pc, #88]	; (7468 <sd_mmc_spi_wait_busy+0x80>)
    740e:	5965      	ldr	r5, [r4, r5]
    7410:	47a8      	blx	r5
	/* Wait end of busy signal
	 * Nec timing: 0 to unlimited
	 * However a timeout is used.
	 * 200 000 * 8 cycles
	 */
	uint32_t nec_timeout = 200000;
    7412:	4b16      	ldr	r3, [pc, #88]	; (746c <sd_mmc_spi_wait_busy+0x84>)
    7414:	607b      	str	r3, [r7, #4]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    7416:	1cbb      	adds	r3, r7, #2
    7418:	881b      	ldrh	r3, [r3, #0]
    741a:	1c79      	adds	r1, r7, #1
    741c:	4a14      	ldr	r2, [pc, #80]	; (7470 <sd_mmc_spi_wait_busy+0x88>)
    741e:	447a      	add	r2, pc
    7420:	0010      	movs	r0, r2
    7422:	2201      	movs	r2, #1
    7424:	4d10      	ldr	r5, [pc, #64]	; (7468 <sd_mmc_spi_wait_busy+0x80>)
    7426:	5965      	ldr	r5, [r4, r5]
    7428:	47a8      	blx	r5
			dummy);
	do {
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    742a:	1cbb      	adds	r3, r7, #2
    742c:	881b      	ldrh	r3, [r3, #0]
    742e:	1c79      	adds	r1, r7, #1
    7430:	4a10      	ldr	r2, [pc, #64]	; (7474 <sd_mmc_spi_wait_busy+0x8c>)
    7432:	447a      	add	r2, pc
    7434:	0010      	movs	r0, r2
    7436:	2201      	movs	r2, #1
    7438:	4d0b      	ldr	r5, [pc, #44]	; (7468 <sd_mmc_spi_wait_busy+0x80>)
    743a:	5965      	ldr	r5, [r4, r5]
    743c:	47a8      	blx	r5
			dummy);
		if (!(nec_timeout--)) {
    743e:	687b      	ldr	r3, [r7, #4]
    7440:	1e5a      	subs	r2, r3, #1
    7442:	607a      	str	r2, [r7, #4]
    7444:	2b00      	cmp	r3, #0
    7446:	d101      	bne.n	744c <sd_mmc_spi_wait_busy+0x64>
			return false;
    7448:	2300      	movs	r3, #0
    744a:	e004      	b.n	7456 <sd_mmc_spi_wait_busy+0x6e>
		}
	} while (line != 0xFF);
    744c:	1c7b      	adds	r3, r7, #1
    744e:	781b      	ldrb	r3, [r3, #0]
    7450:	2bff      	cmp	r3, #255	; 0xff
    7452:	d1ea      	bne.n	742a <sd_mmc_spi_wait_busy+0x42>
	return true;
    7454:	2301      	movs	r3, #1
}
    7456:	0018      	movs	r0, r3
    7458:	46bd      	mov	sp, r7
    745a:	b002      	add	sp, #8
    745c:	bdb0      	pop	{r4, r5, r7, pc}
    745e:	46c0      	nop			; (mov r8, r8)
    7460:	0000a9e0 	.word	0x0000a9e0
    7464:	1fff913a 	.word	0x1fff913a
    7468:	000001e8 	.word	0x000001e8
    746c:	00030d40 	.word	0x00030d40
    7470:	1fff9122 	.word	0x1fff9122
    7474:	1fff910e 	.word	0x1fff910e

00007478 <sd_mmc_spi_start_read_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_start_read_block(void)
{
    7478:	b5b0      	push	{r4, r5, r7, lr}
    747a:	b082      	sub	sp, #8
    747c:	af00      	add	r7, sp, #0
    747e:	4c1f      	ldr	r4, [pc, #124]	; (74fc <sd_mmc_spi_start_read_block+0x84>)
    7480:	447c      	add	r4, pc
	uint32_t i;
	uint8_t token;
	uint16_t dummy = 0xFF;
    7482:	1cbb      	adds	r3, r7, #2
    7484:	22ff      	movs	r2, #255	; 0xff
    7486:	801a      	strh	r2, [r3, #0]
	 * Compute the maximum timeout:
	 * Frequency maximum = 25MHz
	 * 1 byte = 8 cycles
	 * 100ms = 312500 x spi_read_buffer_wait() maximum
	 */
	token = 0;
    7488:	1c7b      	adds	r3, r7, #1
    748a:	2200      	movs	r2, #0
    748c:	701a      	strb	r2, [r3, #0]
	i = 500000;
    748e:	4b1c      	ldr	r3, [pc, #112]	; (7500 <sd_mmc_spi_start_read_block+0x88>)
    7490:	607b      	str	r3, [r7, #4]
	do {
		if (i-- == 0) {
    7492:	687b      	ldr	r3, [r7, #4]
    7494:	1e5a      	subs	r2, r3, #1
    7496:	607a      	str	r2, [r7, #4]
    7498:	2b00      	cmp	r3, #0
    749a:	d105      	bne.n	74a8 <sd_mmc_spi_start_read_block+0x30>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    749c:	4b19      	ldr	r3, [pc, #100]	; (7504 <sd_mmc_spi_start_read_block+0x8c>)
    749e:	447b      	add	r3, pc
    74a0:	2204      	movs	r2, #4
    74a2:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: Read blocks timeout\n\r", __func__);
			return false;
    74a4:	2300      	movs	r3, #0
    74a6:	e025      	b.n	74f4 <sd_mmc_spi_start_read_block+0x7c>
		}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    74a8:	1cbb      	adds	r3, r7, #2
    74aa:	881b      	ldrh	r3, [r3, #0]
    74ac:	1c79      	adds	r1, r7, #1
    74ae:	4a16      	ldr	r2, [pc, #88]	; (7508 <sd_mmc_spi_start_read_block+0x90>)
    74b0:	447a      	add	r2, pc
    74b2:	0010      	movs	r0, r2
    74b4:	2201      	movs	r2, #1
    74b6:	4d15      	ldr	r5, [pc, #84]	; (750c <sd_mmc_spi_start_read_block+0x94>)
    74b8:	5965      	ldr	r5, [r4, r5]
    74ba:	47a8      	blx	r5
			dummy);
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    74bc:	1c7b      	adds	r3, r7, #1
    74be:	781b      	ldrb	r3, [r3, #0]
    74c0:	001a      	movs	r2, r3
    74c2:	23f0      	movs	r3, #240	; 0xf0
    74c4:	4013      	ands	r3, r2
    74c6:	d110      	bne.n	74ea <sd_mmc_spi_start_read_block+0x72>
			Assert(SPI_TOKEN_DATA_ERROR_ERRORS & token);
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    74c8:	1c7b      	adds	r3, r7, #1
    74ca:	781b      	ldrb	r3, [r3, #0]
    74cc:	001a      	movs	r2, r3
    74ce:	2307      	movs	r3, #7
    74d0:	4013      	ands	r3, r2
    74d2:	d004      	beq.n	74de <sd_mmc_spi_start_read_block+0x66>
					| SPI_TOKEN_DATA_ERROR_ECC_ERROR
					| SPI_TOKEN_DATA_ERROR_CC_ERROR)) {
				sd_mmc_spi_debug("%s: CRC data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    74d4:	4b0e      	ldr	r3, [pc, #56]	; (7510 <sd_mmc_spi_start_read_block+0x98>)
    74d6:	447b      	add	r3, pc
    74d8:	2207      	movs	r2, #7
    74da:	701a      	strb	r2, [r3, #0]
    74dc:	e003      	b.n	74e6 <sd_mmc_spi_start_read_block+0x6e>
			} else {
				sd_mmc_spi_debug("%s: Out of range data error token\n\r", __func__);
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    74de:	4b0d      	ldr	r3, [pc, #52]	; (7514 <sd_mmc_spi_start_read_block+0x9c>)
    74e0:	447b      	add	r3, pc
    74e2:	220b      	movs	r2, #11
    74e4:	701a      	strb	r2, [r3, #0]
			}
			return false;
    74e6:	2300      	movs	r3, #0
    74e8:	e004      	b.n	74f4 <sd_mmc_spi_start_read_block+0x7c>
		}
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    74ea:	1c7b      	adds	r3, r7, #1
    74ec:	781b      	ldrb	r3, [r3, #0]
    74ee:	2bfe      	cmp	r3, #254	; 0xfe
    74f0:	d1cf      	bne.n	7492 <sd_mmc_spi_start_read_block+0x1a>

	return true;
    74f2:	2301      	movs	r3, #1
}
    74f4:	0018      	movs	r0, r3
    74f6:	46bd      	mov	sp, r7
    74f8:	b002      	add	sp, #8
    74fa:	bdb0      	pop	{r4, r5, r7, pc}
    74fc:	0000a950 	.word	0x0000a950
    7500:	0007a120 	.word	0x0007a120
    7504:	1fff90e5 	.word	0x1fff90e5
    7508:	1fff9090 	.word	0x1fff9090
    750c:	000001e8 	.word	0x000001e8
    7510:	1fff90ad 	.word	0x1fff90ad
    7514:	1fff90a3 	.word	0x1fff90a3

00007518 <sd_mmc_spi_stop_read_block>:

/**
 * \brief Executed the end of a read block transfer
 */
static void sd_mmc_spi_stop_read_block(void)
{
    7518:	b5b0      	push	{r4, r5, r7, lr}
    751a:	b082      	sub	sp, #8
    751c:	af00      	add	r7, sp, #0
    751e:	4d09      	ldr	r5, [pc, #36]	; (7544 <sd_mmc_spi_stop_read_block+0x2c>)
    7520:	447d      	add	r5, pc
	uint8_t crc[2];
	uint16_t dummy = 0xFF;
    7522:	1dbb      	adds	r3, r7, #6
    7524:	22ff      	movs	r2, #255	; 0xff
    7526:	801a      	strh	r2, [r3, #0]
	// Read 16-bit CRC (not cheked)
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    7528:	1dbb      	adds	r3, r7, #6
    752a:	881b      	ldrh	r3, [r3, #0]
    752c:	1d39      	adds	r1, r7, #4
    752e:	4a06      	ldr	r2, [pc, #24]	; (7548 <sd_mmc_spi_stop_read_block+0x30>)
    7530:	447a      	add	r2, pc
    7532:	0010      	movs	r0, r2
    7534:	2202      	movs	r2, #2
    7536:	4c05      	ldr	r4, [pc, #20]	; (754c <sd_mmc_spi_stop_read_block+0x34>)
    7538:	592c      	ldr	r4, [r5, r4]
    753a:	47a0      	blx	r4
			dummy);
}
    753c:	46c0      	nop			; (mov r8, r8)
    753e:	46bd      	mov	sp, r7
    7540:	b002      	add	sp, #8
    7542:	bdb0      	pop	{r4, r5, r7, pc}
    7544:	0000a8b0 	.word	0x0000a8b0
    7548:	1fff9010 	.word	0x1fff9010
    754c:	000001e8 	.word	0x000001e8

00007550 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    7550:	b590      	push	{r4, r7, lr}
    7552:	b083      	sub	sp, #12
    7554:	af00      	add	r7, sp, #0
    7556:	4c13      	ldr	r4, [pc, #76]	; (75a4 <sd_mmc_spi_start_write_block+0x54>)
    7558:	447c      	add	r4, pc
	uint8_t dummy = 0xFF;
    755a:	1dfb      	adds	r3, r7, #7
    755c:	22ff      	movs	r2, #255	; 0xff
    755e:	701a      	strb	r2, [r3, #0]
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    7560:	1dfb      	adds	r3, r7, #7
    7562:	4a11      	ldr	r2, [pc, #68]	; (75a8 <sd_mmc_spi_start_write_block+0x58>)
    7564:	447a      	add	r2, pc
    7566:	0010      	movs	r0, r2
    7568:	2201      	movs	r2, #1
    756a:	0019      	movs	r1, r3
    756c:	4b0f      	ldr	r3, [pc, #60]	; (75ac <sd_mmc_spi_start_write_block+0x5c>)
    756e:	58e3      	ldr	r3, [r4, r3]
    7570:	4798      	blx	r3
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    7572:	4b0f      	ldr	r3, [pc, #60]	; (75b0 <sd_mmc_spi_start_write_block+0x60>)
    7574:	447b      	add	r3, pc
    7576:	881b      	ldrh	r3, [r3, #0]
    7578:	2b01      	cmp	r3, #1
    757a:	d103      	bne.n	7584 <sd_mmc_spi_start_write_block+0x34>
		token = SPI_TOKEN_SINGLE_WRITE;
    757c:	1dbb      	adds	r3, r7, #6
    757e:	22fe      	movs	r2, #254	; 0xfe
    7580:	701a      	strb	r2, [r3, #0]
    7582:	e002      	b.n	758a <sd_mmc_spi_start_write_block+0x3a>
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
    7584:	1dbb      	adds	r3, r7, #6
    7586:	22fc      	movs	r2, #252	; 0xfc
    7588:	701a      	strb	r2, [r3, #0]
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    758a:	1dbb      	adds	r3, r7, #6
    758c:	4a09      	ldr	r2, [pc, #36]	; (75b4 <sd_mmc_spi_start_write_block+0x64>)
    758e:	447a      	add	r2, pc
    7590:	0010      	movs	r0, r2
    7592:	2201      	movs	r2, #1
    7594:	0019      	movs	r1, r3
    7596:	4b05      	ldr	r3, [pc, #20]	; (75ac <sd_mmc_spi_start_write_block+0x5c>)
    7598:	58e3      	ldr	r3, [r4, r3]
    759a:	4798      	blx	r3
}
    759c:	46c0      	nop			; (mov r8, r8)
    759e:	46bd      	mov	sp, r7
    75a0:	b003      	add	sp, #12
    75a2:	bd90      	pop	{r4, r7, pc}
    75a4:	0000a878 	.word	0x0000a878
    75a8:	1fff8fdc 	.word	0x1fff8fdc
    75ac:	000002cc 	.word	0x000002cc
    75b0:	1fff901a 	.word	0x1fff901a
    75b4:	1fff8fb2 	.word	0x1fff8fb2

000075b8 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    75b8:	b5b0      	push	{r4, r5, r7, lr}
    75ba:	b082      	sub	sp, #8
    75bc:	af00      	add	r7, sp, #0
    75be:	4c24      	ldr	r4, [pc, #144]	; (7650 <sd_mmc_spi_stop_write_block+0x98>)
    75c0:	447c      	add	r4, pc
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;
    75c2:	1dbb      	adds	r3, r7, #6
    75c4:	22ff      	movs	r2, #255	; 0xff
    75c6:	801a      	strh	r2, [r3, #0]

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    75c8:	1cbb      	adds	r3, r7, #2
    75ca:	2201      	movs	r2, #1
    75cc:	4252      	negs	r2, r2
    75ce:	801a      	strh	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    75d0:	1cbb      	adds	r3, r7, #2
    75d2:	4a20      	ldr	r2, [pc, #128]	; (7654 <sd_mmc_spi_stop_write_block+0x9c>)
    75d4:	447a      	add	r2, pc
    75d6:	0010      	movs	r0, r2
    75d8:	2202      	movs	r2, #2
    75da:	0019      	movs	r1, r3
    75dc:	4b1e      	ldr	r3, [pc, #120]	; (7658 <sd_mmc_spi_stop_write_block+0xa0>)
    75de:	58e3      	ldr	r3, [r4, r3]
    75e0:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    75e2:	1dbb      	adds	r3, r7, #6
    75e4:	881b      	ldrh	r3, [r3, #0]
    75e6:	1d79      	adds	r1, r7, #5
    75e8:	4a1c      	ldr	r2, [pc, #112]	; (765c <sd_mmc_spi_stop_write_block+0xa4>)
    75ea:	447a      	add	r2, pc
    75ec:	0010      	movs	r0, r2
    75ee:	2201      	movs	r2, #1
    75f0:	4d1b      	ldr	r5, [pc, #108]	; (7660 <sd_mmc_spi_stop_write_block+0xa8>)
    75f2:	5964      	ldr	r4, [r4, r5]
    75f4:	47a0      	blx	r4
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    75f6:	1d7b      	adds	r3, r7, #5
    75f8:	781b      	ldrb	r3, [r3, #0]
    75fa:	001a      	movs	r2, r3
    75fc:	2310      	movs	r3, #16
    75fe:	4013      	ands	r3, r2
    7600:	d105      	bne.n	760e <sd_mmc_spi_stop_write_block+0x56>
    7602:	1d7b      	adds	r3, r7, #5
    7604:	781b      	ldrb	r3, [r3, #0]
    7606:	001a      	movs	r2, r3
    7608:	2301      	movs	r3, #1
    760a:	4013      	ands	r3, r2
    760c:	d105      	bne.n	761a <sd_mmc_spi_stop_write_block+0x62>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    760e:	4b15      	ldr	r3, [pc, #84]	; (7664 <sd_mmc_spi_stop_write_block+0xac>)
    7610:	447b      	add	r3, pc
    7612:	2201      	movs	r2, #1
    7614:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Invalid Data Response Token 0x%x\n\r", __func__, resp);
		return false;
    7616:	2300      	movs	r3, #0
    7618:	e016      	b.n	7648 <sd_mmc_spi_stop_write_block+0x90>
	}
	// Check data response
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    761a:	1d7b      	adds	r3, r7, #5
    761c:	781b      	ldrb	r3, [r3, #0]
    761e:	001a      	movs	r2, r3
    7620:	231e      	movs	r3, #30
    7622:	4013      	ands	r3, r2
    7624:	2b04      	cmp	r3, #4
    7626:	d00d      	beq.n	7644 <sd_mmc_spi_stop_write_block+0x8c>
    7628:	2b0a      	cmp	r3, #10
    762a:	d105      	bne.n	7638 <sd_mmc_spi_stop_write_block+0x80>
	case SPI_TOKEN_DATA_RESP_ACCEPTED:
		break;
	case SPI_TOKEN_DATA_RESP_CRC_ERR:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    762c:	4b0e      	ldr	r3, [pc, #56]	; (7668 <sd_mmc_spi_stop_write_block+0xb0>)
    762e:	447b      	add	r3, pc
    7630:	2208      	movs	r2, #8
    7632:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks, SD_MMC_SPI_ERR_CRC, resp 0x%x\n\r",
				__func__, resp);
		return false;
    7634:	2300      	movs	r3, #0
    7636:	e007      	b.n	7648 <sd_mmc_spi_stop_write_block+0x90>
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    7638:	4b0c      	ldr	r3, [pc, #48]	; (766c <sd_mmc_spi_stop_write_block+0xb4>)
    763a:	447b      	add	r3, pc
    763c:	220a      	movs	r2, #10
    763e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    7640:	2300      	movs	r3, #0
    7642:	e001      	b.n	7648 <sd_mmc_spi_stop_write_block+0x90>
		break;
    7644:	46c0      	nop			; (mov r8, r8)
	}
	return true;
    7646:	2301      	movs	r3, #1
}
    7648:	0018      	movs	r0, r3
    764a:	46bd      	mov	sp, r7
    764c:	b002      	add	sp, #8
    764e:	bdb0      	pop	{r4, r5, r7, pc}
    7650:	0000a810 	.word	0x0000a810
    7654:	1fff8f6c 	.word	0x1fff8f6c
    7658:	000002cc 	.word	0x000002cc
    765c:	1fff8f56 	.word	0x1fff8f56
    7660:	000001e8 	.word	0x000001e8
    7664:	1fff8f73 	.word	0x1fff8f73
    7668:	1fff8f55 	.word	0x1fff8f55
    766c:	1fff8f49 	.word	0x1fff8f49

00007670 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    7670:	b5b0      	push	{r4, r5, r7, lr}
    7672:	b082      	sub	sp, #8
    7674:	af00      	add	r7, sp, #0
    7676:	4c25      	ldr	r4, [pc, #148]	; (770c <sd_mmc_spi_stop_multiwrite_block+0x9c>)
    7678:	447c      	add	r4, pc
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    767a:	4b25      	ldr	r3, [pc, #148]	; (7710 <sd_mmc_spi_stop_multiwrite_block+0xa0>)
    767c:	447b      	add	r3, pc
    767e:	881b      	ldrh	r3, [r3, #0]
    7680:	2b01      	cmp	r3, #1
    7682:	d101      	bne.n	7688 <sd_mmc_spi_stop_multiwrite_block+0x18>
		return true; // Single block write
    7684:	2301      	movs	r3, #1
    7686:	e03c      	b.n	7702 <sd_mmc_spi_stop_multiwrite_block+0x92>
	}
	if (sd_mmc_spi_nb_block >
    7688:	4b22      	ldr	r3, [pc, #136]	; (7714 <sd_mmc_spi_stop_multiwrite_block+0xa4>)
    768a:	447b      	add	r3, pc
    768c:	881b      	ldrh	r3, [r3, #0]
    768e:	001d      	movs	r5, r3
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    7690:	4b21      	ldr	r3, [pc, #132]	; (7718 <sd_mmc_spi_stop_multiwrite_block+0xa8>)
    7692:	447b      	add	r3, pc
    7694:	681a      	ldr	r2, [r3, #0]
    7696:	4b21      	ldr	r3, [pc, #132]	; (771c <sd_mmc_spi_stop_multiwrite_block+0xac>)
    7698:	447b      	add	r3, pc
    769a:	881b      	ldrh	r3, [r3, #0]
    769c:	0019      	movs	r1, r3
    769e:	4b20      	ldr	r3, [pc, #128]	; (7720 <sd_mmc_spi_stop_multiwrite_block+0xb0>)
    76a0:	58e3      	ldr	r3, [r4, r3]
    76a2:	0010      	movs	r0, r2
    76a4:	4798      	blx	r3
    76a6:	0003      	movs	r3, r0
	if (sd_mmc_spi_nb_block >
    76a8:	429d      	cmp	r5, r3
    76aa:	d901      	bls.n	76b0 <sd_mmc_spi_stop_multiwrite_block+0x40>
		return true; // It is not the End of multi write
    76ac:	2301      	movs	r3, #1
    76ae:	e028      	b.n	7702 <sd_mmc_spi_stop_multiwrite_block+0x92>
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    76b0:	1dfb      	adds	r3, r7, #7
    76b2:	22ff      	movs	r2, #255	; 0xff
    76b4:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    76b6:	1dfb      	adds	r3, r7, #7
    76b8:	4a1a      	ldr	r2, [pc, #104]	; (7724 <sd_mmc_spi_stop_multiwrite_block+0xb4>)
    76ba:	447a      	add	r2, pc
    76bc:	0010      	movs	r0, r2
    76be:	2201      	movs	r2, #1
    76c0:	0019      	movs	r1, r3
    76c2:	4b19      	ldr	r3, [pc, #100]	; (7728 <sd_mmc_spi_stop_multiwrite_block+0xb8>)
    76c4:	58e3      	ldr	r3, [r4, r3]
    76c6:	4798      	blx	r3
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    76c8:	1dfb      	adds	r3, r7, #7
    76ca:	22fd      	movs	r2, #253	; 0xfd
    76cc:	701a      	strb	r2, [r3, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    76ce:	1dfb      	adds	r3, r7, #7
    76d0:	4a16      	ldr	r2, [pc, #88]	; (772c <sd_mmc_spi_stop_multiwrite_block+0xbc>)
    76d2:	447a      	add	r2, pc
    76d4:	0010      	movs	r0, r2
    76d6:	2201      	movs	r2, #1
    76d8:	0019      	movs	r1, r3
    76da:	4b13      	ldr	r3, [pc, #76]	; (7728 <sd_mmc_spi_stop_multiwrite_block+0xb8>)
    76dc:	58e3      	ldr	r3, [r4, r3]
    76de:	4798      	blx	r3
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    76e0:	4b13      	ldr	r3, [pc, #76]	; (7730 <sd_mmc_spi_stop_multiwrite_block+0xc0>)
    76e2:	447b      	add	r3, pc
    76e4:	4798      	blx	r3
    76e6:	0003      	movs	r3, r0
    76e8:	001a      	movs	r2, r3
    76ea:	2301      	movs	r3, #1
    76ec:	4053      	eors	r3, r2
    76ee:	b2db      	uxtb	r3, r3
    76f0:	2b00      	cmp	r3, #0
    76f2:	d005      	beq.n	7700 <sd_mmc_spi_stop_multiwrite_block+0x90>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    76f4:	4b0f      	ldr	r3, [pc, #60]	; (7734 <sd_mmc_spi_stop_multiwrite_block+0xc4>)
    76f6:	447b      	add	r3, pc
    76f8:	2205      	movs	r2, #5
    76fa:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
    76fc:	2300      	movs	r3, #0
    76fe:	e000      	b.n	7702 <sd_mmc_spi_stop_multiwrite_block+0x92>
	}
	return true;
    7700:	2301      	movs	r3, #1
}
    7702:	0018      	movs	r0, r3
    7704:	46bd      	mov	sp, r7
    7706:	b002      	add	sp, #8
    7708:	bdb0      	pop	{r4, r5, r7, pc}
    770a:	46c0      	nop			; (mov r8, r8)
    770c:	0000a758 	.word	0x0000a758
    7710:	1fff8f12 	.word	0x1fff8f12
    7714:	1fff8f04 	.word	0x1fff8f04
    7718:	1fff8ef6 	.word	0x1fff8ef6
    771c:	1fff8ef4 	.word	0x1fff8ef4
    7720:	00000204 	.word	0x00000204
    7724:	1fff8e86 	.word	0x1fff8e86
    7728:	000002cc 	.word	0x000002cc
    772c:	1fff8e6e 	.word	0x1fff8e6e
    7730:	fffffd03 	.word	0xfffffd03
    7734:	1fff8e8d 	.word	0x1fff8e8d

00007738 <sd_mmc_spi_init>:
{
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
    7738:	b590      	push	{r4, r7, lr}
    773a:	b091      	sub	sp, #68	; 0x44
    773c:	af00      	add	r7, sp, #0
    773e:	4c28      	ldr	r4, [pc, #160]	; (77e0 <sd_mmc_spi_init+0xa8>)
    7740:	447c      	add	r4, pc
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7742:	4b28      	ldr	r3, [pc, #160]	; (77e4 <sd_mmc_spi_init+0xac>)
    7744:	447b      	add	r3, pc
    7746:	2200      	movs	r2, #0
    7748:	701a      	strb	r2, [r3, #0]

	// Initialize card detect pin
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);
    774a:	233c      	movs	r3, #60	; 0x3c
    774c:	18fb      	adds	r3, r7, r3
    774e:	0018      	movs	r0, r3
    7750:	4b25      	ldr	r3, [pc, #148]	; (77e8 <sd_mmc_spi_init+0xb0>)
    7752:	447b      	add	r3, pc
    7754:	4798      	blx	r3
	pin_conf.input_pull = PORT_PIN_PULL_UP;
	port_pin_set_config(SD_MMC_0_CD_GPIO, &pin_conf);
#endif
	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);
    7756:	1d3b      	adds	r3, r7, #4
    7758:	0018      	movs	r0, r3
    775a:	4b24      	ldr	r3, [pc, #144]	; (77ec <sd_mmc_spi_init+0xb4>)
    775c:	447b      	add	r3, pc
    775e:	4798      	blx	r3

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    7760:	1d3b      	adds	r3, r7, #4
    7762:	2280      	movs	r2, #128	; 0x80
    7764:	0292      	lsls	r2, r2, #10
    7766:	60da      	str	r2, [r3, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    7768:	1d3b      	adds	r3, r7, #4
    776a:	4a21      	ldr	r2, [pc, #132]	; (77f0 <sd_mmc_spi_init+0xb8>)
    776c:	629a      	str	r2, [r3, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    776e:	1d3b      	adds	r3, r7, #4
    7770:	4a20      	ldr	r2, [pc, #128]	; (77f4 <sd_mmc_spi_init+0xbc>)
    7772:	62da      	str	r2, [r3, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    7774:	1d3b      	adds	r3, r7, #4
    7776:	4a20      	ldr	r2, [pc, #128]	; (77f8 <sd_mmc_spi_init+0xc0>)
    7778:	631a      	str	r2, [r3, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    777a:	1d3b      	adds	r3, r7, #4
    777c:	4a1f      	ldr	r2, [pc, #124]	; (77fc <sd_mmc_spi_init+0xc4>)
    777e:	635a      	str	r2, [r3, #52]	; 0x34
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
    7780:	1d3b      	adds	r3, r7, #4
    7782:	2224      	movs	r2, #36	; 0x24
    7784:	2100      	movs	r1, #0
    7786:	5499      	strb	r1, [r3, r2]
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    7788:	1d3b      	adds	r3, r7, #4
    778a:	4a1d      	ldr	r2, [pc, #116]	; (7800 <sd_mmc_spi_init+0xc8>)
    778c:	619a      	str	r2, [r3, #24]

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    778e:	1d3b      	adds	r3, r7, #4
    7790:	491c      	ldr	r1, [pc, #112]	; (7804 <sd_mmc_spi_init+0xcc>)
    7792:	4a1d      	ldr	r2, [pc, #116]	; (7808 <sd_mmc_spi_init+0xd0>)
    7794:	447a      	add	r2, pc
    7796:	0010      	movs	r0, r2
    7798:	001a      	movs	r2, r3
    779a:	4b1c      	ldr	r3, [pc, #112]	; (780c <sd_mmc_spi_init+0xd4>)
    779c:	58e3      	ldr	r3, [r4, r3]
    779e:	4798      	blx	r3
	spi_enable(&sd_mmc_master);
    77a0:	4b1b      	ldr	r3, [pc, #108]	; (7810 <sd_mmc_spi_init+0xd8>)
    77a2:	447b      	add	r3, pc
    77a4:	0018      	movs	r0, r3
    77a6:	4b1b      	ldr	r3, [pc, #108]	; (7814 <sd_mmc_spi_init+0xdc>)
    77a8:	447b      	add	r3, pc
    77aa:	4798      	blx	r3

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
    77ac:	4b1a      	ldr	r3, [pc, #104]	; (7818 <sd_mmc_spi_init+0xe0>)
    77ae:	447b      	add	r3, pc
    77b0:	0018      	movs	r0, r3
    77b2:	4b1a      	ldr	r3, [pc, #104]	; (781c <sd_mmc_spi_init+0xe4>)
    77b4:	447b      	add	r3, pc
    77b6:	4798      	blx	r3
	slave_configs[0].ss_pin = ss_pins[0];
    77b8:	4b19      	ldr	r3, [pc, #100]	; (7820 <sd_mmc_spi_init+0xe8>)
    77ba:	58e3      	ldr	r3, [r4, r3]
    77bc:	781a      	ldrb	r2, [r3, #0]
    77be:	4b19      	ldr	r3, [pc, #100]	; (7824 <sd_mmc_spi_init+0xec>)
    77c0:	447b      	add	r3, pc
    77c2:	701a      	strb	r2, [r3, #0]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
    77c4:	4b18      	ldr	r3, [pc, #96]	; (7828 <sd_mmc_spi_init+0xf0>)
    77c6:	447b      	add	r3, pc
    77c8:	001a      	movs	r2, r3
    77ca:	4b18      	ldr	r3, [pc, #96]	; (782c <sd_mmc_spi_init+0xf4>)
    77cc:	447b      	add	r3, pc
    77ce:	0011      	movs	r1, r2
    77d0:	0018      	movs	r0, r3
    77d2:	4b17      	ldr	r3, [pc, #92]	; (7830 <sd_mmc_spi_init+0xf8>)
    77d4:	447b      	add	r3, pc
    77d6:	4798      	blx	r3
}
    77d8:	46c0      	nop			; (mov r8, r8)
    77da:	46bd      	mov	sp, r7
    77dc:	b011      	add	sp, #68	; 0x44
    77de:	bd90      	pop	{r4, r7, pc}
    77e0:	0000a690 	.word	0x0000a690
    77e4:	1fff8e3f 	.word	0x1fff8e3f
    77e8:	fffff98f 	.word	0xfffff98f
    77ec:	fffffa49 	.word	0xfffffa49
    77f0:	00100002 	.word	0x00100002
    77f4:	00110002 	.word	0x00110002
    77f8:	00120002 	.word	0x00120002
    77fc:	00130002 	.word	0x00130002
    7800:	00061a80 	.word	0x00061a80
    7804:	42000c00 	.word	0x42000c00
    7808:	1fff8dac 	.word	0x1fff8dac
    780c:	000000b8 	.word	0x000000b8
    7810:	1fff8d9e 	.word	0x1fff8d9e
    7814:	fffffb25 	.word	0xfffffb25
    7818:	1fff8dd2 	.word	0x1fff8dd2
    781c:	fffffa81 	.word	0xfffffa81
    7820:	000001dc 	.word	0x000001dc
    7824:	1fff8dc0 	.word	0x1fff8dc0
    7828:	1fff8dba 	.word	0x1fff8dba
    782c:	1fff8db0 	.word	0x1fff8db0
    7830:	fffffa85 	.word	0xfffffa85

00007834 <sd_mmc_spi_select_device>:

void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
    7834:	b590      	push	{r4, r7, lr}
    7836:	b083      	sub	sp, #12
    7838:	af00      	add	r7, sp, #0
    783a:	0004      	movs	r4, r0
    783c:	6039      	str	r1, [r7, #0]
    783e:	0010      	movs	r0, r2
    7840:	0019      	movs	r1, r3
    7842:	1dfb      	adds	r3, r7, #7
    7844:	1c22      	adds	r2, r4, #0
    7846:	701a      	strb	r2, [r3, #0]
    7848:	1dbb      	adds	r3, r7, #6
    784a:	1c02      	adds	r2, r0, #0
    784c:	701a      	strb	r2, [r3, #0]
    784e:	1d7b      	adds	r3, r7, #5
    7850:	1c0a      	adds	r2, r1, #0
    7852:	701a      	strb	r2, [r3, #0]
    7854:	4c18      	ldr	r4, [pc, #96]	; (78b8 <sd_mmc_spi_select_device+0x84>)
    7856:	447c      	add	r4, pc
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7858:	4b18      	ldr	r3, [pc, #96]	; (78bc <sd_mmc_spi_select_device+0x88>)
    785a:	447b      	add	r3, pc
    785c:	2200      	movs	r2, #0
    785e:	701a      	strb	r2, [r3, #0]

#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
    7860:	683b      	ldr	r3, [r7, #0]
    7862:	4a17      	ldr	r2, [pc, #92]	; (78c0 <sd_mmc_spi_select_device+0x8c>)
    7864:	4293      	cmp	r3, r2
    7866:	d907      	bls.n	7878 <sd_mmc_spi_select_device+0x44>
		clock = SD_MMC_SPI_MAX_CLOCK;
    7868:	4b15      	ldr	r3, [pc, #84]	; (78c0 <sd_mmc_spi_select_device+0x8c>)
    786a:	603b      	str	r3, [r7, #0]
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    786c:	e004      	b.n	7878 <sd_mmc_spi_select_device+0x44>
		clock -= clock / 8;
    786e:	683b      	ldr	r3, [r7, #0]
    7870:	08db      	lsrs	r3, r3, #3
    7872:	683a      	ldr	r2, [r7, #0]
    7874:	1ad3      	subs	r3, r2, r3
    7876:	603b      	str	r3, [r7, #0]
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    7878:	683b      	ldr	r3, [r7, #0]
    787a:	4a12      	ldr	r2, [pc, #72]	; (78c4 <sd_mmc_spi_select_device+0x90>)
    787c:	447a      	add	r2, pc
    787e:	0019      	movs	r1, r3
    7880:	0010      	movs	r0, r2
    7882:	4b11      	ldr	r3, [pc, #68]	; (78c8 <sd_mmc_spi_select_device+0x94>)
    7884:	58e3      	ldr	r3, [r4, r3]
    7886:	4798      	blx	r3
    7888:	0003      	movs	r3, r0
    788a:	2b17      	cmp	r3, #23
    788c:	d0ef      	beq.n	786e <sd_mmc_spi_select_device+0x3a>
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    788e:	1dfb      	adds	r3, r7, #7
    7890:	781a      	ldrb	r2, [r3, #0]
    7892:	0013      	movs	r3, r2
    7894:	005b      	lsls	r3, r3, #1
    7896:	189b      	adds	r3, r3, r2
    7898:	4a0c      	ldr	r2, [pc, #48]	; (78cc <sd_mmc_spi_select_device+0x98>)
    789a:	447a      	add	r2, pc
    789c:	189b      	adds	r3, r3, r2
    789e:	4a0c      	ldr	r2, [pc, #48]	; (78d0 <sd_mmc_spi_select_device+0x9c>)
    78a0:	447a      	add	r2, pc
    78a2:	0010      	movs	r0, r2
    78a4:	2201      	movs	r2, #1
    78a6:	0019      	movs	r1, r3
    78a8:	4b0a      	ldr	r3, [pc, #40]	; (78d4 <sd_mmc_spi_select_device+0xa0>)
    78aa:	58e3      	ldr	r3, [r4, r3]
    78ac:	4798      	blx	r3
}
    78ae:	46c0      	nop			; (mov r8, r8)
    78b0:	46bd      	mov	sp, r7
    78b2:	b003      	add	sp, #12
    78b4:	bd90      	pop	{r4, r7, pc}
    78b6:	46c0      	nop			; (mov r8, r8)
    78b8:	0000a57a 	.word	0x0000a57a
    78bc:	1fff8d29 	.word	0x1fff8d29
    78c0:	003d0900 	.word	0x003d0900
    78c4:	1fff8cc4 	.word	0x1fff8cc4
    78c8:	00000260 	.word	0x00000260
    78cc:	1fff8ce2 	.word	0x1fff8ce2
    78d0:	1fff8ca0 	.word	0x1fff8ca0
    78d4:	00000004 	.word	0x00000004

000078d8 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
    78d8:	b590      	push	{r4, r7, lr}
    78da:	b083      	sub	sp, #12
    78dc:	af00      	add	r7, sp, #0
    78de:	0002      	movs	r2, r0
    78e0:	1dfb      	adds	r3, r7, #7
    78e2:	701a      	strb	r2, [r3, #0]
    78e4:	4c0c      	ldr	r4, [pc, #48]	; (7918 <sd_mmc_spi_deselect_device+0x40>)
    78e6:	447c      	add	r4, pc
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    78e8:	4b0c      	ldr	r3, [pc, #48]	; (791c <sd_mmc_spi_deselect_device+0x44>)
    78ea:	447b      	add	r3, pc
    78ec:	2200      	movs	r2, #0
    78ee:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    78f0:	1dfb      	adds	r3, r7, #7
    78f2:	781a      	ldrb	r2, [r3, #0]
    78f4:	0013      	movs	r3, r2
    78f6:	005b      	lsls	r3, r3, #1
    78f8:	189b      	adds	r3, r3, r2
    78fa:	4a09      	ldr	r2, [pc, #36]	; (7920 <sd_mmc_spi_deselect_device+0x48>)
    78fc:	447a      	add	r2, pc
    78fe:	189b      	adds	r3, r3, r2
    7900:	4a08      	ldr	r2, [pc, #32]	; (7924 <sd_mmc_spi_deselect_device+0x4c>)
    7902:	447a      	add	r2, pc
    7904:	0010      	movs	r0, r2
    7906:	2200      	movs	r2, #0
    7908:	0019      	movs	r1, r3
    790a:	4b07      	ldr	r3, [pc, #28]	; (7928 <sd_mmc_spi_deselect_device+0x50>)
    790c:	58e3      	ldr	r3, [r4, r3]
    790e:	4798      	blx	r3
}
    7910:	46c0      	nop			; (mov r8, r8)
    7912:	46bd      	mov	sp, r7
    7914:	b003      	add	sp, #12
    7916:	bd90      	pop	{r4, r7, pc}
    7918:	0000a4ea 	.word	0x0000a4ea
    791c:	1fff8c99 	.word	0x1fff8c99
    7920:	1fff8c80 	.word	0x1fff8c80
    7924:	1fff8c3e 	.word	0x1fff8c3e
    7928:	00000004 	.word	0x00000004

0000792c <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    792c:	b590      	push	{r4, r7, lr}
    792e:	b083      	sub	sp, #12
    7930:	af00      	add	r7, sp, #0
    7932:	4c11      	ldr	r4, [pc, #68]	; (7978 <sd_mmc_spi_send_clock+0x4c>)
    7934:	447c      	add	r4, pc
	uint8_t i;
	uint8_t dummy = 0xFF;
    7936:	1dbb      	adds	r3, r7, #6
    7938:	22ff      	movs	r2, #255	; 0xff
    793a:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    793c:	4b0f      	ldr	r3, [pc, #60]	; (797c <sd_mmc_spi_send_clock+0x50>)
    793e:	447b      	add	r3, pc
    7940:	2200      	movs	r2, #0
    7942:	701a      	strb	r2, [r3, #0]
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
    7944:	1dfb      	adds	r3, r7, #7
    7946:	2200      	movs	r2, #0
    7948:	701a      	strb	r2, [r3, #0]
    794a:	e00d      	b.n	7968 <sd_mmc_spi_send_clock+0x3c>
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    794c:	1dbb      	adds	r3, r7, #6
    794e:	4a0c      	ldr	r2, [pc, #48]	; (7980 <sd_mmc_spi_send_clock+0x54>)
    7950:	447a      	add	r2, pc
    7952:	0010      	movs	r0, r2
    7954:	2201      	movs	r2, #1
    7956:	0019      	movs	r1, r3
    7958:	4b0a      	ldr	r3, [pc, #40]	; (7984 <sd_mmc_spi_send_clock+0x58>)
    795a:	58e3      	ldr	r3, [r4, r3]
    795c:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    795e:	1dfb      	adds	r3, r7, #7
    7960:	781a      	ldrb	r2, [r3, #0]
    7962:	1dfb      	adds	r3, r7, #7
    7964:	3201      	adds	r2, #1
    7966:	701a      	strb	r2, [r3, #0]
    7968:	1dfb      	adds	r3, r7, #7
    796a:	781b      	ldrb	r3, [r3, #0]
    796c:	2b09      	cmp	r3, #9
    796e:	d9ed      	bls.n	794c <sd_mmc_spi_send_clock+0x20>
	}
}
    7970:	46c0      	nop			; (mov r8, r8)
    7972:	46bd      	mov	sp, r7
    7974:	b003      	add	sp, #12
    7976:	bd90      	pop	{r4, r7, pc}
    7978:	0000a49c 	.word	0x0000a49c
    797c:	1fff8c45 	.word	0x1fff8c45
    7980:	1fff8bf0 	.word	0x1fff8bf0
    7984:	000002cc 	.word	0x000002cc

00007988 <sd_mmc_spi_send_cmd>:

bool sd_mmc_spi_send_cmd(sdmmc_cmd_def_t cmd, uint32_t arg)
{
    7988:	b5b0      	push	{r4, r5, r7, lr}
    798a:	b084      	sub	sp, #16
    798c:	af02      	add	r7, sp, #8
    798e:	6078      	str	r0, [r7, #4]
    7990:	6039      	str	r1, [r7, #0]
    7992:	4d08      	ldr	r5, [pc, #32]	; (79b4 <sd_mmc_spi_send_cmd+0x2c>)
    7994:	447d      	add	r5, pc
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    7996:	6839      	ldr	r1, [r7, #0]
    7998:	6878      	ldr	r0, [r7, #4]
    799a:	2300      	movs	r3, #0
    799c:	9300      	str	r3, [sp, #0]
    799e:	2300      	movs	r3, #0
    79a0:	2200      	movs	r2, #0
    79a2:	4c05      	ldr	r4, [pc, #20]	; (79b8 <sd_mmc_spi_send_cmd+0x30>)
    79a4:	592c      	ldr	r4, [r5, r4]
    79a6:	47a0      	blx	r4
    79a8:	0003      	movs	r3, r0
}
    79aa:	0018      	movs	r0, r3
    79ac:	46bd      	mov	sp, r7
    79ae:	b002      	add	sp, #8
    79b0:	bdb0      	pop	{r4, r5, r7, pc}
    79b2:	46c0      	nop			; (mov r8, r8)
    79b4:	0000a43c 	.word	0x0000a43c
    79b8:	00000130 	.word	0x00000130

000079bc <sd_mmc_spi_adtc_start>:

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    79bc:	b5b0      	push	{r4, r5, r7, lr}
    79be:	b088      	sub	sp, #32
    79c0:	af00      	add	r7, sp, #0
    79c2:	60f8      	str	r0, [r7, #12]
    79c4:	60b9      	str	r1, [r7, #8]
    79c6:	0019      	movs	r1, r3
    79c8:	1dbb      	adds	r3, r7, #6
    79ca:	801a      	strh	r2, [r3, #0]
    79cc:	1d3b      	adds	r3, r7, #4
    79ce:	1c0a      	adds	r2, r1, #0
    79d0:	801a      	strh	r2, [r3, #0]
    79d2:	4c8a      	ldr	r4, [pc, #552]	; (7bfc <sd_mmc_spi_adtc_start+0x240>)
    79d4:	447c      	add	r4, pc
	uint8_t dummy = 0xFF;
    79d6:	231b      	movs	r3, #27
    79d8:	18fb      	adds	r3, r7, r3
    79da:	22ff      	movs	r2, #255	; 0xff
    79dc:	701a      	strb	r2, [r3, #0]
	uint8_t cmd_token[6];
	uint8_t ncr_timeout;
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;
    79de:	231c      	movs	r3, #28
    79e0:	18fb      	adds	r3, r7, r3
    79e2:	22ff      	movs	r2, #255	; 0xff
    79e4:	801a      	strh	r2, [r3, #0]

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    79e6:	4b86      	ldr	r3, [pc, #536]	; (7c00 <sd_mmc_spi_adtc_start+0x244>)
    79e8:	447b      	add	r3, pc
    79ea:	2200      	movs	r2, #0
    79ec:	701a      	strb	r2, [r3, #0]

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    79ee:	68fb      	ldr	r3, [r7, #12]
    79f0:	b2db      	uxtb	r3, r3
    79f2:	223f      	movs	r2, #63	; 0x3f
    79f4:	4013      	ands	r3, r2
    79f6:	b2db      	uxtb	r3, r3
    79f8:	2240      	movs	r2, #64	; 0x40
    79fa:	4313      	orrs	r3, r2
    79fc:	b2da      	uxtb	r2, r3
    79fe:	2314      	movs	r3, #20
    7a00:	18fb      	adds	r3, r7, r3
    7a02:	701a      	strb	r2, [r3, #0]
	cmd_token[1] = arg >> 24;
    7a04:	68bb      	ldr	r3, [r7, #8]
    7a06:	0e1b      	lsrs	r3, r3, #24
    7a08:	b2da      	uxtb	r2, r3
    7a0a:	2314      	movs	r3, #20
    7a0c:	18fb      	adds	r3, r7, r3
    7a0e:	705a      	strb	r2, [r3, #1]
	cmd_token[2] = arg >> 16;
    7a10:	68bb      	ldr	r3, [r7, #8]
    7a12:	0c1b      	lsrs	r3, r3, #16
    7a14:	b2da      	uxtb	r2, r3
    7a16:	2314      	movs	r3, #20
    7a18:	18fb      	adds	r3, r7, r3
    7a1a:	709a      	strb	r2, [r3, #2]
	cmd_token[3] = arg >> 8;
    7a1c:	68bb      	ldr	r3, [r7, #8]
    7a1e:	0a1b      	lsrs	r3, r3, #8
    7a20:	b2da      	uxtb	r2, r3
    7a22:	2314      	movs	r3, #20
    7a24:	18fb      	adds	r3, r7, r3
    7a26:	70da      	strb	r2, [r3, #3]
	cmd_token[4] = arg;
    7a28:	68bb      	ldr	r3, [r7, #8]
    7a2a:	b2da      	uxtb	r2, r3
    7a2c:	2314      	movs	r3, #20
    7a2e:	18fb      	adds	r3, r7, r3
    7a30:	711a      	strb	r2, [r3, #4]
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    7a32:	2314      	movs	r3, #20
    7a34:	18fb      	adds	r3, r7, r3
    7a36:	2105      	movs	r1, #5
    7a38:	0018      	movs	r0, r3
    7a3a:	4b72      	ldr	r3, [pc, #456]	; (7c04 <sd_mmc_spi_adtc_start+0x248>)
    7a3c:	447b      	add	r3, pc
    7a3e:	4798      	blx	r3
    7a40:	0003      	movs	r3, r0
    7a42:	001a      	movs	r2, r3
    7a44:	2314      	movs	r3, #20
    7a46:	18fb      	adds	r3, r7, r3
    7a48:	715a      	strb	r2, [r3, #5]

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    7a4a:	231b      	movs	r3, #27
    7a4c:	18fb      	adds	r3, r7, r3
    7a4e:	4a6e      	ldr	r2, [pc, #440]	; (7c08 <sd_mmc_spi_adtc_start+0x24c>)
    7a50:	447a      	add	r2, pc
    7a52:	0010      	movs	r0, r2
    7a54:	2201      	movs	r2, #1
    7a56:	0019      	movs	r1, r3
    7a58:	4b6c      	ldr	r3, [pc, #432]	; (7c0c <sd_mmc_spi_adtc_start+0x250>)
    7a5a:	58e3      	ldr	r3, [r4, r3]
    7a5c:	4798      	blx	r3
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    7a5e:	2314      	movs	r3, #20
    7a60:	18fb      	adds	r3, r7, r3
    7a62:	4a6b      	ldr	r2, [pc, #428]	; (7c10 <sd_mmc_spi_adtc_start+0x254>)
    7a64:	447a      	add	r2, pc
    7a66:	0010      	movs	r0, r2
    7a68:	2206      	movs	r2, #6
    7a6a:	0019      	movs	r1, r3
    7a6c:	4b67      	ldr	r3, [pc, #412]	; (7c0c <sd_mmc_spi_adtc_start+0x250>)
    7a6e:	58e3      	ldr	r3, [r4, r3]
    7a70:	4798      	blx	r3

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    7a72:	2313      	movs	r3, #19
    7a74:	18fb      	adds	r3, r7, r3
    7a76:	22ff      	movs	r2, #255	; 0xff
    7a78:	701a      	strb	r2, [r3, #0]
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    7a7a:	231c      	movs	r3, #28
    7a7c:	18fb      	adds	r3, r7, r3
    7a7e:	881b      	ldrh	r3, [r3, #0]
    7a80:	2213      	movs	r2, #19
    7a82:	18b9      	adds	r1, r7, r2
    7a84:	4a63      	ldr	r2, [pc, #396]	; (7c14 <sd_mmc_spi_adtc_start+0x258>)
    7a86:	447a      	add	r2, pc
    7a88:	0010      	movs	r0, r2
    7a8a:	2201      	movs	r2, #1
    7a8c:	4d62      	ldr	r5, [pc, #392]	; (7c18 <sd_mmc_spi_adtc_start+0x25c>)
    7a8e:	5965      	ldr	r5, [r4, r5]
    7a90:	47a8      	blx	r5
			dummy2);
	ncr_timeout = 7;
    7a92:	231f      	movs	r3, #31
    7a94:	18fb      	adds	r3, r7, r3
    7a96:	2207      	movs	r2, #7
    7a98:	701a      	strb	r2, [r3, #0]
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    7a9a:	231c      	movs	r3, #28
    7a9c:	18fb      	adds	r3, r7, r3
    7a9e:	881b      	ldrh	r3, [r3, #0]
    7aa0:	2213      	movs	r2, #19
    7aa2:	18b9      	adds	r1, r7, r2
    7aa4:	4a5d      	ldr	r2, [pc, #372]	; (7c1c <sd_mmc_spi_adtc_start+0x260>)
    7aa6:	447a      	add	r2, pc
    7aa8:	0010      	movs	r0, r2
    7aaa:	2201      	movs	r2, #1
    7aac:	4d5a      	ldr	r5, [pc, #360]	; (7c18 <sd_mmc_spi_adtc_start+0x25c>)
    7aae:	5965      	ldr	r5, [r4, r5]
    7ab0:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    7ab2:	2313      	movs	r3, #19
    7ab4:	18fb      	adds	r3, r7, r3
    7ab6:	781b      	ldrb	r3, [r3, #0]
    7ab8:	b25b      	sxtb	r3, r3
    7aba:	2b00      	cmp	r3, #0
    7abc:	da11      	bge.n	7ae2 <sd_mmc_spi_adtc_start+0x126>
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    7abe:	231f      	movs	r3, #31
    7ac0:	18fb      	adds	r3, r7, r3
    7ac2:	221f      	movs	r2, #31
    7ac4:	18ba      	adds	r2, r7, r2
    7ac6:	7812      	ldrb	r2, [r2, #0]
    7ac8:	3a01      	subs	r2, #1
    7aca:	701a      	strb	r2, [r3, #0]
    7acc:	231f      	movs	r3, #31
    7ace:	18fb      	adds	r3, r7, r3
    7ad0:	781b      	ldrb	r3, [r3, #0]
    7ad2:	2b00      	cmp	r3, #0
    7ad4:	d1e1      	bne.n	7a9a <sd_mmc_spi_adtc_start+0xde>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    7ad6:	4b52      	ldr	r3, [pc, #328]	; (7c20 <sd_mmc_spi_adtc_start+0x264>)
    7ad8:	447b      	add	r3, pc
    7ada:	2202      	movs	r2, #2
    7adc:	701a      	strb	r2, [r3, #0]
			return false;
    7ade:	2300      	movs	r3, #0
    7ae0:	e088      	b.n	7bf4 <sd_mmc_spi_adtc_start+0x238>
			break;
    7ae2:	46c0      	nop			; (mov r8, r8)
		}
	}

	// Save R1 (Specific to SPI interface) in 32 bit response
	// The R1_SPI_IDLE bit can be checked by high level
	sd_mmc_spi_response_32 = r1;
    7ae4:	2313      	movs	r3, #19
    7ae6:	18fb      	adds	r3, r7, r3
    7ae8:	781b      	ldrb	r3, [r3, #0]
    7aea:	001a      	movs	r2, r3
    7aec:	4b4d      	ldr	r3, [pc, #308]	; (7c24 <sd_mmc_spi_adtc_start+0x268>)
    7aee:	447b      	add	r3, pc
    7af0:	601a      	str	r2, [r3, #0]

	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
    7af2:	2313      	movs	r3, #19
    7af4:	18fb      	adds	r3, r7, r3
    7af6:	781b      	ldrb	r3, [r3, #0]
    7af8:	001a      	movs	r2, r3
    7afa:	2308      	movs	r3, #8
    7afc:	4013      	ands	r3, r2
    7afe:	d005      	beq.n	7b0c <sd_mmc_spi_adtc_start+0x150>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    7b00:	4b49      	ldr	r3, [pc, #292]	; (7c28 <sd_mmc_spi_adtc_start+0x26c>)
    7b02:	447b      	add	r3, pc
    7b04:	2206      	movs	r2, #6
    7b06:	701a      	strb	r2, [r3, #0]
		return false;
    7b08:	2300      	movs	r3, #0
    7b0a:	e073      	b.n	7bf4 <sd_mmc_spi_adtc_start+0x238>
	}
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    7b0c:	2313      	movs	r3, #19
    7b0e:	18fb      	adds	r3, r7, r3
    7b10:	781b      	ldrb	r3, [r3, #0]
    7b12:	001a      	movs	r2, r3
    7b14:	2304      	movs	r3, #4
    7b16:	4013      	ands	r3, r2
    7b18:	d005      	beq.n	7b26 <sd_mmc_spi_adtc_start+0x16a>
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 ILLEGAL_COMMAND\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    7b1a:	4b44      	ldr	r3, [pc, #272]	; (7c2c <sd_mmc_spi_adtc_start+0x270>)
    7b1c:	447b      	add	r3, pc
    7b1e:	2209      	movs	r2, #9
    7b20:	701a      	strb	r2, [r3, #0]
		return false;
    7b22:	2300      	movs	r3, #0
    7b24:	e066      	b.n	7bf4 <sd_mmc_spi_adtc_start+0x238>
	}
	if (r1 & ~R1_SPI_IDLE) {
    7b26:	2313      	movs	r3, #19
    7b28:	18fb      	adds	r3, r7, r3
    7b2a:	781b      	ldrb	r3, [r3, #0]
    7b2c:	001a      	movs	r2, r3
    7b2e:	2301      	movs	r3, #1
    7b30:	439a      	bics	r2, r3
    7b32:	1e13      	subs	r3, r2, #0
    7b34:	d005      	beq.n	7b42 <sd_mmc_spi_adtc_start+0x186>
		// Other error
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%x, R1 error\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    7b36:	4b3e      	ldr	r3, [pc, #248]	; (7c30 <sd_mmc_spi_adtc_start+0x274>)
    7b38:	447b      	add	r3, pc
    7b3a:	2201      	movs	r2, #1
    7b3c:	701a      	strb	r2, [r3, #0]
		return false;
    7b3e:	2300      	movs	r3, #0
    7b40:	e058      	b.n	7bf4 <sd_mmc_spi_adtc_start+0x238>
	}

	// Manage other responses
	if (cmd & SDMMC_RESP_BUSY) {
    7b42:	68fa      	ldr	r2, [r7, #12]
    7b44:	2380      	movs	r3, #128	; 0x80
    7b46:	019b      	lsls	r3, r3, #6
    7b48:	4013      	ands	r3, r2
    7b4a:	d00f      	beq.n	7b6c <sd_mmc_spi_adtc_start+0x1b0>
		if (!sd_mmc_spi_wait_busy()) {
    7b4c:	4b39      	ldr	r3, [pc, #228]	; (7c34 <sd_mmc_spi_adtc_start+0x278>)
    7b4e:	447b      	add	r3, pc
    7b50:	4798      	blx	r3
    7b52:	0003      	movs	r3, r0
    7b54:	001a      	movs	r2, r3
    7b56:	2301      	movs	r3, #1
    7b58:	4053      	eors	r3, r2
    7b5a:	b2db      	uxtb	r3, r3
    7b5c:	2b00      	cmp	r3, #0
    7b5e:	d005      	beq.n	7b6c <sd_mmc_spi_adtc_start+0x1b0>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    7b60:	4b35      	ldr	r3, [pc, #212]	; (7c38 <sd_mmc_spi_adtc_start+0x27c>)
    7b62:	447b      	add	r3, pc
    7b64:	2203      	movs	r2, #3
    7b66:	701a      	strb	r2, [r3, #0]
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, Busy signal always high\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			return false;
    7b68:	2300      	movs	r3, #0
    7b6a:	e043      	b.n	7bf4 <sd_mmc_spi_adtc_start+0x238>
		}
	}
	if (cmd & SDMMC_RESP_8) {
    7b6c:	68fa      	ldr	r2, [r7, #12]
    7b6e:	2380      	movs	r3, #128	; 0x80
    7b70:	009b      	lsls	r3, r3, #2
    7b72:	4013      	ands	r3, r2
    7b74:	d016      	beq.n	7ba4 <sd_mmc_spi_adtc_start+0x1e8>
		sd_mmc_spi_response_32 = 0;
    7b76:	4b31      	ldr	r3, [pc, #196]	; (7c3c <sd_mmc_spi_adtc_start+0x280>)
    7b78:	447b      	add	r3, pc
    7b7a:	2200      	movs	r2, #0
    7b7c:	601a      	str	r2, [r3, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    7b7e:	231c      	movs	r3, #28
    7b80:	18fb      	adds	r3, r7, r3
    7b82:	881b      	ldrh	r3, [r3, #0]
    7b84:	4a2e      	ldr	r2, [pc, #184]	; (7c40 <sd_mmc_spi_adtc_start+0x284>)
    7b86:	447a      	add	r2, pc
    7b88:	0011      	movs	r1, r2
    7b8a:	4a2e      	ldr	r2, [pc, #184]	; (7c44 <sd_mmc_spi_adtc_start+0x288>)
    7b8c:	447a      	add	r2, pc
    7b8e:	0010      	movs	r0, r2
    7b90:	2201      	movs	r2, #1
    7b92:	4d21      	ldr	r5, [pc, #132]	; (7c18 <sd_mmc_spi_adtc_start+0x25c>)
    7b94:	5965      	ldr	r5, [r4, r5]
    7b96:	47a8      	blx	r5
			dummy2);
		sd_mmc_spi_response_32 = le32_to_cpu(sd_mmc_spi_response_32);
    7b98:	4b2b      	ldr	r3, [pc, #172]	; (7c48 <sd_mmc_spi_adtc_start+0x28c>)
    7b9a:	447b      	add	r3, pc
    7b9c:	681a      	ldr	r2, [r3, #0]
    7b9e:	4b2b      	ldr	r3, [pc, #172]	; (7c4c <sd_mmc_spi_adtc_start+0x290>)
    7ba0:	447b      	add	r3, pc
    7ba2:	601a      	str	r2, [r3, #0]
	}
	if (cmd & SDMMC_RESP_32) {
    7ba4:	68fa      	ldr	r2, [r7, #12]
    7ba6:	2380      	movs	r3, #128	; 0x80
    7ba8:	00db      	lsls	r3, r3, #3
    7baa:	4013      	ands	r3, r2
    7bac:	d013      	beq.n	7bd6 <sd_mmc_spi_adtc_start+0x21a>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    7bae:	231c      	movs	r3, #28
    7bb0:	18fb      	adds	r3, r7, r3
    7bb2:	881b      	ldrh	r3, [r3, #0]
    7bb4:	4a26      	ldr	r2, [pc, #152]	; (7c50 <sd_mmc_spi_adtc_start+0x294>)
    7bb6:	447a      	add	r2, pc
    7bb8:	0011      	movs	r1, r2
    7bba:	4a26      	ldr	r2, [pc, #152]	; (7c54 <sd_mmc_spi_adtc_start+0x298>)
    7bbc:	447a      	add	r2, pc
    7bbe:	0010      	movs	r0, r2
    7bc0:	2204      	movs	r2, #4
    7bc2:	4d15      	ldr	r5, [pc, #84]	; (7c18 <sd_mmc_spi_adtc_start+0x25c>)
    7bc4:	5964      	ldr	r4, [r4, r5]
    7bc6:	47a0      	blx	r4
			dummy2);
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    7bc8:	4b23      	ldr	r3, [pc, #140]	; (7c58 <sd_mmc_spi_adtc_start+0x29c>)
    7bca:	447b      	add	r3, pc
    7bcc:	681b      	ldr	r3, [r3, #0]
    7bce:	ba1a      	rev	r2, r3
    7bd0:	4b22      	ldr	r3, [pc, #136]	; (7c5c <sd_mmc_spi_adtc_start+0x2a0>)
    7bd2:	447b      	add	r3, pc
    7bd4:	601a      	str	r2, [r3, #0]
	}

	sd_mmc_spi_block_size = block_size;
    7bd6:	4b22      	ldr	r3, [pc, #136]	; (7c60 <sd_mmc_spi_adtc_start+0x2a4>)
    7bd8:	447b      	add	r3, pc
    7bda:	1dba      	adds	r2, r7, #6
    7bdc:	8812      	ldrh	r2, [r2, #0]
    7bde:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    7be0:	4b20      	ldr	r3, [pc, #128]	; (7c64 <sd_mmc_spi_adtc_start+0x2a8>)
    7be2:	447b      	add	r3, pc
    7be4:	1d3a      	adds	r2, r7, #4
    7be6:	8812      	ldrh	r2, [r2, #0]
    7be8:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    7bea:	4b1f      	ldr	r3, [pc, #124]	; (7c68 <sd_mmc_spi_adtc_start+0x2ac>)
    7bec:	447b      	add	r3, pc
    7bee:	2200      	movs	r2, #0
    7bf0:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    7bf2:	2301      	movs	r3, #1
}
    7bf4:	0018      	movs	r0, r3
    7bf6:	46bd      	mov	sp, r7
    7bf8:	b008      	add	sp, #32
    7bfa:	bdb0      	pop	{r4, r5, r7, pc}
    7bfc:	0000a3fc 	.word	0x0000a3fc
    7c00:	1fff8b9b 	.word	0x1fff8b9b
    7c04:	fffff8ed 	.word	0xfffff8ed
    7c08:	1fff8af0 	.word	0x1fff8af0
    7c0c:	000002cc 	.word	0x000002cc
    7c10:	1fff8adc 	.word	0x1fff8adc
    7c14:	1fff8aba 	.word	0x1fff8aba
    7c18:	000001e8 	.word	0x000001e8
    7c1c:	1fff8a9a 	.word	0x1fff8a9a
    7c20:	1fff8aab 	.word	0x1fff8aab
    7c24:	1fff8a96 	.word	0x1fff8a96
    7c28:	1fff8a81 	.word	0x1fff8a81
    7c2c:	1fff8a67 	.word	0x1fff8a67
    7c30:	1fff8a4b 	.word	0x1fff8a4b
    7c34:	fffff897 	.word	0xfffff897
    7c38:	1fff8a21 	.word	0x1fff8a21
    7c3c:	1fff8a0c 	.word	0x1fff8a0c
    7c40:	1fff89fe 	.word	0x1fff89fe
    7c44:	1fff89b4 	.word	0x1fff89b4
    7c48:	1fff89ea 	.word	0x1fff89ea
    7c4c:	1fff89e4 	.word	0x1fff89e4
    7c50:	1fff89ce 	.word	0x1fff89ce
    7c54:	1fff8984 	.word	0x1fff8984
    7c58:	1fff89ba 	.word	0x1fff89ba
    7c5c:	1fff89b2 	.word	0x1fff89b2
    7c60:	1fff89b4 	.word	0x1fff89b4
    7c64:	1fff89ac 	.word	0x1fff89ac
    7c68:	1fff899c 	.word	0x1fff899c

00007c6c <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
    7c6c:	b580      	push	{r7, lr}
    7c6e:	af00      	add	r7, sp, #0
	return sd_mmc_spi_response_32;
    7c70:	4b02      	ldr	r3, [pc, #8]	; (7c7c <sd_mmc_spi_get_response+0x10>)
    7c72:	447b      	add	r3, pc
    7c74:	681b      	ldr	r3, [r3, #0]
}
    7c76:	0018      	movs	r0, r3
    7c78:	46bd      	mov	sp, r7
    7c7a:	bd80      	pop	{r7, pc}
    7c7c:	1fff8912 	.word	0x1fff8912

00007c80 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
    7c80:	b5b0      	push	{r4, r5, r7, lr}
    7c82:	b084      	sub	sp, #16
    7c84:	af00      	add	r7, sp, #0
    7c86:	6078      	str	r0, [r7, #4]
    7c88:	4c26      	ldr	r4, [pc, #152]	; (7d24 <sd_mmc_spi_read_word+0xa4>)
    7c8a:	447c      	add	r4, pc
	uint16_t dummy = 0xFF;
    7c8c:	230e      	movs	r3, #14
    7c8e:	18fb      	adds	r3, r7, r3
    7c90:	22ff      	movs	r2, #255	; 0xff
    7c92:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7c94:	4b24      	ldr	r3, [pc, #144]	; (7d28 <sd_mmc_spi_read_word+0xa8>)
    7c96:	447b      	add	r3, pc
    7c98:	2200      	movs	r2, #0
    7c9a:	701a      	strb	r2, [r3, #0]
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    7c9c:	4b23      	ldr	r3, [pc, #140]	; (7d2c <sd_mmc_spi_read_word+0xac>)
    7c9e:	447b      	add	r3, pc
    7ca0:	681a      	ldr	r2, [r3, #0]
    7ca2:	4b23      	ldr	r3, [pc, #140]	; (7d30 <sd_mmc_spi_read_word+0xb0>)
    7ca4:	447b      	add	r3, pc
    7ca6:	881b      	ldrh	r3, [r3, #0]
    7ca8:	0019      	movs	r1, r3
    7caa:	4b22      	ldr	r3, [pc, #136]	; (7d34 <sd_mmc_spi_read_word+0xb4>)
    7cac:	58e3      	ldr	r3, [r4, r3]
    7cae:	0010      	movs	r0, r2
    7cb0:	4798      	blx	r3
    7cb2:	1e0b      	subs	r3, r1, #0
    7cb4:	d10b      	bne.n	7cce <sd_mmc_spi_read_word+0x4e>
		// New block
		if (!sd_mmc_spi_start_read_block()) {
    7cb6:	4b20      	ldr	r3, [pc, #128]	; (7d38 <sd_mmc_spi_read_word+0xb8>)
    7cb8:	447b      	add	r3, pc
    7cba:	4798      	blx	r3
    7cbc:	0003      	movs	r3, r0
    7cbe:	001a      	movs	r2, r3
    7cc0:	2301      	movs	r3, #1
    7cc2:	4053      	eors	r3, r2
    7cc4:	b2db      	uxtb	r3, r3
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d001      	beq.n	7cce <sd_mmc_spi_read_word+0x4e>
			return false;
    7cca:	2300      	movs	r3, #0
    7ccc:	e026      	b.n	7d1c <sd_mmc_spi_read_word+0x9c>
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    7cce:	230e      	movs	r3, #14
    7cd0:	18fb      	adds	r3, r7, r3
    7cd2:	881b      	ldrh	r3, [r3, #0]
    7cd4:	1d39      	adds	r1, r7, #4
    7cd6:	4a19      	ldr	r2, [pc, #100]	; (7d3c <sd_mmc_spi_read_word+0xbc>)
    7cd8:	447a      	add	r2, pc
    7cda:	0010      	movs	r0, r2
    7cdc:	2204      	movs	r2, #4
    7cde:	4d18      	ldr	r5, [pc, #96]	; (7d40 <sd_mmc_spi_read_word+0xc0>)
    7ce0:	5965      	ldr	r5, [r4, r5]
    7ce2:	47a8      	blx	r5
			dummy);
	*value = le32_to_cpu(*value);
    7ce4:	687b      	ldr	r3, [r7, #4]
    7ce6:	687a      	ldr	r2, [r7, #4]
    7ce8:	6812      	ldr	r2, [r2, #0]
    7cea:	601a      	str	r2, [r3, #0]
	sd_mmc_spi_transfert_pos += 4;
    7cec:	4b15      	ldr	r3, [pc, #84]	; (7d44 <sd_mmc_spi_read_word+0xc4>)
    7cee:	447b      	add	r3, pc
    7cf0:	681b      	ldr	r3, [r3, #0]
    7cf2:	1d1a      	adds	r2, r3, #4
    7cf4:	4b14      	ldr	r3, [pc, #80]	; (7d48 <sd_mmc_spi_read_word+0xc8>)
    7cf6:	447b      	add	r3, pc
    7cf8:	601a      	str	r2, [r3, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    7cfa:	4b14      	ldr	r3, [pc, #80]	; (7d4c <sd_mmc_spi_read_word+0xcc>)
    7cfc:	447b      	add	r3, pc
    7cfe:	681a      	ldr	r2, [r3, #0]
    7d00:	4b13      	ldr	r3, [pc, #76]	; (7d50 <sd_mmc_spi_read_word+0xd0>)
    7d02:	447b      	add	r3, pc
    7d04:	881b      	ldrh	r3, [r3, #0]
    7d06:	0019      	movs	r1, r3
    7d08:	4b0a      	ldr	r3, [pc, #40]	; (7d34 <sd_mmc_spi_read_word+0xb4>)
    7d0a:	58e3      	ldr	r3, [r4, r3]
    7d0c:	0010      	movs	r0, r2
    7d0e:	4798      	blx	r3
    7d10:	1e0b      	subs	r3, r1, #0
    7d12:	d102      	bne.n	7d1a <sd_mmc_spi_read_word+0x9a>
		// End of block
		sd_mmc_spi_stop_read_block();
    7d14:	4b0f      	ldr	r3, [pc, #60]	; (7d54 <sd_mmc_spi_read_word+0xd4>)
    7d16:	447b      	add	r3, pc
    7d18:	4798      	blx	r3
	}
	return true;
    7d1a:	2301      	movs	r3, #1
}
    7d1c:	0018      	movs	r0, r3
    7d1e:	46bd      	mov	sp, r7
    7d20:	b004      	add	sp, #16
    7d22:	bdb0      	pop	{r4, r5, r7, pc}
    7d24:	0000a146 	.word	0x0000a146
    7d28:	1fff88ed 	.word	0x1fff88ed
    7d2c:	1fff88ea 	.word	0x1fff88ea
    7d30:	1fff88e8 	.word	0x1fff88e8
    7d34:	00000268 	.word	0x00000268
    7d38:	fffff7bd 	.word	0xfffff7bd
    7d3c:	1fff8868 	.word	0x1fff8868
    7d40:	000001e8 	.word	0x000001e8
    7d44:	1fff889a 	.word	0x1fff889a
    7d48:	1fff8892 	.word	0x1fff8892
    7d4c:	1fff888c 	.word	0x1fff888c
    7d50:	1fff888a 	.word	0x1fff888a
    7d54:	fffff7ff 	.word	0xfffff7ff

00007d58 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    7d58:	b5b0      	push	{r4, r5, r7, lr}
    7d5a:	b084      	sub	sp, #16
    7d5c:	af00      	add	r7, sp, #0
    7d5e:	6078      	str	r0, [r7, #4]
    7d60:	000a      	movs	r2, r1
    7d62:	1cbb      	adds	r3, r7, #2
    7d64:	801a      	strh	r2, [r3, #0]
    7d66:	4c24      	ldr	r4, [pc, #144]	; (7df8 <sd_mmc_spi_start_read_blocks+0xa0>)
    7d68:	447c      	add	r4, pc
	uint32_t pos;
	uint16_t dummy = 0xFF;
    7d6a:	230a      	movs	r3, #10
    7d6c:	18fb      	adds	r3, r7, r3
    7d6e:	22ff      	movs	r2, #255	; 0xff
    7d70:	801a      	strh	r2, [r3, #0]

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7d72:	4b22      	ldr	r3, [pc, #136]	; (7dfc <sd_mmc_spi_start_read_blocks+0xa4>)
    7d74:	447b      	add	r3, pc
    7d76:	2200      	movs	r2, #0
    7d78:	701a      	strb	r2, [r3, #0]
	pos = 0;
    7d7a:	2300      	movs	r3, #0
    7d7c:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    7d7e:	e02e      	b.n	7dde <sd_mmc_spi_start_read_blocks+0x86>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		if (!sd_mmc_spi_start_read_block()) {
    7d80:	4b1f      	ldr	r3, [pc, #124]	; (7e00 <sd_mmc_spi_start_read_blocks+0xa8>)
    7d82:	447b      	add	r3, pc
    7d84:	4798      	blx	r3
    7d86:	0003      	movs	r3, r0
    7d88:	001a      	movs	r2, r3
    7d8a:	2301      	movs	r3, #1
    7d8c:	4053      	eors	r3, r2
    7d8e:	b2db      	uxtb	r3, r3
    7d90:	2b00      	cmp	r3, #0
    7d92:	d001      	beq.n	7d98 <sd_mmc_spi_start_read_blocks+0x40>
			return false;
    7d94:	2300      	movs	r3, #0
    7d96:	e02a      	b.n	7dee <sd_mmc_spi_start_read_blocks+0x96>
		}

		// Read block
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    7d98:	687a      	ldr	r2, [r7, #4]
    7d9a:	68fb      	ldr	r3, [r7, #12]
    7d9c:	18d1      	adds	r1, r2, r3
    7d9e:	4b19      	ldr	r3, [pc, #100]	; (7e04 <sd_mmc_spi_start_read_blocks+0xac>)
    7da0:	447b      	add	r3, pc
    7da2:	881a      	ldrh	r2, [r3, #0]
    7da4:	230a      	movs	r3, #10
    7da6:	18fb      	adds	r3, r7, r3
    7da8:	881b      	ldrh	r3, [r3, #0]
    7daa:	4817      	ldr	r0, [pc, #92]	; (7e08 <sd_mmc_spi_start_read_blocks+0xb0>)
    7dac:	4478      	add	r0, pc
    7dae:	4d17      	ldr	r5, [pc, #92]	; (7e0c <sd_mmc_spi_start_read_blocks+0xb4>)
    7db0:	5965      	ldr	r5, [r4, r5]
    7db2:	47a8      	blx	r5
			sd_mmc_spi_block_size, dummy);
		pos += sd_mmc_spi_block_size;
    7db4:	4b16      	ldr	r3, [pc, #88]	; (7e10 <sd_mmc_spi_start_read_blocks+0xb8>)
    7db6:	447b      	add	r3, pc
    7db8:	881b      	ldrh	r3, [r3, #0]
    7dba:	001a      	movs	r2, r3
    7dbc:	68fb      	ldr	r3, [r7, #12]
    7dbe:	189b      	adds	r3, r3, r2
    7dc0:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    7dc2:	4b14      	ldr	r3, [pc, #80]	; (7e14 <sd_mmc_spi_start_read_blocks+0xbc>)
    7dc4:	447b      	add	r3, pc
    7dc6:	881b      	ldrh	r3, [r3, #0]
    7dc8:	001a      	movs	r2, r3
    7dca:	4b13      	ldr	r3, [pc, #76]	; (7e18 <sd_mmc_spi_start_read_blocks+0xc0>)
    7dcc:	447b      	add	r3, pc
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	18d2      	adds	r2, r2, r3
    7dd2:	4b12      	ldr	r3, [pc, #72]	; (7e1c <sd_mmc_spi_start_read_blocks+0xc4>)
    7dd4:	447b      	add	r3, pc
    7dd6:	601a      	str	r2, [r3, #0]

		sd_mmc_spi_stop_read_block();
    7dd8:	4b11      	ldr	r3, [pc, #68]	; (7e20 <sd_mmc_spi_start_read_blocks+0xc8>)
    7dda:	447b      	add	r3, pc
    7ddc:	4798      	blx	r3
	while (nb_block--) {
    7dde:	1cbb      	adds	r3, r7, #2
    7de0:	881b      	ldrh	r3, [r3, #0]
    7de2:	1cba      	adds	r2, r7, #2
    7de4:	1e59      	subs	r1, r3, #1
    7de6:	8011      	strh	r1, [r2, #0]
    7de8:	2b00      	cmp	r3, #0
    7dea:	d1c9      	bne.n	7d80 <sd_mmc_spi_start_read_blocks+0x28>
	}
	return true;
    7dec:	2301      	movs	r3, #1
}
    7dee:	0018      	movs	r0, r3
    7df0:	46bd      	mov	sp, r7
    7df2:	b004      	add	sp, #16
    7df4:	bdb0      	pop	{r4, r5, r7, pc}
    7df6:	46c0      	nop			; (mov r8, r8)
    7df8:	0000a068 	.word	0x0000a068
    7dfc:	1fff880f 	.word	0x1fff880f
    7e00:	fffff6f3 	.word	0xfffff6f3
    7e04:	1fff87ec 	.word	0x1fff87ec
    7e08:	1fff8794 	.word	0x1fff8794
    7e0c:	000001e8 	.word	0x000001e8
    7e10:	1fff87d6 	.word	0x1fff87d6
    7e14:	1fff87c8 	.word	0x1fff87c8
    7e18:	1fff87bc 	.word	0x1fff87bc
    7e1c:	1fff87b4 	.word	0x1fff87b4
    7e20:	fffff73b 	.word	0xfffff73b

00007e24 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
    7e24:	b580      	push	{r7, lr}
    7e26:	af00      	add	r7, sp, #0
	return true;
    7e28:	2301      	movs	r3, #1
}
    7e2a:	0018      	movs	r0, r3
    7e2c:	46bd      	mov	sp, r7
    7e2e:	bd80      	pop	{r7, pc}

00007e30 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    7e30:	b590      	push	{r4, r7, lr}
    7e32:	b085      	sub	sp, #20
    7e34:	af00      	add	r7, sp, #0
    7e36:	6078      	str	r0, [r7, #4]
    7e38:	000a      	movs	r2, r1
    7e3a:	1cbb      	adds	r3, r7, #2
    7e3c:	801a      	strh	r2, [r3, #0]
    7e3e:	4c2b      	ldr	r4, [pc, #172]	; (7eec <sd_mmc_spi_start_write_blocks+0xbc>)
    7e40:	447c      	add	r4, pc
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    7e42:	4b2b      	ldr	r3, [pc, #172]	; (7ef0 <sd_mmc_spi_start_write_blocks+0xc0>)
    7e44:	447b      	add	r3, pc
    7e46:	2200      	movs	r2, #0
    7e48:	701a      	strb	r2, [r3, #0]
	pos = 0;
    7e4a:	2300      	movs	r3, #0
    7e4c:	60fb      	str	r3, [r7, #12]
	while (nb_block--) {
    7e4e:	e041      	b.n	7ed4 <sd_mmc_spi_start_write_blocks+0xa4>
		Assert(sd_mmc_spi_nb_block >
				(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));
		sd_mmc_spi_start_write_block();
    7e50:	4b28      	ldr	r3, [pc, #160]	; (7ef4 <sd_mmc_spi_start_write_blocks+0xc4>)
    7e52:	447b      	add	r3, pc
    7e54:	4798      	blx	r3

		// Write block
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    7e56:	687a      	ldr	r2, [r7, #4]
    7e58:	68fb      	ldr	r3, [r7, #12]
    7e5a:	18d1      	adds	r1, r2, r3
    7e5c:	4b26      	ldr	r3, [pc, #152]	; (7ef8 <sd_mmc_spi_start_write_blocks+0xc8>)
    7e5e:	447b      	add	r3, pc
    7e60:	881b      	ldrh	r3, [r3, #0]
    7e62:	4a26      	ldr	r2, [pc, #152]	; (7efc <sd_mmc_spi_start_write_blocks+0xcc>)
    7e64:	447a      	add	r2, pc
    7e66:	0010      	movs	r0, r2
    7e68:	001a      	movs	r2, r3
    7e6a:	4b25      	ldr	r3, [pc, #148]	; (7f00 <sd_mmc_spi_start_write_blocks+0xd0>)
    7e6c:	58e3      	ldr	r3, [r4, r3]
    7e6e:	4798      	blx	r3
				sd_mmc_spi_block_size);
		pos += sd_mmc_spi_block_size;
    7e70:	4b24      	ldr	r3, [pc, #144]	; (7f04 <sd_mmc_spi_start_write_blocks+0xd4>)
    7e72:	447b      	add	r3, pc
    7e74:	881b      	ldrh	r3, [r3, #0]
    7e76:	001a      	movs	r2, r3
    7e78:	68fb      	ldr	r3, [r7, #12]
    7e7a:	189b      	adds	r3, r3, r2
    7e7c:	60fb      	str	r3, [r7, #12]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    7e7e:	4b22      	ldr	r3, [pc, #136]	; (7f08 <sd_mmc_spi_start_write_blocks+0xd8>)
    7e80:	447b      	add	r3, pc
    7e82:	881b      	ldrh	r3, [r3, #0]
    7e84:	001a      	movs	r2, r3
    7e86:	4b21      	ldr	r3, [pc, #132]	; (7f0c <sd_mmc_spi_start_write_blocks+0xdc>)
    7e88:	447b      	add	r3, pc
    7e8a:	681b      	ldr	r3, [r3, #0]
    7e8c:	18d2      	adds	r2, r2, r3
    7e8e:	4b20      	ldr	r3, [pc, #128]	; (7f10 <sd_mmc_spi_start_write_blocks+0xe0>)
    7e90:	447b      	add	r3, pc
    7e92:	601a      	str	r2, [r3, #0]

		if (!sd_mmc_spi_stop_write_block()) {
    7e94:	4b1f      	ldr	r3, [pc, #124]	; (7f14 <sd_mmc_spi_start_write_blocks+0xe4>)
    7e96:	447b      	add	r3, pc
    7e98:	4798      	blx	r3
    7e9a:	0003      	movs	r3, r0
    7e9c:	001a      	movs	r2, r3
    7e9e:	2301      	movs	r3, #1
    7ea0:	4053      	eors	r3, r2
    7ea2:	b2db      	uxtb	r3, r3
    7ea4:	2b00      	cmp	r3, #0
    7ea6:	d001      	beq.n	7eac <sd_mmc_spi_start_write_blocks+0x7c>
			return false;
    7ea8:	2300      	movs	r3, #0
    7eaa:	e01b      	b.n	7ee4 <sd_mmc_spi_start_write_blocks+0xb4>
		}
		// Do not check busy of last block
		// but delay it to mci_wait_end_of_write_blocks()
		if (nb_block) {
    7eac:	1cbb      	adds	r3, r7, #2
    7eae:	881b      	ldrh	r3, [r3, #0]
    7eb0:	2b00      	cmp	r3, #0
    7eb2:	d00f      	beq.n	7ed4 <sd_mmc_spi_start_write_blocks+0xa4>
			// Wait busy due to data programmation
			if (!sd_mmc_spi_wait_busy()) {
    7eb4:	4b18      	ldr	r3, [pc, #96]	; (7f18 <sd_mmc_spi_start_write_blocks+0xe8>)
    7eb6:	447b      	add	r3, pc
    7eb8:	4798      	blx	r3
    7eba:	0003      	movs	r3, r0
    7ebc:	001a      	movs	r2, r3
    7ebe:	2301      	movs	r3, #1
    7ec0:	4053      	eors	r3, r2
    7ec2:	b2db      	uxtb	r3, r3
    7ec4:	2b00      	cmp	r3, #0
    7ec6:	d005      	beq.n	7ed4 <sd_mmc_spi_start_write_blocks+0xa4>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    7ec8:	4b14      	ldr	r3, [pc, #80]	; (7f1c <sd_mmc_spi_start_write_blocks+0xec>)
    7eca:	447b      	add	r3, pc
    7ecc:	2205      	movs	r2, #5
    7ece:	701a      	strb	r2, [r3, #0]
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
    7ed0:	2300      	movs	r3, #0
    7ed2:	e007      	b.n	7ee4 <sd_mmc_spi_start_write_blocks+0xb4>
	while (nb_block--) {
    7ed4:	1cbb      	adds	r3, r7, #2
    7ed6:	881b      	ldrh	r3, [r3, #0]
    7ed8:	1cba      	adds	r2, r7, #2
    7eda:	1e59      	subs	r1, r3, #1
    7edc:	8011      	strh	r1, [r2, #0]
    7ede:	2b00      	cmp	r3, #0
    7ee0:	d1b6      	bne.n	7e50 <sd_mmc_spi_start_write_blocks+0x20>
			}
		}
	}
	return true;
    7ee2:	2301      	movs	r3, #1
}
    7ee4:	0018      	movs	r0, r3
    7ee6:	46bd      	mov	sp, r7
    7ee8:	b005      	add	sp, #20
    7eea:	bd90      	pop	{r4, r7, pc}
    7eec:	00009f90 	.word	0x00009f90
    7ef0:	1fff873f 	.word	0x1fff873f
    7ef4:	fffff6fb 	.word	0xfffff6fb
    7ef8:	1fff872e 	.word	0x1fff872e
    7efc:	1fff86dc 	.word	0x1fff86dc
    7f00:	000002cc 	.word	0x000002cc
    7f04:	1fff871a 	.word	0x1fff871a
    7f08:	1fff870c 	.word	0x1fff870c
    7f0c:	1fff8700 	.word	0x1fff8700
    7f10:	1fff86f8 	.word	0x1fff86f8
    7f14:	fffff71f 	.word	0xfffff71f
    7f18:	fffff52f 	.word	0xfffff52f
    7f1c:	1fff86b9 	.word	0x1fff86b9

00007f20 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    7f20:	b580      	push	{r7, lr}
    7f22:	af00      	add	r7, sp, #0
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    7f24:	4b0b      	ldr	r3, [pc, #44]	; (7f54 <sd_mmc_spi_wait_end_of_write_blocks+0x34>)
    7f26:	447b      	add	r3, pc
    7f28:	4798      	blx	r3
    7f2a:	0003      	movs	r3, r0
    7f2c:	001a      	movs	r2, r3
    7f2e:	2301      	movs	r3, #1
    7f30:	4053      	eors	r3, r2
    7f32:	b2db      	uxtb	r3, r3
    7f34:	2b00      	cmp	r3, #0
    7f36:	d005      	beq.n	7f44 <sd_mmc_spi_wait_end_of_write_blocks+0x24>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    7f38:	4b07      	ldr	r3, [pc, #28]	; (7f58 <sd_mmc_spi_wait_end_of_write_blocks+0x38>)
    7f3a:	447b      	add	r3, pc
    7f3c:	2205      	movs	r2, #5
    7f3e:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
    7f40:	2300      	movs	r3, #0
    7f42:	e003      	b.n	7f4c <sd_mmc_spi_wait_end_of_write_blocks+0x2c>
	}
	return sd_mmc_spi_stop_multiwrite_block();
    7f44:	4b05      	ldr	r3, [pc, #20]	; (7f5c <sd_mmc_spi_wait_end_of_write_blocks+0x3c>)
    7f46:	447b      	add	r3, pc
    7f48:	4798      	blx	r3
    7f4a:	0003      	movs	r3, r0
}
    7f4c:	0018      	movs	r0, r3
    7f4e:	46bd      	mov	sp, r7
    7f50:	bd80      	pop	{r7, pc}
    7f52:	46c0      	nop			; (mov r8, r8)
    7f54:	fffff4bf 	.word	0xfffff4bf
    7f58:	1fff8649 	.word	0x1fff8649
    7f5c:	fffff727 	.word	0xfffff727

00007f60 <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    7f60:	b580      	push	{r7, lr}
    7f62:	b084      	sub	sp, #16
    7f64:	af00      	add	r7, sp, #0
    7f66:	0002      	movs	r2, r0
    7f68:	1dfb      	adds	r3, r7, #7
    7f6a:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    7f6c:	1dfb      	adds	r3, r7, #7
    7f6e:	781b      	ldrb	r3, [r3, #0]
    7f70:	2b00      	cmp	r3, #0
    7f72:	d109      	bne.n	7f88 <mem_test_unit_ready+0x28>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].test_unit_ready() :
    7f74:	1dfb      	adds	r3, r7, #7
    7f76:	781a      	ldrb	r2, [r3, #0]
    7f78:	4b09      	ldr	r3, [pc, #36]	; (7fa0 <mem_test_unit_ready+0x40>)
    7f7a:	447b      	add	r3, pc
    7f7c:	0152      	lsls	r2, r2, #5
    7f7e:	58d3      	ldr	r3, [r2, r3]
  status =
    7f80:	4798      	blx	r3
    7f82:	0003      	movs	r3, r0
    7f84:	001a      	movs	r2, r3
    7f86:	e000      	b.n	7f8a <mem_test_unit_ready+0x2a>
    7f88:	2201      	movs	r2, #1
    7f8a:	230f      	movs	r3, #15
    7f8c:	18fb      	adds	r3, r7, r3
    7f8e:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    7f90:	230f      	movs	r3, #15
    7f92:	18fb      	adds	r3, r7, r3
    7f94:	781b      	ldrb	r3, [r3, #0]
}
    7f96:	0018      	movs	r0, r3
    7f98:	46bd      	mov	sp, r7
    7f9a:	b004      	add	sp, #16
    7f9c:	bd80      	pop	{r7, pc}
    7f9e:	46c0      	nop			; (mov r8, r8)
    7fa0:	1fff817e 	.word	0x1fff817e

00007fa4 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    7fa4:	b580      	push	{r7, lr}
    7fa6:	b084      	sub	sp, #16
    7fa8:	af00      	add	r7, sp, #0
    7faa:	0002      	movs	r2, r0
    7fac:	6039      	str	r1, [r7, #0]
    7fae:	1dfb      	adds	r3, r7, #7
    7fb0:	701a      	strb	r2, [r3, #0]
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    7fb2:	1dfb      	adds	r3, r7, #7
    7fb4:	781b      	ldrb	r3, [r3, #0]
    7fb6:	2b00      	cmp	r3, #0
    7fb8:	d10d      	bne.n	7fd6 <mem_read_capacity+0x32>
#if MAX_LUN
         (lun < MAX_LUN) ? lun_desc[lun].read_capacity(u32_nb_sector) :
    7fba:	1dfb      	adds	r3, r7, #7
    7fbc:	781b      	ldrb	r3, [r3, #0]
    7fbe:	4a0b      	ldr	r2, [pc, #44]	; (7fec <mem_read_capacity+0x48>)
    7fc0:	447a      	add	r2, pc
    7fc2:	015b      	lsls	r3, r3, #5
    7fc4:	18d3      	adds	r3, r2, r3
    7fc6:	3304      	adds	r3, #4
    7fc8:	681b      	ldr	r3, [r3, #0]
  status =
    7fca:	683a      	ldr	r2, [r7, #0]
    7fcc:	0010      	movs	r0, r2
    7fce:	4798      	blx	r3
    7fd0:	0003      	movs	r3, r0
    7fd2:	001a      	movs	r2, r3
    7fd4:	e000      	b.n	7fd8 <mem_read_capacity+0x34>
    7fd6:	2201      	movs	r2, #1
    7fd8:	230f      	movs	r3, #15
    7fda:	18fb      	adds	r3, r7, r3
    7fdc:	701a      	strb	r2, [r3, #0]
                             CTRL_FAIL;
#endif

  Ctrl_access_unlock();

  return status;
    7fde:	230f      	movs	r3, #15
    7fe0:	18fb      	adds	r3, r7, r3
    7fe2:	781b      	ldrb	r3, [r3, #0]
}
    7fe4:	0018      	movs	r0, r3
    7fe6:	46bd      	mov	sp, r7
    7fe8:	b004      	add	sp, #16
    7fea:	bd80      	pop	{r7, pc}
    7fec:	1fff8138 	.word	0x1fff8138

00007ff0 <mem_sector_size>:


U8 mem_sector_size(U8 lun)
{
    7ff0:	b580      	push	{r7, lr}
    7ff2:	b084      	sub	sp, #16
    7ff4:	af00      	add	r7, sp, #0
    7ff6:	0002      	movs	r2, r0
    7ff8:	1dfb      	adds	r3, r7, #7
    7ffa:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    7ffc:	1dfb      	adds	r3, r7, #7
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	425a      	negs	r2, r3
    8002:	4153      	adcs	r3, r2
    8004:	b2da      	uxtb	r2, r3
  sector_size =
    8006:	230f      	movs	r3, #15
    8008:	18fb      	adds	r3, r7, r3
    800a:	701a      	strb	r2, [r3, #0]
                                  0;
#endif

  Ctrl_access_unlock();

  return sector_size;
    800c:	230f      	movs	r3, #15
    800e:	18fb      	adds	r3, r7, r3
    8010:	781b      	ldrb	r3, [r3, #0]
}
    8012:	0018      	movs	r0, r3
    8014:	46bd      	mov	sp, r7
    8016:	b004      	add	sp, #16
    8018:	bd80      	pop	{r7, pc}
	...

0000801c <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    801c:	b580      	push	{r7, lr}
    801e:	b084      	sub	sp, #16
    8020:	af00      	add	r7, sp, #0
    8022:	0002      	movs	r2, r0
    8024:	1dfb      	adds	r3, r7, #7
    8026:	701a      	strb	r2, [r3, #0]

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    8028:	1dfb      	adds	r3, r7, #7
    802a:	781b      	ldrb	r3, [r3, #0]
    802c:	2b00      	cmp	r3, #0
    802e:	d10a      	bne.n	8046 <mem_wr_protect+0x2a>
    8030:	1dfb      	adds	r3, r7, #7
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	4a0a      	ldr	r2, [pc, #40]	; (8060 <mem_wr_protect+0x44>)
    8036:	447a      	add	r2, pc
    8038:	015b      	lsls	r3, r3, #5
    803a:	18d3      	adds	r3, r2, r3
    803c:	330c      	adds	r3, #12
    803e:	681b      	ldr	r3, [r3, #0]
    8040:	4798      	blx	r3
    8042:	1e03      	subs	r3, r0, #0
    8044:	d001      	beq.n	804a <mem_wr_protect+0x2e>
    8046:	2201      	movs	r2, #1
    8048:	e000      	b.n	804c <mem_wr_protect+0x30>
    804a:	2200      	movs	r2, #0
  wr_protect =
    804c:	230f      	movs	r3, #15
    804e:	18fb      	adds	r3, r7, r3
    8050:	701a      	strb	r2, [r3, #0]
                                 true;
#endif

  Ctrl_access_unlock();

  return wr_protect;
    8052:	230f      	movs	r3, #15
    8054:	18fb      	adds	r3, r7, r3
    8056:	781b      	ldrb	r3, [r3, #0]
}
    8058:	0018      	movs	r0, r3
    805a:	46bd      	mov	sp, r7
    805c:	b004      	add	sp, #16
    805e:	bd80      	pop	{r7, pc}
    8060:	1fff80c2 	.word	0x1fff80c2

00008064 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    8064:	b580      	push	{r7, lr}
    8066:	b086      	sub	sp, #24
    8068:	af00      	add	r7, sp, #0
    806a:	60b9      	str	r1, [r7, #8]
    806c:	607a      	str	r2, [r7, #4]
    806e:	230f      	movs	r3, #15
    8070:	18fb      	adds	r3, r7, r3
    8072:	1c02      	adds	r2, r0, #0
    8074:	701a      	strb	r2, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    8076:	230f      	movs	r3, #15
    8078:	18fb      	adds	r3, r7, r3
    807a:	781b      	ldrb	r3, [r3, #0]
    807c:	2b00      	cmp	r3, #0
    807e:	d10f      	bne.n	80a0 <memory_2_ram+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].mem_2_ram(addr, ram) :
    8080:	230f      	movs	r3, #15
    8082:	18fb      	adds	r3, r7, r3
    8084:	781b      	ldrb	r3, [r3, #0]
    8086:	4a0c      	ldr	r2, [pc, #48]	; (80b8 <memory_2_ram+0x54>)
    8088:	447a      	add	r2, pc
    808a:	015b      	lsls	r3, r3, #5
    808c:	18d3      	adds	r3, r2, r3
    808e:	3314      	adds	r3, #20
    8090:	681b      	ldr	r3, [r3, #0]
  status =
    8092:	6879      	ldr	r1, [r7, #4]
    8094:	68ba      	ldr	r2, [r7, #8]
    8096:	0010      	movs	r0, r2
    8098:	4798      	blx	r3
    809a:	0003      	movs	r3, r0
    809c:	001a      	movs	r2, r3
    809e:	e000      	b.n	80a2 <memory_2_ram+0x3e>
    80a0:	2201      	movs	r2, #1
    80a2:	2317      	movs	r3, #23
    80a4:	18fb      	adds	r3, r7, r3
    80a6:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
    80a8:	2317      	movs	r3, #23
    80aa:	18fb      	adds	r3, r7, r3
    80ac:	781b      	ldrb	r3, [r3, #0]
}
    80ae:	0018      	movs	r0, r3
    80b0:	46bd      	mov	sp, r7
    80b2:	b006      	add	sp, #24
    80b4:	bd80      	pop	{r7, pc}
    80b6:	46c0      	nop			; (mov r8, r8)
    80b8:	1fff8070 	.word	0x1fff8070

000080bc <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    80bc:	b580      	push	{r7, lr}
    80be:	b086      	sub	sp, #24
    80c0:	af00      	add	r7, sp, #0
    80c2:	60b9      	str	r1, [r7, #8]
    80c4:	607a      	str	r2, [r7, #4]
    80c6:	230f      	movs	r3, #15
    80c8:	18fb      	adds	r3, r7, r3
    80ca:	1c02      	adds	r2, r0, #0
    80cc:	701a      	strb	r2, [r3, #0]
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    80ce:	230f      	movs	r3, #15
    80d0:	18fb      	adds	r3, r7, r3
    80d2:	781b      	ldrb	r3, [r3, #0]
    80d4:	2b00      	cmp	r3, #0
    80d6:	d10f      	bne.n	80f8 <ram_2_memory+0x3c>
#if MAX_LUN
           (lun < MAX_LUN) ? lun_desc[lun].ram_2_mem(addr, ram) :
    80d8:	230f      	movs	r3, #15
    80da:	18fb      	adds	r3, r7, r3
    80dc:	781b      	ldrb	r3, [r3, #0]
    80de:	4a0c      	ldr	r2, [pc, #48]	; (8110 <ram_2_memory+0x54>)
    80e0:	447a      	add	r2, pc
    80e2:	015b      	lsls	r3, r3, #5
    80e4:	18d3      	adds	r3, r2, r3
    80e6:	3318      	adds	r3, #24
    80e8:	681b      	ldr	r3, [r3, #0]
  status =
    80ea:	6879      	ldr	r1, [r7, #4]
    80ec:	68ba      	ldr	r2, [r7, #8]
    80ee:	0010      	movs	r0, r2
    80f0:	4798      	blx	r3
    80f2:	0003      	movs	r3, r0
    80f4:	001a      	movs	r2, r3
    80f6:	e000      	b.n	80fa <ram_2_memory+0x3e>
    80f8:	2201      	movs	r2, #1
    80fa:	2317      	movs	r3, #23
    80fc:	18fb      	adds	r3, r7, r3
    80fe:	701a      	strb	r2, [r3, #0]
#endif
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
    8100:	2317      	movs	r3, #23
    8102:	18fb      	adds	r3, r7, r3
    8104:	781b      	ldrb	r3, [r3, #0]
}
    8106:	0018      	movs	r0, r3
    8108:	46bd      	mov	sp, r7
    810a:	b006      	add	sp, #24
    810c:	bd80      	pop	{r7, pc}
    810e:	46c0      	nop			; (mov r8, r8)
    8110:	1fff8018 	.word	0x1fff8018

00008114 <nvm_is_ready>:
 * \retval true   If the hardware module is ready for a new command
 * \retval false  If the hardware module is busy executing a command
 *
 */
static inline bool nvm_is_ready(void)
{
    8114:	b580      	push	{r7, lr}
    8116:	b082      	sub	sp, #8
    8118:	af00      	add	r7, sp, #0
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    811a:	4b07      	ldr	r3, [pc, #28]	; (8138 <nvm_is_ready+0x24>)
    811c:	607b      	str	r3, [r7, #4]

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    811e:	687b      	ldr	r3, [r7, #4]
    8120:	7d1b      	ldrb	r3, [r3, #20]
    8122:	b2db      	uxtb	r3, r3
    8124:	001a      	movs	r2, r3
    8126:	2301      	movs	r3, #1
    8128:	4013      	ands	r3, r2
    812a:	1e5a      	subs	r2, r3, #1
    812c:	4193      	sbcs	r3, r2
    812e:	b2db      	uxtb	r3, r3
}
    8130:	0018      	movs	r0, r3
    8132:	46bd      	mov	sp, r7
    8134:	b002      	add	sp, #8
    8136:	bd80      	pop	{r7, pc}
    8138:	41004000 	.word	0x41004000

0000813c <system_apb_clock_set_mask>:
{
    813c:	b580      	push	{r7, lr}
    813e:	b082      	sub	sp, #8
    8140:	af00      	add	r7, sp, #0
    8142:	0002      	movs	r2, r0
    8144:	6039      	str	r1, [r7, #0]
    8146:	1dfb      	adds	r3, r7, #7
    8148:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    814a:	1dfb      	adds	r3, r7, #7
    814c:	781b      	ldrb	r3, [r3, #0]
    814e:	2b01      	cmp	r3, #1
    8150:	d00a      	beq.n	8168 <system_apb_clock_set_mask+0x2c>
    8152:	2b02      	cmp	r3, #2
    8154:	d00f      	beq.n	8176 <system_apb_clock_set_mask+0x3a>
    8156:	2b00      	cmp	r3, #0
    8158:	d114      	bne.n	8184 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    815a:	4b0e      	ldr	r3, [pc, #56]	; (8194 <system_apb_clock_set_mask+0x58>)
    815c:	4a0d      	ldr	r2, [pc, #52]	; (8194 <system_apb_clock_set_mask+0x58>)
    815e:	6991      	ldr	r1, [r2, #24]
    8160:	683a      	ldr	r2, [r7, #0]
    8162:	430a      	orrs	r2, r1
    8164:	619a      	str	r2, [r3, #24]
			break;
    8166:	e00f      	b.n	8188 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    8168:	4b0a      	ldr	r3, [pc, #40]	; (8194 <system_apb_clock_set_mask+0x58>)
    816a:	4a0a      	ldr	r2, [pc, #40]	; (8194 <system_apb_clock_set_mask+0x58>)
    816c:	69d1      	ldr	r1, [r2, #28]
    816e:	683a      	ldr	r2, [r7, #0]
    8170:	430a      	orrs	r2, r1
    8172:	61da      	str	r2, [r3, #28]
			break;
    8174:	e008      	b.n	8188 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    8176:	4b07      	ldr	r3, [pc, #28]	; (8194 <system_apb_clock_set_mask+0x58>)
    8178:	4a06      	ldr	r2, [pc, #24]	; (8194 <system_apb_clock_set_mask+0x58>)
    817a:	6a11      	ldr	r1, [r2, #32]
    817c:	683a      	ldr	r2, [r7, #0]
    817e:	430a      	orrs	r2, r1
    8180:	621a      	str	r2, [r3, #32]
			break;
    8182:	e001      	b.n	8188 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    8184:	2317      	movs	r3, #23
    8186:	e000      	b.n	818a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    8188:	2300      	movs	r3, #0
}
    818a:	0018      	movs	r0, r3
    818c:	46bd      	mov	sp, r7
    818e:	b002      	add	sp, #8
    8190:	bd80      	pop	{r7, pc}
    8192:	46c0      	nop			; (mov r8, r8)
    8194:	40000400 	.word	0x40000400

00008198 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    8198:	b580      	push	{r7, lr}
    819a:	b084      	sub	sp, #16
    819c:	af00      	add	r7, sp, #0
    819e:	6078      	str	r0, [r7, #4]
	/* Sanity check argument */
	Assert(config);

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    81a0:	4b31      	ldr	r3, [pc, #196]	; (8268 <nvm_set_config+0xd0>)
    81a2:	60fb      	str	r3, [r7, #12]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, MCLK_APBBMASK_NVMCTRL);
#else
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
    81a4:	2104      	movs	r1, #4
    81a6:	2001      	movs	r0, #1
    81a8:	4b30      	ldr	r3, [pc, #192]	; (826c <nvm_set_config+0xd4>)
    81aa:	447b      	add	r3, pc
    81ac:	4798      	blx	r3
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    81ae:	68fb      	ldr	r3, [r7, #12]
    81b0:	2220      	movs	r2, #32
    81b2:	32ff      	adds	r2, #255	; 0xff
    81b4:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    81b6:	4b2e      	ldr	r3, [pc, #184]	; (8270 <nvm_set_config+0xd8>)
    81b8:	447b      	add	r3, pc
    81ba:	4798      	blx	r3
    81bc:	0003      	movs	r3, r0
    81be:	001a      	movs	r2, r3
    81c0:	2301      	movs	r3, #1
    81c2:	4053      	eors	r3, r2
    81c4:	b2db      	uxtb	r3, r3
    81c6:	2b00      	cmp	r3, #0
    81c8:	d001      	beq.n	81ce <nvm_set_config+0x36>
		return STATUS_BUSY;
    81ca:	2305      	movs	r3, #5
    81cc:	e048      	b.n	8260 <nvm_set_config+0xc8>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    81ce:	687b      	ldr	r3, [r7, #4]
    81d0:	781b      	ldrb	r3, [r3, #0]
    81d2:	021b      	lsls	r3, r3, #8
    81d4:	001a      	movs	r2, r3
    81d6:	23c0      	movs	r3, #192	; 0xc0
    81d8:	009b      	lsls	r3, r3, #2
    81da:	401a      	ands	r2, r3
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    81dc:	687b      	ldr	r3, [r7, #4]
    81de:	785b      	ldrb	r3, [r3, #1]
    81e0:	01db      	lsls	r3, r3, #7
    81e2:	0019      	movs	r1, r3
    81e4:	23ff      	movs	r3, #255	; 0xff
    81e6:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    81e8:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    81ea:	687b      	ldr	r3, [r7, #4]
    81ec:	789b      	ldrb	r3, [r3, #2]
    81ee:	005b      	lsls	r3, r3, #1
    81f0:	0019      	movs	r1, r3
    81f2:	231e      	movs	r3, #30
    81f4:	400b      	ands	r3, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    81f6:	431a      	orrs	r2, r3
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    81f8:	687b      	ldr	r3, [r7, #4]
    81fa:	78db      	ldrb	r3, [r3, #3]
    81fc:	049b      	lsls	r3, r3, #18
    81fe:	0019      	movs	r1, r3
    8200:	2380      	movs	r3, #128	; 0x80
    8202:	02db      	lsls	r3, r3, #11
    8204:	400b      	ands	r3, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    8206:	431a      	orrs	r2, r3
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    8208:	687b      	ldr	r3, [r7, #4]
    820a:	791b      	ldrb	r3, [r3, #4]
    820c:	041b      	lsls	r3, r3, #16
    820e:	0019      	movs	r1, r3
    8210:	23c0      	movs	r3, #192	; 0xc0
    8212:	029b      	lsls	r3, r3, #10
    8214:	400b      	ands	r3, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    8216:	431a      	orrs	r2, r3
	nvm_module->CTRLB.reg =
    8218:	68fb      	ldr	r3, [r7, #12]
    821a:	605a      	str	r2, [r3, #4]
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    821c:	68fb      	ldr	r3, [r7, #12]
    821e:	689b      	ldr	r3, [r3, #8]
    8220:	035b      	lsls	r3, r3, #13
    8222:	0f5b      	lsrs	r3, r3, #29
    8224:	b2db      	uxtb	r3, r3
    8226:	001a      	movs	r2, r3
    8228:	2308      	movs	r3, #8
    822a:	4093      	lsls	r3, r2
    822c:	b29a      	uxth	r2, r3
    822e:	4b11      	ldr	r3, [pc, #68]	; (8274 <nvm_set_config+0xdc>)
    8230:	447b      	add	r3, pc
    8232:	801a      	strh	r2, [r3, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    8234:	68fb      	ldr	r3, [r7, #12]
    8236:	689b      	ldr	r3, [r3, #8]
    8238:	b29a      	uxth	r2, r3
    823a:	4b0f      	ldr	r3, [pc, #60]	; (8278 <nvm_set_config+0xe0>)
    823c:	447b      	add	r3, pc
    823e:	805a      	strh	r2, [r3, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    8240:	687b      	ldr	r3, [r7, #4]
    8242:	785a      	ldrb	r2, [r3, #1]
    8244:	4b0d      	ldr	r3, [pc, #52]	; (827c <nvm_set_config+0xe4>)
    8246:	447b      	add	r3, pc
    8248:	711a      	strb	r2, [r3, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    824a:	68fb      	ldr	r3, [r7, #12]
    824c:	8b1b      	ldrh	r3, [r3, #24]
    824e:	b29b      	uxth	r3, r3
    8250:	001a      	movs	r2, r3
    8252:	2380      	movs	r3, #128	; 0x80
    8254:	005b      	lsls	r3, r3, #1
    8256:	4013      	ands	r3, r2
    8258:	d001      	beq.n	825e <nvm_set_config+0xc6>
		return STATUS_ERR_IO;
    825a:	2310      	movs	r3, #16
    825c:	e000      	b.n	8260 <nvm_set_config+0xc8>
	}

	return STATUS_OK;
    825e:	2300      	movs	r3, #0
}
    8260:	0018      	movs	r0, r3
    8262:	46bd      	mov	sp, r7
    8264:	b004      	add	sp, #16
    8266:	bd80      	pop	{r7, pc}
    8268:	41004000 	.word	0x41004000
    826c:	ffffff8f 	.word	0xffffff8f
    8270:	ffffff59 	.word	0xffffff59
    8274:	1fff8360 	.word	0x1fff8360
    8278:	1fff8354 	.word	0x1fff8354
    827c:	1fff834a 	.word	0x1fff834a

00008280 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    8280:	b580      	push	{r7, lr}
    8282:	b086      	sub	sp, #24
    8284:	af00      	add	r7, sp, #0
    8286:	60b9      	str	r1, [r7, #8]
    8288:	607a      	str	r2, [r7, #4]
    828a:	230f      	movs	r3, #15
    828c:	18fb      	adds	r3, r7, r3
    828e:	1c02      	adds	r2, r0, #0
    8290:	701a      	strb	r2, [r3, #0]
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    8292:	4b80      	ldr	r3, [pc, #512]	; (8494 <nvm_execute_command+0x214>)
    8294:	447b      	add	r3, pc
    8296:	881b      	ldrh	r3, [r3, #0]
    8298:	001a      	movs	r2, r3
    829a:	4b7f      	ldr	r3, [pc, #508]	; (8498 <nvm_execute_command+0x218>)
    829c:	447b      	add	r3, pc
    829e:	885b      	ldrh	r3, [r3, #2]
    82a0:	435a      	muls	r2, r3
    82a2:	68bb      	ldr	r3, [r7, #8]
    82a4:	429a      	cmp	r2, r3
    82a6:	d209      	bcs.n	82bc <nvm_execute_command+0x3c>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    82a8:	68bb      	ldr	r3, [r7, #8]
    82aa:	4a7c      	ldr	r2, [pc, #496]	; (849c <nvm_execute_command+0x21c>)
    82ac:	4293      	cmp	r3, r2
    82ae:	d903      	bls.n	82b8 <nvm_execute_command+0x38>
    82b0:	68bb      	ldr	r3, [r7, #8]
    82b2:	4a7b      	ldr	r2, [pc, #492]	; (84a0 <nvm_execute_command+0x220>)
    82b4:	4293      	cmp	r3, r2
    82b6:	d901      	bls.n	82bc <nvm_execute_command+0x3c>
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    82b8:	2318      	movs	r3, #24
    82ba:	e0e6      	b.n	848a <nvm_execute_command+0x20a>
#endif
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    82bc:	4b79      	ldr	r3, [pc, #484]	; (84a4 <nvm_execute_command+0x224>)
    82be:	617b      	str	r3, [r7, #20]

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
    82c0:	697b      	ldr	r3, [r7, #20]
    82c2:	685b      	ldr	r3, [r3, #4]
    82c4:	613b      	str	r3, [r7, #16]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    82c6:	693b      	ldr	r3, [r7, #16]
    82c8:	2280      	movs	r2, #128	; 0x80
    82ca:	02d2      	lsls	r2, r2, #11
    82cc:	431a      	orrs	r2, r3
    82ce:	697b      	ldr	r3, [r7, #20]
    82d0:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    82d2:	697b      	ldr	r3, [r7, #20]
    82d4:	2220      	movs	r2, #32
    82d6:	32ff      	adds	r2, #255	; 0xff
    82d8:	831a      	strh	r2, [r3, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    82da:	4b73      	ldr	r3, [pc, #460]	; (84a8 <nvm_execute_command+0x228>)
    82dc:	447b      	add	r3, pc
    82de:	4798      	blx	r3
    82e0:	0003      	movs	r3, r0
    82e2:	001a      	movs	r2, r3
    82e4:	2301      	movs	r3, #1
    82e6:	4053      	eors	r3, r2
    82e8:	b2db      	uxtb	r3, r3
    82ea:	2b00      	cmp	r3, #0
    82ec:	d004      	beq.n	82f8 <nvm_execute_command+0x78>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    82ee:	697b      	ldr	r3, [r7, #20]
    82f0:	693a      	ldr	r2, [r7, #16]
    82f2:	605a      	str	r2, [r3, #4]
		return STATUS_BUSY;
    82f4:	2305      	movs	r3, #5
    82f6:	e0c8      	b.n	848a <nvm_execute_command+0x20a>
	}

	switch (command) {
    82f8:	230f      	movs	r3, #15
    82fa:	18fb      	adds	r3, r7, r3
    82fc:	781b      	ldrb	r3, [r3, #0]
    82fe:	3b02      	subs	r3, #2
    8300:	2b43      	cmp	r3, #67	; 0x43
    8302:	d900      	bls.n	8306 <nvm_execute_command+0x86>
    8304:	e0a3      	b.n	844e <nvm_execute_command+0x1ce>
    8306:	0018      	movs	r0, r3
    8308:	f008 f9b2 	bl	10670 <__gnu_thumb1_case_si>
    830c:	00000136 	.word	0x00000136
    8310:	00000142 	.word	0x00000142
    8314:	00000136 	.word	0x00000136
    8318:	00000110 	.word	0x00000110
    831c:	00000110 	.word	0x00000110
    8320:	00000142 	.word	0x00000142
    8324:	00000142 	.word	0x00000142
    8328:	00000142 	.word	0x00000142
    832c:	00000142 	.word	0x00000142
    8330:	00000142 	.word	0x00000142
    8334:	00000142 	.word	0x00000142
    8338:	00000142 	.word	0x00000142
    833c:	00000142 	.word	0x00000142
    8340:	00000142 	.word	0x00000142
    8344:	00000142 	.word	0x00000142
    8348:	00000142 	.word	0x00000142
    834c:	00000142 	.word	0x00000142
    8350:	00000142 	.word	0x00000142
    8354:	00000142 	.word	0x00000142
    8358:	00000142 	.word	0x00000142
    835c:	00000142 	.word	0x00000142
    8360:	00000142 	.word	0x00000142
    8364:	00000142 	.word	0x00000142
    8368:	00000142 	.word	0x00000142
    836c:	00000142 	.word	0x00000142
    8370:	00000142 	.word	0x00000142
    8374:	00000142 	.word	0x00000142
    8378:	00000142 	.word	0x00000142
    837c:	00000142 	.word	0x00000142
    8380:	00000142 	.word	0x00000142
    8384:	00000142 	.word	0x00000142
    8388:	00000142 	.word	0x00000142
    838c:	00000142 	.word	0x00000142
    8390:	00000142 	.word	0x00000142
    8394:	00000142 	.word	0x00000142
    8398:	00000142 	.word	0x00000142
    839c:	00000142 	.word	0x00000142
    83a0:	00000142 	.word	0x00000142
    83a4:	00000142 	.word	0x00000142
    83a8:	00000142 	.word	0x00000142
    83ac:	00000142 	.word	0x00000142
    83b0:	00000142 	.word	0x00000142
    83b4:	00000142 	.word	0x00000142
    83b8:	00000142 	.word	0x00000142
    83bc:	00000142 	.word	0x00000142
    83c0:	00000142 	.word	0x00000142
    83c4:	00000142 	.word	0x00000142
    83c8:	00000142 	.word	0x00000142
    83cc:	00000142 	.word	0x00000142
    83d0:	00000142 	.word	0x00000142
    83d4:	00000142 	.word	0x00000142
    83d8:	00000142 	.word	0x00000142
    83dc:	00000142 	.word	0x00000142
    83e0:	00000142 	.word	0x00000142
    83e4:	00000142 	.word	0x00000142
    83e8:	00000142 	.word	0x00000142
    83ec:	00000142 	.word	0x00000142
    83f0:	00000142 	.word	0x00000142
    83f4:	00000142 	.word	0x00000142
    83f8:	00000142 	.word	0x00000142
    83fc:	00000142 	.word	0x00000142
    8400:	00000142 	.word	0x00000142
    8404:	00000136 	.word	0x00000136
    8408:	00000136 	.word	0x00000136
    840c:	0000014c 	.word	0x0000014c
    8410:	0000014c 	.word	0x0000014c
    8414:	0000014c 	.word	0x0000014c
    8418:	0000014c 	.word	0x0000014c
		/* Commands requiring address (protected) */
		case NVM_COMMAND_ERASE_AUX_ROW:
		case NVM_COMMAND_WRITE_AUX_ROW:

			/* Auxiliary space cannot be accessed if the security bit is set */
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    841c:	697b      	ldr	r3, [r7, #20]
    841e:	8b1b      	ldrh	r3, [r3, #24]
    8420:	b29b      	uxth	r3, r3
    8422:	001a      	movs	r2, r3
    8424:	2380      	movs	r3, #128	; 0x80
    8426:	005b      	lsls	r3, r3, #1
    8428:	4013      	ands	r3, r2
    842a:	d004      	beq.n	8436 <nvm_execute_command+0x1b6>
				/* Restore the setting */
				nvm_module->CTRLB.reg = ctrlb_bak;
    842c:	697b      	ldr	r3, [r7, #20]
    842e:	693a      	ldr	r2, [r7, #16]
    8430:	605a      	str	r2, [r3, #4]
				return STATUS_ERR_IO;
    8432:	2310      	movs	r3, #16
    8434:	e029      	b.n	848a <nvm_execute_command+0x20a>
			}

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    8436:	68bb      	ldr	r3, [r7, #8]
    8438:	089b      	lsrs	r3, r3, #2
    843a:	005a      	lsls	r2, r3, #1
    843c:	697b      	ldr	r3, [r7, #20]
    843e:	61da      	str	r2, [r3, #28]
			break;
    8440:	e00b      	b.n	845a <nvm_execute_command+0x1da>
		case NVM_COMMAND_RWWEE_ERASE_ROW:
		case NVM_COMMAND_RWWEE_WRITE_PAGE:
#endif

			/* Set address, command will be issued elsewhere */
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    8442:	68bb      	ldr	r3, [r7, #8]
    8444:	089b      	lsrs	r3, r3, #2
    8446:	005a      	lsls	r2, r3, #1
    8448:	697b      	ldr	r3, [r7, #20]
    844a:	61da      	str	r2, [r3, #28]
			break;
    844c:	e005      	b.n	845a <nvm_execute_command+0x1da>
		case NVM_COMMAND_EXIT_LOW_POWER_MODE:
			break;

		default:
			/* Restore the setting */
			nvm_module->CTRLB.reg = ctrlb_bak;
    844e:	697b      	ldr	r3, [r7, #20]
    8450:	693a      	ldr	r2, [r7, #16]
    8452:	605a      	str	r2, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
    8454:	2317      	movs	r3, #23
    8456:	e018      	b.n	848a <nvm_execute_command+0x20a>
			break;
    8458:	46c0      	nop			; (mov r8, r8)
	}

	/* Set command */
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    845a:	230f      	movs	r3, #15
    845c:	18fb      	adds	r3, r7, r3
    845e:	781b      	ldrb	r3, [r3, #0]
    8460:	b29b      	uxth	r3, r3
    8462:	4a12      	ldr	r2, [pc, #72]	; (84ac <nvm_execute_command+0x22c>)
    8464:	4313      	orrs	r3, r2
    8466:	b29a      	uxth	r2, r3
    8468:	697b      	ldr	r3, [r7, #20]
    846a:	801a      	strh	r2, [r3, #0]

	/* Wait for the NVM controller to become ready */
	while (!nvm_is_ready()) {
    846c:	46c0      	nop			; (mov r8, r8)
    846e:	4b10      	ldr	r3, [pc, #64]	; (84b0 <nvm_execute_command+0x230>)
    8470:	447b      	add	r3, pc
    8472:	4798      	blx	r3
    8474:	0003      	movs	r3, r0
    8476:	001a      	movs	r2, r3
    8478:	2301      	movs	r3, #1
    847a:	4053      	eors	r3, r2
    847c:	b2db      	uxtb	r3, r3
    847e:	2b00      	cmp	r3, #0
    8480:	d1f5      	bne.n	846e <nvm_execute_command+0x1ee>
	}

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;
    8482:	697b      	ldr	r3, [r7, #20]
    8484:	693a      	ldr	r2, [r7, #16]
    8486:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    8488:	2300      	movs	r3, #0
}
    848a:	0018      	movs	r0, r3
    848c:	46bd      	mov	sp, r7
    848e:	b006      	add	sp, #24
    8490:	bd80      	pop	{r7, pc}
    8492:	46c0      	nop			; (mov r8, r8)
    8494:	1fff82fc 	.word	0x1fff82fc
    8498:	1fff82f4 	.word	0x1fff82f4
    849c:	00803fff 	.word	0x00803fff
    84a0:	00806000 	.word	0x00806000
    84a4:	41004000 	.word	0x41004000
    84a8:	fffffe35 	.word	0xfffffe35
    84ac:	ffffa500 	.word	0xffffa500
    84b0:	fffffca1 	.word	0xfffffca1

000084b4 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    84b4:	b590      	push	{r4, r7, lr}
    84b6:	b089      	sub	sp, #36	; 0x24
    84b8:	af00      	add	r7, sp, #0
    84ba:	60f8      	str	r0, [r7, #12]
    84bc:	60b9      	str	r1, [r7, #8]
    84be:	1dbb      	adds	r3, r7, #6
    84c0:	801a      	strh	r2, [r3, #0]
    84c2:	4c4f      	ldr	r4, [pc, #316]	; (8600 <nvm_write_buffer+0x14c>)
    84c4:	447c      	add	r4, pc
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    84c6:	4b4f      	ldr	r3, [pc, #316]	; (8604 <nvm_write_buffer+0x150>)
    84c8:	447b      	add	r3, pc
    84ca:	881b      	ldrh	r3, [r3, #0]
    84cc:	001a      	movs	r2, r3
    84ce:	4b4e      	ldr	r3, [pc, #312]	; (8608 <nvm_write_buffer+0x154>)
    84d0:	447b      	add	r3, pc
    84d2:	885b      	ldrh	r3, [r3, #2]
    84d4:	435a      	muls	r2, r3
	if (destination_address >
    84d6:	68fb      	ldr	r3, [r7, #12]
    84d8:	429a      	cmp	r2, r3
    84da:	d201      	bcs.n	84e0 <nvm_write_buffer+0x2c>
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    84dc:	2318      	movs	r3, #24
    84de:	e08a      	b.n	85f6 <nvm_write_buffer+0x142>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    84e0:	4b4a      	ldr	r3, [pc, #296]	; (860c <nvm_write_buffer+0x158>)
    84e2:	447b      	add	r3, pc
    84e4:	881b      	ldrh	r3, [r3, #0]
    84e6:	3b01      	subs	r3, #1
    84e8:	001a      	movs	r2, r3
    84ea:	68fb      	ldr	r3, [r7, #12]
    84ec:	4013      	ands	r3, r2
    84ee:	d001      	beq.n	84f4 <nvm_write_buffer+0x40>
		return STATUS_ERR_BAD_ADDRESS;
    84f0:	2318      	movs	r3, #24
    84f2:	e080      	b.n	85f6 <nvm_write_buffer+0x142>
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
    84f4:	4b46      	ldr	r3, [pc, #280]	; (8610 <nvm_write_buffer+0x15c>)
    84f6:	447b      	add	r3, pc
    84f8:	881b      	ldrh	r3, [r3, #0]
    84fa:	1dba      	adds	r2, r7, #6
    84fc:	8812      	ldrh	r2, [r2, #0]
    84fe:	429a      	cmp	r2, r3
    8500:	d901      	bls.n	8506 <nvm_write_buffer+0x52>
		return STATUS_ERR_INVALID_ARG;
    8502:	2317      	movs	r3, #23
    8504:	e077      	b.n	85f6 <nvm_write_buffer+0x142>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    8506:	4b43      	ldr	r3, [pc, #268]	; (8614 <nvm_write_buffer+0x160>)
    8508:	617b      	str	r3, [r7, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    850a:	4b43      	ldr	r3, [pc, #268]	; (8618 <nvm_write_buffer+0x164>)
    850c:	447b      	add	r3, pc
    850e:	4798      	blx	r3
    8510:	0003      	movs	r3, r0
    8512:	001a      	movs	r2, r3
    8514:	2301      	movs	r3, #1
    8516:	4053      	eors	r3, r2
    8518:	b2db      	uxtb	r3, r3
    851a:	2b00      	cmp	r3, #0
    851c:	d001      	beq.n	8522 <nvm_write_buffer+0x6e>
		return STATUS_BUSY;
    851e:	2305      	movs	r3, #5
    8520:	e069      	b.n	85f6 <nvm_write_buffer+0x142>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    8522:	697b      	ldr	r3, [r7, #20]
    8524:	4a3d      	ldr	r2, [pc, #244]	; (861c <nvm_write_buffer+0x168>)
    8526:	801a      	strh	r2, [r3, #0]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    8528:	46c0      	nop			; (mov r8, r8)
    852a:	4b3d      	ldr	r3, [pc, #244]	; (8620 <nvm_write_buffer+0x16c>)
    852c:	447b      	add	r3, pc
    852e:	4798      	blx	r3
    8530:	0003      	movs	r3, r0
    8532:	001a      	movs	r2, r3
    8534:	2301      	movs	r3, #1
    8536:	4053      	eors	r3, r2
    8538:	b2db      	uxtb	r3, r3
    853a:	2b00      	cmp	r3, #0
    853c:	d1f5      	bne.n	852a <nvm_write_buffer+0x76>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    853e:	697b      	ldr	r3, [r7, #20]
    8540:	2220      	movs	r2, #32
    8542:	32ff      	adds	r2, #255	; 0xff
    8544:	831a      	strh	r2, [r3, #24]

	uint32_t nvm_address = destination_address / 2;
    8546:	68fb      	ldr	r3, [r7, #12]
    8548:	085b      	lsrs	r3, r3, #1
    854a:	61fb      	str	r3, [r7, #28]

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    854c:	231a      	movs	r3, #26
    854e:	18fb      	adds	r3, r7, r3
    8550:	2200      	movs	r2, #0
    8552:	801a      	strh	r2, [r3, #0]
    8554:	e032      	b.n	85bc <nvm_write_buffer+0x108>
		uint16_t data;

		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];
    8556:	231a      	movs	r3, #26
    8558:	18fb      	adds	r3, r7, r3
    855a:	881b      	ldrh	r3, [r3, #0]
    855c:	68ba      	ldr	r2, [r7, #8]
    855e:	18d3      	adds	r3, r2, r3
    8560:	781a      	ldrb	r2, [r3, #0]
    8562:	2318      	movs	r3, #24
    8564:	18fb      	adds	r3, r7, r3
    8566:	801a      	strh	r2, [r3, #0]

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    8568:	231a      	movs	r3, #26
    856a:	18fb      	adds	r3, r7, r3
    856c:	881a      	ldrh	r2, [r3, #0]
    856e:	1dbb      	adds	r3, r7, #6
    8570:	881b      	ldrh	r3, [r3, #0]
    8572:	3b01      	subs	r3, #1
    8574:	429a      	cmp	r2, r3
    8576:	da11      	bge.n	859c <nvm_write_buffer+0xe8>
			data |= (buffer[i + 1] << 8);
    8578:	231a      	movs	r3, #26
    857a:	18fb      	adds	r3, r7, r3
    857c:	881b      	ldrh	r3, [r3, #0]
    857e:	3301      	adds	r3, #1
    8580:	68ba      	ldr	r2, [r7, #8]
    8582:	18d3      	adds	r3, r2, r3
    8584:	781b      	ldrb	r3, [r3, #0]
    8586:	021b      	lsls	r3, r3, #8
    8588:	b21a      	sxth	r2, r3
    858a:	2318      	movs	r3, #24
    858c:	18fb      	adds	r3, r7, r3
    858e:	2100      	movs	r1, #0
    8590:	5e5b      	ldrsh	r3, [r3, r1]
    8592:	4313      	orrs	r3, r2
    8594:	b21a      	sxth	r2, r3
    8596:	2318      	movs	r3, #24
    8598:	18fb      	adds	r3, r7, r3
    859a:	801a      	strh	r2, [r3, #0]
		}

		/* Store next 16-bit chunk to the NVM memory space */
		NVM_MEMORY[nvm_address++] = data;
    859c:	69fb      	ldr	r3, [r7, #28]
    859e:	1c5a      	adds	r2, r3, #1
    85a0:	61fa      	str	r2, [r7, #28]
    85a2:	005b      	lsls	r3, r3, #1
    85a4:	001a      	movs	r2, r3
    85a6:	2318      	movs	r3, #24
    85a8:	18fb      	adds	r3, r7, r3
    85aa:	881b      	ldrh	r3, [r3, #0]
    85ac:	8013      	strh	r3, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    85ae:	231a      	movs	r3, #26
    85b0:	18fb      	adds	r3, r7, r3
    85b2:	221a      	movs	r2, #26
    85b4:	18ba      	adds	r2, r7, r2
    85b6:	8812      	ldrh	r2, [r2, #0]
    85b8:	3202      	adds	r2, #2
    85ba:	801a      	strh	r2, [r3, #0]
    85bc:	231a      	movs	r3, #26
    85be:	18fa      	adds	r2, r7, r3
    85c0:	1dbb      	adds	r3, r7, #6
    85c2:	8812      	ldrh	r2, [r2, #0]
    85c4:	881b      	ldrh	r3, [r3, #0]
    85c6:	429a      	cmp	r2, r3
    85c8:	d3c5      	bcc.n	8556 <nvm_write_buffer+0xa2>
	}

	/* If automatic page write mode is enable, then perform a manual NVM
	 * write when the length of data to be programmed is less than page size
	 */
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    85ca:	4b16      	ldr	r3, [pc, #88]	; (8624 <nvm_write_buffer+0x170>)
    85cc:	447b      	add	r3, pc
    85ce:	791b      	ldrb	r3, [r3, #4]
    85d0:	2201      	movs	r2, #1
    85d2:	4053      	eors	r3, r2
    85d4:	b2db      	uxtb	r3, r3
    85d6:	2b00      	cmp	r3, #0
    85d8:	d00c      	beq.n	85f4 <nvm_write_buffer+0x140>
    85da:	1dbb      	adds	r3, r7, #6
    85dc:	881b      	ldrh	r3, [r3, #0]
    85de:	2b3f      	cmp	r3, #63	; 0x3f
    85e0:	d808      	bhi.n	85f4 <nvm_write_buffer+0x140>
#ifdef FEATURE_NVM_RWWEE
	 return ((is_rww_eeprom) ?
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
	 			(nvm_execute_command(NVM_COMMAND_WRITE_PAGE,destination_address, 0)));
#else
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    85e2:	68fb      	ldr	r3, [r7, #12]
    85e4:	2200      	movs	r2, #0
    85e6:	0019      	movs	r1, r3
    85e8:	2004      	movs	r0, #4
    85ea:	4b0f      	ldr	r3, [pc, #60]	; (8628 <nvm_write_buffer+0x174>)
    85ec:	58e3      	ldr	r3, [r4, r3]
    85ee:	4798      	blx	r3
    85f0:	0003      	movs	r3, r0
    85f2:	e000      	b.n	85f6 <nvm_write_buffer+0x142>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    85f4:	2300      	movs	r3, #0
}
    85f6:	0018      	movs	r0, r3
    85f8:	46bd      	mov	sp, r7
    85fa:	b009      	add	sp, #36	; 0x24
    85fc:	bd90      	pop	{r4, r7, pc}
    85fe:	46c0      	nop			; (mov r8, r8)
    8600:	0000990c 	.word	0x0000990c
    8604:	1fff80c8 	.word	0x1fff80c8
    8608:	1fff80c0 	.word	0x1fff80c0
    860c:	1fff80ae 	.word	0x1fff80ae
    8610:	1fff809a 	.word	0x1fff809a
    8614:	41004000 	.word	0x41004000
    8618:	fffffc05 	.word	0xfffffc05
    861c:	ffffa544 	.word	0xffffa544
    8620:	fffffbe5 	.word	0xfffffbe5
    8624:	1fff7fc4 	.word	0x1fff7fc4
    8628:	0000023c 	.word	0x0000023c

0000862c <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    862c:	b580      	push	{r7, lr}
    862e:	b084      	sub	sp, #16
    8630:	af00      	add	r7, sp, #0
    8632:	6078      	str	r0, [r7, #4]
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    8634:	4b25      	ldr	r3, [pc, #148]	; (86cc <nvm_erase_row+0xa0>)
    8636:	447b      	add	r3, pc
    8638:	881b      	ldrh	r3, [r3, #0]
    863a:	001a      	movs	r2, r3
    863c:	4b24      	ldr	r3, [pc, #144]	; (86d0 <nvm_erase_row+0xa4>)
    863e:	447b      	add	r3, pc
    8640:	885b      	ldrh	r3, [r3, #2]
    8642:	435a      	muls	r2, r3
	if (row_address >
    8644:	687b      	ldr	r3, [r7, #4]
    8646:	429a      	cmp	r2, r3
    8648:	d201      	bcs.n	864e <nvm_erase_row+0x22>
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    864a:	2318      	movs	r3, #24
    864c:	e03a      	b.n	86c4 <nvm_erase_row+0x98>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    864e:	4b21      	ldr	r3, [pc, #132]	; (86d4 <nvm_erase_row+0xa8>)
    8650:	447b      	add	r3, pc
    8652:	881b      	ldrh	r3, [r3, #0]
    8654:	009b      	lsls	r3, r3, #2
    8656:	3b01      	subs	r3, #1
    8658:	001a      	movs	r2, r3
    865a:	687b      	ldr	r3, [r7, #4]
    865c:	4013      	ands	r3, r2
    865e:	d001      	beq.n	8664 <nvm_erase_row+0x38>
		return STATUS_ERR_BAD_ADDRESS;
    8660:	2318      	movs	r3, #24
    8662:	e02f      	b.n	86c4 <nvm_erase_row+0x98>
	}

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;
    8664:	4b1c      	ldr	r3, [pc, #112]	; (86d8 <nvm_erase_row+0xac>)
    8666:	60fb      	str	r3, [r7, #12]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    8668:	4b1c      	ldr	r3, [pc, #112]	; (86dc <nvm_erase_row+0xb0>)
    866a:	447b      	add	r3, pc
    866c:	4798      	blx	r3
    866e:	0003      	movs	r3, r0
    8670:	001a      	movs	r2, r3
    8672:	2301      	movs	r3, #1
    8674:	4053      	eors	r3, r2
    8676:	b2db      	uxtb	r3, r3
    8678:	2b00      	cmp	r3, #0
    867a:	d001      	beq.n	8680 <nvm_erase_row+0x54>
		return STATUS_BUSY;
    867c:	2305      	movs	r3, #5
    867e:	e021      	b.n	86c4 <nvm_erase_row+0x98>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    8680:	68fb      	ldr	r3, [r7, #12]
    8682:	2220      	movs	r2, #32
    8684:	32ff      	adds	r2, #255	; 0xff
    8686:	831a      	strh	r2, [r3, #24]

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    8688:	687b      	ldr	r3, [r7, #4]
    868a:	089b      	lsrs	r3, r3, #2
    868c:	005a      	lsls	r2, r3, #1
    868e:	68fb      	ldr	r3, [r7, #12]
    8690:	61da      	str	r2, [r3, #28]
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    8692:	68fb      	ldr	r3, [r7, #12]
    8694:	4a12      	ldr	r2, [pc, #72]	; (86e0 <nvm_erase_row+0xb4>)
    8696:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    8698:	46c0      	nop			; (mov r8, r8)
    869a:	4b12      	ldr	r3, [pc, #72]	; (86e4 <nvm_erase_row+0xb8>)
    869c:	447b      	add	r3, pc
    869e:	4798      	blx	r3
    86a0:	0003      	movs	r3, r0
    86a2:	001a      	movs	r2, r3
    86a4:	2301      	movs	r3, #1
    86a6:	4053      	eors	r3, r2
    86a8:	b2db      	uxtb	r3, r3
    86aa:	2b00      	cmp	r3, #0
    86ac:	d1f5      	bne.n	869a <nvm_erase_row+0x6e>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    86ae:	68fb      	ldr	r3, [r7, #12]
    86b0:	8b1b      	ldrh	r3, [r3, #24]
    86b2:	b29b      	uxth	r3, r3
    86b4:	b2db      	uxtb	r3, r3
    86b6:	001a      	movs	r2, r3
    86b8:	231c      	movs	r3, #28
    86ba:	4013      	ands	r3, r2
    86bc:	d001      	beq.n	86c2 <nvm_erase_row+0x96>
		return STATUS_ABORTED;
    86be:	2304      	movs	r3, #4
    86c0:	e000      	b.n	86c4 <nvm_erase_row+0x98>
	}

	return STATUS_OK;
    86c2:	2300      	movs	r3, #0
}
    86c4:	0018      	movs	r0, r3
    86c6:	46bd      	mov	sp, r7
    86c8:	b004      	add	sp, #16
    86ca:	bd80      	pop	{r7, pc}
    86cc:	1fff7f5a 	.word	0x1fff7f5a
    86d0:	1fff7f52 	.word	0x1fff7f52
    86d4:	1fff7f40 	.word	0x1fff7f40
    86d8:	41004000 	.word	0x41004000
    86dc:	fffffaa7 	.word	0xfffffaa7
    86e0:	ffffa502 	.word	0xffffa502
    86e4:	fffffa75 	.word	0xfffffa75

000086e8 <system_pinmux_get_config_defaults>:
{
    86e8:	b580      	push	{r7, lr}
    86ea:	b082      	sub	sp, #8
    86ec:	af00      	add	r7, sp, #0
    86ee:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    86f0:	687b      	ldr	r3, [r7, #4]
    86f2:	2280      	movs	r2, #128	; 0x80
    86f4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    86f6:	687b      	ldr	r3, [r7, #4]
    86f8:	2200      	movs	r2, #0
    86fa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    86fc:	687b      	ldr	r3, [r7, #4]
    86fe:	2201      	movs	r2, #1
    8700:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    8702:	687b      	ldr	r3, [r7, #4]
    8704:	2200      	movs	r2, #0
    8706:	70da      	strb	r2, [r3, #3]
}
    8708:	46c0      	nop			; (mov r8, r8)
    870a:	46bd      	mov	sp, r7
    870c:	b002      	add	sp, #8
    870e:	bd80      	pop	{r7, pc}

00008710 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    8710:	b590      	push	{r4, r7, lr}
    8712:	b085      	sub	sp, #20
    8714:	af00      	add	r7, sp, #0
    8716:	0002      	movs	r2, r0
    8718:	6039      	str	r1, [r7, #0]
    871a:	1dfb      	adds	r3, r7, #7
    871c:	701a      	strb	r2, [r3, #0]
    871e:	4c14      	ldr	r4, [pc, #80]	; (8770 <port_pin_set_config+0x60>)
    8720:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    8722:	230c      	movs	r3, #12
    8724:	18fb      	adds	r3, r7, r3
    8726:	0018      	movs	r0, r3
    8728:	4b12      	ldr	r3, [pc, #72]	; (8774 <port_pin_set_config+0x64>)
    872a:	447b      	add	r3, pc
    872c:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    872e:	230c      	movs	r3, #12
    8730:	18fb      	adds	r3, r7, r3
    8732:	2280      	movs	r2, #128	; 0x80
    8734:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    8736:	683b      	ldr	r3, [r7, #0]
    8738:	781a      	ldrb	r2, [r3, #0]
    873a:	230c      	movs	r3, #12
    873c:	18fb      	adds	r3, r7, r3
    873e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    8740:	683b      	ldr	r3, [r7, #0]
    8742:	785a      	ldrb	r2, [r3, #1]
    8744:	230c      	movs	r3, #12
    8746:	18fb      	adds	r3, r7, r3
    8748:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    874a:	683b      	ldr	r3, [r7, #0]
    874c:	789a      	ldrb	r2, [r3, #2]
    874e:	230c      	movs	r3, #12
    8750:	18fb      	adds	r3, r7, r3
    8752:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    8754:	230c      	movs	r3, #12
    8756:	18fa      	adds	r2, r7, r3
    8758:	1dfb      	adds	r3, r7, #7
    875a:	781b      	ldrb	r3, [r3, #0]
    875c:	0011      	movs	r1, r2
    875e:	0018      	movs	r0, r3
    8760:	4b05      	ldr	r3, [pc, #20]	; (8778 <port_pin_set_config+0x68>)
    8762:	58e3      	ldr	r3, [r4, r3]
    8764:	4798      	blx	r3
}
    8766:	46c0      	nop			; (mov r8, r8)
    8768:	46bd      	mov	sp, r7
    876a:	b005      	add	sp, #20
    876c:	bd90      	pop	{r4, r7, pc}
    876e:	46c0      	nop			; (mov r8, r8)
    8770:	000096b0 	.word	0x000096b0
    8774:	ffffffbb 	.word	0xffffffbb
    8778:	000002b0 	.word	0x000002b0

0000877c <cpu_irq_save>:
{
    877c:	b580      	push	{r7, lr}
    877e:	b082      	sub	sp, #8
    8780:	af00      	add	r7, sp, #0
    8782:	4a0b      	ldr	r2, [pc, #44]	; (87b0 <cpu_irq_save+0x34>)
    8784:	447a      	add	r2, pc
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    8786:	f3ef 8310 	mrs	r3, PRIMASK
    878a:	607b      	str	r3, [r7, #4]
  return(result);
    878c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    878e:	4259      	negs	r1, r3
    8790:	414b      	adcs	r3, r1
    8792:	b2db      	uxtb	r3, r3
    8794:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    8796:	b672      	cpsid	i
    8798:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    879c:	4b05      	ldr	r3, [pc, #20]	; (87b4 <cpu_irq_save+0x38>)
    879e:	58d3      	ldr	r3, [r2, r3]
    87a0:	2200      	movs	r2, #0
    87a2:	701a      	strb	r2, [r3, #0]
	return flags;
    87a4:	683b      	ldr	r3, [r7, #0]
}
    87a6:	0018      	movs	r0, r3
    87a8:	46bd      	mov	sp, r7
    87aa:	b002      	add	sp, #8
    87ac:	bd80      	pop	{r7, pc}
    87ae:	46c0      	nop			; (mov r8, r8)
    87b0:	0000964c 	.word	0x0000964c
    87b4:	000000ec 	.word	0x000000ec

000087b8 <cpu_irq_is_enabled_flags>:
{
    87b8:	b580      	push	{r7, lr}
    87ba:	b082      	sub	sp, #8
    87bc:	af00      	add	r7, sp, #0
    87be:	6078      	str	r0, [r7, #4]
	return (flags);
    87c0:	687b      	ldr	r3, [r7, #4]
    87c2:	1e5a      	subs	r2, r3, #1
    87c4:	4193      	sbcs	r3, r2
    87c6:	b2db      	uxtb	r3, r3
}
    87c8:	0018      	movs	r0, r3
    87ca:	46bd      	mov	sp, r7
    87cc:	b002      	add	sp, #8
    87ce:	bd80      	pop	{r7, pc}

000087d0 <cpu_irq_restore>:
{
    87d0:	b590      	push	{r4, r7, lr}
    87d2:	b083      	sub	sp, #12
    87d4:	af00      	add	r7, sp, #0
    87d6:	6078      	str	r0, [r7, #4]
    87d8:	4c09      	ldr	r4, [pc, #36]	; (8800 <cpu_irq_restore+0x30>)
    87da:	447c      	add	r4, pc
	if (cpu_irq_is_enabled_flags(flags))
    87dc:	687b      	ldr	r3, [r7, #4]
    87de:	0018      	movs	r0, r3
    87e0:	4b08      	ldr	r3, [pc, #32]	; (8804 <cpu_irq_restore+0x34>)
    87e2:	447b      	add	r3, pc
    87e4:	4798      	blx	r3
    87e6:	1e03      	subs	r3, r0, #0
    87e8:	d006      	beq.n	87f8 <cpu_irq_restore+0x28>
		cpu_irq_enable();
    87ea:	4b07      	ldr	r3, [pc, #28]	; (8808 <cpu_irq_restore+0x38>)
    87ec:	58e3      	ldr	r3, [r4, r3]
    87ee:	2201      	movs	r2, #1
    87f0:	701a      	strb	r2, [r3, #0]
    87f2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    87f6:	b662      	cpsie	i
}
    87f8:	46c0      	nop			; (mov r8, r8)
    87fa:	46bd      	mov	sp, r7
    87fc:	b003      	add	sp, #12
    87fe:	bd90      	pop	{r4, r7, pc}
    8800:	000095f6 	.word	0x000095f6
    8804:	ffffffd3 	.word	0xffffffd3
    8808:	000000ec 	.word	0x000000ec

0000880c <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    880c:	b580      	push	{r7, lr}
    880e:	b082      	sub	sp, #8
    8810:	af00      	add	r7, sp, #0
    8812:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    8814:	687b      	ldr	r3, [r7, #4]
    8816:	681a      	ldr	r2, [r3, #0]
    8818:	687b      	ldr	r3, [r7, #4]
    881a:	681b      	ldr	r3, [r3, #0]
    881c:	891b      	ldrh	r3, [r3, #8]
    881e:	b29b      	uxth	r3, r3
    8820:	2101      	movs	r1, #1
    8822:	438b      	bics	r3, r1
    8824:	b29b      	uxth	r3, r3
    8826:	8113      	strh	r3, [r2, #8]
}
    8828:	46c0      	nop			; (mov r8, r8)
    882a:	46bd      	mov	sp, r7
    882c:	b002      	add	sp, #8
    882e:	bd80      	pop	{r7, pc}

00008830 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    8830:	b580      	push	{r7, lr}
    8832:	b082      	sub	sp, #8
    8834:	af00      	add	r7, sp, #0
    8836:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    8838:	687b      	ldr	r3, [r7, #4]
    883a:	681b      	ldr	r3, [r3, #0]
    883c:	7a9b      	ldrb	r3, [r3, #10]
    883e:	065b      	lsls	r3, r3, #25
    8840:	0e5b      	lsrs	r3, r3, #25
    8842:	b2db      	uxtb	r3, r3
}
    8844:	0018      	movs	r0, r3
    8846:	46bd      	mov	sp, r7
    8848:	b002      	add	sp, #8
    884a:	bd80      	pop	{r7, pc}

0000884c <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    884c:	b580      	push	{r7, lr}
    884e:	b082      	sub	sp, #8
    8850:	af00      	add	r7, sp, #0
    8852:	6078      	str	r0, [r7, #4]
    8854:	000a      	movs	r2, r1
    8856:	1cfb      	adds	r3, r7, #3
    8858:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    885a:	687b      	ldr	r3, [r7, #4]
    885c:	681b      	ldr	r3, [r3, #0]
    885e:	1cfa      	adds	r2, r7, #3
    8860:	7812      	ldrb	r2, [r2, #0]
    8862:	2180      	movs	r1, #128	; 0x80
    8864:	4249      	negs	r1, r1
    8866:	430a      	orrs	r2, r1
    8868:	b2d2      	uxtb	r2, r2
    886a:	729a      	strb	r2, [r3, #10]
}
    886c:	46c0      	nop			; (mov r8, r8)
    886e:	46bd      	mov	sp, r7
    8870:	b002      	add	sp, #8
    8872:	bd80      	pop	{r7, pc}

00008874 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    8874:	b580      	push	{r7, lr}
    8876:	b082      	sub	sp, #8
    8878:	af00      	add	r7, sp, #0
    887a:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    887c:	687b      	ldr	r3, [r7, #4]
    887e:	681b      	ldr	r3, [r3, #0]
    8880:	8a1b      	ldrh	r3, [r3, #16]
    8882:	049b      	lsls	r3, r3, #18
    8884:	0d5b      	lsrs	r3, r3, #21
    8886:	b29b      	uxth	r3, r3
}
    8888:	0018      	movs	r0, r3
    888a:	46bd      	mov	sp, r7
    888c:	b002      	add	sp, #8
    888e:	bd80      	pop	{r7, pc}

00008890 <usb_device_get_micro_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
    8890:	b580      	push	{r7, lr}
    8892:	b082      	sub	sp, #8
    8894:	af00      	add	r7, sp, #0
    8896:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    8898:	687b      	ldr	r3, [r7, #4]
    889a:	681b      	ldr	r3, [r3, #0]
    889c:	8a1b      	ldrh	r3, [r3, #16]
    889e:	b29b      	uxth	r3, r3
}
    88a0:	0018      	movs	r0, r3
    88a2:	46bd      	mov	sp, r7
    88a4:	b002      	add	sp, #8
    88a6:	bd80      	pop	{r7, pc}

000088a8 <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    88a8:	b580      	push	{r7, lr}
    88aa:	b082      	sub	sp, #8
    88ac:	af00      	add	r7, sp, #0
    88ae:	6078      	str	r0, [r7, #4]
    88b0:	000a      	movs	r2, r1
    88b2:	1cfb      	adds	r3, r7, #3
    88b4:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    88b6:	687b      	ldr	r3, [r7, #4]
    88b8:	681a      	ldr	r2, [r3, #0]
    88ba:	1cfb      	adds	r3, r7, #3
    88bc:	781b      	ldrb	r3, [r3, #0]
    88be:	2103      	movs	r1, #3
    88c0:	400b      	ands	r3, r1
    88c2:	b2d9      	uxtb	r1, r3
    88c4:	8913      	ldrh	r3, [r2, #8]
    88c6:	1c08      	adds	r0, r1, #0
    88c8:	2103      	movs	r1, #3
    88ca:	4001      	ands	r1, r0
    88cc:	0288      	lsls	r0, r1, #10
    88ce:	4905      	ldr	r1, [pc, #20]	; (88e4 <usb_device_set_lpm_mode+0x3c>)
    88d0:	400b      	ands	r3, r1
    88d2:	1c19      	adds	r1, r3, #0
    88d4:	1c03      	adds	r3, r0, #0
    88d6:	430b      	orrs	r3, r1
    88d8:	8113      	strh	r3, [r2, #8]
}
    88da:	46c0      	nop			; (mov r8, r8)
    88dc:	46bd      	mov	sp, r7
    88de:	b002      	add	sp, #8
    88e0:	bd80      	pop	{r7, pc}
    88e2:	46c0      	nop			; (mov r8, r8)
    88e4:	fffff3ff 	.word	0xfffff3ff

000088e8 <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    88e8:	b590      	push	{r4, r7, lr}
    88ea:	b085      	sub	sp, #20
    88ec:	af00      	add	r7, sp, #0
    88ee:	0002      	movs	r2, r0
    88f0:	1dfb      	adds	r3, r7, #7
    88f2:	701a      	strb	r2, [r3, #0]
    88f4:	4c10      	ldr	r4, [pc, #64]	; (8938 <sleepmgr_lock_mode+0x50>)
    88f6:	447c      	add	r4, pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    88f8:	1dfb      	adds	r3, r7, #7
    88fa:	781b      	ldrb	r3, [r3, #0]
    88fc:	4a0f      	ldr	r2, [pc, #60]	; (893c <sleepmgr_lock_mode+0x54>)
    88fe:	58a2      	ldr	r2, [r4, r2]
    8900:	5cd3      	ldrb	r3, [r2, r3]
    8902:	2bff      	cmp	r3, #255	; 0xff
    8904:	d100      	bne.n	8908 <sleepmgr_lock_mode+0x20>
		while (true) {
    8906:	e7fe      	b.n	8906 <sleepmgr_lock_mode+0x1e>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    8908:	4b0d      	ldr	r3, [pc, #52]	; (8940 <sleepmgr_lock_mode+0x58>)
    890a:	447b      	add	r3, pc
    890c:	4798      	blx	r3
    890e:	0003      	movs	r3, r0
    8910:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    8912:	1dfb      	adds	r3, r7, #7
    8914:	781b      	ldrb	r3, [r3, #0]
    8916:	4a09      	ldr	r2, [pc, #36]	; (893c <sleepmgr_lock_mode+0x54>)
    8918:	58a2      	ldr	r2, [r4, r2]
    891a:	5cd2      	ldrb	r2, [r2, r3]
    891c:	3201      	adds	r2, #1
    891e:	b2d1      	uxtb	r1, r2
    8920:	4a06      	ldr	r2, [pc, #24]	; (893c <sleepmgr_lock_mode+0x54>)
    8922:	58a2      	ldr	r2, [r4, r2]
    8924:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    8926:	68fb      	ldr	r3, [r7, #12]
    8928:	0018      	movs	r0, r3
    892a:	4b06      	ldr	r3, [pc, #24]	; (8944 <sleepmgr_lock_mode+0x5c>)
    892c:	447b      	add	r3, pc
    892e:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8930:	46c0      	nop			; (mov r8, r8)
    8932:	46bd      	mov	sp, r7
    8934:	b005      	add	sp, #20
    8936:	bd90      	pop	{r4, r7, pc}
    8938:	000094da 	.word	0x000094da
    893c:	00000218 	.word	0x00000218
    8940:	fffffe6f 	.word	0xfffffe6f
    8944:	fffffea1 	.word	0xfffffea1

00008948 <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    8948:	b590      	push	{r4, r7, lr}
    894a:	b085      	sub	sp, #20
    894c:	af00      	add	r7, sp, #0
    894e:	0002      	movs	r2, r0
    8950:	1dfb      	adds	r3, r7, #7
    8952:	701a      	strb	r2, [r3, #0]
    8954:	4c10      	ldr	r4, [pc, #64]	; (8998 <sleepmgr_unlock_mode+0x50>)
    8956:	447c      	add	r4, pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    8958:	1dfb      	adds	r3, r7, #7
    895a:	781b      	ldrb	r3, [r3, #0]
    895c:	4a0f      	ldr	r2, [pc, #60]	; (899c <sleepmgr_unlock_mode+0x54>)
    895e:	58a2      	ldr	r2, [r4, r2]
    8960:	5cd3      	ldrb	r3, [r2, r3]
    8962:	2b00      	cmp	r3, #0
    8964:	d100      	bne.n	8968 <sleepmgr_unlock_mode+0x20>
		while (true) {
    8966:	e7fe      	b.n	8966 <sleepmgr_unlock_mode+0x1e>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    8968:	4b0d      	ldr	r3, [pc, #52]	; (89a0 <sleepmgr_unlock_mode+0x58>)
    896a:	447b      	add	r3, pc
    896c:	4798      	blx	r3
    896e:	0003      	movs	r3, r0
    8970:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    8972:	1dfb      	adds	r3, r7, #7
    8974:	781b      	ldrb	r3, [r3, #0]
    8976:	4a09      	ldr	r2, [pc, #36]	; (899c <sleepmgr_unlock_mode+0x54>)
    8978:	58a2      	ldr	r2, [r4, r2]
    897a:	5cd2      	ldrb	r2, [r2, r3]
    897c:	3a01      	subs	r2, #1
    897e:	b2d1      	uxtb	r1, r2
    8980:	4a06      	ldr	r2, [pc, #24]	; (899c <sleepmgr_unlock_mode+0x54>)
    8982:	58a2      	ldr	r2, [r4, r2]
    8984:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    8986:	68fb      	ldr	r3, [r7, #12]
    8988:	0018      	movs	r0, r3
    898a:	4b06      	ldr	r3, [pc, #24]	; (89a4 <sleepmgr_unlock_mode+0x5c>)
    898c:	447b      	add	r3, pc
    898e:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    8990:	46c0      	nop			; (mov r8, r8)
    8992:	46bd      	mov	sp, r7
    8994:	b005      	add	sp, #20
    8996:	bd90      	pop	{r4, r7, pc}
    8998:	0000947a 	.word	0x0000947a
    899c:	00000218 	.word	0x00000218
    89a0:	fffffe0f 	.word	0xfffffe0f
    89a4:	fffffe41 	.word	0xfffffe41

000089a8 <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    89a8:	b580      	push	{r7, lr}
    89aa:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    89ac:	4b0c      	ldr	r3, [pc, #48]	; (89e0 <udd_wait_clock_ready+0x38>)
    89ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    89b0:	b29b      	uxth	r3, r3
    89b2:	001a      	movs	r2, r3
    89b4:	2320      	movs	r3, #32
    89b6:	4013      	ands	r3, r2
    89b8:	d107      	bne.n	89ca <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    89ba:	46c0      	nop			; (mov r8, r8)
    89bc:	4b08      	ldr	r3, [pc, #32]	; (89e0 <udd_wait_clock_ready+0x38>)
    89be:	68db      	ldr	r3, [r3, #12]
    89c0:	22d0      	movs	r2, #208	; 0xd0
    89c2:	4013      	ands	r3, r2
    89c4:	2bd0      	cmp	r3, #208	; 0xd0
    89c6:	d1f9      	bne.n	89bc <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    89c8:	e006      	b.n	89d8 <udd_wait_clock_ready+0x30>
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    89ca:	46c0      	nop			; (mov r8, r8)
    89cc:	4b04      	ldr	r3, [pc, #16]	; (89e0 <udd_wait_clock_ready+0x38>)
    89ce:	68db      	ldr	r3, [r3, #12]
    89d0:	2210      	movs	r2, #16
    89d2:	4013      	ands	r3, r2
    89d4:	2b10      	cmp	r3, #16
    89d6:	d1f9      	bne.n	89cc <udd_wait_clock_ready+0x24>
}
    89d8:	46c0      	nop			; (mov r8, r8)
    89da:	46bd      	mov	sp, r7
    89dc:	bd80      	pop	{r7, pc}
    89de:	46c0      	nop			; (mov r8, r8)
    89e0:	40000800 	.word	0x40000800

000089e4 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    89e4:	b590      	push	{r4, r7, lr}
    89e6:	b085      	sub	sp, #20
    89e8:	af00      	add	r7, sp, #0
    89ea:	0002      	movs	r2, r0
    89ec:	1dfb      	adds	r3, r7, #7
    89ee:	701a      	strb	r2, [r3, #0]
    89f0:	4c1d      	ldr	r4, [pc, #116]	; (8a68 <udd_sleep_mode+0x84>)
    89f2:	447c      	add	r4, pc
	enum sleepmgr_mode sleep_mode[] = {
    89f4:	230c      	movs	r3, #12
    89f6:	18fa      	adds	r2, r7, r3
    89f8:	4b1c      	ldr	r3, [pc, #112]	; (8a6c <udd_sleep_mode+0x88>)
    89fa:	447b      	add	r3, pc
    89fc:	0010      	movs	r0, r2
    89fe:	0019      	movs	r1, r3
    8a00:	2304      	movs	r3, #4
    8a02:	001a      	movs	r2, r3
    8a04:	4b1a      	ldr	r3, [pc, #104]	; (8a70 <udd_sleep_mode+0x8c>)
    8a06:	58e3      	ldr	r3, [r4, r3]
    8a08:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    8a0a:	4b1a      	ldr	r3, [pc, #104]	; (8a74 <udd_sleep_mode+0x90>)
    8a0c:	447b      	add	r3, pc
    8a0e:	781b      	ldrb	r3, [r3, #0]
    8a10:	1dfa      	adds	r2, r7, #7
    8a12:	7812      	ldrb	r2, [r2, #0]
    8a14:	429a      	cmp	r2, r3
    8a16:	d022      	beq.n	8a5e <udd_sleep_mode+0x7a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    8a18:	1dfb      	adds	r3, r7, #7
    8a1a:	781b      	ldrb	r3, [r3, #0]
    8a1c:	2b00      	cmp	r3, #0
    8a1e:	d008      	beq.n	8a32 <udd_sleep_mode+0x4e>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    8a20:	1dfb      	adds	r3, r7, #7
    8a22:	781b      	ldrb	r3, [r3, #0]
    8a24:	220c      	movs	r2, #12
    8a26:	18ba      	adds	r2, r7, r2
    8a28:	5cd3      	ldrb	r3, [r2, r3]
    8a2a:	0018      	movs	r0, r3
    8a2c:	4b12      	ldr	r3, [pc, #72]	; (8a78 <udd_sleep_mode+0x94>)
    8a2e:	447b      	add	r3, pc
    8a30:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    8a32:	4b12      	ldr	r3, [pc, #72]	; (8a7c <udd_sleep_mode+0x98>)
    8a34:	447b      	add	r3, pc
    8a36:	781b      	ldrb	r3, [r3, #0]
    8a38:	2b00      	cmp	r3, #0
    8a3a:	d00a      	beq.n	8a52 <udd_sleep_mode+0x6e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    8a3c:	4b10      	ldr	r3, [pc, #64]	; (8a80 <udd_sleep_mode+0x9c>)
    8a3e:	447b      	add	r3, pc
    8a40:	781b      	ldrb	r3, [r3, #0]
    8a42:	001a      	movs	r2, r3
    8a44:	230c      	movs	r3, #12
    8a46:	18fb      	adds	r3, r7, r3
    8a48:	5c9b      	ldrb	r3, [r3, r2]
    8a4a:	0018      	movs	r0, r3
    8a4c:	4b0d      	ldr	r3, [pc, #52]	; (8a84 <udd_sleep_mode+0xa0>)
    8a4e:	447b      	add	r3, pc
    8a50:	4798      	blx	r3
	}
	udd_state = new_state;
    8a52:	4b0d      	ldr	r3, [pc, #52]	; (8a88 <udd_sleep_mode+0xa4>)
    8a54:	447b      	add	r3, pc
    8a56:	1dfa      	adds	r2, r7, #7
    8a58:	7812      	ldrb	r2, [r2, #0]
    8a5a:	701a      	strb	r2, [r3, #0]
    8a5c:	e000      	b.n	8a60 <udd_sleep_mode+0x7c>
		return; // No change
    8a5e:	46c0      	nop			; (mov r8, r8)
}
    8a60:	46bd      	mov	sp, r7
    8a62:	b005      	add	sp, #20
    8a64:	bd90      	pop	{r4, r7, pc}
    8a66:	46c0      	nop			; (mov r8, r8)
    8a68:	000093de 	.word	0x000093de
    8a6c:	000092f6 	.word	0x000092f6
    8a70:	0000008c 	.word	0x0000008c
    8a74:	1fff7c08 	.word	0x1fff7c08
    8a78:	fffffeb7 	.word	0xfffffeb7
    8a7c:	1fff7be0 	.word	0x1fff7be0
    8a80:	1fff7bd6 	.word	0x1fff7bd6
    8a84:	fffffef7 	.word	0xfffffef7
    8a88:	1fff7bc0 	.word	0x1fff7bc0

00008a8c <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    8a8c:	b580      	push	{r7, lr}
    8a8e:	b082      	sub	sp, #8
    8a90:	af00      	add	r7, sp, #0
    8a92:	0002      	movs	r2, r0
    8a94:	1dfb      	adds	r3, r7, #7
    8a96:	701a      	strb	r2, [r3, #0]
	if ((ep == 0) || (ep == 0x80)) {
    8a98:	1dfb      	adds	r3, r7, #7
    8a9a:	781b      	ldrb	r3, [r3, #0]
    8a9c:	2b00      	cmp	r3, #0
    8a9e:	d003      	beq.n	8aa8 <udd_ep_get_job+0x1c>
    8aa0:	1dfb      	adds	r3, r7, #7
    8aa2:	781b      	ldrb	r3, [r3, #0]
    8aa4:	2b80      	cmp	r3, #128	; 0x80
    8aa6:	d101      	bne.n	8aac <udd_ep_get_job+0x20>
		return NULL;
    8aa8:	2300      	movs	r3, #0
    8aaa:	e013      	b.n	8ad4 <udd_ep_get_job+0x48>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    8aac:	1dfb      	adds	r3, r7, #7
    8aae:	781b      	ldrb	r3, [r3, #0]
    8ab0:	220f      	movs	r2, #15
    8ab2:	4013      	ands	r3, r2
    8ab4:	005b      	lsls	r3, r3, #1
    8ab6:	1dfa      	adds	r2, r7, #7
    8ab8:	7812      	ldrb	r2, [r2, #0]
    8aba:	b252      	sxtb	r2, r2
    8abc:	b2d2      	uxtb	r2, r2
    8abe:	09d2      	lsrs	r2, r2, #7
    8ac0:	b2d2      	uxtb	r2, r2
    8ac2:	189b      	adds	r3, r3, r2
    8ac4:	1e9a      	subs	r2, r3, #2
    8ac6:	0013      	movs	r3, r2
    8ac8:	009b      	lsls	r3, r3, #2
    8aca:	189b      	adds	r3, r3, r2
    8acc:	009b      	lsls	r3, r3, #2
    8ace:	4a03      	ldr	r2, [pc, #12]	; (8adc <udd_ep_get_job+0x50>)
    8ad0:	447a      	add	r2, pc
    8ad2:	189b      	adds	r3, r3, r2
	}
}
    8ad4:	0018      	movs	r0, r3
    8ad6:	46bd      	mov	sp, r7
    8ad8:	b002      	add	sp, #8
    8ada:	bd80      	pop	{r7, pc}
    8adc:	1fff7acc 	.word	0x1fff7acc

00008ae0 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    8ae0:	b5b0      	push	{r4, r5, r7, lr}
    8ae2:	b088      	sub	sp, #32
    8ae4:	af00      	add	r7, sp, #0
    8ae6:	6078      	str	r0, [r7, #4]
    8ae8:	4c5f      	ldr	r4, [pc, #380]	; (8c68 <udd_ep_trans_in_next+0x188>)
    8aea:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    8aec:	687b      	ldr	r3, [r7, #4]
    8aee:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    8af0:	2317      	movs	r3, #23
    8af2:	18fb      	adds	r3, r7, r3
    8af4:	69ba      	ldr	r2, [r7, #24]
    8af6:	7992      	ldrb	r2, [r2, #6]
    8af8:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    8afa:	2317      	movs	r3, #23
    8afc:	18fb      	adds	r3, r7, r3
    8afe:	781b      	ldrb	r3, [r3, #0]
    8b00:	0018      	movs	r0, r3
    8b02:	4b5a      	ldr	r3, [pc, #360]	; (8c6c <udd_ep_trans_in_next+0x18c>)
    8b04:	447b      	add	r3, pc
    8b06:	4798      	blx	r3
    8b08:	0003      	movs	r3, r0
    8b0a:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    8b0c:	230f      	movs	r3, #15
    8b0e:	18fb      	adds	r3, r7, r3
    8b10:	2217      	movs	r2, #23
    8b12:	18ba      	adds	r2, r7, r2
    8b14:	7812      	ldrb	r2, [r2, #0]
    8b16:	210f      	movs	r1, #15
    8b18:	400a      	ands	r2, r1
    8b1a:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    8b1c:	230c      	movs	r3, #12
    8b1e:	18fb      	adds	r3, r7, r3
    8b20:	693a      	ldr	r2, [r7, #16]
    8b22:	8a12      	ldrh	r2, [r2, #16]
    8b24:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    8b26:	230a      	movs	r3, #10
    8b28:	18fb      	adds	r3, r7, r3
    8b2a:	69ba      	ldr	r2, [r7, #24]
    8b2c:	8852      	ldrh	r2, [r2, #2]
    8b2e:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    8b30:	693b      	ldr	r3, [r7, #16]
    8b32:	68da      	ldr	r2, [r3, #12]
    8b34:	230a      	movs	r3, #10
    8b36:	18fb      	adds	r3, r7, r3
    8b38:	881b      	ldrh	r3, [r3, #0]
    8b3a:	18d2      	adds	r2, r2, r3
    8b3c:	693b      	ldr	r3, [r7, #16]
    8b3e:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    8b40:	693b      	ldr	r3, [r7, #16]
    8b42:	68da      	ldr	r2, [r3, #12]
    8b44:	693b      	ldr	r3, [r7, #16]
    8b46:	689b      	ldr	r3, [r3, #8]
    8b48:	429a      	cmp	r2, r3
    8b4a:	d05a      	beq.n	8c02 <udd_ep_trans_in_next+0x122>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    8b4c:	693b      	ldr	r3, [r7, #16]
    8b4e:	689b      	ldr	r3, [r3, #8]
    8b50:	b299      	uxth	r1, r3
    8b52:	693b      	ldr	r3, [r7, #16]
    8b54:	68db      	ldr	r3, [r3, #12]
    8b56:	b29a      	uxth	r2, r3
    8b58:	231e      	movs	r3, #30
    8b5a:	18fb      	adds	r3, r7, r3
    8b5c:	1a8a      	subs	r2, r1, r2
    8b5e:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    8b60:	231e      	movs	r3, #30
    8b62:	18fb      	adds	r3, r7, r3
    8b64:	881b      	ldrh	r3, [r3, #0]
    8b66:	4a42      	ldr	r2, [pc, #264]	; (8c70 <udd_ep_trans_in_next+0x190>)
    8b68:	4293      	cmp	r3, r2
    8b6a:	d90e      	bls.n	8b8a <udd_ep_trans_in_next+0xaa>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    8b6c:	230c      	movs	r3, #12
    8b6e:	18fb      	adds	r3, r7, r3
    8b70:	881a      	ldrh	r2, [r3, #0]
    8b72:	483f      	ldr	r0, [pc, #252]	; (8c70 <udd_ep_trans_in_next+0x190>)
    8b74:	4b3f      	ldr	r3, [pc, #252]	; (8c74 <udd_ep_trans_in_next+0x194>)
    8b76:	58e3      	ldr	r3, [r4, r3]
    8b78:	0011      	movs	r1, r2
    8b7a:	4798      	blx	r3
    8b7c:	000b      	movs	r3, r1
    8b7e:	b29a      	uxth	r2, r3
    8b80:	231e      	movs	r3, #30
    8b82:	18fb      	adds	r3, r7, r3
    8b84:	493a      	ldr	r1, [pc, #232]	; (8c70 <udd_ep_trans_in_next+0x190>)
    8b86:	1a8a      	subs	r2, r1, r2
    8b88:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    8b8a:	693b      	ldr	r3, [r7, #16]
    8b8c:	7c9b      	ldrb	r3, [r3, #18]
    8b8e:	2202      	movs	r2, #2
    8b90:	4013      	ands	r3, r2
    8b92:	b2db      	uxtb	r3, r3
    8b94:	2b00      	cmp	r3, #0
    8b96:	d00f      	beq.n	8bb8 <udd_ep_trans_in_next+0xd8>
    8b98:	231e      	movs	r3, #30
    8b9a:	18fa      	adds	r2, r7, r3
    8b9c:	230c      	movs	r3, #12
    8b9e:	18fb      	adds	r3, r7, r3
    8ba0:	8812      	ldrh	r2, [r2, #0]
    8ba2:	8819      	ldrh	r1, [r3, #0]
    8ba4:	4b34      	ldr	r3, [pc, #208]	; (8c78 <udd_ep_trans_in_next+0x198>)
    8ba6:	58e3      	ldr	r3, [r4, r3]
    8ba8:	0010      	movs	r0, r2
    8baa:	4798      	blx	r3
    8bac:	000b      	movs	r3, r1
    8bae:	b29b      	uxth	r3, r3
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d101      	bne.n	8bb8 <udd_ep_trans_in_next+0xd8>
    8bb4:	2301      	movs	r3, #1
    8bb6:	e000      	b.n	8bba <udd_ep_trans_in_next+0xda>
    8bb8:	2300      	movs	r3, #0
    8bba:	b2db      	uxtb	r3, r3
    8bbc:	1c1a      	adds	r2, r3, #0
    8bbe:	2301      	movs	r3, #1
    8bc0:	4013      	ands	r3, r2
    8bc2:	b2da      	uxtb	r2, r3
    8bc4:	693b      	ldr	r3, [r7, #16]
    8bc6:	2101      	movs	r1, #1
    8bc8:	400a      	ands	r2, r1
    8bca:	1890      	adds	r0, r2, r2
    8bcc:	7c9a      	ldrb	r2, [r3, #18]
    8bce:	2102      	movs	r1, #2
    8bd0:	438a      	bics	r2, r1
    8bd2:	1c11      	adds	r1, r2, #0
    8bd4:	1c02      	adds	r2, r0, #0
    8bd6:	430a      	orrs	r2, r1
    8bd8:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    8bda:	693b      	ldr	r3, [r7, #16]
    8bdc:	685a      	ldr	r2, [r3, #4]
    8bde:	693b      	ldr	r3, [r7, #16]
    8be0:	68db      	ldr	r3, [r3, #12]
    8be2:	18d2      	adds	r2, r2, r3
    8be4:	231e      	movs	r3, #30
    8be6:	18fb      	adds	r3, r7, r3
    8be8:	8818      	ldrh	r0, [r3, #0]
    8bea:	230f      	movs	r3, #15
    8bec:	18fb      	adds	r3, r7, r3
    8bee:	7819      	ldrb	r1, [r3, #0]
    8bf0:	4b22      	ldr	r3, [pc, #136]	; (8c7c <udd_ep_trans_in_next+0x19c>)
    8bf2:	58e3      	ldr	r3, [r4, r3]
    8bf4:	001d      	movs	r5, r3
    8bf6:	0003      	movs	r3, r0
    8bf8:	0028      	movs	r0, r5
    8bfa:	4d21      	ldr	r5, [pc, #132]	; (8c80 <udd_ep_trans_in_next+0x1a0>)
    8bfc:	5964      	ldr	r4, [r4, r5]
    8bfe:	47a0      	blx	r4
		return;
    8c00:	e02e      	b.n	8c60 <udd_ep_trans_in_next+0x180>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    8c02:	693b      	ldr	r3, [r7, #16]
    8c04:	7c9b      	ldrb	r3, [r3, #18]
    8c06:	2202      	movs	r2, #2
    8c08:	4013      	ands	r3, r2
    8c0a:	b2db      	uxtb	r3, r3
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d014      	beq.n	8c3a <udd_ep_trans_in_next+0x15a>
		ptr_job->b_shortpacket = false;
    8c10:	693b      	ldr	r3, [r7, #16]
    8c12:	7c9a      	ldrb	r2, [r3, #18]
    8c14:	2102      	movs	r1, #2
    8c16:	438a      	bics	r2, r1
    8c18:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    8c1a:	693b      	ldr	r3, [r7, #16]
    8c1c:	685a      	ldr	r2, [r3, #4]
    8c1e:	693b      	ldr	r3, [r7, #16]
    8c20:	68db      	ldr	r3, [r3, #12]
    8c22:	18d2      	adds	r2, r2, r3
    8c24:	230f      	movs	r3, #15
    8c26:	18fb      	adds	r3, r7, r3
    8c28:	7819      	ldrb	r1, [r3, #0]
    8c2a:	4b14      	ldr	r3, [pc, #80]	; (8c7c <udd_ep_trans_in_next+0x19c>)
    8c2c:	58e3      	ldr	r3, [r4, r3]
    8c2e:	0018      	movs	r0, r3
    8c30:	2300      	movs	r3, #0
    8c32:	4d13      	ldr	r5, [pc, #76]	; (8c80 <udd_ep_trans_in_next+0x1a0>)
    8c34:	5964      	ldr	r4, [r4, r5]
    8c36:	47a0      	blx	r4
		return;
    8c38:	e012      	b.n	8c60 <udd_ep_trans_in_next+0x180>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    8c3a:	693b      	ldr	r3, [r7, #16]
    8c3c:	7c9a      	ldrb	r2, [r3, #18]
    8c3e:	2101      	movs	r1, #1
    8c40:	438a      	bics	r2, r1
    8c42:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    8c44:	693b      	ldr	r3, [r7, #16]
    8c46:	681b      	ldr	r3, [r3, #0]
    8c48:	2b00      	cmp	r3, #0
    8c4a:	d009      	beq.n	8c60 <udd_ep_trans_in_next+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    8c4c:	693b      	ldr	r3, [r7, #16]
    8c4e:	681c      	ldr	r4, [r3, #0]
    8c50:	693b      	ldr	r3, [r7, #16]
    8c52:	68d9      	ldr	r1, [r3, #12]
    8c54:	2317      	movs	r3, #23
    8c56:	18fb      	adds	r3, r7, r3
    8c58:	781b      	ldrb	r3, [r3, #0]
    8c5a:	001a      	movs	r2, r3
    8c5c:	2000      	movs	r0, #0
    8c5e:	47a0      	blx	r4
	}
}
    8c60:	46bd      	mov	sp, r7
    8c62:	b008      	add	sp, #32
    8c64:	bdb0      	pop	{r4, r5, r7, pc}
    8c66:	46c0      	nop			; (mov r8, r8)
    8c68:	000092e6 	.word	0x000092e6
    8c6c:	ffffff85 	.word	0xffffff85
    8c70:	00001fff 	.word	0x00001fff
    8c74:	000002e0 	.word	0x000002e0
    8c78:	00000268 	.word	0x00000268
    8c7c:	00000078 	.word	0x00000078
    8c80:	000002f8 	.word	0x000002f8

00008c84 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    8c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c86:	b089      	sub	sp, #36	; 0x24
    8c88:	af00      	add	r7, sp, #0
    8c8a:	6078      	str	r0, [r7, #4]
    8c8c:	4c74      	ldr	r4, [pc, #464]	; (8e60 <udd_ep_trans_out_next+0x1dc>)
    8c8e:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    8c90:	687b      	ldr	r3, [r7, #4]
    8c92:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    8c94:	2317      	movs	r3, #23
    8c96:	18fb      	adds	r3, r7, r3
    8c98:	69ba      	ldr	r2, [r7, #24]
    8c9a:	7992      	ldrb	r2, [r2, #6]
    8c9c:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    8c9e:	2317      	movs	r3, #23
    8ca0:	18fb      	adds	r3, r7, r3
    8ca2:	781b      	ldrb	r3, [r3, #0]
    8ca4:	0018      	movs	r0, r3
    8ca6:	4b6f      	ldr	r3, [pc, #444]	; (8e64 <udd_ep_trans_out_next+0x1e0>)
    8ca8:	447b      	add	r3, pc
    8caa:	4798      	blx	r3
    8cac:	0003      	movs	r3, r0
    8cae:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    8cb0:	230f      	movs	r3, #15
    8cb2:	18fb      	adds	r3, r7, r3
    8cb4:	2217      	movs	r2, #23
    8cb6:	18ba      	adds	r2, r7, r2
    8cb8:	7812      	ldrb	r2, [r2, #0]
    8cba:	210f      	movs	r1, #15
    8cbc:	400a      	ands	r2, r1
    8cbe:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    8cc0:	230c      	movs	r3, #12
    8cc2:	18fb      	adds	r3, r7, r3
    8cc4:	693a      	ldr	r2, [r7, #16]
    8cc6:	8a12      	ldrh	r2, [r2, #16]
    8cc8:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    8cca:	230a      	movs	r3, #10
    8ccc:	18fb      	adds	r3, r7, r3
    8cce:	69ba      	ldr	r2, [r7, #24]
    8cd0:	8812      	ldrh	r2, [r2, #0]
    8cd2:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    8cd4:	693b      	ldr	r3, [r7, #16]
    8cd6:	7c9b      	ldrb	r3, [r3, #18]
    8cd8:	2204      	movs	r2, #4
    8cda:	4013      	ands	r3, r2
    8cdc:	b2db      	uxtb	r3, r3
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d01c      	beq.n	8d1c <udd_ep_trans_out_next+0x98>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    8ce2:	693b      	ldr	r3, [r7, #16]
    8ce4:	685a      	ldr	r2, [r3, #4]
    8ce6:	693b      	ldr	r3, [r7, #16]
    8ce8:	68db      	ldr	r3, [r3, #12]
    8cea:	18d5      	adds	r5, r2, r3
    8cec:	230f      	movs	r3, #15
    8cee:	18fb      	adds	r3, r7, r3
    8cf0:	781b      	ldrb	r3, [r3, #0]
    8cf2:	3b01      	subs	r3, #1
    8cf4:	019b      	lsls	r3, r3, #6
    8cf6:	4a5c      	ldr	r2, [pc, #368]	; (8e68 <udd_ep_trans_out_next+0x1e4>)
    8cf8:	58a2      	ldr	r2, [r4, r2]
    8cfa:	189e      	adds	r6, r3, r2
    8cfc:	693b      	ldr	r3, [r7, #16]
    8cfe:	689a      	ldr	r2, [r3, #8]
    8d00:	230c      	movs	r3, #12
    8d02:	18fb      	adds	r3, r7, r3
    8d04:	8819      	ldrh	r1, [r3, #0]
    8d06:	4b59      	ldr	r3, [pc, #356]	; (8e6c <udd_ep_trans_out_next+0x1e8>)
    8d08:	58e3      	ldr	r3, [r4, r3]
    8d0a:	0010      	movs	r0, r2
    8d0c:	4798      	blx	r3
    8d0e:	000b      	movs	r3, r1
    8d10:	001a      	movs	r2, r3
    8d12:	0031      	movs	r1, r6
    8d14:	0028      	movs	r0, r5
    8d16:	4b56      	ldr	r3, [pc, #344]	; (8e70 <udd_ep_trans_out_next+0x1ec>)
    8d18:	58e3      	ldr	r3, [r4, r3]
    8d1a:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    8d1c:	693b      	ldr	r3, [r7, #16]
    8d1e:	68da      	ldr	r2, [r3, #12]
    8d20:	230a      	movs	r3, #10
    8d22:	18fb      	adds	r3, r7, r3
    8d24:	881b      	ldrh	r3, [r3, #0]
    8d26:	18d2      	adds	r2, r2, r3
    8d28:	693b      	ldr	r3, [r7, #16]
    8d2a:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    8d2c:	693b      	ldr	r3, [r7, #16]
    8d2e:	68da      	ldr	r2, [r3, #12]
    8d30:	693b      	ldr	r3, [r7, #16]
    8d32:	689b      	ldr	r3, [r3, #8]
    8d34:	429a      	cmp	r2, r3
    8d36:	d903      	bls.n	8d40 <udd_ep_trans_out_next+0xbc>
		ptr_job->nb_trans = ptr_job->buf_size;
    8d38:	693b      	ldr	r3, [r7, #16]
    8d3a:	689a      	ldr	r2, [r3, #8]
    8d3c:	693b      	ldr	r3, [r7, #16]
    8d3e:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    8d40:	69bb      	ldr	r3, [r7, #24]
    8d42:	889b      	ldrh	r3, [r3, #4]
    8d44:	220a      	movs	r2, #10
    8d46:	18ba      	adds	r2, r7, r2
    8d48:	8812      	ldrh	r2, [r2, #0]
    8d4a:	429a      	cmp	r2, r3
    8d4c:	d000      	beq.n	8d50 <udd_ep_trans_out_next+0xcc>
    8d4e:	e071      	b.n	8e34 <udd_ep_trans_out_next+0x1b0>
    8d50:	693b      	ldr	r3, [r7, #16]
    8d52:	68da      	ldr	r2, [r3, #12]
    8d54:	693b      	ldr	r3, [r7, #16]
    8d56:	689b      	ldr	r3, [r3, #8]
    8d58:	429a      	cmp	r2, r3
    8d5a:	d100      	bne.n	8d5e <udd_ep_trans_out_next+0xda>
    8d5c:	e06a      	b.n	8e34 <udd_ep_trans_out_next+0x1b0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    8d5e:	693b      	ldr	r3, [r7, #16]
    8d60:	689b      	ldr	r3, [r3, #8]
    8d62:	b299      	uxth	r1, r3
    8d64:	693b      	ldr	r3, [r7, #16]
    8d66:	68db      	ldr	r3, [r3, #12]
    8d68:	b29a      	uxth	r2, r3
    8d6a:	231e      	movs	r3, #30
    8d6c:	18fb      	adds	r3, r7, r3
    8d6e:	1a8a      	subs	r2, r1, r2
    8d70:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    8d72:	231e      	movs	r3, #30
    8d74:	18fb      	adds	r3, r7, r3
    8d76:	881b      	ldrh	r3, [r3, #0]
    8d78:	4a3e      	ldr	r2, [pc, #248]	; (8e74 <udd_ep_trans_out_next+0x1f0>)
    8d7a:	4293      	cmp	r3, r2
    8d7c:	d90f      	bls.n	8d9e <udd_ep_trans_out_next+0x11a>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    8d7e:	230c      	movs	r3, #12
    8d80:	18fb      	adds	r3, r7, r3
    8d82:	881a      	ldrh	r2, [r3, #0]
    8d84:	483b      	ldr	r0, [pc, #236]	; (8e74 <udd_ep_trans_out_next+0x1f0>)
    8d86:	4b3c      	ldr	r3, [pc, #240]	; (8e78 <udd_ep_trans_out_next+0x1f4>)
    8d88:	58e3      	ldr	r3, [r4, r3]
    8d8a:	0011      	movs	r1, r2
    8d8c:	4798      	blx	r3
    8d8e:	000b      	movs	r3, r1
    8d90:	b29a      	uxth	r2, r3
    8d92:	231e      	movs	r3, #30
    8d94:	18fb      	adds	r3, r7, r3
    8d96:	4937      	ldr	r1, [pc, #220]	; (8e74 <udd_ep_trans_out_next+0x1f0>)
    8d98:	1a8a      	subs	r2, r1, r2
    8d9a:	801a      	strh	r2, [r3, #0]
    8d9c:	e012      	b.n	8dc4 <udd_ep_trans_out_next+0x140>
		} else {
			next_trans -= next_trans % ep_size;
    8d9e:	231e      	movs	r3, #30
    8da0:	18fa      	adds	r2, r7, r3
    8da2:	230c      	movs	r3, #12
    8da4:	18fb      	adds	r3, r7, r3
    8da6:	8812      	ldrh	r2, [r2, #0]
    8da8:	8819      	ldrh	r1, [r3, #0]
    8daa:	4b30      	ldr	r3, [pc, #192]	; (8e6c <udd_ep_trans_out_next+0x1e8>)
    8dac:	58e3      	ldr	r3, [r4, r3]
    8dae:	0010      	movs	r0, r2
    8db0:	4798      	blx	r3
    8db2:	000b      	movs	r3, r1
    8db4:	b29a      	uxth	r2, r3
    8db6:	231e      	movs	r3, #30
    8db8:	18fb      	adds	r3, r7, r3
    8dba:	211e      	movs	r1, #30
    8dbc:	1879      	adds	r1, r7, r1
    8dbe:	8809      	ldrh	r1, [r1, #0]
    8dc0:	1a8a      	subs	r2, r1, r2
    8dc2:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    8dc4:	231e      	movs	r3, #30
    8dc6:	18fa      	adds	r2, r7, r3
    8dc8:	230c      	movs	r3, #12
    8dca:	18fb      	adds	r3, r7, r3
    8dcc:	8812      	ldrh	r2, [r2, #0]
    8dce:	881b      	ldrh	r3, [r3, #0]
    8dd0:	429a      	cmp	r2, r3
    8dd2:	d21b      	bcs.n	8e0c <udd_ep_trans_out_next+0x188>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    8dd4:	693b      	ldr	r3, [r7, #16]
    8dd6:	7c9a      	ldrb	r2, [r3, #18]
    8dd8:	2104      	movs	r1, #4
    8dda:	430a      	orrs	r2, r1
    8ddc:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    8dde:	230f      	movs	r3, #15
    8de0:	18fb      	adds	r3, r7, r3
    8de2:	781b      	ldrb	r3, [r3, #0]
    8de4:	3b01      	subs	r3, #1
    8de6:	019b      	lsls	r3, r3, #6
    8de8:	4a1f      	ldr	r2, [pc, #124]	; (8e68 <udd_ep_trans_out_next+0x1e4>)
    8dea:	58a2      	ldr	r2, [r4, r2]
    8dec:	189a      	adds	r2, r3, r2
    8dee:	230c      	movs	r3, #12
    8df0:	18fb      	adds	r3, r7, r3
    8df2:	8818      	ldrh	r0, [r3, #0]
    8df4:	230f      	movs	r3, #15
    8df6:	18fb      	adds	r3, r7, r3
    8df8:	7819      	ldrb	r1, [r3, #0]
    8dfa:	4b20      	ldr	r3, [pc, #128]	; (8e7c <udd_ep_trans_out_next+0x1f8>)
    8dfc:	58e3      	ldr	r3, [r4, r3]
    8dfe:	001d      	movs	r5, r3
    8e00:	0003      	movs	r3, r0
    8e02:	0028      	movs	r0, r5
    8e04:	4d1e      	ldr	r5, [pc, #120]	; (8e80 <udd_ep_trans_out_next+0x1fc>)
    8e06:	5964      	ldr	r4, [r4, r5]
    8e08:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    8e0a:	e026      	b.n	8e5a <udd_ep_trans_out_next+0x1d6>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    8e0c:	693b      	ldr	r3, [r7, #16]
    8e0e:	685a      	ldr	r2, [r3, #4]
    8e10:	693b      	ldr	r3, [r7, #16]
    8e12:	68db      	ldr	r3, [r3, #12]
    8e14:	18d2      	adds	r2, r2, r3
    8e16:	231e      	movs	r3, #30
    8e18:	18fb      	adds	r3, r7, r3
    8e1a:	8818      	ldrh	r0, [r3, #0]
    8e1c:	230f      	movs	r3, #15
    8e1e:	18fb      	adds	r3, r7, r3
    8e20:	7819      	ldrb	r1, [r3, #0]
    8e22:	4b16      	ldr	r3, [pc, #88]	; (8e7c <udd_ep_trans_out_next+0x1f8>)
    8e24:	58e3      	ldr	r3, [r4, r3]
    8e26:	001d      	movs	r5, r3
    8e28:	0003      	movs	r3, r0
    8e2a:	0028      	movs	r0, r5
    8e2c:	4d14      	ldr	r5, [pc, #80]	; (8e80 <udd_ep_trans_out_next+0x1fc>)
    8e2e:	5964      	ldr	r4, [r4, r5]
    8e30:	47a0      	blx	r4
		return;
    8e32:	e012      	b.n	8e5a <udd_ep_trans_out_next+0x1d6>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    8e34:	693b      	ldr	r3, [r7, #16]
    8e36:	7c9a      	ldrb	r2, [r3, #18]
    8e38:	2101      	movs	r1, #1
    8e3a:	438a      	bics	r2, r1
    8e3c:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    8e3e:	693b      	ldr	r3, [r7, #16]
    8e40:	681b      	ldr	r3, [r3, #0]
    8e42:	2b00      	cmp	r3, #0
    8e44:	d009      	beq.n	8e5a <udd_ep_trans_out_next+0x1d6>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    8e46:	693b      	ldr	r3, [r7, #16]
    8e48:	681c      	ldr	r4, [r3, #0]
    8e4a:	693b      	ldr	r3, [r7, #16]
    8e4c:	68d9      	ldr	r1, [r3, #12]
    8e4e:	2317      	movs	r3, #23
    8e50:	18fb      	adds	r3, r7, r3
    8e52:	781b      	ldrb	r3, [r3, #0]
    8e54:	001a      	movs	r2, r3
    8e56:	2000      	movs	r0, #0
    8e58:	47a0      	blx	r4
	}
}
    8e5a:	46bd      	mov	sp, r7
    8e5c:	b009      	add	sp, #36	; 0x24
    8e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8e60:	00009142 	.word	0x00009142
    8e64:	fffffde1 	.word	0xfffffde1
    8e68:	0000001c 	.word	0x0000001c
    8e6c:	00000268 	.word	0x00000268
    8e70:	0000008c 	.word	0x0000008c
    8e74:	00001fff 	.word	0x00001fff
    8e78:	000002e0 	.word	0x000002e0
    8e7c:	00000078 	.word	0x00000078
    8e80:	0000014c 	.word	0x0000014c

00008e84 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    8e84:	b580      	push	{r7, lr}
    8e86:	b084      	sub	sp, #16
    8e88:	af00      	add	r7, sp, #0
    8e8a:	6078      	str	r0, [r7, #4]
    8e8c:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    8e8e:	683b      	ldr	r3, [r7, #0]
    8e90:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    8e92:	230b      	movs	r3, #11
    8e94:	18fb      	adds	r3, r7, r3
    8e96:	68fa      	ldr	r2, [r7, #12]
    8e98:	7992      	ldrb	r2, [r2, #6]
    8e9a:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    8e9c:	230b      	movs	r3, #11
    8e9e:	18fb      	adds	r3, r7, r3
    8ea0:	781b      	ldrb	r3, [r3, #0]
    8ea2:	b25b      	sxtb	r3, r3
    8ea4:	2b00      	cmp	r3, #0
    8ea6:	da05      	bge.n	8eb4 <udd_ep_transfer_process+0x30>
		udd_ep_trans_in_next(pointer);
    8ea8:	683b      	ldr	r3, [r7, #0]
    8eaa:	0018      	movs	r0, r3
    8eac:	4b06      	ldr	r3, [pc, #24]	; (8ec8 <udd_ep_transfer_process+0x44>)
    8eae:	447b      	add	r3, pc
    8eb0:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    8eb2:	e004      	b.n	8ebe <udd_ep_transfer_process+0x3a>
		udd_ep_trans_out_next(pointer);
    8eb4:	683b      	ldr	r3, [r7, #0]
    8eb6:	0018      	movs	r0, r3
    8eb8:	4b04      	ldr	r3, [pc, #16]	; (8ecc <udd_ep_transfer_process+0x48>)
    8eba:	447b      	add	r3, pc
    8ebc:	4798      	blx	r3
}
    8ebe:	46c0      	nop			; (mov r8, r8)
    8ec0:	46bd      	mov	sp, r7
    8ec2:	b004      	add	sp, #16
    8ec4:	bd80      	pop	{r7, pc}
    8ec6:	46c0      	nop			; (mov r8, r8)
    8ec8:	fffffc2f 	.word	0xfffffc2f
    8ecc:	fffffdc7 	.word	0xfffffdc7

00008ed0 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    8ed0:	b590      	push	{r4, r7, lr}
    8ed2:	b085      	sub	sp, #20
    8ed4:	af00      	add	r7, sp, #0
    8ed6:	0002      	movs	r2, r0
    8ed8:	1dfb      	adds	r3, r7, #7
    8eda:	701a      	strb	r2, [r3, #0]
    8edc:	4b17      	ldr	r3, [pc, #92]	; (8f3c <udd_ep_abort+0x6c>)
    8ede:	447b      	add	r3, pc
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    8ee0:	1dfa      	adds	r2, r7, #7
    8ee2:	7811      	ldrb	r1, [r2, #0]
    8ee4:	4a16      	ldr	r2, [pc, #88]	; (8f40 <udd_ep_abort+0x70>)
    8ee6:	589a      	ldr	r2, [r3, r2]
    8ee8:	0010      	movs	r0, r2
    8eea:	4a16      	ldr	r2, [pc, #88]	; (8f44 <udd_ep_abort+0x74>)
    8eec:	589b      	ldr	r3, [r3, r2]
    8eee:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    8ef0:	1dfb      	adds	r3, r7, #7
    8ef2:	781b      	ldrb	r3, [r3, #0]
    8ef4:	0018      	movs	r0, r3
    8ef6:	4b14      	ldr	r3, [pc, #80]	; (8f48 <udd_ep_abort+0x78>)
    8ef8:	447b      	add	r3, pc
    8efa:	4798      	blx	r3
    8efc:	0003      	movs	r3, r0
    8efe:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    8f00:	68fb      	ldr	r3, [r7, #12]
    8f02:	7c9b      	ldrb	r3, [r3, #18]
    8f04:	2201      	movs	r2, #1
    8f06:	4013      	ands	r3, r2
    8f08:	b2db      	uxtb	r3, r3
    8f0a:	2b00      	cmp	r3, #0
    8f0c:	d012      	beq.n	8f34 <udd_ep_abort+0x64>
		return;
	}
	ptr_job->busy = false;
    8f0e:	68fb      	ldr	r3, [r7, #12]
    8f10:	7c9a      	ldrb	r2, [r3, #18]
    8f12:	2101      	movs	r1, #1
    8f14:	438a      	bics	r2, r1
    8f16:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    8f18:	68fb      	ldr	r3, [r7, #12]
    8f1a:	681b      	ldr	r3, [r3, #0]
    8f1c:	2b00      	cmp	r3, #0
    8f1e:	d00a      	beq.n	8f36 <udd_ep_abort+0x66>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    8f20:	68fb      	ldr	r3, [r7, #12]
    8f22:	681c      	ldr	r4, [r3, #0]
    8f24:	68fb      	ldr	r3, [r7, #12]
    8f26:	68d9      	ldr	r1, [r3, #12]
    8f28:	1dfb      	adds	r3, r7, #7
    8f2a:	781b      	ldrb	r3, [r3, #0]
    8f2c:	001a      	movs	r2, r3
    8f2e:	2001      	movs	r0, #1
    8f30:	47a0      	blx	r4
    8f32:	e000      	b.n	8f36 <udd_ep_abort+0x66>
		return;
    8f34:	46c0      	nop			; (mov r8, r8)
	}
}
    8f36:	46bd      	mov	sp, r7
    8f38:	b005      	add	sp, #20
    8f3a:	bd90      	pop	{r4, r7, pc}
    8f3c:	00008ef2 	.word	0x00008ef2
    8f40:	00000078 	.word	0x00000078
    8f44:	00000010 	.word	0x00000010
    8f48:	fffffb91 	.word	0xfffffb91

00008f4c <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
    8f4c:	b580      	push	{r7, lr}
    8f4e:	af00      	add	r7, sp, #0
#if SAMD21 || SAMR21 || SAMD11 || SAML21  || SAML22 || SAMDA1 || SAMR30
	return false;
    8f50:	2300      	movs	r3, #0
#endif
}
    8f52:	0018      	movs	r0, r3
    8f54:	46bd      	mov	sp, r7
    8f56:	bd80      	pop	{r7, pc}

00008f58 <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
    8f58:	b580      	push	{r7, lr}
    8f5a:	af00      	add	r7, sp, #0
    8f5c:	4a05      	ldr	r2, [pc, #20]	; (8f74 <udd_get_frame_number+0x1c>)
    8f5e:	447a      	add	r2, pc
	return usb_device_get_frame_number(&usb_device);
    8f60:	4b05      	ldr	r3, [pc, #20]	; (8f78 <udd_get_frame_number+0x20>)
    8f62:	58d3      	ldr	r3, [r2, r3]
    8f64:	0018      	movs	r0, r3
    8f66:	4b05      	ldr	r3, [pc, #20]	; (8f7c <udd_get_frame_number+0x24>)
    8f68:	447b      	add	r3, pc
    8f6a:	4798      	blx	r3
    8f6c:	0003      	movs	r3, r0
}
    8f6e:	0018      	movs	r0, r3
    8f70:	46bd      	mov	sp, r7
    8f72:	bd80      	pop	{r7, pc}
    8f74:	00008e72 	.word	0x00008e72
    8f78:	00000078 	.word	0x00000078
    8f7c:	fffff909 	.word	0xfffff909

00008f80 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
    8f80:	b580      	push	{r7, lr}
    8f82:	af00      	add	r7, sp, #0
    8f84:	4a05      	ldr	r2, [pc, #20]	; (8f9c <udd_get_micro_frame_number+0x1c>)
    8f86:	447a      	add	r2, pc
	return usb_device_get_micro_frame_number(&usb_device);
    8f88:	4b05      	ldr	r3, [pc, #20]	; (8fa0 <udd_get_micro_frame_number+0x20>)
    8f8a:	58d3      	ldr	r3, [r2, r3]
    8f8c:	0018      	movs	r0, r3
    8f8e:	4b05      	ldr	r3, [pc, #20]	; (8fa4 <udd_get_micro_frame_number+0x24>)
    8f90:	447b      	add	r3, pc
    8f92:	4798      	blx	r3
    8f94:	0003      	movs	r3, r0
}
    8f96:	0018      	movs	r0, r3
    8f98:	46bd      	mov	sp, r7
    8f9a:	bd80      	pop	{r7, pc}
    8f9c:	00008e4a 	.word	0x00008e4a
    8fa0:	00000078 	.word	0x00000078
    8fa4:	fffff8fd 	.word	0xfffff8fd

00008fa8 <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    8fa8:	b590      	push	{r4, r7, lr}
    8faa:	b085      	sub	sp, #20
    8fac:	af00      	add	r7, sp, #0
    8fae:	0002      	movs	r2, r0
    8fb0:	1dfb      	adds	r3, r7, #7
    8fb2:	701a      	strb	r2, [r3, #0]
    8fb4:	4c1e      	ldr	r4, [pc, #120]	; (9030 <udd_ep_free+0x88>)
    8fb6:	447c      	add	r4, pc
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    8fb8:	2308      	movs	r3, #8
    8fba:	18fb      	adds	r3, r7, r3
    8fbc:	0018      	movs	r0, r3
    8fbe:	4b1d      	ldr	r3, [pc, #116]	; (9034 <udd_ep_free+0x8c>)
    8fc0:	58e3      	ldr	r3, [r4, r3]
    8fc2:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    8fc4:	230f      	movs	r3, #15
    8fc6:	18fb      	adds	r3, r7, r3
    8fc8:	1dfa      	adds	r2, r7, #7
    8fca:	7812      	ldrb	r2, [r2, #0]
    8fcc:	210f      	movs	r1, #15
    8fce:	400a      	ands	r2, r1
    8fd0:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    8fd2:	1dfb      	adds	r3, r7, #7
    8fd4:	781b      	ldrb	r3, [r3, #0]
    8fd6:	0018      	movs	r0, r3
    8fd8:	4b17      	ldr	r3, [pc, #92]	; (9038 <udd_ep_free+0x90>)
    8fda:	58e3      	ldr	r3, [r4, r3]
    8fdc:	4798      	blx	r3

	config_ep.ep_address = ep;
    8fde:	2308      	movs	r3, #8
    8fe0:	18fb      	adds	r3, r7, r3
    8fe2:	1dfa      	adds	r2, r7, #7
    8fe4:	7812      	ldrb	r2, [r2, #0]
    8fe6:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    8fe8:	2308      	movs	r3, #8
    8fea:	18fb      	adds	r3, r7, r3
    8fec:	2200      	movs	r2, #0
    8fee:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    8ff0:	2308      	movs	r3, #8
    8ff2:	18fa      	adds	r2, r7, r3
    8ff4:	4b11      	ldr	r3, [pc, #68]	; (903c <udd_ep_free+0x94>)
    8ff6:	58e3      	ldr	r3, [r4, r3]
    8ff8:	0011      	movs	r1, r2
    8ffa:	0018      	movs	r0, r3
    8ffc:	4b10      	ldr	r3, [pc, #64]	; (9040 <udd_ep_free+0x98>)
    8ffe:	58e3      	ldr	r3, [r4, r3]
    9000:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    9002:	230f      	movs	r3, #15
    9004:	18fb      	adds	r3, r7, r3
    9006:	7819      	ldrb	r1, [r3, #0]
    9008:	4b0c      	ldr	r3, [pc, #48]	; (903c <udd_ep_free+0x94>)
    900a:	58e3      	ldr	r3, [r4, r3]
    900c:	2200      	movs	r2, #0
    900e:	0018      	movs	r0, r3
    9010:	4b0c      	ldr	r3, [pc, #48]	; (9044 <udd_ep_free+0x9c>)
    9012:	58e3      	ldr	r3, [r4, r3]
    9014:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    9016:	1dfb      	adds	r3, r7, #7
    9018:	7819      	ldrb	r1, [r3, #0]
    901a:	4b08      	ldr	r3, [pc, #32]	; (903c <udd_ep_free+0x94>)
    901c:	58e3      	ldr	r3, [r4, r3]
    901e:	2200      	movs	r2, #0
    9020:	0018      	movs	r0, r3
    9022:	4b09      	ldr	r3, [pc, #36]	; (9048 <udd_ep_free+0xa0>)
    9024:	58e3      	ldr	r3, [r4, r3]
    9026:	4798      	blx	r3
}
    9028:	46c0      	nop			; (mov r8, r8)
    902a:	46bd      	mov	sp, r7
    902c:	b005      	add	sp, #20
    902e:	bd90      	pop	{r4, r7, pc}
    9030:	00008e1a 	.word	0x00008e1a
    9034:	00000104 	.word	0x00000104
    9038:	000001b0 	.word	0x000001b0
    903c:	00000078 	.word	0x00000078
    9040:	00000074 	.word	0x00000074
    9044:	00000144 	.word	0x00000144
    9048:	000001d0 	.word	0x000001d0

0000904c <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    904c:	b5b0      	push	{r4, r5, r7, lr}
    904e:	b086      	sub	sp, #24
    9050:	af00      	add	r7, sp, #0
    9052:	0004      	movs	r4, r0
    9054:	0008      	movs	r0, r1
    9056:	0011      	movs	r1, r2
    9058:	1dfb      	adds	r3, r7, #7
    905a:	1c22      	adds	r2, r4, #0
    905c:	701a      	strb	r2, [r3, #0]
    905e:	1dbb      	adds	r3, r7, #6
    9060:	1c02      	adds	r2, r0, #0
    9062:	701a      	strb	r2, [r3, #0]
    9064:	1d3b      	adds	r3, r7, #4
    9066:	1c0a      	adds	r2, r1, #0
    9068:	801a      	strh	r2, [r3, #0]
    906a:	4c62      	ldr	r4, [pc, #392]	; (91f4 <udd_ep_alloc+0x1a8>)
    906c:	447c      	add	r4, pc
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    906e:	230c      	movs	r3, #12
    9070:	18fb      	adds	r3, r7, r3
    9072:	0018      	movs	r0, r3
    9074:	4b60      	ldr	r3, [pc, #384]	; (91f8 <udd_ep_alloc+0x1ac>)
    9076:	58e3      	ldr	r3, [r4, r3]
    9078:	4798      	blx	r3

	config_ep.ep_address = ep;
    907a:	230c      	movs	r3, #12
    907c:	18fb      	adds	r3, r7, r3
    907e:	1dfa      	adds	r2, r7, #7
    9080:	7812      	ldrb	r2, [r2, #0]
    9082:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    9084:	1d3b      	adds	r3, r7, #4
    9086:	881b      	ldrh	r3, [r3, #0]
    9088:	2b08      	cmp	r3, #8
    908a:	d804      	bhi.n	9096 <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    908c:	230c      	movs	r3, #12
    908e:	18fb      	adds	r3, r7, r3
    9090:	2200      	movs	r2, #0
    9092:	705a      	strb	r2, [r3, #1]
    9094:	e045      	b.n	9122 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 16) {
    9096:	1d3b      	adds	r3, r7, #4
    9098:	881b      	ldrh	r3, [r3, #0]
    909a:	2b10      	cmp	r3, #16
    909c:	d804      	bhi.n	90a8 <udd_ep_alloc+0x5c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    909e:	230c      	movs	r3, #12
    90a0:	18fb      	adds	r3, r7, r3
    90a2:	2201      	movs	r2, #1
    90a4:	705a      	strb	r2, [r3, #1]
    90a6:	e03c      	b.n	9122 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 32) {
    90a8:	1d3b      	adds	r3, r7, #4
    90aa:	881b      	ldrh	r3, [r3, #0]
    90ac:	2b20      	cmp	r3, #32
    90ae:	d804      	bhi.n	90ba <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    90b0:	230c      	movs	r3, #12
    90b2:	18fb      	adds	r3, r7, r3
    90b4:	2202      	movs	r2, #2
    90b6:	705a      	strb	r2, [r3, #1]
    90b8:	e033      	b.n	9122 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 64) {
    90ba:	1d3b      	adds	r3, r7, #4
    90bc:	881b      	ldrh	r3, [r3, #0]
    90be:	2b40      	cmp	r3, #64	; 0x40
    90c0:	d804      	bhi.n	90cc <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    90c2:	230c      	movs	r3, #12
    90c4:	18fb      	adds	r3, r7, r3
    90c6:	2203      	movs	r2, #3
    90c8:	705a      	strb	r2, [r3, #1]
    90ca:	e02a      	b.n	9122 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 128) {
    90cc:	1d3b      	adds	r3, r7, #4
    90ce:	881b      	ldrh	r3, [r3, #0]
    90d0:	2b80      	cmp	r3, #128	; 0x80
    90d2:	d804      	bhi.n	90de <udd_ep_alloc+0x92>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    90d4:	230c      	movs	r3, #12
    90d6:	18fb      	adds	r3, r7, r3
    90d8:	2204      	movs	r2, #4
    90da:	705a      	strb	r2, [r3, #1]
    90dc:	e021      	b.n	9122 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 256) {
    90de:	1d3b      	adds	r3, r7, #4
    90e0:	881a      	ldrh	r2, [r3, #0]
    90e2:	2380      	movs	r3, #128	; 0x80
    90e4:	005b      	lsls	r3, r3, #1
    90e6:	429a      	cmp	r2, r3
    90e8:	d804      	bhi.n	90f4 <udd_ep_alloc+0xa8>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    90ea:	230c      	movs	r3, #12
    90ec:	18fb      	adds	r3, r7, r3
    90ee:	2205      	movs	r2, #5
    90f0:	705a      	strb	r2, [r3, #1]
    90f2:	e016      	b.n	9122 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 512) {
    90f4:	1d3b      	adds	r3, r7, #4
    90f6:	881a      	ldrh	r2, [r3, #0]
    90f8:	2380      	movs	r3, #128	; 0x80
    90fa:	009b      	lsls	r3, r3, #2
    90fc:	429a      	cmp	r2, r3
    90fe:	d804      	bhi.n	910a <udd_ep_alloc+0xbe>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    9100:	230c      	movs	r3, #12
    9102:	18fb      	adds	r3, r7, r3
    9104:	2206      	movs	r2, #6
    9106:	705a      	strb	r2, [r3, #1]
    9108:	e00b      	b.n	9122 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 1023) {
    910a:	1d3b      	adds	r3, r7, #4
    910c:	881b      	ldrh	r3, [r3, #0]
    910e:	4a3b      	ldr	r2, [pc, #236]	; (91fc <udd_ep_alloc+0x1b0>)
    9110:	4293      	cmp	r3, r2
    9112:	d804      	bhi.n	911e <udd_ep_alloc+0xd2>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    9114:	230c      	movs	r3, #12
    9116:	18fb      	adds	r3, r7, r3
    9118:	2207      	movs	r2, #7
    911a:	705a      	strb	r2, [r3, #1]
    911c:	e001      	b.n	9122 <udd_ep_alloc+0xd6>
	} else {
		return false;
    911e:	2300      	movs	r3, #0
    9120:	e063      	b.n	91ea <udd_ep_alloc+0x19e>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    9122:	1dfb      	adds	r3, r7, #7
    9124:	781b      	ldrb	r3, [r3, #0]
    9126:	0018      	movs	r0, r3
    9128:	4b35      	ldr	r3, [pc, #212]	; (9200 <udd_ep_alloc+0x1b4>)
    912a:	447b      	add	r3, pc
    912c:	4798      	blx	r3
    912e:	0003      	movs	r3, r0
    9130:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    9132:	697b      	ldr	r3, [r7, #20]
    9134:	1d3a      	adds	r2, r7, #4
    9136:	8812      	ldrh	r2, [r2, #0]
    9138:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    913a:	1dbb      	adds	r3, r7, #6
    913c:	1dba      	adds	r2, r7, #6
    913e:	7812      	ldrb	r2, [r2, #0]
    9140:	2103      	movs	r1, #3
    9142:	400a      	ands	r2, r1
    9144:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    9146:	1dbb      	adds	r3, r7, #6
    9148:	781b      	ldrb	r3, [r3, #0]
    914a:	2b01      	cmp	r3, #1
    914c:	d104      	bne.n	9158 <udd_ep_alloc+0x10c>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    914e:	230c      	movs	r3, #12
    9150:	18fb      	adds	r3, r7, r3
    9152:	2202      	movs	r2, #2
    9154:	70da      	strb	r2, [r3, #3]
    9156:	e013      	b.n	9180 <udd_ep_alloc+0x134>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    9158:	1dbb      	adds	r3, r7, #6
    915a:	781b      	ldrb	r3, [r3, #0]
    915c:	2b02      	cmp	r3, #2
    915e:	d104      	bne.n	916a <udd_ep_alloc+0x11e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    9160:	230c      	movs	r3, #12
    9162:	18fb      	adds	r3, r7, r3
    9164:	2203      	movs	r2, #3
    9166:	70da      	strb	r2, [r3, #3]
    9168:	e00a      	b.n	9180 <udd_ep_alloc+0x134>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    916a:	1dbb      	adds	r3, r7, #6
    916c:	781b      	ldrb	r3, [r3, #0]
    916e:	2b03      	cmp	r3, #3
    9170:	d104      	bne.n	917c <udd_ep_alloc+0x130>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    9172:	230c      	movs	r3, #12
    9174:	18fb      	adds	r3, r7, r3
    9176:	2204      	movs	r2, #4
    9178:	70da      	strb	r2, [r3, #3]
    917a:	e001      	b.n	9180 <udd_ep_alloc+0x134>
	} else {
		return false;
    917c:	2300      	movs	r3, #0
    917e:	e034      	b.n	91ea <udd_ep_alloc+0x19e>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9180:	2313      	movs	r3, #19
    9182:	18fb      	adds	r3, r7, r3
    9184:	1dfa      	adds	r2, r7, #7
    9186:	7812      	ldrb	r2, [r2, #0]
    9188:	210f      	movs	r1, #15
    918a:	400a      	ands	r2, r1
    918c:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    918e:	230c      	movs	r3, #12
    9190:	18fa      	adds	r2, r7, r3
    9192:	4b1c      	ldr	r3, [pc, #112]	; (9204 <udd_ep_alloc+0x1b8>)
    9194:	58e3      	ldr	r3, [r4, r3]
    9196:	0011      	movs	r1, r2
    9198:	0018      	movs	r0, r3
    919a:	4b1b      	ldr	r3, [pc, #108]	; (9208 <udd_ep_alloc+0x1bc>)
    919c:	58e3      	ldr	r3, [r4, r3]
    919e:	4798      	blx	r3
    91a0:	1e03      	subs	r3, r0, #0
    91a2:	d001      	beq.n	91a8 <udd_ep_alloc+0x15c>
		return false;
    91a4:	2300      	movs	r3, #0
    91a6:	e020      	b.n	91ea <udd_ep_alloc+0x19e>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    91a8:	4b18      	ldr	r3, [pc, #96]	; (920c <udd_ep_alloc+0x1c0>)
    91aa:	447b      	add	r3, pc
    91ac:	001a      	movs	r2, r3
    91ae:	2313      	movs	r3, #19
    91b0:	18fb      	adds	r3, r7, r3
    91b2:	7819      	ldrb	r1, [r3, #0]
    91b4:	4b13      	ldr	r3, [pc, #76]	; (9204 <udd_ep_alloc+0x1b8>)
    91b6:	58e3      	ldr	r3, [r4, r3]
    91b8:	0018      	movs	r0, r3
    91ba:	0013      	movs	r3, r2
    91bc:	2200      	movs	r2, #0
    91be:	4d14      	ldr	r5, [pc, #80]	; (9210 <udd_ep_alloc+0x1c4>)
    91c0:	5965      	ldr	r5, [r4, r5]
    91c2:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    91c4:	1dfb      	adds	r3, r7, #7
    91c6:	7819      	ldrb	r1, [r3, #0]
    91c8:	4b0e      	ldr	r3, [pc, #56]	; (9204 <udd_ep_alloc+0x1b8>)
    91ca:	58e3      	ldr	r3, [r4, r3]
    91cc:	2200      	movs	r2, #0
    91ce:	0018      	movs	r0, r3
    91d0:	4b10      	ldr	r3, [pc, #64]	; (9214 <udd_ep_alloc+0x1c8>)
    91d2:	58e3      	ldr	r3, [r4, r3]
    91d4:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    91d6:	1dfb      	adds	r3, r7, #7
    91d8:	7819      	ldrb	r1, [r3, #0]
    91da:	4b0a      	ldr	r3, [pc, #40]	; (9204 <udd_ep_alloc+0x1b8>)
    91dc:	58e3      	ldr	r3, [r4, r3]
    91de:	2201      	movs	r2, #1
    91e0:	0018      	movs	r0, r3
    91e2:	4b0c      	ldr	r3, [pc, #48]	; (9214 <udd_ep_alloc+0x1c8>)
    91e4:	58e3      	ldr	r3, [r4, r3]
    91e6:	4798      	blx	r3

	return true;
    91e8:	2301      	movs	r3, #1
}
    91ea:	0018      	movs	r0, r3
    91ec:	46bd      	mov	sp, r7
    91ee:	b006      	add	sp, #24
    91f0:	bdb0      	pop	{r4, r5, r7, pc}
    91f2:	46c0      	nop			; (mov r8, r8)
    91f4:	00008d64 	.word	0x00008d64
    91f8:	00000104 	.word	0x00000104
    91fc:	000003ff 	.word	0x000003ff
    9200:	fffff95f 	.word	0xfffff95f
    9204:	00000078 	.word	0x00000078
    9208:	00000074 	.word	0x00000074
    920c:	fffffcd7 	.word	0xfffffcd7
    9210:	00000154 	.word	0x00000154
    9214:	000002a8 	.word	0x000002a8

00009218 <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    9218:	b580      	push	{r7, lr}
    921a:	b082      	sub	sp, #8
    921c:	af00      	add	r7, sp, #0
    921e:	0002      	movs	r2, r0
    9220:	1dfb      	adds	r3, r7, #7
    9222:	701a      	strb	r2, [r3, #0]
    9224:	4b07      	ldr	r3, [pc, #28]	; (9244 <udd_ep_is_halted+0x2c>)
    9226:	447b      	add	r3, pc
	return usb_device_endpoint_is_halted(&usb_device, ep);
    9228:	1dfa      	adds	r2, r7, #7
    922a:	7811      	ldrb	r1, [r2, #0]
    922c:	4a06      	ldr	r2, [pc, #24]	; (9248 <udd_ep_is_halted+0x30>)
    922e:	589a      	ldr	r2, [r3, r2]
    9230:	0010      	movs	r0, r2
    9232:	4a06      	ldr	r2, [pc, #24]	; (924c <udd_ep_is_halted+0x34>)
    9234:	589b      	ldr	r3, [r3, r2]
    9236:	4798      	blx	r3
    9238:	0003      	movs	r3, r0
}
    923a:	0018      	movs	r0, r3
    923c:	46bd      	mov	sp, r7
    923e:	b002      	add	sp, #8
    9240:	bd80      	pop	{r7, pc}
    9242:	46c0      	nop			; (mov r8, r8)
    9244:	00008baa 	.word	0x00008baa
    9248:	00000078 	.word	0x00000078
    924c:	00000138 	.word	0x00000138

00009250 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    9250:	b590      	push	{r4, r7, lr}
    9252:	b085      	sub	sp, #20
    9254:	af00      	add	r7, sp, #0
    9256:	0002      	movs	r2, r0
    9258:	1dfb      	adds	r3, r7, #7
    925a:	701a      	strb	r2, [r3, #0]
    925c:	4c11      	ldr	r4, [pc, #68]	; (92a4 <udd_ep_set_halt+0x54>)
    925e:	447c      	add	r4, pc
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    9260:	230f      	movs	r3, #15
    9262:	18fb      	adds	r3, r7, r3
    9264:	1dfa      	adds	r2, r7, #7
    9266:	7812      	ldrb	r2, [r2, #0]
    9268:	210f      	movs	r1, #15
    926a:	400a      	ands	r2, r1
    926c:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    926e:	230f      	movs	r3, #15
    9270:	18fb      	adds	r3, r7, r3
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	2b03      	cmp	r3, #3
    9276:	d901      	bls.n	927c <udd_ep_set_halt+0x2c>
		return false;
    9278:	2300      	movs	r3, #0
    927a:	e00f      	b.n	929c <udd_ep_set_halt+0x4c>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    927c:	1dfb      	adds	r3, r7, #7
    927e:	781a      	ldrb	r2, [r3, #0]
    9280:	4b09      	ldr	r3, [pc, #36]	; (92a8 <udd_ep_set_halt+0x58>)
    9282:	58e3      	ldr	r3, [r4, r3]
    9284:	0011      	movs	r1, r2
    9286:	0018      	movs	r0, r3
    9288:	4b08      	ldr	r3, [pc, #32]	; (92ac <udd_ep_set_halt+0x5c>)
    928a:	58e3      	ldr	r3, [r4, r3]
    928c:	4798      	blx	r3

	udd_ep_abort(ep);
    928e:	1dfb      	adds	r3, r7, #7
    9290:	781b      	ldrb	r3, [r3, #0]
    9292:	0018      	movs	r0, r3
    9294:	4b06      	ldr	r3, [pc, #24]	; (92b0 <udd_ep_set_halt+0x60>)
    9296:	58e3      	ldr	r3, [r4, r3]
    9298:	4798      	blx	r3
	return true;
    929a:	2301      	movs	r3, #1
}
    929c:	0018      	movs	r0, r3
    929e:	46bd      	mov	sp, r7
    92a0:	b005      	add	sp, #20
    92a2:	bd90      	pop	{r4, r7, pc}
    92a4:	00008b72 	.word	0x00008b72
    92a8:	00000078 	.word	0x00000078
    92ac:	0000026c 	.word	0x0000026c
    92b0:	000001b0 	.word	0x000001b0

000092b4 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    92b4:	b590      	push	{r4, r7, lr}
    92b6:	b085      	sub	sp, #20
    92b8:	af00      	add	r7, sp, #0
    92ba:	0002      	movs	r2, r0
    92bc:	1dfb      	adds	r3, r7, #7
    92be:	701a      	strb	r2, [r3, #0]
    92c0:	4c1a      	ldr	r4, [pc, #104]	; (932c <udd_ep_clear_halt+0x78>)
    92c2:	447c      	add	r4, pc
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    92c4:	230f      	movs	r3, #15
    92c6:	18fb      	adds	r3, r7, r3
    92c8:	1dfa      	adds	r2, r7, #7
    92ca:	7812      	ldrb	r2, [r2, #0]
    92cc:	210f      	movs	r1, #15
    92ce:	400a      	ands	r2, r1
    92d0:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    92d2:	230f      	movs	r3, #15
    92d4:	18fb      	adds	r3, r7, r3
    92d6:	781b      	ldrb	r3, [r3, #0]
    92d8:	2b03      	cmp	r3, #3
    92da:	d901      	bls.n	92e0 <udd_ep_clear_halt+0x2c>
		return false;
    92dc:	2300      	movs	r3, #0
    92de:	e020      	b.n	9322 <udd_ep_clear_halt+0x6e>
	}
	ptr_job = udd_ep_get_job(ep);
    92e0:	1dfb      	adds	r3, r7, #7
    92e2:	781b      	ldrb	r3, [r3, #0]
    92e4:	0018      	movs	r0, r3
    92e6:	4b12      	ldr	r3, [pc, #72]	; (9330 <udd_ep_clear_halt+0x7c>)
    92e8:	447b      	add	r3, pc
    92ea:	4798      	blx	r3
    92ec:	0003      	movs	r3, r0
    92ee:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    92f0:	1dfb      	adds	r3, r7, #7
    92f2:	781a      	ldrb	r2, [r3, #0]
    92f4:	4b0f      	ldr	r3, [pc, #60]	; (9334 <udd_ep_clear_halt+0x80>)
    92f6:	58e3      	ldr	r3, [r4, r3]
    92f8:	0011      	movs	r1, r2
    92fa:	0018      	movs	r0, r3
    92fc:	4b0e      	ldr	r3, [pc, #56]	; (9338 <udd_ep_clear_halt+0x84>)
    92fe:	58e3      	ldr	r3, [r4, r3]
    9300:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    9302:	68bb      	ldr	r3, [r7, #8]
    9304:	7c9b      	ldrb	r3, [r3, #18]
    9306:	2201      	movs	r2, #1
    9308:	4013      	ands	r3, r2
    930a:	b2db      	uxtb	r3, r3
    930c:	2b00      	cmp	r3, #0
    930e:	d007      	beq.n	9320 <udd_ep_clear_halt+0x6c>
		ptr_job->busy = false;
    9310:	68bb      	ldr	r3, [r7, #8]
    9312:	7c9a      	ldrb	r2, [r3, #18]
    9314:	2101      	movs	r1, #1
    9316:	438a      	bics	r2, r1
    9318:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    931a:	68bb      	ldr	r3, [r7, #8]
    931c:	681b      	ldr	r3, [r3, #0]
    931e:	4798      	blx	r3
	}

	return true;
    9320:	2301      	movs	r3, #1
}
    9322:	0018      	movs	r0, r3
    9324:	46bd      	mov	sp, r7
    9326:	b005      	add	sp, #20
    9328:	bd90      	pop	{r4, r7, pc}
    932a:	46c0      	nop			; (mov r8, r8)
    932c:	00008b0e 	.word	0x00008b0e
    9330:	fffff7a1 	.word	0xfffff7a1
    9334:	00000078 	.word	0x00000078
    9338:	00000220 	.word	0x00000220

0000933c <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    933c:	b5b0      	push	{r4, r5, r7, lr}
    933e:	af00      	add	r7, sp, #0
    9340:	4c0b      	ldr	r4, [pc, #44]	; (9370 <udd_ctrl_stall_data+0x34>)
    9342:	447c      	add	r4, pc
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    9344:	4b0b      	ldr	r3, [pc, #44]	; (9374 <udd_ctrl_stall_data+0x38>)
    9346:	447b      	add	r3, pc
    9348:	2205      	movs	r2, #5
    934a:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    934c:	4b0a      	ldr	r3, [pc, #40]	; (9378 <udd_ctrl_stall_data+0x3c>)
    934e:	58e3      	ldr	r3, [r4, r3]
    9350:	2180      	movs	r1, #128	; 0x80
    9352:	0018      	movs	r0, r3
    9354:	4b09      	ldr	r3, [pc, #36]	; (937c <udd_ctrl_stall_data+0x40>)
    9356:	58e3      	ldr	r3, [r4, r3]
    9358:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    935a:	4b07      	ldr	r3, [pc, #28]	; (9378 <udd_ctrl_stall_data+0x3c>)
    935c:	58e3      	ldr	r3, [r4, r3]
    935e:	2100      	movs	r1, #0
    9360:	0018      	movs	r0, r3
    9362:	4b07      	ldr	r3, [pc, #28]	; (9380 <udd_ctrl_stall_data+0x44>)
    9364:	58e3      	ldr	r3, [r4, r3]
    9366:	4798      	blx	r3
}
    9368:	46c0      	nop			; (mov r8, r8)
    936a:	46bd      	mov	sp, r7
    936c:	bdb0      	pop	{r4, r5, r7, pc}
    936e:	46c0      	nop			; (mov r8, r8)
    9370:	00008a8e 	.word	0x00008a8e
    9374:	1fff7250 	.word	0x1fff7250
    9378:	00000078 	.word	0x00000078
    937c:	0000026c 	.word	0x0000026c
    9380:	00000220 	.word	0x00000220

00009384 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    9384:	b5b0      	push	{r4, r5, r7, lr}
    9386:	b088      	sub	sp, #32
    9388:	af00      	add	r7, sp, #0
    938a:	60ba      	str	r2, [r7, #8]
    938c:	607b      	str	r3, [r7, #4]
    938e:	230f      	movs	r3, #15
    9390:	18fb      	adds	r3, r7, r3
    9392:	1c02      	adds	r2, r0, #0
    9394:	701a      	strb	r2, [r3, #0]
    9396:	230e      	movs	r3, #14
    9398:	18fb      	adds	r3, r7, r3
    939a:	1c0a      	adds	r2, r1, #0
    939c:	701a      	strb	r2, [r3, #0]
    939e:	4cb3      	ldr	r4, [pc, #716]	; (966c <udd_ep_run+0x2e8>)
    93a0:	447c      	add	r4, pc
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    93a2:	231d      	movs	r3, #29
    93a4:	18fb      	adds	r3, r7, r3
    93a6:	220f      	movs	r2, #15
    93a8:	18ba      	adds	r2, r7, r2
    93aa:	7812      	ldrb	r2, [r2, #0]
    93ac:	210f      	movs	r1, #15
    93ae:	400a      	ands	r2, r1
    93b0:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    93b2:	231d      	movs	r3, #29
    93b4:	18fb      	adds	r3, r7, r3
    93b6:	781b      	ldrb	r3, [r3, #0]
    93b8:	2b03      	cmp	r3, #3
    93ba:	d808      	bhi.n	93ce <udd_ep_run+0x4a>
    93bc:	230f      	movs	r3, #15
    93be:	18fb      	adds	r3, r7, r3
    93c0:	781b      	ldrb	r3, [r3, #0]
    93c2:	0018      	movs	r0, r3
    93c4:	4baa      	ldr	r3, [pc, #680]	; (9670 <udd_ep_run+0x2ec>)
    93c6:	58e3      	ldr	r3, [r4, r3]
    93c8:	4798      	blx	r3
    93ca:	1e03      	subs	r3, r0, #0
    93cc:	d001      	beq.n	93d2 <udd_ep_run+0x4e>
		return false;
    93ce:	2300      	movs	r3, #0
    93d0:	e148      	b.n	9664 <udd_ep_run+0x2e0>
	}

	ptr_job = udd_ep_get_job(ep);
    93d2:	230f      	movs	r3, #15
    93d4:	18fb      	adds	r3, r7, r3
    93d6:	781b      	ldrb	r3, [r3, #0]
    93d8:	0018      	movs	r0, r3
    93da:	4ba6      	ldr	r3, [pc, #664]	; (9674 <udd_ep_run+0x2f0>)
    93dc:	447b      	add	r3, pc
    93de:	4798      	blx	r3
    93e0:	0003      	movs	r3, r0
    93e2:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    93e4:	4ba4      	ldr	r3, [pc, #656]	; (9678 <udd_ep_run+0x2f4>)
    93e6:	447b      	add	r3, pc
    93e8:	4798      	blx	r3
    93ea:	0003      	movs	r3, r0
    93ec:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    93ee:	69bb      	ldr	r3, [r7, #24]
    93f0:	7c9b      	ldrb	r3, [r3, #18]
    93f2:	2201      	movs	r2, #1
    93f4:	4013      	ands	r3, r2
    93f6:	b2db      	uxtb	r3, r3
    93f8:	2b00      	cmp	r3, #0
    93fa:	d006      	beq.n	940a <udd_ep_run+0x86>
		cpu_irq_restore(flags);
    93fc:	697b      	ldr	r3, [r7, #20]
    93fe:	0018      	movs	r0, r3
    9400:	4b9e      	ldr	r3, [pc, #632]	; (967c <udd_ep_run+0x2f8>)
    9402:	447b      	add	r3, pc
    9404:	4798      	blx	r3
		return false; /* Job already on going */
    9406:	2300      	movs	r3, #0
    9408:	e12c      	b.n	9664 <udd_ep_run+0x2e0>
	}
	ptr_job->busy = true;
    940a:	69bb      	ldr	r3, [r7, #24]
    940c:	7c9a      	ldrb	r2, [r3, #18]
    940e:	2101      	movs	r1, #1
    9410:	430a      	orrs	r2, r1
    9412:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    9414:	697b      	ldr	r3, [r7, #20]
    9416:	0018      	movs	r0, r3
    9418:	4b99      	ldr	r3, [pc, #612]	; (9680 <udd_ep_run+0x2fc>)
    941a:	447b      	add	r3, pc
    941c:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    941e:	69bb      	ldr	r3, [r7, #24]
    9420:	68ba      	ldr	r2, [r7, #8]
    9422:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    9424:	69bb      	ldr	r3, [r7, #24]
    9426:	687a      	ldr	r2, [r7, #4]
    9428:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    942a:	69bb      	ldr	r3, [r7, #24]
    942c:	2200      	movs	r2, #0
    942e:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    9430:	69bb      	ldr	r3, [r7, #24]
    9432:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    9434:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    9436:	69bb      	ldr	r3, [r7, #24]
    9438:	220e      	movs	r2, #14
    943a:	18ba      	adds	r2, r7, r2
    943c:	7812      	ldrb	r2, [r2, #0]
    943e:	2101      	movs	r1, #1
    9440:	400a      	ands	r2, r1
    9442:	1890      	adds	r0, r2, r2
    9444:	7c9a      	ldrb	r2, [r3, #18]
    9446:	2102      	movs	r1, #2
    9448:	438a      	bics	r2, r1
    944a:	1c11      	adds	r1, r2, #0
    944c:	1c02      	adds	r2, r0, #0
    944e:	430a      	orrs	r2, r1
    9450:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    9452:	69bb      	ldr	r3, [r7, #24]
    9454:	7c9a      	ldrb	r2, [r3, #18]
    9456:	2104      	movs	r1, #4
    9458:	438a      	bics	r2, r1
    945a:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    945c:	230f      	movs	r3, #15
    945e:	18fb      	adds	r3, r7, r3
    9460:	781b      	ldrb	r3, [r3, #0]
    9462:	b25b      	sxtb	r3, r3
    9464:	2b00      	cmp	r3, #0
    9466:	db00      	blt.n	946a <udd_ep_run+0xe6>
    9468:	e07e      	b.n	9568 <udd_ep_run+0x1e4>
		if (0 != ptr_job->buf_size) {
    946a:	69bb      	ldr	r3, [r7, #24]
    946c:	689b      	ldr	r3, [r3, #8]
    946e:	2b00      	cmp	r3, #0
    9470:	d041      	beq.n	94f6 <udd_ep_run+0x172>
			next_trans = ptr_job->buf_size;
    9472:	69bb      	ldr	r3, [r7, #24]
    9474:	689a      	ldr	r2, [r3, #8]
    9476:	231e      	movs	r3, #30
    9478:	18fb      	adds	r3, r7, r3
    947a:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    947c:	231e      	movs	r3, #30
    947e:	18fb      	adds	r3, r7, r3
    9480:	881b      	ldrh	r3, [r3, #0]
    9482:	4a80      	ldr	r2, [pc, #512]	; (9684 <udd_ep_run+0x300>)
    9484:	4293      	cmp	r3, r2
    9486:	d90e      	bls.n	94a6 <udd_ep_run+0x122>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    9488:	69bb      	ldr	r3, [r7, #24]
    948a:	8a1b      	ldrh	r3, [r3, #16]
    948c:	0019      	movs	r1, r3
    948e:	4a7d      	ldr	r2, [pc, #500]	; (9684 <udd_ep_run+0x300>)
    9490:	4b7d      	ldr	r3, [pc, #500]	; (9688 <udd_ep_run+0x304>)
    9492:	58e3      	ldr	r3, [r4, r3]
    9494:	0010      	movs	r0, r2
    9496:	4798      	blx	r3
    9498:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    949a:	b29a      	uxth	r2, r3
    949c:	231e      	movs	r3, #30
    949e:	18fb      	adds	r3, r7, r3
    94a0:	4978      	ldr	r1, [pc, #480]	; (9684 <udd_ep_run+0x300>)
    94a2:	1a8a      	subs	r2, r1, r2
    94a4:	801a      	strh	r2, [r3, #0]
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    94a6:	69bb      	ldr	r3, [r7, #24]
    94a8:	7c9b      	ldrb	r3, [r3, #18]
    94aa:	2202      	movs	r2, #2
    94ac:	4013      	ands	r3, r2
    94ae:	b2db      	uxtb	r3, r3
    94b0:	2b00      	cmp	r3, #0
    94b2:	d00e      	beq.n	94d2 <udd_ep_run+0x14e>
					(0 == (next_trans % ptr_job->ep_size));
    94b4:	69bb      	ldr	r3, [r7, #24]
    94b6:	8a19      	ldrh	r1, [r3, #16]
    94b8:	231e      	movs	r3, #30
    94ba:	18fb      	adds	r3, r7, r3
    94bc:	881a      	ldrh	r2, [r3, #0]
    94be:	4b73      	ldr	r3, [pc, #460]	; (968c <udd_ep_run+0x308>)
    94c0:	58e3      	ldr	r3, [r4, r3]
    94c2:	0010      	movs	r0, r2
    94c4:	4798      	blx	r3
    94c6:	000b      	movs	r3, r1
    94c8:	b29b      	uxth	r3, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    94ca:	2b00      	cmp	r3, #0
    94cc:	d101      	bne.n	94d2 <udd_ep_run+0x14e>
    94ce:	2301      	movs	r3, #1
    94d0:	e000      	b.n	94d4 <udd_ep_run+0x150>
    94d2:	2300      	movs	r3, #0
    94d4:	b2db      	uxtb	r3, r3
    94d6:	1c1a      	adds	r2, r3, #0
    94d8:	2301      	movs	r3, #1
    94da:	4013      	ands	r3, r2
    94dc:	b2da      	uxtb	r2, r3
    94de:	69bb      	ldr	r3, [r7, #24]
    94e0:	2101      	movs	r1, #1
    94e2:	400a      	ands	r2, r1
    94e4:	1890      	adds	r0, r2, r2
    94e6:	7c9a      	ldrb	r2, [r3, #18]
    94e8:	2102      	movs	r1, #2
    94ea:	438a      	bics	r2, r1
    94ec:	1c11      	adds	r1, r2, #0
    94ee:	1c02      	adds	r2, r0, #0
    94f0:	430a      	orrs	r2, r1
    94f2:	749a      	strb	r2, [r3, #18]
    94f4:	e023      	b.n	953e <udd_ep_run+0x1ba>
		} else if (true == ptr_job->b_shortpacket) {
    94f6:	69bb      	ldr	r3, [r7, #24]
    94f8:	7c9b      	ldrb	r3, [r3, #18]
    94fa:	2202      	movs	r2, #2
    94fc:	4013      	ands	r3, r2
    94fe:	b2db      	uxtb	r3, r3
    9500:	2b00      	cmp	r3, #0
    9502:	d009      	beq.n	9518 <udd_ep_run+0x194>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    9504:	69bb      	ldr	r3, [r7, #24]
    9506:	7c9a      	ldrb	r2, [r3, #18]
    9508:	2102      	movs	r1, #2
    950a:	438a      	bics	r2, r1
    950c:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    950e:	231e      	movs	r3, #30
    9510:	18fb      	adds	r3, r7, r3
    9512:	2200      	movs	r2, #0
    9514:	801a      	strh	r2, [r3, #0]
    9516:	e012      	b.n	953e <udd_ep_run+0x1ba>
		} else {
			ptr_job->busy = false;
    9518:	69bb      	ldr	r3, [r7, #24]
    951a:	7c9a      	ldrb	r2, [r3, #18]
    951c:	2101      	movs	r1, #1
    951e:	438a      	bics	r2, r1
    9520:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    9522:	69bb      	ldr	r3, [r7, #24]
    9524:	681b      	ldr	r3, [r3, #0]
    9526:	2b00      	cmp	r3, #0
    9528:	d007      	beq.n	953a <udd_ep_run+0x1b6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    952a:	69bb      	ldr	r3, [r7, #24]
    952c:	681b      	ldr	r3, [r3, #0]
    952e:	220f      	movs	r2, #15
    9530:	18ba      	adds	r2, r7, r2
    9532:	7812      	ldrb	r2, [r2, #0]
    9534:	2100      	movs	r1, #0
    9536:	2000      	movs	r0, #0
    9538:	4798      	blx	r3
			}
			return true;
    953a:	2301      	movs	r3, #1
    953c:	e092      	b.n	9664 <udd_ep_run+0x2e0>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    953e:	69bb      	ldr	r3, [r7, #24]
    9540:	685a      	ldr	r2, [r3, #4]
    9542:	231e      	movs	r3, #30
    9544:	18fb      	adds	r3, r7, r3
    9546:	8818      	ldrh	r0, [r3, #0]
    9548:	231d      	movs	r3, #29
    954a:	18fb      	adds	r3, r7, r3
    954c:	7819      	ldrb	r1, [r3, #0]
    954e:	4b50      	ldr	r3, [pc, #320]	; (9690 <udd_ep_run+0x30c>)
    9550:	58e3      	ldr	r3, [r4, r3]
    9552:	001d      	movs	r5, r3
    9554:	0003      	movs	r3, r0
    9556:	0028      	movs	r0, r5
    9558:	4d4e      	ldr	r5, [pc, #312]	; (9694 <udd_ep_run+0x310>)
    955a:	5964      	ldr	r4, [r4, r5]
    955c:	47a0      	blx	r4
    955e:	0003      	movs	r3, r0
		return (STATUS_OK ==
    9560:	425a      	negs	r2, r3
    9562:	4153      	adcs	r3, r2
    9564:	b2db      	uxtb	r3, r3
    9566:	e07d      	b.n	9664 <udd_ep_run+0x2e0>
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    9568:	69bb      	ldr	r3, [r7, #24]
    956a:	689b      	ldr	r3, [r3, #8]
    956c:	2b00      	cmp	r3, #0
    956e:	d067      	beq.n	9640 <udd_ep_run+0x2bc>
			next_trans = ptr_job->buf_size;
    9570:	69bb      	ldr	r3, [r7, #24]
    9572:	689a      	ldr	r2, [r3, #8]
    9574:	231e      	movs	r3, #30
    9576:	18fb      	adds	r3, r7, r3
    9578:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    957a:	231e      	movs	r3, #30
    957c:	18fb      	adds	r3, r7, r3
    957e:	881b      	ldrh	r3, [r3, #0]
    9580:	4a40      	ldr	r2, [pc, #256]	; (9684 <udd_ep_run+0x300>)
    9582:	4293      	cmp	r3, r2
    9584:	d90f      	bls.n	95a6 <udd_ep_run+0x222>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    9586:	69bb      	ldr	r3, [r7, #24]
    9588:	8a1b      	ldrh	r3, [r3, #16]
    958a:	0019      	movs	r1, r3
    958c:	4a3d      	ldr	r2, [pc, #244]	; (9684 <udd_ep_run+0x300>)
    958e:	4b3e      	ldr	r3, [pc, #248]	; (9688 <udd_ep_run+0x304>)
    9590:	58e3      	ldr	r3, [r4, r3]
    9592:	0010      	movs	r0, r2
    9594:	4798      	blx	r3
    9596:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    9598:	b29a      	uxth	r2, r3
    959a:	231e      	movs	r3, #30
    959c:	18fb      	adds	r3, r7, r3
    959e:	4939      	ldr	r1, [pc, #228]	; (9684 <udd_ep_run+0x300>)
    95a0:	1a8a      	subs	r2, r1, r2
    95a2:	801a      	strh	r2, [r3, #0]
    95a4:	e011      	b.n	95ca <udd_ep_run+0x246>
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    95a6:	69bb      	ldr	r3, [r7, #24]
    95a8:	8a19      	ldrh	r1, [r3, #16]
    95aa:	231e      	movs	r3, #30
    95ac:	18fb      	adds	r3, r7, r3
    95ae:	881a      	ldrh	r2, [r3, #0]
    95b0:	4b36      	ldr	r3, [pc, #216]	; (968c <udd_ep_run+0x308>)
    95b2:	58e3      	ldr	r3, [r4, r3]
    95b4:	0010      	movs	r0, r2
    95b6:	4798      	blx	r3
    95b8:	000b      	movs	r3, r1
    95ba:	b29a      	uxth	r2, r3
    95bc:	231e      	movs	r3, #30
    95be:	18fb      	adds	r3, r7, r3
    95c0:	211e      	movs	r1, #30
    95c2:	1879      	adds	r1, r7, r1
    95c4:	8809      	ldrh	r1, [r1, #0]
    95c6:	1a8a      	subs	r2, r1, r2
    95c8:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    95ca:	69bb      	ldr	r3, [r7, #24]
    95cc:	8a1b      	ldrh	r3, [r3, #16]
    95ce:	221e      	movs	r2, #30
    95d0:	18ba      	adds	r2, r7, r2
    95d2:	8812      	ldrh	r2, [r2, #0]
    95d4:	429a      	cmp	r2, r3
    95d6:	d21e      	bcs.n	9616 <udd_ep_run+0x292>
				ptr_job->b_use_out_cache_buffer = true;
    95d8:	69bb      	ldr	r3, [r7, #24]
    95da:	7c9a      	ldrb	r2, [r3, #18]
    95dc:	2104      	movs	r1, #4
    95de:	430a      	orrs	r2, r1
    95e0:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    95e2:	231d      	movs	r3, #29
    95e4:	18fb      	adds	r3, r7, r3
    95e6:	781b      	ldrb	r3, [r3, #0]
    95e8:	3b01      	subs	r3, #1
    95ea:	019b      	lsls	r3, r3, #6
    95ec:	4a2a      	ldr	r2, [pc, #168]	; (9698 <udd_ep_run+0x314>)
    95ee:	58a2      	ldr	r2, [r4, r2]
    95f0:	189a      	adds	r2, r3, r2
								ptr_job->ep_size));
    95f2:	69bb      	ldr	r3, [r7, #24]
    95f4:	8a1b      	ldrh	r3, [r3, #16]
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    95f6:	001d      	movs	r5, r3
    95f8:	231d      	movs	r3, #29
    95fa:	18fb      	adds	r3, r7, r3
    95fc:	7819      	ldrb	r1, [r3, #0]
    95fe:	4b24      	ldr	r3, [pc, #144]	; (9690 <udd_ep_run+0x30c>)
    9600:	58e3      	ldr	r3, [r4, r3]
    9602:	0018      	movs	r0, r3
    9604:	002b      	movs	r3, r5
    9606:	4d25      	ldr	r5, [pc, #148]	; (969c <udd_ep_run+0x318>)
    9608:	5964      	ldr	r4, [r4, r5]
    960a:	47a0      	blx	r4
    960c:	0003      	movs	r3, r0
				return (STATUS_OK ==
    960e:	425a      	negs	r2, r3
    9610:	4153      	adcs	r3, r2
    9612:	b2db      	uxtb	r3, r3
    9614:	e026      	b.n	9664 <udd_ep_run+0x2e0>
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    9616:	69bb      	ldr	r3, [r7, #24]
    9618:	685a      	ldr	r2, [r3, #4]
    961a:	231e      	movs	r3, #30
    961c:	18fb      	adds	r3, r7, r3
    961e:	8818      	ldrh	r0, [r3, #0]
    9620:	231d      	movs	r3, #29
    9622:	18fb      	adds	r3, r7, r3
    9624:	7819      	ldrb	r1, [r3, #0]
    9626:	4b1a      	ldr	r3, [pc, #104]	; (9690 <udd_ep_run+0x30c>)
    9628:	58e3      	ldr	r3, [r4, r3]
    962a:	001d      	movs	r5, r3
    962c:	0003      	movs	r3, r0
    962e:	0028      	movs	r0, r5
    9630:	4d1a      	ldr	r5, [pc, #104]	; (969c <udd_ep_run+0x318>)
    9632:	5964      	ldr	r4, [r4, r5]
    9634:	47a0      	blx	r4
    9636:	0003      	movs	r3, r0
				return (STATUS_OK ==
    9638:	425a      	negs	r2, r3
    963a:	4153      	adcs	r3, r2
    963c:	b2db      	uxtb	r3, r3
    963e:	e011      	b.n	9664 <udd_ep_run+0x2e0>
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    9640:	69bb      	ldr	r3, [r7, #24]
    9642:	7c9a      	ldrb	r2, [r3, #18]
    9644:	2101      	movs	r1, #1
    9646:	438a      	bics	r2, r1
    9648:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    964a:	69bb      	ldr	r3, [r7, #24]
    964c:	681b      	ldr	r3, [r3, #0]
    964e:	2b00      	cmp	r3, #0
    9650:	d007      	beq.n	9662 <udd_ep_run+0x2de>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    9652:	69bb      	ldr	r3, [r7, #24]
    9654:	681b      	ldr	r3, [r3, #0]
    9656:	220f      	movs	r2, #15
    9658:	18ba      	adds	r2, r7, r2
    965a:	7812      	ldrb	r2, [r2, #0]
    965c:	2100      	movs	r1, #0
    965e:	2000      	movs	r0, #0
    9660:	4798      	blx	r3
			}
			return true;
    9662:	2301      	movs	r3, #1
		}
	}
}
    9664:	0018      	movs	r0, r3
    9666:	46bd      	mov	sp, r7
    9668:	b008      	add	sp, #32
    966a:	bdb0      	pop	{r4, r5, r7, pc}
    966c:	00008a30 	.word	0x00008a30
    9670:	000001a0 	.word	0x000001a0
    9674:	fffff6ad 	.word	0xfffff6ad
    9678:	fffff393 	.word	0xfffff393
    967c:	fffff3cb 	.word	0xfffff3cb
    9680:	fffff3b3 	.word	0xfffff3b3
    9684:	00001fff 	.word	0x00001fff
    9688:	000002e0 	.word	0x000002e0
    968c:	00000268 	.word	0x00000268
    9690:	00000078 	.word	0x00000078
    9694:	000002f8 	.word	0x000002f8
    9698:	0000001c 	.word	0x0000001c
    969c:	0000014c 	.word	0x0000014c

000096a0 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    96a0:	b580      	push	{r7, lr}
    96a2:	b082      	sub	sp, #8
    96a4:	af00      	add	r7, sp, #0
    96a6:	0002      	movs	r2, r0
    96a8:	1dfb      	adds	r3, r7, #7
    96aa:	701a      	strb	r2, [r3, #0]
    96ac:	4a06      	ldr	r2, [pc, #24]	; (96c8 <udd_set_address+0x28>)
    96ae:	447a      	add	r2, pc
	usb_device_set_address(&usb_device,address);
    96b0:	1dfb      	adds	r3, r7, #7
    96b2:	7819      	ldrb	r1, [r3, #0]
    96b4:	4b05      	ldr	r3, [pc, #20]	; (96cc <udd_set_address+0x2c>)
    96b6:	58d3      	ldr	r3, [r2, r3]
    96b8:	0018      	movs	r0, r3
    96ba:	4b05      	ldr	r3, [pc, #20]	; (96d0 <udd_set_address+0x30>)
    96bc:	447b      	add	r3, pc
    96be:	4798      	blx	r3
}
    96c0:	46c0      	nop			; (mov r8, r8)
    96c2:	46bd      	mov	sp, r7
    96c4:	b002      	add	sp, #8
    96c6:	bd80      	pop	{r7, pc}
    96c8:	00008722 	.word	0x00008722
    96cc:	00000078 	.word	0x00000078
    96d0:	fffff18d 	.word	0xfffff18d

000096d4 <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    96d4:	b580      	push	{r7, lr}
    96d6:	af00      	add	r7, sp, #0
    96d8:	4a05      	ldr	r2, [pc, #20]	; (96f0 <udd_getaddress+0x1c>)
    96da:	447a      	add	r2, pc
	return usb_device_get_address(&usb_device);
    96dc:	4b05      	ldr	r3, [pc, #20]	; (96f4 <udd_getaddress+0x20>)
    96de:	58d3      	ldr	r3, [r2, r3]
    96e0:	0018      	movs	r0, r3
    96e2:	4b05      	ldr	r3, [pc, #20]	; (96f8 <udd_getaddress+0x24>)
    96e4:	447b      	add	r3, pc
    96e6:	4798      	blx	r3
    96e8:	0003      	movs	r3, r0
}
    96ea:	0018      	movs	r0, r3
    96ec:	46bd      	mov	sp, r7
    96ee:	bd80      	pop	{r7, pc}
    96f0:	000086f6 	.word	0x000086f6
    96f4:	00000078 	.word	0x00000078
    96f8:	fffff149 	.word	0xfffff149

000096fc <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    96fc:	b580      	push	{r7, lr}
    96fe:	b082      	sub	sp, #8
    9700:	af00      	add	r7, sp, #0
    9702:	6078      	str	r0, [r7, #4]
    9704:	000a      	movs	r2, r1
    9706:	1cbb      	adds	r3, r7, #2
    9708:	801a      	strh	r2, [r3, #0]
    970a:	4b07      	ldr	r3, [pc, #28]	; (9728 <udd_set_setup_payload+0x2c>)
    970c:	447b      	add	r3, pc
	udd_g_ctrlreq.payload = payload;
    970e:	4a07      	ldr	r2, [pc, #28]	; (972c <udd_set_setup_payload+0x30>)
    9710:	589a      	ldr	r2, [r3, r2]
    9712:	6879      	ldr	r1, [r7, #4]
    9714:	6091      	str	r1, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    9716:	4a05      	ldr	r2, [pc, #20]	; (972c <udd_set_setup_payload+0x30>)
    9718:	589b      	ldr	r3, [r3, r2]
    971a:	1cba      	adds	r2, r7, #2
    971c:	8812      	ldrh	r2, [r2, #0]
    971e:	819a      	strh	r2, [r3, #12]
}
    9720:	46c0      	nop			; (mov r8, r8)
    9722:	46bd      	mov	sp, r7
    9724:	b002      	add	sp, #8
    9726:	bd80      	pop	{r7, pc}
    9728:	000086c4 	.word	0x000086c4
    972c:	000001e0 	.word	0x000001e0

00009730 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    9730:	b580      	push	{r7, lr}
    9732:	af00      	add	r7, sp, #0
    9734:	4b1f      	ldr	r3, [pc, #124]	; (97b4 <udd_ctrl_fetch_ram+0x84>)
    9736:	447b      	add	r3, pc
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    9738:	4a1f      	ldr	r2, [pc, #124]	; (97b8 <udd_ctrl_fetch_ram+0x88>)
    973a:	589a      	ldr	r2, [r3, r2]
    973c:	7811      	ldrb	r1, [r2, #0]
    973e:	4a1f      	ldr	r2, [pc, #124]	; (97bc <udd_ctrl_fetch_ram+0x8c>)
    9740:	589a      	ldr	r2, [r3, r2]
    9742:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    9744:	4a1c      	ldr	r2, [pc, #112]	; (97b8 <udd_ctrl_fetch_ram+0x88>)
    9746:	589a      	ldr	r2, [r3, r2]
    9748:	7851      	ldrb	r1, [r2, #1]
    974a:	4a1c      	ldr	r2, [pc, #112]	; (97bc <udd_ctrl_fetch_ram+0x8c>)
    974c:	589a      	ldr	r2, [r3, r2]
    974e:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    9750:	4a19      	ldr	r2, [pc, #100]	; (97b8 <udd_ctrl_fetch_ram+0x88>)
    9752:	589a      	ldr	r2, [r3, r2]
    9754:	78d2      	ldrb	r2, [r2, #3]
    9756:	b292      	uxth	r2, r2
    9758:	0212      	lsls	r2, r2, #8
    975a:	b291      	uxth	r1, r2
    975c:	4a16      	ldr	r2, [pc, #88]	; (97b8 <udd_ctrl_fetch_ram+0x88>)
    975e:	589a      	ldr	r2, [r3, r2]
    9760:	7892      	ldrb	r2, [r2, #2]
    9762:	b292      	uxth	r2, r2
    9764:	188a      	adds	r2, r1, r2
    9766:	b291      	uxth	r1, r2
    9768:	4a14      	ldr	r2, [pc, #80]	; (97bc <udd_ctrl_fetch_ram+0x8c>)
    976a:	589a      	ldr	r2, [r3, r2]
    976c:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    976e:	4a12      	ldr	r2, [pc, #72]	; (97b8 <udd_ctrl_fetch_ram+0x88>)
    9770:	589a      	ldr	r2, [r3, r2]
    9772:	7952      	ldrb	r2, [r2, #5]
    9774:	b292      	uxth	r2, r2
    9776:	0212      	lsls	r2, r2, #8
    9778:	b291      	uxth	r1, r2
    977a:	4a0f      	ldr	r2, [pc, #60]	; (97b8 <udd_ctrl_fetch_ram+0x88>)
    977c:	589a      	ldr	r2, [r3, r2]
    977e:	7912      	ldrb	r2, [r2, #4]
    9780:	b292      	uxth	r2, r2
    9782:	188a      	adds	r2, r1, r2
    9784:	b291      	uxth	r1, r2
    9786:	4a0d      	ldr	r2, [pc, #52]	; (97bc <udd_ctrl_fetch_ram+0x8c>)
    9788:	589a      	ldr	r2, [r3, r2]
    978a:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    978c:	4a0a      	ldr	r2, [pc, #40]	; (97b8 <udd_ctrl_fetch_ram+0x88>)
    978e:	589a      	ldr	r2, [r3, r2]
    9790:	79d2      	ldrb	r2, [r2, #7]
    9792:	b292      	uxth	r2, r2
    9794:	0212      	lsls	r2, r2, #8
    9796:	b291      	uxth	r1, r2
    9798:	4a07      	ldr	r2, [pc, #28]	; (97b8 <udd_ctrl_fetch_ram+0x88>)
    979a:	589a      	ldr	r2, [r3, r2]
    979c:	7992      	ldrb	r2, [r2, #6]
    979e:	b292      	uxth	r2, r2
    97a0:	188a      	adds	r2, r1, r2
    97a2:	b291      	uxth	r1, r2
    97a4:	4a05      	ldr	r2, [pc, #20]	; (97bc <udd_ctrl_fetch_ram+0x8c>)
    97a6:	589b      	ldr	r3, [r3, r2]
    97a8:	1c0a      	adds	r2, r1, #0
    97aa:	80da      	strh	r2, [r3, #6]
}
    97ac:	46c0      	nop			; (mov r8, r8)
    97ae:	46bd      	mov	sp, r7
    97b0:	bd80      	pop	{r7, pc}
    97b2:	46c0      	nop			; (mov r8, r8)
    97b4:	0000869a 	.word	0x0000869a
    97b8:	000002b4 	.word	0x000002b4
    97bc:	000001e0 	.word	0x000001e0

000097c0 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    97c0:	b5b0      	push	{r4, r5, r7, lr}
    97c2:	af00      	add	r7, sp, #0
    97c4:	4c0e      	ldr	r4, [pc, #56]	; (9800 <udd_ctrl_send_zlp_in+0x40>)
    97c6:	447c      	add	r4, pc
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    97c8:	4b0e      	ldr	r3, [pc, #56]	; (9804 <udd_ctrl_send_zlp_in+0x44>)
    97ca:	447b      	add	r3, pc
    97cc:	2203      	movs	r2, #3
    97ce:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    97d0:	4b0d      	ldr	r3, [pc, #52]	; (9808 <udd_ctrl_send_zlp_in+0x48>)
    97d2:	58e3      	ldr	r3, [r4, r3]
    97d4:	001a      	movs	r2, r3
    97d6:	4b0d      	ldr	r3, [pc, #52]	; (980c <udd_ctrl_send_zlp_in+0x4c>)
    97d8:	58e3      	ldr	r3, [r4, r3]
    97da:	0011      	movs	r1, r2
    97dc:	0018      	movs	r0, r3
    97de:	4b0c      	ldr	r3, [pc, #48]	; (9810 <udd_ctrl_send_zlp_in+0x50>)
    97e0:	58e3      	ldr	r3, [r4, r3]
    97e2:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    97e4:	4b0b      	ldr	r3, [pc, #44]	; (9814 <udd_ctrl_send_zlp_in+0x54>)
    97e6:	58e3      	ldr	r3, [r4, r3]
    97e8:	689a      	ldr	r2, [r3, #8]
    97ea:	4b08      	ldr	r3, [pc, #32]	; (980c <udd_ctrl_send_zlp_in+0x4c>)
    97ec:	58e3      	ldr	r3, [r4, r3]
    97ee:	0018      	movs	r0, r3
    97f0:	2300      	movs	r3, #0
    97f2:	2100      	movs	r1, #0
    97f4:	4d08      	ldr	r5, [pc, #32]	; (9818 <udd_ctrl_send_zlp_in+0x58>)
    97f6:	5964      	ldr	r4, [r4, r5]
    97f8:	47a0      	blx	r4
}
    97fa:	46c0      	nop			; (mov r8, r8)
    97fc:	46bd      	mov	sp, r7
    97fe:	bdb0      	pop	{r4, r5, r7, pc}
    9800:	0000860a 	.word	0x0000860a
    9804:	1fff6dcc 	.word	0x1fff6dcc
    9808:	000002b4 	.word	0x000002b4
    980c:	00000078 	.word	0x00000078
    9810:	000000c0 	.word	0x000000c0
    9814:	000001e0 	.word	0x000001e0
    9818:	000002f8 	.word	0x000002f8

0000981c <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    981c:	b5b0      	push	{r4, r5, r7, lr}
    981e:	b082      	sub	sp, #8
    9820:	af00      	add	r7, sp, #0
    9822:	4c3e      	ldr	r4, [pc, #248]	; (991c <udd_ctrl_in_sent+0x100>)
    9824:	447c      	add	r4, pc
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    9826:	4b3e      	ldr	r3, [pc, #248]	; (9920 <udd_ctrl_in_sent+0x104>)
    9828:	58e3      	ldr	r3, [r4, r3]
    982a:	8999      	ldrh	r1, [r3, #12]
    982c:	4b3d      	ldr	r3, [pc, #244]	; (9924 <udd_ctrl_in_sent+0x108>)
    982e:	447b      	add	r3, pc
    9830:	881a      	ldrh	r2, [r3, #0]
    9832:	1dbb      	adds	r3, r7, #6
    9834:	1a8a      	subs	r2, r1, r2
    9836:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    9838:	1dbb      	adds	r3, r7, #6
    983a:	881b      	ldrh	r3, [r3, #0]
    983c:	2b00      	cmp	r3, #0
    983e:	d13f      	bne.n	98c0 <udd_ctrl_in_sent+0xa4>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    9840:	4b39      	ldr	r3, [pc, #228]	; (9928 <udd_ctrl_in_sent+0x10c>)
    9842:	447b      	add	r3, pc
    9844:	881a      	ldrh	r2, [r3, #0]
    9846:	4b39      	ldr	r3, [pc, #228]	; (992c <udd_ctrl_in_sent+0x110>)
    9848:	447b      	add	r3, pc
    984a:	881b      	ldrh	r3, [r3, #0]
    984c:	18d3      	adds	r3, r2, r3
    984e:	b29a      	uxth	r2, r3
    9850:	4b37      	ldr	r3, [pc, #220]	; (9930 <udd_ctrl_in_sent+0x114>)
    9852:	447b      	add	r3, pc
    9854:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    9856:	4b32      	ldr	r3, [pc, #200]	; (9920 <udd_ctrl_in_sent+0x104>)
    9858:	58e3      	ldr	r3, [r4, r3]
    985a:	88da      	ldrh	r2, [r3, #6]
    985c:	4b35      	ldr	r3, [pc, #212]	; (9934 <udd_ctrl_in_sent+0x118>)
    985e:	447b      	add	r3, pc
    9860:	881b      	ldrh	r3, [r3, #0]
    9862:	429a      	cmp	r2, r3
    9864:	d004      	beq.n	9870 <udd_ctrl_in_sent+0x54>
    9866:	4b34      	ldr	r3, [pc, #208]	; (9938 <udd_ctrl_in_sent+0x11c>)
    9868:	447b      	add	r3, pc
    986a:	781b      	ldrb	r3, [r3, #0]
    986c:	2b00      	cmp	r3, #0
    986e:	d00e      	beq.n	988e <udd_ctrl_in_sent+0x72>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    9870:	4b32      	ldr	r3, [pc, #200]	; (993c <udd_ctrl_in_sent+0x120>)
    9872:	447b      	add	r3, pc
    9874:	2204      	movs	r2, #4
    9876:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    9878:	4b31      	ldr	r3, [pc, #196]	; (9940 <udd_ctrl_in_sent+0x124>)
    987a:	58e3      	ldr	r3, [r4, r3]
    987c:	001a      	movs	r2, r3
    987e:	4b31      	ldr	r3, [pc, #196]	; (9944 <udd_ctrl_in_sent+0x128>)
    9880:	58e3      	ldr	r3, [r4, r3]
    9882:	0011      	movs	r1, r2
    9884:	0018      	movs	r0, r3
    9886:	4b30      	ldr	r3, [pc, #192]	; (9948 <udd_ctrl_in_sent+0x12c>)
    9888:	58e3      	ldr	r3, [r4, r3]
    988a:	4798      	blx	r3
			return;
    988c:	e043      	b.n	9916 <udd_ctrl_in_sent+0xfa>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    988e:	4b24      	ldr	r3, [pc, #144]	; (9920 <udd_ctrl_in_sent+0x104>)
    9890:	58e3      	ldr	r3, [r4, r3]
    9892:	695b      	ldr	r3, [r3, #20]
    9894:	2b00      	cmp	r3, #0
    9896:	d013      	beq.n	98c0 <udd_ctrl_in_sent+0xa4>
    9898:	4b21      	ldr	r3, [pc, #132]	; (9920 <udd_ctrl_in_sent+0x104>)
    989a:	58e3      	ldr	r3, [r4, r3]
    989c:	695b      	ldr	r3, [r3, #20]
    989e:	4798      	blx	r3
    98a0:	0003      	movs	r3, r0
    98a2:	001a      	movs	r2, r3
    98a4:	2301      	movs	r3, #1
    98a6:	4053      	eors	r3, r2
    98a8:	b2db      	uxtb	r3, r3
    98aa:	2b00      	cmp	r3, #0
    98ac:	d108      	bne.n	98c0 <udd_ctrl_in_sent+0xa4>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    98ae:	4b27      	ldr	r3, [pc, #156]	; (994c <udd_ctrl_in_sent+0x130>)
    98b0:	447b      	add	r3, pc
    98b2:	2200      	movs	r2, #0
    98b4:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    98b6:	1dbb      	adds	r3, r7, #6
    98b8:	4a19      	ldr	r2, [pc, #100]	; (9920 <udd_ctrl_in_sent+0x104>)
    98ba:	58a2      	ldr	r2, [r4, r2]
    98bc:	8992      	ldrh	r2, [r2, #12]
    98be:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    98c0:	1dbb      	adds	r3, r7, #6
    98c2:	881b      	ldrh	r3, [r3, #0]
    98c4:	2b3f      	cmp	r3, #63	; 0x3f
    98c6:	d907      	bls.n	98d8 <udd_ctrl_in_sent+0xbc>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    98c8:	1dbb      	adds	r3, r7, #6
    98ca:	2240      	movs	r2, #64	; 0x40
    98cc:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    98ce:	4b20      	ldr	r3, [pc, #128]	; (9950 <udd_ctrl_in_sent+0x134>)
    98d0:	447b      	add	r3, pc
    98d2:	2200      	movs	r2, #0
    98d4:	701a      	strb	r2, [r3, #0]
    98d6:	e003      	b.n	98e0 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
    98d8:	4b1e      	ldr	r3, [pc, #120]	; (9954 <udd_ctrl_in_sent+0x138>)
    98da:	447b      	add	r3, pc
    98dc:	2201      	movs	r2, #1
    98de:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    98e0:	4b0f      	ldr	r3, [pc, #60]	; (9920 <udd_ctrl_in_sent+0x104>)
    98e2:	58e3      	ldr	r3, [r4, r3]
    98e4:	689b      	ldr	r3, [r3, #8]
    98e6:	4a1c      	ldr	r2, [pc, #112]	; (9958 <udd_ctrl_in_sent+0x13c>)
    98e8:	447a      	add	r2, pc
    98ea:	8812      	ldrh	r2, [r2, #0]
    98ec:	189a      	adds	r2, r3, r2
    98ee:	1dbb      	adds	r3, r7, #6
    98f0:	8819      	ldrh	r1, [r3, #0]
    98f2:	4b14      	ldr	r3, [pc, #80]	; (9944 <udd_ctrl_in_sent+0x128>)
    98f4:	58e3      	ldr	r3, [r4, r3]
    98f6:	0018      	movs	r0, r3
    98f8:	000b      	movs	r3, r1
    98fa:	2100      	movs	r1, #0
    98fc:	4d17      	ldr	r5, [pc, #92]	; (995c <udd_ctrl_in_sent+0x140>)
    98fe:	5964      	ldr	r4, [r4, r5]
    9900:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    9902:	4b17      	ldr	r3, [pc, #92]	; (9960 <udd_ctrl_in_sent+0x144>)
    9904:	447b      	add	r3, pc
    9906:	881a      	ldrh	r2, [r3, #0]
    9908:	1dbb      	adds	r3, r7, #6
    990a:	881b      	ldrh	r3, [r3, #0]
    990c:	18d3      	adds	r3, r2, r3
    990e:	b29a      	uxth	r2, r3
    9910:	4b14      	ldr	r3, [pc, #80]	; (9964 <udd_ctrl_in_sent+0x148>)
    9912:	447b      	add	r3, pc
    9914:	801a      	strh	r2, [r3, #0]
}
    9916:	46bd      	mov	sp, r7
    9918:	b002      	add	sp, #8
    991a:	bdb0      	pop	{r4, r5, r7, pc}
    991c:	000085ac 	.word	0x000085ac
    9920:	000001e0 	.word	0x000001e0
    9924:	1fff6d6c 	.word	0x1fff6d6c
    9928:	1fff6d56 	.word	0x1fff6d56
    992c:	1fff6d52 	.word	0x1fff6d52
    9930:	1fff6d46 	.word	0x1fff6d46
    9934:	1fff6d3a 	.word	0x1fff6d3a
    9938:	1fff6dad 	.word	0x1fff6dad
    993c:	1fff6d24 	.word	0x1fff6d24
    9940:	000002b4 	.word	0x000002b4
    9944:	00000078 	.word	0x00000078
    9948:	000000c0 	.word	0x000000c0
    994c:	1fff6cea 	.word	0x1fff6cea
    9950:	1fff6d45 	.word	0x1fff6d45
    9954:	1fff6d3b 	.word	0x1fff6d3b
    9958:	1fff6cb2 	.word	0x1fff6cb2
    995c:	000002f8 	.word	0x000002f8
    9960:	1fff6c96 	.word	0x1fff6c96
    9964:	1fff6c88 	.word	0x1fff6c88

00009968 <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    9968:	b5b0      	push	{r4, r5, r7, lr}
    996a:	b084      	sub	sp, #16
    996c:	af00      	add	r7, sp, #0
    996e:	6078      	str	r0, [r7, #4]
    9970:	4c5c      	ldr	r4, [pc, #368]	; (9ae4 <udd_ctrl_out_received+0x17c>)
    9972:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    9974:	687b      	ldr	r3, [r7, #4]
    9976:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    9978:	230e      	movs	r3, #14
    997a:	18fb      	adds	r3, r7, r3
    997c:	68ba      	ldr	r2, [r7, #8]
    997e:	8812      	ldrh	r2, [r2, #0]
    9980:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    9982:	4b59      	ldr	r3, [pc, #356]	; (9ae8 <udd_ctrl_out_received+0x180>)
    9984:	58e3      	ldr	r3, [r4, r3]
    9986:	899b      	ldrh	r3, [r3, #12]
    9988:	001a      	movs	r2, r3
    998a:	4b58      	ldr	r3, [pc, #352]	; (9aec <udd_ctrl_out_received+0x184>)
    998c:	447b      	add	r3, pc
    998e:	881b      	ldrh	r3, [r3, #0]
    9990:	0019      	movs	r1, r3
    9992:	230e      	movs	r3, #14
    9994:	18fb      	adds	r3, r7, r3
    9996:	881b      	ldrh	r3, [r3, #0]
    9998:	18cb      	adds	r3, r1, r3
    999a:	429a      	cmp	r2, r3
    999c:	da09      	bge.n	99b2 <udd_ctrl_out_received+0x4a>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    999e:	4b52      	ldr	r3, [pc, #328]	; (9ae8 <udd_ctrl_out_received+0x180>)
    99a0:	58e3      	ldr	r3, [r4, r3]
    99a2:	8999      	ldrh	r1, [r3, #12]
    99a4:	4b52      	ldr	r3, [pc, #328]	; (9af0 <udd_ctrl_out_received+0x188>)
    99a6:	447b      	add	r3, pc
    99a8:	881a      	ldrh	r2, [r3, #0]
    99aa:	230e      	movs	r3, #14
    99ac:	18fb      	adds	r3, r7, r3
    99ae:	1a8a      	subs	r2, r1, r2
    99b0:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    99b2:	4b4d      	ldr	r3, [pc, #308]	; (9ae8 <udd_ctrl_out_received+0x180>)
    99b4:	58e3      	ldr	r3, [r4, r3]
    99b6:	689b      	ldr	r3, [r3, #8]
    99b8:	4a4e      	ldr	r2, [pc, #312]	; (9af4 <udd_ctrl_out_received+0x18c>)
    99ba:	447a      	add	r2, pc
    99bc:	8812      	ldrh	r2, [r2, #0]
    99be:	1898      	adds	r0, r3, r2
    99c0:	230e      	movs	r3, #14
    99c2:	18fb      	adds	r3, r7, r3
    99c4:	881a      	ldrh	r2, [r3, #0]
    99c6:	4b4c      	ldr	r3, [pc, #304]	; (9af8 <udd_ctrl_out_received+0x190>)
    99c8:	58e3      	ldr	r3, [r4, r3]
    99ca:	0019      	movs	r1, r3
    99cc:	4b4b      	ldr	r3, [pc, #300]	; (9afc <udd_ctrl_out_received+0x194>)
    99ce:	58e3      	ldr	r3, [r4, r3]
    99d0:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    99d2:	4b4b      	ldr	r3, [pc, #300]	; (9b00 <udd_ctrl_out_received+0x198>)
    99d4:	447b      	add	r3, pc
    99d6:	881a      	ldrh	r2, [r3, #0]
    99d8:	230e      	movs	r3, #14
    99da:	18fb      	adds	r3, r7, r3
    99dc:	881b      	ldrh	r3, [r3, #0]
    99de:	18d3      	adds	r3, r2, r3
    99e0:	b29a      	uxth	r2, r3
    99e2:	4b48      	ldr	r3, [pc, #288]	; (9b04 <udd_ctrl_out_received+0x19c>)
    99e4:	447b      	add	r3, pc
    99e6:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    99e8:	230e      	movs	r3, #14
    99ea:	18fb      	adds	r3, r7, r3
    99ec:	881b      	ldrh	r3, [r3, #0]
    99ee:	2b40      	cmp	r3, #64	; 0x40
    99f0:	d10d      	bne.n	9a0e <udd_ctrl_out_received+0xa6>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    99f2:	4b3d      	ldr	r3, [pc, #244]	; (9ae8 <udd_ctrl_out_received+0x180>)
    99f4:	58e3      	ldr	r3, [r4, r3]
    99f6:	88db      	ldrh	r3, [r3, #6]
    99f8:	001a      	movs	r2, r3
    99fa:	4b43      	ldr	r3, [pc, #268]	; (9b08 <udd_ctrl_out_received+0x1a0>)
    99fc:	447b      	add	r3, pc
    99fe:	881b      	ldrh	r3, [r3, #0]
    9a00:	0019      	movs	r1, r3
    9a02:	4b42      	ldr	r3, [pc, #264]	; (9b0c <udd_ctrl_out_received+0x1a4>)
    9a04:	447b      	add	r3, pc
    9a06:	881b      	ldrh	r3, [r3, #0]
    9a08:	18cb      	adds	r3, r1, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    9a0a:	429a      	cmp	r2, r3
    9a0c:	dc22      	bgt.n	9a54 <udd_ctrl_out_received+0xec>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    9a0e:	4b40      	ldr	r3, [pc, #256]	; (9b10 <udd_ctrl_out_received+0x1a8>)
    9a10:	447b      	add	r3, pc
    9a12:	881a      	ldrh	r2, [r3, #0]
    9a14:	4b34      	ldr	r3, [pc, #208]	; (9ae8 <udd_ctrl_out_received+0x180>)
    9a16:	58e3      	ldr	r3, [r4, r3]
    9a18:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    9a1a:	4b33      	ldr	r3, [pc, #204]	; (9ae8 <udd_ctrl_out_received+0x180>)
    9a1c:	58e3      	ldr	r3, [r4, r3]
    9a1e:	695b      	ldr	r3, [r3, #20]
    9a20:	2b00      	cmp	r3, #0
    9a22:	d013      	beq.n	9a4c <udd_ctrl_out_received+0xe4>
			if (!udd_g_ctrlreq.over_under_run()) {
    9a24:	4b30      	ldr	r3, [pc, #192]	; (9ae8 <udd_ctrl_out_received+0x180>)
    9a26:	58e3      	ldr	r3, [r4, r3]
    9a28:	695b      	ldr	r3, [r3, #20]
    9a2a:	4798      	blx	r3
    9a2c:	0003      	movs	r3, r0
    9a2e:	001a      	movs	r2, r3
    9a30:	2301      	movs	r3, #1
    9a32:	4053      	eors	r3, r2
    9a34:	b2db      	uxtb	r3, r3
    9a36:	2b00      	cmp	r3, #0
    9a38:	d008      	beq.n	9a4c <udd_ctrl_out_received+0xe4>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    9a3a:	4b36      	ldr	r3, [pc, #216]	; (9b14 <udd_ctrl_out_received+0x1ac>)
    9a3c:	447b      	add	r3, pc
    9a3e:	2205      	movs	r2, #5
    9a40:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    9a42:	2000      	movs	r0, #0
    9a44:	4b34      	ldr	r3, [pc, #208]	; (9b18 <udd_ctrl_out_received+0x1b0>)
    9a46:	58e3      	ldr	r3, [r4, r3]
    9a48:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    9a4a:	e047      	b.n	9adc <udd_ctrl_out_received+0x174>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    9a4c:	4b33      	ldr	r3, [pc, #204]	; (9b1c <udd_ctrl_out_received+0x1b4>)
    9a4e:	447b      	add	r3, pc
    9a50:	4798      	blx	r3
		return;
    9a52:	e043      	b.n	9adc <udd_ctrl_out_received+0x174>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    9a54:	4b24      	ldr	r3, [pc, #144]	; (9ae8 <udd_ctrl_out_received+0x180>)
    9a56:	58e3      	ldr	r3, [r4, r3]
    9a58:	899a      	ldrh	r2, [r3, #12]
    9a5a:	4b31      	ldr	r3, [pc, #196]	; (9b20 <udd_ctrl_out_received+0x1b8>)
    9a5c:	447b      	add	r3, pc
    9a5e:	881b      	ldrh	r3, [r3, #0]
    9a60:	429a      	cmp	r2, r3
    9a62:	d130      	bne.n	9ac6 <udd_ctrl_out_received+0x15e>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    9a64:	4b20      	ldr	r3, [pc, #128]	; (9ae8 <udd_ctrl_out_received+0x180>)
    9a66:	58e3      	ldr	r3, [r4, r3]
    9a68:	695b      	ldr	r3, [r3, #20]
    9a6a:	2b00      	cmp	r3, #0
    9a6c:	d108      	bne.n	9a80 <udd_ctrl_out_received+0x118>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    9a6e:	4b2d      	ldr	r3, [pc, #180]	; (9b24 <udd_ctrl_out_received+0x1bc>)
    9a70:	447b      	add	r3, pc
    9a72:	2205      	movs	r2, #5
    9a74:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    9a76:	2000      	movs	r0, #0
    9a78:	4b27      	ldr	r3, [pc, #156]	; (9b18 <udd_ctrl_out_received+0x1b0>)
    9a7a:	58e3      	ldr	r3, [r4, r3]
    9a7c:	4798      	blx	r3
			return;
    9a7e:	e02d      	b.n	9adc <udd_ctrl_out_received+0x174>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    9a80:	4b19      	ldr	r3, [pc, #100]	; (9ae8 <udd_ctrl_out_received+0x180>)
    9a82:	58e3      	ldr	r3, [r4, r3]
    9a84:	695b      	ldr	r3, [r3, #20]
    9a86:	4798      	blx	r3
    9a88:	0003      	movs	r3, r0
    9a8a:	001a      	movs	r2, r3
    9a8c:	2301      	movs	r3, #1
    9a8e:	4053      	eors	r3, r2
    9a90:	b2db      	uxtb	r3, r3
    9a92:	2b00      	cmp	r3, #0
    9a94:	d008      	beq.n	9aa8 <udd_ctrl_out_received+0x140>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    9a96:	4b24      	ldr	r3, [pc, #144]	; (9b28 <udd_ctrl_out_received+0x1c0>)
    9a98:	447b      	add	r3, pc
    9a9a:	2205      	movs	r2, #5
    9a9c:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    9a9e:	2000      	movs	r0, #0
    9aa0:	4b1d      	ldr	r3, [pc, #116]	; (9b18 <udd_ctrl_out_received+0x1b0>)
    9aa2:	58e3      	ldr	r3, [r4, r3]
    9aa4:	4798      	blx	r3
			return;
    9aa6:	e019      	b.n	9adc <udd_ctrl_out_received+0x174>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    9aa8:	4b20      	ldr	r3, [pc, #128]	; (9b2c <udd_ctrl_out_received+0x1c4>)
    9aaa:	447b      	add	r3, pc
    9aac:	881a      	ldrh	r2, [r3, #0]
    9aae:	4b20      	ldr	r3, [pc, #128]	; (9b30 <udd_ctrl_out_received+0x1c8>)
    9ab0:	447b      	add	r3, pc
    9ab2:	881b      	ldrh	r3, [r3, #0]
    9ab4:	18d3      	adds	r3, r2, r3
    9ab6:	b29a      	uxth	r2, r3
    9ab8:	4b1e      	ldr	r3, [pc, #120]	; (9b34 <udd_ctrl_out_received+0x1cc>)
    9aba:	447b      	add	r3, pc
    9abc:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    9abe:	4b1e      	ldr	r3, [pc, #120]	; (9b38 <udd_ctrl_out_received+0x1d0>)
    9ac0:	447b      	add	r3, pc
    9ac2:	2200      	movs	r2, #0
    9ac4:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    9ac6:	4b0c      	ldr	r3, [pc, #48]	; (9af8 <udd_ctrl_out_received+0x190>)
    9ac8:	58e3      	ldr	r3, [r4, r3]
    9aca:	001a      	movs	r2, r3
    9acc:	4b1b      	ldr	r3, [pc, #108]	; (9b3c <udd_ctrl_out_received+0x1d4>)
    9ace:	58e3      	ldr	r3, [r4, r3]
    9ad0:	0018      	movs	r0, r3
    9ad2:	2340      	movs	r3, #64	; 0x40
    9ad4:	2100      	movs	r1, #0
    9ad6:	4d1a      	ldr	r5, [pc, #104]	; (9b40 <udd_ctrl_out_received+0x1d8>)
    9ad8:	5964      	ldr	r4, [r4, r5]
    9ada:	47a0      	blx	r4
}
    9adc:	46bd      	mov	sp, r7
    9ade:	b004      	add	sp, #16
    9ae0:	bdb0      	pop	{r4, r5, r7, pc}
    9ae2:	46c0      	nop			; (mov r8, r8)
    9ae4:	0000845e 	.word	0x0000845e
    9ae8:	000001e0 	.word	0x000001e0
    9aec:	1fff6c0e 	.word	0x1fff6c0e
    9af0:	1fff6bf4 	.word	0x1fff6bf4
    9af4:	1fff6be0 	.word	0x1fff6be0
    9af8:	000002b4 	.word	0x000002b4
    9afc:	0000008c 	.word	0x0000008c
    9b00:	1fff6bc6 	.word	0x1fff6bc6
    9b04:	1fff6bb6 	.word	0x1fff6bb6
    9b08:	1fff6b9c 	.word	0x1fff6b9c
    9b0c:	1fff6b96 	.word	0x1fff6b96
    9b10:	1fff6b8a 	.word	0x1fff6b8a
    9b14:	1fff6b5a 	.word	0x1fff6b5a
    9b18:	00000128 	.word	0x00000128
    9b1c:	fffffd6f 	.word	0xfffffd6f
    9b20:	1fff6b3e 	.word	0x1fff6b3e
    9b24:	1fff6b26 	.word	0x1fff6b26
    9b28:	1fff6afe 	.word	0x1fff6afe
    9b2c:	1fff6aee 	.word	0x1fff6aee
    9b30:	1fff6aea 	.word	0x1fff6aea
    9b34:	1fff6ade 	.word	0x1fff6ade
    9b38:	1fff6ada 	.word	0x1fff6ada
    9b3c:	00000078 	.word	0x00000078
    9b40:	0000014c 	.word	0x0000014c

00009b44 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    9b44:	b5b0      	push	{r4, r5, r7, lr}
    9b46:	b084      	sub	sp, #16
    9b48:	af00      	add	r7, sp, #0
    9b4a:	6078      	str	r0, [r7, #4]
    9b4c:	6039      	str	r1, [r7, #0]
    9b4e:	4c39      	ldr	r4, [pc, #228]	; (9c34 <_usb_ep0_on_setup+0xf0>)
    9b50:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    9b52:	683b      	ldr	r3, [r7, #0]
    9b54:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    9b56:	4b38      	ldr	r3, [pc, #224]	; (9c38 <_usb_ep0_on_setup+0xf4>)
    9b58:	447b      	add	r3, pc
    9b5a:	781b      	ldrb	r3, [r3, #0]
    9b5c:	2b00      	cmp	r3, #0
    9b5e:	d00c      	beq.n	9b7a <_usb_ep0_on_setup+0x36>
		if (NULL != udd_g_ctrlreq.callback) {
    9b60:	4b36      	ldr	r3, [pc, #216]	; (9c3c <_usb_ep0_on_setup+0xf8>)
    9b62:	58e3      	ldr	r3, [r4, r3]
    9b64:	691b      	ldr	r3, [r3, #16]
    9b66:	2b00      	cmp	r3, #0
    9b68:	d003      	beq.n	9b72 <_usb_ep0_on_setup+0x2e>
			udd_g_ctrlreq.callback();
    9b6a:	4b34      	ldr	r3, [pc, #208]	; (9c3c <_usb_ep0_on_setup+0xf8>)
    9b6c:	58e3      	ldr	r3, [r4, r3]
    9b6e:	691b      	ldr	r3, [r3, #16]
    9b70:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    9b72:	4b33      	ldr	r3, [pc, #204]	; (9c40 <_usb_ep0_on_setup+0xfc>)
    9b74:	447b      	add	r3, pc
    9b76:	2200      	movs	r2, #0
    9b78:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    9b7a:	68fb      	ldr	r3, [r7, #12]
    9b7c:	881b      	ldrh	r3, [r3, #0]
    9b7e:	2b08      	cmp	r3, #8
    9b80:	d003      	beq.n	9b8a <_usb_ep0_on_setup+0x46>
		udd_ctrl_stall_data();
    9b82:	4b30      	ldr	r3, [pc, #192]	; (9c44 <_usb_ep0_on_setup+0x100>)
    9b84:	447b      	add	r3, pc
    9b86:	4798      	blx	r3
		return;
    9b88:	e051      	b.n	9c2e <_usb_ep0_on_setup+0xea>
	} else {
		udd_ctrl_fetch_ram();
    9b8a:	4b2f      	ldr	r3, [pc, #188]	; (9c48 <_usb_ep0_on_setup+0x104>)
    9b8c:	447b      	add	r3, pc
    9b8e:	4798      	blx	r3
		if (false == udc_process_setup()) {
    9b90:	4b2e      	ldr	r3, [pc, #184]	; (9c4c <_usb_ep0_on_setup+0x108>)
    9b92:	58e3      	ldr	r3, [r4, r3]
    9b94:	4798      	blx	r3
    9b96:	0003      	movs	r3, r0
    9b98:	001a      	movs	r2, r3
    9b9a:	2301      	movs	r3, #1
    9b9c:	4053      	eors	r3, r2
    9b9e:	b2db      	uxtb	r3, r3
    9ba0:	2b00      	cmp	r3, #0
    9ba2:	d003      	beq.n	9bac <_usb_ep0_on_setup+0x68>
			udd_ctrl_stall_data();
    9ba4:	4b2a      	ldr	r3, [pc, #168]	; (9c50 <_usb_ep0_on_setup+0x10c>)
    9ba6:	447b      	add	r3, pc
    9ba8:	4798      	blx	r3
			return;
    9baa:	e040      	b.n	9c2e <_usb_ep0_on_setup+0xea>
		} else if (Udd_setup_is_in()) {
    9bac:	4b23      	ldr	r3, [pc, #140]	; (9c3c <_usb_ep0_on_setup+0xf8>)
    9bae:	58e3      	ldr	r3, [r4, r3]
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	b25b      	sxtb	r3, r3
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	da1a      	bge.n	9bee <_usb_ep0_on_setup+0xaa>
			udd_ctrl_prev_payload_nb_trans = 0;
    9bb8:	4b26      	ldr	r3, [pc, #152]	; (9c54 <_usb_ep0_on_setup+0x110>)
    9bba:	447b      	add	r3, pc
    9bbc:	2200      	movs	r2, #0
    9bbe:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    9bc0:	4b25      	ldr	r3, [pc, #148]	; (9c58 <_usb_ep0_on_setup+0x114>)
    9bc2:	447b      	add	r3, pc
    9bc4:	2200      	movs	r2, #0
    9bc6:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    9bc8:	4b24      	ldr	r3, [pc, #144]	; (9c5c <_usb_ep0_on_setup+0x118>)
    9bca:	447b      	add	r3, pc
    9bcc:	2202      	movs	r2, #2
    9bce:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    9bd0:	4b23      	ldr	r3, [pc, #140]	; (9c60 <_usb_ep0_on_setup+0x11c>)
    9bd2:	58e3      	ldr	r3, [r4, r3]
    9bd4:	001a      	movs	r2, r3
    9bd6:	4b23      	ldr	r3, [pc, #140]	; (9c64 <_usb_ep0_on_setup+0x120>)
    9bd8:	58e3      	ldr	r3, [r4, r3]
    9bda:	0018      	movs	r0, r3
    9bdc:	2340      	movs	r3, #64	; 0x40
    9bde:	2100      	movs	r1, #0
    9be0:	4d21      	ldr	r5, [pc, #132]	; (9c68 <_usb_ep0_on_setup+0x124>)
    9be2:	5964      	ldr	r4, [r4, r5]
    9be4:	47a0      	blx	r4
			udd_ctrl_in_sent();
    9be6:	4b21      	ldr	r3, [pc, #132]	; (9c6c <_usb_ep0_on_setup+0x128>)
    9be8:	447b      	add	r3, pc
    9bea:	4798      	blx	r3
    9bec:	e01f      	b.n	9c2e <_usb_ep0_on_setup+0xea>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    9bee:	4b13      	ldr	r3, [pc, #76]	; (9c3c <_usb_ep0_on_setup+0xf8>)
    9bf0:	58e3      	ldr	r3, [r4, r3]
    9bf2:	88db      	ldrh	r3, [r3, #6]
    9bf4:	2b00      	cmp	r3, #0
    9bf6:	d103      	bne.n	9c00 <_usb_ep0_on_setup+0xbc>
				udd_ctrl_send_zlp_in();
    9bf8:	4b1d      	ldr	r3, [pc, #116]	; (9c70 <_usb_ep0_on_setup+0x12c>)
    9bfa:	447b      	add	r3, pc
    9bfc:	4798      	blx	r3
				return;
    9bfe:	e016      	b.n	9c2e <_usb_ep0_on_setup+0xea>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    9c00:	4b1c      	ldr	r3, [pc, #112]	; (9c74 <_usb_ep0_on_setup+0x130>)
    9c02:	447b      	add	r3, pc
    9c04:	2200      	movs	r2, #0
    9c06:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    9c08:	4b1b      	ldr	r3, [pc, #108]	; (9c78 <_usb_ep0_on_setup+0x134>)
    9c0a:	447b      	add	r3, pc
    9c0c:	2200      	movs	r2, #0
    9c0e:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    9c10:	4b1a      	ldr	r3, [pc, #104]	; (9c7c <_usb_ep0_on_setup+0x138>)
    9c12:	447b      	add	r3, pc
    9c14:	2201      	movs	r2, #1
    9c16:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    9c18:	4b11      	ldr	r3, [pc, #68]	; (9c60 <_usb_ep0_on_setup+0x11c>)
    9c1a:	58e3      	ldr	r3, [r4, r3]
    9c1c:	001a      	movs	r2, r3
    9c1e:	4b11      	ldr	r3, [pc, #68]	; (9c64 <_usb_ep0_on_setup+0x120>)
    9c20:	58e3      	ldr	r3, [r4, r3]
    9c22:	0018      	movs	r0, r3
    9c24:	2340      	movs	r3, #64	; 0x40
    9c26:	2100      	movs	r1, #0
    9c28:	4d0f      	ldr	r5, [pc, #60]	; (9c68 <_usb_ep0_on_setup+0x124>)
    9c2a:	5964      	ldr	r4, [r4, r5]
    9c2c:	47a0      	blx	r4
			}
		}
	}
}
    9c2e:	46bd      	mov	sp, r7
    9c30:	b004      	add	sp, #16
    9c32:	bdb0      	pop	{r4, r5, r7, pc}
    9c34:	00008280 	.word	0x00008280
    9c38:	1fff6a3e 	.word	0x1fff6a3e
    9c3c:	000001e0 	.word	0x000001e0
    9c40:	1fff6a22 	.word	0x1fff6a22
    9c44:	fffff7b5 	.word	0xfffff7b5
    9c48:	fffffba1 	.word	0xfffffba1
    9c4c:	00000140 	.word	0x00000140
    9c50:	fffff793 	.word	0xfffff793
    9c54:	1fff69de 	.word	0x1fff69de
    9c58:	1fff69d8 	.word	0x1fff69d8
    9c5c:	1fff69cc 	.word	0x1fff69cc
    9c60:	000002b4 	.word	0x000002b4
    9c64:	00000078 	.word	0x00000078
    9c68:	0000014c 	.word	0x0000014c
    9c6c:	fffffc31 	.word	0xfffffc31
    9c70:	fffffbc3 	.word	0xfffffbc3
    9c74:	1fff6996 	.word	0x1fff6996
    9c78:	1fff6990 	.word	0x1fff6990
    9c7c:	1fff6984 	.word	0x1fff6984

00009c80 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    9c80:	b580      	push	{r7, lr}
    9c82:	b084      	sub	sp, #16
    9c84:	af00      	add	r7, sp, #0
    9c86:	6078      	str	r0, [r7, #4]
    9c88:	4b0e      	ldr	r3, [pc, #56]	; (9cc4 <udd_ctrl_underflow+0x44>)
    9c8a:	447b      	add	r3, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    9c8c:	687a      	ldr	r2, [r7, #4]
    9c8e:	60fa      	str	r2, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    9c90:	4a0d      	ldr	r2, [pc, #52]	; (9cc8 <udd_ctrl_underflow+0x48>)
    9c92:	447a      	add	r2, pc
    9c94:	7812      	ldrb	r2, [r2, #0]
    9c96:	2a01      	cmp	r2, #1
    9c98:	d103      	bne.n	9ca2 <udd_ctrl_underflow+0x22>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    9c9a:	4b0c      	ldr	r3, [pc, #48]	; (9ccc <udd_ctrl_underflow+0x4c>)
    9c9c:	447b      	add	r3, pc
    9c9e:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    9ca0:	e00c      	b.n	9cbc <udd_ctrl_underflow+0x3c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    9ca2:	4a0b      	ldr	r2, [pc, #44]	; (9cd0 <udd_ctrl_underflow+0x50>)
    9ca4:	447a      	add	r2, pc
    9ca6:	7812      	ldrb	r2, [r2, #0]
    9ca8:	2a04      	cmp	r2, #4
    9caa:	d107      	bne.n	9cbc <udd_ctrl_underflow+0x3c>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    9cac:	68fa      	ldr	r2, [r7, #12]
    9cae:	7991      	ldrb	r1, [r2, #6]
    9cb0:	4a08      	ldr	r2, [pc, #32]	; (9cd4 <udd_ctrl_underflow+0x54>)
    9cb2:	589a      	ldr	r2, [r3, r2]
    9cb4:	0010      	movs	r0, r2
    9cb6:	4a08      	ldr	r2, [pc, #32]	; (9cd8 <udd_ctrl_underflow+0x58>)
    9cb8:	589b      	ldr	r3, [r3, r2]
    9cba:	4798      	blx	r3
}
    9cbc:	46c0      	nop			; (mov r8, r8)
    9cbe:	46bd      	mov	sp, r7
    9cc0:	b004      	add	sp, #16
    9cc2:	bd80      	pop	{r7, pc}
    9cc4:	00008146 	.word	0x00008146
    9cc8:	1fff6904 	.word	0x1fff6904
    9ccc:	fffffb21 	.word	0xfffffb21
    9cd0:	1fff68f2 	.word	0x1fff68f2
    9cd4:	00000078 	.word	0x00000078
    9cd8:	0000026c 	.word	0x0000026c

00009cdc <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    9cdc:	b580      	push	{r7, lr}
    9cde:	b084      	sub	sp, #16
    9ce0:	af00      	add	r7, sp, #0
    9ce2:	6078      	str	r0, [r7, #4]
    9ce4:	4b0f      	ldr	r3, [pc, #60]	; (9d24 <udd_ctrl_overflow+0x48>)
    9ce6:	447b      	add	r3, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    9ce8:	687a      	ldr	r2, [r7, #4]
    9cea:	60fa      	str	r2, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    9cec:	4a0e      	ldr	r2, [pc, #56]	; (9d28 <udd_ctrl_overflow+0x4c>)
    9cee:	447a      	add	r2, pc
    9cf0:	7812      	ldrb	r2, [r2, #0]
    9cf2:	2a02      	cmp	r2, #2
    9cf4:	d104      	bne.n	9d00 <udd_ctrl_overflow+0x24>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    9cf6:	4b0d      	ldr	r3, [pc, #52]	; (9d2c <udd_ctrl_overflow+0x50>)
    9cf8:	447b      	add	r3, pc
    9cfa:	2204      	movs	r2, #4
    9cfc:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    9cfe:	e00c      	b.n	9d1a <udd_ctrl_overflow+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    9d00:	4a0b      	ldr	r2, [pc, #44]	; (9d30 <udd_ctrl_overflow+0x54>)
    9d02:	447a      	add	r2, pc
    9d04:	7812      	ldrb	r2, [r2, #0]
    9d06:	2a03      	cmp	r2, #3
    9d08:	d107      	bne.n	9d1a <udd_ctrl_overflow+0x3e>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    9d0a:	68fa      	ldr	r2, [r7, #12]
    9d0c:	7991      	ldrb	r1, [r2, #6]
    9d0e:	4a09      	ldr	r2, [pc, #36]	; (9d34 <udd_ctrl_overflow+0x58>)
    9d10:	589a      	ldr	r2, [r3, r2]
    9d12:	0010      	movs	r0, r2
    9d14:	4a08      	ldr	r2, [pc, #32]	; (9d38 <udd_ctrl_overflow+0x5c>)
    9d16:	589b      	ldr	r3, [r3, r2]
    9d18:	4798      	blx	r3
}
    9d1a:	46c0      	nop			; (mov r8, r8)
    9d1c:	46bd      	mov	sp, r7
    9d1e:	b004      	add	sp, #16
    9d20:	bd80      	pop	{r7, pc}
    9d22:	46c0      	nop			; (mov r8, r8)
    9d24:	000080ea 	.word	0x000080ea
    9d28:	1fff68a8 	.word	0x1fff68a8
    9d2c:	1fff689e 	.word	0x1fff689e
    9d30:	1fff6894 	.word	0x1fff6894
    9d34:	00000078 	.word	0x00000078
    9d38:	0000026c 	.word	0x0000026c

00009d3c <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    9d3c:	b580      	push	{r7, lr}
    9d3e:	b084      	sub	sp, #16
    9d40:	af00      	add	r7, sp, #0
    9d42:	6078      	str	r0, [r7, #4]
    9d44:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    9d46:	683b      	ldr	r3, [r7, #0]
    9d48:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    9d4a:	68fb      	ldr	r3, [r7, #12]
    9d4c:	799b      	ldrb	r3, [r3, #6]
    9d4e:	b25b      	sxtb	r3, r3
    9d50:	2b00      	cmp	r3, #0
    9d52:	da05      	bge.n	9d60 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    9d54:	683b      	ldr	r3, [r7, #0]
    9d56:	0018      	movs	r0, r3
    9d58:	4b06      	ldr	r3, [pc, #24]	; (9d74 <_usb_ep0_on_tansfer_fail+0x38>)
    9d5a:	447b      	add	r3, pc
    9d5c:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    9d5e:	e004      	b.n	9d6a <_usb_ep0_on_tansfer_fail+0x2e>
		udd_ctrl_overflow(pointer);
    9d60:	683b      	ldr	r3, [r7, #0]
    9d62:	0018      	movs	r0, r3
    9d64:	4b04      	ldr	r3, [pc, #16]	; (9d78 <_usb_ep0_on_tansfer_fail+0x3c>)
    9d66:	447b      	add	r3, pc
    9d68:	4798      	blx	r3
}
    9d6a:	46c0      	nop			; (mov r8, r8)
    9d6c:	46bd      	mov	sp, r7
    9d6e:	b004      	add	sp, #16
    9d70:	bd80      	pop	{r7, pc}
    9d72:	46c0      	nop			; (mov r8, r8)
    9d74:	ffffff23 	.word	0xffffff23
    9d78:	ffffff73 	.word	0xffffff73

00009d7c <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    9d7c:	b580      	push	{r7, lr}
    9d7e:	b082      	sub	sp, #8
    9d80:	af00      	add	r7, sp, #0
    9d82:	6078      	str	r0, [r7, #4]
    9d84:	6039      	str	r1, [r7, #0]
    9d86:	4b13      	ldr	r3, [pc, #76]	; (9dd4 <_usb_ep0_on_tansfer_ok+0x58>)
    9d88:	447b      	add	r3, pc
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    9d8a:	4a13      	ldr	r2, [pc, #76]	; (9dd8 <_usb_ep0_on_tansfer_ok+0x5c>)
    9d8c:	447a      	add	r2, pc
    9d8e:	7812      	ldrb	r2, [r2, #0]
    9d90:	2a01      	cmp	r2, #1
    9d92:	d105      	bne.n	9da0 <_usb_ep0_on_tansfer_ok+0x24>
			udd_ctrl_out_received(pointer);
    9d94:	683b      	ldr	r3, [r7, #0]
    9d96:	0018      	movs	r0, r3
    9d98:	4b10      	ldr	r3, [pc, #64]	; (9ddc <_usb_ep0_on_tansfer_ok+0x60>)
    9d9a:	447b      	add	r3, pc
    9d9c:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    9d9e:	e015      	b.n	9dcc <_usb_ep0_on_tansfer_ok+0x50>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    9da0:	4a0f      	ldr	r2, [pc, #60]	; (9de0 <_usb_ep0_on_tansfer_ok+0x64>)
    9da2:	447a      	add	r2, pc
    9da4:	7812      	ldrb	r2, [r2, #0]
    9da6:	2a02      	cmp	r2, #2
    9da8:	d103      	bne.n	9db2 <_usb_ep0_on_tansfer_ok+0x36>
			udd_ctrl_in_sent();
    9daa:	4b0e      	ldr	r3, [pc, #56]	; (9de4 <_usb_ep0_on_tansfer_ok+0x68>)
    9dac:	447b      	add	r3, pc
    9dae:	4798      	blx	r3
}
    9db0:	e00c      	b.n	9dcc <_usb_ep0_on_tansfer_ok+0x50>
			if (NULL != udd_g_ctrlreq.callback) {
    9db2:	4a0d      	ldr	r2, [pc, #52]	; (9de8 <_usb_ep0_on_tansfer_ok+0x6c>)
    9db4:	589a      	ldr	r2, [r3, r2]
    9db6:	6912      	ldr	r2, [r2, #16]
    9db8:	2a00      	cmp	r2, #0
    9dba:	d003      	beq.n	9dc4 <_usb_ep0_on_tansfer_ok+0x48>
				udd_g_ctrlreq.callback();
    9dbc:	4a0a      	ldr	r2, [pc, #40]	; (9de8 <_usb_ep0_on_tansfer_ok+0x6c>)
    9dbe:	589b      	ldr	r3, [r3, r2]
    9dc0:	691b      	ldr	r3, [r3, #16]
    9dc2:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    9dc4:	4b09      	ldr	r3, [pc, #36]	; (9dec <_usb_ep0_on_tansfer_ok+0x70>)
    9dc6:	447b      	add	r3, pc
    9dc8:	2200      	movs	r2, #0
    9dca:	701a      	strb	r2, [r3, #0]
}
    9dcc:	46c0      	nop			; (mov r8, r8)
    9dce:	46bd      	mov	sp, r7
    9dd0:	b002      	add	sp, #8
    9dd2:	bd80      	pop	{r7, pc}
    9dd4:	00008048 	.word	0x00008048
    9dd8:	1fff680a 	.word	0x1fff680a
    9ddc:	fffffbcb 	.word	0xfffffbcb
    9de0:	1fff67f4 	.word	0x1fff67f4
    9de4:	fffffa6d 	.word	0xfffffa6d
    9de8:	000001e0 	.word	0x000001e0
    9dec:	1fff67d0 	.word	0x1fff67d0

00009df0 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    9df0:	b5b0      	push	{r4, r5, r7, lr}
    9df2:	b084      	sub	sp, #16
    9df4:	af00      	add	r7, sp, #0
    9df6:	6078      	str	r0, [r7, #4]
    9df8:	4c2b      	ldr	r4, [pc, #172]	; (9ea8 <udd_ctrl_ep_enable+0xb8>)
    9dfa:	447c      	add	r4, pc
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    9dfc:	230c      	movs	r3, #12
    9dfe:	18fb      	adds	r3, r7, r3
    9e00:	0018      	movs	r0, r3
    9e02:	4b2a      	ldr	r3, [pc, #168]	; (9eac <udd_ctrl_ep_enable+0xbc>)
    9e04:	58e3      	ldr	r3, [r4, r3]
    9e06:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    9e08:	230c      	movs	r3, #12
    9e0a:	18fb      	adds	r3, r7, r3
    9e0c:	2203      	movs	r2, #3
    9e0e:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    9e10:	230c      	movs	r3, #12
    9e12:	18fa      	adds	r2, r7, r3
    9e14:	687b      	ldr	r3, [r7, #4]
    9e16:	0011      	movs	r1, r2
    9e18:	0018      	movs	r0, r3
    9e1a:	4b25      	ldr	r3, [pc, #148]	; (9eb0 <udd_ctrl_ep_enable+0xc0>)
    9e1c:	58e3      	ldr	r3, [r4, r3]
    9e1e:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    9e20:	4b24      	ldr	r3, [pc, #144]	; (9eb4 <udd_ctrl_ep_enable+0xc4>)
    9e22:	58e3      	ldr	r3, [r4, r3]
    9e24:	001a      	movs	r2, r3
    9e26:	687b      	ldr	r3, [r7, #4]
    9e28:	0011      	movs	r1, r2
    9e2a:	0018      	movs	r0, r3
    9e2c:	4b22      	ldr	r3, [pc, #136]	; (9eb8 <udd_ctrl_ep_enable+0xc8>)
    9e2e:	58e3      	ldr	r3, [r4, r3]
    9e30:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    9e32:	4b22      	ldr	r3, [pc, #136]	; (9ebc <udd_ctrl_ep_enable+0xcc>)
    9e34:	447b      	add	r3, pc
    9e36:	6878      	ldr	r0, [r7, #4]
    9e38:	2202      	movs	r2, #2
    9e3a:	2100      	movs	r1, #0
    9e3c:	4d20      	ldr	r5, [pc, #128]	; (9ec0 <udd_ctrl_ep_enable+0xd0>)
    9e3e:	5965      	ldr	r5, [r4, r5]
    9e40:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    9e42:	4b20      	ldr	r3, [pc, #128]	; (9ec4 <udd_ctrl_ep_enable+0xd4>)
    9e44:	447b      	add	r3, pc
    9e46:	6878      	ldr	r0, [r7, #4]
    9e48:	2200      	movs	r2, #0
    9e4a:	2100      	movs	r1, #0
    9e4c:	4d1c      	ldr	r5, [pc, #112]	; (9ec0 <udd_ctrl_ep_enable+0xd0>)
    9e4e:	5965      	ldr	r5, [r4, r5]
    9e50:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    9e52:	4b1d      	ldr	r3, [pc, #116]	; (9ec8 <udd_ctrl_ep_enable+0xd8>)
    9e54:	447b      	add	r3, pc
    9e56:	6878      	ldr	r0, [r7, #4]
    9e58:	2201      	movs	r2, #1
    9e5a:	2100      	movs	r1, #0
    9e5c:	4d18      	ldr	r5, [pc, #96]	; (9ec0 <udd_ctrl_ep_enable+0xd0>)
    9e5e:	5965      	ldr	r5, [r4, r5]
    9e60:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    9e62:	687b      	ldr	r3, [r7, #4]
    9e64:	2202      	movs	r2, #2
    9e66:	2100      	movs	r1, #0
    9e68:	0018      	movs	r0, r3
    9e6a:	4b18      	ldr	r3, [pc, #96]	; (9ecc <udd_ctrl_ep_enable+0xdc>)
    9e6c:	58e3      	ldr	r3, [r4, r3]
    9e6e:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    9e70:	687b      	ldr	r3, [r7, #4]
    9e72:	2200      	movs	r2, #0
    9e74:	2100      	movs	r1, #0
    9e76:	0018      	movs	r0, r3
    9e78:	4b14      	ldr	r3, [pc, #80]	; (9ecc <udd_ctrl_ep_enable+0xdc>)
    9e7a:	58e3      	ldr	r3, [r4, r3]
    9e7c:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    9e7e:	687b      	ldr	r3, [r7, #4]
    9e80:	2201      	movs	r2, #1
    9e82:	2100      	movs	r1, #0
    9e84:	0018      	movs	r0, r3
    9e86:	4b11      	ldr	r3, [pc, #68]	; (9ecc <udd_ctrl_ep_enable+0xdc>)
    9e88:	58e3      	ldr	r3, [r4, r3]
    9e8a:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    9e8c:	687b      	ldr	r3, [r7, #4]
    9e8e:	2101      	movs	r1, #1
    9e90:	0018      	movs	r0, r3
    9e92:	4b0f      	ldr	r3, [pc, #60]	; (9ed0 <udd_ctrl_ep_enable+0xe0>)
    9e94:	447b      	add	r3, pc
    9e96:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    9e98:	4b0e      	ldr	r3, [pc, #56]	; (9ed4 <udd_ctrl_ep_enable+0xe4>)
    9e9a:	447b      	add	r3, pc
    9e9c:	2200      	movs	r2, #0
    9e9e:	701a      	strb	r2, [r3, #0]
}
    9ea0:	46c0      	nop			; (mov r8, r8)
    9ea2:	46bd      	mov	sp, r7
    9ea4:	b004      	add	sp, #16
    9ea6:	bdb0      	pop	{r4, r5, r7, pc}
    9ea8:	00007fd6 	.word	0x00007fd6
    9eac:	00000104 	.word	0x00000104
    9eb0:	00000074 	.word	0x00000074
    9eb4:	000002b4 	.word	0x000002b4
    9eb8:	000000c0 	.word	0x000000c0
    9ebc:	fffffd0d 	.word	0xfffffd0d
    9ec0:	00000154 	.word	0x00000154
    9ec4:	ffffff35 	.word	0xffffff35
    9ec8:	fffffee5 	.word	0xfffffee5
    9ecc:	000002a8 	.word	0x000002a8
    9ed0:	ffffea11 	.word	0xffffea11
    9ed4:	1fff66fc 	.word	0x1fff66fc

00009ed8 <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    9ed8:	b590      	push	{r4, r7, lr}
    9eda:	b083      	sub	sp, #12
    9edc:	af00      	add	r7, sp, #0
    9ede:	6078      	str	r0, [r7, #4]
    9ee0:	6039      	str	r1, [r7, #0]
    9ee2:	4c0c      	ldr	r4, [pc, #48]	; (9f14 <_usb_on_suspend+0x3c>)
    9ee4:	447c      	add	r4, pc
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    9ee6:	4b0c      	ldr	r3, [pc, #48]	; (9f18 <_usb_on_suspend+0x40>)
    9ee8:	58e3      	ldr	r3, [r4, r3]
    9eea:	2104      	movs	r1, #4
    9eec:	0018      	movs	r0, r3
    9eee:	4b0b      	ldr	r3, [pc, #44]	; (9f1c <_usb_on_suspend+0x44>)
    9ef0:	58e3      	ldr	r3, [r4, r3]
    9ef2:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    9ef4:	4b08      	ldr	r3, [pc, #32]	; (9f18 <_usb_on_suspend+0x40>)
    9ef6:	58e3      	ldr	r3, [r4, r3]
    9ef8:	2102      	movs	r1, #2
    9efa:	0018      	movs	r0, r3
    9efc:	4b08      	ldr	r3, [pc, #32]	; (9f20 <_usb_on_suspend+0x48>)
    9efe:	58e3      	ldr	r3, [r4, r3]
    9f00:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    9f02:	2001      	movs	r0, #1
    9f04:	4b07      	ldr	r3, [pc, #28]	; (9f24 <_usb_on_suspend+0x4c>)
    9f06:	447b      	add	r3, pc
    9f08:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
#endif
}
    9f0a:	46c0      	nop			; (mov r8, r8)
    9f0c:	46bd      	mov	sp, r7
    9f0e:	b003      	add	sp, #12
    9f10:	bd90      	pop	{r4, r7, pc}
    9f12:	46c0      	nop			; (mov r8, r8)
    9f14:	00007eec 	.word	0x00007eec
    9f18:	00000078 	.word	0x00000078
    9f1c:	00000054 	.word	0x00000054
    9f20:	00000168 	.word	0x00000168
    9f24:	ffffeadb 	.word	0xffffeadb

00009f28 <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    9f28:	b590      	push	{r4, r7, lr}
    9f2a:	b085      	sub	sp, #20
    9f2c:	af00      	add	r7, sp, #0
    9f2e:	6078      	str	r0, [r7, #4]
    9f30:	6039      	str	r1, [r7, #0]
    9f32:	4c10      	ldr	r4, [pc, #64]	; (9f74 <_usb_device_lpm_suspend+0x4c>)
    9f34:	447c      	add	r4, pc
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    9f36:	683b      	ldr	r3, [r7, #0]
    9f38:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    9f3a:	4b0f      	ldr	r3, [pc, #60]	; (9f78 <_usb_device_lpm_suspend+0x50>)
    9f3c:	58e3      	ldr	r3, [r4, r3]
    9f3e:	2106      	movs	r1, #6
    9f40:	0018      	movs	r0, r3
    9f42:	4b0e      	ldr	r3, [pc, #56]	; (9f7c <_usb_device_lpm_suspend+0x54>)
    9f44:	58e3      	ldr	r3, [r4, r3]
    9f46:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    9f48:	4b0b      	ldr	r3, [pc, #44]	; (9f78 <_usb_device_lpm_suspend+0x50>)
    9f4a:	58e3      	ldr	r3, [r4, r3]
    9f4c:	2104      	movs	r1, #4
    9f4e:	0018      	movs	r0, r3
    9f50:	4b0a      	ldr	r3, [pc, #40]	; (9f7c <_usb_device_lpm_suspend+0x54>)
    9f52:	58e3      	ldr	r3, [r4, r3]
    9f54:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    9f56:	4b08      	ldr	r3, [pc, #32]	; (9f78 <_usb_device_lpm_suspend+0x50>)
    9f58:	58e3      	ldr	r3, [r4, r3]
    9f5a:	2102      	movs	r1, #2
    9f5c:	0018      	movs	r0, r3
    9f5e:	4b08      	ldr	r3, [pc, #32]	; (9f80 <_usb_device_lpm_suspend+0x58>)
    9f60:	58e3      	ldr	r3, [r4, r3]
    9f62:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    9f64:	2002      	movs	r0, #2
    9f66:	4b07      	ldr	r3, [pc, #28]	; (9f84 <_usb_device_lpm_suspend+0x5c>)
    9f68:	447b      	add	r3, pc
    9f6a:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    9f6c:	46c0      	nop			; (mov r8, r8)
    9f6e:	46bd      	mov	sp, r7
    9f70:	b005      	add	sp, #20
    9f72:	bd90      	pop	{r4, r7, pc}
    9f74:	00007e9c 	.word	0x00007e9c
    9f78:	00000078 	.word	0x00000078
    9f7c:	00000054 	.word	0x00000054
    9f80:	00000168 	.word	0x00000168
    9f84:	ffffea79 	.word	0xffffea79

00009f88 <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    9f88:	b580      	push	{r7, lr}
    9f8a:	b082      	sub	sp, #8
    9f8c:	af00      	add	r7, sp, #0
    9f8e:	6078      	str	r0, [r7, #4]
    9f90:	6039      	str	r1, [r7, #0]
    9f92:	4a04      	ldr	r2, [pc, #16]	; (9fa4 <_usb_on_sof_notify+0x1c>)
    9f94:	447a      	add	r2, pc
	udc_sof_notify();
    9f96:	4b04      	ldr	r3, [pc, #16]	; (9fa8 <_usb_on_sof_notify+0x20>)
    9f98:	58d3      	ldr	r3, [r2, r3]
    9f9a:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
#endif
}
    9f9c:	46c0      	nop			; (mov r8, r8)
    9f9e:	46bd      	mov	sp, r7
    9fa0:	b002      	add	sp, #8
    9fa2:	bd80      	pop	{r7, pc}
    9fa4:	00007e3c 	.word	0x00007e3c
    9fa8:	0000018c 	.word	0x0000018c

00009fac <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    9fac:	b580      	push	{r7, lr}
    9fae:	b082      	sub	sp, #8
    9fb0:	af00      	add	r7, sp, #0
    9fb2:	6078      	str	r0, [r7, #4]
    9fb4:	6039      	str	r1, [r7, #0]
    9fb6:	4a0a      	ldr	r2, [pc, #40]	; (9fe0 <_usb_on_bus_reset+0x34>)
    9fb8:	447a      	add	r2, pc
	// Reset USB Device Stack Core
	udc_reset();
    9fba:	4b0a      	ldr	r3, [pc, #40]	; (9fe4 <_usb_on_bus_reset+0x38>)
    9fbc:	58d3      	ldr	r3, [r2, r3]
    9fbe:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    9fc0:	687b      	ldr	r3, [r7, #4]
    9fc2:	2100      	movs	r1, #0
    9fc4:	0018      	movs	r0, r3
    9fc6:	4b08      	ldr	r3, [pc, #32]	; (9fe8 <_usb_on_bus_reset+0x3c>)
    9fc8:	447b      	add	r3, pc
    9fca:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    9fcc:	687b      	ldr	r3, [r7, #4]
    9fce:	0018      	movs	r0, r3
    9fd0:	4b06      	ldr	r3, [pc, #24]	; (9fec <_usb_on_bus_reset+0x40>)
    9fd2:	447b      	add	r3, pc
    9fd4:	4798      	blx	r3
}
    9fd6:	46c0      	nop			; (mov r8, r8)
    9fd8:	46bd      	mov	sp, r7
    9fda:	b002      	add	sp, #8
    9fdc:	bd80      	pop	{r7, pc}
    9fde:	46c0      	nop			; (mov r8, r8)
    9fe0:	00007e18 	.word	0x00007e18
    9fe4:	000000a0 	.word	0x000000a0
    9fe8:	ffffe881 	.word	0xffffe881
    9fec:	fffffe1b 	.word	0xfffffe1b

00009ff0 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    9ff0:	b590      	push	{r4, r7, lr}
    9ff2:	b083      	sub	sp, #12
    9ff4:	af00      	add	r7, sp, #0
    9ff6:	6078      	str	r0, [r7, #4]
    9ff8:	6039      	str	r1, [r7, #0]
    9ffa:	4c16      	ldr	r4, [pc, #88]	; (a054 <_usb_on_wakeup+0x64>)
    9ffc:	447c      	add	r4, pc
	udd_wait_clock_ready();
    9ffe:	4b16      	ldr	r3, [pc, #88]	; (a058 <_usb_on_wakeup+0x68>)
    a000:	447b      	add	r3, pc
    a002:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    a004:	4b15      	ldr	r3, [pc, #84]	; (a05c <_usb_on_wakeup+0x6c>)
    a006:	58e3      	ldr	r3, [r4, r3]
    a008:	2102      	movs	r1, #2
    a00a:	0018      	movs	r0, r3
    a00c:	4b14      	ldr	r3, [pc, #80]	; (a060 <_usb_on_wakeup+0x70>)
    a00e:	58e3      	ldr	r3, [r4, r3]
    a010:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    a012:	4b12      	ldr	r3, [pc, #72]	; (a05c <_usb_on_wakeup+0x6c>)
    a014:	58e3      	ldr	r3, [r4, r3]
    a016:	2104      	movs	r1, #4
    a018:	0018      	movs	r0, r3
    a01a:	4b12      	ldr	r3, [pc, #72]	; (a064 <_usb_on_wakeup+0x74>)
    a01c:	58e3      	ldr	r3, [r4, r3]
    a01e:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    a020:	4b11      	ldr	r3, [pc, #68]	; (a068 <_usb_on_wakeup+0x78>)
    a022:	447b      	add	r3, pc
    a024:	001a      	movs	r2, r3
    a026:	4b0d      	ldr	r3, [pc, #52]	; (a05c <_usb_on_wakeup+0x6c>)
    a028:	58e3      	ldr	r3, [r4, r3]
    a02a:	2106      	movs	r1, #6
    a02c:	0018      	movs	r0, r3
    a02e:	4b0f      	ldr	r3, [pc, #60]	; (a06c <_usb_on_wakeup+0x7c>)
    a030:	58e3      	ldr	r3, [r4, r3]
    a032:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    a034:	4b09      	ldr	r3, [pc, #36]	; (a05c <_usb_on_wakeup+0x6c>)
    a036:	58e3      	ldr	r3, [r4, r3]
    a038:	2106      	movs	r1, #6
    a03a:	0018      	movs	r0, r3
    a03c:	4b09      	ldr	r3, [pc, #36]	; (a064 <_usb_on_wakeup+0x74>)
    a03e:	58e3      	ldr	r3, [r4, r3]
    a040:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    a042:	2003      	movs	r0, #3
    a044:	4b0a      	ldr	r3, [pc, #40]	; (a070 <_usb_on_wakeup+0x80>)
    a046:	447b      	add	r3, pc
    a048:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    a04a:	46c0      	nop			; (mov r8, r8)
    a04c:	46bd      	mov	sp, r7
    a04e:	b003      	add	sp, #12
    a050:	bd90      	pop	{r4, r7, pc}
    a052:	46c0      	nop			; (mov r8, r8)
    a054:	00007dd4 	.word	0x00007dd4
    a058:	ffffe9a5 	.word	0xffffe9a5
    a05c:	00000078 	.word	0x00000078
    a060:	00000054 	.word	0x00000054
    a064:	00000168 	.word	0x00000168
    a068:	ffffff03 	.word	0xffffff03
    a06c:	0000003c 	.word	0x0000003c
    a070:	ffffe99b 	.word	0xffffe99b

0000a074 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    a074:	b5b0      	push	{r4, r5, r7, lr}
    a076:	af00      	add	r7, sp, #0
    a078:	4c31      	ldr	r4, [pc, #196]	; (a140 <udd_attach+0xcc>)
    a07a:	447c      	add	r4, pc
	udd_sleep_mode(UDD_STATE_IDLE);
    a07c:	2003      	movs	r0, #3
    a07e:	4b31      	ldr	r3, [pc, #196]	; (a144 <udd_attach+0xd0>)
    a080:	447b      	add	r3, pc
    a082:	4798      	blx	r3
	usb_device_attach(&usb_device);
    a084:	4b30      	ldr	r3, [pc, #192]	; (a148 <udd_attach+0xd4>)
    a086:	58e3      	ldr	r3, [r4, r3]
    a088:	0018      	movs	r0, r3
    a08a:	4b30      	ldr	r3, [pc, #192]	; (a14c <udd_attach+0xd8>)
    a08c:	447b      	add	r3, pc
    a08e:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    a090:	4b2f      	ldr	r3, [pc, #188]	; (a150 <udd_attach+0xdc>)
    a092:	447b      	add	r3, pc
    a094:	001a      	movs	r2, r3
    a096:	4b2c      	ldr	r3, [pc, #176]	; (a148 <udd_attach+0xd4>)
    a098:	58e3      	ldr	r3, [r4, r3]
    a09a:	2104      	movs	r1, #4
    a09c:	0018      	movs	r0, r3
    a09e:	4b2d      	ldr	r3, [pc, #180]	; (a154 <udd_attach+0xe0>)
    a0a0:	58e3      	ldr	r3, [r4, r3]
    a0a2:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    a0a4:	4b2c      	ldr	r3, [pc, #176]	; (a158 <udd_attach+0xe4>)
    a0a6:	447b      	add	r3, pc
    a0a8:	001a      	movs	r2, r3
    a0aa:	4b27      	ldr	r3, [pc, #156]	; (a148 <udd_attach+0xd4>)
    a0ac:	58e3      	ldr	r3, [r4, r3]
    a0ae:	2100      	movs	r1, #0
    a0b0:	0018      	movs	r0, r3
    a0b2:	4b28      	ldr	r3, [pc, #160]	; (a154 <udd_attach+0xe0>)
    a0b4:	58e3      	ldr	r3, [r4, r3]
    a0b6:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    a0b8:	4b28      	ldr	r3, [pc, #160]	; (a15c <udd_attach+0xe8>)
    a0ba:	447b      	add	r3, pc
    a0bc:	001a      	movs	r2, r3
    a0be:	4b22      	ldr	r3, [pc, #136]	; (a148 <udd_attach+0xd4>)
    a0c0:	58e3      	ldr	r3, [r4, r3]
    a0c2:	2101      	movs	r1, #1
    a0c4:	0018      	movs	r0, r3
    a0c6:	4b23      	ldr	r3, [pc, #140]	; (a154 <udd_attach+0xe0>)
    a0c8:	58e3      	ldr	r3, [r4, r3]
    a0ca:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    a0cc:	4b24      	ldr	r3, [pc, #144]	; (a160 <udd_attach+0xec>)
    a0ce:	447b      	add	r3, pc
    a0d0:	001a      	movs	r2, r3
    a0d2:	4b1d      	ldr	r3, [pc, #116]	; (a148 <udd_attach+0xd4>)
    a0d4:	58e3      	ldr	r3, [r4, r3]
    a0d6:	2102      	movs	r1, #2
    a0d8:	0018      	movs	r0, r3
    a0da:	4b1e      	ldr	r3, [pc, #120]	; (a154 <udd_attach+0xe0>)
    a0dc:	58e3      	ldr	r3, [r4, r3]
    a0de:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    a0e0:	4b19      	ldr	r3, [pc, #100]	; (a148 <udd_attach+0xd4>)
    a0e2:	58e3      	ldr	r3, [r4, r3]
    a0e4:	2104      	movs	r1, #4
    a0e6:	0018      	movs	r0, r3
    a0e8:	4b1e      	ldr	r3, [pc, #120]	; (a164 <udd_attach+0xf0>)
    a0ea:	58e3      	ldr	r3, [r4, r3]
    a0ec:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    a0ee:	4b16      	ldr	r3, [pc, #88]	; (a148 <udd_attach+0xd4>)
    a0f0:	58e3      	ldr	r3, [r4, r3]
    a0f2:	2100      	movs	r1, #0
    a0f4:	0018      	movs	r0, r3
    a0f6:	4b1b      	ldr	r3, [pc, #108]	; (a164 <udd_attach+0xf0>)
    a0f8:	58e3      	ldr	r3, [r4, r3]
    a0fa:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    a0fc:	4b12      	ldr	r3, [pc, #72]	; (a148 <udd_attach+0xd4>)
    a0fe:	58e3      	ldr	r3, [r4, r3]
    a100:	2101      	movs	r1, #1
    a102:	0018      	movs	r0, r3
    a104:	4b17      	ldr	r3, [pc, #92]	; (a164 <udd_attach+0xf0>)
    a106:	58e3      	ldr	r3, [r4, r3]
    a108:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    a10a:	4b0f      	ldr	r3, [pc, #60]	; (a148 <udd_attach+0xd4>)
    a10c:	58e3      	ldr	r3, [r4, r3]
    a10e:	2102      	movs	r1, #2
    a110:	0018      	movs	r0, r3
    a112:	4b14      	ldr	r3, [pc, #80]	; (a164 <udd_attach+0xf0>)
    a114:	58e3      	ldr	r3, [r4, r3]
    a116:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    a118:	4b13      	ldr	r3, [pc, #76]	; (a168 <udd_attach+0xf4>)
    a11a:	447b      	add	r3, pc
    a11c:	001a      	movs	r2, r3
    a11e:	4b0a      	ldr	r3, [pc, #40]	; (a148 <udd_attach+0xd4>)
    a120:	58e3      	ldr	r3, [r4, r3]
    a122:	2106      	movs	r1, #6
    a124:	0018      	movs	r0, r3
    a126:	4b0b      	ldr	r3, [pc, #44]	; (a154 <udd_attach+0xe0>)
    a128:	58e3      	ldr	r3, [r4, r3]
    a12a:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    a12c:	4b06      	ldr	r3, [pc, #24]	; (a148 <udd_attach+0xd4>)
    a12e:	58e3      	ldr	r3, [r4, r3]
    a130:	2106      	movs	r1, #6
    a132:	0018      	movs	r0, r3
    a134:	4b0b      	ldr	r3, [pc, #44]	; (a164 <udd_attach+0xf0>)
    a136:	58e3      	ldr	r3, [r4, r3]
    a138:	4798      	blx	r3
#endif
}
    a13a:	46c0      	nop			; (mov r8, r8)
    a13c:	46bd      	mov	sp, r7
    a13e:	bdb0      	pop	{r4, r5, r7, pc}
    a140:	00007d56 	.word	0x00007d56
    a144:	ffffe961 	.word	0xffffe961
    a148:	00000078 	.word	0x00000078
    a14c:	ffffe77d 	.word	0xffffe77d
    a150:	fffffe43 	.word	0xfffffe43
    a154:	0000003c 	.word	0x0000003c
    a158:	fffffedf 	.word	0xfffffedf
    a15c:	fffffeef 	.word	0xfffffeef
    a160:	ffffff1f 	.word	0xffffff1f
    a164:	00000168 	.word	0x00000168
    a168:	fffffe0b 	.word	0xfffffe0b

0000a16c <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    a16c:	b590      	push	{r4, r7, lr}
    a16e:	b083      	sub	sp, #12
    a170:	af00      	add	r7, sp, #0
    a172:	4c18      	ldr	r4, [pc, #96]	; (a1d4 <udd_enable+0x68>)
    a174:	447c      	add	r4, pc
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    a176:	4b18      	ldr	r3, [pc, #96]	; (a1d8 <udd_enable+0x6c>)
    a178:	447b      	add	r3, pc
    a17a:	4798      	blx	r3
    a17c:	0003      	movs	r3, r0
    a17e:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    a180:	003b      	movs	r3, r7
    a182:	0018      	movs	r0, r3
    a184:	4b15      	ldr	r3, [pc, #84]	; (a1dc <udd_enable+0x70>)
    a186:	58e3      	ldr	r3, [r4, r3]
    a188:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    a18a:	003b      	movs	r3, r7
    a18c:	2200      	movs	r2, #0
    a18e:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    a190:	003a      	movs	r2, r7
    a192:	4913      	ldr	r1, [pc, #76]	; (a1e0 <udd_enable+0x74>)
    a194:	4b13      	ldr	r3, [pc, #76]	; (a1e4 <udd_enable+0x78>)
    a196:	58e3      	ldr	r3, [r4, r3]
    a198:	0018      	movs	r0, r3
    a19a:	4b13      	ldr	r3, [pc, #76]	; (a1e8 <udd_enable+0x7c>)
    a19c:	58e3      	ldr	r3, [r4, r3]
    a19e:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    a1a0:	4b10      	ldr	r3, [pc, #64]	; (a1e4 <udd_enable+0x78>)
    a1a2:	58e3      	ldr	r3, [r4, r3]
    a1a4:	0018      	movs	r0, r3
    a1a6:	4b11      	ldr	r3, [pc, #68]	; (a1ec <udd_enable+0x80>)
    a1a8:	58e3      	ldr	r3, [r4, r3]
    a1aa:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    a1ac:	4b10      	ldr	r3, [pc, #64]	; (a1f0 <udd_enable+0x84>)
    a1ae:	447b      	add	r3, pc
    a1b0:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    a1b2:	2001      	movs	r0, #1
    a1b4:	4b0f      	ldr	r3, [pc, #60]	; (a1f4 <udd_enable+0x88>)
    a1b6:	447b      	add	r3, pc
    a1b8:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    a1ba:	4b0f      	ldr	r3, [pc, #60]	; (a1f8 <udd_enable+0x8c>)
    a1bc:	58e3      	ldr	r3, [r4, r3]
    a1be:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
    a1c0:	687b      	ldr	r3, [r7, #4]
    a1c2:	0018      	movs	r0, r3
    a1c4:	4b0d      	ldr	r3, [pc, #52]	; (a1fc <udd_enable+0x90>)
    a1c6:	447b      	add	r3, pc
    a1c8:	4798      	blx	r3
}
    a1ca:	46c0      	nop			; (mov r8, r8)
    a1cc:	46bd      	mov	sp, r7
    a1ce:	b003      	add	sp, #12
    a1d0:	bd90      	pop	{r4, r7, pc}
    a1d2:	46c0      	nop			; (mov r8, r8)
    a1d4:	00007c5c 	.word	0x00007c5c
    a1d8:	ffffe601 	.word	0xffffe601
    a1dc:	000000b4 	.word	0x000000b4
    a1e0:	41005000 	.word	0x41005000
    a1e4:	00000078 	.word	0x00000078
    a1e8:	000000bc 	.word	0x000000bc
    a1ec:	000002dc 	.word	0x000002dc
    a1f0:	ffffe7f7 	.word	0xffffe7f7
    a1f4:	ffffe82b 	.word	0xffffe82b
    a1f8:	00000240 	.word	0x00000240
    a1fc:	ffffe607 	.word	0xffffe607

0000a200 <system_gclk_chan_get_config_defaults>:
{
    a200:	b580      	push	{r7, lr}
    a202:	b082      	sub	sp, #8
    a204:	af00      	add	r7, sp, #0
    a206:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    a208:	687b      	ldr	r3, [r7, #4]
    a20a:	2200      	movs	r2, #0
    a20c:	701a      	strb	r2, [r3, #0]
}
    a20e:	46c0      	nop			; (mov r8, r8)
    a210:	46bd      	mov	sp, r7
    a212:	b002      	add	sp, #8
    a214:	bd80      	pop	{r7, pc}
	...

0000a218 <system_apb_clock_set_mask>:
{
    a218:	b580      	push	{r7, lr}
    a21a:	b082      	sub	sp, #8
    a21c:	af00      	add	r7, sp, #0
    a21e:	0002      	movs	r2, r0
    a220:	6039      	str	r1, [r7, #0]
    a222:	1dfb      	adds	r3, r7, #7
    a224:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    a226:	1dfb      	adds	r3, r7, #7
    a228:	781b      	ldrb	r3, [r3, #0]
    a22a:	2b01      	cmp	r3, #1
    a22c:	d00a      	beq.n	a244 <system_apb_clock_set_mask+0x2c>
    a22e:	2b02      	cmp	r3, #2
    a230:	d00f      	beq.n	a252 <system_apb_clock_set_mask+0x3a>
    a232:	2b00      	cmp	r3, #0
    a234:	d114      	bne.n	a260 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    a236:	4b0e      	ldr	r3, [pc, #56]	; (a270 <system_apb_clock_set_mask+0x58>)
    a238:	4a0d      	ldr	r2, [pc, #52]	; (a270 <system_apb_clock_set_mask+0x58>)
    a23a:	6991      	ldr	r1, [r2, #24]
    a23c:	683a      	ldr	r2, [r7, #0]
    a23e:	430a      	orrs	r2, r1
    a240:	619a      	str	r2, [r3, #24]
			break;
    a242:	e00f      	b.n	a264 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    a244:	4b0a      	ldr	r3, [pc, #40]	; (a270 <system_apb_clock_set_mask+0x58>)
    a246:	4a0a      	ldr	r2, [pc, #40]	; (a270 <system_apb_clock_set_mask+0x58>)
    a248:	69d1      	ldr	r1, [r2, #28]
    a24a:	683a      	ldr	r2, [r7, #0]
    a24c:	430a      	orrs	r2, r1
    a24e:	61da      	str	r2, [r3, #28]
			break;
    a250:	e008      	b.n	a264 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    a252:	4b07      	ldr	r3, [pc, #28]	; (a270 <system_apb_clock_set_mask+0x58>)
    a254:	4a06      	ldr	r2, [pc, #24]	; (a270 <system_apb_clock_set_mask+0x58>)
    a256:	6a11      	ldr	r1, [r2, #32]
    a258:	683a      	ldr	r2, [r7, #0]
    a25a:	430a      	orrs	r2, r1
    a25c:	621a      	str	r2, [r3, #32]
			break;
    a25e:	e001      	b.n	a264 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    a260:	2317      	movs	r3, #23
    a262:	e000      	b.n	a266 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    a264:	2300      	movs	r3, #0
}
    a266:	0018      	movs	r0, r3
    a268:	46bd      	mov	sp, r7
    a26a:	b002      	add	sp, #8
    a26c:	bd80      	pop	{r7, pc}
    a26e:	46c0      	nop			; (mov r8, r8)
    a270:	40000400 	.word	0x40000400

0000a274 <system_pinmux_get_config_defaults>:
{
    a274:	b580      	push	{r7, lr}
    a276:	b082      	sub	sp, #8
    a278:	af00      	add	r7, sp, #0
    a27a:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    a27c:	687b      	ldr	r3, [r7, #4]
    a27e:	2280      	movs	r2, #128	; 0x80
    a280:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    a282:	687b      	ldr	r3, [r7, #4]
    a284:	2200      	movs	r2, #0
    a286:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    a288:	687b      	ldr	r3, [r7, #4]
    a28a:	2201      	movs	r2, #1
    a28c:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    a28e:	687b      	ldr	r3, [r7, #4]
    a290:	2200      	movs	r2, #0
    a292:	70da      	strb	r2, [r3, #3]
}
    a294:	46c0      	nop			; (mov r8, r8)
    a296:	46bd      	mov	sp, r7
    a298:	b002      	add	sp, #8
    a29a:	bd80      	pop	{r7, pc}

0000a29c <system_interrupt_enable>:
{
    a29c:	b580      	push	{r7, lr}
    a29e:	b082      	sub	sp, #8
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	0002      	movs	r2, r0
    a2a4:	1dfb      	adds	r3, r7, #7
    a2a6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    a2a8:	4b06      	ldr	r3, [pc, #24]	; (a2c4 <system_interrupt_enable+0x28>)
    a2aa:	1dfa      	adds	r2, r7, #7
    a2ac:	7812      	ldrb	r2, [r2, #0]
    a2ae:	0011      	movs	r1, r2
    a2b0:	221f      	movs	r2, #31
    a2b2:	400a      	ands	r2, r1
    a2b4:	2101      	movs	r1, #1
    a2b6:	4091      	lsls	r1, r2
    a2b8:	000a      	movs	r2, r1
    a2ba:	601a      	str	r2, [r3, #0]
}
    a2bc:	46c0      	nop			; (mov r8, r8)
    a2be:	46bd      	mov	sp, r7
    a2c0:	b002      	add	sp, #8
    a2c2:	bd80      	pop	{r7, pc}
    a2c4:	e000e100 	.word	0xe000e100

0000a2c8 <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    a2c8:	b590      	push	{r4, r7, lr}
    a2ca:	b083      	sub	sp, #12
    a2cc:	af00      	add	r7, sp, #0
    a2ce:	4c44      	ldr	r4, [pc, #272]	; (a3e0 <_usb_host_interrupt_handler+0x118>)
    a2d0:	447c      	add	r4, pc
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    a2d2:	4b44      	ldr	r3, [pc, #272]	; (a3e4 <_usb_host_interrupt_handler+0x11c>)
    a2d4:	447b      	add	r3, pc
    a2d6:	681b      	ldr	r3, [r3, #0]
    a2d8:	681b      	ldr	r3, [r3, #0]
    a2da:	8c1b      	ldrh	r3, [r3, #32]
    a2dc:	b29b      	uxth	r3, r3
    a2de:	2b00      	cmp	r3, #0
    a2e0:	d00c      	beq.n	a2fc <_usb_host_interrupt_handler+0x34>
    a2e2:	4b41      	ldr	r3, [pc, #260]	; (a3e8 <_usb_host_interrupt_handler+0x120>)
    a2e4:	447b      	add	r3, pc
    a2e6:	681b      	ldr	r3, [r3, #0]
    a2e8:	681b      	ldr	r3, [r3, #0]
    a2ea:	8c1b      	ldrh	r3, [r3, #32]
    a2ec:	b29b      	uxth	r3, r3
    a2ee:	001a      	movs	r2, r3
    a2f0:	4b3e      	ldr	r3, [pc, #248]	; (a3ec <_usb_host_interrupt_handler+0x124>)
    a2f2:	58e3      	ldr	r3, [r4, r3]
    a2f4:	0010      	movs	r0, r2
    a2f6:	4798      	blx	r3
    a2f8:	0003      	movs	r3, r0
    a2fa:	e000      	b.n	a2fe <_usb_host_interrupt_handler+0x36>
    a2fc:	2320      	movs	r3, #32
    a2fe:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    a300:	687b      	ldr	r3, [r7, #4]
    a302:	2b1f      	cmp	r3, #31
    a304:	d900      	bls.n	a308 <_usb_host_interrupt_handler+0x40>
    a306:	e1f5      	b.n	a6f4 <_usb_host_interrupt_handler+0x42c>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    a308:	4b39      	ldr	r3, [pc, #228]	; (a3f0 <_usb_host_interrupt_handler+0x128>)
    a30a:	447b      	add	r3, pc
    a30c:	681b      	ldr	r3, [r3, #0]
    a30e:	681a      	ldr	r2, [r3, #0]
    a310:	687b      	ldr	r3, [r7, #4]
    a312:	3308      	adds	r3, #8
    a314:	015b      	lsls	r3, r3, #5
    a316:	18d3      	adds	r3, r2, r3
    a318:	3307      	adds	r3, #7
    a31a:	781b      	ldrb	r3, [r3, #0]
    a31c:	b2db      	uxtb	r3, r3
    a31e:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    a320:	683b      	ldr	r3, [r7, #0]
    a322:	2203      	movs	r2, #3
    a324:	4013      	ands	r3, r2
    a326:	d100      	bne.n	a32a <_usb_host_interrupt_handler+0x62>
    a328:	e0b9      	b.n	a49e <_usb_host_interrupt_handler+0x1d6>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    a32a:	2201      	movs	r2, #1
    a32c:	687b      	ldr	r3, [r7, #4]
    a32e:	409a      	lsls	r2, r3
    a330:	0013      	movs	r3, r2
    a332:	43db      	mvns	r3, r3
    a334:	001a      	movs	r2, r3
    a336:	4b2f      	ldr	r3, [pc, #188]	; (a3f4 <_usb_host_interrupt_handler+0x12c>)
    a338:	58e3      	ldr	r3, [r4, r3]
    a33a:	681b      	ldr	r3, [r3, #0]
    a33c:	401a      	ands	r2, r3
    a33e:	4b2d      	ldr	r3, [pc, #180]	; (a3f4 <_usb_host_interrupt_handler+0x12c>)
    a340:	58e3      	ldr	r3, [r4, r3]
    a342:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    a344:	4b2c      	ldr	r3, [pc, #176]	; (a3f8 <_usb_host_interrupt_handler+0x130>)
    a346:	447b      	add	r3, pc
    a348:	681b      	ldr	r3, [r3, #0]
    a34a:	681a      	ldr	r2, [r3, #0]
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	3308      	adds	r3, #8
    a350:	015b      	lsls	r3, r3, #5
    a352:	18d3      	adds	r3, r2, r3
    a354:	3307      	adds	r3, #7
    a356:	2203      	movs	r2, #3
    a358:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    a35a:	4b28      	ldr	r3, [pc, #160]	; (a3fc <_usb_host_interrupt_handler+0x134>)
    a35c:	447b      	add	r3, pc
    a35e:	681a      	ldr	r2, [r3, #0]
    a360:	21ae      	movs	r1, #174	; 0xae
    a362:	687b      	ldr	r3, [r7, #4]
    a364:	18d3      	adds	r3, r2, r3
    a366:	185b      	adds	r3, r3, r1
    a368:	781b      	ldrb	r3, [r3, #0]
    a36a:	001a      	movs	r2, r3
    a36c:	2301      	movs	r3, #1
    a36e:	4013      	ands	r3, r2
    a370:	d100      	bne.n	a374 <_usb_host_interrupt_handler+0xac>
    a372:	e094      	b.n	a49e <_usb_host_interrupt_handler+0x1d6>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    a374:	687b      	ldr	r3, [r7, #4]
    a376:	b2da      	uxtb	r2, r3
    a378:	4b21      	ldr	r3, [pc, #132]	; (a400 <_usb_host_interrupt_handler+0x138>)
    a37a:	447b      	add	r3, pc
    a37c:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    a37e:	4b21      	ldr	r3, [pc, #132]	; (a404 <_usb_host_interrupt_handler+0x13c>)
    a380:	447b      	add	r3, pc
    a382:	681b      	ldr	r3, [r3, #0]
    a384:	681b      	ldr	r3, [r3, #0]
    a386:	687a      	ldr	r2, [r7, #4]
    a388:	3208      	adds	r2, #8
    a38a:	0152      	lsls	r2, r2, #5
    a38c:	5cd3      	ldrb	r3, [r2, r3]
    a38e:	079b      	lsls	r3, r3, #30
    a390:	0f9b      	lsrs	r3, r3, #30
    a392:	b2db      	uxtb	r3, r3
    a394:	2b01      	cmp	r3, #1
    a396:	d13d      	bne.n	a414 <_usb_host_interrupt_handler+0x14c>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    a398:	4b1b      	ldr	r3, [pc, #108]	; (a408 <_usb_host_interrupt_handler+0x140>)
    a39a:	58e2      	ldr	r2, [r4, r3]
    a39c:	687b      	ldr	r3, [r7, #4]
    a39e:	015b      	lsls	r3, r3, #5
    a3a0:	18d3      	adds	r3, r2, r3
    a3a2:	685b      	ldr	r3, [r3, #4]
    a3a4:	049b      	lsls	r3, r3, #18
    a3a6:	0c9b      	lsrs	r3, r3, #18
    a3a8:	b29b      	uxth	r3, r3
    a3aa:	001a      	movs	r2, r3
    a3ac:	4b17      	ldr	r3, [pc, #92]	; (a40c <_usb_host_interrupt_handler+0x144>)
    a3ae:	447b      	add	r3, pc
    a3b0:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    a3b2:	4b15      	ldr	r3, [pc, #84]	; (a408 <_usb_host_interrupt_handler+0x140>)
    a3b4:	58e2      	ldr	r2, [r4, r3]
    a3b6:	687b      	ldr	r3, [r7, #4]
    a3b8:	015b      	lsls	r3, r3, #5
    a3ba:	18d3      	adds	r3, r2, r3
    a3bc:	685b      	ldr	r3, [r3, #4]
    a3be:	011b      	lsls	r3, r3, #4
    a3c0:	0c9b      	lsrs	r3, r3, #18
    a3c2:	b29b      	uxth	r3, r3
    a3c4:	001a      	movs	r2, r3
    a3c6:	4b12      	ldr	r3, [pc, #72]	; (a410 <_usb_host_interrupt_handler+0x148>)
    a3c8:	447b      	add	r3, pc
    a3ca:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    a3cc:	4b0e      	ldr	r3, [pc, #56]	; (a408 <_usb_host_interrupt_handler+0x140>)
    a3ce:	58e2      	ldr	r2, [r4, r3]
    a3d0:	687b      	ldr	r3, [r7, #4]
    a3d2:	015b      	lsls	r3, r3, #5
    a3d4:	18d3      	adds	r3, r2, r3
    a3d6:	685a      	ldr	r2, [r3, #4]
    a3d8:	0b92      	lsrs	r2, r2, #14
    a3da:	0392      	lsls	r2, r2, #14
    a3dc:	605a      	str	r2, [r3, #4]
    a3de:	e04e      	b.n	a47e <_usb_host_interrupt_handler+0x1b6>
    a3e0:	00007b00 	.word	0x00007b00
    a3e4:	1fff6344 	.word	0x1fff6344
    a3e8:	1fff6334 	.word	0x1fff6334
    a3ec:	00000270 	.word	0x00000270
    a3f0:	1fff630e 	.word	0x1fff630e
    a3f4:	000000ac 	.word	0x000000ac
    a3f8:	1fff62d2 	.word	0x1fff62d2
    a3fc:	1fff62bc 	.word	0x1fff62bc
    a400:	1fff62a2 	.word	0x1fff62a2
    a404:	1fff6298 	.word	0x1fff6298
    a408:	00000020 	.word	0x00000020
    a40c:	1fff626e 	.word	0x1fff626e
    a410:	1fff6254 	.word	0x1fff6254
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    a414:	4b99      	ldr	r3, [pc, #612]	; (a67c <_usb_host_interrupt_handler+0x3b4>)
    a416:	58e2      	ldr	r2, [r4, r3]
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	015b      	lsls	r3, r3, #5
    a41c:	18d3      	adds	r3, r2, r3
    a41e:	685b      	ldr	r3, [r3, #4]
    a420:	011b      	lsls	r3, r3, #4
    a422:	0c9b      	lsrs	r3, r3, #18
    a424:	b29b      	uxth	r3, r3
    a426:	001a      	movs	r2, r3
    a428:	4b95      	ldr	r3, [pc, #596]	; (a680 <_usb_host_interrupt_handler+0x3b8>)
    a42a:	447b      	add	r3, pc
    a42c:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    a42e:	4b93      	ldr	r3, [pc, #588]	; (a67c <_usb_host_interrupt_handler+0x3b4>)
    a430:	58e2      	ldr	r2, [r4, r3]
    a432:	687b      	ldr	r3, [r7, #4]
    a434:	015b      	lsls	r3, r3, #5
    a436:	18d3      	adds	r3, r2, r3
    a438:	685b      	ldr	r3, [r3, #4]
    a43a:	049b      	lsls	r3, r3, #18
    a43c:	0c9b      	lsrs	r3, r3, #18
    a43e:	b29b      	uxth	r3, r3
    a440:	001a      	movs	r2, r3
    a442:	4b90      	ldr	r3, [pc, #576]	; (a684 <_usb_host_interrupt_handler+0x3bc>)
    a444:	447b      	add	r3, pc
    a446:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    a448:	4b8c      	ldr	r3, [pc, #560]	; (a67c <_usb_host_interrupt_handler+0x3b4>)
    a44a:	58e2      	ldr	r2, [r4, r3]
    a44c:	687b      	ldr	r3, [r7, #4]
    a44e:	015b      	lsls	r3, r3, #5
    a450:	18d3      	adds	r3, r2, r3
    a452:	685a      	ldr	r2, [r3, #4]
    a454:	498c      	ldr	r1, [pc, #560]	; (a688 <_usb_host_interrupt_handler+0x3c0>)
    a456:	400a      	ands	r2, r1
    a458:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    a45a:	4b8c      	ldr	r3, [pc, #560]	; (a68c <_usb_host_interrupt_handler+0x3c4>)
    a45c:	447b      	add	r3, pc
    a45e:	885b      	ldrh	r3, [r3, #2]
    a460:	2b00      	cmp	r3, #0
    a462:	d10c      	bne.n	a47e <_usb_host_interrupt_handler+0x1b6>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    a464:	4b85      	ldr	r3, [pc, #532]	; (a67c <_usb_host_interrupt_handler+0x3b4>)
    a466:	58e2      	ldr	r2, [r4, r3]
    a468:	687b      	ldr	r3, [r7, #4]
    a46a:	015b      	lsls	r3, r3, #5
    a46c:	18d3      	adds	r3, r2, r3
    a46e:	685b      	ldr	r3, [r3, #4]
    a470:	049b      	lsls	r3, r3, #18
    a472:	0c9b      	lsrs	r3, r3, #18
    a474:	b29b      	uxth	r3, r3
    a476:	001a      	movs	r2, r3
    a478:	4b85      	ldr	r3, [pc, #532]	; (a690 <_usb_host_interrupt_handler+0x3c8>)
    a47a:	447b      	add	r3, pc
    a47c:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    a47e:	4b85      	ldr	r3, [pc, #532]	; (a694 <_usb_host_interrupt_handler+0x3cc>)
    a480:	447b      	add	r3, pc
    a482:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    a484:	687b      	ldr	r3, [r7, #4]
    a486:	3302      	adds	r3, #2
    a488:	011b      	lsls	r3, r3, #4
    a48a:	18d3      	adds	r3, r2, r3
    a48c:	3304      	adds	r3, #4
    a48e:	681a      	ldr	r2, [r3, #0]
    a490:	4b81      	ldr	r3, [pc, #516]	; (a698 <_usb_host_interrupt_handler+0x3d0>)
    a492:	447b      	add	r3, pc
    a494:	681b      	ldr	r3, [r3, #0]
    a496:	4981      	ldr	r1, [pc, #516]	; (a69c <_usb_host_interrupt_handler+0x3d4>)
    a498:	4479      	add	r1, pc
    a49a:	0018      	movs	r0, r3
    a49c:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    a49e:	683b      	ldr	r3, [r7, #0]
    a4a0:	2204      	movs	r2, #4
    a4a2:	4013      	ands	r3, r2
    a4a4:	d017      	beq.n	a4d6 <_usb_host_interrupt_handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    a4a6:	2201      	movs	r2, #1
    a4a8:	687b      	ldr	r3, [r7, #4]
    a4aa:	409a      	lsls	r2, r3
    a4ac:	0013      	movs	r3, r2
    a4ae:	43db      	mvns	r3, r3
    a4b0:	001a      	movs	r2, r3
    a4b2:	4b7b      	ldr	r3, [pc, #492]	; (a6a0 <_usb_host_interrupt_handler+0x3d8>)
    a4b4:	58e3      	ldr	r3, [r4, r3]
    a4b6:	681b      	ldr	r3, [r3, #0]
    a4b8:	401a      	ands	r2, r3
    a4ba:	4b79      	ldr	r3, [pc, #484]	; (a6a0 <_usb_host_interrupt_handler+0x3d8>)
    a4bc:	58e3      	ldr	r3, [r4, r3]
    a4be:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    a4c0:	4b78      	ldr	r3, [pc, #480]	; (a6a4 <_usb_host_interrupt_handler+0x3dc>)
    a4c2:	447b      	add	r3, pc
    a4c4:	681b      	ldr	r3, [r3, #0]
    a4c6:	681a      	ldr	r2, [r3, #0]
    a4c8:	687b      	ldr	r3, [r7, #4]
    a4ca:	3308      	adds	r3, #8
    a4cc:	015b      	lsls	r3, r3, #5
    a4ce:	18d3      	adds	r3, r2, r3
    a4d0:	3307      	adds	r3, #7
    a4d2:	2204      	movs	r2, #4
    a4d4:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    a4d6:	683b      	ldr	r3, [r7, #0]
    a4d8:	2208      	movs	r2, #8
    a4da:	4013      	ands	r3, r2
    a4dc:	d046      	beq.n	a56c <_usb_host_interrupt_handler+0x2a4>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    a4de:	2201      	movs	r2, #1
    a4e0:	687b      	ldr	r3, [r7, #4]
    a4e2:	409a      	lsls	r2, r3
    a4e4:	0013      	movs	r3, r2
    a4e6:	43db      	mvns	r3, r3
    a4e8:	001a      	movs	r2, r3
    a4ea:	4b6d      	ldr	r3, [pc, #436]	; (a6a0 <_usb_host_interrupt_handler+0x3d8>)
    a4ec:	58e3      	ldr	r3, [r4, r3]
    a4ee:	681b      	ldr	r3, [r3, #0]
    a4f0:	401a      	ands	r2, r3
    a4f2:	4b6b      	ldr	r3, [pc, #428]	; (a6a0 <_usb_host_interrupt_handler+0x3d8>)
    a4f4:	58e3      	ldr	r3, [r4, r3]
    a4f6:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    a4f8:	4b6b      	ldr	r3, [pc, #428]	; (a6a8 <_usb_host_interrupt_handler+0x3e0>)
    a4fa:	447b      	add	r3, pc
    a4fc:	681b      	ldr	r3, [r3, #0]
    a4fe:	681a      	ldr	r2, [r3, #0]
    a500:	687b      	ldr	r3, [r7, #4]
    a502:	3308      	adds	r3, #8
    a504:	015b      	lsls	r3, r3, #5
    a506:	18d3      	adds	r3, r2, r3
    a508:	3307      	adds	r3, #7
    a50a:	2208      	movs	r2, #8
    a50c:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    a50e:	4b67      	ldr	r3, [pc, #412]	; (a6ac <_usb_host_interrupt_handler+0x3e4>)
    a510:	447b      	add	r3, pc
    a512:	681a      	ldr	r2, [r3, #0]
    a514:	21ae      	movs	r1, #174	; 0xae
    a516:	687b      	ldr	r3, [r7, #4]
    a518:	18d3      	adds	r3, r2, r3
    a51a:	185b      	adds	r3, r3, r1
    a51c:	781b      	ldrb	r3, [r3, #0]
    a51e:	001a      	movs	r2, r3
    a520:	2302      	movs	r3, #2
    a522:	4013      	ands	r3, r2
    a524:	d022      	beq.n	a56c <_usb_host_interrupt_handler+0x2a4>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    a526:	687b      	ldr	r3, [r7, #4]
    a528:	b2da      	uxtb	r2, r3
    a52a:	4b61      	ldr	r3, [pc, #388]	; (a6b0 <_usb_host_interrupt_handler+0x3e8>)
    a52c:	447b      	add	r3, pc
    a52e:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    a530:	4b52      	ldr	r3, [pc, #328]	; (a67c <_usb_host_interrupt_handler+0x3b4>)
    a532:	58e2      	ldr	r2, [r4, r3]
    a534:	687b      	ldr	r3, [r7, #4]
    a536:	015b      	lsls	r3, r3, #5
    a538:	18d3      	adds	r3, r2, r3
    a53a:	330e      	adds	r3, #14
    a53c:	881b      	ldrh	r3, [r3, #0]
    a53e:	b29b      	uxth	r3, r3
    a540:	b2db      	uxtb	r3, r3
    a542:	221f      	movs	r2, #31
    a544:	4013      	ands	r3, r2
    a546:	b2da      	uxtb	r2, r3
				pipe_callback_para.pipe_error_status =
    a548:	4b5a      	ldr	r3, [pc, #360]	; (a6b4 <_usb_host_interrupt_handler+0x3ec>)
    a54a:	447b      	add	r3, pc
    a54c:	705a      	strb	r2, [r3, #1]
				(_usb_instances->host_pipe_callback[pipe_int]
    a54e:	4b5a      	ldr	r3, [pc, #360]	; (a6b8 <_usb_host_interrupt_handler+0x3f0>)
    a550:	447b      	add	r3, pc
    a552:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    a554:	687b      	ldr	r3, [r7, #4]
    a556:	011b      	lsls	r3, r3, #4
    a558:	18d3      	adds	r3, r2, r3
    a55a:	3328      	adds	r3, #40	; 0x28
    a55c:	681a      	ldr	r2, [r3, #0]
    a55e:	4b57      	ldr	r3, [pc, #348]	; (a6bc <_usb_host_interrupt_handler+0x3f4>)
    a560:	447b      	add	r3, pc
    a562:	681b      	ldr	r3, [r3, #0]
    a564:	4956      	ldr	r1, [pc, #344]	; (a6c0 <_usb_host_interrupt_handler+0x3f8>)
    a566:	4479      	add	r1, pc
    a568:	0018      	movs	r0, r3
    a56a:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    a56c:	683b      	ldr	r3, [r7, #0]
    a56e:	2210      	movs	r2, #16
    a570:	4013      	ands	r3, r2
    a572:	d043      	beq.n	a5fc <_usb_host_interrupt_handler+0x334>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    a574:	2201      	movs	r2, #1
    a576:	687b      	ldr	r3, [r7, #4]
    a578:	409a      	lsls	r2, r3
    a57a:	0013      	movs	r3, r2
    a57c:	43db      	mvns	r3, r3
    a57e:	001a      	movs	r2, r3
    a580:	4b47      	ldr	r3, [pc, #284]	; (a6a0 <_usb_host_interrupt_handler+0x3d8>)
    a582:	58e3      	ldr	r3, [r4, r3]
    a584:	681b      	ldr	r3, [r3, #0]
    a586:	401a      	ands	r2, r3
    a588:	4b45      	ldr	r3, [pc, #276]	; (a6a0 <_usb_host_interrupt_handler+0x3d8>)
    a58a:	58e3      	ldr	r3, [r4, r3]
    a58c:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    a58e:	4b4d      	ldr	r3, [pc, #308]	; (a6c4 <_usb_host_interrupt_handler+0x3fc>)
    a590:	447b      	add	r3, pc
    a592:	681b      	ldr	r3, [r3, #0]
    a594:	681a      	ldr	r2, [r3, #0]
    a596:	687b      	ldr	r3, [r7, #4]
    a598:	3308      	adds	r3, #8
    a59a:	015b      	lsls	r3, r3, #5
    a59c:	18d3      	adds	r3, r2, r3
    a59e:	3307      	adds	r3, #7
    a5a0:	2210      	movs	r2, #16
    a5a2:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    a5a4:	4b48      	ldr	r3, [pc, #288]	; (a6c8 <_usb_host_interrupt_handler+0x400>)
    a5a6:	447b      	add	r3, pc
    a5a8:	681a      	ldr	r2, [r3, #0]
    a5aa:	21ae      	movs	r1, #174	; 0xae
    a5ac:	687b      	ldr	r3, [r7, #4]
    a5ae:	18d3      	adds	r3, r2, r3
    a5b0:	185b      	adds	r3, r3, r1
    a5b2:	781b      	ldrb	r3, [r3, #0]
    a5b4:	001a      	movs	r2, r3
    a5b6:	2304      	movs	r3, #4
    a5b8:	4013      	ands	r3, r2
    a5ba:	d01f      	beq.n	a5fc <_usb_host_interrupt_handler+0x334>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    a5bc:	687b      	ldr	r3, [r7, #4]
    a5be:	b2da      	uxtb	r2, r3
    a5c0:	4b42      	ldr	r3, [pc, #264]	; (a6cc <_usb_host_interrupt_handler+0x404>)
    a5c2:	447b      	add	r3, pc
    a5c4:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    a5c6:	4b2d      	ldr	r3, [pc, #180]	; (a67c <_usb_host_interrupt_handler+0x3b4>)
    a5c8:	58e2      	ldr	r2, [r4, r3]
    a5ca:	687b      	ldr	r3, [r7, #4]
    a5cc:	015b      	lsls	r3, r3, #5
    a5ce:	18d3      	adds	r3, r2, r3
    a5d0:	685b      	ldr	r3, [r3, #4]
    a5d2:	011b      	lsls	r3, r3, #4
    a5d4:	0c9b      	lsrs	r3, r3, #18
    a5d6:	b29b      	uxth	r3, r3
    a5d8:	001a      	movs	r2, r3
    a5da:	4b3d      	ldr	r3, [pc, #244]	; (a6d0 <_usb_host_interrupt_handler+0x408>)
    a5dc:	447b      	add	r3, pc
    a5de:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    a5e0:	4b3c      	ldr	r3, [pc, #240]	; (a6d4 <_usb_host_interrupt_handler+0x40c>)
    a5e2:	447b      	add	r3, pc
    a5e4:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    a5e6:	687b      	ldr	r3, [r7, #4]
    a5e8:	011b      	lsls	r3, r3, #4
    a5ea:	18d3      	adds	r3, r2, r3
    a5ec:	332c      	adds	r3, #44	; 0x2c
    a5ee:	681a      	ldr	r2, [r3, #0]
    a5f0:	4b39      	ldr	r3, [pc, #228]	; (a6d8 <_usb_host_interrupt_handler+0x410>)
    a5f2:	447b      	add	r3, pc
    a5f4:	681b      	ldr	r3, [r3, #0]
    a5f6:	2100      	movs	r1, #0
    a5f8:	0018      	movs	r0, r3
    a5fa:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    a5fc:	683b      	ldr	r3, [r7, #0]
    a5fe:	2220      	movs	r2, #32
    a600:	4013      	ands	r3, r2
    a602:	d100      	bne.n	a606 <_usb_host_interrupt_handler+0x33e>
    a604:	e170      	b.n	a8e8 <_usb_host_interrupt_handler+0x620>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    a606:	2201      	movs	r2, #1
    a608:	687b      	ldr	r3, [r7, #4]
    a60a:	409a      	lsls	r2, r3
    a60c:	0013      	movs	r3, r2
    a60e:	43db      	mvns	r3, r3
    a610:	001a      	movs	r2, r3
    a612:	4b23      	ldr	r3, [pc, #140]	; (a6a0 <_usb_host_interrupt_handler+0x3d8>)
    a614:	58e3      	ldr	r3, [r4, r3]
    a616:	681b      	ldr	r3, [r3, #0]
    a618:	401a      	ands	r2, r3
    a61a:	4b21      	ldr	r3, [pc, #132]	; (a6a0 <_usb_host_interrupt_handler+0x3d8>)
    a61c:	58e3      	ldr	r3, [r4, r3]
    a61e:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    a620:	4b2e      	ldr	r3, [pc, #184]	; (a6dc <_usb_host_interrupt_handler+0x414>)
    a622:	447b      	add	r3, pc
    a624:	681b      	ldr	r3, [r3, #0]
    a626:	681a      	ldr	r2, [r3, #0]
    a628:	687b      	ldr	r3, [r7, #4]
    a62a:	3308      	adds	r3, #8
    a62c:	015b      	lsls	r3, r3, #5
    a62e:	18d3      	adds	r3, r2, r3
    a630:	3307      	adds	r3, #7
    a632:	2220      	movs	r2, #32
    a634:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    a636:	4b2a      	ldr	r3, [pc, #168]	; (a6e0 <_usb_host_interrupt_handler+0x418>)
    a638:	447b      	add	r3, pc
    a63a:	681a      	ldr	r2, [r3, #0]
    a63c:	21ae      	movs	r1, #174	; 0xae
    a63e:	687b      	ldr	r3, [r7, #4]
    a640:	18d3      	adds	r3, r2, r3
    a642:	185b      	adds	r3, r3, r1
    a644:	781b      	ldrb	r3, [r3, #0]
    a646:	001a      	movs	r2, r3
    a648:	2308      	movs	r3, #8
    a64a:	4013      	ands	r3, r2
    a64c:	d100      	bne.n	a650 <_usb_host_interrupt_handler+0x388>
    a64e:	e14b      	b.n	a8e8 <_usb_host_interrupt_handler+0x620>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    a650:	687b      	ldr	r3, [r7, #4]
    a652:	b2da      	uxtb	r2, r3
    a654:	4b23      	ldr	r3, [pc, #140]	; (a6e4 <_usb_host_interrupt_handler+0x41c>)
    a656:	447b      	add	r3, pc
    a658:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    a65a:	4b23      	ldr	r3, [pc, #140]	; (a6e8 <_usb_host_interrupt_handler+0x420>)
    a65c:	447b      	add	r3, pc
    a65e:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    a660:	687b      	ldr	r3, [r7, #4]
    a662:	011b      	lsls	r3, r3, #4
    a664:	18d3      	adds	r3, r2, r3
    a666:	3330      	adds	r3, #48	; 0x30
    a668:	681a      	ldr	r2, [r3, #0]
    a66a:	4b20      	ldr	r3, [pc, #128]	; (a6ec <_usb_host_interrupt_handler+0x424>)
    a66c:	447b      	add	r3, pc
    a66e:	681b      	ldr	r3, [r3, #0]
    a670:	491f      	ldr	r1, [pc, #124]	; (a6f0 <_usb_host_interrupt_handler+0x428>)
    a672:	4479      	add	r1, pc
    a674:	0018      	movs	r0, r3
    a676:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    a678:	e136      	b.n	a8e8 <_usb_host_interrupt_handler+0x620>
    a67a:	46c0      	nop			; (mov r8, r8)
    a67c:	00000020 	.word	0x00000020
    a680:	1fff61f2 	.word	0x1fff61f2
    a684:	1fff61d8 	.word	0x1fff61d8
    a688:	f0003fff 	.word	0xf0003fff
    a68c:	1fff61c0 	.word	0x1fff61c0
    a690:	1fff61a2 	.word	0x1fff61a2
    a694:	1fff6198 	.word	0x1fff6198
    a698:	1fff6186 	.word	0x1fff6186
    a69c:	1fff6184 	.word	0x1fff6184
    a6a0:	000000ac 	.word	0x000000ac
    a6a4:	1fff6156 	.word	0x1fff6156
    a6a8:	1fff611e 	.word	0x1fff611e
    a6ac:	1fff6108 	.word	0x1fff6108
    a6b0:	1fff60f0 	.word	0x1fff60f0
    a6b4:	1fff60d2 	.word	0x1fff60d2
    a6b8:	1fff60c8 	.word	0x1fff60c8
    a6bc:	1fff60b8 	.word	0x1fff60b8
    a6c0:	1fff60b6 	.word	0x1fff60b6
    a6c4:	1fff6088 	.word	0x1fff6088
    a6c8:	1fff6072 	.word	0x1fff6072
    a6cc:	1fff605a 	.word	0x1fff605a
    a6d0:	1fff6040 	.word	0x1fff6040
    a6d4:	1fff6036 	.word	0x1fff6036
    a6d8:	1fff6026 	.word	0x1fff6026
    a6dc:	1fff5ff6 	.word	0x1fff5ff6
    a6e0:	1fff5fe0 	.word	0x1fff5fe0
    a6e4:	1fff5fc6 	.word	0x1fff5fc6
    a6e8:	1fff5fbc 	.word	0x1fff5fbc
    a6ec:	1fff5fac 	.word	0x1fff5fac
    a6f0:	1fff5faa 	.word	0x1fff5faa
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    a6f4:	4b7e      	ldr	r3, [pc, #504]	; (a8f0 <_usb_host_interrupt_handler+0x628>)
    a6f6:	447b      	add	r3, pc
    a6f8:	681b      	ldr	r3, [r3, #0]
    a6fa:	681b      	ldr	r3, [r3, #0]
    a6fc:	8b9b      	ldrh	r3, [r3, #28]
    a6fe:	b29b      	uxth	r3, r3
    a700:	603b      	str	r3, [r7, #0]
		if (flags & USB_HOST_INTFLAG_HSOF) {
    a702:	683b      	ldr	r3, [r7, #0]
    a704:	2204      	movs	r2, #4
    a706:	4013      	ands	r3, r2
    a708:	d017      	beq.n	a73a <_usb_host_interrupt_handler+0x472>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    a70a:	4b7a      	ldr	r3, [pc, #488]	; (a8f4 <_usb_host_interrupt_handler+0x62c>)
    a70c:	447b      	add	r3, pc
    a70e:	681b      	ldr	r3, [r3, #0]
    a710:	681b      	ldr	r3, [r3, #0]
    a712:	2204      	movs	r2, #4
    a714:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    a716:	4b78      	ldr	r3, [pc, #480]	; (a8f8 <_usb_host_interrupt_handler+0x630>)
    a718:	447b      	add	r3, pc
    a71a:	681b      	ldr	r3, [r3, #0]
    a71c:	22a5      	movs	r2, #165	; 0xa5
    a71e:	5c9b      	ldrb	r3, [r3, r2]
    a720:	001a      	movs	r2, r3
    a722:	2301      	movs	r3, #1
    a724:	4013      	ands	r3, r2
    a726:	d008      	beq.n	a73a <_usb_host_interrupt_handler+0x472>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    a728:	4b74      	ldr	r3, [pc, #464]	; (a8fc <_usb_host_interrupt_handler+0x634>)
    a72a:	447b      	add	r3, pc
    a72c:	681b      	ldr	r3, [r3, #0]
    a72e:	685a      	ldr	r2, [r3, #4]
    a730:	4b73      	ldr	r3, [pc, #460]	; (a900 <_usb_host_interrupt_handler+0x638>)
    a732:	447b      	add	r3, pc
    a734:	681b      	ldr	r3, [r3, #0]
    a736:	0018      	movs	r0, r3
    a738:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RST) {
    a73a:	683b      	ldr	r3, [r7, #0]
    a73c:	2208      	movs	r2, #8
    a73e:	4013      	ands	r3, r2
    a740:	d01b      	beq.n	a77a <_usb_host_interrupt_handler+0x4b2>
			host_pipe_job_busy_status = 0;
    a742:	4b70      	ldr	r3, [pc, #448]	; (a904 <_usb_host_interrupt_handler+0x63c>)
    a744:	58e3      	ldr	r3, [r4, r3]
    a746:	2200      	movs	r2, #0
    a748:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    a74a:	4b6f      	ldr	r3, [pc, #444]	; (a908 <_usb_host_interrupt_handler+0x640>)
    a74c:	447b      	add	r3, pc
    a74e:	681b      	ldr	r3, [r3, #0]
    a750:	681b      	ldr	r3, [r3, #0]
    a752:	2208      	movs	r2, #8
    a754:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    a756:	4b6d      	ldr	r3, [pc, #436]	; (a90c <_usb_host_interrupt_handler+0x644>)
    a758:	447b      	add	r3, pc
    a75a:	681b      	ldr	r3, [r3, #0]
    a75c:	22a5      	movs	r2, #165	; 0xa5
    a75e:	5c9b      	ldrb	r3, [r3, r2]
    a760:	001a      	movs	r2, r3
    a762:	2302      	movs	r3, #2
    a764:	4013      	ands	r3, r2
    a766:	d008      	beq.n	a77a <_usb_host_interrupt_handler+0x4b2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    a768:	4b69      	ldr	r3, [pc, #420]	; (a910 <_usb_host_interrupt_handler+0x648>)
    a76a:	447b      	add	r3, pc
    a76c:	681b      	ldr	r3, [r3, #0]
    a76e:	689a      	ldr	r2, [r3, #8]
    a770:	4b68      	ldr	r3, [pc, #416]	; (a914 <_usb_host_interrupt_handler+0x64c>)
    a772:	447b      	add	r3, pc
    a774:	681b      	ldr	r3, [r3, #0]
    a776:	0018      	movs	r0, r3
    a778:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    a77a:	683b      	ldr	r3, [r7, #0]
    a77c:	2240      	movs	r2, #64	; 0x40
    a77e:	4013      	ands	r3, r2
    a780:	d017      	beq.n	a7b2 <_usb_host_interrupt_handler+0x4ea>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    a782:	4b65      	ldr	r3, [pc, #404]	; (a918 <_usb_host_interrupt_handler+0x650>)
    a784:	447b      	add	r3, pc
    a786:	681b      	ldr	r3, [r3, #0]
    a788:	681b      	ldr	r3, [r3, #0]
    a78a:	2240      	movs	r2, #64	; 0x40
    a78c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    a78e:	4b63      	ldr	r3, [pc, #396]	; (a91c <_usb_host_interrupt_handler+0x654>)
    a790:	447b      	add	r3, pc
    a792:	681b      	ldr	r3, [r3, #0]
    a794:	22a5      	movs	r2, #165	; 0xa5
    a796:	5c9b      	ldrb	r3, [r3, r2]
    a798:	001a      	movs	r2, r3
    a79a:	2310      	movs	r3, #16
    a79c:	4013      	ands	r3, r2
    a79e:	d008      	beq.n	a7b2 <_usb_host_interrupt_handler+0x4ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    a7a0:	4b5f      	ldr	r3, [pc, #380]	; (a920 <_usb_host_interrupt_handler+0x658>)
    a7a2:	447b      	add	r3, pc
    a7a4:	681b      	ldr	r3, [r3, #0]
    a7a6:	695a      	ldr	r2, [r3, #20]
    a7a8:	4b5e      	ldr	r3, [pc, #376]	; (a924 <_usb_host_interrupt_handler+0x65c>)
    a7aa:	447b      	add	r3, pc
    a7ac:	681b      	ldr	r3, [r3, #0]
    a7ae:	0018      	movs	r0, r3
    a7b0:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    a7b2:	683b      	ldr	r3, [r7, #0]
    a7b4:	2220      	movs	r2, #32
    a7b6:	4013      	ands	r3, r2
    a7b8:	d017      	beq.n	a7ea <_usb_host_interrupt_handler+0x522>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    a7ba:	4b5b      	ldr	r3, [pc, #364]	; (a928 <_usb_host_interrupt_handler+0x660>)
    a7bc:	447b      	add	r3, pc
    a7be:	681b      	ldr	r3, [r3, #0]
    a7c0:	681b      	ldr	r3, [r3, #0]
    a7c2:	2220      	movs	r2, #32
    a7c4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    a7c6:	4b59      	ldr	r3, [pc, #356]	; (a92c <_usb_host_interrupt_handler+0x664>)
    a7c8:	447b      	add	r3, pc
    a7ca:	681b      	ldr	r3, [r3, #0]
    a7cc:	22a5      	movs	r2, #165	; 0xa5
    a7ce:	5c9b      	ldrb	r3, [r3, r2]
    a7d0:	001a      	movs	r2, r3
    a7d2:	2308      	movs	r3, #8
    a7d4:	4013      	ands	r3, r2
    a7d6:	d008      	beq.n	a7ea <_usb_host_interrupt_handler+0x522>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    a7d8:	4b55      	ldr	r3, [pc, #340]	; (a930 <_usb_host_interrupt_handler+0x668>)
    a7da:	447b      	add	r3, pc
    a7dc:	681b      	ldr	r3, [r3, #0]
    a7de:	691a      	ldr	r2, [r3, #16]
    a7e0:	4b54      	ldr	r3, [pc, #336]	; (a934 <_usb_host_interrupt_handler+0x66c>)
    a7e2:	447b      	add	r3, pc
    a7e4:	681b      	ldr	r3, [r3, #0]
    a7e6:	0018      	movs	r0, r3
    a7e8:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    a7ea:	683b      	ldr	r3, [r7, #0]
    a7ec:	2210      	movs	r2, #16
    a7ee:	4013      	ands	r3, r2
    a7f0:	d017      	beq.n	a822 <_usb_host_interrupt_handler+0x55a>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    a7f2:	4b51      	ldr	r3, [pc, #324]	; (a938 <_usb_host_interrupt_handler+0x670>)
    a7f4:	447b      	add	r3, pc
    a7f6:	681b      	ldr	r3, [r3, #0]
    a7f8:	681b      	ldr	r3, [r3, #0]
    a7fa:	2210      	movs	r2, #16
    a7fc:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    a7fe:	4b4f      	ldr	r3, [pc, #316]	; (a93c <_usb_host_interrupt_handler+0x674>)
    a800:	447b      	add	r3, pc
    a802:	681b      	ldr	r3, [r3, #0]
    a804:	22a5      	movs	r2, #165	; 0xa5
    a806:	5c9b      	ldrb	r3, [r3, r2]
    a808:	001a      	movs	r2, r3
    a80a:	2304      	movs	r3, #4
    a80c:	4013      	ands	r3, r2
    a80e:	d008      	beq.n	a822 <_usb_host_interrupt_handler+0x55a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    a810:	4b4b      	ldr	r3, [pc, #300]	; (a940 <_usb_host_interrupt_handler+0x678>)
    a812:	447b      	add	r3, pc
    a814:	681b      	ldr	r3, [r3, #0]
    a816:	68da      	ldr	r2, [r3, #12]
    a818:	4b4a      	ldr	r3, [pc, #296]	; (a944 <_usb_host_interrupt_handler+0x67c>)
    a81a:	447b      	add	r3, pc
    a81c:	681b      	ldr	r3, [r3, #0]
    a81e:	0018      	movs	r0, r3
    a820:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    a822:	683b      	ldr	r3, [r7, #0]
    a824:	2280      	movs	r2, #128	; 0x80
    a826:	4013      	ands	r3, r2
    a828:	d01b      	beq.n	a862 <_usb_host_interrupt_handler+0x59a>
			host_pipe_job_busy_status = 0;
    a82a:	4b36      	ldr	r3, [pc, #216]	; (a904 <_usb_host_interrupt_handler+0x63c>)
    a82c:	58e3      	ldr	r3, [r4, r3]
    a82e:	2200      	movs	r2, #0
    a830:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    a832:	4b45      	ldr	r3, [pc, #276]	; (a948 <_usb_host_interrupt_handler+0x680>)
    a834:	447b      	add	r3, pc
    a836:	681b      	ldr	r3, [r3, #0]
    a838:	681b      	ldr	r3, [r3, #0]
    a83a:	2280      	movs	r2, #128	; 0x80
    a83c:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    a83e:	4b43      	ldr	r3, [pc, #268]	; (a94c <_usb_host_interrupt_handler+0x684>)
    a840:	447b      	add	r3, pc
    a842:	681b      	ldr	r3, [r3, #0]
    a844:	22a5      	movs	r2, #165	; 0xa5
    a846:	5c9b      	ldrb	r3, [r3, r2]
    a848:	001a      	movs	r2, r3
    a84a:	2320      	movs	r3, #32
    a84c:	4013      	ands	r3, r2
    a84e:	d008      	beq.n	a862 <_usb_host_interrupt_handler+0x59a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    a850:	4b3f      	ldr	r3, [pc, #252]	; (a950 <_usb_host_interrupt_handler+0x688>)
    a852:	447b      	add	r3, pc
    a854:	681b      	ldr	r3, [r3, #0]
    a856:	699a      	ldr	r2, [r3, #24]
    a858:	4b3e      	ldr	r3, [pc, #248]	; (a954 <_usb_host_interrupt_handler+0x68c>)
    a85a:	447b      	add	r3, pc
    a85c:	681b      	ldr	r3, [r3, #0]
    a85e:	0018      	movs	r0, r3
    a860:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DCONN) {
    a862:	683a      	ldr	r2, [r7, #0]
    a864:	2380      	movs	r3, #128	; 0x80
    a866:	005b      	lsls	r3, r3, #1
    a868:	4013      	ands	r3, r2
    a86a:	d01c      	beq.n	a8a6 <_usb_host_interrupt_handler+0x5de>
			host_pipe_job_busy_status = 0;
    a86c:	4b25      	ldr	r3, [pc, #148]	; (a904 <_usb_host_interrupt_handler+0x63c>)
    a86e:	58e3      	ldr	r3, [r4, r3]
    a870:	2200      	movs	r2, #0
    a872:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    a874:	4b38      	ldr	r3, [pc, #224]	; (a958 <_usb_host_interrupt_handler+0x690>)
    a876:	447b      	add	r3, pc
    a878:	681b      	ldr	r3, [r3, #0]
    a87a:	681b      	ldr	r3, [r3, #0]
    a87c:	2280      	movs	r2, #128	; 0x80
    a87e:	0052      	lsls	r2, r2, #1
    a880:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    a882:	4b36      	ldr	r3, [pc, #216]	; (a95c <_usb_host_interrupt_handler+0x694>)
    a884:	447b      	add	r3, pc
    a886:	681b      	ldr	r3, [r3, #0]
    a888:	22a5      	movs	r2, #165	; 0xa5
    a88a:	5c9b      	ldrb	r3, [r3, r2]
    a88c:	001a      	movs	r2, r3
    a88e:	2340      	movs	r3, #64	; 0x40
    a890:	4013      	ands	r3, r2
    a892:	d008      	beq.n	a8a6 <_usb_host_interrupt_handler+0x5de>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    a894:	4b32      	ldr	r3, [pc, #200]	; (a960 <_usb_host_interrupt_handler+0x698>)
    a896:	447b      	add	r3, pc
    a898:	681b      	ldr	r3, [r3, #0]
    a89a:	69da      	ldr	r2, [r3, #28]
    a89c:	4b31      	ldr	r3, [pc, #196]	; (a964 <_usb_host_interrupt_handler+0x69c>)
    a89e:	447b      	add	r3, pc
    a8a0:	681b      	ldr	r3, [r3, #0]
    a8a2:	0018      	movs	r0, r3
    a8a4:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DDISC) {
    a8a6:	683a      	ldr	r2, [r7, #0]
    a8a8:	2380      	movs	r3, #128	; 0x80
    a8aa:	009b      	lsls	r3, r3, #2
    a8ac:	4013      	ands	r3, r2
    a8ae:	d01b      	beq.n	a8e8 <_usb_host_interrupt_handler+0x620>
			host_pipe_job_busy_status = 0;
    a8b0:	4b14      	ldr	r3, [pc, #80]	; (a904 <_usb_host_interrupt_handler+0x63c>)
    a8b2:	58e3      	ldr	r3, [r4, r3]
    a8b4:	2200      	movs	r2, #0
    a8b6:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    a8b8:	4b2b      	ldr	r3, [pc, #172]	; (a968 <_usb_host_interrupt_handler+0x6a0>)
    a8ba:	447b      	add	r3, pc
    a8bc:	681b      	ldr	r3, [r3, #0]
    a8be:	681b      	ldr	r3, [r3, #0]
    a8c0:	2280      	movs	r2, #128	; 0x80
    a8c2:	0092      	lsls	r2, r2, #2
    a8c4:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    a8c6:	4b29      	ldr	r3, [pc, #164]	; (a96c <_usb_host_interrupt_handler+0x6a4>)
    a8c8:	447b      	add	r3, pc
    a8ca:	681b      	ldr	r3, [r3, #0]
    a8cc:	22a5      	movs	r2, #165	; 0xa5
    a8ce:	5c9b      	ldrb	r3, [r3, r2]
    a8d0:	b25b      	sxtb	r3, r3
    a8d2:	2b00      	cmp	r3, #0
    a8d4:	da08      	bge.n	a8e8 <_usb_host_interrupt_handler+0x620>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    a8d6:	4b26      	ldr	r3, [pc, #152]	; (a970 <_usb_host_interrupt_handler+0x6a8>)
    a8d8:	447b      	add	r3, pc
    a8da:	681b      	ldr	r3, [r3, #0]
    a8dc:	6a1a      	ldr	r2, [r3, #32]
    a8de:	4b25      	ldr	r3, [pc, #148]	; (a974 <_usb_host_interrupt_handler+0x6ac>)
    a8e0:	447b      	add	r3, pc
    a8e2:	681b      	ldr	r3, [r3, #0]
    a8e4:	0018      	movs	r0, r3
    a8e6:	4790      	blx	r2
}
    a8e8:	46c0      	nop			; (mov r8, r8)
    a8ea:	46bd      	mov	sp, r7
    a8ec:	b003      	add	sp, #12
    a8ee:	bd90      	pop	{r4, r7, pc}
    a8f0:	1fff5f22 	.word	0x1fff5f22
    a8f4:	1fff5f0c 	.word	0x1fff5f0c
    a8f8:	1fff5f00 	.word	0x1fff5f00
    a8fc:	1fff5eee 	.word	0x1fff5eee
    a900:	1fff5ee6 	.word	0x1fff5ee6
    a904:	000000ac 	.word	0x000000ac
    a908:	1fff5ecc 	.word	0x1fff5ecc
    a90c:	1fff5ec0 	.word	0x1fff5ec0
    a910:	1fff5eae 	.word	0x1fff5eae
    a914:	1fff5ea6 	.word	0x1fff5ea6
    a918:	1fff5e94 	.word	0x1fff5e94
    a91c:	1fff5e88 	.word	0x1fff5e88
    a920:	1fff5e76 	.word	0x1fff5e76
    a924:	1fff5e6e 	.word	0x1fff5e6e
    a928:	1fff5e5c 	.word	0x1fff5e5c
    a92c:	1fff5e50 	.word	0x1fff5e50
    a930:	1fff5e3e 	.word	0x1fff5e3e
    a934:	1fff5e36 	.word	0x1fff5e36
    a938:	1fff5e24 	.word	0x1fff5e24
    a93c:	1fff5e18 	.word	0x1fff5e18
    a940:	1fff5e06 	.word	0x1fff5e06
    a944:	1fff5dfe 	.word	0x1fff5dfe
    a948:	1fff5de4 	.word	0x1fff5de4
    a94c:	1fff5dd8 	.word	0x1fff5dd8
    a950:	1fff5dc6 	.word	0x1fff5dc6
    a954:	1fff5dbe 	.word	0x1fff5dbe
    a958:	1fff5da2 	.word	0x1fff5da2
    a95c:	1fff5d94 	.word	0x1fff5d94
    a960:	1fff5d82 	.word	0x1fff5d82
    a964:	1fff5d7a 	.word	0x1fff5d7a
    a968:	1fff5d5e 	.word	0x1fff5d5e
    a96c:	1fff5d50 	.word	0x1fff5d50
    a970:	1fff5d40 	.word	0x1fff5d40
    a974:	1fff5d38 	.word	0x1fff5d38

0000a978 <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    a978:	b580      	push	{r7, lr}
    a97a:	b084      	sub	sp, #16
    a97c:	af00      	add	r7, sp, #0
    a97e:	60f8      	str	r0, [r7, #12]
    a980:	607a      	str	r2, [r7, #4]
    a982:	230b      	movs	r3, #11
    a984:	18fb      	adds	r3, r7, r3
    a986:	1c0a      	adds	r2, r1, #0
    a988:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    a98a:	230b      	movs	r3, #11
    a98c:	18fb      	adds	r3, r7, r3
    a98e:	781a      	ldrb	r2, [r3, #0]
    a990:	68fb      	ldr	r3, [r7, #12]
    a992:	322e      	adds	r2, #46	; 0x2e
    a994:	0092      	lsls	r2, r2, #2
    a996:	6879      	ldr	r1, [r7, #4]
    a998:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    a99a:	68fa      	ldr	r2, [r7, #12]
    a99c:	23aa      	movs	r3, #170	; 0xaa
    a99e:	005b      	lsls	r3, r3, #1
    a9a0:	5ad2      	ldrh	r2, [r2, r3]
    a9a2:	230b      	movs	r3, #11
    a9a4:	18fb      	adds	r3, r7, r3
    a9a6:	7819      	ldrb	r1, [r3, #0]
    a9a8:	4b07      	ldr	r3, [pc, #28]	; (a9c8 <usb_device_register_callback+0x50>)
    a9aa:	447b      	add	r3, pc
    a9ac:	0049      	lsls	r1, r1, #1
    a9ae:	5acb      	ldrh	r3, [r1, r3]
    a9b0:	4313      	orrs	r3, r2
    a9b2:	b299      	uxth	r1, r3
    a9b4:	68fa      	ldr	r2, [r7, #12]
    a9b6:	23aa      	movs	r3, #170	; 0xaa
    a9b8:	005b      	lsls	r3, r3, #1
    a9ba:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    a9bc:	2300      	movs	r3, #0
}
    a9be:	0018      	movs	r0, r3
    a9c0:	46bd      	mov	sp, r7
    a9c2:	b004      	add	sp, #16
    a9c4:	bd80      	pop	{r7, pc}
    a9c6:	46c0      	nop			; (mov r8, r8)
    a9c8:	0000734a 	.word	0x0000734a

0000a9cc <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    a9cc:	b580      	push	{r7, lr}
    a9ce:	b082      	sub	sp, #8
    a9d0:	af00      	add	r7, sp, #0
    a9d2:	6078      	str	r0, [r7, #4]
    a9d4:	000a      	movs	r2, r1
    a9d6:	1cfb      	adds	r3, r7, #3
    a9d8:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    a9da:	687b      	ldr	r3, [r7, #4]
    a9dc:	681b      	ldr	r3, [r3, #0]
    a9de:	1cfa      	adds	r2, r7, #3
    a9e0:	7811      	ldrb	r1, [r2, #0]
    a9e2:	4a11      	ldr	r2, [pc, #68]	; (aa28 <usb_device_enable_callback+0x5c>)
    a9e4:	447a      	add	r2, pc
    a9e6:	0049      	lsls	r1, r1, #1
    a9e8:	5a8a      	ldrh	r2, [r1, r2]
    a9ea:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    a9ec:	687a      	ldr	r2, [r7, #4]
    a9ee:	23ab      	movs	r3, #171	; 0xab
    a9f0:	005b      	lsls	r3, r3, #1
    a9f2:	5ad2      	ldrh	r2, [r2, r3]
    a9f4:	1cfb      	adds	r3, r7, #3
    a9f6:	7819      	ldrb	r1, [r3, #0]
    a9f8:	4b0c      	ldr	r3, [pc, #48]	; (aa2c <usb_device_enable_callback+0x60>)
    a9fa:	447b      	add	r3, pc
    a9fc:	0049      	lsls	r1, r1, #1
    a9fe:	5acb      	ldrh	r3, [r1, r3]
    aa00:	4313      	orrs	r3, r2
    aa02:	b299      	uxth	r1, r3
    aa04:	687a      	ldr	r2, [r7, #4]
    aa06:	23ab      	movs	r3, #171	; 0xab
    aa08:	005b      	lsls	r3, r3, #1
    aa0a:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    aa0c:	687b      	ldr	r3, [r7, #4]
    aa0e:	681b      	ldr	r3, [r3, #0]
    aa10:	1cfa      	adds	r2, r7, #3
    aa12:	7811      	ldrb	r1, [r2, #0]
    aa14:	4a06      	ldr	r2, [pc, #24]	; (aa30 <usb_device_enable_callback+0x64>)
    aa16:	447a      	add	r2, pc
    aa18:	0049      	lsls	r1, r1, #1
    aa1a:	5a8a      	ldrh	r2, [r1, r2]
    aa1c:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    aa1e:	2300      	movs	r3, #0
}
    aa20:	0018      	movs	r0, r3
    aa22:	46bd      	mov	sp, r7
    aa24:	b002      	add	sp, #8
    aa26:	bd80      	pop	{r7, pc}
    aa28:	00007310 	.word	0x00007310
    aa2c:	000072fa 	.word	0x000072fa
    aa30:	000072de 	.word	0x000072de

0000aa34 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    aa34:	b580      	push	{r7, lr}
    aa36:	b082      	sub	sp, #8
    aa38:	af00      	add	r7, sp, #0
    aa3a:	6078      	str	r0, [r7, #4]
    aa3c:	000a      	movs	r2, r1
    aa3e:	1cfb      	adds	r3, r7, #3
    aa40:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    aa42:	687a      	ldr	r2, [r7, #4]
    aa44:	23ab      	movs	r3, #171	; 0xab
    aa46:	005b      	lsls	r3, r3, #1
    aa48:	5ad3      	ldrh	r3, [r2, r3]
    aa4a:	b21b      	sxth	r3, r3
    aa4c:	1cfa      	adds	r2, r7, #3
    aa4e:	7811      	ldrb	r1, [r2, #0]
    aa50:	4a0d      	ldr	r2, [pc, #52]	; (aa88 <usb_device_disable_callback+0x54>)
    aa52:	447a      	add	r2, pc
    aa54:	0049      	lsls	r1, r1, #1
    aa56:	5a8a      	ldrh	r2, [r1, r2]
    aa58:	b212      	sxth	r2, r2
    aa5a:	43d2      	mvns	r2, r2
    aa5c:	b212      	sxth	r2, r2
    aa5e:	4013      	ands	r3, r2
    aa60:	b21b      	sxth	r3, r3
    aa62:	b299      	uxth	r1, r3
    aa64:	687a      	ldr	r2, [r7, #4]
    aa66:	23ab      	movs	r3, #171	; 0xab
    aa68:	005b      	lsls	r3, r3, #1
    aa6a:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    aa6c:	687b      	ldr	r3, [r7, #4]
    aa6e:	681b      	ldr	r3, [r3, #0]
    aa70:	1cfa      	adds	r2, r7, #3
    aa72:	7811      	ldrb	r1, [r2, #0]
    aa74:	4a05      	ldr	r2, [pc, #20]	; (aa8c <usb_device_disable_callback+0x58>)
    aa76:	447a      	add	r2, pc
    aa78:	0049      	lsls	r1, r1, #1
    aa7a:	5a8a      	ldrh	r2, [r1, r2]
    aa7c:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    aa7e:	2300      	movs	r3, #0
}
    aa80:	0018      	movs	r0, r3
    aa82:	46bd      	mov	sp, r7
    aa84:	b002      	add	sp, #8
    aa86:	bd80      	pop	{r7, pc}
    aa88:	000072a2 	.word	0x000072a2
    aa8c:	0000727e 	.word	0x0000727e

0000aa90 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    aa90:	b580      	push	{r7, lr}
    aa92:	b084      	sub	sp, #16
    aa94:	af00      	add	r7, sp, #0
    aa96:	60f8      	str	r0, [r7, #12]
    aa98:	0008      	movs	r0, r1
    aa9a:	0011      	movs	r1, r2
    aa9c:	607b      	str	r3, [r7, #4]
    aa9e:	230b      	movs	r3, #11
    aaa0:	18fb      	adds	r3, r7, r3
    aaa2:	1c02      	adds	r2, r0, #0
    aaa4:	701a      	strb	r2, [r3, #0]
    aaa6:	230a      	movs	r3, #10
    aaa8:	18fb      	adds	r3, r7, r3
    aaaa:	1c0a      	adds	r2, r1, #0
    aaac:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    aaae:	230b      	movs	r3, #11
    aab0:	18fb      	adds	r3, r7, r3
    aab2:	7819      	ldrb	r1, [r3, #0]
    aab4:	230a      	movs	r3, #10
    aab6:	18fb      	adds	r3, r7, r3
    aab8:	781b      	ldrb	r3, [r3, #0]
    aaba:	68fa      	ldr	r2, [r7, #12]
    aabc:	0089      	lsls	r1, r1, #2
    aabe:	18cb      	adds	r3, r1, r3
    aac0:	3334      	adds	r3, #52	; 0x34
    aac2:	009b      	lsls	r3, r3, #2
    aac4:	18d3      	adds	r3, r2, r3
    aac6:	3304      	adds	r3, #4
    aac8:	687a      	ldr	r2, [r7, #4]
    aaca:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    aacc:	230b      	movs	r3, #11
    aace:	18fb      	adds	r3, r7, r3
    aad0:	781a      	ldrb	r2, [r3, #0]
    aad2:	230b      	movs	r3, #11
    aad4:	18fb      	adds	r3, r7, r3
    aad6:	7819      	ldrb	r1, [r3, #0]
    aad8:	68f8      	ldr	r0, [r7, #12]
    aada:	23ac      	movs	r3, #172	; 0xac
    aadc:	005b      	lsls	r3, r3, #1
    aade:	1841      	adds	r1, r0, r1
    aae0:	18cb      	adds	r3, r1, r3
    aae2:	7819      	ldrb	r1, [r3, #0]
    aae4:	230a      	movs	r3, #10
    aae6:	18fb      	adds	r3, r7, r3
    aae8:	781b      	ldrb	r3, [r3, #0]
    aaea:	4808      	ldr	r0, [pc, #32]	; (ab0c <usb_device_endpoint_register_callback+0x7c>)
    aaec:	4478      	add	r0, pc
    aaee:	5cc3      	ldrb	r3, [r0, r3]
    aaf0:	430b      	orrs	r3, r1
    aaf2:	b2d8      	uxtb	r0, r3
    aaf4:	68f9      	ldr	r1, [r7, #12]
    aaf6:	23ac      	movs	r3, #172	; 0xac
    aaf8:	005b      	lsls	r3, r3, #1
    aafa:	188a      	adds	r2, r1, r2
    aafc:	18d3      	adds	r3, r2, r3
    aafe:	1c02      	adds	r2, r0, #0
    ab00:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    ab02:	2300      	movs	r3, #0
}
    ab04:	0018      	movs	r0, r3
    ab06:	46bd      	mov	sp, r7
    ab08:	b004      	add	sp, #16
    ab0a:	bd80      	pop	{r7, pc}
    ab0c:	00007218 	.word	0x00007218

0000ab10 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    ab10:	b580      	push	{r7, lr}
    ab12:	b082      	sub	sp, #8
    ab14:	af00      	add	r7, sp, #0
    ab16:	6078      	str	r0, [r7, #4]
    ab18:	0008      	movs	r0, r1
    ab1a:	0011      	movs	r1, r2
    ab1c:	1cfb      	adds	r3, r7, #3
    ab1e:	1c02      	adds	r2, r0, #0
    ab20:	701a      	strb	r2, [r3, #0]
    ab22:	1cbb      	adds	r3, r7, #2
    ab24:	1c0a      	adds	r2, r1, #0
    ab26:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    ab28:	1cfb      	adds	r3, r7, #3
    ab2a:	7819      	ldrb	r1, [r3, #0]
    ab2c:	1cbb      	adds	r3, r7, #2
    ab2e:	781b      	ldrb	r3, [r3, #0]
    ab30:	687a      	ldr	r2, [r7, #4]
    ab32:	0089      	lsls	r1, r1, #2
    ab34:	18cb      	adds	r3, r1, r3
    ab36:	3334      	adds	r3, #52	; 0x34
    ab38:	009b      	lsls	r3, r3, #2
    ab3a:	18d3      	adds	r3, r2, r3
    ab3c:	3304      	adds	r3, #4
    ab3e:	2200      	movs	r2, #0
    ab40:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    ab42:	1cfb      	adds	r3, r7, #3
    ab44:	781a      	ldrb	r2, [r3, #0]
    ab46:	1cfb      	adds	r3, r7, #3
    ab48:	7819      	ldrb	r1, [r3, #0]
    ab4a:	6878      	ldr	r0, [r7, #4]
    ab4c:	23ac      	movs	r3, #172	; 0xac
    ab4e:	005b      	lsls	r3, r3, #1
    ab50:	1841      	adds	r1, r0, r1
    ab52:	18cb      	adds	r3, r1, r3
    ab54:	781b      	ldrb	r3, [r3, #0]
    ab56:	b25b      	sxtb	r3, r3
    ab58:	1cb9      	adds	r1, r7, #2
    ab5a:	7809      	ldrb	r1, [r1, #0]
    ab5c:	480a      	ldr	r0, [pc, #40]	; (ab88 <usb_device_endpoint_unregister_callback+0x78>)
    ab5e:	4478      	add	r0, pc
    ab60:	5c41      	ldrb	r1, [r0, r1]
    ab62:	b249      	sxtb	r1, r1
    ab64:	43c9      	mvns	r1, r1
    ab66:	b249      	sxtb	r1, r1
    ab68:	400b      	ands	r3, r1
    ab6a:	b25b      	sxtb	r3, r3
    ab6c:	b2d8      	uxtb	r0, r3
    ab6e:	6879      	ldr	r1, [r7, #4]
    ab70:	23ac      	movs	r3, #172	; 0xac
    ab72:	005b      	lsls	r3, r3, #1
    ab74:	188a      	adds	r2, r1, r2
    ab76:	18d3      	adds	r3, r2, r3
    ab78:	1c02      	adds	r2, r0, #0
    ab7a:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    ab7c:	2300      	movs	r3, #0
}
    ab7e:	0018      	movs	r0, r3
    ab80:	46bd      	mov	sp, r7
    ab82:	b002      	add	sp, #8
    ab84:	bd80      	pop	{r7, pc}
    ab86:	46c0      	nop			; (mov r8, r8)
    ab88:	000071a6 	.word	0x000071a6

0000ab8c <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    ab8c:	b580      	push	{r7, lr}
    ab8e:	b084      	sub	sp, #16
    ab90:	af00      	add	r7, sp, #0
    ab92:	6078      	str	r0, [r7, #4]
    ab94:	0008      	movs	r0, r1
    ab96:	0011      	movs	r1, r2
    ab98:	1cfb      	adds	r3, r7, #3
    ab9a:	1c02      	adds	r2, r0, #0
    ab9c:	701a      	strb	r2, [r3, #0]
    ab9e:	1cbb      	adds	r3, r7, #2
    aba0:	1c0a      	adds	r2, r1, #0
    aba2:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    aba4:	230f      	movs	r3, #15
    aba6:	18fb      	adds	r3, r7, r3
    aba8:	1cfa      	adds	r2, r7, #3
    abaa:	7812      	ldrb	r2, [r2, #0]
    abac:	210f      	movs	r1, #15
    abae:	400a      	ands	r2, r1
    abb0:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    abb2:	230f      	movs	r3, #15
    abb4:	18fb      	adds	r3, r7, r3
    abb6:	781a      	ldrb	r2, [r3, #0]
    abb8:	230f      	movs	r3, #15
    abba:	18fb      	adds	r3, r7, r3
    abbc:	7819      	ldrb	r1, [r3, #0]
    abbe:	6878      	ldr	r0, [r7, #4]
    abc0:	23b0      	movs	r3, #176	; 0xb0
    abc2:	005b      	lsls	r3, r3, #1
    abc4:	1841      	adds	r1, r0, r1
    abc6:	18cb      	adds	r3, r1, r3
    abc8:	7819      	ldrb	r1, [r3, #0]
    abca:	1cbb      	adds	r3, r7, #2
    abcc:	781b      	ldrb	r3, [r3, #0]
    abce:	4855      	ldr	r0, [pc, #340]	; (ad24 <usb_device_endpoint_enable_callback+0x198>)
    abd0:	4478      	add	r0, pc
    abd2:	5cc3      	ldrb	r3, [r0, r3]
    abd4:	430b      	orrs	r3, r1
    abd6:	b2d8      	uxtb	r0, r3
    abd8:	6879      	ldr	r1, [r7, #4]
    abda:	23b0      	movs	r3, #176	; 0xb0
    abdc:	005b      	lsls	r3, r3, #1
    abde:	188a      	adds	r2, r1, r2
    abe0:	18d3      	adds	r3, r2, r3
    abe2:	1c02      	adds	r2, r0, #0
    abe4:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    abe6:	1cbb      	adds	r3, r7, #2
    abe8:	781b      	ldrb	r3, [r3, #0]
    abea:	2b00      	cmp	r3, #0
    abec:	d12f      	bne.n	ac4e <usb_device_endpoint_enable_callback+0xc2>
		if (ep_num == 0) { // control endpoint
    abee:	230f      	movs	r3, #15
    abf0:	18fb      	adds	r3, r7, r3
    abf2:	781b      	ldrb	r3, [r3, #0]
    abf4:	2b00      	cmp	r3, #0
    abf6:	d10c      	bne.n	ac12 <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    abf8:	687b      	ldr	r3, [r7, #4]
    abfa:	6819      	ldr	r1, [r3, #0]
    abfc:	230f      	movs	r3, #15
    abfe:	18fb      	adds	r3, r7, r3
    ac00:	781a      	ldrb	r2, [r3, #0]
    ac02:	230a      	movs	r3, #10
    ac04:	33ff      	adds	r3, #255	; 0xff
    ac06:	0152      	lsls	r2, r2, #5
    ac08:	188a      	adds	r2, r1, r2
    ac0a:	18d3      	adds	r3, r2, r3
    ac0c:	2203      	movs	r2, #3
    ac0e:	701a      	strb	r2, [r3, #0]
    ac10:	e01d      	b.n	ac4e <usb_device_endpoint_enable_callback+0xc2>
		} else if (ep & USB_EP_DIR_IN) {
    ac12:	1cfb      	adds	r3, r7, #3
    ac14:	781b      	ldrb	r3, [r3, #0]
    ac16:	b25b      	sxtb	r3, r3
    ac18:	2b00      	cmp	r3, #0
    ac1a:	da0c      	bge.n	ac36 <usb_device_endpoint_enable_callback+0xaa>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    ac1c:	687b      	ldr	r3, [r7, #4]
    ac1e:	6819      	ldr	r1, [r3, #0]
    ac20:	230f      	movs	r3, #15
    ac22:	18fb      	adds	r3, r7, r3
    ac24:	781a      	ldrb	r2, [r3, #0]
    ac26:	230a      	movs	r3, #10
    ac28:	33ff      	adds	r3, #255	; 0xff
    ac2a:	0152      	lsls	r2, r2, #5
    ac2c:	188a      	adds	r2, r1, r2
    ac2e:	18d3      	adds	r3, r2, r3
    ac30:	2202      	movs	r2, #2
    ac32:	701a      	strb	r2, [r3, #0]
    ac34:	e00b      	b.n	ac4e <usb_device_endpoint_enable_callback+0xc2>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    ac36:	687b      	ldr	r3, [r7, #4]
    ac38:	6819      	ldr	r1, [r3, #0]
    ac3a:	230f      	movs	r3, #15
    ac3c:	18fb      	adds	r3, r7, r3
    ac3e:	781a      	ldrb	r2, [r3, #0]
    ac40:	230a      	movs	r3, #10
    ac42:	33ff      	adds	r3, #255	; 0xff
    ac44:	0152      	lsls	r2, r2, #5
    ac46:	188a      	adds	r2, r1, r2
    ac48:	18d3      	adds	r3, r2, r3
    ac4a:	2201      	movs	r2, #1
    ac4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    ac4e:	1cbb      	adds	r3, r7, #2
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	2b01      	cmp	r3, #1
    ac54:	d12f      	bne.n	acb6 <usb_device_endpoint_enable_callback+0x12a>
		if (ep_num == 0) { // control endpoint
    ac56:	230f      	movs	r3, #15
    ac58:	18fb      	adds	r3, r7, r3
    ac5a:	781b      	ldrb	r3, [r3, #0]
    ac5c:	2b00      	cmp	r3, #0
    ac5e:	d10c      	bne.n	ac7a <usb_device_endpoint_enable_callback+0xee>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    ac60:	687b      	ldr	r3, [r7, #4]
    ac62:	6819      	ldr	r1, [r3, #0]
    ac64:	230f      	movs	r3, #15
    ac66:	18fb      	adds	r3, r7, r3
    ac68:	781a      	ldrb	r2, [r3, #0]
    ac6a:	230a      	movs	r3, #10
    ac6c:	33ff      	adds	r3, #255	; 0xff
    ac6e:	0152      	lsls	r2, r2, #5
    ac70:	188a      	adds	r2, r1, r2
    ac72:	18d3      	adds	r3, r2, r3
    ac74:	220c      	movs	r2, #12
    ac76:	701a      	strb	r2, [r3, #0]
    ac78:	e01d      	b.n	acb6 <usb_device_endpoint_enable_callback+0x12a>
		} else if (ep & USB_EP_DIR_IN) {
    ac7a:	1cfb      	adds	r3, r7, #3
    ac7c:	781b      	ldrb	r3, [r3, #0]
    ac7e:	b25b      	sxtb	r3, r3
    ac80:	2b00      	cmp	r3, #0
    ac82:	da0c      	bge.n	ac9e <usb_device_endpoint_enable_callback+0x112>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    ac84:	687b      	ldr	r3, [r7, #4]
    ac86:	6819      	ldr	r1, [r3, #0]
    ac88:	230f      	movs	r3, #15
    ac8a:	18fb      	adds	r3, r7, r3
    ac8c:	781a      	ldrb	r2, [r3, #0]
    ac8e:	230a      	movs	r3, #10
    ac90:	33ff      	adds	r3, #255	; 0xff
    ac92:	0152      	lsls	r2, r2, #5
    ac94:	188a      	adds	r2, r1, r2
    ac96:	18d3      	adds	r3, r2, r3
    ac98:	2208      	movs	r2, #8
    ac9a:	701a      	strb	r2, [r3, #0]
    ac9c:	e00b      	b.n	acb6 <usb_device_endpoint_enable_callback+0x12a>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    ac9e:	687b      	ldr	r3, [r7, #4]
    aca0:	6819      	ldr	r1, [r3, #0]
    aca2:	230f      	movs	r3, #15
    aca4:	18fb      	adds	r3, r7, r3
    aca6:	781a      	ldrb	r2, [r3, #0]
    aca8:	230a      	movs	r3, #10
    acaa:	33ff      	adds	r3, #255	; 0xff
    acac:	0152      	lsls	r2, r2, #5
    acae:	188a      	adds	r2, r1, r2
    acb0:	18d3      	adds	r3, r2, r3
    acb2:	2204      	movs	r2, #4
    acb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    acb6:	1cbb      	adds	r3, r7, #2
    acb8:	781b      	ldrb	r3, [r3, #0]
    acba:	2b02      	cmp	r3, #2
    acbc:	d10b      	bne.n	acd6 <usb_device_endpoint_enable_callback+0x14a>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    acbe:	687b      	ldr	r3, [r7, #4]
    acc0:	6819      	ldr	r1, [r3, #0]
    acc2:	230f      	movs	r3, #15
    acc4:	18fb      	adds	r3, r7, r3
    acc6:	781a      	ldrb	r2, [r3, #0]
    acc8:	230a      	movs	r3, #10
    acca:	33ff      	adds	r3, #255	; 0xff
    accc:	0152      	lsls	r2, r2, #5
    acce:	188a      	adds	r2, r1, r2
    acd0:	18d3      	adds	r3, r2, r3
    acd2:	2210      	movs	r2, #16
    acd4:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    acd6:	1cbb      	adds	r3, r7, #2
    acd8:	781b      	ldrb	r3, [r3, #0]
    acda:	2b03      	cmp	r3, #3
    acdc:	d11d      	bne.n	ad1a <usb_device_endpoint_enable_callback+0x18e>
		if (ep & USB_EP_DIR_IN) {
    acde:	1cfb      	adds	r3, r7, #3
    ace0:	781b      	ldrb	r3, [r3, #0]
    ace2:	b25b      	sxtb	r3, r3
    ace4:	2b00      	cmp	r3, #0
    ace6:	da0c      	bge.n	ad02 <usb_device_endpoint_enable_callback+0x176>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    ace8:	687b      	ldr	r3, [r7, #4]
    acea:	6819      	ldr	r1, [r3, #0]
    acec:	230f      	movs	r3, #15
    acee:	18fb      	adds	r3, r7, r3
    acf0:	781a      	ldrb	r2, [r3, #0]
    acf2:	230a      	movs	r3, #10
    acf4:	33ff      	adds	r3, #255	; 0xff
    acf6:	0152      	lsls	r2, r2, #5
    acf8:	188a      	adds	r2, r1, r2
    acfa:	18d3      	adds	r3, r2, r3
    acfc:	2240      	movs	r2, #64	; 0x40
    acfe:	701a      	strb	r2, [r3, #0]
    ad00:	e00b      	b.n	ad1a <usb_device_endpoint_enable_callback+0x18e>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    ad02:	687b      	ldr	r3, [r7, #4]
    ad04:	6819      	ldr	r1, [r3, #0]
    ad06:	230f      	movs	r3, #15
    ad08:	18fb      	adds	r3, r7, r3
    ad0a:	781a      	ldrb	r2, [r3, #0]
    ad0c:	230a      	movs	r3, #10
    ad0e:	33ff      	adds	r3, #255	; 0xff
    ad10:	0152      	lsls	r2, r2, #5
    ad12:	188a      	adds	r2, r1, r2
    ad14:	18d3      	adds	r3, r2, r3
    ad16:	2220      	movs	r2, #32
    ad18:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    ad1a:	2300      	movs	r3, #0
}
    ad1c:	0018      	movs	r0, r3
    ad1e:	46bd      	mov	sp, r7
    ad20:	b004      	add	sp, #16
    ad22:	bd80      	pop	{r7, pc}
    ad24:	00007134 	.word	0x00007134

0000ad28 <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    ad28:	b580      	push	{r7, lr}
    ad2a:	b084      	sub	sp, #16
    ad2c:	af00      	add	r7, sp, #0
    ad2e:	6078      	str	r0, [r7, #4]
    ad30:	0008      	movs	r0, r1
    ad32:	0011      	movs	r1, r2
    ad34:	1cfb      	adds	r3, r7, #3
    ad36:	1c02      	adds	r2, r0, #0
    ad38:	701a      	strb	r2, [r3, #0]
    ad3a:	1cbb      	adds	r3, r7, #2
    ad3c:	1c0a      	adds	r2, r1, #0
    ad3e:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    ad40:	230f      	movs	r3, #15
    ad42:	18fb      	adds	r3, r7, r3
    ad44:	1cfa      	adds	r2, r7, #3
    ad46:	7812      	ldrb	r2, [r2, #0]
    ad48:	210f      	movs	r1, #15
    ad4a:	400a      	ands	r2, r1
    ad4c:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    ad4e:	230f      	movs	r3, #15
    ad50:	18fb      	adds	r3, r7, r3
    ad52:	781a      	ldrb	r2, [r3, #0]
    ad54:	230f      	movs	r3, #15
    ad56:	18fb      	adds	r3, r7, r3
    ad58:	7819      	ldrb	r1, [r3, #0]
    ad5a:	6878      	ldr	r0, [r7, #4]
    ad5c:	23b0      	movs	r3, #176	; 0xb0
    ad5e:	005b      	lsls	r3, r3, #1
    ad60:	1841      	adds	r1, r0, r1
    ad62:	18cb      	adds	r3, r1, r3
    ad64:	781b      	ldrb	r3, [r3, #0]
    ad66:	b25b      	sxtb	r3, r3
    ad68:	1cb9      	adds	r1, r7, #2
    ad6a:	7809      	ldrb	r1, [r1, #0]
    ad6c:	4857      	ldr	r0, [pc, #348]	; (aecc <usb_device_endpoint_disable_callback+0x1a4>)
    ad6e:	4478      	add	r0, pc
    ad70:	5c41      	ldrb	r1, [r0, r1]
    ad72:	b249      	sxtb	r1, r1
    ad74:	43c9      	mvns	r1, r1
    ad76:	b249      	sxtb	r1, r1
    ad78:	400b      	ands	r3, r1
    ad7a:	b25b      	sxtb	r3, r3
    ad7c:	b2d8      	uxtb	r0, r3
    ad7e:	6879      	ldr	r1, [r7, #4]
    ad80:	23b0      	movs	r3, #176	; 0xb0
    ad82:	005b      	lsls	r3, r3, #1
    ad84:	188a      	adds	r2, r1, r2
    ad86:	18d3      	adds	r3, r2, r3
    ad88:	1c02      	adds	r2, r0, #0
    ad8a:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    ad8c:	1cbb      	adds	r3, r7, #2
    ad8e:	781b      	ldrb	r3, [r3, #0]
    ad90:	2b00      	cmp	r3, #0
    ad92:	d12f      	bne.n	adf4 <usb_device_endpoint_disable_callback+0xcc>
		if (ep_num == 0) { // control endpoint
    ad94:	230f      	movs	r3, #15
    ad96:	18fb      	adds	r3, r7, r3
    ad98:	781b      	ldrb	r3, [r3, #0]
    ad9a:	2b00      	cmp	r3, #0
    ad9c:	d10c      	bne.n	adb8 <usb_device_endpoint_disable_callback+0x90>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    ad9e:	687b      	ldr	r3, [r7, #4]
    ada0:	6819      	ldr	r1, [r3, #0]
    ada2:	230f      	movs	r3, #15
    ada4:	18fb      	adds	r3, r7, r3
    ada6:	781a      	ldrb	r2, [r3, #0]
    ada8:	2384      	movs	r3, #132	; 0x84
    adaa:	005b      	lsls	r3, r3, #1
    adac:	0152      	lsls	r2, r2, #5
    adae:	188a      	adds	r2, r1, r2
    adb0:	18d3      	adds	r3, r2, r3
    adb2:	2203      	movs	r2, #3
    adb4:	701a      	strb	r2, [r3, #0]
    adb6:	e01d      	b.n	adf4 <usb_device_endpoint_disable_callback+0xcc>
		} else if (ep & USB_EP_DIR_IN) {
    adb8:	1cfb      	adds	r3, r7, #3
    adba:	781b      	ldrb	r3, [r3, #0]
    adbc:	b25b      	sxtb	r3, r3
    adbe:	2b00      	cmp	r3, #0
    adc0:	da0c      	bge.n	addc <usb_device_endpoint_disable_callback+0xb4>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    adc2:	687b      	ldr	r3, [r7, #4]
    adc4:	6819      	ldr	r1, [r3, #0]
    adc6:	230f      	movs	r3, #15
    adc8:	18fb      	adds	r3, r7, r3
    adca:	781a      	ldrb	r2, [r3, #0]
    adcc:	2384      	movs	r3, #132	; 0x84
    adce:	005b      	lsls	r3, r3, #1
    add0:	0152      	lsls	r2, r2, #5
    add2:	188a      	adds	r2, r1, r2
    add4:	18d3      	adds	r3, r2, r3
    add6:	2202      	movs	r2, #2
    add8:	701a      	strb	r2, [r3, #0]
    adda:	e00b      	b.n	adf4 <usb_device_endpoint_disable_callback+0xcc>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    addc:	687b      	ldr	r3, [r7, #4]
    adde:	6819      	ldr	r1, [r3, #0]
    ade0:	230f      	movs	r3, #15
    ade2:	18fb      	adds	r3, r7, r3
    ade4:	781a      	ldrb	r2, [r3, #0]
    ade6:	2384      	movs	r3, #132	; 0x84
    ade8:	005b      	lsls	r3, r3, #1
    adea:	0152      	lsls	r2, r2, #5
    adec:	188a      	adds	r2, r1, r2
    adee:	18d3      	adds	r3, r2, r3
    adf0:	2201      	movs	r2, #1
    adf2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    adf4:	1cbb      	adds	r3, r7, #2
    adf6:	781b      	ldrb	r3, [r3, #0]
    adf8:	2b01      	cmp	r3, #1
    adfa:	d12f      	bne.n	ae5c <usb_device_endpoint_disable_callback+0x134>
		if (ep_num == 0) { // control endpoint
    adfc:	230f      	movs	r3, #15
    adfe:	18fb      	adds	r3, r7, r3
    ae00:	781b      	ldrb	r3, [r3, #0]
    ae02:	2b00      	cmp	r3, #0
    ae04:	d10c      	bne.n	ae20 <usb_device_endpoint_disable_callback+0xf8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    ae06:	687b      	ldr	r3, [r7, #4]
    ae08:	6819      	ldr	r1, [r3, #0]
    ae0a:	230f      	movs	r3, #15
    ae0c:	18fb      	adds	r3, r7, r3
    ae0e:	781a      	ldrb	r2, [r3, #0]
    ae10:	2384      	movs	r3, #132	; 0x84
    ae12:	005b      	lsls	r3, r3, #1
    ae14:	0152      	lsls	r2, r2, #5
    ae16:	188a      	adds	r2, r1, r2
    ae18:	18d3      	adds	r3, r2, r3
    ae1a:	220c      	movs	r2, #12
    ae1c:	701a      	strb	r2, [r3, #0]
    ae1e:	e01d      	b.n	ae5c <usb_device_endpoint_disable_callback+0x134>
		} else if (ep & USB_EP_DIR_IN) {
    ae20:	1cfb      	adds	r3, r7, #3
    ae22:	781b      	ldrb	r3, [r3, #0]
    ae24:	b25b      	sxtb	r3, r3
    ae26:	2b00      	cmp	r3, #0
    ae28:	da0c      	bge.n	ae44 <usb_device_endpoint_disable_callback+0x11c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    ae2a:	687b      	ldr	r3, [r7, #4]
    ae2c:	6819      	ldr	r1, [r3, #0]
    ae2e:	230f      	movs	r3, #15
    ae30:	18fb      	adds	r3, r7, r3
    ae32:	781a      	ldrb	r2, [r3, #0]
    ae34:	2384      	movs	r3, #132	; 0x84
    ae36:	005b      	lsls	r3, r3, #1
    ae38:	0152      	lsls	r2, r2, #5
    ae3a:	188a      	adds	r2, r1, r2
    ae3c:	18d3      	adds	r3, r2, r3
    ae3e:	2208      	movs	r2, #8
    ae40:	701a      	strb	r2, [r3, #0]
    ae42:	e00b      	b.n	ae5c <usb_device_endpoint_disable_callback+0x134>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    ae44:	687b      	ldr	r3, [r7, #4]
    ae46:	6819      	ldr	r1, [r3, #0]
    ae48:	230f      	movs	r3, #15
    ae4a:	18fb      	adds	r3, r7, r3
    ae4c:	781a      	ldrb	r2, [r3, #0]
    ae4e:	2384      	movs	r3, #132	; 0x84
    ae50:	005b      	lsls	r3, r3, #1
    ae52:	0152      	lsls	r2, r2, #5
    ae54:	188a      	adds	r2, r1, r2
    ae56:	18d3      	adds	r3, r2, r3
    ae58:	2204      	movs	r2, #4
    ae5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    ae5c:	1cbb      	adds	r3, r7, #2
    ae5e:	781b      	ldrb	r3, [r3, #0]
    ae60:	2b02      	cmp	r3, #2
    ae62:	d10b      	bne.n	ae7c <usb_device_endpoint_disable_callback+0x154>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    ae64:	687b      	ldr	r3, [r7, #4]
    ae66:	6819      	ldr	r1, [r3, #0]
    ae68:	230f      	movs	r3, #15
    ae6a:	18fb      	adds	r3, r7, r3
    ae6c:	781a      	ldrb	r2, [r3, #0]
    ae6e:	2384      	movs	r3, #132	; 0x84
    ae70:	005b      	lsls	r3, r3, #1
    ae72:	0152      	lsls	r2, r2, #5
    ae74:	188a      	adds	r2, r1, r2
    ae76:	18d3      	adds	r3, r2, r3
    ae78:	2210      	movs	r2, #16
    ae7a:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    ae7c:	1cbb      	adds	r3, r7, #2
    ae7e:	781b      	ldrb	r3, [r3, #0]
    ae80:	2b03      	cmp	r3, #3
    ae82:	d11d      	bne.n	aec0 <usb_device_endpoint_disable_callback+0x198>
		if (ep & USB_EP_DIR_IN) {
    ae84:	1cfb      	adds	r3, r7, #3
    ae86:	781b      	ldrb	r3, [r3, #0]
    ae88:	b25b      	sxtb	r3, r3
    ae8a:	2b00      	cmp	r3, #0
    ae8c:	da0c      	bge.n	aea8 <usb_device_endpoint_disable_callback+0x180>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    ae8e:	687b      	ldr	r3, [r7, #4]
    ae90:	6819      	ldr	r1, [r3, #0]
    ae92:	230f      	movs	r3, #15
    ae94:	18fb      	adds	r3, r7, r3
    ae96:	781a      	ldrb	r2, [r3, #0]
    ae98:	2384      	movs	r3, #132	; 0x84
    ae9a:	005b      	lsls	r3, r3, #1
    ae9c:	0152      	lsls	r2, r2, #5
    ae9e:	188a      	adds	r2, r1, r2
    aea0:	18d3      	adds	r3, r2, r3
    aea2:	2240      	movs	r2, #64	; 0x40
    aea4:	701a      	strb	r2, [r3, #0]
    aea6:	e00b      	b.n	aec0 <usb_device_endpoint_disable_callback+0x198>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    aea8:	687b      	ldr	r3, [r7, #4]
    aeaa:	6819      	ldr	r1, [r3, #0]
    aeac:	230f      	movs	r3, #15
    aeae:	18fb      	adds	r3, r7, r3
    aeb0:	781a      	ldrb	r2, [r3, #0]
    aeb2:	2384      	movs	r3, #132	; 0x84
    aeb4:	005b      	lsls	r3, r3, #1
    aeb6:	0152      	lsls	r2, r2, #5
    aeb8:	188a      	adds	r2, r1, r2
    aeba:	18d3      	adds	r3, r2, r3
    aebc:	2220      	movs	r2, #32
    aebe:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    aec0:	2300      	movs	r3, #0
}
    aec2:	0018      	movs	r0, r3
    aec4:	46bd      	mov	sp, r7
    aec6:	b004      	add	sp, #16
    aec8:	bd80      	pop	{r7, pc}
    aeca:	46c0      	nop			; (mov r8, r8)
    aecc:	00006f96 	.word	0x00006f96

0000aed0 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    aed0:	b580      	push	{r7, lr}
    aed2:	b082      	sub	sp, #8
    aed4:	af00      	add	r7, sp, #0
    aed6:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    aed8:	687b      	ldr	r3, [r7, #4]
    aeda:	2200      	movs	r2, #0
    aedc:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    aede:	687b      	ldr	r3, [r7, #4]
    aee0:	2200      	movs	r2, #0
    aee2:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    aee4:	687b      	ldr	r3, [r7, #4]
    aee6:	2200      	movs	r2, #0
    aee8:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    aeea:	687b      	ldr	r3, [r7, #4]
    aeec:	2201      	movs	r2, #1
    aeee:	70da      	strb	r2, [r3, #3]
}
    aef0:	46c0      	nop			; (mov r8, r8)
    aef2:	46bd      	mov	sp, r7
    aef4:	b002      	add	sp, #8
    aef6:	bd80      	pop	{r7, pc}

0000aef8 <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    aef8:	b5b0      	push	{r4, r5, r7, lr}
    aefa:	b084      	sub	sp, #16
    aefc:	af00      	add	r7, sp, #0
    aefe:	6078      	str	r0, [r7, #4]
    af00:	6039      	str	r1, [r7, #0]
    af02:	4bdf      	ldr	r3, [pc, #892]	; (b280 <usb_device_endpoint_set_config+0x388>)
    af04:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    af06:	683a      	ldr	r2, [r7, #0]
    af08:	7811      	ldrb	r1, [r2, #0]
    af0a:	220f      	movs	r2, #15
    af0c:	18ba      	adds	r2, r7, r2
    af0e:	200f      	movs	r0, #15
    af10:	4001      	ands	r1, r0
    af12:	7011      	strb	r1, [r2, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    af14:	683a      	ldr	r2, [r7, #0]
    af16:	7812      	ldrb	r2, [r2, #0]
    af18:	b252      	sxtb	r2, r2
    af1a:	b2d2      	uxtb	r2, r2
    af1c:	09d2      	lsrs	r2, r2, #7
    af1e:	b2d1      	uxtb	r1, r2
    af20:	220e      	movs	r2, #14
    af22:	18ba      	adds	r2, r7, r2
    af24:	7011      	strb	r1, [r2, #0]

	switch (ep_config->ep_type) {
    af26:	683a      	ldr	r2, [r7, #0]
    af28:	78d2      	ldrb	r2, [r2, #3]
    af2a:	2a04      	cmp	r2, #4
    af2c:	d900      	bls.n	af30 <usb_device_endpoint_set_config+0x38>
    af2e:	e214      	b.n	b35a <usb_device_endpoint_set_config+0x462>
    af30:	0010      	movs	r0, r2
    af32:	f005 fb9d 	bl	10670 <__gnu_thumb1_case_si>
    af36:	46c0      	nop			; (mov r8, r8)
    af38:	00000014 	.word	0x00000014
    af3c:	0000002a 	.word	0x0000002a
    af40:	000001aa 	.word	0x000001aa
    af44:	00000278 	.word	0x00000278
    af48:	00000354 	.word	0x00000354
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    af4c:	687b      	ldr	r3, [r7, #4]
    af4e:	681b      	ldr	r3, [r3, #0]
    af50:	220f      	movs	r2, #15
    af52:	18ba      	adds	r2, r7, r2
    af54:	7812      	ldrb	r2, [r2, #0]
    af56:	3208      	adds	r2, #8
    af58:	0152      	lsls	r2, r2, #5
    af5a:	2100      	movs	r1, #0
    af5c:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    af5e:	2300      	movs	r3, #0
    af60:	e259      	b.n	b416 <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    af62:	687a      	ldr	r2, [r7, #4]
    af64:	6812      	ldr	r2, [r2, #0]
    af66:	210f      	movs	r1, #15
    af68:	1879      	adds	r1, r7, r1
    af6a:	7809      	ldrb	r1, [r1, #0]
    af6c:	3108      	adds	r1, #8
    af6e:	0149      	lsls	r1, r1, #5
    af70:	5c8a      	ldrb	r2, [r1, r2]
    af72:	b2d2      	uxtb	r2, r2
    af74:	0011      	movs	r1, r2
    af76:	2207      	movs	r2, #7
    af78:	400a      	ands	r2, r1
    af7a:	d130      	bne.n	afde <usb_device_endpoint_set_config+0xe6>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    af7c:	687a      	ldr	r2, [r7, #4]
    af7e:	6812      	ldr	r2, [r2, #0]
    af80:	210f      	movs	r1, #15
    af82:	1879      	adds	r1, r7, r1
    af84:	7809      	ldrb	r1, [r1, #0]
    af86:	3108      	adds	r1, #8
    af88:	0149      	lsls	r1, r1, #5
    af8a:	5c8a      	ldrb	r2, [r1, r2]
    af8c:	b2d2      	uxtb	r2, r2
    af8e:	0011      	movs	r1, r2
    af90:	2270      	movs	r2, #112	; 0x70
    af92:	400a      	ands	r2, r1
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    af94:	d123      	bne.n	afde <usb_device_endpoint_set_config+0xe6>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    af96:	687a      	ldr	r2, [r7, #4]
    af98:	6812      	ldr	r2, [r2, #0]
    af9a:	210f      	movs	r1, #15
    af9c:	1879      	adds	r1, r7, r1
    af9e:	7809      	ldrb	r1, [r1, #0]
    afa0:	3108      	adds	r1, #8
    afa2:	0149      	lsls	r1, r1, #5
    afa4:	2011      	movs	r0, #17
    afa6:	5488      	strb	r0, [r1, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    afa8:	687a      	ldr	r2, [r7, #4]
    afaa:	6811      	ldr	r1, [r2, #0]
    afac:	220f      	movs	r2, #15
    afae:	18ba      	adds	r2, r7, r2
    afb0:	7812      	ldrb	r2, [r2, #0]
    afb2:	3208      	adds	r2, #8
    afb4:	0152      	lsls	r2, r2, #5
    afb6:	188a      	adds	r2, r1, r2
    afb8:	3205      	adds	r2, #5
    afba:	2140      	movs	r1, #64	; 0x40
    afbc:	7011      	strb	r1, [r2, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    afbe:	687a      	ldr	r2, [r7, #4]
    afc0:	6811      	ldr	r1, [r2, #0]
    afc2:	220f      	movs	r2, #15
    afc4:	18ba      	adds	r2, r7, r2
    afc6:	7812      	ldrb	r2, [r2, #0]
    afc8:	3208      	adds	r2, #8
    afca:	0152      	lsls	r2, r2, #5
    afcc:	188a      	adds	r2, r1, r2
    afce:	3204      	adds	r2, #4
    afd0:	2180      	movs	r1, #128	; 0x80
    afd2:	7011      	strb	r1, [r2, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    afd4:	683a      	ldr	r2, [r7, #0]
    afd6:	7892      	ldrb	r2, [r2, #2]
    afd8:	2a00      	cmp	r2, #0
    afda:	d102      	bne.n	afe2 <usb_device_endpoint_set_config+0xea>
    afdc:	e02c      	b.n	b038 <usb_device_endpoint_set_config+0x140>
				return STATUS_ERR_DENIED;
    afde:	231c      	movs	r3, #28
    afe0:	e219      	b.n	b416 <usb_device_endpoint_set_config+0x51e>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    afe2:	220f      	movs	r2, #15
    afe4:	18ba      	adds	r2, r7, r2
    afe6:	7814      	ldrb	r4, [r2, #0]
    afe8:	220f      	movs	r2, #15
    afea:	18ba      	adds	r2, r7, r2
    afec:	7812      	ldrb	r2, [r2, #0]
    afee:	49a5      	ldr	r1, [pc, #660]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    aff0:	5859      	ldr	r1, [r3, r1]
    aff2:	0152      	lsls	r2, r2, #5
    aff4:	188a      	adds	r2, r1, r2
    aff6:	3204      	adds	r2, #4
    aff8:	6812      	ldr	r2, [r2, #0]
    affa:	2180      	movs	r1, #128	; 0x80
    affc:	0609      	lsls	r1, r1, #24
    affe:	4311      	orrs	r1, r2
    b000:	4aa0      	ldr	r2, [pc, #640]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b002:	5898      	ldr	r0, [r3, r2]
    b004:	0162      	lsls	r2, r4, #5
    b006:	1882      	adds	r2, r0, r2
    b008:	3204      	adds	r2, #4
    b00a:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    b00c:	220f      	movs	r2, #15
    b00e:	18ba      	adds	r2, r7, r2
    b010:	7814      	ldrb	r4, [r2, #0]
    b012:	220f      	movs	r2, #15
    b014:	18ba      	adds	r2, r7, r2
    b016:	7812      	ldrb	r2, [r2, #0]
    b018:	499a      	ldr	r1, [pc, #616]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b01a:	5859      	ldr	r1, [r3, r1]
    b01c:	0152      	lsls	r2, r2, #5
    b01e:	188a      	adds	r2, r1, r2
    b020:	3214      	adds	r2, #20
    b022:	6812      	ldr	r2, [r2, #0]
    b024:	2180      	movs	r1, #128	; 0x80
    b026:	0609      	lsls	r1, r1, #24
    b028:	4311      	orrs	r1, r2
    b02a:	4a96      	ldr	r2, [pc, #600]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b02c:	5898      	ldr	r0, [r3, r2]
    b02e:	0162      	lsls	r2, r4, #5
    b030:	1882      	adds	r2, r0, r2
    b032:	3214      	adds	r2, #20
    b034:	6011      	str	r1, [r2, #0]
    b036:	e027      	b.n	b088 <usb_device_endpoint_set_config+0x190>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    b038:	220f      	movs	r2, #15
    b03a:	18ba      	adds	r2, r7, r2
    b03c:	7814      	ldrb	r4, [r2, #0]
    b03e:	220f      	movs	r2, #15
    b040:	18ba      	adds	r2, r7, r2
    b042:	7812      	ldrb	r2, [r2, #0]
    b044:	498f      	ldr	r1, [pc, #572]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b046:	5859      	ldr	r1, [r3, r1]
    b048:	0152      	lsls	r2, r2, #5
    b04a:	188a      	adds	r2, r1, r2
    b04c:	3204      	adds	r2, #4
    b04e:	6812      	ldr	r2, [r2, #0]
    b050:	0052      	lsls	r2, r2, #1
    b052:	0851      	lsrs	r1, r2, #1
    b054:	4a8b      	ldr	r2, [pc, #556]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b056:	5898      	ldr	r0, [r3, r2]
    b058:	0162      	lsls	r2, r4, #5
    b05a:	1882      	adds	r2, r0, r2
    b05c:	3204      	adds	r2, #4
    b05e:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    b060:	220f      	movs	r2, #15
    b062:	18ba      	adds	r2, r7, r2
    b064:	7814      	ldrb	r4, [r2, #0]
    b066:	220f      	movs	r2, #15
    b068:	18ba      	adds	r2, r7, r2
    b06a:	7812      	ldrb	r2, [r2, #0]
    b06c:	4985      	ldr	r1, [pc, #532]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b06e:	5859      	ldr	r1, [r3, r1]
    b070:	0152      	lsls	r2, r2, #5
    b072:	188a      	adds	r2, r1, r2
    b074:	3214      	adds	r2, #20
    b076:	6812      	ldr	r2, [r2, #0]
    b078:	0052      	lsls	r2, r2, #1
    b07a:	0851      	lsrs	r1, r2, #1
    b07c:	4a81      	ldr	r2, [pc, #516]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b07e:	5898      	ldr	r0, [r3, r2]
    b080:	0162      	lsls	r2, r4, #5
    b082:	1882      	adds	r2, r0, r2
    b084:	3214      	adds	r2, #20
    b086:	6011      	str	r1, [r2, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    b088:	220f      	movs	r2, #15
    b08a:	18ba      	adds	r2, r7, r2
    b08c:	7812      	ldrb	r2, [r2, #0]
    b08e:	6839      	ldr	r1, [r7, #0]
    b090:	7849      	ldrb	r1, [r1, #1]
    b092:	1c08      	adds	r0, r1, #0
    b094:	2107      	movs	r1, #7
    b096:	4001      	ands	r1, r0
    b098:	b2c8      	uxtb	r0, r1
    b09a:	497a      	ldr	r1, [pc, #488]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b09c:	5859      	ldr	r1, [r3, r1]
    b09e:	0152      	lsls	r2, r2, #5
    b0a0:	188a      	adds	r2, r1, r2
    b0a2:	6851      	ldr	r1, [r2, #4]
    b0a4:	2407      	movs	r4, #7
    b0a6:	4020      	ands	r0, r4
    b0a8:	0700      	lsls	r0, r0, #28
    b0aa:	4c77      	ldr	r4, [pc, #476]	; (b288 <usb_device_endpoint_set_config+0x390>)
    b0ac:	4021      	ands	r1, r4
    b0ae:	4301      	orrs	r1, r0
    b0b0:	6051      	str	r1, [r2, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    b0b2:	220f      	movs	r2, #15
    b0b4:	18ba      	adds	r2, r7, r2
    b0b6:	7810      	ldrb	r0, [r2, #0]
    b0b8:	683a      	ldr	r2, [r7, #0]
    b0ba:	7852      	ldrb	r2, [r2, #1]
    b0bc:	1c11      	adds	r1, r2, #0
    b0be:	2207      	movs	r2, #7
    b0c0:	400a      	ands	r2, r1
    b0c2:	b2d1      	uxtb	r1, r2
    b0c4:	4a6f      	ldr	r2, [pc, #444]	; (b284 <usb_device_endpoint_set_config+0x38c>)
    b0c6:	589a      	ldr	r2, [r3, r2]
    b0c8:	0143      	lsls	r3, r0, #5
    b0ca:	18d3      	adds	r3, r2, r3
    b0cc:	3310      	adds	r3, #16
    b0ce:	685a      	ldr	r2, [r3, #4]
    b0d0:	2007      	movs	r0, #7
    b0d2:	4001      	ands	r1, r0
    b0d4:	0709      	lsls	r1, r1, #28
    b0d6:	486c      	ldr	r0, [pc, #432]	; (b288 <usb_device_endpoint_set_config+0x390>)
    b0d8:	4002      	ands	r2, r0
    b0da:	430a      	orrs	r2, r1
    b0dc:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    b0de:	2300      	movs	r3, #0
    b0e0:	e199      	b.n	b416 <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    b0e2:	220e      	movs	r2, #14
    b0e4:	18ba      	adds	r2, r7, r2
    b0e6:	7812      	ldrb	r2, [r2, #0]
    b0e8:	2a00      	cmp	r2, #0
    b0ea:	d030      	beq.n	b14e <usb_device_endpoint_set_config+0x256>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    b0ec:	687a      	ldr	r2, [r7, #4]
    b0ee:	6812      	ldr	r2, [r2, #0]
    b0f0:	210f      	movs	r1, #15
    b0f2:	1879      	adds	r1, r7, r1
    b0f4:	7809      	ldrb	r1, [r1, #0]
    b0f6:	3108      	adds	r1, #8
    b0f8:	0149      	lsls	r1, r1, #5
    b0fa:	5c8a      	ldrb	r2, [r1, r2]
    b0fc:	b2d2      	uxtb	r2, r2
    b0fe:	0011      	movs	r1, r2
    b100:	2270      	movs	r2, #112	; 0x70
    b102:	400a      	ands	r2, r1
    b104:	d121      	bne.n	b14a <usb_device_endpoint_set_config+0x252>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    b106:	687a      	ldr	r2, [r7, #4]
    b108:	6811      	ldr	r1, [r2, #0]
    b10a:	220f      	movs	r2, #15
    b10c:	18ba      	adds	r2, r7, r2
    b10e:	7810      	ldrb	r0, [r2, #0]
    b110:	687a      	ldr	r2, [r7, #4]
    b112:	6812      	ldr	r2, [r2, #0]
    b114:	240f      	movs	r4, #15
    b116:	193c      	adds	r4, r7, r4
    b118:	7824      	ldrb	r4, [r4, #0]
    b11a:	3408      	adds	r4, #8
    b11c:	0164      	lsls	r4, r4, #5
    b11e:	5ca2      	ldrb	r2, [r4, r2]
    b120:	b2d2      	uxtb	r2, r2
    b122:	2420      	movs	r4, #32
    b124:	4322      	orrs	r2, r4
    b126:	b2d4      	uxtb	r4, r2
    b128:	0002      	movs	r2, r0
    b12a:	3208      	adds	r2, #8
    b12c:	0152      	lsls	r2, r2, #5
    b12e:	1c20      	adds	r0, r4, #0
    b130:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    b132:	687a      	ldr	r2, [r7, #4]
    b134:	6811      	ldr	r1, [r2, #0]
    b136:	220f      	movs	r2, #15
    b138:	18ba      	adds	r2, r7, r2
    b13a:	7812      	ldrb	r2, [r2, #0]
    b13c:	3208      	adds	r2, #8
    b13e:	0152      	lsls	r2, r2, #5
    b140:	188a      	adds	r2, r1, r2
    b142:	3204      	adds	r2, #4
    b144:	2180      	movs	r1, #128	; 0x80
    b146:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    b148:	e108      	b.n	b35c <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    b14a:	231c      	movs	r3, #28
    b14c:	e163      	b.n	b416 <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    b14e:	687a      	ldr	r2, [r7, #4]
    b150:	6812      	ldr	r2, [r2, #0]
    b152:	210f      	movs	r1, #15
    b154:	1879      	adds	r1, r7, r1
    b156:	7809      	ldrb	r1, [r1, #0]
    b158:	3108      	adds	r1, #8
    b15a:	0149      	lsls	r1, r1, #5
    b15c:	5c8a      	ldrb	r2, [r1, r2]
    b15e:	b2d2      	uxtb	r2, r2
    b160:	0011      	movs	r1, r2
    b162:	2207      	movs	r2, #7
    b164:	400a      	ands	r2, r1
    b166:	d121      	bne.n	b1ac <usb_device_endpoint_set_config+0x2b4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    b168:	687a      	ldr	r2, [r7, #4]
    b16a:	6811      	ldr	r1, [r2, #0]
    b16c:	220f      	movs	r2, #15
    b16e:	18ba      	adds	r2, r7, r2
    b170:	7810      	ldrb	r0, [r2, #0]
    b172:	687a      	ldr	r2, [r7, #4]
    b174:	6812      	ldr	r2, [r2, #0]
    b176:	240f      	movs	r4, #15
    b178:	193c      	adds	r4, r7, r4
    b17a:	7824      	ldrb	r4, [r4, #0]
    b17c:	3408      	adds	r4, #8
    b17e:	0164      	lsls	r4, r4, #5
    b180:	5ca2      	ldrb	r2, [r4, r2]
    b182:	b2d2      	uxtb	r2, r2
    b184:	2402      	movs	r4, #2
    b186:	4322      	orrs	r2, r4
    b188:	b2d4      	uxtb	r4, r2
    b18a:	0002      	movs	r2, r0
    b18c:	3208      	adds	r2, #8
    b18e:	0152      	lsls	r2, r2, #5
    b190:	1c20      	adds	r0, r4, #0
    b192:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    b194:	687a      	ldr	r2, [r7, #4]
    b196:	6811      	ldr	r1, [r2, #0]
    b198:	220f      	movs	r2, #15
    b19a:	18ba      	adds	r2, r7, r2
    b19c:	7812      	ldrb	r2, [r2, #0]
    b19e:	3208      	adds	r2, #8
    b1a0:	0152      	lsls	r2, r2, #5
    b1a2:	188a      	adds	r2, r1, r2
    b1a4:	3205      	adds	r2, #5
    b1a6:	2140      	movs	r1, #64	; 0x40
    b1a8:	7011      	strb	r1, [r2, #0]
			break;
    b1aa:	e0d7      	b.n	b35c <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    b1ac:	231c      	movs	r3, #28
    b1ae:	e132      	b.n	b416 <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    b1b0:	220e      	movs	r2, #14
    b1b2:	18ba      	adds	r2, r7, r2
    b1b4:	7812      	ldrb	r2, [r2, #0]
    b1b6:	2a00      	cmp	r2, #0
    b1b8:	d030      	beq.n	b21c <usb_device_endpoint_set_config+0x324>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    b1ba:	687a      	ldr	r2, [r7, #4]
    b1bc:	6812      	ldr	r2, [r2, #0]
    b1be:	210f      	movs	r1, #15
    b1c0:	1879      	adds	r1, r7, r1
    b1c2:	7809      	ldrb	r1, [r1, #0]
    b1c4:	3108      	adds	r1, #8
    b1c6:	0149      	lsls	r1, r1, #5
    b1c8:	5c8a      	ldrb	r2, [r1, r2]
    b1ca:	b2d2      	uxtb	r2, r2
    b1cc:	0011      	movs	r1, r2
    b1ce:	2270      	movs	r2, #112	; 0x70
    b1d0:	400a      	ands	r2, r1
    b1d2:	d121      	bne.n	b218 <usb_device_endpoint_set_config+0x320>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    b1d4:	687a      	ldr	r2, [r7, #4]
    b1d6:	6811      	ldr	r1, [r2, #0]
    b1d8:	220f      	movs	r2, #15
    b1da:	18ba      	adds	r2, r7, r2
    b1dc:	7810      	ldrb	r0, [r2, #0]
    b1de:	687a      	ldr	r2, [r7, #4]
    b1e0:	6812      	ldr	r2, [r2, #0]
    b1e2:	240f      	movs	r4, #15
    b1e4:	193c      	adds	r4, r7, r4
    b1e6:	7824      	ldrb	r4, [r4, #0]
    b1e8:	3408      	adds	r4, #8
    b1ea:	0164      	lsls	r4, r4, #5
    b1ec:	5ca2      	ldrb	r2, [r4, r2]
    b1ee:	b2d2      	uxtb	r2, r2
    b1f0:	2430      	movs	r4, #48	; 0x30
    b1f2:	4322      	orrs	r2, r4
    b1f4:	b2d4      	uxtb	r4, r2
    b1f6:	0002      	movs	r2, r0
    b1f8:	3208      	adds	r2, #8
    b1fa:	0152      	lsls	r2, r2, #5
    b1fc:	1c20      	adds	r0, r4, #0
    b1fe:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    b200:	687a      	ldr	r2, [r7, #4]
    b202:	6811      	ldr	r1, [r2, #0]
    b204:	220f      	movs	r2, #15
    b206:	18ba      	adds	r2, r7, r2
    b208:	7812      	ldrb	r2, [r2, #0]
    b20a:	3208      	adds	r2, #8
    b20c:	0152      	lsls	r2, r2, #5
    b20e:	188a      	adds	r2, r1, r2
    b210:	3204      	adds	r2, #4
    b212:	2180      	movs	r1, #128	; 0x80
    b214:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    b216:	e0a1      	b.n	b35c <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    b218:	231c      	movs	r3, #28
    b21a:	e0fc      	b.n	b416 <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    b21c:	687a      	ldr	r2, [r7, #4]
    b21e:	6812      	ldr	r2, [r2, #0]
    b220:	210f      	movs	r1, #15
    b222:	1879      	adds	r1, r7, r1
    b224:	7809      	ldrb	r1, [r1, #0]
    b226:	3108      	adds	r1, #8
    b228:	0149      	lsls	r1, r1, #5
    b22a:	5c8a      	ldrb	r2, [r1, r2]
    b22c:	b2d2      	uxtb	r2, r2
    b22e:	0011      	movs	r1, r2
    b230:	2207      	movs	r2, #7
    b232:	400a      	ands	r2, r1
    b234:	d121      	bne.n	b27a <usb_device_endpoint_set_config+0x382>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    b236:	687a      	ldr	r2, [r7, #4]
    b238:	6811      	ldr	r1, [r2, #0]
    b23a:	220f      	movs	r2, #15
    b23c:	18ba      	adds	r2, r7, r2
    b23e:	7810      	ldrb	r0, [r2, #0]
    b240:	687a      	ldr	r2, [r7, #4]
    b242:	6812      	ldr	r2, [r2, #0]
    b244:	240f      	movs	r4, #15
    b246:	193c      	adds	r4, r7, r4
    b248:	7824      	ldrb	r4, [r4, #0]
    b24a:	3408      	adds	r4, #8
    b24c:	0164      	lsls	r4, r4, #5
    b24e:	5ca2      	ldrb	r2, [r4, r2]
    b250:	b2d2      	uxtb	r2, r2
    b252:	2403      	movs	r4, #3
    b254:	4322      	orrs	r2, r4
    b256:	b2d4      	uxtb	r4, r2
    b258:	0002      	movs	r2, r0
    b25a:	3208      	adds	r2, #8
    b25c:	0152      	lsls	r2, r2, #5
    b25e:	1c20      	adds	r0, r4, #0
    b260:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    b262:	687a      	ldr	r2, [r7, #4]
    b264:	6811      	ldr	r1, [r2, #0]
    b266:	220f      	movs	r2, #15
    b268:	18ba      	adds	r2, r7, r2
    b26a:	7812      	ldrb	r2, [r2, #0]
    b26c:	3208      	adds	r2, #8
    b26e:	0152      	lsls	r2, r2, #5
    b270:	188a      	adds	r2, r1, r2
    b272:	3205      	adds	r2, #5
    b274:	2140      	movs	r1, #64	; 0x40
    b276:	7011      	strb	r1, [r2, #0]
			break;
    b278:	e070      	b.n	b35c <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    b27a:	231c      	movs	r3, #28
    b27c:	e0cb      	b.n	b416 <usb_device_endpoint_set_config+0x51e>
    b27e:	46c0      	nop			; (mov r8, r8)
    b280:	00006ecc 	.word	0x00006ecc
    b284:	00000020 	.word	0x00000020
    b288:	8fffffff 	.word	0x8fffffff

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    b28c:	220e      	movs	r2, #14
    b28e:	18ba      	adds	r2, r7, r2
    b290:	7812      	ldrb	r2, [r2, #0]
    b292:	2a00      	cmp	r2, #0
    b294:	d030      	beq.n	b2f8 <usb_device_endpoint_set_config+0x400>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    b296:	687a      	ldr	r2, [r7, #4]
    b298:	6812      	ldr	r2, [r2, #0]
    b29a:	210f      	movs	r1, #15
    b29c:	1879      	adds	r1, r7, r1
    b29e:	7809      	ldrb	r1, [r1, #0]
    b2a0:	3108      	adds	r1, #8
    b2a2:	0149      	lsls	r1, r1, #5
    b2a4:	5c8a      	ldrb	r2, [r1, r2]
    b2a6:	b2d2      	uxtb	r2, r2
    b2a8:	0011      	movs	r1, r2
    b2aa:	2270      	movs	r2, #112	; 0x70
    b2ac:	400a      	ands	r2, r1
    b2ae:	d121      	bne.n	b2f4 <usb_device_endpoint_set_config+0x3fc>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    b2b0:	687a      	ldr	r2, [r7, #4]
    b2b2:	6811      	ldr	r1, [r2, #0]
    b2b4:	220f      	movs	r2, #15
    b2b6:	18ba      	adds	r2, r7, r2
    b2b8:	7810      	ldrb	r0, [r2, #0]
    b2ba:	687a      	ldr	r2, [r7, #4]
    b2bc:	6812      	ldr	r2, [r2, #0]
    b2be:	240f      	movs	r4, #15
    b2c0:	193c      	adds	r4, r7, r4
    b2c2:	7824      	ldrb	r4, [r4, #0]
    b2c4:	3408      	adds	r4, #8
    b2c6:	0164      	lsls	r4, r4, #5
    b2c8:	5ca2      	ldrb	r2, [r4, r2]
    b2ca:	b2d2      	uxtb	r2, r2
    b2cc:	2440      	movs	r4, #64	; 0x40
    b2ce:	4322      	orrs	r2, r4
    b2d0:	b2d4      	uxtb	r4, r2
    b2d2:	0002      	movs	r2, r0
    b2d4:	3208      	adds	r2, #8
    b2d6:	0152      	lsls	r2, r2, #5
    b2d8:	1c20      	adds	r0, r4, #0
    b2da:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    b2dc:	687a      	ldr	r2, [r7, #4]
    b2de:	6811      	ldr	r1, [r2, #0]
    b2e0:	220f      	movs	r2, #15
    b2e2:	18ba      	adds	r2, r7, r2
    b2e4:	7812      	ldrb	r2, [r2, #0]
    b2e6:	3208      	adds	r2, #8
    b2e8:	0152      	lsls	r2, r2, #5
    b2ea:	188a      	adds	r2, r1, r2
    b2ec:	3204      	adds	r2, #4
    b2ee:	2180      	movs	r1, #128	; 0x80
    b2f0:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    b2f2:	e033      	b.n	b35c <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    b2f4:	231c      	movs	r3, #28
    b2f6:	e08e      	b.n	b416 <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    b2f8:	687a      	ldr	r2, [r7, #4]
    b2fa:	6812      	ldr	r2, [r2, #0]
    b2fc:	210f      	movs	r1, #15
    b2fe:	1879      	adds	r1, r7, r1
    b300:	7809      	ldrb	r1, [r1, #0]
    b302:	3108      	adds	r1, #8
    b304:	0149      	lsls	r1, r1, #5
    b306:	5c8a      	ldrb	r2, [r1, r2]
    b308:	b2d2      	uxtb	r2, r2
    b30a:	0011      	movs	r1, r2
    b30c:	2207      	movs	r2, #7
    b30e:	400a      	ands	r2, r1
    b310:	d121      	bne.n	b356 <usb_device_endpoint_set_config+0x45e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    b312:	687a      	ldr	r2, [r7, #4]
    b314:	6811      	ldr	r1, [r2, #0]
    b316:	220f      	movs	r2, #15
    b318:	18ba      	adds	r2, r7, r2
    b31a:	7810      	ldrb	r0, [r2, #0]
    b31c:	687a      	ldr	r2, [r7, #4]
    b31e:	6812      	ldr	r2, [r2, #0]
    b320:	240f      	movs	r4, #15
    b322:	193c      	adds	r4, r7, r4
    b324:	7824      	ldrb	r4, [r4, #0]
    b326:	3408      	adds	r4, #8
    b328:	0164      	lsls	r4, r4, #5
    b32a:	5ca2      	ldrb	r2, [r4, r2]
    b32c:	b2d2      	uxtb	r2, r2
    b32e:	2404      	movs	r4, #4
    b330:	4322      	orrs	r2, r4
    b332:	b2d4      	uxtb	r4, r2
    b334:	0002      	movs	r2, r0
    b336:	3208      	adds	r2, #8
    b338:	0152      	lsls	r2, r2, #5
    b33a:	1c20      	adds	r0, r4, #0
    b33c:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    b33e:	687a      	ldr	r2, [r7, #4]
    b340:	6811      	ldr	r1, [r2, #0]
    b342:	220f      	movs	r2, #15
    b344:	18ba      	adds	r2, r7, r2
    b346:	7812      	ldrb	r2, [r2, #0]
    b348:	3208      	adds	r2, #8
    b34a:	0152      	lsls	r2, r2, #5
    b34c:	188a      	adds	r2, r1, r2
    b34e:	3205      	adds	r2, #5
    b350:	2140      	movs	r1, #64	; 0x40
    b352:	7011      	strb	r1, [r2, #0]
			break;
    b354:	e002      	b.n	b35c <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    b356:	231c      	movs	r3, #28
    b358:	e05d      	b.n	b416 <usb_device_endpoint_set_config+0x51e>

		default:
			break;
    b35a:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    b35c:	220f      	movs	r2, #15
    b35e:	18ba      	adds	r2, r7, r2
    b360:	7814      	ldrb	r4, [r2, #0]
    b362:	220e      	movs	r2, #14
    b364:	18ba      	adds	r2, r7, r2
    b366:	7812      	ldrb	r2, [r2, #0]
    b368:	6839      	ldr	r1, [r7, #0]
    b36a:	7849      	ldrb	r1, [r1, #1]
    b36c:	1c08      	adds	r0, r1, #0
    b36e:	2107      	movs	r1, #7
    b370:	4001      	ands	r1, r0
    b372:	b2c8      	uxtb	r0, r1
    b374:	492a      	ldr	r1, [pc, #168]	; (b420 <usb_device_endpoint_set_config+0x528>)
    b376:	5859      	ldr	r1, [r3, r1]
    b378:	0064      	lsls	r4, r4, #1
    b37a:	18a2      	adds	r2, r4, r2
    b37c:	0112      	lsls	r2, r2, #4
    b37e:	188a      	adds	r2, r1, r2
    b380:	6851      	ldr	r1, [r2, #4]
    b382:	2407      	movs	r4, #7
    b384:	4020      	ands	r0, r4
    b386:	0700      	lsls	r0, r0, #28
    b388:	4c26      	ldr	r4, [pc, #152]	; (b424 <usb_device_endpoint_set_config+0x52c>)
    b38a:	4021      	ands	r1, r4
    b38c:	4301      	orrs	r1, r0
    b38e:	6051      	str	r1, [r2, #4]

	if (true == ep_config->auto_zlp) {
    b390:	683a      	ldr	r2, [r7, #0]
    b392:	7892      	ldrb	r2, [r2, #2]
    b394:	2a00      	cmp	r2, #0
    b396:	d01f      	beq.n	b3d8 <usb_device_endpoint_set_config+0x4e0>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    b398:	220f      	movs	r2, #15
    b39a:	18ba      	adds	r2, r7, r2
    b39c:	7814      	ldrb	r4, [r2, #0]
    b39e:	220e      	movs	r2, #14
    b3a0:	18ba      	adds	r2, r7, r2
    b3a2:	7810      	ldrb	r0, [r2, #0]
    b3a4:	220f      	movs	r2, #15
    b3a6:	18ba      	adds	r2, r7, r2
    b3a8:	7815      	ldrb	r5, [r2, #0]
    b3aa:	220e      	movs	r2, #14
    b3ac:	18ba      	adds	r2, r7, r2
    b3ae:	7812      	ldrb	r2, [r2, #0]
    b3b0:	491b      	ldr	r1, [pc, #108]	; (b420 <usb_device_endpoint_set_config+0x528>)
    b3b2:	5859      	ldr	r1, [r3, r1]
    b3b4:	006d      	lsls	r5, r5, #1
    b3b6:	18aa      	adds	r2, r5, r2
    b3b8:	0112      	lsls	r2, r2, #4
    b3ba:	188a      	adds	r2, r1, r2
    b3bc:	3204      	adds	r2, #4
    b3be:	6812      	ldr	r2, [r2, #0]
    b3c0:	2180      	movs	r1, #128	; 0x80
    b3c2:	0609      	lsls	r1, r1, #24
    b3c4:	430a      	orrs	r2, r1
    b3c6:	4916      	ldr	r1, [pc, #88]	; (b420 <usb_device_endpoint_set_config+0x528>)
    b3c8:	5859      	ldr	r1, [r3, r1]
    b3ca:	0063      	lsls	r3, r4, #1
    b3cc:	181b      	adds	r3, r3, r0
    b3ce:	011b      	lsls	r3, r3, #4
    b3d0:	18cb      	adds	r3, r1, r3
    b3d2:	3304      	adds	r3, #4
    b3d4:	601a      	str	r2, [r3, #0]
    b3d6:	e01d      	b.n	b414 <usb_device_endpoint_set_config+0x51c>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    b3d8:	220f      	movs	r2, #15
    b3da:	18ba      	adds	r2, r7, r2
    b3dc:	7814      	ldrb	r4, [r2, #0]
    b3de:	220e      	movs	r2, #14
    b3e0:	18ba      	adds	r2, r7, r2
    b3e2:	7810      	ldrb	r0, [r2, #0]
    b3e4:	220f      	movs	r2, #15
    b3e6:	18ba      	adds	r2, r7, r2
    b3e8:	7815      	ldrb	r5, [r2, #0]
    b3ea:	220e      	movs	r2, #14
    b3ec:	18ba      	adds	r2, r7, r2
    b3ee:	7812      	ldrb	r2, [r2, #0]
    b3f0:	490b      	ldr	r1, [pc, #44]	; (b420 <usb_device_endpoint_set_config+0x528>)
    b3f2:	5859      	ldr	r1, [r3, r1]
    b3f4:	006d      	lsls	r5, r5, #1
    b3f6:	18aa      	adds	r2, r5, r2
    b3f8:	0112      	lsls	r2, r2, #4
    b3fa:	188a      	adds	r2, r1, r2
    b3fc:	3204      	adds	r2, #4
    b3fe:	6812      	ldr	r2, [r2, #0]
    b400:	0052      	lsls	r2, r2, #1
    b402:	0852      	lsrs	r2, r2, #1
    b404:	4906      	ldr	r1, [pc, #24]	; (b420 <usb_device_endpoint_set_config+0x528>)
    b406:	5859      	ldr	r1, [r3, r1]
    b408:	0063      	lsls	r3, r4, #1
    b40a:	181b      	adds	r3, r3, r0
    b40c:	011b      	lsls	r3, r3, #4
    b40e:	18cb      	adds	r3, r1, r3
    b410:	3304      	adds	r3, #4
    b412:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    b414:	2300      	movs	r3, #0
}
    b416:	0018      	movs	r0, r3
    b418:	46bd      	mov	sp, r7
    b41a:	b004      	add	sp, #16
    b41c:	bdb0      	pop	{r4, r5, r7, pc}
    b41e:	46c0      	nop			; (mov r8, r8)
    b420:	00000020 	.word	0x00000020
    b424:	8fffffff 	.word	0x8fffffff

0000b428 <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    b428:	b580      	push	{r7, lr}
    b42a:	b084      	sub	sp, #16
    b42c:	af00      	add	r7, sp, #0
    b42e:	6078      	str	r0, [r7, #4]
    b430:	000a      	movs	r2, r1
    b432:	1cfb      	adds	r3, r7, #3
    b434:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    b436:	230f      	movs	r3, #15
    b438:	18fb      	adds	r3, r7, r3
    b43a:	1cfa      	adds	r2, r7, #3
    b43c:	7812      	ldrb	r2, [r2, #0]
    b43e:	210f      	movs	r1, #15
    b440:	400a      	ands	r2, r1
    b442:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    b444:	1cfb      	adds	r3, r7, #3
    b446:	781b      	ldrb	r3, [r3, #0]
    b448:	b25b      	sxtb	r3, r3
    b44a:	2b00      	cmp	r3, #0
    b44c:	da16      	bge.n	b47c <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    b44e:	687b      	ldr	r3, [r7, #4]
    b450:	681a      	ldr	r2, [r3, #0]
    b452:	230f      	movs	r3, #15
    b454:	18fb      	adds	r3, r7, r3
    b456:	781b      	ldrb	r3, [r3, #0]
    b458:	3308      	adds	r3, #8
    b45a:	015b      	lsls	r3, r3, #5
    b45c:	18d3      	adds	r3, r2, r3
    b45e:	3304      	adds	r3, #4
    b460:	2280      	movs	r2, #128	; 0x80
    b462:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    b464:	687b      	ldr	r3, [r7, #4]
    b466:	681a      	ldr	r2, [r3, #0]
    b468:	230f      	movs	r3, #15
    b46a:	18fb      	adds	r3, r7, r3
    b46c:	781b      	ldrb	r3, [r3, #0]
    b46e:	3308      	adds	r3, #8
    b470:	015b      	lsls	r3, r3, #5
    b472:	18d3      	adds	r3, r2, r3
    b474:	3307      	adds	r3, #7
    b476:	2202      	movs	r2, #2
    b478:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    b47a:	e015      	b.n	b4a8 <usb_device_endpoint_abort_job+0x80>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    b47c:	687b      	ldr	r3, [r7, #4]
    b47e:	681a      	ldr	r2, [r3, #0]
    b480:	230f      	movs	r3, #15
    b482:	18fb      	adds	r3, r7, r3
    b484:	781b      	ldrb	r3, [r3, #0]
    b486:	3308      	adds	r3, #8
    b488:	015b      	lsls	r3, r3, #5
    b48a:	18d3      	adds	r3, r2, r3
    b48c:	3305      	adds	r3, #5
    b48e:	2240      	movs	r2, #64	; 0x40
    b490:	701a      	strb	r2, [r3, #0]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    b492:	687b      	ldr	r3, [r7, #4]
    b494:	681a      	ldr	r2, [r3, #0]
    b496:	230f      	movs	r3, #15
    b498:	18fb      	adds	r3, r7, r3
    b49a:	781b      	ldrb	r3, [r3, #0]
    b49c:	3308      	adds	r3, #8
    b49e:	015b      	lsls	r3, r3, #5
    b4a0:	18d3      	adds	r3, r2, r3
    b4a2:	3307      	adds	r3, #7
    b4a4:	2201      	movs	r2, #1
    b4a6:	701a      	strb	r2, [r3, #0]
}
    b4a8:	46c0      	nop			; (mov r8, r8)
    b4aa:	46bd      	mov	sp, r7
    b4ac:	b004      	add	sp, #16
    b4ae:	bd80      	pop	{r7, pc}

0000b4b0 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    b4b0:	b580      	push	{r7, lr}
    b4b2:	b084      	sub	sp, #16
    b4b4:	af00      	add	r7, sp, #0
    b4b6:	6078      	str	r0, [r7, #4]
    b4b8:	000a      	movs	r2, r1
    b4ba:	1cfb      	adds	r3, r7, #3
    b4bc:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    b4be:	230f      	movs	r3, #15
    b4c0:	18fb      	adds	r3, r7, r3
    b4c2:	1cfa      	adds	r2, r7, #3
    b4c4:	7812      	ldrb	r2, [r2, #0]
    b4c6:	210f      	movs	r1, #15
    b4c8:	400a      	ands	r2, r1
    b4ca:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    b4cc:	1cfb      	adds	r3, r7, #3
    b4ce:	781b      	ldrb	r3, [r3, #0]
    b4d0:	b25b      	sxtb	r3, r3
    b4d2:	2b00      	cmp	r3, #0
    b4d4:	da11      	bge.n	b4fa <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    b4d6:	687b      	ldr	r3, [r7, #4]
    b4d8:	681a      	ldr	r2, [r3, #0]
    b4da:	230f      	movs	r3, #15
    b4dc:	18fb      	adds	r3, r7, r3
    b4de:	781b      	ldrb	r3, [r3, #0]
    b4e0:	3308      	adds	r3, #8
    b4e2:	015b      	lsls	r3, r3, #5
    b4e4:	18d3      	adds	r3, r2, r3
    b4e6:	3306      	adds	r3, #6
    b4e8:	781b      	ldrb	r3, [r3, #0]
    b4ea:	b2db      	uxtb	r3, r3
    b4ec:	001a      	movs	r2, r3
    b4ee:	2320      	movs	r3, #32
    b4f0:	4013      	ands	r3, r2
    b4f2:	1e5a      	subs	r2, r3, #1
    b4f4:	4193      	sbcs	r3, r2
    b4f6:	b2db      	uxtb	r3, r3
    b4f8:	e010      	b.n	b51c <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    b4fa:	687b      	ldr	r3, [r7, #4]
    b4fc:	681a      	ldr	r2, [r3, #0]
    b4fe:	230f      	movs	r3, #15
    b500:	18fb      	adds	r3, r7, r3
    b502:	781b      	ldrb	r3, [r3, #0]
    b504:	3308      	adds	r3, #8
    b506:	015b      	lsls	r3, r3, #5
    b508:	18d3      	adds	r3, r2, r3
    b50a:	3306      	adds	r3, #6
    b50c:	781b      	ldrb	r3, [r3, #0]
    b50e:	b2db      	uxtb	r3, r3
    b510:	001a      	movs	r2, r3
    b512:	2310      	movs	r3, #16
    b514:	4013      	ands	r3, r2
    b516:	1e5a      	subs	r2, r3, #1
    b518:	4193      	sbcs	r3, r2
    b51a:	b2db      	uxtb	r3, r3
	}
}
    b51c:	0018      	movs	r0, r3
    b51e:	46bd      	mov	sp, r7
    b520:	b004      	add	sp, #16
    b522:	bd80      	pop	{r7, pc}

0000b524 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    b524:	b580      	push	{r7, lr}
    b526:	b084      	sub	sp, #16
    b528:	af00      	add	r7, sp, #0
    b52a:	6078      	str	r0, [r7, #4]
    b52c:	000a      	movs	r2, r1
    b52e:	1cfb      	adds	r3, r7, #3
    b530:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    b532:	230f      	movs	r3, #15
    b534:	18fb      	adds	r3, r7, r3
    b536:	1cfa      	adds	r2, r7, #3
    b538:	7812      	ldrb	r2, [r2, #0]
    b53a:	210f      	movs	r1, #15
    b53c:	400a      	ands	r2, r1
    b53e:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    b540:	1cfb      	adds	r3, r7, #3
    b542:	781b      	ldrb	r3, [r3, #0]
    b544:	b25b      	sxtb	r3, r3
    b546:	2b00      	cmp	r3, #0
    b548:	da0b      	bge.n	b562 <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    b54a:	687b      	ldr	r3, [r7, #4]
    b54c:	681a      	ldr	r2, [r3, #0]
    b54e:	230f      	movs	r3, #15
    b550:	18fb      	adds	r3, r7, r3
    b552:	781b      	ldrb	r3, [r3, #0]
    b554:	3308      	adds	r3, #8
    b556:	015b      	lsls	r3, r3, #5
    b558:	18d3      	adds	r3, r2, r3
    b55a:	3305      	adds	r3, #5
    b55c:	2220      	movs	r2, #32
    b55e:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    b560:	e00a      	b.n	b578 <usb_device_endpoint_set_halt+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    b562:	687b      	ldr	r3, [r7, #4]
    b564:	681a      	ldr	r2, [r3, #0]
    b566:	230f      	movs	r3, #15
    b568:	18fb      	adds	r3, r7, r3
    b56a:	781b      	ldrb	r3, [r3, #0]
    b56c:	3308      	adds	r3, #8
    b56e:	015b      	lsls	r3, r3, #5
    b570:	18d3      	adds	r3, r2, r3
    b572:	3305      	adds	r3, #5
    b574:	2210      	movs	r2, #16
    b576:	701a      	strb	r2, [r3, #0]
}
    b578:	46c0      	nop			; (mov r8, r8)
    b57a:	46bd      	mov	sp, r7
    b57c:	b004      	add	sp, #16
    b57e:	bd80      	pop	{r7, pc}

0000b580 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    b580:	b580      	push	{r7, lr}
    b582:	b084      	sub	sp, #16
    b584:	af00      	add	r7, sp, #0
    b586:	6078      	str	r0, [r7, #4]
    b588:	000a      	movs	r2, r1
    b58a:	1cfb      	adds	r3, r7, #3
    b58c:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    b58e:	230f      	movs	r3, #15
    b590:	18fb      	adds	r3, r7, r3
    b592:	1cfa      	adds	r2, r7, #3
    b594:	7812      	ldrb	r2, [r2, #0]
    b596:	210f      	movs	r1, #15
    b598:	400a      	ands	r2, r1
    b59a:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    b59c:	1cfb      	adds	r3, r7, #3
    b59e:	781b      	ldrb	r3, [r3, #0]
    b5a0:	b25b      	sxtb	r3, r3
    b5a2:	2b00      	cmp	r3, #0
    b5a4:	da3f      	bge.n	b626 <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    b5a6:	687b      	ldr	r3, [r7, #4]
    b5a8:	681a      	ldr	r2, [r3, #0]
    b5aa:	230f      	movs	r3, #15
    b5ac:	18fb      	adds	r3, r7, r3
    b5ae:	781b      	ldrb	r3, [r3, #0]
    b5b0:	3308      	adds	r3, #8
    b5b2:	015b      	lsls	r3, r3, #5
    b5b4:	18d3      	adds	r3, r2, r3
    b5b6:	3306      	adds	r3, #6
    b5b8:	781b      	ldrb	r3, [r3, #0]
    b5ba:	b2db      	uxtb	r3, r3
    b5bc:	001a      	movs	r2, r3
    b5be:	2320      	movs	r3, #32
    b5c0:	4013      	ands	r3, r2
    b5c2:	d06f      	beq.n	b6a4 <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    b5c4:	687b      	ldr	r3, [r7, #4]
    b5c6:	681a      	ldr	r2, [r3, #0]
    b5c8:	230f      	movs	r3, #15
    b5ca:	18fb      	adds	r3, r7, r3
    b5cc:	781b      	ldrb	r3, [r3, #0]
    b5ce:	3308      	adds	r3, #8
    b5d0:	015b      	lsls	r3, r3, #5
    b5d2:	18d3      	adds	r3, r2, r3
    b5d4:	3304      	adds	r3, #4
    b5d6:	2220      	movs	r2, #32
    b5d8:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    b5da:	687b      	ldr	r3, [r7, #4]
    b5dc:	681a      	ldr	r2, [r3, #0]
    b5de:	230f      	movs	r3, #15
    b5e0:	18fb      	adds	r3, r7, r3
    b5e2:	781b      	ldrb	r3, [r3, #0]
    b5e4:	3308      	adds	r3, #8
    b5e6:	015b      	lsls	r3, r3, #5
    b5e8:	18d3      	adds	r3, r2, r3
    b5ea:	3307      	adds	r3, #7
    b5ec:	781b      	ldrb	r3, [r3, #0]
    b5ee:	b2db      	uxtb	r3, r3
    b5f0:	001a      	movs	r2, r3
    b5f2:	2340      	movs	r3, #64	; 0x40
    b5f4:	4013      	ands	r3, r2
    b5f6:	d055      	beq.n	b6a4 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    b5f8:	687b      	ldr	r3, [r7, #4]
    b5fa:	681a      	ldr	r2, [r3, #0]
    b5fc:	230f      	movs	r3, #15
    b5fe:	18fb      	adds	r3, r7, r3
    b600:	781b      	ldrb	r3, [r3, #0]
    b602:	3308      	adds	r3, #8
    b604:	015b      	lsls	r3, r3, #5
    b606:	18d3      	adds	r3, r2, r3
    b608:	3307      	adds	r3, #7
    b60a:	2240      	movs	r2, #64	; 0x40
    b60c:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    b60e:	687b      	ldr	r3, [r7, #4]
    b610:	681a      	ldr	r2, [r3, #0]
    b612:	230f      	movs	r3, #15
    b614:	18fb      	adds	r3, r7, r3
    b616:	781b      	ldrb	r3, [r3, #0]
    b618:	3308      	adds	r3, #8
    b61a:	015b      	lsls	r3, r3, #5
    b61c:	18d3      	adds	r3, r2, r3
    b61e:	3304      	adds	r3, #4
    b620:	2202      	movs	r2, #2
    b622:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    b624:	e03e      	b.n	b6a4 <usb_device_endpoint_clear_halt+0x124>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    b626:	687b      	ldr	r3, [r7, #4]
    b628:	681a      	ldr	r2, [r3, #0]
    b62a:	230f      	movs	r3, #15
    b62c:	18fb      	adds	r3, r7, r3
    b62e:	781b      	ldrb	r3, [r3, #0]
    b630:	3308      	adds	r3, #8
    b632:	015b      	lsls	r3, r3, #5
    b634:	18d3      	adds	r3, r2, r3
    b636:	3306      	adds	r3, #6
    b638:	781b      	ldrb	r3, [r3, #0]
    b63a:	b2db      	uxtb	r3, r3
    b63c:	001a      	movs	r2, r3
    b63e:	2310      	movs	r3, #16
    b640:	4013      	ands	r3, r2
    b642:	d02f      	beq.n	b6a4 <usb_device_endpoint_clear_halt+0x124>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    b644:	687b      	ldr	r3, [r7, #4]
    b646:	681a      	ldr	r2, [r3, #0]
    b648:	230f      	movs	r3, #15
    b64a:	18fb      	adds	r3, r7, r3
    b64c:	781b      	ldrb	r3, [r3, #0]
    b64e:	3308      	adds	r3, #8
    b650:	015b      	lsls	r3, r3, #5
    b652:	18d3      	adds	r3, r2, r3
    b654:	3304      	adds	r3, #4
    b656:	2210      	movs	r2, #16
    b658:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    b65a:	687b      	ldr	r3, [r7, #4]
    b65c:	681a      	ldr	r2, [r3, #0]
    b65e:	230f      	movs	r3, #15
    b660:	18fb      	adds	r3, r7, r3
    b662:	781b      	ldrb	r3, [r3, #0]
    b664:	3308      	adds	r3, #8
    b666:	015b      	lsls	r3, r3, #5
    b668:	18d3      	adds	r3, r2, r3
    b66a:	3307      	adds	r3, #7
    b66c:	781b      	ldrb	r3, [r3, #0]
    b66e:	b2db      	uxtb	r3, r3
    b670:	001a      	movs	r2, r3
    b672:	2320      	movs	r3, #32
    b674:	4013      	ands	r3, r2
    b676:	d015      	beq.n	b6a4 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    b678:	687b      	ldr	r3, [r7, #4]
    b67a:	681a      	ldr	r2, [r3, #0]
    b67c:	230f      	movs	r3, #15
    b67e:	18fb      	adds	r3, r7, r3
    b680:	781b      	ldrb	r3, [r3, #0]
    b682:	3308      	adds	r3, #8
    b684:	015b      	lsls	r3, r3, #5
    b686:	18d3      	adds	r3, r2, r3
    b688:	3307      	adds	r3, #7
    b68a:	2220      	movs	r2, #32
    b68c:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    b68e:	687b      	ldr	r3, [r7, #4]
    b690:	681a      	ldr	r2, [r3, #0]
    b692:	230f      	movs	r3, #15
    b694:	18fb      	adds	r3, r7, r3
    b696:	781b      	ldrb	r3, [r3, #0]
    b698:	3308      	adds	r3, #8
    b69a:	015b      	lsls	r3, r3, #5
    b69c:	18d3      	adds	r3, r2, r3
    b69e:	3304      	adds	r3, #4
    b6a0:	2201      	movs	r2, #1
    b6a2:	701a      	strb	r2, [r3, #0]
}
    b6a4:	46c0      	nop			; (mov r8, r8)
    b6a6:	46bd      	mov	sp, r7
    b6a8:	b004      	add	sp, #16
    b6aa:	bd80      	pop	{r7, pc}

0000b6ac <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    b6ac:	b580      	push	{r7, lr}
    b6ae:	b086      	sub	sp, #24
    b6b0:	af00      	add	r7, sp, #0
    b6b2:	60f8      	str	r0, [r7, #12]
    b6b4:	607a      	str	r2, [r7, #4]
    b6b6:	603b      	str	r3, [r7, #0]
    b6b8:	230b      	movs	r3, #11
    b6ba:	18fb      	adds	r3, r7, r3
    b6bc:	1c0a      	adds	r2, r1, #0
    b6be:	701a      	strb	r2, [r3, #0]
    b6c0:	4b28      	ldr	r3, [pc, #160]	; (b764 <usb_device_endpoint_write_buffer_job+0xb8>)
    b6c2:	447b      	add	r3, pc
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    b6c4:	68fa      	ldr	r2, [r7, #12]
    b6c6:	6812      	ldr	r2, [r2, #0]
    b6c8:	210b      	movs	r1, #11
    b6ca:	1879      	adds	r1, r7, r1
    b6cc:	7809      	ldrb	r1, [r1, #0]
    b6ce:	3108      	adds	r1, #8
    b6d0:	0149      	lsls	r1, r1, #5
    b6d2:	5c8a      	ldrb	r2, [r1, r2]
    b6d4:	0652      	lsls	r2, r2, #25
    b6d6:	0f52      	lsrs	r2, r2, #29
    b6d8:	b2d1      	uxtb	r1, r2
    b6da:	2217      	movs	r2, #23
    b6dc:	18ba      	adds	r2, r7, r2
    b6de:	7011      	strb	r1, [r2, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    b6e0:	2217      	movs	r2, #23
    b6e2:	18ba      	adds	r2, r7, r2
    b6e4:	7812      	ldrb	r2, [r2, #0]
    b6e6:	2a00      	cmp	r2, #0
    b6e8:	d101      	bne.n	b6ee <usb_device_endpoint_write_buffer_job+0x42>
		return STATUS_ERR_DENIED;
    b6ea:	231c      	movs	r3, #28
    b6ec:	e035      	b.n	b75a <usb_device_endpoint_write_buffer_job+0xae>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    b6ee:	220b      	movs	r2, #11
    b6f0:	18ba      	adds	r2, r7, r2
    b6f2:	7812      	ldrb	r2, [r2, #0]
    b6f4:	6879      	ldr	r1, [r7, #4]
    b6f6:	481c      	ldr	r0, [pc, #112]	; (b768 <usb_device_endpoint_write_buffer_job+0xbc>)
    b6f8:	5818      	ldr	r0, [r3, r0]
    b6fa:	0152      	lsls	r2, r2, #5
    b6fc:	1882      	adds	r2, r0, r2
    b6fe:	3210      	adds	r2, #16
    b700:	6011      	str	r1, [r2, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    b702:	220b      	movs	r2, #11
    b704:	18ba      	adds	r2, r7, r2
    b706:	7812      	ldrb	r2, [r2, #0]
    b708:	4917      	ldr	r1, [pc, #92]	; (b768 <usb_device_endpoint_write_buffer_job+0xbc>)
    b70a:	5859      	ldr	r1, [r3, r1]
    b70c:	0152      	lsls	r2, r2, #5
    b70e:	188a      	adds	r2, r1, r2
    b710:	3210      	adds	r2, #16
    b712:	6851      	ldr	r1, [r2, #4]
    b714:	4815      	ldr	r0, [pc, #84]	; (b76c <usb_device_endpoint_write_buffer_job+0xc0>)
    b716:	4001      	ands	r1, r0
    b718:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    b71a:	220b      	movs	r2, #11
    b71c:	18ba      	adds	r2, r7, r2
    b71e:	7810      	ldrb	r0, [r2, #0]
    b720:	683a      	ldr	r2, [r7, #0]
    b722:	b292      	uxth	r2, r2
    b724:	0492      	lsls	r2, r2, #18
    b726:	0c92      	lsrs	r2, r2, #18
    b728:	b291      	uxth	r1, r2
    b72a:	4a0f      	ldr	r2, [pc, #60]	; (b768 <usb_device_endpoint_write_buffer_job+0xbc>)
    b72c:	589a      	ldr	r2, [r3, r2]
    b72e:	0143      	lsls	r3, r0, #5
    b730:	18d3      	adds	r3, r2, r3
    b732:	3310      	adds	r3, #16
    b734:	685a      	ldr	r2, [r3, #4]
    b736:	0489      	lsls	r1, r1, #18
    b738:	0c89      	lsrs	r1, r1, #18
    b73a:	0b92      	lsrs	r2, r2, #14
    b73c:	0392      	lsls	r2, r2, #14
    b73e:	430a      	orrs	r2, r1
    b740:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    b742:	68fb      	ldr	r3, [r7, #12]
    b744:	681a      	ldr	r2, [r3, #0]
    b746:	230b      	movs	r3, #11
    b748:	18fb      	adds	r3, r7, r3
    b74a:	781b      	ldrb	r3, [r3, #0]
    b74c:	3308      	adds	r3, #8
    b74e:	015b      	lsls	r3, r3, #5
    b750:	18d3      	adds	r3, r2, r3
    b752:	3305      	adds	r3, #5
    b754:	2280      	movs	r2, #128	; 0x80
    b756:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    b758:	2300      	movs	r3, #0
}
    b75a:	0018      	movs	r0, r3
    b75c:	46bd      	mov	sp, r7
    b75e:	b006      	add	sp, #24
    b760:	bd80      	pop	{r7, pc}
    b762:	46c0      	nop			; (mov r8, r8)
    b764:	0000670e 	.word	0x0000670e
    b768:	00000020 	.word	0x00000020
    b76c:	f0003fff 	.word	0xf0003fff

0000b770 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    b770:	b590      	push	{r4, r7, lr}
    b772:	b087      	sub	sp, #28
    b774:	af00      	add	r7, sp, #0
    b776:	60f8      	str	r0, [r7, #12]
    b778:	607a      	str	r2, [r7, #4]
    b77a:	603b      	str	r3, [r7, #0]
    b77c:	230b      	movs	r3, #11
    b77e:	18fb      	adds	r3, r7, r3
    b780:	1c0a      	adds	r2, r1, #0
    b782:	701a      	strb	r2, [r3, #0]
    b784:	4b26      	ldr	r3, [pc, #152]	; (b820 <usb_device_endpoint_read_buffer_job+0xb0>)
    b786:	447b      	add	r3, pc
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    b788:	68fa      	ldr	r2, [r7, #12]
    b78a:	6812      	ldr	r2, [r2, #0]
    b78c:	210b      	movs	r1, #11
    b78e:	1879      	adds	r1, r7, r1
    b790:	7809      	ldrb	r1, [r1, #0]
    b792:	3108      	adds	r1, #8
    b794:	0149      	lsls	r1, r1, #5
    b796:	5c8a      	ldrb	r2, [r1, r2]
    b798:	0752      	lsls	r2, r2, #29
    b79a:	0f52      	lsrs	r2, r2, #29
    b79c:	b2d1      	uxtb	r1, r2
    b79e:	2217      	movs	r2, #23
    b7a0:	18ba      	adds	r2, r7, r2
    b7a2:	7011      	strb	r1, [r2, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    b7a4:	2217      	movs	r2, #23
    b7a6:	18ba      	adds	r2, r7, r2
    b7a8:	7812      	ldrb	r2, [r2, #0]
    b7aa:	2a00      	cmp	r2, #0
    b7ac:	d101      	bne.n	b7b2 <usb_device_endpoint_read_buffer_job+0x42>
		return STATUS_ERR_DENIED;
    b7ae:	231c      	movs	r3, #28
    b7b0:	e032      	b.n	b818 <usb_device_endpoint_read_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    b7b2:	220b      	movs	r2, #11
    b7b4:	18ba      	adds	r2, r7, r2
    b7b6:	7811      	ldrb	r1, [r2, #0]
    b7b8:	6878      	ldr	r0, [r7, #4]
    b7ba:	4a1a      	ldr	r2, [pc, #104]	; (b824 <usb_device_endpoint_read_buffer_job+0xb4>)
    b7bc:	589a      	ldr	r2, [r3, r2]
    b7be:	0149      	lsls	r1, r1, #5
    b7c0:	5088      	str	r0, [r1, r2]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    b7c2:	220b      	movs	r2, #11
    b7c4:	18ba      	adds	r2, r7, r2
    b7c6:	7812      	ldrb	r2, [r2, #0]
    b7c8:	6839      	ldr	r1, [r7, #0]
    b7ca:	b289      	uxth	r1, r1
    b7cc:	0489      	lsls	r1, r1, #18
    b7ce:	0c89      	lsrs	r1, r1, #18
    b7d0:	b288      	uxth	r0, r1
    b7d2:	4914      	ldr	r1, [pc, #80]	; (b824 <usb_device_endpoint_read_buffer_job+0xb4>)
    b7d4:	5859      	ldr	r1, [r3, r1]
    b7d6:	0152      	lsls	r2, r2, #5
    b7d8:	188a      	adds	r2, r1, r2
    b7da:	6851      	ldr	r1, [r2, #4]
    b7dc:	0480      	lsls	r0, r0, #18
    b7de:	0c80      	lsrs	r0, r0, #18
    b7e0:	0380      	lsls	r0, r0, #14
    b7e2:	4c11      	ldr	r4, [pc, #68]	; (b828 <usb_device_endpoint_read_buffer_job+0xb8>)
    b7e4:	4021      	ands	r1, r4
    b7e6:	4301      	orrs	r1, r0
    b7e8:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    b7ea:	220b      	movs	r2, #11
    b7ec:	18ba      	adds	r2, r7, r2
    b7ee:	7811      	ldrb	r1, [r2, #0]
    b7f0:	4a0c      	ldr	r2, [pc, #48]	; (b824 <usb_device_endpoint_read_buffer_job+0xb4>)
    b7f2:	589a      	ldr	r2, [r3, r2]
    b7f4:	014b      	lsls	r3, r1, #5
    b7f6:	18d3      	adds	r3, r2, r3
    b7f8:	685a      	ldr	r2, [r3, #4]
    b7fa:	0b92      	lsrs	r2, r2, #14
    b7fc:	0392      	lsls	r2, r2, #14
    b7fe:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    b800:	68fb      	ldr	r3, [r7, #12]
    b802:	681a      	ldr	r2, [r3, #0]
    b804:	230b      	movs	r3, #11
    b806:	18fb      	adds	r3, r7, r3
    b808:	781b      	ldrb	r3, [r3, #0]
    b80a:	3308      	adds	r3, #8
    b80c:	015b      	lsls	r3, r3, #5
    b80e:	18d3      	adds	r3, r2, r3
    b810:	3304      	adds	r3, #4
    b812:	2240      	movs	r2, #64	; 0x40
    b814:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    b816:	2300      	movs	r3, #0
}
    b818:	0018      	movs	r0, r3
    b81a:	46bd      	mov	sp, r7
    b81c:	b007      	add	sp, #28
    b81e:	bd90      	pop	{r4, r7, pc}
    b820:	0000664a 	.word	0x0000664a
    b824:	00000020 	.word	0x00000020
    b828:	f0003fff 	.word	0xf0003fff

0000b82c <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    b82c:	b580      	push	{r7, lr}
    b82e:	b082      	sub	sp, #8
    b830:	af00      	add	r7, sp, #0
    b832:	6078      	str	r0, [r7, #4]
    b834:	6039      	str	r1, [r7, #0]
    b836:	4b10      	ldr	r3, [pc, #64]	; (b878 <usb_device_endpoint_setup_buffer_job+0x4c>)
    b838:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    b83a:	6839      	ldr	r1, [r7, #0]
    b83c:	4a0f      	ldr	r2, [pc, #60]	; (b87c <usb_device_endpoint_setup_buffer_job+0x50>)
    b83e:	589a      	ldr	r2, [r3, r2]
    b840:	6011      	str	r1, [r2, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    b842:	4a0e      	ldr	r2, [pc, #56]	; (b87c <usb_device_endpoint_setup_buffer_job+0x50>)
    b844:	589a      	ldr	r2, [r3, r2]
    b846:	6851      	ldr	r1, [r2, #4]
    b848:	480d      	ldr	r0, [pc, #52]	; (b880 <usb_device_endpoint_setup_buffer_job+0x54>)
    b84a:	4001      	ands	r1, r0
    b84c:	2080      	movs	r0, #128	; 0x80
    b84e:	0280      	lsls	r0, r0, #10
    b850:	4301      	orrs	r1, r0
    b852:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    b854:	4a09      	ldr	r2, [pc, #36]	; (b87c <usb_device_endpoint_setup_buffer_job+0x50>)
    b856:	589b      	ldr	r3, [r3, r2]
    b858:	685a      	ldr	r2, [r3, #4]
    b85a:	0b92      	lsrs	r2, r2, #14
    b85c:	0392      	lsls	r2, r2, #14
    b85e:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    b860:	687b      	ldr	r3, [r7, #4]
    b862:	681a      	ldr	r2, [r3, #0]
    b864:	2382      	movs	r3, #130	; 0x82
    b866:	005b      	lsls	r3, r3, #1
    b868:	2140      	movs	r1, #64	; 0x40
    b86a:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    b86c:	2300      	movs	r3, #0
}
    b86e:	0018      	movs	r0, r3
    b870:	46bd      	mov	sp, r7
    b872:	b002      	add	sp, #8
    b874:	bd80      	pop	{r7, pc}
    b876:	46c0      	nop			; (mov r8, r8)
    b878:	00006598 	.word	0x00006598
    b87c:	00000020 	.word	0x00000020
    b880:	f0003fff 	.word	0xf0003fff

0000b884 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    b884:	b590      	push	{r4, r7, lr}
    b886:	b085      	sub	sp, #20
    b888:	af00      	add	r7, sp, #0
    b88a:	4cb2      	ldr	r4, [pc, #712]	; (bb54 <_usb_device_interrupt_handler+0x2d0>)
    b88c:	447c      	add	r4, pc
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    b88e:	4bb2      	ldr	r3, [pc, #712]	; (bb58 <_usb_device_interrupt_handler+0x2d4>)
    b890:	447b      	add	r3, pc
    b892:	681b      	ldr	r3, [r3, #0]
    b894:	681a      	ldr	r2, [r3, #0]
    b896:	2308      	movs	r3, #8
    b898:	18fb      	adds	r3, r7, r3
    b89a:	8c12      	ldrh	r2, [r2, #32]
    b89c:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    b89e:	2308      	movs	r3, #8
    b8a0:	18fb      	adds	r3, r7, r3
    b8a2:	881b      	ldrh	r3, [r3, #0]
    b8a4:	2b00      	cmp	r3, #0
    b8a6:	d000      	beq.n	b8aa <_usb_device_interrupt_handler+0x26>
    b8a8:	e061      	b.n	b96e <_usb_device_interrupt_handler+0xea>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    b8aa:	4bac      	ldr	r3, [pc, #688]	; (bb5c <_usb_device_interrupt_handler+0x2d8>)
    b8ac:	447b      	add	r3, pc
    b8ae:	681b      	ldr	r3, [r3, #0]
    b8b0:	681a      	ldr	r2, [r3, #0]
    b8b2:	1dbb      	adds	r3, r7, #6
    b8b4:	8b92      	ldrh	r2, [r2, #28]
    b8b6:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    b8b8:	4ba9      	ldr	r3, [pc, #676]	; (bb60 <_usb_device_interrupt_handler+0x2dc>)
    b8ba:	447b      	add	r3, pc
    b8bc:	681a      	ldr	r2, [r3, #0]
    b8be:	23ab      	movs	r3, #171	; 0xab
    b8c0:	005b      	lsls	r3, r3, #1
    b8c2:	5ad3      	ldrh	r3, [r2, r3]
		flags_run = flags &
    b8c4:	1dba      	adds	r2, r7, #6
    b8c6:	8812      	ldrh	r2, [r2, #0]
    b8c8:	4013      	ands	r3, r2
    b8ca:	b29a      	uxth	r2, r3
				_usb_instances->device_registered_callback_mask;
    b8cc:	4ba5      	ldr	r3, [pc, #660]	; (bb64 <_usb_device_interrupt_handler+0x2e0>)
    b8ce:	447b      	add	r3, pc
    b8d0:	6819      	ldr	r1, [r3, #0]
    b8d2:	23aa      	movs	r3, #170	; 0xaa
    b8d4:	005b      	lsls	r3, r3, #1
    b8d6:	5ac9      	ldrh	r1, [r1, r3]
		flags_run = flags &
    b8d8:	1d3b      	adds	r3, r7, #4
    b8da:	400a      	ands	r2, r1
    b8dc:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    b8de:	2300      	movs	r3, #0
    b8e0:	60fb      	str	r3, [r7, #12]
    b8e2:	e040      	b.n	b966 <_usb_device_interrupt_handler+0xe2>
			if (flags & _usb_device_irq_bits[i]) {
    b8e4:	4ba0      	ldr	r3, [pc, #640]	; (bb68 <_usb_device_interrupt_handler+0x2e4>)
    b8e6:	447b      	add	r3, pc
    b8e8:	68fa      	ldr	r2, [r7, #12]
    b8ea:	0052      	lsls	r2, r2, #1
    b8ec:	5ad3      	ldrh	r3, [r2, r3]
    b8ee:	1dba      	adds	r2, r7, #6
    b8f0:	8812      	ldrh	r2, [r2, #0]
    b8f2:	4013      	ands	r3, r2
    b8f4:	b29b      	uxth	r3, r3
    b8f6:	2b00      	cmp	r3, #0
    b8f8:	d009      	beq.n	b90e <_usb_device_interrupt_handler+0x8a>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    b8fa:	4b9c      	ldr	r3, [pc, #624]	; (bb6c <_usb_device_interrupt_handler+0x2e8>)
    b8fc:	447b      	add	r3, pc
    b8fe:	681b      	ldr	r3, [r3, #0]
    b900:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    b902:	4a9b      	ldr	r2, [pc, #620]	; (bb70 <_usb_device_interrupt_handler+0x2ec>)
    b904:	447a      	add	r2, pc
    b906:	68f9      	ldr	r1, [r7, #12]
    b908:	0049      	lsls	r1, r1, #1
    b90a:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    b90c:	839a      	strh	r2, [r3, #28]
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    b90e:	4b99      	ldr	r3, [pc, #612]	; (bb74 <_usb_device_interrupt_handler+0x2f0>)
    b910:	447b      	add	r3, pc
    b912:	68fa      	ldr	r2, [r7, #12]
    b914:	0052      	lsls	r2, r2, #1
    b916:	5ad3      	ldrh	r3, [r2, r3]
    b918:	1d3a      	adds	r2, r7, #4
    b91a:	8812      	ldrh	r2, [r2, #0]
    b91c:	4013      	ands	r3, r2
    b91e:	b29b      	uxth	r3, r3
    b920:	2b00      	cmp	r3, #0
    b922:	d01d      	beq.n	b960 <_usb_device_interrupt_handler+0xdc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    b924:	68fb      	ldr	r3, [r7, #12]
    b926:	2b06      	cmp	r3, #6
    b928:	d10c      	bne.n	b944 <_usb_device_interrupt_handler+0xc0>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    b92a:	4b93      	ldr	r3, [pc, #588]	; (bb78 <_usb_device_interrupt_handler+0x2f4>)
    b92c:	58e3      	ldr	r3, [r4, r3]
    b92e:	891b      	ldrh	r3, [r3, #8]
    b930:	045b      	lsls	r3, r3, #17
    b932:	0d5b      	lsrs	r3, r3, #21
    b934:	b29b      	uxth	r3, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    b936:	001a      	movs	r2, r3
    b938:	2380      	movs	r3, #128	; 0x80
    b93a:	005b      	lsls	r3, r3, #1
    b93c:	401a      	ands	r2, r3
					device_callback_lpm_wakeup_enable =
    b93e:	4b8f      	ldr	r3, [pc, #572]	; (bb7c <_usb_device_interrupt_handler+0x2f8>)
    b940:	447b      	add	r3, pc
    b942:	601a      	str	r2, [r3, #0]
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    b944:	4b8e      	ldr	r3, [pc, #568]	; (bb80 <_usb_device_interrupt_handler+0x2fc>)
    b946:	447b      	add	r3, pc
    b948:	681b      	ldr	r3, [r3, #0]
    b94a:	68fa      	ldr	r2, [r7, #12]
    b94c:	322e      	adds	r2, #46	; 0x2e
    b94e:	0092      	lsls	r2, r2, #2
    b950:	58d2      	ldr	r2, [r2, r3]
    b952:	4b8c      	ldr	r3, [pc, #560]	; (bb84 <_usb_device_interrupt_handler+0x300>)
    b954:	447b      	add	r3, pc
    b956:	681b      	ldr	r3, [r3, #0]
    b958:	498b      	ldr	r1, [pc, #556]	; (bb88 <_usb_device_interrupt_handler+0x304>)
    b95a:	4479      	add	r1, pc
    b95c:	0018      	movs	r0, r3
    b95e:	4790      	blx	r2
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    b960:	68fb      	ldr	r3, [r7, #12]
    b962:	3301      	adds	r3, #1
    b964:	60fb      	str	r3, [r7, #12]
    b966:	68fb      	ldr	r3, [r7, #12]
    b968:	2b06      	cmp	r3, #6
    b96a:	ddbb      	ble.n	b8e4 <_usb_device_interrupt_handler+0x60>
    b96c:	e2ba      	b.n	bee4 <_usb_device_interrupt_handler+0x660>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    b96e:	230b      	movs	r3, #11
    b970:	18fb      	adds	r3, r7, r3
    b972:	2200      	movs	r2, #0
    b974:	701a      	strb	r2, [r3, #0]
    b976:	e2a5      	b.n	bec4 <_usb_device_interrupt_handler+0x640>

			if (ep_inst & (1 << i)) {
    b978:	2308      	movs	r3, #8
    b97a:	18fb      	adds	r3, r7, r3
    b97c:	881a      	ldrh	r2, [r3, #0]
    b97e:	230b      	movs	r3, #11
    b980:	18fb      	adds	r3, r7, r3
    b982:	781b      	ldrb	r3, [r3, #0]
    b984:	411a      	asrs	r2, r3
    b986:	0013      	movs	r3, r2
    b988:	2201      	movs	r2, #1
    b98a:	4013      	ands	r3, r2
    b98c:	d100      	bne.n	b990 <_usb_device_interrupt_handler+0x10c>
    b98e:	e292      	b.n	beb6 <_usb_device_interrupt_handler+0x632>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    b990:	4b7e      	ldr	r3, [pc, #504]	; (bb8c <_usb_device_interrupt_handler+0x308>)
    b992:	447b      	add	r3, pc
    b994:	681b      	ldr	r3, [r3, #0]
    b996:	681a      	ldr	r2, [r3, #0]
    b998:	230b      	movs	r3, #11
    b99a:	18fb      	adds	r3, r7, r3
    b99c:	781b      	ldrb	r3, [r3, #0]
    b99e:	3308      	adds	r3, #8
    b9a0:	015b      	lsls	r3, r3, #5
    b9a2:	18d3      	adds	r3, r2, r3
    b9a4:	3307      	adds	r3, #7
    b9a6:	781b      	ldrb	r3, [r3, #0]
    b9a8:	b2da      	uxtb	r2, r3
    b9aa:	1dbb      	adds	r3, r7, #6
    b9ac:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    b9ae:	4b78      	ldr	r3, [pc, #480]	; (bb90 <_usb_device_interrupt_handler+0x30c>)
    b9b0:	447b      	add	r3, pc
    b9b2:	6819      	ldr	r1, [r3, #0]
    b9b4:	230b      	movs	r3, #11
    b9b6:	18fb      	adds	r3, r7, r3
    b9b8:	781a      	ldrb	r2, [r3, #0]
    b9ba:	23b0      	movs	r3, #176	; 0xb0
    b9bc:	005b      	lsls	r3, r3, #1
    b9be:	188a      	adds	r2, r1, r2
    b9c0:	18d3      	adds	r3, r2, r3
    b9c2:	781b      	ldrb	r3, [r3, #0]
    b9c4:	b29b      	uxth	r3, r3
				flags_run = flags &
    b9c6:	1dba      	adds	r2, r7, #6
    b9c8:	8812      	ldrh	r2, [r2, #0]
    b9ca:	4013      	ands	r3, r2
    b9cc:	b29b      	uxth	r3, r3
    b9ce:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_registered_callback_mask[i];
    b9d0:	4b70      	ldr	r3, [pc, #448]	; (bb94 <_usb_device_interrupt_handler+0x310>)
    b9d2:	447b      	add	r3, pc
    b9d4:	6818      	ldr	r0, [r3, #0]
    b9d6:	230b      	movs	r3, #11
    b9d8:	18fb      	adds	r3, r7, r3
    b9da:	7819      	ldrb	r1, [r3, #0]
    b9dc:	23ac      	movs	r3, #172	; 0xac
    b9de:	005b      	lsls	r3, r3, #1
    b9e0:	1841      	adds	r1, r0, r1
    b9e2:	18cb      	adds	r3, r1, r3
    b9e4:	781b      	ldrb	r3, [r3, #0]
    b9e6:	b21b      	sxth	r3, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    b9e8:	4013      	ands	r3, r2
    b9ea:	b21a      	sxth	r2, r3
				flags_run = flags &
    b9ec:	1d3b      	adds	r3, r7, #4
    b9ee:	801a      	strh	r2, [r3, #0]

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    b9f0:	1dbb      	adds	r3, r7, #6
    b9f2:	881b      	ldrh	r3, [r3, #0]
    b9f4:	2260      	movs	r2, #96	; 0x60
    b9f6:	4013      	ands	r3, r2
    b9f8:	d065      	beq.n	bac6 <_usb_device_interrupt_handler+0x242>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    b9fa:	4b67      	ldr	r3, [pc, #412]	; (bb98 <_usb_device_interrupt_handler+0x314>)
    b9fc:	447b      	add	r3, pc
    b9fe:	681b      	ldr	r3, [r3, #0]
    ba00:	681a      	ldr	r2, [r3, #0]
    ba02:	230b      	movs	r3, #11
    ba04:	18fb      	adds	r3, r7, r3
    ba06:	781b      	ldrb	r3, [r3, #0]
    ba08:	3308      	adds	r3, #8
    ba0a:	015b      	lsls	r3, r3, #5
    ba0c:	18d3      	adds	r3, r2, r3
    ba0e:	3307      	adds	r3, #7
    ba10:	781b      	ldrb	r3, [r3, #0]
    ba12:	b2db      	uxtb	r3, r3
    ba14:	001a      	movs	r2, r3
    ba16:	2340      	movs	r3, #64	; 0x40
    ba18:	4013      	ands	r3, r2
    ba1a:	d017      	beq.n	ba4c <_usb_device_interrupt_handler+0x1c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    ba1c:	4b5f      	ldr	r3, [pc, #380]	; (bb9c <_usb_device_interrupt_handler+0x318>)
    ba1e:	447b      	add	r3, pc
    ba20:	681b      	ldr	r3, [r3, #0]
    ba22:	681a      	ldr	r2, [r3, #0]
    ba24:	230b      	movs	r3, #11
    ba26:	18fb      	adds	r3, r7, r3
    ba28:	781b      	ldrb	r3, [r3, #0]
    ba2a:	3308      	adds	r3, #8
    ba2c:	015b      	lsls	r3, r3, #5
    ba2e:	18d3      	adds	r3, r2, r3
    ba30:	3307      	adds	r3, #7
    ba32:	2240      	movs	r2, #64	; 0x40
    ba34:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    ba36:	230b      	movs	r3, #11
    ba38:	18fb      	adds	r3, r7, r3
    ba3a:	781b      	ldrb	r3, [r3, #0]
    ba3c:	2280      	movs	r2, #128	; 0x80
    ba3e:	4252      	negs	r2, r2
    ba40:	4313      	orrs	r3, r2
    ba42:	b2da      	uxtb	r2, r3
    ba44:	4b56      	ldr	r3, [pc, #344]	; (bba0 <_usb_device_interrupt_handler+0x31c>)
    ba46:	447b      	add	r3, pc
    ba48:	719a      	strb	r2, [r3, #6]
    ba4a:	e023      	b.n	ba94 <_usb_device_interrupt_handler+0x210>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    ba4c:	4b55      	ldr	r3, [pc, #340]	; (bba4 <_usb_device_interrupt_handler+0x320>)
    ba4e:	447b      	add	r3, pc
    ba50:	681b      	ldr	r3, [r3, #0]
    ba52:	681a      	ldr	r2, [r3, #0]
    ba54:	230b      	movs	r3, #11
    ba56:	18fb      	adds	r3, r7, r3
    ba58:	781b      	ldrb	r3, [r3, #0]
    ba5a:	3308      	adds	r3, #8
    ba5c:	015b      	lsls	r3, r3, #5
    ba5e:	18d3      	adds	r3, r2, r3
    ba60:	3307      	adds	r3, #7
    ba62:	781b      	ldrb	r3, [r3, #0]
    ba64:	b2db      	uxtb	r3, r3
    ba66:	001a      	movs	r2, r3
    ba68:	2320      	movs	r3, #32
    ba6a:	4013      	ands	r3, r2
    ba6c:	d012      	beq.n	ba94 <_usb_device_interrupt_handler+0x210>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    ba6e:	4b4e      	ldr	r3, [pc, #312]	; (bba8 <_usb_device_interrupt_handler+0x324>)
    ba70:	447b      	add	r3, pc
    ba72:	681b      	ldr	r3, [r3, #0]
    ba74:	681a      	ldr	r2, [r3, #0]
    ba76:	230b      	movs	r3, #11
    ba78:	18fb      	adds	r3, r7, r3
    ba7a:	781b      	ldrb	r3, [r3, #0]
    ba7c:	3308      	adds	r3, #8
    ba7e:	015b      	lsls	r3, r3, #5
    ba80:	18d3      	adds	r3, r2, r3
    ba82:	3307      	adds	r3, #7
    ba84:	2220      	movs	r2, #32
    ba86:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    ba88:	4b48      	ldr	r3, [pc, #288]	; (bbac <_usb_device_interrupt_handler+0x328>)
    ba8a:	447b      	add	r3, pc
    ba8c:	220b      	movs	r2, #11
    ba8e:	18ba      	adds	r2, r7, r2
    ba90:	7812      	ldrb	r2, [r2, #0]
    ba92:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    ba94:	1d3b      	adds	r3, r7, #4
    ba96:	881b      	ldrh	r3, [r3, #0]
    ba98:	2260      	movs	r2, #96	; 0x60
    ba9a:	4013      	ands	r3, r2
    ba9c:	d100      	bne.n	baa0 <_usb_device_interrupt_handler+0x21c>
    ba9e:	e218      	b.n	bed2 <_usb_device_interrupt_handler+0x64e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    baa0:	4b43      	ldr	r3, [pc, #268]	; (bbb0 <_usb_device_interrupt_handler+0x32c>)
    baa2:	447b      	add	r3, pc
    baa4:	681a      	ldr	r2, [r3, #0]
    baa6:	230b      	movs	r3, #11
    baa8:	18fb      	adds	r3, r7, r3
    baaa:	781b      	ldrb	r3, [r3, #0]
    baac:	21e0      	movs	r1, #224	; 0xe0
    baae:	011b      	lsls	r3, r3, #4
    bab0:	18d3      	adds	r3, r2, r3
    bab2:	185b      	adds	r3, r3, r1
    bab4:	681a      	ldr	r2, [r3, #0]
    bab6:	4b3f      	ldr	r3, [pc, #252]	; (bbb4 <_usb_device_interrupt_handler+0x330>)
    bab8:	447b      	add	r3, pc
    baba:	681b      	ldr	r3, [r3, #0]
    babc:	493e      	ldr	r1, [pc, #248]	; (bbb8 <_usb_device_interrupt_handler+0x334>)
    babe:	4479      	add	r1, pc
    bac0:	0018      	movs	r0, r3
    bac2:	4790      	blx	r2
					}
					return;
    bac4:	e205      	b.n	bed2 <_usb_device_interrupt_handler+0x64e>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    bac6:	1dbb      	adds	r3, r7, #6
    bac8:	881b      	ldrh	r3, [r3, #0]
    baca:	2210      	movs	r2, #16
    bacc:	4013      	ands	r3, r2
    bace:	d100      	bne.n	bad2 <_usb_device_interrupt_handler+0x24e>
    bad0:	e080      	b.n	bbd4 <_usb_device_interrupt_handler+0x350>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    bad2:	4b3a      	ldr	r3, [pc, #232]	; (bbbc <_usb_device_interrupt_handler+0x338>)
    bad4:	447b      	add	r3, pc
    bad6:	681b      	ldr	r3, [r3, #0]
    bad8:	681a      	ldr	r2, [r3, #0]
    bada:	230b      	movs	r3, #11
    badc:	18fb      	adds	r3, r7, r3
    bade:	781b      	ldrb	r3, [r3, #0]
    bae0:	3308      	adds	r3, #8
    bae2:	015b      	lsls	r3, r3, #5
    bae4:	18d3      	adds	r3, r2, r3
    bae6:	3307      	adds	r3, #7
    bae8:	2210      	movs	r2, #16
    baea:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    baec:	4b34      	ldr	r3, [pc, #208]	; (bbc0 <_usb_device_interrupt_handler+0x33c>)
    baee:	447b      	add	r3, pc
    baf0:	6819      	ldr	r1, [r3, #0]
    baf2:	230b      	movs	r3, #11
    baf4:	18fb      	adds	r3, r7, r3
    baf6:	781a      	ldrb	r2, [r3, #0]
    baf8:	23b0      	movs	r3, #176	; 0xb0
    bafa:	005b      	lsls	r3, r3, #1
    bafc:	188a      	adds	r2, r1, r2
    bafe:	18d3      	adds	r3, r2, r3
    bb00:	781b      	ldrb	r3, [r3, #0]
    bb02:	2210      	movs	r2, #16
    bb04:	4013      	ands	r3, r2
    bb06:	b2db      	uxtb	r3, r3
    bb08:	2b00      	cmp	r3, #0
    bb0a:	d100      	bne.n	bb0e <_usb_device_interrupt_handler+0x28a>
    bb0c:	e1e3      	b.n	bed6 <_usb_device_interrupt_handler+0x652>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    bb0e:	230b      	movs	r3, #11
    bb10:	18fb      	adds	r3, r7, r3
    bb12:	781b      	ldrb	r3, [r3, #0]
    bb14:	4a18      	ldr	r2, [pc, #96]	; (bb78 <_usb_device_interrupt_handler+0x2f4>)
    bb16:	58a2      	ldr	r2, [r4, r2]
    bb18:	015b      	lsls	r3, r3, #5
    bb1a:	18d3      	adds	r3, r2, r3
    bb1c:	685b      	ldr	r3, [r3, #4]
    bb1e:	049b      	lsls	r3, r3, #18
    bb20:	0c9b      	lsrs	r3, r3, #18
    bb22:	b29b      	uxth	r3, r3
    bb24:	001a      	movs	r2, r3
    bb26:	4b27      	ldr	r3, [pc, #156]	; (bbc4 <_usb_device_interrupt_handler+0x340>)
    bb28:	447b      	add	r3, pc
    bb2a:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    bb2c:	4b26      	ldr	r3, [pc, #152]	; (bbc8 <_usb_device_interrupt_handler+0x344>)
    bb2e:	447b      	add	r3, pc
    bb30:	681a      	ldr	r2, [r3, #0]
    bb32:	230b      	movs	r3, #11
    bb34:	18fb      	adds	r3, r7, r3
    bb36:	781b      	ldrb	r3, [r3, #0]
    bb38:	21dc      	movs	r1, #220	; 0xdc
    bb3a:	011b      	lsls	r3, r3, #4
    bb3c:	18d3      	adds	r3, r2, r3
    bb3e:	185b      	adds	r3, r3, r1
    bb40:	681a      	ldr	r2, [r3, #0]
    bb42:	4b22      	ldr	r3, [pc, #136]	; (bbcc <_usb_device_interrupt_handler+0x348>)
    bb44:	447b      	add	r3, pc
    bb46:	681b      	ldr	r3, [r3, #0]
    bb48:	4921      	ldr	r1, [pc, #132]	; (bbd0 <_usb_device_interrupt_handler+0x34c>)
    bb4a:	4479      	add	r1, pc
    bb4c:	0018      	movs	r0, r3
    bb4e:	4790      	blx	r2
					}
					return;
    bb50:	e1c1      	b.n	bed6 <_usb_device_interrupt_handler+0x652>
    bb52:	46c0      	nop			; (mov r8, r8)
    bb54:	00006544 	.word	0x00006544
    bb58:	1fff4d88 	.word	0x1fff4d88
    bb5c:	1fff4d6c 	.word	0x1fff4d6c
    bb60:	1fff4d5e 	.word	0x1fff4d5e
    bb64:	1fff4d4a 	.word	0x1fff4d4a
    bb68:	0000640e 	.word	0x0000640e
    bb6c:	1fff4d1c 	.word	0x1fff4d1c
    bb70:	000063f0 	.word	0x000063f0
    bb74:	000063e4 	.word	0x000063e4
    bb78:	00000020 	.word	0x00000020
    bb7c:	1fff4ce4 	.word	0x1fff4ce4
    bb80:	1fff4cd2 	.word	0x1fff4cd2
    bb84:	1fff4cc4 	.word	0x1fff4cc4
    bb88:	1fff4cca 	.word	0x1fff4cca
    bb8c:	1fff4c86 	.word	0x1fff4c86
    bb90:	1fff4c68 	.word	0x1fff4c68
    bb94:	1fff4c46 	.word	0x1fff4c46
    bb98:	1fff4c1c 	.word	0x1fff4c1c
    bb9c:	1fff4bfa 	.word	0x1fff4bfa
    bba0:	1fff4be2 	.word	0x1fff4be2
    bba4:	1fff4bca 	.word	0x1fff4bca
    bba8:	1fff4ba8 	.word	0x1fff4ba8
    bbac:	1fff4b9e 	.word	0x1fff4b9e
    bbb0:	1fff4b76 	.word	0x1fff4b76
    bbb4:	1fff4b60 	.word	0x1fff4b60
    bbb8:	1fff4b6a 	.word	0x1fff4b6a
    bbbc:	1fff4b44 	.word	0x1fff4b44
    bbc0:	1fff4b2a 	.word	0x1fff4b2a
    bbc4:	1fff4b00 	.word	0x1fff4b00
    bbc8:	1fff4aea 	.word	0x1fff4aea
    bbcc:	1fff4ad4 	.word	0x1fff4ad4
    bbd0:	1fff4ade 	.word	0x1fff4ade
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    bbd4:	1dbb      	adds	r3, r7, #6
    bbd6:	881b      	ldrh	r3, [r3, #0]
    bbd8:	2203      	movs	r2, #3
    bbda:	4013      	ands	r3, r2
    bbdc:	d100      	bne.n	bbe0 <_usb_device_interrupt_handler+0x35c>
    bbde:	e093      	b.n	bd08 <_usb_device_interrupt_handler+0x484>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    bbe0:	4bc2      	ldr	r3, [pc, #776]	; (beec <_usb_device_interrupt_handler+0x668>)
    bbe2:	447b      	add	r3, pc
    bbe4:	681b      	ldr	r3, [r3, #0]
    bbe6:	681a      	ldr	r2, [r3, #0]
    bbe8:	230b      	movs	r3, #11
    bbea:	18fb      	adds	r3, r7, r3
    bbec:	781b      	ldrb	r3, [r3, #0]
    bbee:	3308      	adds	r3, #8
    bbf0:	015b      	lsls	r3, r3, #5
    bbf2:	18d3      	adds	r3, r2, r3
    bbf4:	3307      	adds	r3, #7
    bbf6:	781b      	ldrb	r3, [r3, #0]
    bbf8:	b2db      	uxtb	r3, r3
    bbfa:	001a      	movs	r2, r3
    bbfc:	2302      	movs	r3, #2
    bbfe:	4013      	ands	r3, r2
    bc00:	d027      	beq.n	bc52 <_usb_device_interrupt_handler+0x3ce>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    bc02:	4bbb      	ldr	r3, [pc, #748]	; (bef0 <_usb_device_interrupt_handler+0x66c>)
    bc04:	447b      	add	r3, pc
    bc06:	681b      	ldr	r3, [r3, #0]
    bc08:	681a      	ldr	r2, [r3, #0]
    bc0a:	230b      	movs	r3, #11
    bc0c:	18fb      	adds	r3, r7, r3
    bc0e:	781b      	ldrb	r3, [r3, #0]
    bc10:	3308      	adds	r3, #8
    bc12:	015b      	lsls	r3, r3, #5
    bc14:	18d3      	adds	r3, r2, r3
    bc16:	3307      	adds	r3, #7
    bc18:	2202      	movs	r2, #2
    bc1a:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    bc1c:	230b      	movs	r3, #11
    bc1e:	18fb      	adds	r3, r7, r3
    bc20:	781b      	ldrb	r3, [r3, #0]
    bc22:	2280      	movs	r2, #128	; 0x80
    bc24:	4252      	negs	r2, r2
    bc26:	4313      	orrs	r3, r2
    bc28:	b2da      	uxtb	r2, r3
    bc2a:	4bb2      	ldr	r3, [pc, #712]	; (bef4 <_usb_device_interrupt_handler+0x670>)
    bc2c:	447b      	add	r3, pc
    bc2e:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    bc30:	230b      	movs	r3, #11
    bc32:	18fb      	adds	r3, r7, r3
    bc34:	781b      	ldrb	r3, [r3, #0]
    bc36:	4ab0      	ldr	r2, [pc, #704]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    bc38:	58a2      	ldr	r2, [r4, r2]
    bc3a:	015b      	lsls	r3, r3, #5
    bc3c:	18d3      	adds	r3, r2, r3
    bc3e:	3310      	adds	r3, #16
    bc40:	685b      	ldr	r3, [r3, #4]
    bc42:	049b      	lsls	r3, r3, #18
    bc44:	0c9b      	lsrs	r3, r3, #18
    bc46:	b29b      	uxth	r3, r3
    bc48:	001a      	movs	r2, r3
    bc4a:	4bac      	ldr	r3, [pc, #688]	; (befc <_usb_device_interrupt_handler+0x678>)
    bc4c:	447b      	add	r3, pc
    bc4e:	805a      	strh	r2, [r3, #2]
    bc50:	e041      	b.n	bcd6 <_usb_device_interrupt_handler+0x452>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    bc52:	4bab      	ldr	r3, [pc, #684]	; (bf00 <_usb_device_interrupt_handler+0x67c>)
    bc54:	447b      	add	r3, pc
    bc56:	681b      	ldr	r3, [r3, #0]
    bc58:	681a      	ldr	r2, [r3, #0]
    bc5a:	230b      	movs	r3, #11
    bc5c:	18fb      	adds	r3, r7, r3
    bc5e:	781b      	ldrb	r3, [r3, #0]
    bc60:	3308      	adds	r3, #8
    bc62:	015b      	lsls	r3, r3, #5
    bc64:	18d3      	adds	r3, r2, r3
    bc66:	3307      	adds	r3, #7
    bc68:	781b      	ldrb	r3, [r3, #0]
    bc6a:	b2db      	uxtb	r3, r3
    bc6c:	001a      	movs	r2, r3
    bc6e:	2301      	movs	r3, #1
    bc70:	4013      	ands	r3, r2
    bc72:	d030      	beq.n	bcd6 <_usb_device_interrupt_handler+0x452>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    bc74:	4ba3      	ldr	r3, [pc, #652]	; (bf04 <_usb_device_interrupt_handler+0x680>)
    bc76:	447b      	add	r3, pc
    bc78:	681b      	ldr	r3, [r3, #0]
    bc7a:	681a      	ldr	r2, [r3, #0]
    bc7c:	230b      	movs	r3, #11
    bc7e:	18fb      	adds	r3, r7, r3
    bc80:	781b      	ldrb	r3, [r3, #0]
    bc82:	3308      	adds	r3, #8
    bc84:	015b      	lsls	r3, r3, #5
    bc86:	18d3      	adds	r3, r2, r3
    bc88:	3307      	adds	r3, #7
    bc8a:	2201      	movs	r2, #1
    bc8c:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    bc8e:	4b9e      	ldr	r3, [pc, #632]	; (bf08 <_usb_device_interrupt_handler+0x684>)
    bc90:	447b      	add	r3, pc
    bc92:	220b      	movs	r2, #11
    bc94:	18ba      	adds	r2, r7, r2
    bc96:	7812      	ldrb	r2, [r2, #0]
    bc98:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    bc9a:	230b      	movs	r3, #11
    bc9c:	18fb      	adds	r3, r7, r3
    bc9e:	781b      	ldrb	r3, [r3, #0]
    bca0:	4a95      	ldr	r2, [pc, #596]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    bca2:	58a2      	ldr	r2, [r4, r2]
    bca4:	015b      	lsls	r3, r3, #5
    bca6:	18d3      	adds	r3, r2, r3
    bca8:	685b      	ldr	r3, [r3, #4]
    bcaa:	049b      	lsls	r3, r3, #18
    bcac:	0c9b      	lsrs	r3, r3, #18
    bcae:	b29b      	uxth	r3, r3
    bcb0:	001a      	movs	r2, r3
    bcb2:	4b96      	ldr	r3, [pc, #600]	; (bf0c <_usb_device_interrupt_handler+0x688>)
    bcb4:	447b      	add	r3, pc
    bcb6:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    bcb8:	230b      	movs	r3, #11
    bcba:	18fb      	adds	r3, r7, r3
    bcbc:	781b      	ldrb	r3, [r3, #0]
    bcbe:	4a8e      	ldr	r2, [pc, #568]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    bcc0:	58a2      	ldr	r2, [r4, r2]
    bcc2:	015b      	lsls	r3, r3, #5
    bcc4:	18d3      	adds	r3, r2, r3
    bcc6:	685b      	ldr	r3, [r3, #4]
    bcc8:	011b      	lsls	r3, r3, #4
    bcca:	0c9b      	lsrs	r3, r3, #18
    bccc:	b29b      	uxth	r3, r3
    bcce:	001a      	movs	r2, r3
    bcd0:	4b8f      	ldr	r3, [pc, #572]	; (bf10 <_usb_device_interrupt_handler+0x68c>)
    bcd2:	447b      	add	r3, pc
    bcd4:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    bcd6:	1d3b      	adds	r3, r7, #4
    bcd8:	881b      	ldrh	r3, [r3, #0]
    bcda:	2203      	movs	r2, #3
    bcdc:	4013      	ands	r3, r2
    bcde:	d100      	bne.n	bce2 <_usb_device_interrupt_handler+0x45e>
    bce0:	e0fb      	b.n	beda <_usb_device_interrupt_handler+0x656>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    bce2:	4b8c      	ldr	r3, [pc, #560]	; (bf14 <_usb_device_interrupt_handler+0x690>)
    bce4:	447b      	add	r3, pc
    bce6:	681a      	ldr	r2, [r3, #0]
    bce8:	230b      	movs	r3, #11
    bcea:	18fb      	adds	r3, r7, r3
    bcec:	781b      	ldrb	r3, [r3, #0]
    bcee:	330d      	adds	r3, #13
    bcf0:	011b      	lsls	r3, r3, #4
    bcf2:	18d3      	adds	r3, r2, r3
    bcf4:	3304      	adds	r3, #4
    bcf6:	681a      	ldr	r2, [r3, #0]
    bcf8:	4b87      	ldr	r3, [pc, #540]	; (bf18 <_usb_device_interrupt_handler+0x694>)
    bcfa:	447b      	add	r3, pc
    bcfc:	681b      	ldr	r3, [r3, #0]
    bcfe:	4987      	ldr	r1, [pc, #540]	; (bf1c <_usb_device_interrupt_handler+0x698>)
    bd00:	4479      	add	r1, pc
    bd02:	0018      	movs	r0, r3
    bd04:	4790      	blx	r2
					}
					return;
    bd06:	e0e8      	b.n	beda <_usb_device_interrupt_handler+0x656>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    bd08:	1dbb      	adds	r3, r7, #6
    bd0a:	881b      	ldrh	r3, [r3, #0]
    bd0c:	220c      	movs	r2, #12
    bd0e:	4013      	ands	r3, r2
    bd10:	d100      	bne.n	bd14 <_usb_device_interrupt_handler+0x490>
    bd12:	e0d0      	b.n	beb6 <_usb_device_interrupt_handler+0x632>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    bd14:	4b82      	ldr	r3, [pc, #520]	; (bf20 <_usb_device_interrupt_handler+0x69c>)
    bd16:	447b      	add	r3, pc
    bd18:	681b      	ldr	r3, [r3, #0]
    bd1a:	681a      	ldr	r2, [r3, #0]
    bd1c:	230b      	movs	r3, #11
    bd1e:	18fb      	adds	r3, r7, r3
    bd20:	781b      	ldrb	r3, [r3, #0]
    bd22:	3308      	adds	r3, #8
    bd24:	015b      	lsls	r3, r3, #5
    bd26:	18d3      	adds	r3, r2, r3
    bd28:	3307      	adds	r3, #7
    bd2a:	781b      	ldrb	r3, [r3, #0]
    bd2c:	b2db      	uxtb	r3, r3
    bd2e:	001a      	movs	r2, r3
    bd30:	2308      	movs	r3, #8
    bd32:	4013      	ands	r3, r2
    bd34:	d04d      	beq.n	bdd2 <_usb_device_interrupt_handler+0x54e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    bd36:	4b7b      	ldr	r3, [pc, #492]	; (bf24 <_usb_device_interrupt_handler+0x6a0>)
    bd38:	447b      	add	r3, pc
    bd3a:	681b      	ldr	r3, [r3, #0]
    bd3c:	681a      	ldr	r2, [r3, #0]
    bd3e:	230b      	movs	r3, #11
    bd40:	18fb      	adds	r3, r7, r3
    bd42:	781b      	ldrb	r3, [r3, #0]
    bd44:	3308      	adds	r3, #8
    bd46:	015b      	lsls	r3, r3, #5
    bd48:	18d3      	adds	r3, r2, r3
    bd4a:	3307      	adds	r3, #7
    bd4c:	2208      	movs	r2, #8
    bd4e:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    bd50:	230b      	movs	r3, #11
    bd52:	18fb      	adds	r3, r7, r3
    bd54:	781b      	ldrb	r3, [r3, #0]
    bd56:	4a68      	ldr	r2, [pc, #416]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    bd58:	58a2      	ldr	r2, [r4, r2]
    bd5a:	015b      	lsls	r3, r3, #5
    bd5c:	18d3      	adds	r3, r2, r3
    bd5e:	331a      	adds	r3, #26
    bd60:	781b      	ldrb	r3, [r3, #0]
    bd62:	b2db      	uxtb	r3, r3
    bd64:	001a      	movs	r2, r3
    bd66:	2302      	movs	r3, #2
    bd68:	4013      	ands	r3, r2
    bd6a:	d016      	beq.n	bd9a <_usb_device_interrupt_handler+0x516>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    bd6c:	230b      	movs	r3, #11
    bd6e:	18fb      	adds	r3, r7, r3
    bd70:	781b      	ldrb	r3, [r3, #0]
    bd72:	220b      	movs	r2, #11
    bd74:	18ba      	adds	r2, r7, r2
    bd76:	7812      	ldrb	r2, [r2, #0]
    bd78:	495f      	ldr	r1, [pc, #380]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    bd7a:	5861      	ldr	r1, [r4, r1]
    bd7c:	0152      	lsls	r2, r2, #5
    bd7e:	188a      	adds	r2, r1, r2
    bd80:	321a      	adds	r2, #26
    bd82:	7812      	ldrb	r2, [r2, #0]
    bd84:	b2d2      	uxtb	r2, r2
    bd86:	2102      	movs	r1, #2
    bd88:	438a      	bics	r2, r1
    bd8a:	b2d1      	uxtb	r1, r2
    bd8c:	4a5a      	ldr	r2, [pc, #360]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    bd8e:	58a2      	ldr	r2, [r4, r2]
    bd90:	015b      	lsls	r3, r3, #5
    bd92:	18d3      	adds	r3, r2, r3
    bd94:	331a      	adds	r3, #26
    bd96:	1c0a      	adds	r2, r1, #0
    bd98:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    bd9a:	230b      	movs	r3, #11
    bd9c:	18fb      	adds	r3, r7, r3
    bd9e:	781b      	ldrb	r3, [r3, #0]
    bda0:	2280      	movs	r2, #128	; 0x80
    bda2:	4252      	negs	r2, r2
    bda4:	4313      	orrs	r3, r2
    bda6:	b2da      	uxtb	r2, r3
    bda8:	4b5f      	ldr	r3, [pc, #380]	; (bf28 <_usb_device_interrupt_handler+0x6a4>)
    bdaa:	447b      	add	r3, pc
    bdac:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    bdae:	4b5f      	ldr	r3, [pc, #380]	; (bf2c <_usb_device_interrupt_handler+0x6a8>)
    bdb0:	447b      	add	r3, pc
    bdb2:	681b      	ldr	r3, [r3, #0]
    bdb4:	681a      	ldr	r2, [r3, #0]
    bdb6:	230b      	movs	r3, #11
    bdb8:	18fb      	adds	r3, r7, r3
    bdba:	781b      	ldrb	r3, [r3, #0]
    bdbc:	3308      	adds	r3, #8
    bdbe:	015b      	lsls	r3, r3, #5
    bdc0:	18d3      	adds	r3, r2, r3
    bdc2:	3307      	adds	r3, #7
    bdc4:	781b      	ldrb	r3, [r3, #0]
    bdc6:	b2db      	uxtb	r3, r3
    bdc8:	001a      	movs	r2, r3
    bdca:	2302      	movs	r3, #2
    bdcc:	4013      	ands	r3, r2
    bdce:	d05a      	beq.n	be86 <_usb_device_interrupt_handler+0x602>
							return;
    bdd0:	e088      	b.n	bee4 <_usb_device_interrupt_handler+0x660>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    bdd2:	4b57      	ldr	r3, [pc, #348]	; (bf30 <_usb_device_interrupt_handler+0x6ac>)
    bdd4:	447b      	add	r3, pc
    bdd6:	681b      	ldr	r3, [r3, #0]
    bdd8:	681a      	ldr	r2, [r3, #0]
    bdda:	230b      	movs	r3, #11
    bddc:	18fb      	adds	r3, r7, r3
    bdde:	781b      	ldrb	r3, [r3, #0]
    bde0:	3308      	adds	r3, #8
    bde2:	015b      	lsls	r3, r3, #5
    bde4:	18d3      	adds	r3, r2, r3
    bde6:	3307      	adds	r3, #7
    bde8:	781b      	ldrb	r3, [r3, #0]
    bdea:	b2db      	uxtb	r3, r3
    bdec:	001a      	movs	r2, r3
    bdee:	2304      	movs	r3, #4
    bdf0:	4013      	ands	r3, r2
    bdf2:	d048      	beq.n	be86 <_usb_device_interrupt_handler+0x602>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    bdf4:	4b4f      	ldr	r3, [pc, #316]	; (bf34 <_usb_device_interrupt_handler+0x6b0>)
    bdf6:	447b      	add	r3, pc
    bdf8:	681b      	ldr	r3, [r3, #0]
    bdfa:	681a      	ldr	r2, [r3, #0]
    bdfc:	230b      	movs	r3, #11
    bdfe:	18fb      	adds	r3, r7, r3
    be00:	781b      	ldrb	r3, [r3, #0]
    be02:	3308      	adds	r3, #8
    be04:	015b      	lsls	r3, r3, #5
    be06:	18d3      	adds	r3, r2, r3
    be08:	3307      	adds	r3, #7
    be0a:	2204      	movs	r2, #4
    be0c:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    be0e:	230b      	movs	r3, #11
    be10:	18fb      	adds	r3, r7, r3
    be12:	781b      	ldrb	r3, [r3, #0]
    be14:	4a38      	ldr	r2, [pc, #224]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    be16:	58a2      	ldr	r2, [r4, r2]
    be18:	015b      	lsls	r3, r3, #5
    be1a:	18d3      	adds	r3, r2, r3
    be1c:	330a      	adds	r3, #10
    be1e:	781b      	ldrb	r3, [r3, #0]
    be20:	b2db      	uxtb	r3, r3
    be22:	001a      	movs	r2, r3
    be24:	2302      	movs	r3, #2
    be26:	4013      	ands	r3, r2
    be28:	d016      	beq.n	be58 <_usb_device_interrupt_handler+0x5d4>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    be2a:	230b      	movs	r3, #11
    be2c:	18fb      	adds	r3, r7, r3
    be2e:	781b      	ldrb	r3, [r3, #0]
    be30:	220b      	movs	r2, #11
    be32:	18ba      	adds	r2, r7, r2
    be34:	7812      	ldrb	r2, [r2, #0]
    be36:	4930      	ldr	r1, [pc, #192]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    be38:	5861      	ldr	r1, [r4, r1]
    be3a:	0152      	lsls	r2, r2, #5
    be3c:	188a      	adds	r2, r1, r2
    be3e:	320a      	adds	r2, #10
    be40:	7812      	ldrb	r2, [r2, #0]
    be42:	b2d2      	uxtb	r2, r2
    be44:	2102      	movs	r1, #2
    be46:	438a      	bics	r2, r1
    be48:	b2d1      	uxtb	r1, r2
    be4a:	4a2b      	ldr	r2, [pc, #172]	; (bef8 <_usb_device_interrupt_handler+0x674>)
    be4c:	58a2      	ldr	r2, [r4, r2]
    be4e:	015b      	lsls	r3, r3, #5
    be50:	18d3      	adds	r3, r2, r3
    be52:	330a      	adds	r3, #10
    be54:	1c0a      	adds	r2, r1, #0
    be56:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    be58:	4b37      	ldr	r3, [pc, #220]	; (bf38 <_usb_device_interrupt_handler+0x6b4>)
    be5a:	447b      	add	r3, pc
    be5c:	220b      	movs	r2, #11
    be5e:	18ba      	adds	r2, r7, r2
    be60:	7812      	ldrb	r2, [r2, #0]
    be62:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    be64:	4b35      	ldr	r3, [pc, #212]	; (bf3c <_usb_device_interrupt_handler+0x6b8>)
    be66:	447b      	add	r3, pc
    be68:	681b      	ldr	r3, [r3, #0]
    be6a:	681a      	ldr	r2, [r3, #0]
    be6c:	230b      	movs	r3, #11
    be6e:	18fb      	adds	r3, r7, r3
    be70:	781b      	ldrb	r3, [r3, #0]
    be72:	3308      	adds	r3, #8
    be74:	015b      	lsls	r3, r3, #5
    be76:	18d3      	adds	r3, r2, r3
    be78:	3307      	adds	r3, #7
    be7a:	781b      	ldrb	r3, [r3, #0]
    be7c:	b2db      	uxtb	r3, r3
    be7e:	001a      	movs	r2, r3
    be80:	2301      	movs	r3, #1
    be82:	4013      	ands	r3, r2
    be84:	d12b      	bne.n	bede <_usb_device_interrupt_handler+0x65a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    be86:	1d3b      	adds	r3, r7, #4
    be88:	881b      	ldrh	r3, [r3, #0]
    be8a:	220c      	movs	r2, #12
    be8c:	4013      	ands	r3, r2
    be8e:	d028      	beq.n	bee2 <_usb_device_interrupt_handler+0x65e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    be90:	4b2b      	ldr	r3, [pc, #172]	; (bf40 <_usb_device_interrupt_handler+0x6bc>)
    be92:	447b      	add	r3, pc
    be94:	681a      	ldr	r2, [r3, #0]
    be96:	230b      	movs	r3, #11
    be98:	18fb      	adds	r3, r7, r3
    be9a:	781b      	ldrb	r3, [r3, #0]
    be9c:	21d8      	movs	r1, #216	; 0xd8
    be9e:	011b      	lsls	r3, r3, #4
    bea0:	18d3      	adds	r3, r2, r3
    bea2:	185b      	adds	r3, r3, r1
    bea4:	681a      	ldr	r2, [r3, #0]
    bea6:	4b27      	ldr	r3, [pc, #156]	; (bf44 <_usb_device_interrupt_handler+0x6c0>)
    bea8:	447b      	add	r3, pc
    beaa:	681b      	ldr	r3, [r3, #0]
    beac:	4926      	ldr	r1, [pc, #152]	; (bf48 <_usb_device_interrupt_handler+0x6c4>)
    beae:	4479      	add	r1, pc
    beb0:	0018      	movs	r0, r3
    beb2:	4790      	blx	r2
					}
					return;
    beb4:	e015      	b.n	bee2 <_usb_device_interrupt_handler+0x65e>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    beb6:	230b      	movs	r3, #11
    beb8:	18fb      	adds	r3, r7, r3
    beba:	781a      	ldrb	r2, [r3, #0]
    bebc:	230b      	movs	r3, #11
    bebe:	18fb      	adds	r3, r7, r3
    bec0:	3201      	adds	r2, #1
    bec2:	701a      	strb	r2, [r3, #0]
    bec4:	230b      	movs	r3, #11
    bec6:	18fb      	adds	r3, r7, r3
    bec8:	781b      	ldrb	r3, [r3, #0]
    beca:	2b07      	cmp	r3, #7
    becc:	d800      	bhi.n	bed0 <_usb_device_interrupt_handler+0x64c>
    bece:	e553      	b.n	b978 <_usb_device_interrupt_handler+0xf4>
    bed0:	e008      	b.n	bee4 <_usb_device_interrupt_handler+0x660>
					return;
    bed2:	46c0      	nop			; (mov r8, r8)
    bed4:	e006      	b.n	bee4 <_usb_device_interrupt_handler+0x660>
					return;
    bed6:	46c0      	nop			; (mov r8, r8)
    bed8:	e004      	b.n	bee4 <_usb_device_interrupt_handler+0x660>
					return;
    beda:	46c0      	nop			; (mov r8, r8)
    bedc:	e002      	b.n	bee4 <_usb_device_interrupt_handler+0x660>
							return;
    bede:	46c0      	nop			; (mov r8, r8)
    bee0:	e000      	b.n	bee4 <_usb_device_interrupt_handler+0x660>
					return;
    bee2:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    bee4:	46bd      	mov	sp, r7
    bee6:	b005      	add	sp, #20
    bee8:	bd90      	pop	{r4, r7, pc}
    beea:	46c0      	nop			; (mov r8, r8)
    beec:	1fff4a36 	.word	0x1fff4a36
    bef0:	1fff4a14 	.word	0x1fff4a14
    bef4:	1fff49fc 	.word	0x1fff49fc
    bef8:	00000020 	.word	0x00000020
    befc:	1fff49dc 	.word	0x1fff49dc
    bf00:	1fff49c4 	.word	0x1fff49c4
    bf04:	1fff49a2 	.word	0x1fff49a2
    bf08:	1fff4998 	.word	0x1fff4998
    bf0c:	1fff4974 	.word	0x1fff4974
    bf10:	1fff4956 	.word	0x1fff4956
    bf14:	1fff4934 	.word	0x1fff4934
    bf18:	1fff491e 	.word	0x1fff491e
    bf1c:	1fff4928 	.word	0x1fff4928
    bf20:	1fff4902 	.word	0x1fff4902
    bf24:	1fff48e0 	.word	0x1fff48e0
    bf28:	1fff487e 	.word	0x1fff487e
    bf2c:	1fff4868 	.word	0x1fff4868
    bf30:	1fff4844 	.word	0x1fff4844
    bf34:	1fff4822 	.word	0x1fff4822
    bf38:	1fff47ce 	.word	0x1fff47ce
    bf3c:	1fff47b2 	.word	0x1fff47b2
    bf40:	1fff4786 	.word	0x1fff4786
    bf44:	1fff4770 	.word	0x1fff4770
    bf48:	1fff477a 	.word	0x1fff477a

0000bf4c <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    bf4c:	b580      	push	{r7, lr}
    bf4e:	b082      	sub	sp, #8
    bf50:	af00      	add	r7, sp, #0
    bf52:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    bf54:	687b      	ldr	r3, [r7, #4]
    bf56:	681a      	ldr	r2, [r3, #0]
    bf58:	687b      	ldr	r3, [r7, #4]
    bf5a:	681b      	ldr	r3, [r3, #0]
    bf5c:	781b      	ldrb	r3, [r3, #0]
    bf5e:	b2db      	uxtb	r3, r3
    bf60:	2102      	movs	r1, #2
    bf62:	430b      	orrs	r3, r1
    bf64:	b2db      	uxtb	r3, r3
    bf66:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    bf68:	46c0      	nop			; (mov r8, r8)
    bf6a:	687b      	ldr	r3, [r7, #4]
    bf6c:	681b      	ldr	r3, [r3, #0]
    bf6e:	789b      	ldrb	r3, [r3, #2]
    bf70:	b2db      	uxtb	r3, r3
    bf72:	2b02      	cmp	r3, #2
    bf74:	d0f9      	beq.n	bf6a <usb_enable+0x1e>
}
    bf76:	46c0      	nop			; (mov r8, r8)
    bf78:	46bd      	mov	sp, r7
    bf7a:	b002      	add	sp, #8
    bf7c:	bd80      	pop	{r7, pc}
	...

0000bf80 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    bf80:	b580      	push	{r7, lr}
    bf82:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    bf84:	4b09      	ldr	r3, [pc, #36]	; (bfac <USB_Handler+0x2c>)
    bf86:	447b      	add	r3, pc
    bf88:	681b      	ldr	r3, [r3, #0]
    bf8a:	681b      	ldr	r3, [r3, #0]
    bf8c:	781b      	ldrb	r3, [r3, #0]
    bf8e:	061b      	lsls	r3, r3, #24
    bf90:	0fdb      	lsrs	r3, r3, #31
    bf92:	b2db      	uxtb	r3, r3
    bf94:	2b00      	cmp	r3, #0
    bf96:	d003      	beq.n	bfa0 <USB_Handler+0x20>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    bf98:	4b05      	ldr	r3, [pc, #20]	; (bfb0 <USB_Handler+0x30>)
    bf9a:	447b      	add	r3, pc
    bf9c:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    bf9e:	e002      	b.n	bfa6 <USB_Handler+0x26>
		_usb_device_interrupt_handler();
    bfa0:	4b04      	ldr	r3, [pc, #16]	; (bfb4 <USB_Handler+0x34>)
    bfa2:	447b      	add	r3, pc
    bfa4:	4798      	blx	r3
}
    bfa6:	46c0      	nop			; (mov r8, r8)
    bfa8:	46bd      	mov	sp, r7
    bfaa:	bd80      	pop	{r7, pc}
    bfac:	1fff4692 	.word	0x1fff4692
    bfb0:	ffffe32b 	.word	0xffffe32b
    bfb4:	fffff8df 	.word	0xfffff8df

0000bfb8 <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    bfb8:	b580      	push	{r7, lr}
    bfba:	b082      	sub	sp, #8
    bfbc:	af00      	add	r7, sp, #0
    bfbe:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    bfc0:	687b      	ldr	r3, [r7, #4]
    bfc2:	2200      	movs	r2, #0
    bfc4:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    bfc6:	687b      	ldr	r3, [r7, #4]
    bfc8:	2201      	movs	r2, #1
    bfca:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    bfcc:	687b      	ldr	r3, [r7, #4]
    bfce:	2200      	movs	r2, #0
    bfd0:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    bfd2:	687b      	ldr	r3, [r7, #4]
    bfd4:	2201      	movs	r2, #1
    bfd6:	70da      	strb	r2, [r3, #3]
}
    bfd8:	46c0      	nop			; (mov r8, r8)
    bfda:	46bd      	mov	sp, r7
    bfdc:	b002      	add	sp, #8
    bfde:	bd80      	pop	{r7, pc}

0000bfe0 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    bfe0:	b590      	push	{r4, r7, lr}
    bfe2:	b08d      	sub	sp, #52	; 0x34
    bfe4:	af00      	add	r7, sp, #0
    bfe6:	60f8      	str	r0, [r7, #12]
    bfe8:	60b9      	str	r1, [r7, #8]
    bfea:	607a      	str	r2, [r7, #4]
    bfec:	4ccc      	ldr	r4, [pc, #816]	; (c320 <usb_init+0x340>)
    bfee:	447c      	add	r4, pc
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    bff0:	4bcc      	ldr	r3, [pc, #816]	; (c324 <usb_init+0x344>)
    bff2:	58e3      	ldr	r3, [r4, r3]
    bff4:	2200      	movs	r2, #0
    bff6:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    bff8:	4bcb      	ldr	r3, [pc, #812]	; (c328 <usb_init+0x348>)
    bffa:	447b      	add	r3, pc
    bffc:	68fa      	ldr	r2, [r7, #12]
    bffe:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    c000:	68fb      	ldr	r3, [r7, #12]
    c002:	68ba      	ldr	r2, [r7, #8]
    c004:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    c006:	2120      	movs	r1, #32
    c008:	2001      	movs	r0, #1
    c00a:	4bc8      	ldr	r3, [pc, #800]	; (c32c <usb_init+0x34c>)
    c00c:	447b      	add	r3, pc
    c00e:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    c010:	2318      	movs	r3, #24
    c012:	18fb      	adds	r3, r7, r3
    c014:	0018      	movs	r0, r3
    c016:	4bc6      	ldr	r3, [pc, #792]	; (c330 <usb_init+0x350>)
    c018:	447b      	add	r3, pc
    c01a:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    c01c:	2318      	movs	r3, #24
    c01e:	18fb      	adds	r3, r7, r3
    c020:	2206      	movs	r2, #6
    c022:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    c024:	2318      	movs	r3, #24
    c026:	18fb      	adds	r3, r7, r3
    c028:	0019      	movs	r1, r3
    c02a:	2018      	movs	r0, #24
    c02c:	4bc1      	ldr	r3, [pc, #772]	; (c334 <usb_init+0x354>)
    c02e:	58e3      	ldr	r3, [r4, r3]
    c030:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    c032:	2318      	movs	r3, #24
    c034:	18fb      	adds	r3, r7, r3
    c036:	2206      	movs	r2, #6
    c038:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    c03a:	2318      	movs	r3, #24
    c03c:	18fb      	adds	r3, r7, r3
    c03e:	0019      	movs	r1, r3
    c040:	2019      	movs	r0, #25
    c042:	4bbc      	ldr	r3, [pc, #752]	; (c334 <usb_init+0x354>)
    c044:	58e3      	ldr	r3, [r4, r3]
    c046:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    c048:	2314      	movs	r3, #20
    c04a:	18fb      	adds	r3, r7, r3
    c04c:	0018      	movs	r0, r3
    c04e:	4bba      	ldr	r3, [pc, #744]	; (c338 <usb_init+0x358>)
    c050:	447b      	add	r3, pc
    c052:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    c054:	687b      	ldr	r3, [r7, #4]
    c056:	789a      	ldrb	r2, [r3, #2]
    c058:	2314      	movs	r3, #20
    c05a:	18fb      	adds	r3, r7, r3
    c05c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    c05e:	2314      	movs	r3, #20
    c060:	18fb      	adds	r3, r7, r3
    c062:	0019      	movs	r1, r3
    c064:	2006      	movs	r0, #6
    c066:	4bb5      	ldr	r3, [pc, #724]	; (c33c <usb_init+0x35c>)
    c068:	58e3      	ldr	r3, [r4, r3]
    c06a:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    c06c:	2006      	movs	r0, #6
    c06e:	4bb4      	ldr	r3, [pc, #720]	; (c340 <usb_init+0x360>)
    c070:	58e3      	ldr	r3, [r4, r3]
    c072:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    c074:	68ba      	ldr	r2, [r7, #8]
    c076:	7813      	ldrb	r3, [r2, #0]
    c078:	2101      	movs	r1, #1
    c07a:	430b      	orrs	r3, r1
    c07c:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    c07e:	46c0      	nop			; (mov r8, r8)
    c080:	68bb      	ldr	r3, [r7, #8]
    c082:	789b      	ldrb	r3, [r3, #2]
    c084:	07db      	lsls	r3, r3, #31
    c086:	0fdb      	lsrs	r3, r3, #31
    c088:	b2db      	uxtb	r3, r3
    c08a:	2b00      	cmp	r3, #0
    c08c:	d1f8      	bne.n	c080 <usb_init+0xa0>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    c08e:	4aad      	ldr	r2, [pc, #692]	; (c344 <usb_init+0x364>)
    c090:	78d3      	ldrb	r3, [r2, #3]
    c092:	2103      	movs	r1, #3
    c094:	438b      	bics	r3, r1
    c096:	1c19      	adds	r1, r3, #0
    c098:	2302      	movs	r3, #2
    c09a:	430b      	orrs	r3, r1
    c09c:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    c09e:	4aa9      	ldr	r2, [pc, #676]	; (c344 <usb_init+0x364>)
    c0a0:	78d3      	ldrb	r3, [r2, #3]
    c0a2:	210c      	movs	r1, #12
    c0a4:	438b      	bics	r3, r1
    c0a6:	1c19      	adds	r1, r3, #0
    c0a8:	2308      	movs	r3, #8
    c0aa:	430b      	orrs	r3, r1
    c0ac:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    c0ae:	4ba6      	ldr	r3, [pc, #664]	; (c348 <usb_init+0x368>)
    c0b0:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    c0b2:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    c0b4:	221f      	movs	r2, #31
    c0b6:	4013      	ands	r3, r2
    c0b8:	627b      	str	r3, [r7, #36]	; 0x24
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0bc:	2b1f      	cmp	r3, #31
    c0be:	d101      	bne.n	c0c4 <usb_init+0xe4>
		pad_transn = 5;
    c0c0:	2305      	movs	r3, #5
    c0c2:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    c0c6:	b2db      	uxtb	r3, r3
    c0c8:	1c1a      	adds	r2, r3, #0
    c0ca:	231f      	movs	r3, #31
    c0cc:	4013      	ands	r3, r2
    c0ce:	b2d9      	uxtb	r1, r3
    c0d0:	68ba      	ldr	r2, [r7, #8]
    c0d2:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    c0d4:	1c08      	adds	r0, r1, #0
    c0d6:	211f      	movs	r1, #31
    c0d8:	4001      	ands	r1, r0
    c0da:	0188      	lsls	r0, r1, #6
    c0dc:	499b      	ldr	r1, [pc, #620]	; (c34c <usb_init+0x36c>)
    c0de:	400b      	ands	r3, r1
    c0e0:	1c19      	adds	r1, r3, #0
    c0e2:	1c03      	adds	r3, r0, #0
    c0e4:	430b      	orrs	r3, r1
    c0e6:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    c0e8:	4b97      	ldr	r3, [pc, #604]	; (c348 <usb_init+0x368>)
    c0ea:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    c0ec:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    c0ee:	221f      	movs	r2, #31
    c0f0:	4013      	ands	r3, r2
    c0f2:	623b      	str	r3, [r7, #32]
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    c0f4:	6a3b      	ldr	r3, [r7, #32]
    c0f6:	2b1f      	cmp	r3, #31
    c0f8:	d101      	bne.n	c0fe <usb_init+0x11e>
		pad_transp = 29;
    c0fa:	231d      	movs	r3, #29
    c0fc:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    c0fe:	6a3b      	ldr	r3, [r7, #32]
    c100:	b2db      	uxtb	r3, r3
    c102:	1c1a      	adds	r2, r3, #0
    c104:	231f      	movs	r3, #31
    c106:	4013      	ands	r3, r2
    c108:	b2d9      	uxtb	r1, r3
    c10a:	68ba      	ldr	r2, [r7, #8]
    c10c:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    c10e:	1c08      	adds	r0, r1, #0
    c110:	211f      	movs	r1, #31
    c112:	4008      	ands	r0, r1
    c114:	211f      	movs	r1, #31
    c116:	438b      	bics	r3, r1
    c118:	1c19      	adds	r1, r3, #0
    c11a:	1c03      	adds	r3, r0, #0
    c11c:	430b      	orrs	r3, r1
    c11e:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    c120:	4b89      	ldr	r3, [pc, #548]	; (c348 <usb_init+0x368>)
    c122:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    c124:	0ddb      	lsrs	r3, r3, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    c126:	2207      	movs	r2, #7
    c128:	4013      	ands	r3, r2
    c12a:	61fb      	str	r3, [r7, #28]
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    c12c:	69fb      	ldr	r3, [r7, #28]
    c12e:	2b07      	cmp	r3, #7
    c130:	d101      	bne.n	c136 <usb_init+0x156>
		pad_trim = 3;
    c132:	2303      	movs	r3, #3
    c134:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    c136:	69fb      	ldr	r3, [r7, #28]
    c138:	b2db      	uxtb	r3, r3
    c13a:	1c1a      	adds	r2, r3, #0
    c13c:	2307      	movs	r3, #7
    c13e:	4013      	ands	r3, r2
    c140:	b2d9      	uxtb	r1, r3
    c142:	68ba      	ldr	r2, [r7, #8]
    c144:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    c146:	1c08      	adds	r0, r1, #0
    c148:	2107      	movs	r1, #7
    c14a:	4001      	ands	r1, r0
    c14c:	0308      	lsls	r0, r1, #12
    c14e:	4980      	ldr	r1, [pc, #512]	; (c350 <usb_init+0x370>)
    c150:	400b      	ands	r3, r1
    c152:	1c19      	adds	r1, r3, #0
    c154:	1c03      	adds	r3, r0, #0
    c156:	430b      	orrs	r3, r1
    c158:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    c15a:	687b      	ldr	r3, [r7, #4]
    c15c:	7819      	ldrb	r1, [r3, #0]
    c15e:	68ba      	ldr	r2, [r7, #8]
    c160:	7813      	ldrb	r3, [r2, #0]
    c162:	01c8      	lsls	r0, r1, #7
    c164:	217f      	movs	r1, #127	; 0x7f
    c166:	400b      	ands	r3, r1
    c168:	1c19      	adds	r1, r3, #0
    c16a:	1c03      	adds	r3, r0, #0
    c16c:	430b      	orrs	r3, r1
    c16e:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    c170:	687b      	ldr	r3, [r7, #4]
    c172:	7859      	ldrb	r1, [r3, #1]
    c174:	68ba      	ldr	r2, [r7, #8]
    c176:	7813      	ldrb	r3, [r2, #0]
    c178:	2001      	movs	r0, #1
    c17a:	4001      	ands	r1, r0
    c17c:	0088      	lsls	r0, r1, #2
    c17e:	2104      	movs	r1, #4
    c180:	438b      	bics	r3, r1
    c182:	1c19      	adds	r1, r3, #0
    c184:	1c03      	adds	r3, r0, #0
    c186:	430b      	orrs	r3, r1
    c188:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    c18a:	4b72      	ldr	r3, [pc, #456]	; (c354 <usb_init+0x374>)
    c18c:	58e3      	ldr	r3, [r4, r3]
    c18e:	001a      	movs	r2, r3
    c190:	68bb      	ldr	r3, [r7, #8]
    c192:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    c194:	687b      	ldr	r3, [r7, #4]
    c196:	78db      	ldrb	r3, [r3, #3]
    c198:	2b01      	cmp	r3, #1
    c19a:	d106      	bne.n	c1aa <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    c19c:	68fb      	ldr	r3, [r7, #12]
    c19e:	681a      	ldr	r2, [r3, #0]
    c1a0:	8913      	ldrh	r3, [r2, #8]
    c1a2:	210c      	movs	r1, #12
    c1a4:	438b      	bics	r3, r1
    c1a6:	8113      	strh	r3, [r2, #8]
    c1a8:	e00c      	b.n	c1c4 <usb_init+0x1e4>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    c1aa:	687b      	ldr	r3, [r7, #4]
    c1ac:	78db      	ldrb	r3, [r3, #3]
    c1ae:	2b00      	cmp	r3, #0
    c1b0:	d108      	bne.n	c1c4 <usb_init+0x1e4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    c1b2:	68fb      	ldr	r3, [r7, #12]
    c1b4:	681a      	ldr	r2, [r3, #0]
    c1b6:	8913      	ldrh	r3, [r2, #8]
    c1b8:	210c      	movs	r1, #12
    c1ba:	438b      	bics	r3, r1
    c1bc:	1c19      	adds	r1, r3, #0
    c1be:	2304      	movs	r3, #4
    c1c0:	430b      	orrs	r3, r1
    c1c2:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    c1c4:	2380      	movs	r3, #128	; 0x80
    c1c6:	005a      	lsls	r2, r3, #1
    c1c8:	4b62      	ldr	r3, [pc, #392]	; (c354 <usb_init+0x374>)
    c1ca:	58e3      	ldr	r3, [r4, r3]
    c1cc:	2100      	movs	r1, #0
    c1ce:	0018      	movs	r0, r3
    c1d0:	4b61      	ldr	r3, [pc, #388]	; (c358 <usb_init+0x378>)
    c1d2:	58e3      	ldr	r3, [r4, r3]
    c1d4:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    c1d6:	2300      	movs	r3, #0
    c1d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    c1da:	e009      	b.n	c1f0 <usb_init+0x210>
		module_inst->host_callback[i] = NULL;
    c1dc:	68fa      	ldr	r2, [r7, #12]
    c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1e0:	009b      	lsls	r3, r3, #2
    c1e2:	18d3      	adds	r3, r2, r3
    c1e4:	3304      	adds	r3, #4
    c1e6:	2200      	movs	r2, #0
    c1e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    c1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1ec:	3301      	adds	r3, #1
    c1ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    c1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c1f2:	2b07      	cmp	r3, #7
    c1f4:	d9f2      	bls.n	c1dc <usb_init+0x1fc>
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    c1f6:	2300      	movs	r3, #0
    c1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    c1fa:	e016      	b.n	c22a <usb_init+0x24a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    c1fc:	2300      	movs	r3, #0
    c1fe:	62bb      	str	r3, [r7, #40]	; 0x28
    c200:	e00d      	b.n	c21e <usb_init+0x23e>
			module_inst->host_pipe_callback[i][j] = NULL;
    c202:	68fa      	ldr	r2, [r7, #12]
    c204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c206:	0099      	lsls	r1, r3, #2
    c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c20a:	18cb      	adds	r3, r1, r3
    c20c:	3308      	adds	r3, #8
    c20e:	009b      	lsls	r3, r3, #2
    c210:	18d3      	adds	r3, r2, r3
    c212:	3304      	adds	r3, #4
    c214:	2200      	movs	r2, #0
    c216:	601a      	str	r2, [r3, #0]
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    c218:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c21a:	3301      	adds	r3, #1
    c21c:	62bb      	str	r3, [r7, #40]	; 0x28
    c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c220:	2b03      	cmp	r3, #3
    c222:	d9ee      	bls.n	c202 <usb_init+0x222>
	for (i = 0; i < USB_PIPE_NUM; i++) {
    c224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c226:	3301      	adds	r3, #1
    c228:	62fb      	str	r3, [r7, #44]	; 0x2c
    c22a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c22c:	2b07      	cmp	r3, #7
    c22e:	d9e5      	bls.n	c1fc <usb_init+0x21c>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    c230:	68fb      	ldr	r3, [r7, #12]
    c232:	22a4      	movs	r2, #164	; 0xa4
    c234:	2100      	movs	r1, #0
    c236:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    c238:	68fb      	ldr	r3, [r7, #12]
    c23a:	22a5      	movs	r2, #165	; 0xa5
    c23c:	2100      	movs	r1, #0
    c23e:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    c240:	2300      	movs	r3, #0
    c242:	62fb      	str	r3, [r7, #44]	; 0x2c
    c244:	e010      	b.n	c268 <usb_init+0x288>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    c246:	68fa      	ldr	r2, [r7, #12]
    c248:	21a6      	movs	r1, #166	; 0xa6
    c24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c24c:	18d3      	adds	r3, r2, r3
    c24e:	185b      	adds	r3, r3, r1
    c250:	2200      	movs	r2, #0
    c252:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    c254:	68fa      	ldr	r2, [r7, #12]
    c256:	21ae      	movs	r1, #174	; 0xae
    c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c25a:	18d3      	adds	r3, r2, r3
    c25c:	185b      	adds	r3, r3, r1
    c25e:	2200      	movs	r2, #0
    c260:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    c262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c264:	3301      	adds	r3, #1
    c266:	62fb      	str	r3, [r7, #44]	; 0x2c
    c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c26a:	2b07      	cmp	r3, #7
    c26c:	d9eb      	bls.n	c246 <usb_init+0x266>
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    c26e:	2300      	movs	r3, #0
    c270:	62fb      	str	r3, [r7, #44]	; 0x2c
    c272:	e008      	b.n	c286 <usb_init+0x2a6>
		module_inst->device_callback[i] = NULL;
    c274:	68fb      	ldr	r3, [r7, #12]
    c276:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    c278:	322e      	adds	r2, #46	; 0x2e
    c27a:	0092      	lsls	r2, r2, #2
    c27c:	2100      	movs	r1, #0
    c27e:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    c280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c282:	3301      	adds	r3, #1
    c284:	62fb      	str	r3, [r7, #44]	; 0x2c
    c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c288:	2b06      	cmp	r3, #6
    c28a:	d9f3      	bls.n	c274 <usb_init+0x294>
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    c28c:	2300      	movs	r3, #0
    c28e:	62fb      	str	r3, [r7, #44]	; 0x2c
    c290:	e016      	b.n	c2c0 <usb_init+0x2e0>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    c292:	2300      	movs	r3, #0
    c294:	62bb      	str	r3, [r7, #40]	; 0x28
    c296:	e00d      	b.n	c2b4 <usb_init+0x2d4>
			module_inst->device_endpoint_callback[i][j] = NULL;
    c298:	68fa      	ldr	r2, [r7, #12]
    c29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c29c:	0099      	lsls	r1, r3, #2
    c29e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2a0:	18cb      	adds	r3, r1, r3
    c2a2:	3334      	adds	r3, #52	; 0x34
    c2a4:	009b      	lsls	r3, r3, #2
    c2a6:	18d3      	adds	r3, r2, r3
    c2a8:	3304      	adds	r3, #4
    c2aa:	2200      	movs	r2, #0
    c2ac:	601a      	str	r2, [r3, #0]
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    c2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2b0:	3301      	adds	r3, #1
    c2b2:	62bb      	str	r3, [r7, #40]	; 0x28
    c2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c2b6:	2b03      	cmp	r3, #3
    c2b8:	d9ee      	bls.n	c298 <usb_init+0x2b8>
	for (i = 0; i < USB_EPT_NUM; i++) {
    c2ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2bc:	3301      	adds	r3, #1
    c2be:	62fb      	str	r3, [r7, #44]	; 0x2c
    c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    c2c2:	2b07      	cmp	r3, #7
    c2c4:	d9e5      	bls.n	c292 <usb_init+0x2b2>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    c2c6:	68fa      	ldr	r2, [r7, #12]
    c2c8:	23aa      	movs	r3, #170	; 0xaa
    c2ca:	005b      	lsls	r3, r3, #1
    c2cc:	2100      	movs	r1, #0
    c2ce:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    c2d0:	68fa      	ldr	r2, [r7, #12]
    c2d2:	23ab      	movs	r3, #171	; 0xab
    c2d4:	005b      	lsls	r3, r3, #1
    c2d6:	2100      	movs	r1, #0
    c2d8:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    c2da:	2300      	movs	r3, #0
    c2dc:	62bb      	str	r3, [r7, #40]	; 0x28
    c2de:	e012      	b.n	c306 <usb_init+0x326>
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    c2e0:	68f9      	ldr	r1, [r7, #12]
    c2e2:	23ac      	movs	r3, #172	; 0xac
    c2e4:	005b      	lsls	r3, r3, #1
    c2e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c2e8:	188a      	adds	r2, r1, r2
    c2ea:	18d3      	adds	r3, r2, r3
    c2ec:	2200      	movs	r2, #0
    c2ee:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    c2f0:	68f9      	ldr	r1, [r7, #12]
    c2f2:	23b0      	movs	r3, #176	; 0xb0
    c2f4:	005b      	lsls	r3, r3, #1
    c2f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    c2f8:	188a      	adds	r2, r1, r2
    c2fa:	18d3      	adds	r3, r2, r3
    c2fc:	2200      	movs	r2, #0
    c2fe:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < USB_EPT_NUM; j++) {
    c300:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c302:	3301      	adds	r3, #1
    c304:	62bb      	str	r3, [r7, #40]	; 0x28
    c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
    c308:	2b07      	cmp	r3, #7
    c30a:	d9e9      	bls.n	c2e0 <usb_init+0x300>
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    c30c:	2007      	movs	r0, #7
    c30e:	4b13      	ldr	r3, [pc, #76]	; (c35c <usb_init+0x37c>)
    c310:	447b      	add	r3, pc
    c312:	4798      	blx	r3

	return STATUS_OK;
    c314:	2300      	movs	r3, #0
}
    c316:	0018      	movs	r0, r3
    c318:	46bd      	mov	sp, r7
    c31a:	b00d      	add	sp, #52	; 0x34
    c31c:	bd90      	pop	{r4, r7, pc}
    c31e:	46c0      	nop			; (mov r8, r8)
    c320:	00005de2 	.word	0x00005de2
    c324:	000000ac 	.word	0x000000ac
    c328:	1fff461e 	.word	0x1fff461e
    c32c:	ffffe209 	.word	0xffffe209
    c330:	ffffe259 	.word	0xffffe259
    c334:	000002b0 	.word	0x000002b0
    c338:	ffffe1ad 	.word	0xffffe1ad
    c33c:	000000b0 	.word	0x000000b0
    c340:	00000230 	.word	0x00000230
    c344:	41005000 	.word	0x41005000
    c348:	00806024 	.word	0x00806024
    c34c:	fffff83f 	.word	0xfffff83f
    c350:	ffff8fff 	.word	0xffff8fff
    c354:	00000020 	.word	0x00000020
    c358:	000001f0 	.word	0x000001f0
    c35c:	ffffdf89 	.word	0xffffdf89

0000c360 <system_pinmux_get_group_from_gpio_pin>:
{
    c360:	b580      	push	{r7, lr}
    c362:	b084      	sub	sp, #16
    c364:	af00      	add	r7, sp, #0
    c366:	0002      	movs	r2, r0
    c368:	1dfb      	adds	r3, r7, #7
    c36a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    c36c:	230f      	movs	r3, #15
    c36e:	18fb      	adds	r3, r7, r3
    c370:	1dfa      	adds	r2, r7, #7
    c372:	7812      	ldrb	r2, [r2, #0]
    c374:	09d2      	lsrs	r2, r2, #7
    c376:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    c378:	230e      	movs	r3, #14
    c37a:	18fb      	adds	r3, r7, r3
    c37c:	1dfa      	adds	r2, r7, #7
    c37e:	7812      	ldrb	r2, [r2, #0]
    c380:	0952      	lsrs	r2, r2, #5
    c382:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    c384:	4b0d      	ldr	r3, [pc, #52]	; (c3bc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    c386:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    c388:	230f      	movs	r3, #15
    c38a:	18fb      	adds	r3, r7, r3
    c38c:	781b      	ldrb	r3, [r3, #0]
    c38e:	2b00      	cmp	r3, #0
    c390:	d10f      	bne.n	c3b2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    c392:	230f      	movs	r3, #15
    c394:	18fb      	adds	r3, r7, r3
    c396:	781b      	ldrb	r3, [r3, #0]
    c398:	009b      	lsls	r3, r3, #2
    c39a:	2210      	movs	r2, #16
    c39c:	4694      	mov	ip, r2
    c39e:	44bc      	add	ip, r7
    c3a0:	4463      	add	r3, ip
    c3a2:	3b08      	subs	r3, #8
    c3a4:	681a      	ldr	r2, [r3, #0]
    c3a6:	230e      	movs	r3, #14
    c3a8:	18fb      	adds	r3, r7, r3
    c3aa:	781b      	ldrb	r3, [r3, #0]
    c3ac:	01db      	lsls	r3, r3, #7
    c3ae:	18d3      	adds	r3, r2, r3
    c3b0:	e000      	b.n	c3b4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    c3b2:	2300      	movs	r3, #0
}
    c3b4:	0018      	movs	r0, r3
    c3b6:	46bd      	mov	sp, r7
    c3b8:	b004      	add	sp, #16
    c3ba:	bd80      	pop	{r7, pc}
    c3bc:	41004400 	.word	0x41004400

0000c3c0 <port_get_group_from_gpio_pin>:
{
    c3c0:	b580      	push	{r7, lr}
    c3c2:	b082      	sub	sp, #8
    c3c4:	af00      	add	r7, sp, #0
    c3c6:	0002      	movs	r2, r0
    c3c8:	1dfb      	adds	r3, r7, #7
    c3ca:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    c3cc:	1dfb      	adds	r3, r7, #7
    c3ce:	781b      	ldrb	r3, [r3, #0]
    c3d0:	0018      	movs	r0, r3
    c3d2:	4b04      	ldr	r3, [pc, #16]	; (c3e4 <port_get_group_from_gpio_pin+0x24>)
    c3d4:	447b      	add	r3, pc
    c3d6:	4798      	blx	r3
    c3d8:	0003      	movs	r3, r0
}
    c3da:	0018      	movs	r0, r3
    c3dc:	46bd      	mov	sp, r7
    c3de:	b002      	add	sp, #8
    c3e0:	bd80      	pop	{r7, pc}
    c3e2:	46c0      	nop			; (mov r8, r8)
    c3e4:	ffffff89 	.word	0xffffff89

0000c3e8 <port_get_config_defaults>:
{
    c3e8:	b580      	push	{r7, lr}
    c3ea:	b082      	sub	sp, #8
    c3ec:	af00      	add	r7, sp, #0
    c3ee:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    c3f0:	687b      	ldr	r3, [r7, #4]
    c3f2:	2200      	movs	r2, #0
    c3f4:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    c3f6:	687b      	ldr	r3, [r7, #4]
    c3f8:	2201      	movs	r2, #1
    c3fa:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    c3fc:	687b      	ldr	r3, [r7, #4]
    c3fe:	2200      	movs	r2, #0
    c400:	709a      	strb	r2, [r3, #2]
}
    c402:	46c0      	nop			; (mov r8, r8)
    c404:	46bd      	mov	sp, r7
    c406:	b002      	add	sp, #8
    c408:	bd80      	pop	{r7, pc}
	...

0000c40c <port_pin_set_output_level>:
{
    c40c:	b580      	push	{r7, lr}
    c40e:	b084      	sub	sp, #16
    c410:	af00      	add	r7, sp, #0
    c412:	0002      	movs	r2, r0
    c414:	1dfb      	adds	r3, r7, #7
    c416:	701a      	strb	r2, [r3, #0]
    c418:	1dbb      	adds	r3, r7, #6
    c41a:	1c0a      	adds	r2, r1, #0
    c41c:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    c41e:	1dfb      	adds	r3, r7, #7
    c420:	781b      	ldrb	r3, [r3, #0]
    c422:	0018      	movs	r0, r3
    c424:	4b0d      	ldr	r3, [pc, #52]	; (c45c <port_pin_set_output_level+0x50>)
    c426:	447b      	add	r3, pc
    c428:	4798      	blx	r3
    c42a:	0003      	movs	r3, r0
    c42c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    c42e:	1dfb      	adds	r3, r7, #7
    c430:	781b      	ldrb	r3, [r3, #0]
    c432:	221f      	movs	r2, #31
    c434:	4013      	ands	r3, r2
    c436:	2201      	movs	r2, #1
    c438:	409a      	lsls	r2, r3
    c43a:	0013      	movs	r3, r2
    c43c:	60bb      	str	r3, [r7, #8]
	if (level) {
    c43e:	1dbb      	adds	r3, r7, #6
    c440:	781b      	ldrb	r3, [r3, #0]
    c442:	2b00      	cmp	r3, #0
    c444:	d003      	beq.n	c44e <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    c446:	68fb      	ldr	r3, [r7, #12]
    c448:	68ba      	ldr	r2, [r7, #8]
    c44a:	619a      	str	r2, [r3, #24]
}
    c44c:	e002      	b.n	c454 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    c44e:	68fb      	ldr	r3, [r7, #12]
    c450:	68ba      	ldr	r2, [r7, #8]
    c452:	615a      	str	r2, [r3, #20]
}
    c454:	46c0      	nop			; (mov r8, r8)
    c456:	46bd      	mov	sp, r7
    c458:	b004      	add	sp, #16
    c45a:	bd80      	pop	{r7, pc}
    c45c:	ffffff97 	.word	0xffffff97

0000c460 <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    c460:	b590      	push	{r4, r7, lr}
    c462:	b083      	sub	sp, #12
    c464:	af00      	add	r7, sp, #0
    c466:	4ca5      	ldr	r4, [pc, #660]	; (c6fc <system_board_init+0x29c>)
    c468:	447c      	add	r4, pc
	// Initialize all IO's to turn everything off and low-power
	struct port_config config;
	port_get_config_defaults(&config);
    c46a:	1d3b      	adds	r3, r7, #4
    c46c:	0018      	movs	r0, r3
    c46e:	4ba4      	ldr	r3, [pc, #656]	; (c700 <system_board_init+0x2a0>)
    c470:	447b      	add	r3, pc
    c472:	4798      	blx	r3

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    c474:	1d3b      	adds	r3, r7, #4
    c476:	2200      	movs	r2, #0
    c478:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    c47a:	1d3b      	adds	r3, r7, #4
    c47c:	2201      	movs	r2, #1
    c47e:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    c480:	1d3b      	adds	r3, r7, #4
    c482:	2200      	movs	r2, #0
    c484:	709a      	strb	r2, [r3, #2]
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    c486:	1d3b      	adds	r3, r7, #4
    c488:	0019      	movs	r1, r3
    c48a:	2013      	movs	r0, #19
    c48c:	4b9d      	ldr	r3, [pc, #628]	; (c704 <system_board_init+0x2a4>)
    c48e:	58e3      	ldr	r3, [r4, r3]
    c490:	4798      	blx	r3
    c492:	1d3b      	adds	r3, r7, #4
    c494:	0019      	movs	r1, r3
    c496:	2010      	movs	r0, #16
    c498:	4b9a      	ldr	r3, [pc, #616]	; (c704 <system_board_init+0x2a4>)
    c49a:	58e3      	ldr	r3, [r4, r3]
    c49c:	4798      	blx	r3
    c49e:	1d3b      	adds	r3, r7, #4
    c4a0:	0019      	movs	r1, r3
    c4a2:	2011      	movs	r0, #17
    c4a4:	4b97      	ldr	r3, [pc, #604]	; (c704 <system_board_init+0x2a4>)
    c4a6:	58e3      	ldr	r3, [r4, r3]
    c4a8:	4798      	blx	r3
    c4aa:	1d3b      	adds	r3, r7, #4
    c4ac:	0019      	movs	r1, r3
    c4ae:	2012      	movs	r0, #18
    c4b0:	4b94      	ldr	r3, [pc, #592]	; (c704 <system_board_init+0x2a4>)
    c4b2:	58e3      	ldr	r3, [r4, r3]
    c4b4:	4798      	blx	r3
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    c4b6:	1d3b      	adds	r3, r7, #4
    c4b8:	2200      	movs	r2, #0
    c4ba:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    c4bc:	1d3b      	adds	r3, r7, #4
    c4be:	2200      	movs	r2, #0
    c4c0:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    c4c2:	1d3b      	adds	r3, r7, #4
    c4c4:	2201      	movs	r2, #1
    c4c6:	709a      	strb	r2, [r3, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    c4c8:	1d3b      	adds	r3, r7, #4
    c4ca:	0019      	movs	r1, r3
    c4cc:	2014      	movs	r0, #20
    c4ce:	4b8d      	ldr	r3, [pc, #564]	; (c704 <system_board_init+0x2a4>)
    c4d0:	58e3      	ldr	r3, [r4, r3]
    c4d2:	4798      	blx	r3
    c4d4:	1d3b      	adds	r3, r7, #4
    c4d6:	0019      	movs	r1, r3
    c4d8:	2015      	movs	r0, #21
    c4da:	4b8a      	ldr	r3, [pc, #552]	; (c704 <system_board_init+0x2a4>)
    c4dc:	58e3      	ldr	r3, [r4, r3]
    c4de:	4798      	blx	r3

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    c4e0:	1d3b      	adds	r3, r7, #4
    c4e2:	2200      	movs	r2, #0
    c4e4:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    c4e6:	1d3b      	adds	r3, r7, #4
    c4e8:	2201      	movs	r2, #1
    c4ea:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    c4ec:	1d3b      	adds	r3, r7, #4
    c4ee:	2201      	movs	r2, #1
    c4f0:	709a      	strb	r2, [r3, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    c4f2:	1d3b      	adds	r3, r7, #4
    c4f4:	0019      	movs	r1, r3
    c4f6:	2018      	movs	r0, #24
    c4f8:	4b82      	ldr	r3, [pc, #520]	; (c704 <system_board_init+0x2a4>)
    c4fa:	58e3      	ldr	r3, [r4, r3]
    c4fc:	4798      	blx	r3
    c4fe:	1d3b      	adds	r3, r7, #4
    c500:	0019      	movs	r1, r3
    c502:	2019      	movs	r0, #25
    c504:	4b7f      	ldr	r3, [pc, #508]	; (c704 <system_board_init+0x2a4>)
    c506:	58e3      	ldr	r3, [r4, r3]
    c508:	4798      	blx	r3

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    c50a:	1d3b      	adds	r3, r7, #4
    c50c:	2200      	movs	r2, #0
    c50e:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    c510:	1d3b      	adds	r3, r7, #4
    c512:	2202      	movs	r2, #2
    c514:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    c516:	1d3b      	adds	r3, r7, #4
    c518:	2201      	movs	r2, #1
    c51a:	709a      	strb	r2, [r3, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    c51c:	1d3b      	adds	r3, r7, #4
    c51e:	0019      	movs	r1, r3
    c520:	2036      	movs	r0, #54	; 0x36
    c522:	4b78      	ldr	r3, [pc, #480]	; (c704 <system_board_init+0x2a4>)
    c524:	58e3      	ldr	r3, [r4, r3]
    c526:	4798      	blx	r3
    c528:	1d3b      	adds	r3, r7, #4
    c52a:	0019      	movs	r1, r3
    c52c:	2022      	movs	r0, #34	; 0x22
    c52e:	4b75      	ldr	r3, [pc, #468]	; (c704 <system_board_init+0x2a4>)
    c530:	58e3      	ldr	r3, [r4, r3]
    c532:	4798      	blx	r3
    c534:	1d3b      	adds	r3, r7, #4
    c536:	0019      	movs	r1, r3
    c538:	2037      	movs	r0, #55	; 0x37
    c53a:	4b72      	ldr	r3, [pc, #456]	; (c704 <system_board_init+0x2a4>)
    c53c:	58e3      	ldr	r3, [r4, r3]
    c53e:	4798      	blx	r3
    c540:	1d3b      	adds	r3, r7, #4
    c542:	0019      	movs	r1, r3
    c544:	2023      	movs	r0, #35	; 0x23
    c546:	4b6f      	ldr	r3, [pc, #444]	; (c704 <system_board_init+0x2a4>)
    c548:	58e3      	ldr	r3, [r4, r3]
    c54a:	4798      	blx	r3
    c54c:	1d3b      	adds	r3, r7, #4
    c54e:	0019      	movs	r1, r3
    c550:	202a      	movs	r0, #42	; 0x2a
    c552:	4b6c      	ldr	r3, [pc, #432]	; (c704 <system_board_init+0x2a4>)
    c554:	58e3      	ldr	r3, [r4, r3]
    c556:	4798      	blx	r3

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    c558:	1d3b      	adds	r3, r7, #4
    c55a:	2200      	movs	r2, #0
    c55c:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    c55e:	1d3b      	adds	r3, r7, #4
    c560:	2201      	movs	r2, #1
    c562:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    c564:	1d3b      	adds	r3, r7, #4
    c566:	2200      	movs	r2, #0
    c568:	709a      	strb	r2, [r3, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    c56a:	1d3b      	adds	r3, r7, #4
    c56c:	0019      	movs	r1, r3
    c56e:	2003      	movs	r0, #3
    c570:	4b64      	ldr	r3, [pc, #400]	; (c704 <system_board_init+0x2a4>)
    c572:	58e3      	ldr	r3, [r4, r3]
    c574:	4798      	blx	r3
    c576:	1d3b      	adds	r3, r7, #4
    c578:	0019      	movs	r1, r3
    c57a:	201f      	movs	r0, #31
    c57c:	4b61      	ldr	r3, [pc, #388]	; (c704 <system_board_init+0x2a4>)
    c57e:	58e3      	ldr	r3, [r4, r3]
    c580:	4798      	blx	r3

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    c582:	1d3b      	adds	r3, r7, #4
    c584:	2200      	movs	r2, #0
    c586:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    c588:	1d3b      	adds	r3, r7, #4
    c58a:	2200      	movs	r2, #0
    c58c:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    c58e:	1d3b      	adds	r3, r7, #4
    c590:	2201      	movs	r2, #1
    c592:	709a      	strb	r2, [r3, #2]
	CFG(BATSENSE_ADC_PIN);
    c594:	1d3b      	adds	r3, r7, #4
    c596:	0019      	movs	r1, r3
    c598:	2002      	movs	r0, #2
    c59a:	4b5a      	ldr	r3, [pc, #360]	; (c704 <system_board_init+0x2a4>)
    c59c:	58e3      	ldr	r3, [r4, r3]
    c59e:	4798      	blx	r3

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    c5a0:	1d3b      	adds	r3, r7, #4
    c5a2:	2200      	movs	r2, #0
    c5a4:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    c5a6:	1d3b      	adds	r3, r7, #4
    c5a8:	2200      	movs	r2, #0
    c5aa:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    c5ac:	1d3b      	adds	r3, r7, #4
    c5ae:	2201      	movs	r2, #1
    c5b0:	709a      	strb	r2, [r3, #2]
	CFG(LED_OUT_PIN);
    c5b2:	1d3b      	adds	r3, r7, #4
    c5b4:	0019      	movs	r1, r3
    c5b6:	202b      	movs	r0, #43	; 0x2b
    c5b8:	4b52      	ldr	r3, [pc, #328]	; (c704 <system_board_init+0x2a4>)
    c5ba:	58e3      	ldr	r3, [r4, r3]
    c5bc:	4798      	blx	r3
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    c5be:	1d3b      	adds	r3, r7, #4
    c5c0:	2200      	movs	r2, #0
    c5c2:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    c5c4:	1d3b      	adds	r3, r7, #4
    c5c6:	2202      	movs	r2, #2
    c5c8:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    c5ca:	1d3b      	adds	r3, r7, #4
    c5cc:	2201      	movs	r2, #1
    c5ce:	709a      	strb	r2, [r3, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    c5d0:	1d3b      	adds	r3, r7, #4
    c5d2:	0019      	movs	r1, r3
    c5d4:	2004      	movs	r0, #4
    c5d6:	4b4b      	ldr	r3, [pc, #300]	; (c704 <system_board_init+0x2a4>)
    c5d8:	58e3      	ldr	r3, [r4, r3]
    c5da:	4798      	blx	r3
    c5dc:	1d3b      	adds	r3, r7, #4
    c5de:	0019      	movs	r1, r3
    c5e0:	2005      	movs	r0, #5
    c5e2:	4b48      	ldr	r3, [pc, #288]	; (c704 <system_board_init+0x2a4>)
    c5e4:	58e3      	ldr	r3, [r4, r3]
    c5e6:	4798      	blx	r3
    c5e8:	1d3b      	adds	r3, r7, #4
    c5ea:	0019      	movs	r1, r3
    c5ec:	2006      	movs	r0, #6
    c5ee:	4b45      	ldr	r3, [pc, #276]	; (c704 <system_board_init+0x2a4>)
    c5f0:	58e3      	ldr	r3, [r4, r3]
    c5f2:	4798      	blx	r3
    c5f4:	1d3b      	adds	r3, r7, #4
    c5f6:	0019      	movs	r1, r3
    c5f8:	2007      	movs	r0, #7
    c5fa:	4b42      	ldr	r3, [pc, #264]	; (c704 <system_board_init+0x2a4>)
    c5fc:	58e3      	ldr	r3, [r4, r3]
    c5fe:	4798      	blx	r3
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    c600:	1d3b      	adds	r3, r7, #4
    c602:	0019      	movs	r1, r3
    c604:	2008      	movs	r0, #8
    c606:	4b3f      	ldr	r3, [pc, #252]	; (c704 <system_board_init+0x2a4>)
    c608:	58e3      	ldr	r3, [r4, r3]
    c60a:	4798      	blx	r3
    c60c:	1d3b      	adds	r3, r7, #4
    c60e:	0019      	movs	r1, r3
    c610:	2009      	movs	r0, #9
    c612:	4b3c      	ldr	r3, [pc, #240]	; (c704 <system_board_init+0x2a4>)
    c614:	58e3      	ldr	r3, [r4, r3]
    c616:	4798      	blx	r3
    c618:	1d3b      	adds	r3, r7, #4
    c61a:	0019      	movs	r1, r3
    c61c:	200a      	movs	r0, #10
    c61e:	4b39      	ldr	r3, [pc, #228]	; (c704 <system_board_init+0x2a4>)
    c620:	58e3      	ldr	r3, [r4, r3]
    c622:	4798      	blx	r3
    c624:	1d3b      	adds	r3, r7, #4
    c626:	0019      	movs	r1, r3
    c628:	200b      	movs	r0, #11
    c62a:	4b36      	ldr	r3, [pc, #216]	; (c704 <system_board_init+0x2a4>)
    c62c:	58e3      	ldr	r3, [r4, r3]
    c62e:	4798      	blx	r3
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_INPUT;
    c630:	1d3b      	adds	r3, r7, #4
    c632:	2200      	movs	r2, #0
    c634:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    c636:	1d3b      	adds	r3, r7, #4
    c638:	2202      	movs	r2, #2
    c63a:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    c63c:	1d3b      	adds	r3, r7, #4
    c63e:	2201      	movs	r2, #1
    c640:	709a      	strb	r2, [r3, #2]
	CFG(ACCYEN_GP_OUT_PIN);
    c642:	1d3b      	adds	r3, r7, #4
    c644:	0019      	movs	r1, r3
    c646:	2017      	movs	r0, #23
    c648:	4b2e      	ldr	r3, [pc, #184]	; (c704 <system_board_init+0x2a4>)
    c64a:	58e3      	ldr	r3, [r4, r3]
    c64c:	4798      	blx	r3

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
    c64e:	1d3b      	adds	r3, r7, #4
    c650:	2200      	movs	r2, #0
    c652:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    c654:	1d3b      	adds	r3, r7, #4
    c656:	2202      	movs	r2, #2
    c658:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    c65a:	1d3b      	adds	r3, r7, #4
    c65c:	2201      	movs	r2, #1
    c65e:	709a      	strb	r2, [r3, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    c660:	1d3b      	adds	r3, r7, #4
    c662:	0019      	movs	r1, r3
    c664:	200e      	movs	r0, #14
    c666:	4b27      	ldr	r3, [pc, #156]	; (c704 <system_board_init+0x2a4>)
    c668:	58e3      	ldr	r3, [r4, r3]
    c66a:	4798      	blx	r3
    c66c:	1d3b      	adds	r3, r7, #4
    c66e:	0019      	movs	r1, r3
    c670:	200f      	movs	r0, #15
    c672:	4b24      	ldr	r3, [pc, #144]	; (c704 <system_board_init+0x2a4>)
    c674:	58e3      	ldr	r3, [r4, r3]
    c676:	4798      	blx	r3
    c678:	1d3b      	adds	r3, r7, #4
    c67a:	0019      	movs	r1, r3
    c67c:	200c      	movs	r0, #12
    c67e:	4b21      	ldr	r3, [pc, #132]	; (c704 <system_board_init+0x2a4>)
    c680:	58e3      	ldr	r3, [r4, r3]
    c682:	4798      	blx	r3
    c684:	1d3b      	adds	r3, r7, #4
    c686:	0019      	movs	r1, r3
    c688:	200d      	movs	r0, #13
    c68a:	4b1e      	ldr	r3, [pc, #120]	; (c704 <system_board_init+0x2a4>)
    c68c:	58e3      	ldr	r3, [r4, r3]
    c68e:	4798      	blx	r3
    c690:	1d3b      	adds	r3, r7, #4
    c692:	0019      	movs	r1, r3
    c694:	2029      	movs	r0, #41	; 0x29
    c696:	4b1b      	ldr	r3, [pc, #108]	; (c704 <system_board_init+0x2a4>)
    c698:	58e3      	ldr	r3, [r4, r3]
    c69a:	4798      	blx	r3
    c69c:	1d3b      	adds	r3, r7, #4
    c69e:	0019      	movs	r1, r3
    c6a0:	2016      	movs	r0, #22
    c6a2:	4b18      	ldr	r3, [pc, #96]	; (c704 <system_board_init+0x2a4>)
    c6a4:	58e3      	ldr	r3, [r4, r3]
    c6a6:	4798      	blx	r3
    c6a8:	1d3b      	adds	r3, r7, #4
    c6aa:	0019      	movs	r1, r3
    c6ac:	2028      	movs	r0, #40	; 0x28
    c6ae:	4b15      	ldr	r3, [pc, #84]	; (c704 <system_board_init+0x2a4>)
    c6b0:	58e3      	ldr	r3, [r4, r3]
    c6b2:	4798      	blx	r3
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    c6b4:	1d3b      	adds	r3, r7, #4
    c6b6:	2201      	movs	r2, #1
    c6b8:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    c6ba:	1d3b      	adds	r3, r7, #4
    c6bc:	2200      	movs	r2, #0
    c6be:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    c6c0:	1d3b      	adds	r3, r7, #4
    c6c2:	2200      	movs	r2, #0
    c6c4:	709a      	strb	r2, [r3, #2]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
    c6c6:	2100      	movs	r1, #0
    c6c8:	201b      	movs	r0, #27
    c6ca:	4b0f      	ldr	r3, [pc, #60]	; (c708 <system_board_init+0x2a8>)
    c6cc:	447b      	add	r3, pc
    c6ce:	4798      	blx	r3
    c6d0:	2100      	movs	r1, #0
    c6d2:	201c      	movs	r0, #28
    c6d4:	4b0d      	ldr	r3, [pc, #52]	; (c70c <system_board_init+0x2ac>)
    c6d6:	447b      	add	r3, pc
    c6d8:	4798      	blx	r3
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    c6da:	1d3b      	adds	r3, r7, #4
    c6dc:	0019      	movs	r1, r3
    c6de:	201b      	movs	r0, #27
    c6e0:	4b08      	ldr	r3, [pc, #32]	; (c704 <system_board_init+0x2a4>)
    c6e2:	58e3      	ldr	r3, [r4, r3]
    c6e4:	4798      	blx	r3
    c6e6:	1d3b      	adds	r3, r7, #4
    c6e8:	0019      	movs	r1, r3
    c6ea:	201c      	movs	r0, #28
    c6ec:	4b05      	ldr	r3, [pc, #20]	; (c704 <system_board_init+0x2a4>)
    c6ee:	58e3      	ldr	r3, [r4, r3]
    c6f0:	4798      	blx	r3
	
    c6f2:	46c0      	nop			; (mov r8, r8)
    c6f4:	46bd      	mov	sp, r7
    c6f6:	b003      	add	sp, #12
    c6f8:	bd90      	pop	{r4, r7, pc}
    c6fa:	46c0      	nop			; (mov r8, r8)
    c6fc:	00005968 	.word	0x00005968
    c700:	ffffff75 	.word	0xffffff75
    c704:	00000238 	.word	0x00000238
    c708:	fffffd3d 	.word	0xfffffd3d
    c70c:	fffffd33 	.word	0xfffffd33

0000c710 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    c710:	b580      	push	{r7, lr}
    c712:	b082      	sub	sp, #8
    c714:	af00      	add	r7, sp, #0
    c716:	4a14      	ldr	r2, [pc, #80]	; (c768 <cpu_irq_enter_critical+0x58>)
    c718:	447a      	add	r2, pc
	if (cpu_irq_critical_section_counter == 0) {
    c71a:	4b14      	ldr	r3, [pc, #80]	; (c76c <cpu_irq_enter_critical+0x5c>)
    c71c:	447b      	add	r3, pc
    c71e:	681b      	ldr	r3, [r3, #0]
    c720:	2b00      	cmp	r3, #0
    c722:	d115      	bne.n	c750 <cpu_irq_enter_critical+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c724:	f3ef 8310 	mrs	r3, PRIMASK
    c728:	607b      	str	r3, [r7, #4]
  return(result);
    c72a:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    c72c:	2b00      	cmp	r3, #0
    c72e:	d10b      	bne.n	c748 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
    c730:	b672      	cpsid	i
    c732:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    c736:	4b0e      	ldr	r3, [pc, #56]	; (c770 <cpu_irq_enter_critical+0x60>)
    c738:	58d3      	ldr	r3, [r2, r3]
    c73a:	2200      	movs	r2, #0
    c73c:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    c73e:	4b0d      	ldr	r3, [pc, #52]	; (c774 <cpu_irq_enter_critical+0x64>)
    c740:	447b      	add	r3, pc
    c742:	2201      	movs	r2, #1
    c744:	701a      	strb	r2, [r3, #0]
    c746:	e003      	b.n	c750 <cpu_irq_enter_critical+0x40>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    c748:	4b0b      	ldr	r3, [pc, #44]	; (c778 <cpu_irq_enter_critical+0x68>)
    c74a:	447b      	add	r3, pc
    c74c:	2200      	movs	r2, #0
    c74e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    c750:	4b0a      	ldr	r3, [pc, #40]	; (c77c <cpu_irq_enter_critical+0x6c>)
    c752:	447b      	add	r3, pc
    c754:	681b      	ldr	r3, [r3, #0]
    c756:	1c5a      	adds	r2, r3, #1
    c758:	4b09      	ldr	r3, [pc, #36]	; (c780 <cpu_irq_enter_critical+0x70>)
    c75a:	447b      	add	r3, pc
    c75c:	601a      	str	r2, [r3, #0]
}
    c75e:	46c0      	nop			; (mov r8, r8)
    c760:	46bd      	mov	sp, r7
    c762:	b002      	add	sp, #8
    c764:	bd80      	pop	{r7, pc}
    c766:	46c0      	nop			; (mov r8, r8)
    c768:	000056b8 	.word	0x000056b8
    c76c:	1fff3f18 	.word	0x1fff3f18
    c770:	000000ec 	.word	0x000000ec
    c774:	1fff3ef8 	.word	0x1fff3ef8
    c778:	1fff3eee 	.word	0x1fff3eee
    c77c:	1fff3ee2 	.word	0x1fff3ee2
    c780:	1fff3eda 	.word	0x1fff3eda

0000c784 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    c784:	b580      	push	{r7, lr}
    c786:	af00      	add	r7, sp, #0
    c788:	4a0e      	ldr	r2, [pc, #56]	; (c7c4 <cpu_irq_leave_critical+0x40>)
    c78a:	447a      	add	r2, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    c78c:	4b0e      	ldr	r3, [pc, #56]	; (c7c8 <cpu_irq_leave_critical+0x44>)
    c78e:	447b      	add	r3, pc
    c790:	681b      	ldr	r3, [r3, #0]
    c792:	1e59      	subs	r1, r3, #1
    c794:	4b0d      	ldr	r3, [pc, #52]	; (c7cc <cpu_irq_leave_critical+0x48>)
    c796:	447b      	add	r3, pc
    c798:	6019      	str	r1, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    c79a:	4b0d      	ldr	r3, [pc, #52]	; (c7d0 <cpu_irq_leave_critical+0x4c>)
    c79c:	447b      	add	r3, pc
    c79e:	681b      	ldr	r3, [r3, #0]
    c7a0:	2b00      	cmp	r3, #0
    c7a2:	d10c      	bne.n	c7be <cpu_irq_leave_critical+0x3a>
    c7a4:	4b0b      	ldr	r3, [pc, #44]	; (c7d4 <cpu_irq_leave_critical+0x50>)
    c7a6:	447b      	add	r3, pc
    c7a8:	781b      	ldrb	r3, [r3, #0]
    c7aa:	b2db      	uxtb	r3, r3
    c7ac:	2b00      	cmp	r3, #0
    c7ae:	d006      	beq.n	c7be <cpu_irq_leave_critical+0x3a>
		cpu_irq_enable();
    c7b0:	4b09      	ldr	r3, [pc, #36]	; (c7d8 <cpu_irq_leave_critical+0x54>)
    c7b2:	58d3      	ldr	r3, [r2, r3]
    c7b4:	2201      	movs	r2, #1
    c7b6:	701a      	strb	r2, [r3, #0]
    c7b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c7bc:	b662      	cpsie	i
	}
}
    c7be:	46c0      	nop			; (mov r8, r8)
    c7c0:	46bd      	mov	sp, r7
    c7c2:	bd80      	pop	{r7, pc}
    c7c4:	00005646 	.word	0x00005646
    c7c8:	1fff3ea6 	.word	0x1fff3ea6
    c7cc:	1fff3e9e 	.word	0x1fff3e9e
    c7d0:	1fff3e98 	.word	0x1fff3e98
    c7d4:	1fff3e92 	.word	0x1fff3e92
    c7d8:	000000ec 	.word	0x000000ec

0000c7dc <system_gclk_gen_get_config_defaults>:
{
    c7dc:	b580      	push	{r7, lr}
    c7de:	b082      	sub	sp, #8
    c7e0:	af00      	add	r7, sp, #0
    c7e2:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    c7e4:	687b      	ldr	r3, [r7, #4]
    c7e6:	2201      	movs	r2, #1
    c7e8:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    c7ea:	687b      	ldr	r3, [r7, #4]
    c7ec:	2200      	movs	r2, #0
    c7ee:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    c7f0:	687b      	ldr	r3, [r7, #4]
    c7f2:	2206      	movs	r2, #6
    c7f4:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    c7f6:	687b      	ldr	r3, [r7, #4]
    c7f8:	2200      	movs	r2, #0
    c7fa:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    c7fc:	687b      	ldr	r3, [r7, #4]
    c7fe:	2200      	movs	r2, #0
    c800:	725a      	strb	r2, [r3, #9]
}
    c802:	46c0      	nop			; (mov r8, r8)
    c804:	46bd      	mov	sp, r7
    c806:	b002      	add	sp, #8
    c808:	bd80      	pop	{r7, pc}

0000c80a <system_gclk_chan_get_config_defaults>:
{
    c80a:	b580      	push	{r7, lr}
    c80c:	b082      	sub	sp, #8
    c80e:	af00      	add	r7, sp, #0
    c810:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    c812:	687b      	ldr	r3, [r7, #4]
    c814:	2200      	movs	r2, #0
    c816:	701a      	strb	r2, [r3, #0]
}
    c818:	46c0      	nop			; (mov r8, r8)
    c81a:	46bd      	mov	sp, r7
    c81c:	b002      	add	sp, #8
    c81e:	bd80      	pop	{r7, pc}

0000c820 <system_clock_source_xosc32k_get_config_defaults>:
{
    c820:	b580      	push	{r7, lr}
    c822:	b082      	sub	sp, #8
    c824:	af00      	add	r7, sp, #0
    c826:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    c828:	687b      	ldr	r3, [r7, #4]
    c82a:	2200      	movs	r2, #0
    c82c:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    c82e:	687b      	ldr	r3, [r7, #4]
    c830:	2204      	movs	r2, #4
    c832:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    c834:	687b      	ldr	r3, [r7, #4]
    c836:	2200      	movs	r2, #0
    c838:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    c83a:	687b      	ldr	r3, [r7, #4]
    c83c:	2280      	movs	r2, #128	; 0x80
    c83e:	0212      	lsls	r2, r2, #8
    c840:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    c842:	687b      	ldr	r3, [r7, #4]
    c844:	2200      	movs	r2, #0
    c846:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    c848:	687b      	ldr	r3, [r7, #4]
    c84a:	2201      	movs	r2, #1
    c84c:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    c84e:	687b      	ldr	r3, [r7, #4]
    c850:	2200      	movs	r2, #0
    c852:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    c854:	687b      	ldr	r3, [r7, #4]
    c856:	2201      	movs	r2, #1
    c858:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    c85a:	687b      	ldr	r3, [r7, #4]
    c85c:	2200      	movs	r2, #0
    c85e:	739a      	strb	r2, [r3, #14]
}
    c860:	46c0      	nop			; (mov r8, r8)
    c862:	46bd      	mov	sp, r7
    c864:	b002      	add	sp, #8
    c866:	bd80      	pop	{r7, pc}

0000c868 <system_clock_source_osc8m_get_config_defaults>:
{
    c868:	b580      	push	{r7, lr}
    c86a:	b082      	sub	sp, #8
    c86c:	af00      	add	r7, sp, #0
    c86e:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    c870:	687b      	ldr	r3, [r7, #4]
    c872:	2203      	movs	r2, #3
    c874:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    c876:	687b      	ldr	r3, [r7, #4]
    c878:	2200      	movs	r2, #0
    c87a:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    c87c:	687b      	ldr	r3, [r7, #4]
    c87e:	2201      	movs	r2, #1
    c880:	709a      	strb	r2, [r3, #2]
}
    c882:	46c0      	nop			; (mov r8, r8)
    c884:	46bd      	mov	sp, r7
    c886:	b002      	add	sp, #8
    c888:	bd80      	pop	{r7, pc}

0000c88a <system_clock_source_dfll_get_config_defaults>:
{
    c88a:	b580      	push	{r7, lr}
    c88c:	b082      	sub	sp, #8
    c88e:	af00      	add	r7, sp, #0
    c890:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    c892:	687b      	ldr	r3, [r7, #4]
    c894:	2200      	movs	r2, #0
    c896:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    c898:	687b      	ldr	r3, [r7, #4]
    c89a:	2200      	movs	r2, #0
    c89c:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    c89e:	687b      	ldr	r3, [r7, #4]
    c8a0:	2200      	movs	r2, #0
    c8a2:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    c8a4:	687b      	ldr	r3, [r7, #4]
    c8a6:	2200      	movs	r2, #0
    c8a8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    c8aa:	687b      	ldr	r3, [r7, #4]
    c8ac:	2200      	movs	r2, #0
    c8ae:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    c8b0:	687b      	ldr	r3, [r7, #4]
    c8b2:	2201      	movs	r2, #1
    c8b4:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    c8b6:	687b      	ldr	r3, [r7, #4]
    c8b8:	2207      	movs	r2, #7
    c8ba:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    c8bc:	687b      	ldr	r3, [r7, #4]
    c8be:	223f      	movs	r2, #63	; 0x3f
    c8c0:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    c8c2:	687b      	ldr	r3, [r7, #4]
    c8c4:	2201      	movs	r2, #1
    c8c6:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    c8c8:	687b      	ldr	r3, [r7, #4]
    c8ca:	2201      	movs	r2, #1
    c8cc:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    c8ce:	687b      	ldr	r3, [r7, #4]
    c8d0:	2206      	movs	r2, #6
    c8d2:	821a      	strh	r2, [r3, #16]
}
    c8d4:	46c0      	nop			; (mov r8, r8)
    c8d6:	46bd      	mov	sp, r7
    c8d8:	b002      	add	sp, #8
    c8da:	bd80      	pop	{r7, pc}

0000c8dc <system_cpu_clock_set_divider>:
{
    c8dc:	b580      	push	{r7, lr}
    c8de:	b082      	sub	sp, #8
    c8e0:	af00      	add	r7, sp, #0
    c8e2:	0002      	movs	r2, r0
    c8e4:	1dfb      	adds	r3, r7, #7
    c8e6:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    c8e8:	4a03      	ldr	r2, [pc, #12]	; (c8f8 <system_cpu_clock_set_divider+0x1c>)
    c8ea:	1dfb      	adds	r3, r7, #7
    c8ec:	781b      	ldrb	r3, [r3, #0]
    c8ee:	7213      	strb	r3, [r2, #8]
}
    c8f0:	46c0      	nop			; (mov r8, r8)
    c8f2:	46bd      	mov	sp, r7
    c8f4:	b002      	add	sp, #8
    c8f6:	bd80      	pop	{r7, pc}
    c8f8:	40000400 	.word	0x40000400

0000c8fc <system_apb_clock_set_divider>:
{
    c8fc:	b580      	push	{r7, lr}
    c8fe:	b082      	sub	sp, #8
    c900:	af00      	add	r7, sp, #0
    c902:	0002      	movs	r2, r0
    c904:	1dfb      	adds	r3, r7, #7
    c906:	701a      	strb	r2, [r3, #0]
    c908:	1dbb      	adds	r3, r7, #6
    c90a:	1c0a      	adds	r2, r1, #0
    c90c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    c90e:	1dfb      	adds	r3, r7, #7
    c910:	781b      	ldrb	r3, [r3, #0]
    c912:	2b01      	cmp	r3, #1
    c914:	d008      	beq.n	c928 <system_apb_clock_set_divider+0x2c>
    c916:	2b02      	cmp	r3, #2
    c918:	d00b      	beq.n	c932 <system_apb_clock_set_divider+0x36>
    c91a:	2b00      	cmp	r3, #0
    c91c:	d10e      	bne.n	c93c <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    c91e:	4a0b      	ldr	r2, [pc, #44]	; (c94c <system_apb_clock_set_divider+0x50>)
    c920:	1dbb      	adds	r3, r7, #6
    c922:	781b      	ldrb	r3, [r3, #0]
    c924:	7253      	strb	r3, [r2, #9]
			break;
    c926:	e00b      	b.n	c940 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    c928:	4a08      	ldr	r2, [pc, #32]	; (c94c <system_apb_clock_set_divider+0x50>)
    c92a:	1dbb      	adds	r3, r7, #6
    c92c:	781b      	ldrb	r3, [r3, #0]
    c92e:	7293      	strb	r3, [r2, #10]
			break;
    c930:	e006      	b.n	c940 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    c932:	4a06      	ldr	r2, [pc, #24]	; (c94c <system_apb_clock_set_divider+0x50>)
    c934:	1dbb      	adds	r3, r7, #6
    c936:	781b      	ldrb	r3, [r3, #0]
    c938:	72d3      	strb	r3, [r2, #11]
			break;
    c93a:	e001      	b.n	c940 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    c93c:	2317      	movs	r3, #23
    c93e:	e000      	b.n	c942 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    c940:	2300      	movs	r3, #0
}
    c942:	0018      	movs	r0, r3
    c944:	46bd      	mov	sp, r7
    c946:	b002      	add	sp, #8
    c948:	bd80      	pop	{r7, pc}
    c94a:	46c0      	nop			; (mov r8, r8)
    c94c:	40000400 	.word	0x40000400

0000c950 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    c950:	b580      	push	{r7, lr}
    c952:	b082      	sub	sp, #8
    c954:	af00      	add	r7, sp, #0
    c956:	0002      	movs	r2, r0
    c958:	1dfb      	adds	r3, r7, #7
    c95a:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    c95c:	4a08      	ldr	r2, [pc, #32]	; (c980 <system_flash_set_waitstates+0x30>)
    c95e:	1dfb      	adds	r3, r7, #7
    c960:	781b      	ldrb	r3, [r3, #0]
    c962:	210f      	movs	r1, #15
    c964:	400b      	ands	r3, r1
    c966:	b2d9      	uxtb	r1, r3
    c968:	6853      	ldr	r3, [r2, #4]
    c96a:	200f      	movs	r0, #15
    c96c:	4001      	ands	r1, r0
    c96e:	0049      	lsls	r1, r1, #1
    c970:	201e      	movs	r0, #30
    c972:	4383      	bics	r3, r0
    c974:	430b      	orrs	r3, r1
    c976:	6053      	str	r3, [r2, #4]
}
    c978:	46c0      	nop			; (mov r8, r8)
    c97a:	46bd      	mov	sp, r7
    c97c:	b002      	add	sp, #8
    c97e:	bd80      	pop	{r7, pc}
    c980:	41004000 	.word	0x41004000

0000c984 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    c984:	b580      	push	{r7, lr}
    c986:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    c988:	46c0      	nop			; (mov r8, r8)
    c98a:	4b04      	ldr	r3, [pc, #16]	; (c99c <_system_dfll_wait_for_sync+0x18>)
    c98c:	68db      	ldr	r3, [r3, #12]
    c98e:	2210      	movs	r2, #16
    c990:	4013      	ands	r3, r2
    c992:	d0fa      	beq.n	c98a <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    c994:	46c0      	nop			; (mov r8, r8)
    c996:	46bd      	mov	sp, r7
    c998:	bd80      	pop	{r7, pc}
    c99a:	46c0      	nop			; (mov r8, r8)
    c99c:	40000800 	.word	0x40000800

0000c9a0 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    c9a0:	b580      	push	{r7, lr}
    c9a2:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    c9a4:	4b0f      	ldr	r3, [pc, #60]	; (c9e4 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    c9a6:	2202      	movs	r2, #2
    c9a8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    c9aa:	4b0f      	ldr	r3, [pc, #60]	; (c9e8 <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    c9ac:	447b      	add	r3, pc
    c9ae:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    c9b0:	4a0c      	ldr	r2, [pc, #48]	; (c9e4 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    c9b2:	4b0e      	ldr	r3, [pc, #56]	; (c9ec <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    c9b4:	447b      	add	r3, pc
    c9b6:	689b      	ldr	r3, [r3, #8]
    c9b8:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    c9ba:	4a0a      	ldr	r2, [pc, #40]	; (c9e4 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    c9bc:	4b0c      	ldr	r3, [pc, #48]	; (c9f0 <_system_clock_source_dfll_set_config_errata_9905+0x50>)
    c9be:	447b      	add	r3, pc
    c9c0:	685b      	ldr	r3, [r3, #4]
    c9c2:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    c9c4:	4b07      	ldr	r3, [pc, #28]	; (c9e4 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    c9c6:	2200      	movs	r2, #0
    c9c8:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    c9ca:	4b0a      	ldr	r3, [pc, #40]	; (c9f4 <_system_clock_source_dfll_set_config_errata_9905+0x54>)
    c9cc:	447b      	add	r3, pc
    c9ce:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    c9d0:	4a04      	ldr	r2, [pc, #16]	; (c9e4 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    c9d2:	4b09      	ldr	r3, [pc, #36]	; (c9f8 <_system_clock_source_dfll_set_config_errata_9905+0x58>)
    c9d4:	447b      	add	r3, pc
    c9d6:	681b      	ldr	r3, [r3, #0]
    c9d8:	b29b      	uxth	r3, r3
    c9da:	8493      	strh	r3, [r2, #36]	; 0x24
}
    c9dc:	46c0      	nop			; (mov r8, r8)
    c9de:	46bd      	mov	sp, r7
    c9e0:	bd80      	pop	{r7, pc}
    c9e2:	46c0      	nop			; (mov r8, r8)
    c9e4:	40000800 	.word	0x40000800
    c9e8:	ffffffd5 	.word	0xffffffd5
    c9ec:	1fff3c88 	.word	0x1fff3c88
    c9f0:	1fff3c7e 	.word	0x1fff3c7e
    c9f4:	ffffffb5 	.word	0xffffffb5
    c9f8:	1fff3c68 	.word	0x1fff3c68

0000c9fc <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    c9fc:	b590      	push	{r4, r7, lr}
    c9fe:	b083      	sub	sp, #12
    ca00:	af00      	add	r7, sp, #0
    ca02:	0002      	movs	r2, r0
    ca04:	1dfb      	adds	r3, r7, #7
    ca06:	701a      	strb	r2, [r3, #0]
    ca08:	4c32      	ldr	r4, [pc, #200]	; (cad4 <system_clock_source_get_hz+0xd8>)
    ca0a:	447c      	add	r4, pc
	switch (clock_source) {
    ca0c:	1dfb      	adds	r3, r7, #7
    ca0e:	781b      	ldrb	r3, [r3, #0]
    ca10:	2b08      	cmp	r3, #8
    ca12:	d859      	bhi.n	cac8 <system_clock_source_get_hz+0xcc>
    ca14:	0018      	movs	r0, r3
    ca16:	f003 fe2b 	bl	10670 <__gnu_thumb1_case_si>
    ca1a:	46c0      	nop			; (mov r8, r8)
    ca1c:	00000024 	.word	0x00000024
    ca20:	000000ac 	.word	0x000000ac
    ca24:	000000ac 	.word	0x000000ac
    ca28:	00000044 	.word	0x00000044
    ca2c:	0000003e 	.word	0x0000003e
    ca30:	0000004a 	.word	0x0000004a
    ca34:	0000002c 	.word	0x0000002c
    ca38:	00000052 	.word	0x00000052
    ca3c:	00000090 	.word	0x00000090
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    ca40:	4b25      	ldr	r3, [pc, #148]	; (cad8 <system_clock_source_get_hz+0xdc>)
    ca42:	447b      	add	r3, pc
    ca44:	691b      	ldr	r3, [r3, #16]
    ca46:	e040      	b.n	caca <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    ca48:	4b24      	ldr	r3, [pc, #144]	; (cadc <system_clock_source_get_hz+0xe0>)
    ca4a:	6a1b      	ldr	r3, [r3, #32]
    ca4c:	059b      	lsls	r3, r3, #22
    ca4e:	0f9b      	lsrs	r3, r3, #30
    ca50:	b2db      	uxtb	r3, r3
    ca52:	001a      	movs	r2, r3
    ca54:	4b22      	ldr	r3, [pc, #136]	; (cae0 <system_clock_source_get_hz+0xe4>)
    ca56:	40d3      	lsrs	r3, r2
    ca58:	e037      	b.n	caca <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    ca5a:	2380      	movs	r3, #128	; 0x80
    ca5c:	021b      	lsls	r3, r3, #8
    ca5e:	e034      	b.n	caca <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    ca60:	2380      	movs	r3, #128	; 0x80
    ca62:	021b      	lsls	r3, r3, #8
    ca64:	e031      	b.n	caca <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    ca66:	4b1f      	ldr	r3, [pc, #124]	; (cae4 <system_clock_source_get_hz+0xe8>)
    ca68:	447b      	add	r3, pc
    ca6a:	695b      	ldr	r3, [r3, #20]
    ca6c:	e02d      	b.n	caca <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    ca6e:	4b1e      	ldr	r3, [pc, #120]	; (cae8 <system_clock_source_get_hz+0xec>)
    ca70:	447b      	add	r3, pc
    ca72:	681b      	ldr	r3, [r3, #0]
    ca74:	2202      	movs	r2, #2
    ca76:	4013      	ands	r3, r2
    ca78:	d101      	bne.n	ca7e <system_clock_source_get_hz+0x82>
			return 0;
    ca7a:	2300      	movs	r3, #0
    ca7c:	e025      	b.n	caca <system_clock_source_get_hz+0xce>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    ca7e:	4b1b      	ldr	r3, [pc, #108]	; (caec <system_clock_source_get_hz+0xf0>)
    ca80:	447b      	add	r3, pc
    ca82:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    ca84:	4b1a      	ldr	r3, [pc, #104]	; (caf0 <system_clock_source_get_hz+0xf4>)
    ca86:	447b      	add	r3, pc
    ca88:	681b      	ldr	r3, [r3, #0]
    ca8a:	2204      	movs	r2, #4
    ca8c:	4013      	ands	r3, r2
    ca8e:	d00b      	beq.n	caa8 <system_clock_source_get_hz+0xac>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    ca90:	2000      	movs	r0, #0
    ca92:	4b18      	ldr	r3, [pc, #96]	; (caf4 <system_clock_source_get_hz+0xf8>)
    ca94:	58e3      	ldr	r3, [r4, r3]
    ca96:	4798      	blx	r3
    ca98:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    ca9a:	4b17      	ldr	r3, [pc, #92]	; (caf8 <system_clock_source_get_hz+0xfc>)
    ca9c:	447b      	add	r3, pc
    ca9e:	689b      	ldr	r3, [r3, #8]
    caa0:	041b      	lsls	r3, r3, #16
    caa2:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    caa4:	4353      	muls	r3, r2
    caa6:	e010      	b.n	caca <system_clock_source_get_hz+0xce>
		}

		return 48000000UL;
    caa8:	4b14      	ldr	r3, [pc, #80]	; (cafc <system_clock_source_get_hz+0x100>)
    caaa:	e00e      	b.n	caca <system_clock_source_get_hz+0xce>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    caac:	4a0b      	ldr	r2, [pc, #44]	; (cadc <system_clock_source_get_hz+0xe0>)
    caae:	2350      	movs	r3, #80	; 0x50
    cab0:	5cd3      	ldrb	r3, [r2, r3]
    cab2:	b2db      	uxtb	r3, r3
    cab4:	001a      	movs	r2, r3
    cab6:	2304      	movs	r3, #4
    cab8:	4013      	ands	r3, r2
    caba:	d101      	bne.n	cac0 <system_clock_source_get_hz+0xc4>
			return 0;
    cabc:	2300      	movs	r3, #0
    cabe:	e004      	b.n	caca <system_clock_source_get_hz+0xce>
		}

		return _system_clock_inst.dpll.frequency;
    cac0:	4b0f      	ldr	r3, [pc, #60]	; (cb00 <system_clock_source_get_hz+0x104>)
    cac2:	447b      	add	r3, pc
    cac4:	68db      	ldr	r3, [r3, #12]
    cac6:	e000      	b.n	caca <system_clock_source_get_hz+0xce>
#endif

	default:
		return 0;
    cac8:	2300      	movs	r3, #0
	}
}
    caca:	0018      	movs	r0, r3
    cacc:	46bd      	mov	sp, r7
    cace:	b003      	add	sp, #12
    cad0:	bd90      	pop	{r4, r7, pc}
    cad2:	46c0      	nop			; (mov r8, r8)
    cad4:	000053c6 	.word	0x000053c6
    cad8:	1fff3bfa 	.word	0x1fff3bfa
    cadc:	40000800 	.word	0x40000800
    cae0:	007a1200 	.word	0x007a1200
    cae4:	1fff3bd4 	.word	0x1fff3bd4
    cae8:	1fff3bcc 	.word	0x1fff3bcc
    caec:	ffffff01 	.word	0xffffff01
    caf0:	1fff3bb6 	.word	0x1fff3bb6
    caf4:	0000019c 	.word	0x0000019c
    caf8:	1fff3ba0 	.word	0x1fff3ba0
    cafc:	02dc6c00 	.word	0x02dc6c00
    cb00:	1fff3b7a 	.word	0x1fff3b7a

0000cb04 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    cb04:	b580      	push	{r7, lr}
    cb06:	b084      	sub	sp, #16
    cb08:	af00      	add	r7, sp, #0
    cb0a:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    cb0c:	4b1a      	ldr	r3, [pc, #104]	; (cb78 <system_clock_source_osc8m_set_config+0x74>)
    cb0e:	6a1b      	ldr	r3, [r3, #32]
    cb10:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    cb12:	687b      	ldr	r3, [r7, #4]
    cb14:	781b      	ldrb	r3, [r3, #0]
    cb16:	1c1a      	adds	r2, r3, #0
    cb18:	2303      	movs	r3, #3
    cb1a:	4013      	ands	r3, r2
    cb1c:	b2da      	uxtb	r2, r3
    cb1e:	230d      	movs	r3, #13
    cb20:	18fb      	adds	r3, r7, r3
    cb22:	2103      	movs	r1, #3
    cb24:	400a      	ands	r2, r1
    cb26:	0010      	movs	r0, r2
    cb28:	781a      	ldrb	r2, [r3, #0]
    cb2a:	2103      	movs	r1, #3
    cb2c:	438a      	bics	r2, r1
    cb2e:	1c11      	adds	r1, r2, #0
    cb30:	1c02      	adds	r2, r0, #0
    cb32:	430a      	orrs	r2, r1
    cb34:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    cb36:	687b      	ldr	r3, [r7, #4]
    cb38:	789a      	ldrb	r2, [r3, #2]
    cb3a:	230c      	movs	r3, #12
    cb3c:	18fb      	adds	r3, r7, r3
    cb3e:	01d0      	lsls	r0, r2, #7
    cb40:	781a      	ldrb	r2, [r3, #0]
    cb42:	217f      	movs	r1, #127	; 0x7f
    cb44:	400a      	ands	r2, r1
    cb46:	1c11      	adds	r1, r2, #0
    cb48:	1c02      	adds	r2, r0, #0
    cb4a:	430a      	orrs	r2, r1
    cb4c:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    cb4e:	687b      	ldr	r3, [r7, #4]
    cb50:	785a      	ldrb	r2, [r3, #1]
    cb52:	230c      	movs	r3, #12
    cb54:	18fb      	adds	r3, r7, r3
    cb56:	2101      	movs	r1, #1
    cb58:	400a      	ands	r2, r1
    cb5a:	0190      	lsls	r0, r2, #6
    cb5c:	781a      	ldrb	r2, [r3, #0]
    cb5e:	2140      	movs	r1, #64	; 0x40
    cb60:	438a      	bics	r2, r1
    cb62:	1c11      	adds	r1, r2, #0
    cb64:	1c02      	adds	r2, r0, #0
    cb66:	430a      	orrs	r2, r1
    cb68:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    cb6a:	4b03      	ldr	r3, [pc, #12]	; (cb78 <system_clock_source_osc8m_set_config+0x74>)
    cb6c:	68fa      	ldr	r2, [r7, #12]
    cb6e:	621a      	str	r2, [r3, #32]
}
    cb70:	46c0      	nop			; (mov r8, r8)
    cb72:	46bd      	mov	sp, r7
    cb74:	b004      	add	sp, #16
    cb76:	bd80      	pop	{r7, pc}
    cb78:	40000800 	.word	0x40000800

0000cb7c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    cb7c:	b580      	push	{r7, lr}
    cb7e:	b084      	sub	sp, #16
    cb80:	af00      	add	r7, sp, #0
    cb82:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    cb84:	4a43      	ldr	r2, [pc, #268]	; (cc94 <system_clock_source_xosc32k_set_config+0x118>)
    cb86:	230c      	movs	r3, #12
    cb88:	18fb      	adds	r3, r7, r3
    cb8a:	8a92      	ldrh	r2, [r2, #20]
    cb8c:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    cb8e:	687b      	ldr	r3, [r7, #4]
    cb90:	785b      	ldrb	r3, [r3, #1]
    cb92:	1c1a      	adds	r2, r3, #0
    cb94:	2307      	movs	r3, #7
    cb96:	4013      	ands	r3, r2
    cb98:	b2da      	uxtb	r2, r3
    cb9a:	230c      	movs	r3, #12
    cb9c:	18fb      	adds	r3, r7, r3
    cb9e:	2107      	movs	r1, #7
    cba0:	400a      	ands	r2, r1
    cba2:	0010      	movs	r0, r2
    cba4:	785a      	ldrb	r2, [r3, #1]
    cba6:	2107      	movs	r1, #7
    cba8:	438a      	bics	r2, r1
    cbaa:	1c11      	adds	r1, r2, #0
    cbac:	1c02      	adds	r2, r0, #0
    cbae:	430a      	orrs	r2, r1
    cbb0:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    cbb2:	687b      	ldr	r3, [r7, #4]
    cbb4:	781b      	ldrb	r3, [r3, #0]
    cbb6:	2b00      	cmp	r3, #0
    cbb8:	d106      	bne.n	cbc8 <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    cbba:	230c      	movs	r3, #12
    cbbc:	18fb      	adds	r3, r7, r3
    cbbe:	781a      	ldrb	r2, [r3, #0]
    cbc0:	2104      	movs	r1, #4
    cbc2:	430a      	orrs	r2, r1
    cbc4:	701a      	strb	r2, [r3, #0]
    cbc6:	e005      	b.n	cbd4 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    cbc8:	230c      	movs	r3, #12
    cbca:	18fb      	adds	r3, r7, r3
    cbcc:	781a      	ldrb	r2, [r3, #0]
    cbce:	2104      	movs	r1, #4
    cbd0:	438a      	bics	r2, r1
    cbd2:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    cbd4:	687b      	ldr	r3, [r7, #4]
    cbd6:	789a      	ldrb	r2, [r3, #2]
    cbd8:	230c      	movs	r3, #12
    cbda:	18fb      	adds	r3, r7, r3
    cbdc:	2101      	movs	r1, #1
    cbde:	400a      	ands	r2, r1
    cbe0:	0150      	lsls	r0, r2, #5
    cbe2:	781a      	ldrb	r2, [r3, #0]
    cbe4:	2120      	movs	r1, #32
    cbe6:	438a      	bics	r2, r1
    cbe8:	1c11      	adds	r1, r2, #0
    cbea:	1c02      	adds	r2, r0, #0
    cbec:	430a      	orrs	r2, r1
    cbee:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    cbf0:	687b      	ldr	r3, [r7, #4]
    cbf2:	78da      	ldrb	r2, [r3, #3]
    cbf4:	230c      	movs	r3, #12
    cbf6:	18fb      	adds	r3, r7, r3
    cbf8:	2101      	movs	r1, #1
    cbfa:	400a      	ands	r2, r1
    cbfc:	0110      	lsls	r0, r2, #4
    cbfe:	781a      	ldrb	r2, [r3, #0]
    cc00:	2110      	movs	r1, #16
    cc02:	438a      	bics	r2, r1
    cc04:	1c11      	adds	r1, r2, #0
    cc06:	1c02      	adds	r2, r0, #0
    cc08:	430a      	orrs	r2, r1
    cc0a:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    cc0c:	687b      	ldr	r3, [r7, #4]
    cc0e:	791a      	ldrb	r2, [r3, #4]
    cc10:	230c      	movs	r3, #12
    cc12:	18fb      	adds	r3, r7, r3
    cc14:	2101      	movs	r1, #1
    cc16:	400a      	ands	r2, r1
    cc18:	00d0      	lsls	r0, r2, #3
    cc1a:	781a      	ldrb	r2, [r3, #0]
    cc1c:	2108      	movs	r1, #8
    cc1e:	438a      	bics	r2, r1
    cc20:	1c11      	adds	r1, r2, #0
    cc22:	1c02      	adds	r2, r0, #0
    cc24:	430a      	orrs	r2, r1
    cc26:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    cc28:	687b      	ldr	r3, [r7, #4]
    cc2a:	7b5a      	ldrb	r2, [r3, #13]
    cc2c:	230c      	movs	r3, #12
    cc2e:	18fb      	adds	r3, r7, r3
    cc30:	01d0      	lsls	r0, r2, #7
    cc32:	781a      	ldrb	r2, [r3, #0]
    cc34:	217f      	movs	r1, #127	; 0x7f
    cc36:	400a      	ands	r2, r1
    cc38:	1c11      	adds	r1, r2, #0
    cc3a:	1c02      	adds	r2, r0, #0
    cc3c:	430a      	orrs	r2, r1
    cc3e:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    cc40:	687b      	ldr	r3, [r7, #4]
    cc42:	7b1a      	ldrb	r2, [r3, #12]
    cc44:	230c      	movs	r3, #12
    cc46:	18fb      	adds	r3, r7, r3
    cc48:	2101      	movs	r1, #1
    cc4a:	400a      	ands	r2, r1
    cc4c:	0190      	lsls	r0, r2, #6
    cc4e:	781a      	ldrb	r2, [r3, #0]
    cc50:	2140      	movs	r1, #64	; 0x40
    cc52:	438a      	bics	r2, r1
    cc54:	1c11      	adds	r1, r2, #0
    cc56:	1c02      	adds	r2, r0, #0
    cc58:	430a      	orrs	r2, r1
    cc5a:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    cc5c:	687b      	ldr	r3, [r7, #4]
    cc5e:	7b9a      	ldrb	r2, [r3, #14]
    cc60:	230c      	movs	r3, #12
    cc62:	18fb      	adds	r3, r7, r3
    cc64:	2101      	movs	r1, #1
    cc66:	400a      	ands	r2, r1
    cc68:	0110      	lsls	r0, r2, #4
    cc6a:	785a      	ldrb	r2, [r3, #1]
    cc6c:	2110      	movs	r1, #16
    cc6e:	438a      	bics	r2, r1
    cc70:	1c11      	adds	r1, r2, #0
    cc72:	1c02      	adds	r2, r0, #0
    cc74:	430a      	orrs	r2, r1
    cc76:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    cc78:	687b      	ldr	r3, [r7, #4]
    cc7a:	689a      	ldr	r2, [r3, #8]
    cc7c:	4b06      	ldr	r3, [pc, #24]	; (cc98 <system_clock_source_xosc32k_set_config+0x11c>)
    cc7e:	447b      	add	r3, pc
    cc80:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    cc82:	4a04      	ldr	r2, [pc, #16]	; (cc94 <system_clock_source_xosc32k_set_config+0x118>)
    cc84:	230c      	movs	r3, #12
    cc86:	18fb      	adds	r3, r7, r3
    cc88:	881b      	ldrh	r3, [r3, #0]
    cc8a:	8293      	strh	r3, [r2, #20]
}
    cc8c:	46c0      	nop			; (mov r8, r8)
    cc8e:	46bd      	mov	sp, r7
    cc90:	b004      	add	sp, #16
    cc92:	bd80      	pop	{r7, pc}
    cc94:	40000800 	.word	0x40000800
    cc98:	1fff39be 	.word	0x1fff39be

0000cc9c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    cc9c:	b580      	push	{r7, lr}
    cc9e:	b082      	sub	sp, #8
    cca0:	af00      	add	r7, sp, #0
    cca2:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    cca4:	687b      	ldr	r3, [r7, #4]
    cca6:	7a1b      	ldrb	r3, [r3, #8]
    cca8:	029b      	lsls	r3, r3, #10
    ccaa:	041b      	lsls	r3, r3, #16
    ccac:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    ccae:	687b      	ldr	r3, [r7, #4]
    ccb0:	895b      	ldrh	r3, [r3, #10]
    ccb2:	059b      	lsls	r3, r3, #22
    ccb4:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    ccb6:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    ccb8:	4b2e      	ldr	r3, [pc, #184]	; (cd74 <system_clock_source_dfll_set_config+0xd8>)
    ccba:	447b      	add	r3, pc
    ccbc:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    ccbe:	687b      	ldr	r3, [r7, #4]
    ccc0:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    ccc2:	687b      	ldr	r3, [r7, #4]
    ccc4:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    ccc6:	4313      	orrs	r3, r2
    ccc8:	b2db      	uxtb	r3, r3
    ccca:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    cccc:	687b      	ldr	r3, [r7, #4]
    ccce:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    ccd0:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    ccd2:	687a      	ldr	r2, [r7, #4]
    ccd4:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    ccd6:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    ccd8:	687b      	ldr	r3, [r7, #4]
    ccda:	785b      	ldrb	r3, [r3, #1]
    ccdc:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    ccde:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    cce0:	4b25      	ldr	r3, [pc, #148]	; (cd78 <system_clock_source_dfll_set_config+0xdc>)
    cce2:	447b      	add	r3, pc
    cce4:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    cce6:	687b      	ldr	r3, [r7, #4]
    cce8:	781b      	ldrb	r3, [r3, #0]
    ccea:	2b04      	cmp	r3, #4
    ccec:	d119      	bne.n	cd22 <system_clock_source_dfll_set_config+0x86>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    ccee:	687b      	ldr	r3, [r7, #4]
    ccf0:	7b1b      	ldrb	r3, [r3, #12]
    ccf2:	069b      	lsls	r3, r3, #26
    ccf4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    ccf6:	687b      	ldr	r3, [r7, #4]
    ccf8:	89db      	ldrh	r3, [r3, #14]
    ccfa:	041b      	lsls	r3, r3, #16
    ccfc:	0019      	movs	r1, r3
    ccfe:	4b1f      	ldr	r3, [pc, #124]	; (cd7c <system_clock_source_dfll_set_config+0xe0>)
    cd00:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    cd02:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    cd04:	687a      	ldr	r2, [r7, #4]
    cd06:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    cd08:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    cd0a:	4b1d      	ldr	r3, [pc, #116]	; (cd80 <system_clock_source_dfll_set_config+0xe4>)
    cd0c:	447b      	add	r3, pc
    cd0e:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    cd10:	4b1c      	ldr	r3, [pc, #112]	; (cd84 <system_clock_source_dfll_set_config+0xe8>)
    cd12:	447b      	add	r3, pc
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	687a      	ldr	r2, [r7, #4]
    cd18:	7812      	ldrb	r2, [r2, #0]
    cd1a:	431a      	orrs	r2, r3
    cd1c:	4b1a      	ldr	r3, [pc, #104]	; (cd88 <system_clock_source_dfll_set_config+0xec>)
    cd1e:	447b      	add	r3, pc
    cd20:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    cd22:	687b      	ldr	r3, [r7, #4]
    cd24:	781b      	ldrb	r3, [r3, #0]
    cd26:	2b20      	cmp	r3, #32
    cd28:	d11f      	bne.n	cd6a <system_clock_source_dfll_set_config+0xce>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    cd2a:	687b      	ldr	r3, [r7, #4]
    cd2c:	7b1b      	ldrb	r3, [r3, #12]
    cd2e:	069b      	lsls	r3, r3, #26
    cd30:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    cd32:	687b      	ldr	r3, [r7, #4]
    cd34:	89db      	ldrh	r3, [r3, #14]
    cd36:	041b      	lsls	r3, r3, #16
    cd38:	0019      	movs	r1, r3
    cd3a:	4b10      	ldr	r3, [pc, #64]	; (cd7c <system_clock_source_dfll_set_config+0xe0>)
    cd3c:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    cd3e:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    cd40:	687a      	ldr	r2, [r7, #4]
    cd42:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    cd44:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    cd46:	4b11      	ldr	r3, [pc, #68]	; (cd8c <system_clock_source_dfll_set_config+0xf0>)
    cd48:	447b      	add	r3, pc
    cd4a:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    cd4c:	4b10      	ldr	r3, [pc, #64]	; (cd90 <system_clock_source_dfll_set_config+0xf4>)
    cd4e:	447b      	add	r3, pc
    cd50:	681b      	ldr	r3, [r3, #0]
    cd52:	687a      	ldr	r2, [r7, #4]
    cd54:	7812      	ldrb	r2, [r2, #0]
    cd56:	2104      	movs	r1, #4
    cd58:	430a      	orrs	r2, r1
    cd5a:	b2d2      	uxtb	r2, r2
    cd5c:	4313      	orrs	r3, r2
    cd5e:	2280      	movs	r2, #128	; 0x80
    cd60:	00d2      	lsls	r2, r2, #3
    cd62:	431a      	orrs	r2, r3
    cd64:	4b0b      	ldr	r3, [pc, #44]	; (cd94 <system_clock_source_dfll_set_config+0xf8>)
    cd66:	447b      	add	r3, pc
    cd68:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    cd6a:	46c0      	nop			; (mov r8, r8)
    cd6c:	46bd      	mov	sp, r7
    cd6e:	b002      	add	sp, #8
    cd70:	bd80      	pop	{r7, pc}
    cd72:	46c0      	nop			; (mov r8, r8)
    cd74:	1fff3982 	.word	0x1fff3982
    cd78:	1fff395a 	.word	0x1fff395a
    cd7c:	03ff0000 	.word	0x03ff0000
    cd80:	1fff3930 	.word	0x1fff3930
    cd84:	1fff392a 	.word	0x1fff392a
    cd88:	1fff391e 	.word	0x1fff391e
    cd8c:	1fff38f4 	.word	0x1fff38f4
    cd90:	1fff38ee 	.word	0x1fff38ee
    cd94:	1fff38d6 	.word	0x1fff38d6

0000cd98 <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    cd98:	b580      	push	{r7, lr}
    cd9a:	b082      	sub	sp, #8
    cd9c:	af00      	add	r7, sp, #0
    cd9e:	0002      	movs	r2, r0
    cda0:	1dfb      	adds	r3, r7, #7
    cda2:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    cda4:	1dfb      	adds	r3, r7, #7
    cda6:	781b      	ldrb	r3, [r3, #0]
    cda8:	2b08      	cmp	r3, #8
    cdaa:	d84f      	bhi.n	ce4c <system_clock_source_enable+0xb4>
    cdac:	0018      	movs	r0, r3
    cdae:	f003 fc5f 	bl	10670 <__gnu_thumb1_case_si>
    cdb2:	46c0      	nop			; (mov r8, r8)
    cdb4:	00000042 	.word	0x00000042
    cdb8:	00000098 	.word	0x00000098
    cdbc:	00000098 	.word	0x00000098
    cdc0:	00000094 	.word	0x00000094
    cdc4:	00000034 	.word	0x00000034
    cdc8:	00000054 	.word	0x00000054
    cdcc:	00000024 	.word	0x00000024
    cdd0:	00000066 	.word	0x00000066
    cdd4:	0000007e 	.word	0x0000007e
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    cdd8:	4b20      	ldr	r3, [pc, #128]	; (ce5c <system_clock_source_enable+0xc4>)
    cdda:	4a20      	ldr	r2, [pc, #128]	; (ce5c <system_clock_source_enable+0xc4>)
    cddc:	6a12      	ldr	r2, [r2, #32]
    cdde:	2102      	movs	r1, #2
    cde0:	430a      	orrs	r2, r1
    cde2:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    cde4:	2300      	movs	r3, #0
    cde6:	e034      	b.n	ce52 <system_clock_source_enable+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    cde8:	4b1c      	ldr	r3, [pc, #112]	; (ce5c <system_clock_source_enable+0xc4>)
    cdea:	4a1c      	ldr	r2, [pc, #112]	; (ce5c <system_clock_source_enable+0xc4>)
    cdec:	6992      	ldr	r2, [r2, #24]
    cdee:	2102      	movs	r1, #2
    cdf0:	430a      	orrs	r2, r1
    cdf2:	619a      	str	r2, [r3, #24]
		break;
    cdf4:	e02c      	b.n	ce50 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    cdf6:	4a19      	ldr	r2, [pc, #100]	; (ce5c <system_clock_source_enable+0xc4>)
    cdf8:	4b18      	ldr	r3, [pc, #96]	; (ce5c <system_clock_source_enable+0xc4>)
    cdfa:	8a1b      	ldrh	r3, [r3, #16]
    cdfc:	b29b      	uxth	r3, r3
    cdfe:	2102      	movs	r1, #2
    ce00:	430b      	orrs	r3, r1
    ce02:	b29b      	uxth	r3, r3
    ce04:	8213      	strh	r3, [r2, #16]
		break;
    ce06:	e023      	b.n	ce50 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    ce08:	4a14      	ldr	r2, [pc, #80]	; (ce5c <system_clock_source_enable+0xc4>)
    ce0a:	4b14      	ldr	r3, [pc, #80]	; (ce5c <system_clock_source_enable+0xc4>)
    ce0c:	8a9b      	ldrh	r3, [r3, #20]
    ce0e:	b29b      	uxth	r3, r3
    ce10:	2102      	movs	r1, #2
    ce12:	430b      	orrs	r3, r1
    ce14:	b29b      	uxth	r3, r3
    ce16:	8293      	strh	r3, [r2, #20]
		break;
    ce18:	e01a      	b.n	ce50 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    ce1a:	4b11      	ldr	r3, [pc, #68]	; (ce60 <system_clock_source_enable+0xc8>)
    ce1c:	447b      	add	r3, pc
    ce1e:	681b      	ldr	r3, [r3, #0]
    ce20:	2202      	movs	r2, #2
    ce22:	431a      	orrs	r2, r3
    ce24:	4b0f      	ldr	r3, [pc, #60]	; (ce64 <system_clock_source_enable+0xcc>)
    ce26:	447b      	add	r3, pc
    ce28:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    ce2a:	4b0f      	ldr	r3, [pc, #60]	; (ce68 <system_clock_source_enable+0xd0>)
    ce2c:	447b      	add	r3, pc
    ce2e:	4798      	blx	r3
		break;
    ce30:	e00e      	b.n	ce50 <system_clock_source_enable+0xb8>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    ce32:	4a0a      	ldr	r2, [pc, #40]	; (ce5c <system_clock_source_enable+0xc4>)
    ce34:	4909      	ldr	r1, [pc, #36]	; (ce5c <system_clock_source_enable+0xc4>)
    ce36:	2344      	movs	r3, #68	; 0x44
    ce38:	5ccb      	ldrb	r3, [r1, r3]
    ce3a:	b2db      	uxtb	r3, r3
    ce3c:	2102      	movs	r1, #2
    ce3e:	430b      	orrs	r3, r1
    ce40:	b2d9      	uxtb	r1, r3
    ce42:	2344      	movs	r3, #68	; 0x44
    ce44:	54d1      	strb	r1, [r2, r3]
		break;
    ce46:	e003      	b.n	ce50 <system_clock_source_enable+0xb8>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    ce48:	2300      	movs	r3, #0
    ce4a:	e002      	b.n	ce52 <system_clock_source_enable+0xba>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    ce4c:	2317      	movs	r3, #23
    ce4e:	e000      	b.n	ce52 <system_clock_source_enable+0xba>
	}

	return STATUS_OK;
    ce50:	2300      	movs	r3, #0
}
    ce52:	0018      	movs	r0, r3
    ce54:	46bd      	mov	sp, r7
    ce56:	b002      	add	sp, #8
    ce58:	bd80      	pop	{r7, pc}
    ce5a:	46c0      	nop			; (mov r8, r8)
    ce5c:	40000800 	.word	0x40000800
    ce60:	1fff3820 	.word	0x1fff3820
    ce64:	1fff3816 	.word	0x1fff3816
    ce68:	fffffb71 	.word	0xfffffb71

0000ce6c <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    ce6c:	b580      	push	{r7, lr}
    ce6e:	b084      	sub	sp, #16
    ce70:	af00      	add	r7, sp, #0
    ce72:	0002      	movs	r2, r0
    ce74:	1dfb      	adds	r3, r7, #7
    ce76:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    ce78:	2300      	movs	r3, #0
    ce7a:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    ce7c:	1dfb      	adds	r3, r7, #7
    ce7e:	781b      	ldrb	r3, [r3, #0]
    ce80:	2b08      	cmp	r3, #8
    ce82:	d832      	bhi.n	ceea <system_clock_source_is_ready+0x7e>
    ce84:	0018      	movs	r0, r3
    ce86:	f003 fbf3 	bl	10670 <__gnu_thumb1_case_si>
    ce8a:	46c0      	nop			; (mov r8, r8)
    ce8c:	00000030 	.word	0x00000030
    ce90:	0000005e 	.word	0x0000005e
    ce94:	0000005e 	.word	0x0000005e
    ce98:	0000005a 	.word	0x0000005a
    ce9c:	0000002a 	.word	0x0000002a
    cea0:	00000036 	.word	0x00000036
    cea4:	00000024 	.word	0x00000024
    cea8:	0000003c 	.word	0x0000003c
    ceac:	00000042 	.word	0x00000042
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    ceb0:	2308      	movs	r3, #8
    ceb2:	60fb      	str	r3, [r7, #12]
		break;
    ceb4:	e01b      	b.n	ceee <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    ceb6:	2304      	movs	r3, #4
    ceb8:	60fb      	str	r3, [r7, #12]
		break;
    ceba:	e018      	b.n	ceee <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    cebc:	2301      	movs	r3, #1
    cebe:	60fb      	str	r3, [r7, #12]
		break;
    cec0:	e015      	b.n	ceee <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    cec2:	2302      	movs	r3, #2
    cec4:	60fb      	str	r3, [r7, #12]
		break;
    cec6:	e012      	b.n	ceee <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    cec8:	23d0      	movs	r3, #208	; 0xd0
    ceca:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    cecc:	e00f      	b.n	ceee <system_clock_source_is_ready+0x82>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    cece:	4a0e      	ldr	r2, [pc, #56]	; (cf08 <system_clock_source_is_ready+0x9c>)
    ced0:	2350      	movs	r3, #80	; 0x50
    ced2:	5cd3      	ldrb	r3, [r2, r3]
    ced4:	b2db      	uxtb	r3, r3
    ced6:	001a      	movs	r2, r3
    ced8:	2303      	movs	r3, #3
    ceda:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    cedc:	3b03      	subs	r3, #3
    cede:	425a      	negs	r2, r3
    cee0:	4153      	adcs	r3, r2
    cee2:	b2db      	uxtb	r3, r3
    cee4:	e00c      	b.n	cf00 <system_clock_source_is_ready+0x94>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    cee6:	2301      	movs	r3, #1
    cee8:	e00a      	b.n	cf00 <system_clock_source_is_ready+0x94>

	default:
		return false;
    ceea:	2300      	movs	r3, #0
    ceec:	e008      	b.n	cf00 <system_clock_source_is_ready+0x94>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    ceee:	4b06      	ldr	r3, [pc, #24]	; (cf08 <system_clock_source_is_ready+0x9c>)
    cef0:	68db      	ldr	r3, [r3, #12]
    cef2:	68fa      	ldr	r2, [r7, #12]
    cef4:	401a      	ands	r2, r3
    cef6:	68fb      	ldr	r3, [r7, #12]
    cef8:	1ad3      	subs	r3, r2, r3
    cefa:	425a      	negs	r2, r3
    cefc:	4153      	adcs	r3, r2
    cefe:	b2db      	uxtb	r3, r3
}
    cf00:	0018      	movs	r0, r3
    cf02:	46bd      	mov	sp, r7
    cf04:	b004      	add	sp, #16
    cf06:	bd80      	pop	{r7, pc}
    cf08:	40000800 	.word	0x40000800

0000cf0c <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    cf0c:	b590      	push	{r4, r7, lr}
    cf0e:	b083      	sub	sp, #12
    cf10:	af00      	add	r7, sp, #0
    cf12:	4c0d      	ldr	r4, [pc, #52]	; (cf48 <_switch_peripheral_gclk+0x3c>)
    cf14:	447c      	add	r4, pc
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    cf16:	003b      	movs	r3, r7
    cf18:	2203      	movs	r2, #3
    cf1a:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    cf1c:	2300      	movs	r3, #0
    cf1e:	607b      	str	r3, [r7, #4]
    cf20:	e00a      	b.n	cf38 <_switch_peripheral_gclk+0x2c>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    cf22:	687b      	ldr	r3, [r7, #4]
    cf24:	b2db      	uxtb	r3, r3
    cf26:	003a      	movs	r2, r7
    cf28:	0011      	movs	r1, r2
    cf2a:	0018      	movs	r0, r3
    cf2c:	4b07      	ldr	r3, [pc, #28]	; (cf4c <_switch_peripheral_gclk+0x40>)
    cf2e:	58e3      	ldr	r3, [r4, r3]
    cf30:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    cf32:	687b      	ldr	r3, [r7, #4]
    cf34:	3301      	adds	r3, #1
    cf36:	607b      	str	r3, [r7, #4]
    cf38:	687b      	ldr	r3, [r7, #4]
    cf3a:	2b24      	cmp	r3, #36	; 0x24
    cf3c:	d9f1      	bls.n	cf22 <_switch_peripheral_gclk+0x16>
	}
}
    cf3e:	46c0      	nop			; (mov r8, r8)
    cf40:	46bd      	mov	sp, r7
    cf42:	b003      	add	sp, #12
    cf44:	bd90      	pop	{r4, r7, pc}
    cf46:	46c0      	nop			; (mov r8, r8)
    cf48:	00004ebc 	.word	0x00004ebc
    cf4c:	000000b0 	.word	0x000000b0

0000cf50 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    cf50:	b590      	push	{r4, r7, lr}
    cf52:	b0ab      	sub	sp, #172	; 0xac
    cf54:	af00      	add	r7, sp, #0
    cf56:	4ca9      	ldr	r4, [pc, #676]	; (d1fc <system_clock_init+0x2ac>)
    cf58:	447c      	add	r4, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    cf5a:	4ba9      	ldr	r3, [pc, #676]	; (d200 <system_clock_init+0x2b0>)
    cf5c:	22c2      	movs	r2, #194	; 0xc2
    cf5e:	00d2      	lsls	r2, r2, #3
    cf60:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    cf62:	2001      	movs	r0, #1
    cf64:	4ba7      	ldr	r3, [pc, #668]	; (d204 <system_clock_init+0x2b4>)
    cf66:	447b      	add	r3, pc
    cf68:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    cf6a:	4ba7      	ldr	r3, [pc, #668]	; (d208 <system_clock_init+0x2b8>)
    cf6c:	447b      	add	r3, pc
    cf6e:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    cf70:	2394      	movs	r3, #148	; 0x94
    cf72:	18fb      	adds	r3, r7, r3
    cf74:	0018      	movs	r0, r3
    cf76:	4ba5      	ldr	r3, [pc, #660]	; (d20c <system_clock_init+0x2bc>)
    cf78:	447b      	add	r3, pc
    cf7a:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    cf7c:	2394      	movs	r3, #148	; 0x94
    cf7e:	18fb      	adds	r3, r7, r3
    cf80:	2280      	movs	r2, #128	; 0x80
    cf82:	0212      	lsls	r2, r2, #8
    cf84:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    cf86:	2394      	movs	r3, #148	; 0x94
    cf88:	18fb      	adds	r3, r7, r3
    cf8a:	2200      	movs	r2, #0
    cf8c:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    cf8e:	2394      	movs	r3, #148	; 0x94
    cf90:	18fb      	adds	r3, r7, r3
    cf92:	2202      	movs	r2, #2
    cf94:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    cf96:	2394      	movs	r3, #148	; 0x94
    cf98:	18fb      	adds	r3, r7, r3
    cf9a:	2201      	movs	r2, #1
    cf9c:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    cf9e:	2394      	movs	r3, #148	; 0x94
    cfa0:	18fb      	adds	r3, r7, r3
    cfa2:	2200      	movs	r2, #0
    cfa4:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    cfa6:	2394      	movs	r3, #148	; 0x94
    cfa8:	18fb      	adds	r3, r7, r3
    cfaa:	2201      	movs	r2, #1
    cfac:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    cfae:	2394      	movs	r3, #148	; 0x94
    cfb0:	18fb      	adds	r3, r7, r3
    cfb2:	2200      	movs	r2, #0
    cfb4:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    cfb6:	2394      	movs	r3, #148	; 0x94
    cfb8:	18fb      	adds	r3, r7, r3
    cfba:	2201      	movs	r2, #1
    cfbc:	731a      	strb	r2, [r3, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    cfbe:	2394      	movs	r3, #148	; 0x94
    cfc0:	18fb      	adds	r3, r7, r3
    cfc2:	0018      	movs	r0, r3
    cfc4:	4b92      	ldr	r3, [pc, #584]	; (d210 <system_clock_init+0x2c0>)
    cfc6:	58e3      	ldr	r3, [r4, r3]
    cfc8:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    cfca:	2005      	movs	r0, #5
    cfcc:	4b91      	ldr	r3, [pc, #580]	; (d214 <system_clock_init+0x2c4>)
    cfce:	58e3      	ldr	r3, [r4, r3]
    cfd0:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    cfd2:	46c0      	nop			; (mov r8, r8)
    cfd4:	2005      	movs	r0, #5
    cfd6:	4b90      	ldr	r3, [pc, #576]	; (d218 <system_clock_init+0x2c8>)
    cfd8:	58e3      	ldr	r3, [r4, r3]
    cfda:	4798      	blx	r3
    cfdc:	0003      	movs	r3, r0
    cfde:	001a      	movs	r2, r3
    cfe0:	2301      	movs	r3, #1
    cfe2:	4053      	eors	r3, r2
    cfe4:	b2db      	uxtb	r3, r3
    cfe6:	2b00      	cmp	r3, #0
    cfe8:	d1f4      	bne.n	cfd4 <system_clock_init+0x84>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    cfea:	4a85      	ldr	r2, [pc, #532]	; (d200 <system_clock_init+0x2b0>)
    cfec:	8a93      	ldrh	r3, [r2, #20]
    cfee:	2180      	movs	r1, #128	; 0x80
    cff0:	430b      	orrs	r3, r1
    cff2:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    cff4:	2380      	movs	r3, #128	; 0x80
    cff6:	18fb      	adds	r3, r7, r3
    cff8:	0018      	movs	r0, r3
    cffa:	4b88      	ldr	r3, [pc, #544]	; (d21c <system_clock_init+0x2cc>)
    cffc:	447b      	add	r3, pc
    cffe:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    d000:	2380      	movs	r3, #128	; 0x80
    d002:	18fb      	adds	r3, r7, r3
    d004:	2204      	movs	r2, #4
    d006:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    d008:	2380      	movs	r3, #128	; 0x80
    d00a:	18fb      	adds	r3, r7, r3
    d00c:	2200      	movs	r2, #0
    d00e:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    d010:	4b83      	ldr	r3, [pc, #524]	; (d220 <system_clock_init+0x2d0>)
    d012:	681b      	ldr	r3, [r3, #0]
    d014:	0e9b      	lsrs	r3, r3, #26
    d016:	22a4      	movs	r2, #164	; 0xa4
    d018:	18ba      	adds	r2, r7, r2
    d01a:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    d01c:	23a4      	movs	r3, #164	; 0xa4
    d01e:	18fb      	adds	r3, r7, r3
    d020:	681b      	ldr	r3, [r3, #0]
    d022:	2b3f      	cmp	r3, #63	; 0x3f
    d024:	d103      	bne.n	d02e <system_clock_init+0xde>
		coarse = 0x1f;
    d026:	231f      	movs	r3, #31
    d028:	22a4      	movs	r2, #164	; 0xa4
    d02a:	18ba      	adds	r2, r7, r2
    d02c:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    d02e:	23a4      	movs	r3, #164	; 0xa4
    d030:	18fb      	adds	r3, r7, r3
    d032:	681b      	ldr	r3, [r3, #0]
    d034:	b2da      	uxtb	r2, r3
    d036:	2380      	movs	r3, #128	; 0x80
    d038:	18fb      	adds	r3, r7, r3
    d03a:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    d03c:	2380      	movs	r3, #128	; 0x80
    d03e:	18fb      	adds	r3, r7, r3
    d040:	2200      	movs	r2, #0
    d042:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    d044:	2380      	movs	r3, #128	; 0x80
    d046:	18fb      	adds	r3, r7, r3
    d048:	2200      	movs	r2, #0
    d04a:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    d04c:	2380      	movs	r3, #128	; 0x80
    d04e:	18fb      	adds	r3, r7, r3
    d050:	2200      	movs	r2, #0
    d052:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    d054:	2380      	movs	r3, #128	; 0x80
    d056:	18fb      	adds	r3, r7, r3
    d058:	2200      	movs	r2, #0
    d05a:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    d05c:	2380      	movs	r3, #128	; 0x80
    d05e:	18fb      	adds	r3, r7, r3
    d060:	4a70      	ldr	r2, [pc, #448]	; (d224 <system_clock_init+0x2d4>)
    d062:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    d064:	2380      	movs	r3, #128	; 0x80
    d066:	18fb      	adds	r3, r7, r3
    d068:	2207      	movs	r2, #7
    d06a:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    d06c:	2380      	movs	r3, #128	; 0x80
    d06e:	18fb      	adds	r3, r7, r3
    d070:	223f      	movs	r2, #63	; 0x3f
    d072:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    d074:	2380      	movs	r3, #128	; 0x80
    d076:	18fb      	adds	r3, r7, r3
    d078:	0018      	movs	r0, r3
    d07a:	4b6b      	ldr	r3, [pc, #428]	; (d228 <system_clock_init+0x2d8>)
    d07c:	58e3      	ldr	r3, [r4, r3]
    d07e:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    d080:	237c      	movs	r3, #124	; 0x7c
    d082:	18fb      	adds	r3, r7, r3
    d084:	0018      	movs	r0, r3
    d086:	4b69      	ldr	r3, [pc, #420]	; (d22c <system_clock_init+0x2dc>)
    d088:	447b      	add	r3, pc
    d08a:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    d08c:	237c      	movs	r3, #124	; 0x7c
    d08e:	18fb      	adds	r3, r7, r3
    d090:	2200      	movs	r2, #0
    d092:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    d094:	237c      	movs	r3, #124	; 0x7c
    d096:	18fb      	adds	r3, r7, r3
    d098:	2201      	movs	r2, #1
    d09a:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    d09c:	237c      	movs	r3, #124	; 0x7c
    d09e:	18fb      	adds	r3, r7, r3
    d0a0:	2200      	movs	r2, #0
    d0a2:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    d0a4:	237c      	movs	r3, #124	; 0x7c
    d0a6:	18fb      	adds	r3, r7, r3
    d0a8:	0018      	movs	r0, r3
    d0aa:	4b61      	ldr	r3, [pc, #388]	; (d230 <system_clock_init+0x2e0>)
    d0ac:	58e3      	ldr	r3, [r4, r3]
    d0ae:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    d0b0:	2006      	movs	r0, #6
    d0b2:	4b58      	ldr	r3, [pc, #352]	; (d214 <system_clock_init+0x2c4>)
    d0b4:	58e3      	ldr	r3, [r4, r3]
    d0b6:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    d0b8:	4b5e      	ldr	r3, [pc, #376]	; (d234 <system_clock_init+0x2e4>)
    d0ba:	58e3      	ldr	r3, [r4, r3]
    d0bc:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    d0be:	2364      	movs	r3, #100	; 0x64
    d0c0:	18fb      	adds	r3, r7, r3
    d0c2:	0018      	movs	r0, r3
    d0c4:	4b5c      	ldr	r3, [pc, #368]	; (d238 <system_clock_init+0x2e8>)
    d0c6:	447b      	add	r3, pc
    d0c8:	4798      	blx	r3
    d0ca:	2364      	movs	r3, #100	; 0x64
    d0cc:	18fb      	adds	r3, r7, r3
    d0ce:	2205      	movs	r2, #5
    d0d0:	701a      	strb	r2, [r3, #0]
    d0d2:	2364      	movs	r3, #100	; 0x64
    d0d4:	18fb      	adds	r3, r7, r3
    d0d6:	2201      	movs	r2, #1
    d0d8:	605a      	str	r2, [r3, #4]
    d0da:	2364      	movs	r3, #100	; 0x64
    d0dc:	18fb      	adds	r3, r7, r3
    d0de:	2200      	movs	r2, #0
    d0e0:	721a      	strb	r2, [r3, #8]
    d0e2:	2364      	movs	r3, #100	; 0x64
    d0e4:	18fb      	adds	r3, r7, r3
    d0e6:	2200      	movs	r2, #0
    d0e8:	725a      	strb	r2, [r3, #9]
    d0ea:	2364      	movs	r3, #100	; 0x64
    d0ec:	18fb      	adds	r3, r7, r3
    d0ee:	0019      	movs	r1, r3
    d0f0:	2001      	movs	r0, #1
    d0f2:	4b52      	ldr	r3, [pc, #328]	; (d23c <system_clock_init+0x2ec>)
    d0f4:	58e3      	ldr	r3, [r4, r3]
    d0f6:	4798      	blx	r3
    d0f8:	2001      	movs	r0, #1
    d0fa:	4b51      	ldr	r3, [pc, #324]	; (d240 <system_clock_init+0x2f0>)
    d0fc:	58e3      	ldr	r3, [r4, r3]
    d0fe:	4798      	blx	r3
    d100:	2358      	movs	r3, #88	; 0x58
    d102:	18fb      	adds	r3, r7, r3
    d104:	0018      	movs	r0, r3
    d106:	4b4f      	ldr	r3, [pc, #316]	; (d244 <system_clock_init+0x2f4>)
    d108:	447b      	add	r3, pc
    d10a:	4798      	blx	r3
    d10c:	2358      	movs	r3, #88	; 0x58
    d10e:	18fb      	adds	r3, r7, r3
    d110:	2205      	movs	r2, #5
    d112:	701a      	strb	r2, [r3, #0]
    d114:	2358      	movs	r3, #88	; 0x58
    d116:	18fb      	adds	r3, r7, r3
    d118:	2220      	movs	r2, #32
    d11a:	605a      	str	r2, [r3, #4]
    d11c:	2358      	movs	r3, #88	; 0x58
    d11e:	18fb      	adds	r3, r7, r3
    d120:	2201      	movs	r2, #1
    d122:	721a      	strb	r2, [r3, #8]
    d124:	2358      	movs	r3, #88	; 0x58
    d126:	18fb      	adds	r3, r7, r3
    d128:	2200      	movs	r2, #0
    d12a:	725a      	strb	r2, [r3, #9]
    d12c:	2358      	movs	r3, #88	; 0x58
    d12e:	18fb      	adds	r3, r7, r3
    d130:	0019      	movs	r1, r3
    d132:	2002      	movs	r0, #2
    d134:	4b41      	ldr	r3, [pc, #260]	; (d23c <system_clock_init+0x2ec>)
    d136:	58e3      	ldr	r3, [r4, r3]
    d138:	4798      	blx	r3
    d13a:	2002      	movs	r0, #2
    d13c:	4b40      	ldr	r3, [pc, #256]	; (d240 <system_clock_init+0x2f0>)
    d13e:	58e3      	ldr	r3, [r4, r3]
    d140:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    d142:	230c      	movs	r3, #12
    d144:	18fb      	adds	r3, r7, r3
    d146:	0018      	movs	r0, r3
    d148:	4b3f      	ldr	r3, [pc, #252]	; (d248 <system_clock_init+0x2f8>)
    d14a:	447b      	add	r3, pc
    d14c:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    d14e:	230c      	movs	r3, #12
    d150:	18fb      	adds	r3, r7, r3
    d152:	2201      	movs	r2, #1
    d154:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    d156:	230c      	movs	r3, #12
    d158:	18fb      	adds	r3, r7, r3
    d15a:	0019      	movs	r1, r3
    d15c:	2000      	movs	r0, #0
    d15e:	4b3b      	ldr	r3, [pc, #236]	; (d24c <system_clock_init+0x2fc>)
    d160:	58e3      	ldr	r3, [r4, r3]
    d162:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    d164:	2000      	movs	r0, #0
    d166:	4b3a      	ldr	r3, [pc, #232]	; (d250 <system_clock_init+0x300>)
    d168:	58e3      	ldr	r3, [r4, r3]
    d16a:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    d16c:	2007      	movs	r0, #7
    d16e:	4b29      	ldr	r3, [pc, #164]	; (d214 <system_clock_init+0x2c4>)
    d170:	58e3      	ldr	r3, [r4, r3]
    d172:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    d174:	46c0      	nop			; (mov r8, r8)
    d176:	2007      	movs	r0, #7
    d178:	4b27      	ldr	r3, [pc, #156]	; (d218 <system_clock_init+0x2c8>)
    d17a:	58e3      	ldr	r3, [r4, r3]
    d17c:	4798      	blx	r3
    d17e:	0003      	movs	r3, r0
    d180:	001a      	movs	r2, r3
    d182:	2301      	movs	r3, #1
    d184:	4053      	eors	r3, r2
    d186:	b2db      	uxtb	r3, r3
    d188:	2b00      	cmp	r3, #0
    d18a:	d1f4      	bne.n	d176 <system_clock_init+0x226>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    d18c:	4a1c      	ldr	r2, [pc, #112]	; (d200 <system_clock_init+0x2b0>)
    d18e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    d190:	2180      	movs	r1, #128	; 0x80
    d192:	430b      	orrs	r3, r1
    d194:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    d196:	2000      	movs	r0, #0
    d198:	4b2e      	ldr	r3, [pc, #184]	; (d254 <system_clock_init+0x304>)
    d19a:	447b      	add	r3, pc
    d19c:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    d19e:	2100      	movs	r1, #0
    d1a0:	2000      	movs	r0, #0
    d1a2:	4b2d      	ldr	r3, [pc, #180]	; (d258 <system_clock_init+0x308>)
    d1a4:	447b      	add	r3, pc
    d1a6:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    d1a8:	2100      	movs	r1, #0
    d1aa:	2001      	movs	r0, #1
    d1ac:	4b2b      	ldr	r3, [pc, #172]	; (d25c <system_clock_init+0x30c>)
    d1ae:	447b      	add	r3, pc
    d1b0:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    d1b2:	2100      	movs	r1, #0
    d1b4:	2002      	movs	r0, #2
    d1b6:	4b2a      	ldr	r3, [pc, #168]	; (d260 <system_clock_init+0x310>)
    d1b8:	447b      	add	r3, pc
    d1ba:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    d1bc:	003b      	movs	r3, r7
    d1be:	0018      	movs	r0, r3
    d1c0:	4b28      	ldr	r3, [pc, #160]	; (d264 <system_clock_init+0x314>)
    d1c2:	447b      	add	r3, pc
    d1c4:	4798      	blx	r3
    d1c6:	003b      	movs	r3, r7
    d1c8:	2207      	movs	r2, #7
    d1ca:	701a      	strb	r2, [r3, #0]
    d1cc:	003b      	movs	r3, r7
    d1ce:	2201      	movs	r2, #1
    d1d0:	605a      	str	r2, [r3, #4]
    d1d2:	003b      	movs	r3, r7
    d1d4:	2200      	movs	r2, #0
    d1d6:	721a      	strb	r2, [r3, #8]
    d1d8:	003b      	movs	r3, r7
    d1da:	2200      	movs	r2, #0
    d1dc:	725a      	strb	r2, [r3, #9]
    d1de:	003b      	movs	r3, r7
    d1e0:	0019      	movs	r1, r3
    d1e2:	2000      	movs	r0, #0
    d1e4:	4b15      	ldr	r3, [pc, #84]	; (d23c <system_clock_init+0x2ec>)
    d1e6:	58e3      	ldr	r3, [r4, r3]
    d1e8:	4798      	blx	r3
    d1ea:	2000      	movs	r0, #0
    d1ec:	4b14      	ldr	r3, [pc, #80]	; (d240 <system_clock_init+0x2f0>)
    d1ee:	58e3      	ldr	r3, [r4, r3]
    d1f0:	4798      	blx	r3
#endif
}
    d1f2:	46c0      	nop			; (mov r8, r8)
    d1f4:	46bd      	mov	sp, r7
    d1f6:	b02b      	add	sp, #172	; 0xac
    d1f8:	bd90      	pop	{r4, r7, pc}
    d1fa:	46c0      	nop			; (mov r8, r8)
    d1fc:	00004e78 	.word	0x00004e78
    d200:	40000800 	.word	0x40000800
    d204:	fffff9e7 	.word	0xfffff9e7
    d208:	ffffff9d 	.word	0xffffff9d
    d20c:	fffff8a5 	.word	0xfffff8a5
    d210:	00000224 	.word	0x00000224
    d214:	00000254 	.word	0x00000254
    d218:	00000278 	.word	0x00000278
    d21c:	fffff88b 	.word	0xfffff88b
    d220:	00806024 	.word	0x00806024
    d224:	000005dc 	.word	0x000005dc
    d228:	00000064 	.word	0x00000064
    d22c:	fffff7dd 	.word	0xfffff7dd
    d230:	00000114 	.word	0x00000114
    d234:	000002bc 	.word	0x000002bc
    d238:	fffff713 	.word	0xfffff713
    d23c:	000000f4 	.word	0x000000f4
    d240:	000001cc 	.word	0x000001cc
    d244:	fffff6d1 	.word	0xfffff6d1
    d248:	fffff6bd 	.word	0xfffff6bd
    d24c:	000000b0 	.word	0x000000b0
    d250:	00000230 	.word	0x00000230
    d254:	fffff73f 	.word	0xfffff73f
    d258:	fffff755 	.word	0xfffff755
    d25c:	fffff74b 	.word	0xfffff74b
    d260:	fffff741 	.word	0xfffff741
    d264:	fffff617 	.word	0xfffff617

0000d268 <system_apb_clock_set_mask>:
{
    d268:	b580      	push	{r7, lr}
    d26a:	b082      	sub	sp, #8
    d26c:	af00      	add	r7, sp, #0
    d26e:	0002      	movs	r2, r0
    d270:	6039      	str	r1, [r7, #0]
    d272:	1dfb      	adds	r3, r7, #7
    d274:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    d276:	1dfb      	adds	r3, r7, #7
    d278:	781b      	ldrb	r3, [r3, #0]
    d27a:	2b01      	cmp	r3, #1
    d27c:	d00a      	beq.n	d294 <system_apb_clock_set_mask+0x2c>
    d27e:	2b02      	cmp	r3, #2
    d280:	d00f      	beq.n	d2a2 <system_apb_clock_set_mask+0x3a>
    d282:	2b00      	cmp	r3, #0
    d284:	d114      	bne.n	d2b0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    d286:	4b0e      	ldr	r3, [pc, #56]	; (d2c0 <system_apb_clock_set_mask+0x58>)
    d288:	4a0d      	ldr	r2, [pc, #52]	; (d2c0 <system_apb_clock_set_mask+0x58>)
    d28a:	6991      	ldr	r1, [r2, #24]
    d28c:	683a      	ldr	r2, [r7, #0]
    d28e:	430a      	orrs	r2, r1
    d290:	619a      	str	r2, [r3, #24]
			break;
    d292:	e00f      	b.n	d2b4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    d294:	4b0a      	ldr	r3, [pc, #40]	; (d2c0 <system_apb_clock_set_mask+0x58>)
    d296:	4a0a      	ldr	r2, [pc, #40]	; (d2c0 <system_apb_clock_set_mask+0x58>)
    d298:	69d1      	ldr	r1, [r2, #28]
    d29a:	683a      	ldr	r2, [r7, #0]
    d29c:	430a      	orrs	r2, r1
    d29e:	61da      	str	r2, [r3, #28]
			break;
    d2a0:	e008      	b.n	d2b4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    d2a2:	4b07      	ldr	r3, [pc, #28]	; (d2c0 <system_apb_clock_set_mask+0x58>)
    d2a4:	4a06      	ldr	r2, [pc, #24]	; (d2c0 <system_apb_clock_set_mask+0x58>)
    d2a6:	6a11      	ldr	r1, [r2, #32]
    d2a8:	683a      	ldr	r2, [r7, #0]
    d2aa:	430a      	orrs	r2, r1
    d2ac:	621a      	str	r2, [r3, #32]
			break;
    d2ae:	e001      	b.n	d2b4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    d2b0:	2317      	movs	r3, #23
    d2b2:	e000      	b.n	d2b6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    d2b4:	2300      	movs	r3, #0
}
    d2b6:	0018      	movs	r0, r3
    d2b8:	46bd      	mov	sp, r7
    d2ba:	b002      	add	sp, #8
    d2bc:	bd80      	pop	{r7, pc}
    d2be:	46c0      	nop			; (mov r8, r8)
    d2c0:	40000400 	.word	0x40000400

0000d2c4 <system_interrupt_enter_critical_section>:
{
    d2c4:	b580      	push	{r7, lr}
    d2c6:	af00      	add	r7, sp, #0
    d2c8:	4a03      	ldr	r2, [pc, #12]	; (d2d8 <system_interrupt_enter_critical_section+0x14>)
    d2ca:	447a      	add	r2, pc
	cpu_irq_enter_critical();
    d2cc:	4b03      	ldr	r3, [pc, #12]	; (d2dc <system_interrupt_enter_critical_section+0x18>)
    d2ce:	58d3      	ldr	r3, [r2, r3]
    d2d0:	4798      	blx	r3
}
    d2d2:	46c0      	nop			; (mov r8, r8)
    d2d4:	46bd      	mov	sp, r7
    d2d6:	bd80      	pop	{r7, pc}
    d2d8:	00004b06 	.word	0x00004b06
    d2dc:	000000d8 	.word	0x000000d8

0000d2e0 <system_interrupt_leave_critical_section>:
{
    d2e0:	b580      	push	{r7, lr}
    d2e2:	af00      	add	r7, sp, #0
    d2e4:	4a03      	ldr	r2, [pc, #12]	; (d2f4 <system_interrupt_leave_critical_section+0x14>)
    d2e6:	447a      	add	r2, pc
	cpu_irq_leave_critical();
    d2e8:	4b03      	ldr	r3, [pc, #12]	; (d2f8 <system_interrupt_leave_critical_section+0x18>)
    d2ea:	58d3      	ldr	r3, [r2, r3]
    d2ec:	4798      	blx	r3
}
    d2ee:	46c0      	nop			; (mov r8, r8)
    d2f0:	46bd      	mov	sp, r7
    d2f2:	bd80      	pop	{r7, pc}
    d2f4:	00004aea 	.word	0x00004aea
    d2f8:	00000014 	.word	0x00000014

0000d2fc <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    d2fc:	b580      	push	{r7, lr}
    d2fe:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    d300:	4b05      	ldr	r3, [pc, #20]	; (d318 <system_gclk_is_syncing+0x1c>)
    d302:	785b      	ldrb	r3, [r3, #1]
    d304:	b2db      	uxtb	r3, r3
    d306:	b25b      	sxtb	r3, r3
    d308:	2b00      	cmp	r3, #0
    d30a:	da01      	bge.n	d310 <system_gclk_is_syncing+0x14>
		return true;
    d30c:	2301      	movs	r3, #1
    d30e:	e000      	b.n	d312 <system_gclk_is_syncing+0x16>
	}

	return false;
    d310:	2300      	movs	r3, #0
}
    d312:	0018      	movs	r0, r3
    d314:	46bd      	mov	sp, r7
    d316:	bd80      	pop	{r7, pc}
    d318:	40000c00 	.word	0x40000c00

0000d31c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    d31c:	b580      	push	{r7, lr}
    d31e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    d320:	2108      	movs	r1, #8
    d322:	2000      	movs	r0, #0
    d324:	4b08      	ldr	r3, [pc, #32]	; (d348 <system_gclk_init+0x2c>)
    d326:	447b      	add	r3, pc
    d328:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    d32a:	4b08      	ldr	r3, [pc, #32]	; (d34c <system_gclk_init+0x30>)
    d32c:	2201      	movs	r2, #1
    d32e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    d330:	46c0      	nop			; (mov r8, r8)
    d332:	4b06      	ldr	r3, [pc, #24]	; (d34c <system_gclk_init+0x30>)
    d334:	781b      	ldrb	r3, [r3, #0]
    d336:	b2db      	uxtb	r3, r3
    d338:	001a      	movs	r2, r3
    d33a:	2301      	movs	r3, #1
    d33c:	4013      	ands	r3, r2
    d33e:	d1f8      	bne.n	d332 <system_gclk_init+0x16>
		/* Wait for reset to complete */
	}
}
    d340:	46c0      	nop			; (mov r8, r8)
    d342:	46bd      	mov	sp, r7
    d344:	bd80      	pop	{r7, pc}
    d346:	46c0      	nop			; (mov r8, r8)
    d348:	ffffff3f 	.word	0xffffff3f
    d34c:	40000c00 	.word	0x40000c00

0000d350 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    d350:	b580      	push	{r7, lr}
    d352:	b086      	sub	sp, #24
    d354:	af00      	add	r7, sp, #0
    d356:	0002      	movs	r2, r0
    d358:	6039      	str	r1, [r7, #0]
    d35a:	1dfb      	adds	r3, r7, #7
    d35c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    d35e:	1dfb      	adds	r3, r7, #7
    d360:	781b      	ldrb	r3, [r3, #0]
    d362:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    d364:	1dfb      	adds	r3, r7, #7
    d366:	781b      	ldrb	r3, [r3, #0]
    d368:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    d36a:	683b      	ldr	r3, [r7, #0]
    d36c:	781b      	ldrb	r3, [r3, #0]
    d36e:	021b      	lsls	r3, r3, #8
    d370:	001a      	movs	r2, r3
    d372:	697b      	ldr	r3, [r7, #20]
    d374:	4313      	orrs	r3, r2
    d376:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    d378:	683b      	ldr	r3, [r7, #0]
    d37a:	785b      	ldrb	r3, [r3, #1]
    d37c:	2b00      	cmp	r3, #0
    d37e:	d004      	beq.n	d38a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    d380:	697b      	ldr	r3, [r7, #20]
    d382:	2280      	movs	r2, #128	; 0x80
    d384:	02d2      	lsls	r2, r2, #11
    d386:	4313      	orrs	r3, r2
    d388:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    d38a:	683b      	ldr	r3, [r7, #0]
    d38c:	7a5b      	ldrb	r3, [r3, #9]
    d38e:	2b00      	cmp	r3, #0
    d390:	d004      	beq.n	d39c <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    d392:	697b      	ldr	r3, [r7, #20]
    d394:	2280      	movs	r2, #128	; 0x80
    d396:	0312      	lsls	r2, r2, #12
    d398:	4313      	orrs	r3, r2
    d39a:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    d39c:	683b      	ldr	r3, [r7, #0]
    d39e:	685b      	ldr	r3, [r3, #4]
    d3a0:	2b01      	cmp	r3, #1
    d3a2:	d92c      	bls.n	d3fe <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    d3a4:	683b      	ldr	r3, [r7, #0]
    d3a6:	685a      	ldr	r2, [r3, #4]
    d3a8:	683b      	ldr	r3, [r7, #0]
    d3aa:	685b      	ldr	r3, [r3, #4]
    d3ac:	3b01      	subs	r3, #1
    d3ae:	4013      	ands	r3, r2
    d3b0:	d11a      	bne.n	d3e8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    d3b2:	2300      	movs	r3, #0
    d3b4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    d3b6:	2302      	movs	r3, #2
    d3b8:	60bb      	str	r3, [r7, #8]
    d3ba:	e005      	b.n	d3c8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    d3bc:	68fb      	ldr	r3, [r7, #12]
    d3be:	3301      	adds	r3, #1
    d3c0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    d3c2:	68bb      	ldr	r3, [r7, #8]
    d3c4:	005b      	lsls	r3, r3, #1
    d3c6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    d3c8:	683b      	ldr	r3, [r7, #0]
    d3ca:	685a      	ldr	r2, [r3, #4]
    d3cc:	68bb      	ldr	r3, [r7, #8]
    d3ce:	429a      	cmp	r2, r3
    d3d0:	d8f4      	bhi.n	d3bc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    d3d2:	68fb      	ldr	r3, [r7, #12]
    d3d4:	021b      	lsls	r3, r3, #8
    d3d6:	693a      	ldr	r2, [r7, #16]
    d3d8:	4313      	orrs	r3, r2
    d3da:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    d3dc:	697b      	ldr	r3, [r7, #20]
    d3de:	2280      	movs	r2, #128	; 0x80
    d3e0:	0352      	lsls	r2, r2, #13
    d3e2:	4313      	orrs	r3, r2
    d3e4:	617b      	str	r3, [r7, #20]
    d3e6:	e00a      	b.n	d3fe <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    d3e8:	683b      	ldr	r3, [r7, #0]
    d3ea:	685b      	ldr	r3, [r3, #4]
    d3ec:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    d3ee:	693a      	ldr	r2, [r7, #16]
    d3f0:	4313      	orrs	r3, r2
    d3f2:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    d3f4:	697b      	ldr	r3, [r7, #20]
    d3f6:	2280      	movs	r2, #128	; 0x80
    d3f8:	0292      	lsls	r2, r2, #10
    d3fa:	4313      	orrs	r3, r2
    d3fc:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    d3fe:	683b      	ldr	r3, [r7, #0]
    d400:	7a1b      	ldrb	r3, [r3, #8]
    d402:	2b00      	cmp	r3, #0
    d404:	d004      	beq.n	d410 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    d406:	697b      	ldr	r3, [r7, #20]
    d408:	2280      	movs	r2, #128	; 0x80
    d40a:	0392      	lsls	r2, r2, #14
    d40c:	4313      	orrs	r3, r2
    d40e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    d410:	46c0      	nop			; (mov r8, r8)
    d412:	4b15      	ldr	r3, [pc, #84]	; (d468 <system_gclk_gen_set_config+0x118>)
    d414:	447b      	add	r3, pc
    d416:	4798      	blx	r3
    d418:	1e03      	subs	r3, r0, #0
    d41a:	d1fa      	bne.n	d412 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    d41c:	4b13      	ldr	r3, [pc, #76]	; (d46c <system_gclk_gen_set_config+0x11c>)
    d41e:	447b      	add	r3, pc
    d420:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    d422:	4a13      	ldr	r2, [pc, #76]	; (d470 <system_gclk_gen_set_config+0x120>)
    d424:	1dfb      	adds	r3, r7, #7
    d426:	781b      	ldrb	r3, [r3, #0]
    d428:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    d42a:	46c0      	nop			; (mov r8, r8)
    d42c:	4b11      	ldr	r3, [pc, #68]	; (d474 <system_gclk_gen_set_config+0x124>)
    d42e:	447b      	add	r3, pc
    d430:	4798      	blx	r3
    d432:	1e03      	subs	r3, r0, #0
    d434:	d1fa      	bne.n	d42c <system_gclk_gen_set_config+0xdc>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    d436:	4b10      	ldr	r3, [pc, #64]	; (d478 <system_gclk_gen_set_config+0x128>)
    d438:	693a      	ldr	r2, [r7, #16]
    d43a:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    d43c:	46c0      	nop			; (mov r8, r8)
    d43e:	4b0f      	ldr	r3, [pc, #60]	; (d47c <system_gclk_gen_set_config+0x12c>)
    d440:	447b      	add	r3, pc
    d442:	4798      	blx	r3
    d444:	1e03      	subs	r3, r0, #0
    d446:	d1fa      	bne.n	d43e <system_gclk_gen_set_config+0xee>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    d448:	4b0b      	ldr	r3, [pc, #44]	; (d478 <system_gclk_gen_set_config+0x128>)
    d44a:	4a0b      	ldr	r2, [pc, #44]	; (d478 <system_gclk_gen_set_config+0x128>)
    d44c:	6851      	ldr	r1, [r2, #4]
    d44e:	2280      	movs	r2, #128	; 0x80
    d450:	0252      	lsls	r2, r2, #9
    d452:	4011      	ands	r1, r2
    d454:	697a      	ldr	r2, [r7, #20]
    d456:	430a      	orrs	r2, r1
    d458:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    d45a:	4b09      	ldr	r3, [pc, #36]	; (d480 <system_gclk_gen_set_config+0x130>)
    d45c:	447b      	add	r3, pc
    d45e:	4798      	blx	r3
}
    d460:	46c0      	nop			; (mov r8, r8)
    d462:	46bd      	mov	sp, r7
    d464:	b006      	add	sp, #24
    d466:	bd80      	pop	{r7, pc}
    d468:	fffffee5 	.word	0xfffffee5
    d46c:	fffffea3 	.word	0xfffffea3
    d470:	40000c08 	.word	0x40000c08
    d474:	fffffecb 	.word	0xfffffecb
    d478:	40000c00 	.word	0x40000c00
    d47c:	fffffeb9 	.word	0xfffffeb9
    d480:	fffffe81 	.word	0xfffffe81

0000d484 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    d484:	b580      	push	{r7, lr}
    d486:	b082      	sub	sp, #8
    d488:	af00      	add	r7, sp, #0
    d48a:	0002      	movs	r2, r0
    d48c:	1dfb      	adds	r3, r7, #7
    d48e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    d490:	46c0      	nop			; (mov r8, r8)
    d492:	4b10      	ldr	r3, [pc, #64]	; (d4d4 <system_gclk_gen_enable+0x50>)
    d494:	447b      	add	r3, pc
    d496:	4798      	blx	r3
    d498:	1e03      	subs	r3, r0, #0
    d49a:	d1fa      	bne.n	d492 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    d49c:	4b0e      	ldr	r3, [pc, #56]	; (d4d8 <system_gclk_gen_enable+0x54>)
    d49e:	447b      	add	r3, pc
    d4a0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d4a2:	4a0e      	ldr	r2, [pc, #56]	; (d4dc <system_gclk_gen_enable+0x58>)
    d4a4:	1dfb      	adds	r3, r7, #7
    d4a6:	781b      	ldrb	r3, [r3, #0]
    d4a8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    d4aa:	46c0      	nop			; (mov r8, r8)
    d4ac:	4b0c      	ldr	r3, [pc, #48]	; (d4e0 <system_gclk_gen_enable+0x5c>)
    d4ae:	447b      	add	r3, pc
    d4b0:	4798      	blx	r3
    d4b2:	1e03      	subs	r3, r0, #0
    d4b4:	d1fa      	bne.n	d4ac <system_gclk_gen_enable+0x28>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    d4b6:	4b0b      	ldr	r3, [pc, #44]	; (d4e4 <system_gclk_gen_enable+0x60>)
    d4b8:	4a0a      	ldr	r2, [pc, #40]	; (d4e4 <system_gclk_gen_enable+0x60>)
    d4ba:	6852      	ldr	r2, [r2, #4]
    d4bc:	2180      	movs	r1, #128	; 0x80
    d4be:	0249      	lsls	r1, r1, #9
    d4c0:	430a      	orrs	r2, r1
    d4c2:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    d4c4:	4b08      	ldr	r3, [pc, #32]	; (d4e8 <system_gclk_gen_enable+0x64>)
    d4c6:	447b      	add	r3, pc
    d4c8:	4798      	blx	r3
}
    d4ca:	46c0      	nop			; (mov r8, r8)
    d4cc:	46bd      	mov	sp, r7
    d4ce:	b002      	add	sp, #8
    d4d0:	bd80      	pop	{r7, pc}
    d4d2:	46c0      	nop			; (mov r8, r8)
    d4d4:	fffffe65 	.word	0xfffffe65
    d4d8:	fffffe23 	.word	0xfffffe23
    d4dc:	40000c04 	.word	0x40000c04
    d4e0:	fffffe4b 	.word	0xfffffe4b
    d4e4:	40000c00 	.word	0x40000c00
    d4e8:	fffffe17 	.word	0xfffffe17

0000d4ec <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    d4ec:	b590      	push	{r4, r7, lr}
    d4ee:	b087      	sub	sp, #28
    d4f0:	af00      	add	r7, sp, #0
    d4f2:	0002      	movs	r2, r0
    d4f4:	1dfb      	adds	r3, r7, #7
    d4f6:	701a      	strb	r2, [r3, #0]
    d4f8:	4c2f      	ldr	r4, [pc, #188]	; (d5b8 <system_gclk_gen_get_hz+0xcc>)
    d4fa:	447c      	add	r4, pc
	while (system_gclk_is_syncing()) {
    d4fc:	46c0      	nop			; (mov r8, r8)
    d4fe:	4b2f      	ldr	r3, [pc, #188]	; (d5bc <system_gclk_gen_get_hz+0xd0>)
    d500:	447b      	add	r3, pc
    d502:	4798      	blx	r3
    d504:	1e03      	subs	r3, r0, #0
    d506:	d1fa      	bne.n	d4fe <system_gclk_gen_get_hz+0x12>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    d508:	4b2d      	ldr	r3, [pc, #180]	; (d5c0 <system_gclk_gen_get_hz+0xd4>)
    d50a:	447b      	add	r3, pc
    d50c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d50e:	4a2d      	ldr	r2, [pc, #180]	; (d5c4 <system_gclk_gen_get_hz+0xd8>)
    d510:	1dfb      	adds	r3, r7, #7
    d512:	781b      	ldrb	r3, [r3, #0]
    d514:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    d516:	46c0      	nop			; (mov r8, r8)
    d518:	4b2b      	ldr	r3, [pc, #172]	; (d5c8 <system_gclk_gen_get_hz+0xdc>)
    d51a:	447b      	add	r3, pc
    d51c:	4798      	blx	r3
    d51e:	1e03      	subs	r3, r0, #0
    d520:	d1fa      	bne.n	d518 <system_gclk_gen_get_hz+0x2c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    d522:	4b2a      	ldr	r3, [pc, #168]	; (d5cc <system_gclk_gen_get_hz+0xe0>)
    d524:	685b      	ldr	r3, [r3, #4]
    d526:	04db      	lsls	r3, r3, #19
    d528:	0edb      	lsrs	r3, r3, #27
    d52a:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    d52c:	0018      	movs	r0, r3
    d52e:	4b28      	ldr	r3, [pc, #160]	; (d5d0 <system_gclk_gen_get_hz+0xe4>)
    d530:	58e3      	ldr	r3, [r4, r3]
    d532:	4798      	blx	r3
    d534:	0003      	movs	r3, r0
    d536:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    d538:	4a22      	ldr	r2, [pc, #136]	; (d5c4 <system_gclk_gen_get_hz+0xd8>)
    d53a:	1dfb      	adds	r3, r7, #7
    d53c:	781b      	ldrb	r3, [r3, #0]
    d53e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    d540:	4b22      	ldr	r3, [pc, #136]	; (d5cc <system_gclk_gen_get_hz+0xe0>)
    d542:	685b      	ldr	r3, [r3, #4]
    d544:	02db      	lsls	r3, r3, #11
    d546:	0fdb      	lsrs	r3, r3, #31
    d548:	b2da      	uxtb	r2, r3
    d54a:	2313      	movs	r3, #19
    d54c:	18fb      	adds	r3, r7, r3
    d54e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    d550:	4a20      	ldr	r2, [pc, #128]	; (d5d4 <system_gclk_gen_get_hz+0xe8>)
    d552:	1dfb      	adds	r3, r7, #7
    d554:	781b      	ldrb	r3, [r3, #0]
    d556:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    d558:	46c0      	nop			; (mov r8, r8)
    d55a:	4b1f      	ldr	r3, [pc, #124]	; (d5d8 <system_gclk_gen_get_hz+0xec>)
    d55c:	447b      	add	r3, pc
    d55e:	4798      	blx	r3
    d560:	1e03      	subs	r3, r0, #0
    d562:	d1fa      	bne.n	d55a <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    d564:	4b19      	ldr	r3, [pc, #100]	; (d5cc <system_gclk_gen_get_hz+0xe0>)
    d566:	689b      	ldr	r3, [r3, #8]
    d568:	021b      	lsls	r3, r3, #8
    d56a:	0c1b      	lsrs	r3, r3, #16
    d56c:	b29b      	uxth	r3, r3
    d56e:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    d570:	4b1a      	ldr	r3, [pc, #104]	; (d5dc <system_gclk_gen_get_hz+0xf0>)
    d572:	447b      	add	r3, pc
    d574:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    d576:	2313      	movs	r3, #19
    d578:	18fb      	adds	r3, r7, r3
    d57a:	781b      	ldrb	r3, [r3, #0]
    d57c:	2b00      	cmp	r3, #0
    d57e:	d10a      	bne.n	d596 <system_gclk_gen_get_hz+0xaa>
    d580:	68fb      	ldr	r3, [r7, #12]
    d582:	2b01      	cmp	r3, #1
    d584:	d907      	bls.n	d596 <system_gclk_gen_get_hz+0xaa>
		gen_input_hz /= divider;
    d586:	4b16      	ldr	r3, [pc, #88]	; (d5e0 <system_gclk_gen_get_hz+0xf4>)
    d588:	58e3      	ldr	r3, [r4, r3]
    d58a:	68f9      	ldr	r1, [r7, #12]
    d58c:	6978      	ldr	r0, [r7, #20]
    d58e:	4798      	blx	r3
    d590:	0003      	movs	r3, r0
    d592:	617b      	str	r3, [r7, #20]
    d594:	e00a      	b.n	d5ac <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    d596:	2313      	movs	r3, #19
    d598:	18fb      	adds	r3, r7, r3
    d59a:	781b      	ldrb	r3, [r3, #0]
    d59c:	2b00      	cmp	r3, #0
    d59e:	d005      	beq.n	d5ac <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    d5a0:	68fb      	ldr	r3, [r7, #12]
    d5a2:	3301      	adds	r3, #1
    d5a4:	697a      	ldr	r2, [r7, #20]
    d5a6:	40da      	lsrs	r2, r3
    d5a8:	0013      	movs	r3, r2
    d5aa:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    d5ac:	697b      	ldr	r3, [r7, #20]
}
    d5ae:	0018      	movs	r0, r3
    d5b0:	46bd      	mov	sp, r7
    d5b2:	b007      	add	sp, #28
    d5b4:	bd90      	pop	{r4, r7, pc}
    d5b6:	46c0      	nop			; (mov r8, r8)
    d5b8:	000048d6 	.word	0x000048d6
    d5bc:	fffffdf9 	.word	0xfffffdf9
    d5c0:	fffffdb7 	.word	0xfffffdb7
    d5c4:	40000c04 	.word	0x40000c04
    d5c8:	fffffddf 	.word	0xfffffddf
    d5cc:	40000c00 	.word	0x40000c00
    d5d0:	00000264 	.word	0x00000264
    d5d4:	40000c08 	.word	0x40000c08
    d5d8:	fffffd9d 	.word	0xfffffd9d
    d5dc:	fffffd6b 	.word	0xfffffd6b
    d5e0:	00000204 	.word	0x00000204

0000d5e4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    d5e4:	b580      	push	{r7, lr}
    d5e6:	b084      	sub	sp, #16
    d5e8:	af00      	add	r7, sp, #0
    d5ea:	0002      	movs	r2, r0
    d5ec:	6039      	str	r1, [r7, #0]
    d5ee:	1dfb      	adds	r3, r7, #7
    d5f0:	701a      	strb	r2, [r3, #0]
    d5f2:	4a0d      	ldr	r2, [pc, #52]	; (d628 <system_gclk_chan_set_config+0x44>)
    d5f4:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    d5f6:	1dfb      	adds	r3, r7, #7
    d5f8:	781b      	ldrb	r3, [r3, #0]
    d5fa:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    d5fc:	683b      	ldr	r3, [r7, #0]
    d5fe:	781b      	ldrb	r3, [r3, #0]
    d600:	021b      	lsls	r3, r3, #8
    d602:	0019      	movs	r1, r3
    d604:	68fb      	ldr	r3, [r7, #12]
    d606:	430b      	orrs	r3, r1
    d608:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    d60a:	1dfb      	adds	r3, r7, #7
    d60c:	781b      	ldrb	r3, [r3, #0]
    d60e:	0018      	movs	r0, r3
    d610:	4b06      	ldr	r3, [pc, #24]	; (d62c <system_gclk_chan_set_config+0x48>)
    d612:	58d3      	ldr	r3, [r2, r3]
    d614:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    d616:	4b06      	ldr	r3, [pc, #24]	; (d630 <system_gclk_chan_set_config+0x4c>)
    d618:	68fa      	ldr	r2, [r7, #12]
    d61a:	b292      	uxth	r2, r2
    d61c:	805a      	strh	r2, [r3, #2]
}
    d61e:	46c0      	nop			; (mov r8, r8)
    d620:	46bd      	mov	sp, r7
    d622:	b004      	add	sp, #16
    d624:	bd80      	pop	{r7, pc}
    d626:	46c0      	nop			; (mov r8, r8)
    d628:	000047dc 	.word	0x000047dc
    d62c:	00000288 	.word	0x00000288
    d630:	40000c00 	.word	0x40000c00

0000d634 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    d634:	b580      	push	{r7, lr}
    d636:	b082      	sub	sp, #8
    d638:	af00      	add	r7, sp, #0
    d63a:	0002      	movs	r2, r0
    d63c:	1dfb      	adds	r3, r7, #7
    d63e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    d640:	4b0b      	ldr	r3, [pc, #44]	; (d670 <system_gclk_chan_enable+0x3c>)
    d642:	447b      	add	r3, pc
    d644:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d646:	4a0b      	ldr	r2, [pc, #44]	; (d674 <system_gclk_chan_enable+0x40>)
    d648:	1dfb      	adds	r3, r7, #7
    d64a:	781b      	ldrb	r3, [r3, #0]
    d64c:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    d64e:	490a      	ldr	r1, [pc, #40]	; (d678 <system_gclk_chan_enable+0x44>)
    d650:	4b09      	ldr	r3, [pc, #36]	; (d678 <system_gclk_chan_enable+0x44>)
    d652:	885b      	ldrh	r3, [r3, #2]
    d654:	b29b      	uxth	r3, r3
    d656:	2280      	movs	r2, #128	; 0x80
    d658:	01d2      	lsls	r2, r2, #7
    d65a:	4313      	orrs	r3, r2
    d65c:	b29b      	uxth	r3, r3
    d65e:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    d660:	4b06      	ldr	r3, [pc, #24]	; (d67c <system_gclk_chan_enable+0x48>)
    d662:	447b      	add	r3, pc
    d664:	4798      	blx	r3
}
    d666:	46c0      	nop			; (mov r8, r8)
    d668:	46bd      	mov	sp, r7
    d66a:	b002      	add	sp, #8
    d66c:	bd80      	pop	{r7, pc}
    d66e:	46c0      	nop			; (mov r8, r8)
    d670:	fffffc7f 	.word	0xfffffc7f
    d674:	40000c02 	.word	0x40000c02
    d678:	40000c00 	.word	0x40000c00
    d67c:	fffffc7b 	.word	0xfffffc7b

0000d680 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    d680:	b580      	push	{r7, lr}
    d682:	b084      	sub	sp, #16
    d684:	af00      	add	r7, sp, #0
    d686:	0002      	movs	r2, r0
    d688:	1dfb      	adds	r3, r7, #7
    d68a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    d68c:	4b1d      	ldr	r3, [pc, #116]	; (d704 <system_gclk_chan_disable+0x84>)
    d68e:	447b      	add	r3, pc
    d690:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d692:	4a1d      	ldr	r2, [pc, #116]	; (d708 <system_gclk_chan_disable+0x88>)
    d694:	1dfb      	adds	r3, r7, #7
    d696:	781b      	ldrb	r3, [r3, #0]
    d698:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    d69a:	4b1c      	ldr	r3, [pc, #112]	; (d70c <system_gclk_chan_disable+0x8c>)
    d69c:	885b      	ldrh	r3, [r3, #2]
    d69e:	051b      	lsls	r3, r3, #20
    d6a0:	0f1b      	lsrs	r3, r3, #28
    d6a2:	b2db      	uxtb	r3, r3
    d6a4:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    d6a6:	4a19      	ldr	r2, [pc, #100]	; (d70c <system_gclk_chan_disable+0x8c>)
    d6a8:	8853      	ldrh	r3, [r2, #2]
    d6aa:	4919      	ldr	r1, [pc, #100]	; (d710 <system_gclk_chan_disable+0x90>)
    d6ac:	400b      	ands	r3, r1
    d6ae:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    d6b0:	4a16      	ldr	r2, [pc, #88]	; (d70c <system_gclk_chan_disable+0x8c>)
    d6b2:	4b16      	ldr	r3, [pc, #88]	; (d70c <system_gclk_chan_disable+0x8c>)
    d6b4:	885b      	ldrh	r3, [r3, #2]
    d6b6:	b29b      	uxth	r3, r3
    d6b8:	4916      	ldr	r1, [pc, #88]	; (d714 <system_gclk_chan_disable+0x94>)
    d6ba:	400b      	ands	r3, r1
    d6bc:	b29b      	uxth	r3, r3
    d6be:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    d6c0:	46c0      	nop			; (mov r8, r8)
    d6c2:	4b12      	ldr	r3, [pc, #72]	; (d70c <system_gclk_chan_disable+0x8c>)
    d6c4:	885b      	ldrh	r3, [r3, #2]
    d6c6:	b29b      	uxth	r3, r3
    d6c8:	001a      	movs	r2, r3
    d6ca:	2380      	movs	r3, #128	; 0x80
    d6cc:	01db      	lsls	r3, r3, #7
    d6ce:	4013      	ands	r3, r2
    d6d0:	d1f7      	bne.n	d6c2 <system_gclk_chan_disable+0x42>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    d6d2:	4a0e      	ldr	r2, [pc, #56]	; (d70c <system_gclk_chan_disable+0x8c>)
    d6d4:	68fb      	ldr	r3, [r7, #12]
    d6d6:	b2db      	uxtb	r3, r3
    d6d8:	1c19      	adds	r1, r3, #0
    d6da:	230f      	movs	r3, #15
    d6dc:	400b      	ands	r3, r1
    d6de:	b2d9      	uxtb	r1, r3
    d6e0:	8853      	ldrh	r3, [r2, #2]
    d6e2:	1c08      	adds	r0, r1, #0
    d6e4:	210f      	movs	r1, #15
    d6e6:	4001      	ands	r1, r0
    d6e8:	0208      	lsls	r0, r1, #8
    d6ea:	4909      	ldr	r1, [pc, #36]	; (d710 <system_gclk_chan_disable+0x90>)
    d6ec:	400b      	ands	r3, r1
    d6ee:	1c19      	adds	r1, r3, #0
    d6f0:	1c03      	adds	r3, r0, #0
    d6f2:	430b      	orrs	r3, r1
    d6f4:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    d6f6:	4b08      	ldr	r3, [pc, #32]	; (d718 <system_gclk_chan_disable+0x98>)
    d6f8:	447b      	add	r3, pc
    d6fa:	4798      	blx	r3
}
    d6fc:	46c0      	nop			; (mov r8, r8)
    d6fe:	46bd      	mov	sp, r7
    d700:	b004      	add	sp, #16
    d702:	bd80      	pop	{r7, pc}
    d704:	fffffc33 	.word	0xfffffc33
    d708:	40000c02 	.word	0x40000c02
    d70c:	40000c00 	.word	0x40000c00
    d710:	fffff0ff 	.word	0xfffff0ff
    d714:	ffffbfff 	.word	0xffffbfff
    d718:	fffffbe5 	.word	0xfffffbe5

0000d71c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    d71c:	b590      	push	{r4, r7, lr}
    d71e:	b085      	sub	sp, #20
    d720:	af00      	add	r7, sp, #0
    d722:	0002      	movs	r2, r0
    d724:	1dfb      	adds	r3, r7, #7
    d726:	701a      	strb	r2, [r3, #0]
    d728:	4c0f      	ldr	r4, [pc, #60]	; (d768 <system_gclk_chan_get_hz+0x4c>)
    d72a:	447c      	add	r4, pc
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    d72c:	4b0f      	ldr	r3, [pc, #60]	; (d76c <system_gclk_chan_get_hz+0x50>)
    d72e:	447b      	add	r3, pc
    d730:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    d732:	4a0f      	ldr	r2, [pc, #60]	; (d770 <system_gclk_chan_get_hz+0x54>)
    d734:	1dfb      	adds	r3, r7, #7
    d736:	781b      	ldrb	r3, [r3, #0]
    d738:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    d73a:	4b0e      	ldr	r3, [pc, #56]	; (d774 <system_gclk_chan_get_hz+0x58>)
    d73c:	885b      	ldrh	r3, [r3, #2]
    d73e:	051b      	lsls	r3, r3, #20
    d740:	0f1b      	lsrs	r3, r3, #28
    d742:	b2da      	uxtb	r2, r3
    d744:	230f      	movs	r3, #15
    d746:	18fb      	adds	r3, r7, r3
    d748:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    d74a:	4b0b      	ldr	r3, [pc, #44]	; (d778 <system_gclk_chan_get_hz+0x5c>)
    d74c:	447b      	add	r3, pc
    d74e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    d750:	230f      	movs	r3, #15
    d752:	18fb      	adds	r3, r7, r3
    d754:	781b      	ldrb	r3, [r3, #0]
    d756:	0018      	movs	r0, r3
    d758:	4b08      	ldr	r3, [pc, #32]	; (d77c <system_gclk_chan_get_hz+0x60>)
    d75a:	58e3      	ldr	r3, [r4, r3]
    d75c:	4798      	blx	r3
    d75e:	0003      	movs	r3, r0
}
    d760:	0018      	movs	r0, r3
    d762:	46bd      	mov	sp, r7
    d764:	b005      	add	sp, #20
    d766:	bd90      	pop	{r4, r7, pc}
    d768:	000046a6 	.word	0x000046a6
    d76c:	fffffb93 	.word	0xfffffb93
    d770:	40000c02 	.word	0x40000c02
    d774:	40000c00 	.word	0x40000c00
    d778:	fffffb91 	.word	0xfffffb91
    d77c:	000000e0 	.word	0x000000e0

0000d780 <system_pinmux_get_group_from_gpio_pin>:
{
    d780:	b580      	push	{r7, lr}
    d782:	b084      	sub	sp, #16
    d784:	af00      	add	r7, sp, #0
    d786:	0002      	movs	r2, r0
    d788:	1dfb      	adds	r3, r7, #7
    d78a:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    d78c:	230f      	movs	r3, #15
    d78e:	18fb      	adds	r3, r7, r3
    d790:	1dfa      	adds	r2, r7, #7
    d792:	7812      	ldrb	r2, [r2, #0]
    d794:	09d2      	lsrs	r2, r2, #7
    d796:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    d798:	230e      	movs	r3, #14
    d79a:	18fb      	adds	r3, r7, r3
    d79c:	1dfa      	adds	r2, r7, #7
    d79e:	7812      	ldrb	r2, [r2, #0]
    d7a0:	0952      	lsrs	r2, r2, #5
    d7a2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    d7a4:	4b0d      	ldr	r3, [pc, #52]	; (d7dc <system_pinmux_get_group_from_gpio_pin+0x5c>)
    d7a6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    d7a8:	230f      	movs	r3, #15
    d7aa:	18fb      	adds	r3, r7, r3
    d7ac:	781b      	ldrb	r3, [r3, #0]
    d7ae:	2b00      	cmp	r3, #0
    d7b0:	d10f      	bne.n	d7d2 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    d7b2:	230f      	movs	r3, #15
    d7b4:	18fb      	adds	r3, r7, r3
    d7b6:	781b      	ldrb	r3, [r3, #0]
    d7b8:	009b      	lsls	r3, r3, #2
    d7ba:	2210      	movs	r2, #16
    d7bc:	4694      	mov	ip, r2
    d7be:	44bc      	add	ip, r7
    d7c0:	4463      	add	r3, ip
    d7c2:	3b08      	subs	r3, #8
    d7c4:	681a      	ldr	r2, [r3, #0]
    d7c6:	230e      	movs	r3, #14
    d7c8:	18fb      	adds	r3, r7, r3
    d7ca:	781b      	ldrb	r3, [r3, #0]
    d7cc:	01db      	lsls	r3, r3, #7
    d7ce:	18d3      	adds	r3, r2, r3
    d7d0:	e000      	b.n	d7d4 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    d7d2:	2300      	movs	r3, #0
}
    d7d4:	0018      	movs	r0, r3
    d7d6:	46bd      	mov	sp, r7
    d7d8:	b004      	add	sp, #16
    d7da:	bd80      	pop	{r7, pc}
    d7dc:	41004400 	.word	0x41004400

0000d7e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    d7e0:	b580      	push	{r7, lr}
    d7e2:	b088      	sub	sp, #32
    d7e4:	af00      	add	r7, sp, #0
    d7e6:	60f8      	str	r0, [r7, #12]
    d7e8:	60b9      	str	r1, [r7, #8]
    d7ea:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    d7ec:	2300      	movs	r3, #0
    d7ee:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    d7f0:	687b      	ldr	r3, [r7, #4]
    d7f2:	78db      	ldrb	r3, [r3, #3]
    d7f4:	2201      	movs	r2, #1
    d7f6:	4053      	eors	r3, r2
    d7f8:	b2db      	uxtb	r3, r3
    d7fa:	2b00      	cmp	r3, #0
    d7fc:	d035      	beq.n	d86a <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    d7fe:	687b      	ldr	r3, [r7, #4]
    d800:	781b      	ldrb	r3, [r3, #0]
    d802:	2b80      	cmp	r3, #128	; 0x80
    d804:	d00b      	beq.n	d81e <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    d806:	69fb      	ldr	r3, [r7, #28]
    d808:	2280      	movs	r2, #128	; 0x80
    d80a:	0252      	lsls	r2, r2, #9
    d80c:	4313      	orrs	r3, r2
    d80e:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    d810:	687b      	ldr	r3, [r7, #4]
    d812:	781b      	ldrb	r3, [r3, #0]
    d814:	061b      	lsls	r3, r3, #24
    d816:	001a      	movs	r2, r3
    d818:	69fb      	ldr	r3, [r7, #28]
    d81a:	4313      	orrs	r3, r2
    d81c:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    d81e:	687b      	ldr	r3, [r7, #4]
    d820:	785b      	ldrb	r3, [r3, #1]
    d822:	2b00      	cmp	r3, #0
    d824:	d003      	beq.n	d82e <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    d826:	687b      	ldr	r3, [r7, #4]
    d828:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    d82a:	2b02      	cmp	r3, #2
    d82c:	d110      	bne.n	d850 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    d82e:	69fb      	ldr	r3, [r7, #28]
    d830:	2280      	movs	r2, #128	; 0x80
    d832:	0292      	lsls	r2, r2, #10
    d834:	4313      	orrs	r3, r2
    d836:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    d838:	687b      	ldr	r3, [r7, #4]
    d83a:	789b      	ldrb	r3, [r3, #2]
    d83c:	2b00      	cmp	r3, #0
    d83e:	d004      	beq.n	d84a <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    d840:	69fb      	ldr	r3, [r7, #28]
    d842:	2280      	movs	r2, #128	; 0x80
    d844:	02d2      	lsls	r2, r2, #11
    d846:	4313      	orrs	r3, r2
    d848:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    d84a:	68fb      	ldr	r3, [r7, #12]
    d84c:	68ba      	ldr	r2, [r7, #8]
    d84e:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d850:	687b      	ldr	r3, [r7, #4]
    d852:	785b      	ldrb	r3, [r3, #1]
    d854:	2b01      	cmp	r3, #1
    d856:	d003      	beq.n	d860 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    d858:	687b      	ldr	r3, [r7, #4]
    d85a:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d85c:	2b02      	cmp	r3, #2
    d85e:	d107      	bne.n	d870 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    d860:	69fb      	ldr	r3, [r7, #28]
    d862:	4a22      	ldr	r2, [pc, #136]	; (d8ec <_system_pinmux_config+0x10c>)
    d864:	4013      	ands	r3, r2
    d866:	61fb      	str	r3, [r7, #28]
    d868:	e002      	b.n	d870 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    d86a:	68fb      	ldr	r3, [r7, #12]
    d86c:	68ba      	ldr	r2, [r7, #8]
    d86e:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    d870:	68bb      	ldr	r3, [r7, #8]
    d872:	041b      	lsls	r3, r3, #16
    d874:	0c1b      	lsrs	r3, r3, #16
    d876:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    d878:	68bb      	ldr	r3, [r7, #8]
    d87a:	0c1b      	lsrs	r3, r3, #16
    d87c:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d87e:	69ba      	ldr	r2, [r7, #24]
    d880:	69fb      	ldr	r3, [r7, #28]
    d882:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    d884:	22a0      	movs	r2, #160	; 0xa0
    d886:	05d2      	lsls	r2, r2, #23
    d888:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d88a:	68fb      	ldr	r3, [r7, #12]
    d88c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d88e:	697a      	ldr	r2, [r7, #20]
    d890:	69fb      	ldr	r3, [r7, #28]
    d892:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    d894:	22d0      	movs	r2, #208	; 0xd0
    d896:	0612      	lsls	r2, r2, #24
    d898:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    d89a:	68fb      	ldr	r3, [r7, #12]
    d89c:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    d89e:	687b      	ldr	r3, [r7, #4]
    d8a0:	78db      	ldrb	r3, [r3, #3]
    d8a2:	2201      	movs	r2, #1
    d8a4:	4053      	eors	r3, r2
    d8a6:	b2db      	uxtb	r3, r3
    d8a8:	2b00      	cmp	r3, #0
    d8aa:	d01a      	beq.n	d8e2 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    d8ac:	69fa      	ldr	r2, [r7, #28]
    d8ae:	2380      	movs	r3, #128	; 0x80
    d8b0:	02db      	lsls	r3, r3, #11
    d8b2:	4013      	ands	r3, r2
    d8b4:	d00a      	beq.n	d8cc <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    d8b6:	687b      	ldr	r3, [r7, #4]
    d8b8:	789b      	ldrb	r3, [r3, #2]
    d8ba:	2b01      	cmp	r3, #1
    d8bc:	d103      	bne.n	d8c6 <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    d8be:	68fb      	ldr	r3, [r7, #12]
    d8c0:	68ba      	ldr	r2, [r7, #8]
    d8c2:	619a      	str	r2, [r3, #24]
    d8c4:	e002      	b.n	d8cc <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    d8c6:	68fb      	ldr	r3, [r7, #12]
    d8c8:	68ba      	ldr	r2, [r7, #8]
    d8ca:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d8cc:	687b      	ldr	r3, [r7, #4]
    d8ce:	785b      	ldrb	r3, [r3, #1]
    d8d0:	2b01      	cmp	r3, #1
    d8d2:	d003      	beq.n	d8dc <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    d8d4:	687b      	ldr	r3, [r7, #4]
    d8d6:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    d8d8:	2b02      	cmp	r3, #2
    d8da:	d102      	bne.n	d8e2 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    d8dc:	68fb      	ldr	r3, [r7, #12]
    d8de:	68ba      	ldr	r2, [r7, #8]
    d8e0:	609a      	str	r2, [r3, #8]
		}
	}
}
    d8e2:	46c0      	nop			; (mov r8, r8)
    d8e4:	46bd      	mov	sp, r7
    d8e6:	b008      	add	sp, #32
    d8e8:	bd80      	pop	{r7, pc}
    d8ea:	46c0      	nop			; (mov r8, r8)
    d8ec:	fffbffff 	.word	0xfffbffff

0000d8f0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    d8f0:	b580      	push	{r7, lr}
    d8f2:	b084      	sub	sp, #16
    d8f4:	af00      	add	r7, sp, #0
    d8f6:	0002      	movs	r2, r0
    d8f8:	6039      	str	r1, [r7, #0]
    d8fa:	1dfb      	adds	r3, r7, #7
    d8fc:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    d8fe:	1dfb      	adds	r3, r7, #7
    d900:	781b      	ldrb	r3, [r3, #0]
    d902:	0018      	movs	r0, r3
    d904:	4b0b      	ldr	r3, [pc, #44]	; (d934 <system_pinmux_pin_set_config+0x44>)
    d906:	447b      	add	r3, pc
    d908:	4798      	blx	r3
    d90a:	0003      	movs	r3, r0
    d90c:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    d90e:	1dfb      	adds	r3, r7, #7
    d910:	781b      	ldrb	r3, [r3, #0]
    d912:	221f      	movs	r2, #31
    d914:	4013      	ands	r3, r2
    d916:	2201      	movs	r2, #1
    d918:	409a      	lsls	r2, r3
    d91a:	0013      	movs	r3, r2
    d91c:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    d91e:	683a      	ldr	r2, [r7, #0]
    d920:	68b9      	ldr	r1, [r7, #8]
    d922:	68fb      	ldr	r3, [r7, #12]
    d924:	0018      	movs	r0, r3
    d926:	4b04      	ldr	r3, [pc, #16]	; (d938 <system_pinmux_pin_set_config+0x48>)
    d928:	447b      	add	r3, pc
    d92a:	4798      	blx	r3
}
    d92c:	46c0      	nop			; (mov r8, r8)
    d92e:	46bd      	mov	sp, r7
    d930:	b004      	add	sp, #16
    d932:	bd80      	pop	{r7, pc}
    d934:	fffffe77 	.word	0xfffffe77
    d938:	fffffeb5 	.word	0xfffffeb5

0000d93c <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    d93c:	b580      	push	{r7, lr}
    d93e:	af00      	add	r7, sp, #0
	return;
    d940:	46c0      	nop			; (mov r8, r8)
}
    d942:	46bd      	mov	sp, r7
    d944:	bd80      	pop	{r7, pc}
	...

0000d948 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    d948:	b5b0      	push	{r4, r5, r7, lr}
    d94a:	af00      	add	r7, sp, #0
    d94c:	4c09      	ldr	r4, [pc, #36]	; (d974 <system_init+0x2c>)
    d94e:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    d950:	4b09      	ldr	r3, [pc, #36]	; (d978 <system_init+0x30>)
    d952:	58e3      	ldr	r3, [r4, r3]
    d954:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    d956:	4b09      	ldr	r3, [pc, #36]	; (d97c <system_init+0x34>)
    d958:	58e3      	ldr	r3, [r4, r3]
    d95a:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    d95c:	4b08      	ldr	r3, [pc, #32]	; (d980 <system_init+0x38>)
    d95e:	58e3      	ldr	r3, [r4, r3]
    d960:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    d962:	4b08      	ldr	r3, [pc, #32]	; (d984 <system_init+0x3c>)
    d964:	58e3      	ldr	r3, [r4, r3]
    d966:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    d968:	4b07      	ldr	r3, [pc, #28]	; (d988 <system_init+0x40>)
    d96a:	58e3      	ldr	r3, [r4, r3]
    d96c:	4798      	blx	r3
}
    d96e:	46c0      	nop			; (mov r8, r8)
    d970:	46bd      	mov	sp, r7
    d972:	bdb0      	pop	{r4, r5, r7, pc}
    d974:	00004482 	.word	0x00004482
    d978:	0000024c 	.word	0x0000024c
    d97c:	000001c0 	.word	0x000001c0
    d980:	00000244 	.word	0x00000244
    d984:	0000016c 	.word	0x0000016c
    d988:	000000d4 	.word	0x000000d4

0000d98c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    d98c:	b590      	push	{r4, r7, lr}
    d98e:	b083      	sub	sp, #12
    d990:	af00      	add	r7, sp, #0
    d992:	4c34      	ldr	r4, [pc, #208]	; (da64 <Reset_Handler+0xd8>)
    d994:	447c      	add	r4, pc
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    d996:	4b34      	ldr	r3, [pc, #208]	; (da68 <Reset_Handler+0xdc>)
    d998:	58e3      	ldr	r3, [r4, r3]
    d99a:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    d99c:	4b33      	ldr	r3, [pc, #204]	; (da6c <Reset_Handler+0xe0>)
    d99e:	58e3      	ldr	r3, [r4, r3]
    d9a0:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    d9a2:	687a      	ldr	r2, [r7, #4]
    d9a4:	683b      	ldr	r3, [r7, #0]
    d9a6:	429a      	cmp	r2, r3
    d9a8:	d00d      	beq.n	d9c6 <Reset_Handler+0x3a>
                for (; pDest < &_erelocate;) {
    d9aa:	e007      	b.n	d9bc <Reset_Handler+0x30>
                        *pDest++ = *pSrc++;
    d9ac:	683b      	ldr	r3, [r7, #0]
    d9ae:	1d1a      	adds	r2, r3, #4
    d9b0:	603a      	str	r2, [r7, #0]
    d9b2:	687a      	ldr	r2, [r7, #4]
    d9b4:	1d11      	adds	r1, r2, #4
    d9b6:	6079      	str	r1, [r7, #4]
    d9b8:	6812      	ldr	r2, [r2, #0]
    d9ba:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    d9bc:	683b      	ldr	r3, [r7, #0]
    d9be:	4a2c      	ldr	r2, [pc, #176]	; (da70 <Reset_Handler+0xe4>)
    d9c0:	58a2      	ldr	r2, [r4, r2]
    d9c2:	4293      	cmp	r3, r2
    d9c4:	d3f2      	bcc.n	d9ac <Reset_Handler+0x20>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    d9c6:	4b2b      	ldr	r3, [pc, #172]	; (da74 <Reset_Handler+0xe8>)
    d9c8:	58e3      	ldr	r3, [r4, r3]
    d9ca:	603b      	str	r3, [r7, #0]
    d9cc:	e004      	b.n	d9d8 <Reset_Handler+0x4c>
                *pDest++ = 0;
    d9ce:	683b      	ldr	r3, [r7, #0]
    d9d0:	1d1a      	adds	r2, r3, #4
    d9d2:	603a      	str	r2, [r7, #0]
    d9d4:	2200      	movs	r2, #0
    d9d6:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    d9d8:	683b      	ldr	r3, [r7, #0]
    d9da:	4a27      	ldr	r2, [pc, #156]	; (da78 <Reset_Handler+0xec>)
    d9dc:	58a2      	ldr	r2, [r4, r2]
    d9de:	4293      	cmp	r3, r2
    d9e0:	d3f5      	bcc.n	d9ce <Reset_Handler+0x42>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    d9e2:	4b26      	ldr	r3, [pc, #152]	; (da7c <Reset_Handler+0xf0>)
    d9e4:	58e3      	ldr	r3, [r4, r3]
    d9e6:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    d9e8:	4b25      	ldr	r3, [pc, #148]	; (da80 <Reset_Handler+0xf4>)
    d9ea:	687a      	ldr	r2, [r7, #4]
    d9ec:	21ff      	movs	r1, #255	; 0xff
    d9ee:	438a      	bics	r2, r1
    d9f0:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    d9f2:	4a24      	ldr	r2, [pc, #144]	; (da84 <Reset_Handler+0xf8>)
    d9f4:	2390      	movs	r3, #144	; 0x90
    d9f6:	005b      	lsls	r3, r3, #1
    d9f8:	2102      	movs	r1, #2
    d9fa:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    d9fc:	4a22      	ldr	r2, [pc, #136]	; (da88 <Reset_Handler+0xfc>)
    d9fe:	78d3      	ldrb	r3, [r2, #3]
    da00:	2103      	movs	r1, #3
    da02:	438b      	bics	r3, r1
    da04:	1c19      	adds	r1, r3, #0
    da06:	2302      	movs	r3, #2
    da08:	430b      	orrs	r3, r1
    da0a:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    da0c:	4a1e      	ldr	r2, [pc, #120]	; (da88 <Reset_Handler+0xfc>)
    da0e:	78d3      	ldrb	r3, [r2, #3]
    da10:	210c      	movs	r1, #12
    da12:	438b      	bics	r3, r1
    da14:	1c19      	adds	r1, r3, #0
    da16:	2308      	movs	r3, #8
    da18:	430b      	orrs	r3, r1
    da1a:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    da1c:	4a1b      	ldr	r2, [pc, #108]	; (da8c <Reset_Handler+0x100>)
    da1e:	7b93      	ldrb	r3, [r2, #14]
    da20:	2130      	movs	r1, #48	; 0x30
    da22:	438b      	bics	r3, r1
    da24:	1c19      	adds	r1, r3, #0
    da26:	2320      	movs	r3, #32
    da28:	430b      	orrs	r3, r1
    da2a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    da2c:	4a17      	ldr	r2, [pc, #92]	; (da8c <Reset_Handler+0x100>)
    da2e:	7b93      	ldrb	r3, [r2, #14]
    da30:	210c      	movs	r1, #12
    da32:	438b      	bics	r3, r1
    da34:	1c19      	adds	r1, r3, #0
    da36:	2308      	movs	r3, #8
    da38:	430b      	orrs	r3, r1
    da3a:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    da3c:	4a13      	ldr	r2, [pc, #76]	; (da8c <Reset_Handler+0x100>)
    da3e:	7b93      	ldrb	r3, [r2, #14]
    da40:	2103      	movs	r1, #3
    da42:	438b      	bics	r3, r1
    da44:	1c19      	adds	r1, r3, #0
    da46:	2302      	movs	r3, #2
    da48:	430b      	orrs	r3, r1
    da4a:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    da4c:	4a10      	ldr	r2, [pc, #64]	; (da90 <Reset_Handler+0x104>)
    da4e:	6853      	ldr	r3, [r2, #4]
    da50:	2180      	movs	r1, #128	; 0x80
    da52:	430b      	orrs	r3, r1
    da54:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    da56:	4b0f      	ldr	r3, [pc, #60]	; (da94 <Reset_Handler+0x108>)
    da58:	58e3      	ldr	r3, [r4, r3]
    da5a:	4798      	blx	r3

        /* Branch to main function */
        main();
    da5c:	4b0e      	ldr	r3, [pc, #56]	; (da98 <Reset_Handler+0x10c>)
    da5e:	58e3      	ldr	r3, [r4, r3]
    da60:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    da62:	e7fe      	b.n	da62 <Reset_Handler+0xd6>
    da64:	0000443c 	.word	0x0000443c
    da68:	0000006c 	.word	0x0000006c
    da6c:	00000090 	.word	0x00000090
    da70:	00000274 	.word	0x00000274
    da74:	00000080 	.word	0x00000080
    da78:	0000020c 	.word	0x0000020c
    da7c:	00000050 	.word	0x00000050
    da80:	e000ed00 	.word	0xe000ed00
    da84:	41007000 	.word	0x41007000
    da88:	41005000 	.word	0x41005000
    da8c:	41004800 	.word	0x41004800
    da90:	41004000 	.word	0x41004000
    da94:	000000fc 	.word	0x000000fc
    da98:	000001f8 	.word	0x000001f8

0000da9c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    da9c:	b580      	push	{r7, lr}
    da9e:	af00      	add	r7, sp, #0
        while (1) {
    daa0:	e7fe      	b.n	daa0 <Dummy_Handler+0x4>
	...

0000daa4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    daa4:	b590      	push	{r4, r7, lr}
    daa6:	b087      	sub	sp, #28
    daa8:	af00      	add	r7, sp, #0
    daaa:	60f8      	str	r0, [r7, #12]
    daac:	60b9      	str	r1, [r7, #8]
    daae:	607a      	str	r2, [r7, #4]
    dab0:	4c11      	ldr	r4, [pc, #68]	; (daf8 <_read+0x54>)
    dab2:	447c      	add	r4, pc
	int nChars = 0;
    dab4:	2300      	movs	r3, #0
    dab6:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    dab8:	68fb      	ldr	r3, [r7, #12]
    daba:	2b00      	cmp	r3, #0
    dabc:	d014      	beq.n	dae8 <_read+0x44>
		return -1;
    dabe:	2301      	movs	r3, #1
    dac0:	425b      	negs	r3, r3
    dac2:	e015      	b.n	daf0 <_read+0x4c>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    dac4:	4b0d      	ldr	r3, [pc, #52]	; (dafc <_read+0x58>)
    dac6:	58e3      	ldr	r3, [r4, r3]
    dac8:	681a      	ldr	r2, [r3, #0]
    daca:	4b0d      	ldr	r3, [pc, #52]	; (db00 <_read+0x5c>)
    dacc:	58e3      	ldr	r3, [r4, r3]
    dace:	681b      	ldr	r3, [r3, #0]
    dad0:	68b9      	ldr	r1, [r7, #8]
    dad2:	0018      	movs	r0, r3
    dad4:	4790      	blx	r2
		ptr++;
    dad6:	68bb      	ldr	r3, [r7, #8]
    dad8:	3301      	adds	r3, #1
    dada:	60bb      	str	r3, [r7, #8]
		nChars++;
    dadc:	697b      	ldr	r3, [r7, #20]
    dade:	3301      	adds	r3, #1
    dae0:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    dae2:	687b      	ldr	r3, [r7, #4]
    dae4:	3b01      	subs	r3, #1
    dae6:	607b      	str	r3, [r7, #4]
    dae8:	687b      	ldr	r3, [r7, #4]
    daea:	2b00      	cmp	r3, #0
    daec:	dcea      	bgt.n	dac4 <_read+0x20>
	}
	return nChars;
    daee:	697b      	ldr	r3, [r7, #20]
}
    daf0:	0018      	movs	r0, r3
    daf2:	46bd      	mov	sp, r7
    daf4:	b007      	add	sp, #28
    daf6:	bd90      	pop	{r4, r7, pc}
    daf8:	0000431e 	.word	0x0000431e
    dafc:	000000f0 	.word	0x000000f0
    db00:	000001fc 	.word	0x000001fc

0000db04 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    db04:	b590      	push	{r4, r7, lr}
    db06:	b087      	sub	sp, #28
    db08:	af00      	add	r7, sp, #0
    db0a:	60f8      	str	r0, [r7, #12]
    db0c:	60b9      	str	r1, [r7, #8]
    db0e:	607a      	str	r2, [r7, #4]
    db10:	4c17      	ldr	r4, [pc, #92]	; (db70 <_write+0x6c>)
    db12:	447c      	add	r4, pc
	int nChars = 0;
    db14:	2300      	movs	r3, #0
    db16:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    db18:	68fb      	ldr	r3, [r7, #12]
    db1a:	2b01      	cmp	r3, #1
    db1c:	d01f      	beq.n	db5e <_write+0x5a>
    db1e:	68fb      	ldr	r3, [r7, #12]
    db20:	2b02      	cmp	r3, #2
    db22:	d01c      	beq.n	db5e <_write+0x5a>
    db24:	68fb      	ldr	r3, [r7, #12]
    db26:	2b03      	cmp	r3, #3
    db28:	d019      	beq.n	db5e <_write+0x5a>
		return -1;
    db2a:	2301      	movs	r3, #1
    db2c:	425b      	negs	r3, r3
    db2e:	e01a      	b.n	db66 <_write+0x62>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    db30:	4b10      	ldr	r3, [pc, #64]	; (db74 <_write+0x70>)
    db32:	58e3      	ldr	r3, [r4, r3]
    db34:	681a      	ldr	r2, [r3, #0]
    db36:	4b10      	ldr	r3, [pc, #64]	; (db78 <_write+0x74>)
    db38:	58e3      	ldr	r3, [r4, r3]
    db3a:	6818      	ldr	r0, [r3, #0]
    db3c:	68bb      	ldr	r3, [r7, #8]
    db3e:	1c59      	adds	r1, r3, #1
    db40:	60b9      	str	r1, [r7, #8]
    db42:	781b      	ldrb	r3, [r3, #0]
    db44:	0019      	movs	r1, r3
    db46:	4790      	blx	r2
    db48:	1e03      	subs	r3, r0, #0
    db4a:	da02      	bge.n	db52 <_write+0x4e>
			return -1;
    db4c:	2301      	movs	r3, #1
    db4e:	425b      	negs	r3, r3
    db50:	e009      	b.n	db66 <_write+0x62>
		}
		++nChars;
    db52:	697b      	ldr	r3, [r7, #20]
    db54:	3301      	adds	r3, #1
    db56:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    db58:	687b      	ldr	r3, [r7, #4]
    db5a:	3b01      	subs	r3, #1
    db5c:	607b      	str	r3, [r7, #4]
    db5e:	687b      	ldr	r3, [r7, #4]
    db60:	2b00      	cmp	r3, #0
    db62:	d1e5      	bne.n	db30 <_write+0x2c>
	}
	return nChars;
    db64:	697b      	ldr	r3, [r7, #20]
}
    db66:	0018      	movs	r0, r3
    db68:	46bd      	mov	sp, r7
    db6a:	b007      	add	sp, #28
    db6c:	bd90      	pop	{r4, r7, pc}
    db6e:	46c0      	nop			; (mov r8, r8)
    db70:	000042be 	.word	0x000042be
    db74:	0000011c 	.word	0x0000011c
    db78:	000001fc 	.word	0x000001fc

0000db7c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    db7c:	b580      	push	{r7, lr}
    db7e:	b084      	sub	sp, #16
    db80:	af00      	add	r7, sp, #0
    db82:	6078      	str	r0, [r7, #4]
    db84:	490e      	ldr	r1, [pc, #56]	; (dbc0 <_sbrk+0x44>)
    db86:	4479      	add	r1, pc
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    db88:	4b0e      	ldr	r3, [pc, #56]	; (dbc4 <_sbrk+0x48>)
    db8a:	447b      	add	r3, pc
    db8c:	681b      	ldr	r3, [r3, #0]
    db8e:	2b00      	cmp	r3, #0
    db90:	d104      	bne.n	db9c <_sbrk+0x20>
		heap = (unsigned char *)&_end;
    db92:	4b0d      	ldr	r3, [pc, #52]	; (dbc8 <_sbrk+0x4c>)
    db94:	447b      	add	r3, pc
    db96:	4a0d      	ldr	r2, [pc, #52]	; (dbcc <_sbrk+0x50>)
    db98:	588a      	ldr	r2, [r1, r2]
    db9a:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    db9c:	4b0c      	ldr	r3, [pc, #48]	; (dbd0 <_sbrk+0x54>)
    db9e:	447b      	add	r3, pc
    dba0:	681b      	ldr	r3, [r3, #0]
    dba2:	60fb      	str	r3, [r7, #12]

	heap += incr;
    dba4:	4b0b      	ldr	r3, [pc, #44]	; (dbd4 <_sbrk+0x58>)
    dba6:	447b      	add	r3, pc
    dba8:	681a      	ldr	r2, [r3, #0]
    dbaa:	687b      	ldr	r3, [r7, #4]
    dbac:	18d2      	adds	r2, r2, r3
    dbae:	4b0a      	ldr	r3, [pc, #40]	; (dbd8 <_sbrk+0x5c>)
    dbb0:	447b      	add	r3, pc
    dbb2:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    dbb4:	68fb      	ldr	r3, [r7, #12]
}
    dbb6:	0018      	movs	r0, r3
    dbb8:	46bd      	mov	sp, r7
    dbba:	b004      	add	sp, #16
    dbbc:	bd80      	pop	{r7, pc}
    dbbe:	46c0      	nop			; (mov r8, r8)
    dbc0:	0000424a 	.word	0x0000424a
    dbc4:	1fff2aca 	.word	0x1fff2aca
    dbc8:	1fff2ac0 	.word	0x1fff2ac0
    dbcc:	00000280 	.word	0x00000280
    dbd0:	1fff2ab6 	.word	0x1fff2ab6
    dbd4:	1fff2aae 	.word	0x1fff2aae
    dbd8:	1fff2aa4 	.word	0x1fff2aa4

0000dbdc <_close>:
{
	return -1;
}

extern int _close(int file)
{
    dbdc:	b580      	push	{r7, lr}
    dbde:	b082      	sub	sp, #8
    dbe0:	af00      	add	r7, sp, #0
    dbe2:	6078      	str	r0, [r7, #4]
	return -1;
    dbe4:	2301      	movs	r3, #1
    dbe6:	425b      	negs	r3, r3
}
    dbe8:	0018      	movs	r0, r3
    dbea:	46bd      	mov	sp, r7
    dbec:	b002      	add	sp, #8
    dbee:	bd80      	pop	{r7, pc}

0000dbf0 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    dbf0:	b580      	push	{r7, lr}
    dbf2:	b082      	sub	sp, #8
    dbf4:	af00      	add	r7, sp, #0
    dbf6:	6078      	str	r0, [r7, #4]
    dbf8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    dbfa:	683b      	ldr	r3, [r7, #0]
    dbfc:	2280      	movs	r2, #128	; 0x80
    dbfe:	0192      	lsls	r2, r2, #6
    dc00:	605a      	str	r2, [r3, #4]

	return 0;
    dc02:	2300      	movs	r3, #0
}
    dc04:	0018      	movs	r0, r3
    dc06:	46bd      	mov	sp, r7
    dc08:	b002      	add	sp, #8
    dc0a:	bd80      	pop	{r7, pc}

0000dc0c <_isatty>:

extern int _isatty(int file)
{
    dc0c:	b580      	push	{r7, lr}
    dc0e:	b082      	sub	sp, #8
    dc10:	af00      	add	r7, sp, #0
    dc12:	6078      	str	r0, [r7, #4]
	return 1;
    dc14:	2301      	movs	r3, #1
}
    dc16:	0018      	movs	r0, r3
    dc18:	46bd      	mov	sp, r7
    dc1a:	b002      	add	sp, #8
    dc1c:	bd80      	pop	{r7, pc}

0000dc1e <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    dc1e:	b580      	push	{r7, lr}
    dc20:	b084      	sub	sp, #16
    dc22:	af00      	add	r7, sp, #0
    dc24:	60f8      	str	r0, [r7, #12]
    dc26:	60b9      	str	r1, [r7, #8]
    dc28:	607a      	str	r2, [r7, #4]
	return 0;
    dc2a:	2300      	movs	r3, #0
}
    dc2c:	0018      	movs	r0, r3
    dc2e:	46bd      	mov	sp, r7
    dc30:	b004      	add	sp, #16
    dc32:	bd80      	pop	{r7, pc}

0000dc34 <rtc_calendar_get_time_defaults>:
{
    dc34:	b580      	push	{r7, lr}
    dc36:	b082      	sub	sp, #8
    dc38:	af00      	add	r7, sp, #0
    dc3a:	6078      	str	r0, [r7, #4]
	time->second = 0;
    dc3c:	687b      	ldr	r3, [r7, #4]
    dc3e:	2200      	movs	r2, #0
    dc40:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    dc42:	687b      	ldr	r3, [r7, #4]
    dc44:	2200      	movs	r2, #0
    dc46:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    dc48:	687b      	ldr	r3, [r7, #4]
    dc4a:	2200      	movs	r2, #0
    dc4c:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    dc4e:	687b      	ldr	r3, [r7, #4]
    dc50:	2200      	movs	r2, #0
    dc52:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    dc54:	687b      	ldr	r3, [r7, #4]
    dc56:	2201      	movs	r2, #1
    dc58:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    dc5a:	687b      	ldr	r3, [r7, #4]
    dc5c:	2201      	movs	r2, #1
    dc5e:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    dc60:	687b      	ldr	r3, [r7, #4]
    dc62:	22fa      	movs	r2, #250	; 0xfa
    dc64:	00d2      	lsls	r2, r2, #3
    dc66:	80da      	strh	r2, [r3, #6]
}
    dc68:	46c0      	nop			; (mov r8, r8)
    dc6a:	46bd      	mov	sp, r7
    dc6c:	b002      	add	sp, #8
    dc6e:	bd80      	pop	{r7, pc}

0000dc70 <rtc_calendar_get_config_defaults>:
{
    dc70:	b590      	push	{r4, r7, lr}
    dc72:	b087      	sub	sp, #28
    dc74:	af00      	add	r7, sp, #0
    dc76:	6078      	str	r0, [r7, #4]
    dc78:	4c26      	ldr	r4, [pc, #152]	; (dd14 <rtc_calendar_get_config_defaults+0xa4>)
    dc7a:	447c      	add	r4, pc
	rtc_calendar_get_time_defaults(&time);
    dc7c:	230c      	movs	r3, #12
    dc7e:	18fb      	adds	r3, r7, r3
    dc80:	0018      	movs	r0, r3
    dc82:	4b25      	ldr	r3, [pc, #148]	; (dd18 <rtc_calendar_get_config_defaults+0xa8>)
    dc84:	447b      	add	r3, pc
    dc86:	4798      	blx	r3
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    dc88:	687b      	ldr	r3, [r7, #4]
    dc8a:	22a0      	movs	r2, #160	; 0xa0
    dc8c:	0112      	lsls	r2, r2, #4
    dc8e:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    dc90:	687b      	ldr	r3, [r7, #4]
    dc92:	2200      	movs	r2, #0
    dc94:	709a      	strb	r2, [r3, #2]
	config->continuously_update = false;
    dc96:	687b      	ldr	r3, [r7, #4]
    dc98:	2200      	movs	r2, #0
    dc9a:	70da      	strb	r2, [r3, #3]
	config->clock_24h           = false;
    dc9c:	687b      	ldr	r3, [r7, #4]
    dc9e:	2200      	movs	r2, #0
    dca0:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    dca2:	687b      	ldr	r3, [r7, #4]
    dca4:	22fa      	movs	r2, #250	; 0xfa
    dca6:	00d2      	lsls	r2, r2, #3
    dca8:	80da      	strh	r2, [r3, #6]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    dcaa:	2317      	movs	r3, #23
    dcac:	18fb      	adds	r3, r7, r3
    dcae:	2200      	movs	r2, #0
    dcb0:	701a      	strb	r2, [r3, #0]
    dcb2:	e026      	b.n	dd02 <rtc_calendar_get_config_defaults+0x92>
		config->alarm[i].time = time;
    dcb4:	2317      	movs	r3, #23
    dcb6:	18fb      	adds	r3, r7, r3
    dcb8:	781a      	ldrb	r2, [r3, #0]
    dcba:	6879      	ldr	r1, [r7, #4]
    dcbc:	2008      	movs	r0, #8
    dcbe:	0013      	movs	r3, r2
    dcc0:	009b      	lsls	r3, r3, #2
    dcc2:	189b      	adds	r3, r3, r2
    dcc4:	005b      	lsls	r3, r3, #1
    dcc6:	18cb      	adds	r3, r1, r3
    dcc8:	181a      	adds	r2, r3, r0
    dcca:	230c      	movs	r3, #12
    dccc:	18fb      	adds	r3, r7, r3
    dcce:	0010      	movs	r0, r2
    dcd0:	0019      	movs	r1, r3
    dcd2:	2308      	movs	r3, #8
    dcd4:	001a      	movs	r2, r3
    dcd6:	4b11      	ldr	r3, [pc, #68]	; (dd1c <rtc_calendar_get_config_defaults+0xac>)
    dcd8:	58e3      	ldr	r3, [r4, r3]
    dcda:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    dcdc:	2317      	movs	r3, #23
    dcde:	18fb      	adds	r3, r7, r3
    dce0:	781a      	ldrb	r2, [r3, #0]
    dce2:	6879      	ldr	r1, [r7, #4]
    dce4:	0013      	movs	r3, r2
    dce6:	009b      	lsls	r3, r3, #2
    dce8:	189b      	adds	r3, r3, r2
    dcea:	005b      	lsls	r3, r3, #1
    dcec:	18cb      	adds	r3, r1, r3
    dcee:	3310      	adds	r3, #16
    dcf0:	2206      	movs	r2, #6
    dcf2:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    dcf4:	2317      	movs	r3, #23
    dcf6:	18fb      	adds	r3, r7, r3
    dcf8:	781a      	ldrb	r2, [r3, #0]
    dcfa:	2317      	movs	r3, #23
    dcfc:	18fb      	adds	r3, r7, r3
    dcfe:	3201      	adds	r2, #1
    dd00:	701a      	strb	r2, [r3, #0]
    dd02:	2317      	movs	r3, #23
    dd04:	18fb      	adds	r3, r7, r3
    dd06:	781b      	ldrb	r3, [r3, #0]
    dd08:	2b00      	cmp	r3, #0
    dd0a:	d0d3      	beq.n	dcb4 <rtc_calendar_get_config_defaults+0x44>
}
    dd0c:	46c0      	nop			; (mov r8, r8)
    dd0e:	46bd      	mov	sp, r7
    dd10:	b007      	add	sp, #28
    dd12:	bd90      	pop	{r4, r7, pc}
    dd14:	00004156 	.word	0x00004156
    dd18:	ffffffad 	.word	0xffffffad
    dd1c:	0000008c 	.word	0x0000008c

0000dd20 <configure_rtc_calendar>:
#if (SAM0)
# include <rtc_calendar.h>
struct rtc_module rtc_instance;

static void configure_rtc_calendar(void)
{
    dd20:	b590      	push	{r4, r7, lr}
    dd22:	b089      	sub	sp, #36	; 0x24
    dd24:	af00      	add	r7, sp, #0
    dd26:	4c20      	ldr	r4, [pc, #128]	; (dda8 <configure_rtc_calendar+0x88>)
    dd28:	447c      	add	r4, pc
	/* Initialize RTC in calendar mode. */
	struct rtc_calendar_config config_rtc_calendar;

	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    dd2a:	230c      	movs	r3, #12
    dd2c:	18fb      	adds	r3, r7, r3
    dd2e:	0018      	movs	r0, r3
    dd30:	4b1e      	ldr	r3, [pc, #120]	; (ddac <configure_rtc_calendar+0x8c>)
    dd32:	447b      	add	r3, pc
    dd34:	4798      	blx	r3

	struct rtc_calendar_time init_time;
	rtc_calendar_get_time_defaults(&init_time);
    dd36:	1d3b      	adds	r3, r7, #4
    dd38:	0018      	movs	r0, r3
    dd3a:	4b1d      	ldr	r3, [pc, #116]	; (ddb0 <configure_rtc_calendar+0x90>)
    dd3c:	447b      	add	r3, pc
    dd3e:	4798      	blx	r3
	init_time.year   = 2014;
    dd40:	1d3b      	adds	r3, r7, #4
    dd42:	4a1c      	ldr	r2, [pc, #112]	; (ddb4 <configure_rtc_calendar+0x94>)
    dd44:	80da      	strh	r2, [r3, #6]
	init_time.month  = 1;
    dd46:	1d3b      	adds	r3, r7, #4
    dd48:	2201      	movs	r2, #1
    dd4a:	715a      	strb	r2, [r3, #5]
	init_time.day    = 1;
    dd4c:	1d3b      	adds	r3, r7, #4
    dd4e:	2201      	movs	r2, #1
    dd50:	711a      	strb	r2, [r3, #4]
	init_time.hour   = 0;
    dd52:	1d3b      	adds	r3, r7, #4
    dd54:	2200      	movs	r2, #0
    dd56:	709a      	strb	r2, [r3, #2]
	init_time.minute = 0;
    dd58:	1d3b      	adds	r3, r7, #4
    dd5a:	2200      	movs	r2, #0
    dd5c:	705a      	strb	r2, [r3, #1]
	init_time.second = 4;
    dd5e:	1d3b      	adds	r3, r7, #4
    dd60:	2204      	movs	r2, #4
    dd62:	701a      	strb	r2, [r3, #0]

	config_rtc_calendar.clock_24h     = true;
    dd64:	230c      	movs	r3, #12
    dd66:	18fb      	adds	r3, r7, r3
    dd68:	2201      	movs	r2, #1
    dd6a:	711a      	strb	r2, [r3, #4]
	config_rtc_calendar.alarm[0].time = init_time;
    dd6c:	230c      	movs	r3, #12
    dd6e:	18fb      	adds	r3, r7, r3
    dd70:	1d3a      	adds	r2, r7, #4
    dd72:	3308      	adds	r3, #8
    dd74:	ca03      	ldmia	r2!, {r0, r1}
    dd76:	c303      	stmia	r3!, {r0, r1}
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    dd78:	230c      	movs	r3, #12
    dd7a:	18fb      	adds	r3, r7, r3
    dd7c:	2206      	movs	r2, #6
    dd7e:	741a      	strb	r2, [r3, #16]

	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    dd80:	230c      	movs	r3, #12
    dd82:	18fa      	adds	r2, r7, r3
    dd84:	490c      	ldr	r1, [pc, #48]	; (ddb8 <configure_rtc_calendar+0x98>)
    dd86:	4b0d      	ldr	r3, [pc, #52]	; (ddbc <configure_rtc_calendar+0x9c>)
    dd88:	58e3      	ldr	r3, [r4, r3]
    dd8a:	0018      	movs	r0, r3
    dd8c:	4b0c      	ldr	r3, [pc, #48]	; (ddc0 <configure_rtc_calendar+0xa0>)
    dd8e:	58e3      	ldr	r3, [r4, r3]
    dd90:	4798      	blx	r3

	rtc_calendar_enable(&rtc_instance);
    dd92:	4b0a      	ldr	r3, [pc, #40]	; (ddbc <configure_rtc_calendar+0x9c>)
    dd94:	58e3      	ldr	r3, [r4, r3]
    dd96:	0018      	movs	r0, r3
    dd98:	4b0a      	ldr	r3, [pc, #40]	; (ddc4 <configure_rtc_calendar+0xa4>)
    dd9a:	58e3      	ldr	r3, [r4, r3]
    dd9c:	4798      	blx	r3
}
    dd9e:	46c0      	nop			; (mov r8, r8)
    dda0:	46bd      	mov	sp, r7
    dda2:	b009      	add	sp, #36	; 0x24
    dda4:	bd90      	pop	{r4, r7, pc}
    dda6:	46c0      	nop			; (mov r8, r8)
    dda8:	000040a8 	.word	0x000040a8
    ddac:	ffffff3b 	.word	0xffffff3b
    ddb0:	fffffef5 	.word	0xfffffef5
    ddb4:	000007de 	.word	0x000007de
    ddb8:	40001400 	.word	0x40001400
    ddbc:	00000030 	.word	0x00000030
    ddc0:	000000d0 	.word	0x000000d0
    ddc4:	00000058 	.word	0x00000058

0000ddc8 <disk_initialize>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
    ddc8:	b5b0      	push	{r4, r5, r7, lr}
    ddca:	b084      	sub	sp, #16
    ddcc:	af00      	add	r7, sp, #0
    ddce:	0002      	movs	r2, r0
    ddd0:	1dfb      	adds	r3, r7, #7
    ddd2:	701a      	strb	r2, [r3, #0]
    ddd4:	4c1d      	ldr	r4, [pc, #116]	; (de4c <disk_initialize+0x84>)
    ddd6:	447c      	add	r4, pc
	/* Default RTC configuration, 24-hour mode */
	rtc_set_hour_mode(RTC, 0);
#endif

#if (SAMD20 || SAMD21 || SAMR21)
	configure_rtc_calendar();
    ddd8:	4b1d      	ldr	r3, [pc, #116]	; (de50 <disk_initialize+0x88>)
    ddda:	447b      	add	r3, pc
    dddc:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
    ddde:	1dfb      	adds	r3, r7, #7
    dde0:	781b      	ldrb	r3, [r3, #0]
    dde2:	2b01      	cmp	r3, #1
    dde4:	d901      	bls.n	ddea <disk_initialize+0x22>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
    dde6:	2301      	movs	r3, #1
    dde8:	e02b      	b.n	de42 <disk_initialize+0x7a>
	}
#endif
	/* Check LUN ready (USB disk report CTRL_BUSY then CTRL_GOOD) */
	for (i = 0; i < 2; i ++) {
    ddea:	2300      	movs	r3, #0
    ddec:	60fb      	str	r3, [r7, #12]
    ddee:	e011      	b.n	de14 <disk_initialize+0x4c>
		mem_status = mem_test_unit_ready(drv);
    ddf0:	230b      	movs	r3, #11
    ddf2:	18fd      	adds	r5, r7, r3
    ddf4:	1dfb      	adds	r3, r7, #7
    ddf6:	781b      	ldrb	r3, [r3, #0]
    ddf8:	0018      	movs	r0, r3
    ddfa:	4b16      	ldr	r3, [pc, #88]	; (de54 <disk_initialize+0x8c>)
    ddfc:	58e3      	ldr	r3, [r4, r3]
    ddfe:	4798      	blx	r3
    de00:	0003      	movs	r3, r0
    de02:	702b      	strb	r3, [r5, #0]
		if (CTRL_BUSY != mem_status) {
    de04:	230b      	movs	r3, #11
    de06:	18fb      	adds	r3, r7, r3
    de08:	781b      	ldrb	r3, [r3, #0]
    de0a:	2b03      	cmp	r3, #3
    de0c:	d106      	bne.n	de1c <disk_initialize+0x54>
	for (i = 0; i < 2; i ++) {
    de0e:	68fb      	ldr	r3, [r7, #12]
    de10:	3301      	adds	r3, #1
    de12:	60fb      	str	r3, [r7, #12]
    de14:	68fb      	ldr	r3, [r7, #12]
    de16:	2b01      	cmp	r3, #1
    de18:	ddea      	ble.n	ddf0 <disk_initialize+0x28>
    de1a:	e000      	b.n	de1e <disk_initialize+0x56>
			break;
    de1c:	46c0      	nop			; (mov r8, r8)
		}
	}
	if (mem_status != CTRL_GOOD) {
    de1e:	230b      	movs	r3, #11
    de20:	18fb      	adds	r3, r7, r3
    de22:	781b      	ldrb	r3, [r3, #0]
    de24:	2b00      	cmp	r3, #0
    de26:	d001      	beq.n	de2c <disk_initialize+0x64>
		return STA_NOINIT;
    de28:	2301      	movs	r3, #1
    de2a:	e00a      	b.n	de42 <disk_initialize+0x7a>
	}

	/* Check Write Protection Status */
	if (mem_wr_protect(drv)) {
    de2c:	1dfb      	adds	r3, r7, #7
    de2e:	781b      	ldrb	r3, [r3, #0]
    de30:	0018      	movs	r0, r3
    de32:	4b09      	ldr	r3, [pc, #36]	; (de58 <disk_initialize+0x90>)
    de34:	58e3      	ldr	r3, [r4, r3]
    de36:	4798      	blx	r3
    de38:	1e03      	subs	r3, r0, #0
    de3a:	d001      	beq.n	de40 <disk_initialize+0x78>
		return STA_PROTECT;
    de3c:	2304      	movs	r3, #4
    de3e:	e000      	b.n	de42 <disk_initialize+0x7a>
	}

	/* The memory should already be initialized */
	return 0;
    de40:	2300      	movs	r3, #0
}
    de42:	0018      	movs	r0, r3
    de44:	46bd      	mov	sp, r7
    de46:	b004      	add	sp, #16
    de48:	bdb0      	pop	{r4, r5, r7, pc}
    de4a:	46c0      	nop			; (mov r8, r8)
    de4c:	00003ffa 	.word	0x00003ffa
    de50:	ffffff43 	.word	0xffffff43
    de54:	000000f8 	.word	0x000000f8
    de58:	00000084 	.word	0x00000084

0000de5c <disk_status>:
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
    de5c:	b580      	push	{r7, lr}
    de5e:	b082      	sub	sp, #8
    de60:	af00      	add	r7, sp, #0
    de62:	0002      	movs	r2, r0
    de64:	1dfb      	adds	r3, r7, #7
    de66:	701a      	strb	r2, [r3, #0]
    de68:	4a0a      	ldr	r2, [pc, #40]	; (de94 <disk_status+0x38>)
    de6a:	447a      	add	r2, pc
	switch (mem_test_unit_ready(drv)) {
    de6c:	1dfb      	adds	r3, r7, #7
    de6e:	781b      	ldrb	r3, [r3, #0]
    de70:	0018      	movs	r0, r3
    de72:	4b09      	ldr	r3, [pc, #36]	; (de98 <disk_status+0x3c>)
    de74:	58d3      	ldr	r3, [r2, r3]
    de76:	4798      	blx	r3
    de78:	1e03      	subs	r3, r0, #0
    de7a:	d002      	beq.n	de82 <disk_status+0x26>
    de7c:	2b02      	cmp	r3, #2
    de7e:	d002      	beq.n	de86 <disk_status+0x2a>
    de80:	e003      	b.n	de8a <disk_status+0x2e>
	case CTRL_GOOD:
		return 0;
    de82:	2300      	movs	r3, #0
    de84:	e002      	b.n	de8c <disk_status+0x30>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
    de86:	2303      	movs	r3, #3
    de88:	e000      	b.n	de8c <disk_status+0x30>
	default:
		return STA_NOINIT;
    de8a:	2301      	movs	r3, #1
	}
}
    de8c:	0018      	movs	r0, r3
    de8e:	46bd      	mov	sp, r7
    de90:	b002      	add	sp, #8
    de92:	bd80      	pop	{r7, pc}
    de94:	00003f66 	.word	0x00003f66
    de98:	000000f8 	.word	0x000000f8

0000de9c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
    de9c:	b5b0      	push	{r4, r5, r7, lr}
    de9e:	b088      	sub	sp, #32
    dea0:	af00      	add	r7, sp, #0
    dea2:	60b9      	str	r1, [r7, #8]
    dea4:	607a      	str	r2, [r7, #4]
    dea6:	0019      	movs	r1, r3
    dea8:	230f      	movs	r3, #15
    deaa:	18fb      	adds	r3, r7, r3
    deac:	1c02      	adds	r2, r0, #0
    deae:	701a      	strb	r2, [r3, #0]
    deb0:	230e      	movs	r3, #14
    deb2:	18fb      	adds	r3, r7, r3
    deb4:	1c0a      	adds	r2, r1, #0
    deb6:	701a      	strb	r2, [r3, #0]
    deb8:	4c2e      	ldr	r4, [pc, #184]	; (df74 <disk_read+0xd8>)
    deba:	447c      	add	r4, pc
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    debc:	231b      	movs	r3, #27
    debe:	18fd      	adds	r5, r7, r3
    dec0:	230f      	movs	r3, #15
    dec2:	18fb      	adds	r3, r7, r3
    dec4:	781b      	ldrb	r3, [r3, #0]
    dec6:	0018      	movs	r0, r3
    dec8:	4b2b      	ldr	r3, [pc, #172]	; (df78 <disk_read+0xdc>)
    deca:	58e3      	ldr	r3, [r4, r3]
    decc:	4798      	blx	r3
    dece:	0003      	movs	r3, r0
    ded0:	702b      	strb	r3, [r5, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    ded2:	231b      	movs	r3, #27
    ded4:	18fb      	adds	r3, r7, r3
    ded6:	781b      	ldrb	r3, [r3, #0]
    ded8:	2b00      	cmp	r3, #0
    deda:	d101      	bne.n	dee0 <disk_read+0x44>
		return RES_ERROR;
    dedc:	2301      	movs	r3, #1
    dede:	e044      	b.n	df6a <disk_read+0xce>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    dee0:	2314      	movs	r3, #20
    dee2:	18fa      	adds	r2, r7, r3
    dee4:	230f      	movs	r3, #15
    dee6:	18fb      	adds	r3, r7, r3
    dee8:	781b      	ldrb	r3, [r3, #0]
    deea:	0011      	movs	r1, r2
    deec:	0018      	movs	r0, r3
    deee:	4b23      	ldr	r3, [pc, #140]	; (df7c <disk_read+0xe0>)
    def0:	58e3      	ldr	r3, [r4, r3]
    def2:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    def4:	230e      	movs	r3, #14
    def6:	18fb      	adds	r3, r7, r3
    def8:	781b      	ldrb	r3, [r3, #0]
    defa:	221b      	movs	r2, #27
    defc:	18ba      	adds	r2, r7, r2
    defe:	7812      	ldrb	r2, [r2, #0]
    df00:	4353      	muls	r3, r2
    df02:	001a      	movs	r2, r3
    df04:	687b      	ldr	r3, [r7, #4]
    df06:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    df08:	697b      	ldr	r3, [r7, #20]
    df0a:	3301      	adds	r3, #1
    df0c:	211b      	movs	r1, #27
    df0e:	1879      	adds	r1, r7, r1
    df10:	7809      	ldrb	r1, [r1, #0]
    df12:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    df14:	429a      	cmp	r2, r3
    df16:	d901      	bls.n	df1c <disk_read+0x80>
		return RES_PARERR;
    df18:	2304      	movs	r3, #4
    df1a:	e026      	b.n	df6a <disk_read+0xce>
	}

	/* Read the data */
	for (i = 0; i < count; i++) {
    df1c:	2300      	movs	r3, #0
    df1e:	61fb      	str	r3, [r7, #28]
    df20:	e01c      	b.n	df5c <disk_read+0xc0>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    df22:	231b      	movs	r3, #27
    df24:	18fb      	adds	r3, r7, r3
    df26:	781b      	ldrb	r3, [r3, #0]
    df28:	69fa      	ldr	r2, [r7, #28]
    df2a:	435a      	muls	r2, r3
    df2c:	687b      	ldr	r3, [r7, #4]
    df2e:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    df30:	231b      	movs	r3, #27
    df32:	18fb      	adds	r3, r7, r3
    df34:	781b      	ldrb	r3, [r3, #0]
    df36:	69fa      	ldr	r2, [r7, #28]
    df38:	4353      	muls	r3, r2
    df3a:	025b      	lsls	r3, r3, #9
    df3c:	68ba      	ldr	r2, [r7, #8]
    df3e:	18d2      	adds	r2, r2, r3
		if (memory_2_ram(drv, sector + uc_sector_size * i,
    df40:	230f      	movs	r3, #15
    df42:	18fb      	adds	r3, r7, r3
    df44:	781b      	ldrb	r3, [r3, #0]
    df46:	0018      	movs	r0, r3
    df48:	4b0d      	ldr	r3, [pc, #52]	; (df80 <disk_read+0xe4>)
    df4a:	58e3      	ldr	r3, [r4, r3]
    df4c:	4798      	blx	r3
    df4e:	1e03      	subs	r3, r0, #0
    df50:	d001      	beq.n	df56 <disk_read+0xba>
				CTRL_GOOD) {
			return RES_ERROR;
    df52:	2301      	movs	r3, #1
    df54:	e009      	b.n	df6a <disk_read+0xce>
	for (i = 0; i < count; i++) {
    df56:	69fb      	ldr	r3, [r7, #28]
    df58:	3301      	adds	r3, #1
    df5a:	61fb      	str	r3, [r7, #28]
    df5c:	230e      	movs	r3, #14
    df5e:	18fb      	adds	r3, r7, r3
    df60:	781a      	ldrb	r2, [r3, #0]
    df62:	69fb      	ldr	r3, [r7, #28]
    df64:	429a      	cmp	r2, r3
    df66:	d8dc      	bhi.n	df22 <disk_read+0x86>
		}
	}

	return RES_OK;
    df68:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    df6a:	0018      	movs	r0, r3
    df6c:	46bd      	mov	sp, r7
    df6e:	b008      	add	sp, #32
    df70:	bdb0      	pop	{r4, r5, r7, pc}
    df72:	46c0      	nop			; (mov r8, r8)
    df74:	00003f16 	.word	0x00003f16
    df78:	000002f0 	.word	0x000002f0
    df7c:	00000088 	.word	0x00000088
    df80:	0000007c 	.word	0x0000007c

0000df84 <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
    df84:	b5b0      	push	{r4, r5, r7, lr}
    df86:	b088      	sub	sp, #32
    df88:	af00      	add	r7, sp, #0
    df8a:	60b9      	str	r1, [r7, #8]
    df8c:	607a      	str	r2, [r7, #4]
    df8e:	0019      	movs	r1, r3
    df90:	230f      	movs	r3, #15
    df92:	18fb      	adds	r3, r7, r3
    df94:	1c02      	adds	r2, r0, #0
    df96:	701a      	strb	r2, [r3, #0]
    df98:	230e      	movs	r3, #14
    df9a:	18fb      	adds	r3, r7, r3
    df9c:	1c0a      	adds	r2, r1, #0
    df9e:	701a      	strb	r2, [r3, #0]
    dfa0:	4c2e      	ldr	r4, [pc, #184]	; (e05c <disk_write+0xd8>)
    dfa2:	447c      	add	r4, pc
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
    dfa4:	231b      	movs	r3, #27
    dfa6:	18fd      	adds	r5, r7, r3
    dfa8:	230f      	movs	r3, #15
    dfaa:	18fb      	adds	r3, r7, r3
    dfac:	781b      	ldrb	r3, [r3, #0]
    dfae:	0018      	movs	r0, r3
    dfb0:	4b2b      	ldr	r3, [pc, #172]	; (e060 <disk_write+0xdc>)
    dfb2:	58e3      	ldr	r3, [r4, r3]
    dfb4:	4798      	blx	r3
    dfb6:	0003      	movs	r3, r0
    dfb8:	702b      	strb	r3, [r5, #0]
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
    dfba:	231b      	movs	r3, #27
    dfbc:	18fb      	adds	r3, r7, r3
    dfbe:	781b      	ldrb	r3, [r3, #0]
    dfc0:	2b00      	cmp	r3, #0
    dfc2:	d101      	bne.n	dfc8 <disk_write+0x44>
		return RES_ERROR;
    dfc4:	2301      	movs	r3, #1
    dfc6:	e044      	b.n	e052 <disk_write+0xce>
	}

	/* Check valid address */
	mem_read_capacity(drv, &ul_last_sector_num);
    dfc8:	2314      	movs	r3, #20
    dfca:	18fa      	adds	r2, r7, r3
    dfcc:	230f      	movs	r3, #15
    dfce:	18fb      	adds	r3, r7, r3
    dfd0:	781b      	ldrb	r3, [r3, #0]
    dfd2:	0011      	movs	r1, r2
    dfd4:	0018      	movs	r0, r3
    dfd6:	4b23      	ldr	r3, [pc, #140]	; (e064 <disk_write+0xe0>)
    dfd8:	58e3      	ldr	r3, [r4, r3]
    dfda:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
    dfdc:	230e      	movs	r3, #14
    dfde:	18fb      	adds	r3, r7, r3
    dfe0:	781b      	ldrb	r3, [r3, #0]
    dfe2:	221b      	movs	r2, #27
    dfe4:	18ba      	adds	r2, r7, r2
    dfe6:	7812      	ldrb	r2, [r2, #0]
    dfe8:	4353      	muls	r3, r2
    dfea:	001a      	movs	r2, r3
    dfec:	687b      	ldr	r3, [r7, #4]
    dfee:	18d2      	adds	r2, r2, r3
			(ul_last_sector_num + 1) * uc_sector_size) {
    dff0:	697b      	ldr	r3, [r7, #20]
    dff2:	3301      	adds	r3, #1
    dff4:	211b      	movs	r1, #27
    dff6:	1879      	adds	r1, r7, r1
    dff8:	7809      	ldrb	r1, [r1, #0]
    dffa:	434b      	muls	r3, r1
	if ((sector + count * uc_sector_size) >
    dffc:	429a      	cmp	r2, r3
    dffe:	d901      	bls.n	e004 <disk_write+0x80>
		return RES_PARERR;
    e000:	2304      	movs	r3, #4
    e002:	e026      	b.n	e052 <disk_write+0xce>
	}

	/* Write the data */
	for (i = 0; i < count; i++) {
    e004:	2300      	movs	r3, #0
    e006:	61fb      	str	r3, [r7, #28]
    e008:	e01c      	b.n	e044 <disk_write+0xc0>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    e00a:	231b      	movs	r3, #27
    e00c:	18fb      	adds	r3, r7, r3
    e00e:	781b      	ldrb	r3, [r3, #0]
    e010:	69fa      	ldr	r2, [r7, #28]
    e012:	435a      	muls	r2, r3
    e014:	687b      	ldr	r3, [r7, #4]
    e016:	18d1      	adds	r1, r2, r3
				buff + uc_sector_size * SECTOR_SIZE_DEFAULT * i) !=
    e018:	231b      	movs	r3, #27
    e01a:	18fb      	adds	r3, r7, r3
    e01c:	781b      	ldrb	r3, [r3, #0]
    e01e:	69fa      	ldr	r2, [r7, #28]
    e020:	4353      	muls	r3, r2
    e022:	025b      	lsls	r3, r3, #9
    e024:	68ba      	ldr	r2, [r7, #8]
    e026:	18d2      	adds	r2, r2, r3
		if (ram_2_memory(drv, sector + uc_sector_size * i,
    e028:	230f      	movs	r3, #15
    e02a:	18fb      	adds	r3, r7, r3
    e02c:	781b      	ldrb	r3, [r3, #0]
    e02e:	0018      	movs	r0, r3
    e030:	4b0d      	ldr	r3, [pc, #52]	; (e068 <disk_write+0xe4>)
    e032:	58e3      	ldr	r3, [r4, r3]
    e034:	4798      	blx	r3
    e036:	1e03      	subs	r3, r0, #0
    e038:	d001      	beq.n	e03e <disk_write+0xba>
				CTRL_GOOD) {
			return RES_ERROR;
    e03a:	2301      	movs	r3, #1
    e03c:	e009      	b.n	e052 <disk_write+0xce>
	for (i = 0; i < count; i++) {
    e03e:	69fb      	ldr	r3, [r7, #28]
    e040:	3301      	adds	r3, #1
    e042:	61fb      	str	r3, [r7, #28]
    e044:	230e      	movs	r3, #14
    e046:	18fb      	adds	r3, r7, r3
    e048:	781a      	ldrb	r2, [r3, #0]
    e04a:	69fb      	ldr	r3, [r7, #28]
    e04c:	429a      	cmp	r2, r3
    e04e:	d8dc      	bhi.n	e00a <disk_write+0x86>
		}
	}

	return RES_OK;
    e050:	2300      	movs	r3, #0

#else
	return RES_ERROR;
#endif
}
    e052:	0018      	movs	r0, r3
    e054:	46bd      	mov	sp, r7
    e056:	b008      	add	sp, #32
    e058:	bdb0      	pop	{r4, r5, r7, pc}
    e05a:	46c0      	nop			; (mov r8, r8)
    e05c:	00003e2e 	.word	0x00003e2e
    e060:	000002f0 	.word	0x000002f0
    e064:	00000088 	.word	0x00000088
    e068:	0000000c 	.word	0x0000000c

0000e06c <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
    e06c:	b590      	push	{r4, r7, lr}
    e06e:	b085      	sub	sp, #20
    e070:	af00      	add	r7, sp, #0
    e072:	603a      	str	r2, [r7, #0]
    e074:	1dfb      	adds	r3, r7, #7
    e076:	1c02      	adds	r2, r0, #0
    e078:	701a      	strb	r2, [r3, #0]
    e07a:	1dbb      	adds	r3, r7, #6
    e07c:	1c0a      	adds	r2, r1, #0
    e07e:	701a      	strb	r2, [r3, #0]
    e080:	4b39      	ldr	r3, [pc, #228]	; (e168 <disk_ioctl+0xfc>)
    e082:	447b      	add	r3, pc
	DRESULT res = RES_PARERR;
    e084:	220f      	movs	r2, #15
    e086:	18ba      	adds	r2, r7, r2
    e088:	2104      	movs	r1, #4
    e08a:	7011      	strb	r1, [r2, #0]

	switch (ctrl) {
    e08c:	1dba      	adds	r2, r7, #6
    e08e:	7812      	ldrb	r2, [r2, #0]
    e090:	2a03      	cmp	r2, #3
    e092:	d85e      	bhi.n	e152 <disk_ioctl+0xe6>
    e094:	0010      	movs	r0, r2
    e096:	f002 faeb 	bl	10670 <__gnu_thumb1_case_si>
    e09a:	46c0      	nop			; (mov r8, r8)
    e09c:	00000092 	.word	0x00000092
    e0a0:	00000020 	.word	0x00000020
    e0a4:	00000042 	.word	0x00000042
    e0a8:	00000010 	.word	0x00000010
	case GET_BLOCK_SIZE:
		*(DWORD *)buff = 1;
    e0ac:	683b      	ldr	r3, [r7, #0]
    e0ae:	2201      	movs	r2, #1
    e0b0:	601a      	str	r2, [r3, #0]
		res = RES_OK;
    e0b2:	230f      	movs	r3, #15
    e0b4:	18fb      	adds	r3, r7, r3
    e0b6:	2200      	movs	r2, #0
    e0b8:	701a      	strb	r2, [r3, #0]
		break;
    e0ba:	e04e      	b.n	e15a <disk_ioctl+0xee>
	case GET_SECTOR_COUNT:
	{
		uint32_t ul_last_sector_num;

		/* Check valid address */
		mem_read_capacity(drv, &ul_last_sector_num);
    e0bc:	2208      	movs	r2, #8
    e0be:	18b9      	adds	r1, r7, r2
    e0c0:	1dfa      	adds	r2, r7, #7
    e0c2:	7812      	ldrb	r2, [r2, #0]
    e0c4:	0010      	movs	r0, r2
    e0c6:	4a29      	ldr	r2, [pc, #164]	; (e16c <disk_ioctl+0x100>)
    e0c8:	589b      	ldr	r3, [r3, r2]
    e0ca:	4798      	blx	r3

		*(DWORD *)buff = ul_last_sector_num + 1;
    e0cc:	68bb      	ldr	r3, [r7, #8]
    e0ce:	1c5a      	adds	r2, r3, #1
    e0d0:	683b      	ldr	r3, [r7, #0]
    e0d2:	601a      	str	r2, [r3, #0]

		res = RES_OK;
    e0d4:	230f      	movs	r3, #15
    e0d6:	18fb      	adds	r3, r7, r3
    e0d8:	2200      	movs	r2, #0
    e0da:	701a      	strb	r2, [r3, #0]
	}
	break;
    e0dc:	e03d      	b.n	e15a <disk_ioctl+0xee>

	/* Get sectors on the disk (WORD) */
	case GET_SECTOR_SIZE:
	{
		uint8_t uc_sector_size = mem_sector_size(drv);
    e0de:	220e      	movs	r2, #14
    e0e0:	18bc      	adds	r4, r7, r2
    e0e2:	1dfa      	adds	r2, r7, #7
    e0e4:	7812      	ldrb	r2, [r2, #0]
    e0e6:	0010      	movs	r0, r2
    e0e8:	4a21      	ldr	r2, [pc, #132]	; (e170 <disk_ioctl+0x104>)
    e0ea:	589b      	ldr	r3, [r3, r2]
    e0ec:	4798      	blx	r3
    e0ee:	0003      	movs	r3, r0
    e0f0:	7023      	strb	r3, [r4, #0]

		if ((uc_sector_size != SECTOR_SIZE_512) &&
    e0f2:	230e      	movs	r3, #14
    e0f4:	18fb      	adds	r3, r7, r3
    e0f6:	781b      	ldrb	r3, [r3, #0]
    e0f8:	2b01      	cmp	r3, #1
    e0fa:	d010      	beq.n	e11e <disk_ioctl+0xb2>
    e0fc:	230e      	movs	r3, #14
    e0fe:	18fb      	adds	r3, r7, r3
    e100:	781b      	ldrb	r3, [r3, #0]
    e102:	2b02      	cmp	r3, #2
    e104:	d00b      	beq.n	e11e <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_1024) &&
    e106:	230e      	movs	r3, #14
    e108:	18fb      	adds	r3, r7, r3
    e10a:	781b      	ldrb	r3, [r3, #0]
    e10c:	2b04      	cmp	r3, #4
    e10e:	d006      	beq.n	e11e <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_2048) &&
    e110:	230e      	movs	r3, #14
    e112:	18fb      	adds	r3, r7, r3
    e114:	781b      	ldrb	r3, [r3, #0]
    e116:	2b08      	cmp	r3, #8
    e118:	d001      	beq.n	e11e <disk_ioctl+0xb2>
				(uc_sector_size != SECTOR_SIZE_4096)) {
			/* The sector size is not supported by the FatFS */
			return RES_ERROR;
    e11a:	2301      	movs	r3, #1
    e11c:	e020      	b.n	e160 <disk_ioctl+0xf4>
		}

		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
    e11e:	683b      	ldr	r3, [r7, #0]
    e120:	2200      	movs	r2, #0
    e122:	701a      	strb	r2, [r3, #0]

		res = RES_OK;
    e124:	230f      	movs	r3, #15
    e126:	18fb      	adds	r3, r7, r3
    e128:	2200      	movs	r2, #0
    e12a:	701a      	strb	r2, [r3, #0]
	}
	break;
    e12c:	e015      	b.n	e15a <disk_ioctl+0xee>

	/* Make sure that data has been written */
	case CTRL_SYNC:
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
    e12e:	1dfa      	adds	r2, r7, #7
    e130:	7812      	ldrb	r2, [r2, #0]
    e132:	0010      	movs	r0, r2
    e134:	4a0f      	ldr	r2, [pc, #60]	; (e174 <disk_ioctl+0x108>)
    e136:	589b      	ldr	r3, [r3, r2]
    e138:	4798      	blx	r3
    e13a:	1e03      	subs	r3, r0, #0
    e13c:	d104      	bne.n	e148 <disk_ioctl+0xdc>
			res = RES_OK;
    e13e:	230f      	movs	r3, #15
    e140:	18fb      	adds	r3, r7, r3
    e142:	2200      	movs	r2, #0
    e144:	701a      	strb	r2, [r3, #0]
		} else {
			res = RES_NOTRDY;
		}
		break;
    e146:	e008      	b.n	e15a <disk_ioctl+0xee>
			res = RES_NOTRDY;
    e148:	230f      	movs	r3, #15
    e14a:	18fb      	adds	r3, r7, r3
    e14c:	2203      	movs	r2, #3
    e14e:	701a      	strb	r2, [r3, #0]
		break;
    e150:	e003      	b.n	e15a <disk_ioctl+0xee>

	default:
		res = RES_PARERR;
    e152:	230f      	movs	r3, #15
    e154:	18fb      	adds	r3, r7, r3
    e156:	2204      	movs	r2, #4
    e158:	701a      	strb	r2, [r3, #0]
	}

	return res;
    e15a:	230f      	movs	r3, #15
    e15c:	18fb      	adds	r3, r7, r3
    e15e:	781b      	ldrb	r3, [r3, #0]
}
    e160:	0018      	movs	r0, r3
    e162:	46bd      	mov	sp, r7
    e164:	b005      	add	sp, #20
    e166:	bd90      	pop	{r4, r7, pc}
    e168:	00003d4e 	.word	0x00003d4e
    e16c:	00000088 	.word	0x00000088
    e170:	000002f0 	.word	0x000002f0
    e174:	000000f8 	.word	0x000000f8

0000e178 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
    e178:	b580      	push	{r7, lr}
    e17a:	b086      	sub	sp, #24
    e17c:	af00      	add	r7, sp, #0
    e17e:	60f8      	str	r0, [r7, #12]
    e180:	60b9      	str	r1, [r7, #8]
    e182:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    e184:	68fb      	ldr	r3, [r7, #12]
    e186:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
    e188:	68bb      	ldr	r3, [r7, #8]
    e18a:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
    e18c:	e007      	b.n	e19e <mem_cpy+0x26>
		*d++ = *s++;
    e18e:	697b      	ldr	r3, [r7, #20]
    e190:	1c5a      	adds	r2, r3, #1
    e192:	617a      	str	r2, [r7, #20]
    e194:	693a      	ldr	r2, [r7, #16]
    e196:	1c51      	adds	r1, r2, #1
    e198:	6139      	str	r1, [r7, #16]
    e19a:	7812      	ldrb	r2, [r2, #0]
    e19c:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    e19e:	687b      	ldr	r3, [r7, #4]
    e1a0:	1e5a      	subs	r2, r3, #1
    e1a2:	607a      	str	r2, [r7, #4]
    e1a4:	2b00      	cmp	r3, #0
    e1a6:	d1f2      	bne.n	e18e <mem_cpy+0x16>
}
    e1a8:	46c0      	nop			; (mov r8, r8)
    e1aa:	46bd      	mov	sp, r7
    e1ac:	b006      	add	sp, #24
    e1ae:	bd80      	pop	{r7, pc}

0000e1b0 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
    e1b0:	b580      	push	{r7, lr}
    e1b2:	b086      	sub	sp, #24
    e1b4:	af00      	add	r7, sp, #0
    e1b6:	60f8      	str	r0, [r7, #12]
    e1b8:	60b9      	str	r1, [r7, #8]
    e1ba:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
    e1bc:	68fb      	ldr	r3, [r7, #12]
    e1be:	617b      	str	r3, [r7, #20]

	while (cnt--)
    e1c0:	e005      	b.n	e1ce <mem_set+0x1e>
		*d++ = (BYTE)val;
    e1c2:	697b      	ldr	r3, [r7, #20]
    e1c4:	1c5a      	adds	r2, r3, #1
    e1c6:	617a      	str	r2, [r7, #20]
    e1c8:	68ba      	ldr	r2, [r7, #8]
    e1ca:	b2d2      	uxtb	r2, r2
    e1cc:	701a      	strb	r2, [r3, #0]
	while (cnt--)
    e1ce:	687b      	ldr	r3, [r7, #4]
    e1d0:	1e5a      	subs	r2, r3, #1
    e1d2:	607a      	str	r2, [r7, #4]
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	d1f4      	bne.n	e1c2 <mem_set+0x12>
}
    e1d8:	46c0      	nop			; (mov r8, r8)
    e1da:	46bd      	mov	sp, r7
    e1dc:	b006      	add	sp, #24
    e1de:	bd80      	pop	{r7, pc}

0000e1e0 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
    e1e0:	b580      	push	{r7, lr}
    e1e2:	b088      	sub	sp, #32
    e1e4:	af00      	add	r7, sp, #0
    e1e6:	60f8      	str	r0, [r7, #12]
    e1e8:	60b9      	str	r1, [r7, #8]
    e1ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
    e1ec:	68fb      	ldr	r3, [r7, #12]
    e1ee:	61fb      	str	r3, [r7, #28]
    e1f0:	68bb      	ldr	r3, [r7, #8]
    e1f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
    e1f4:	2300      	movs	r3, #0
    e1f6:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
    e1f8:	46c0      	nop			; (mov r8, r8)
    e1fa:	687b      	ldr	r3, [r7, #4]
    e1fc:	1e5a      	subs	r2, r3, #1
    e1fe:	607a      	str	r2, [r7, #4]
    e200:	2b00      	cmp	r3, #0
    e202:	d00d      	beq.n	e220 <mem_cmp+0x40>
    e204:	69fb      	ldr	r3, [r7, #28]
    e206:	1c5a      	adds	r2, r3, #1
    e208:	61fa      	str	r2, [r7, #28]
    e20a:	781b      	ldrb	r3, [r3, #0]
    e20c:	0019      	movs	r1, r3
    e20e:	69bb      	ldr	r3, [r7, #24]
    e210:	1c5a      	adds	r2, r3, #1
    e212:	61ba      	str	r2, [r7, #24]
    e214:	781b      	ldrb	r3, [r3, #0]
    e216:	1acb      	subs	r3, r1, r3
    e218:	617b      	str	r3, [r7, #20]
    e21a:	697b      	ldr	r3, [r7, #20]
    e21c:	2b00      	cmp	r3, #0
    e21e:	d0ec      	beq.n	e1fa <mem_cmp+0x1a>
	return r;
    e220:	697b      	ldr	r3, [r7, #20]
}
    e222:	0018      	movs	r0, r3
    e224:	46bd      	mov	sp, r7
    e226:	b008      	add	sp, #32
    e228:	bd80      	pop	{r7, pc}

0000e22a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
    e22a:	b580      	push	{r7, lr}
    e22c:	b082      	sub	sp, #8
    e22e:	af00      	add	r7, sp, #0
    e230:	6078      	str	r0, [r7, #4]
    e232:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
    e234:	e002      	b.n	e23c <chk_chr+0x12>
    e236:	687b      	ldr	r3, [r7, #4]
    e238:	3301      	adds	r3, #1
    e23a:	607b      	str	r3, [r7, #4]
    e23c:	687b      	ldr	r3, [r7, #4]
    e23e:	781b      	ldrb	r3, [r3, #0]
    e240:	2b00      	cmp	r3, #0
    e242:	d005      	beq.n	e250 <chk_chr+0x26>
    e244:	687b      	ldr	r3, [r7, #4]
    e246:	781b      	ldrb	r3, [r3, #0]
    e248:	001a      	movs	r2, r3
    e24a:	683b      	ldr	r3, [r7, #0]
    e24c:	429a      	cmp	r2, r3
    e24e:	d1f2      	bne.n	e236 <chk_chr+0xc>
	return *str;
    e250:	687b      	ldr	r3, [r7, #4]
    e252:	781b      	ldrb	r3, [r3, #0]
}
    e254:	0018      	movs	r0, r3
    e256:	46bd      	mov	sp, r7
    e258:	b002      	add	sp, #8
    e25a:	bd80      	pop	{r7, pc}

0000e25c <move_window>:
static
FRESULT move_window (
	FATFS *fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)					/* Move to zero only writes back dirty window */
{
    e25c:	b5b0      	push	{r4, r5, r7, lr}
    e25e:	b084      	sub	sp, #16
    e260:	af00      	add	r7, sp, #0
    e262:	6078      	str	r0, [r7, #4]
    e264:	6039      	str	r1, [r7, #0]
    e266:	4c30      	ldr	r4, [pc, #192]	; (e328 <move_window+0xcc>)
    e268:	447c      	add	r4, pc
	DWORD wsect;


	wsect = fs->winsect;
    e26a:	687b      	ldr	r3, [r7, #4]
    e26c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    e26e:	60fb      	str	r3, [r7, #12]
	if (wsect != sector) {	/* Changed current window */
    e270:	68fa      	ldr	r2, [r7, #12]
    e272:	683b      	ldr	r3, [r7, #0]
    e274:	429a      	cmp	r2, r3
    e276:	d051      	beq.n	e31c <move_window+0xc0>
#if !_FS_READONLY
		if (fs->wflag) {	/* Write back dirty window if needed */
    e278:	687b      	ldr	r3, [r7, #4]
    e27a:	791b      	ldrb	r3, [r3, #4]
    e27c:	2b00      	cmp	r3, #0
    e27e:	d039      	beq.n	e2f4 <move_window+0x98>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
    e280:	687b      	ldr	r3, [r7, #4]
    e282:	7858      	ldrb	r0, [r3, #1]
    e284:	687b      	ldr	r3, [r7, #4]
    e286:	3330      	adds	r3, #48	; 0x30
    e288:	0019      	movs	r1, r3
    e28a:	68fa      	ldr	r2, [r7, #12]
    e28c:	2301      	movs	r3, #1
    e28e:	4d27      	ldr	r5, [pc, #156]	; (e32c <move_window+0xd0>)
    e290:	5965      	ldr	r5, [r4, r5]
    e292:	47a8      	blx	r5
    e294:	1e03      	subs	r3, r0, #0
    e296:	d001      	beq.n	e29c <move_window+0x40>
				return FR_DISK_ERR;
    e298:	2301      	movs	r3, #1
    e29a:	e040      	b.n	e31e <move_window+0xc2>
			fs->wflag = 0;
    e29c:	687b      	ldr	r3, [r7, #4]
    e29e:	2200      	movs	r2, #0
    e2a0:	711a      	strb	r2, [r3, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
    e2a2:	687b      	ldr	r3, [r7, #4]
    e2a4:	6a1a      	ldr	r2, [r3, #32]
    e2a6:	687b      	ldr	r3, [r7, #4]
    e2a8:	69db      	ldr	r3, [r3, #28]
    e2aa:	18d2      	adds	r2, r2, r3
    e2ac:	68fb      	ldr	r3, [r7, #12]
    e2ae:	429a      	cmp	r2, r3
    e2b0:	d920      	bls.n	e2f4 <move_window+0x98>
				BYTE nf;
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e2b2:	230b      	movs	r3, #11
    e2b4:	18fb      	adds	r3, r7, r3
    e2b6:	687a      	ldr	r2, [r7, #4]
    e2b8:	78d2      	ldrb	r2, [r2, #3]
    e2ba:	701a      	strb	r2, [r3, #0]
    e2bc:	e015      	b.n	e2ea <move_window+0x8e>
					wsect += fs->fsize;
    e2be:	687b      	ldr	r3, [r7, #4]
    e2c0:	69db      	ldr	r3, [r3, #28]
    e2c2:	68fa      	ldr	r2, [r7, #12]
    e2c4:	18d3      	adds	r3, r2, r3
    e2c6:	60fb      	str	r3, [r7, #12]
					disk_write(fs->drv, fs->win, wsect, 1);
    e2c8:	687b      	ldr	r3, [r7, #4]
    e2ca:	7858      	ldrb	r0, [r3, #1]
    e2cc:	687b      	ldr	r3, [r7, #4]
    e2ce:	3330      	adds	r3, #48	; 0x30
    e2d0:	0019      	movs	r1, r3
    e2d2:	68fa      	ldr	r2, [r7, #12]
    e2d4:	2301      	movs	r3, #1
    e2d6:	4d15      	ldr	r5, [pc, #84]	; (e32c <move_window+0xd0>)
    e2d8:	5965      	ldr	r5, [r4, r5]
    e2da:	47a8      	blx	r5
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
    e2dc:	230b      	movs	r3, #11
    e2de:	18fb      	adds	r3, r7, r3
    e2e0:	781a      	ldrb	r2, [r3, #0]
    e2e2:	230b      	movs	r3, #11
    e2e4:	18fb      	adds	r3, r7, r3
    e2e6:	3a01      	subs	r2, #1
    e2e8:	701a      	strb	r2, [r3, #0]
    e2ea:	230b      	movs	r3, #11
    e2ec:	18fb      	adds	r3, r7, r3
    e2ee:	781b      	ldrb	r3, [r3, #0]
    e2f0:	2b01      	cmp	r3, #1
    e2f2:	d8e4      	bhi.n	e2be <move_window+0x62>
				}
			}
		}
#endif
		if (sector) {
    e2f4:	683b      	ldr	r3, [r7, #0]
    e2f6:	2b00      	cmp	r3, #0
    e2f8:	d010      	beq.n	e31c <move_window+0xc0>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
    e2fa:	687b      	ldr	r3, [r7, #4]
    e2fc:	7858      	ldrb	r0, [r3, #1]
    e2fe:	687b      	ldr	r3, [r7, #4]
    e300:	3330      	adds	r3, #48	; 0x30
    e302:	0019      	movs	r1, r3
    e304:	683a      	ldr	r2, [r7, #0]
    e306:	2301      	movs	r3, #1
    e308:	4d09      	ldr	r5, [pc, #36]	; (e330 <move_window+0xd4>)
    e30a:	5964      	ldr	r4, [r4, r5]
    e30c:	47a0      	blx	r4
    e30e:	1e03      	subs	r3, r0, #0
    e310:	d001      	beq.n	e316 <move_window+0xba>
				return FR_DISK_ERR;
    e312:	2301      	movs	r3, #1
    e314:	e003      	b.n	e31e <move_window+0xc2>
			fs->winsect = sector;
    e316:	687b      	ldr	r3, [r7, #4]
    e318:	683a      	ldr	r2, [r7, #0]
    e31a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	return FR_OK;
    e31c:	2300      	movs	r3, #0
}
    e31e:	0018      	movs	r0, r3
    e320:	46bd      	mov	sp, r7
    e322:	b004      	add	sp, #16
    e324:	bdb0      	pop	{r4, r5, r7, pc}
    e326:	46c0      	nop			; (mov r8, r8)
    e328:	00003b68 	.word	0x00003b68
    e32c:	00000298 	.word	0x00000298
    e330:	000002b8 	.word	0x000002b8

0000e334 <sync>:
#if !_FS_READONLY
static
FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS *fs	/* File system object */
)
{
    e334:	b5b0      	push	{r4, r5, r7, lr}
    e336:	b084      	sub	sp, #16
    e338:	af00      	add	r7, sp, #0
    e33a:	6078      	str	r0, [r7, #4]
    e33c:	4c58      	ldr	r4, [pc, #352]	; (e4a0 <sync+0x16c>)
    e33e:	447c      	add	r4, pc
	FRESULT res;


	res = move_window(fs, 0);
    e340:	230f      	movs	r3, #15
    e342:	18fd      	adds	r5, r7, r3
    e344:	687b      	ldr	r3, [r7, #4]
    e346:	2100      	movs	r1, #0
    e348:	0018      	movs	r0, r3
    e34a:	4b56      	ldr	r3, [pc, #344]	; (e4a4 <sync+0x170>)
    e34c:	447b      	add	r3, pc
    e34e:	4798      	blx	r3
    e350:	0003      	movs	r3, r0
    e352:	702b      	strb	r3, [r5, #0]
	if (res == FR_OK) {
    e354:	230f      	movs	r3, #15
    e356:	18fb      	adds	r3, r7, r3
    e358:	781b      	ldrb	r3, [r3, #0]
    e35a:	2b00      	cmp	r3, #0
    e35c:	d000      	beq.n	e360 <sync+0x2c>
    e35e:	e097      	b.n	e490 <sync+0x15c>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    e360:	687b      	ldr	r3, [r7, #4]
    e362:	781b      	ldrb	r3, [r3, #0]
    e364:	2b03      	cmp	r3, #3
    e366:	d000      	beq.n	e36a <sync+0x36>
    e368:	e084      	b.n	e474 <sync+0x140>
    e36a:	687b      	ldr	r3, [r7, #4]
    e36c:	795b      	ldrb	r3, [r3, #5]
    e36e:	2b00      	cmp	r3, #0
    e370:	d100      	bne.n	e374 <sync+0x40>
    e372:	e07f      	b.n	e474 <sync+0x140>
			fs->winsect = 0;
    e374:	687b      	ldr	r3, [r7, #4]
    e376:	2200      	movs	r2, #0
    e378:	62da      	str	r2, [r3, #44]	; 0x2c
			/* Create FSInfo structure */
			mem_set(fs->win, 0, 512);
    e37a:	687b      	ldr	r3, [r7, #4]
    e37c:	3330      	adds	r3, #48	; 0x30
    e37e:	0018      	movs	r0, r3
    e380:	2380      	movs	r3, #128	; 0x80
    e382:	009b      	lsls	r3, r3, #2
    e384:	001a      	movs	r2, r3
    e386:	2100      	movs	r1, #0
    e388:	4b47      	ldr	r3, [pc, #284]	; (e4a8 <sync+0x174>)
    e38a:	447b      	add	r3, pc
    e38c:	4798      	blx	r3
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    e38e:	687b      	ldr	r3, [r7, #4]
    e390:	4a46      	ldr	r2, [pc, #280]	; (e4ac <sync+0x178>)
    e392:	2155      	movs	r1, #85	; 0x55
    e394:	5499      	strb	r1, [r3, r2]
    e396:	687b      	ldr	r3, [r7, #4]
    e398:	4a45      	ldr	r2, [pc, #276]	; (e4b0 <sync+0x17c>)
    e39a:	21aa      	movs	r1, #170	; 0xaa
    e39c:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    e39e:	687b      	ldr	r3, [r7, #4]
    e3a0:	2230      	movs	r2, #48	; 0x30
    e3a2:	2152      	movs	r1, #82	; 0x52
    e3a4:	5499      	strb	r1, [r3, r2]
    e3a6:	687b      	ldr	r3, [r7, #4]
    e3a8:	2231      	movs	r2, #49	; 0x31
    e3aa:	2152      	movs	r1, #82	; 0x52
    e3ac:	5499      	strb	r1, [r3, r2]
    e3ae:	687b      	ldr	r3, [r7, #4]
    e3b0:	2232      	movs	r2, #50	; 0x32
    e3b2:	2161      	movs	r1, #97	; 0x61
    e3b4:	5499      	strb	r1, [r3, r2]
    e3b6:	687b      	ldr	r3, [r7, #4]
    e3b8:	2233      	movs	r2, #51	; 0x33
    e3ba:	2141      	movs	r1, #65	; 0x41
    e3bc:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    e3be:	687a      	ldr	r2, [r7, #4]
    e3c0:	2385      	movs	r3, #133	; 0x85
    e3c2:	009b      	lsls	r3, r3, #2
    e3c4:	2172      	movs	r1, #114	; 0x72
    e3c6:	54d1      	strb	r1, [r2, r3]
    e3c8:	687b      	ldr	r3, [r7, #4]
    e3ca:	4a3a      	ldr	r2, [pc, #232]	; (e4b4 <sync+0x180>)
    e3cc:	2172      	movs	r1, #114	; 0x72
    e3ce:	5499      	strb	r1, [r3, r2]
    e3d0:	687b      	ldr	r3, [r7, #4]
    e3d2:	4a39      	ldr	r2, [pc, #228]	; (e4b8 <sync+0x184>)
    e3d4:	2141      	movs	r1, #65	; 0x41
    e3d6:	5499      	strb	r1, [r3, r2]
    e3d8:	687b      	ldr	r3, [r7, #4]
    e3da:	4a38      	ldr	r2, [pc, #224]	; (e4bc <sync+0x188>)
    e3dc:	2161      	movs	r1, #97	; 0x61
    e3de:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    e3e0:	687b      	ldr	r3, [r7, #4]
    e3e2:	691b      	ldr	r3, [r3, #16]
    e3e4:	b2d9      	uxtb	r1, r3
    e3e6:	687a      	ldr	r2, [r7, #4]
    e3e8:	2386      	movs	r3, #134	; 0x86
    e3ea:	009b      	lsls	r3, r3, #2
    e3ec:	54d1      	strb	r1, [r2, r3]
    e3ee:	687b      	ldr	r3, [r7, #4]
    e3f0:	691b      	ldr	r3, [r3, #16]
    e3f2:	b29b      	uxth	r3, r3
    e3f4:	0a1b      	lsrs	r3, r3, #8
    e3f6:	b29b      	uxth	r3, r3
    e3f8:	b2d9      	uxtb	r1, r3
    e3fa:	687b      	ldr	r3, [r7, #4]
    e3fc:	4a30      	ldr	r2, [pc, #192]	; (e4c0 <sync+0x18c>)
    e3fe:	5499      	strb	r1, [r3, r2]
    e400:	687b      	ldr	r3, [r7, #4]
    e402:	691b      	ldr	r3, [r3, #16]
    e404:	0c1b      	lsrs	r3, r3, #16
    e406:	b2d9      	uxtb	r1, r3
    e408:	687b      	ldr	r3, [r7, #4]
    e40a:	4a2e      	ldr	r2, [pc, #184]	; (e4c4 <sync+0x190>)
    e40c:	5499      	strb	r1, [r3, r2]
    e40e:	687b      	ldr	r3, [r7, #4]
    e410:	691b      	ldr	r3, [r3, #16]
    e412:	0e1b      	lsrs	r3, r3, #24
    e414:	b2d9      	uxtb	r1, r3
    e416:	687b      	ldr	r3, [r7, #4]
    e418:	4a2b      	ldr	r2, [pc, #172]	; (e4c8 <sync+0x194>)
    e41a:	5499      	strb	r1, [r3, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    e41c:	687b      	ldr	r3, [r7, #4]
    e41e:	68db      	ldr	r3, [r3, #12]
    e420:	b2d9      	uxtb	r1, r3
    e422:	687a      	ldr	r2, [r7, #4]
    e424:	2387      	movs	r3, #135	; 0x87
    e426:	009b      	lsls	r3, r3, #2
    e428:	54d1      	strb	r1, [r2, r3]
    e42a:	687b      	ldr	r3, [r7, #4]
    e42c:	68db      	ldr	r3, [r3, #12]
    e42e:	b29b      	uxth	r3, r3
    e430:	0a1b      	lsrs	r3, r3, #8
    e432:	b29b      	uxth	r3, r3
    e434:	b2d9      	uxtb	r1, r3
    e436:	687b      	ldr	r3, [r7, #4]
    e438:	4a24      	ldr	r2, [pc, #144]	; (e4cc <sync+0x198>)
    e43a:	5499      	strb	r1, [r3, r2]
    e43c:	687b      	ldr	r3, [r7, #4]
    e43e:	68db      	ldr	r3, [r3, #12]
    e440:	0c1b      	lsrs	r3, r3, #16
    e442:	b2d9      	uxtb	r1, r3
    e444:	687b      	ldr	r3, [r7, #4]
    e446:	4a22      	ldr	r2, [pc, #136]	; (e4d0 <sync+0x19c>)
    e448:	5499      	strb	r1, [r3, r2]
    e44a:	687b      	ldr	r3, [r7, #4]
    e44c:	68db      	ldr	r3, [r3, #12]
    e44e:	0e1b      	lsrs	r3, r3, #24
    e450:	b2d9      	uxtb	r1, r3
    e452:	687b      	ldr	r3, [r7, #4]
    e454:	4a1f      	ldr	r2, [pc, #124]	; (e4d4 <sync+0x1a0>)
    e456:	5499      	strb	r1, [r3, r2]
			/* Write it into the FSInfo sector */
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    e458:	687b      	ldr	r3, [r7, #4]
    e45a:	7858      	ldrb	r0, [r3, #1]
    e45c:	687b      	ldr	r3, [r7, #4]
    e45e:	3330      	adds	r3, #48	; 0x30
    e460:	0019      	movs	r1, r3
    e462:	687b      	ldr	r3, [r7, #4]
    e464:	695a      	ldr	r2, [r3, #20]
    e466:	2301      	movs	r3, #1
    e468:	4d1b      	ldr	r5, [pc, #108]	; (e4d8 <sync+0x1a4>)
    e46a:	5965      	ldr	r5, [r4, r5]
    e46c:	47a8      	blx	r5
			fs->fsi_flag = 0;
    e46e:	687b      	ldr	r3, [r7, #4]
    e470:	2200      	movs	r2, #0
    e472:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    e474:	687b      	ldr	r3, [r7, #4]
    e476:	785b      	ldrb	r3, [r3, #1]
    e478:	2200      	movs	r2, #0
    e47a:	2100      	movs	r1, #0
    e47c:	0018      	movs	r0, r3
    e47e:	4b17      	ldr	r3, [pc, #92]	; (e4dc <sync+0x1a8>)
    e480:	58e3      	ldr	r3, [r4, r3]
    e482:	4798      	blx	r3
    e484:	1e03      	subs	r3, r0, #0
    e486:	d003      	beq.n	e490 <sync+0x15c>
			res = FR_DISK_ERR;
    e488:	230f      	movs	r3, #15
    e48a:	18fb      	adds	r3, r7, r3
    e48c:	2201      	movs	r2, #1
    e48e:	701a      	strb	r2, [r3, #0]
	}

	return res;
    e490:	230f      	movs	r3, #15
    e492:	18fb      	adds	r3, r7, r3
    e494:	781b      	ldrb	r3, [r3, #0]
}
    e496:	0018      	movs	r0, r3
    e498:	46bd      	mov	sp, r7
    e49a:	b004      	add	sp, #16
    e49c:	bdb0      	pop	{r4, r5, r7, pc}
    e49e:	46c0      	nop			; (mov r8, r8)
    e4a0:	00003a92 	.word	0x00003a92
    e4a4:	ffffff0d 	.word	0xffffff0d
    e4a8:	fffffe23 	.word	0xfffffe23
    e4ac:	0000022e 	.word	0x0000022e
    e4b0:	0000022f 	.word	0x0000022f
    e4b4:	00000215 	.word	0x00000215
    e4b8:	00000216 	.word	0x00000216
    e4bc:	00000217 	.word	0x00000217
    e4c0:	00000219 	.word	0x00000219
    e4c4:	0000021a 	.word	0x0000021a
    e4c8:	0000021b 	.word	0x0000021b
    e4cc:	0000021d 	.word	0x0000021d
    e4d0:	0000021e 	.word	0x0000021e
    e4d4:	0000021f 	.word	0x0000021f
    e4d8:	00000298 	.word	0x00000298
    e4dc:	000000e4 	.word	0x000000e4

0000e4e0 <clust2sect>:

static DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
    e4e0:	b580      	push	{r7, lr}
    e4e2:	b082      	sub	sp, #8
    e4e4:	af00      	add	r7, sp, #0
    e4e6:	6078      	str	r0, [r7, #4]
    e4e8:	6039      	str	r1, [r7, #0]
	clst -= 2;
    e4ea:	683b      	ldr	r3, [r7, #0]
    e4ec:	3b02      	subs	r3, #2
    e4ee:	603b      	str	r3, [r7, #0]
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    e4f0:	687b      	ldr	r3, [r7, #4]
    e4f2:	699b      	ldr	r3, [r3, #24]
    e4f4:	1e9a      	subs	r2, r3, #2
    e4f6:	683b      	ldr	r3, [r7, #0]
    e4f8:	429a      	cmp	r2, r3
    e4fa:	d801      	bhi.n	e500 <clust2sect+0x20>
    e4fc:	2300      	movs	r3, #0
    e4fe:	e007      	b.n	e510 <clust2sect+0x30>
	return clst * fs->csize + fs->database;
    e500:	687b      	ldr	r3, [r7, #4]
    e502:	789b      	ldrb	r3, [r3, #2]
    e504:	001a      	movs	r2, r3
    e506:	683b      	ldr	r3, [r7, #0]
    e508:	435a      	muls	r2, r3
    e50a:	687b      	ldr	r3, [r7, #4]
    e50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e50e:	18d3      	adds	r3, r2, r3
}
    e510:	0018      	movs	r0, r3
    e512:	46bd      	mov	sp, r7
    e514:	b002      	add	sp, #8
    e516:	bd80      	pop	{r7, pc}

0000e518 <get_fat>:

static DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
	FATFS *fs,	/* File system object */
	DWORD clst	/* Cluster# to get the link information */
)
{
    e518:	b580      	push	{r7, lr}
    e51a:	b086      	sub	sp, #24
    e51c:	af00      	add	r7, sp, #0
    e51e:	6078      	str	r0, [r7, #4]
    e520:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;


	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    e522:	683b      	ldr	r3, [r7, #0]
    e524:	2b01      	cmp	r3, #1
    e526:	d904      	bls.n	e532 <get_fat+0x1a>
    e528:	687b      	ldr	r3, [r7, #4]
    e52a:	699a      	ldr	r2, [r3, #24]
    e52c:	683b      	ldr	r3, [r7, #0]
    e52e:	429a      	cmp	r2, r3
    e530:	d801      	bhi.n	e536 <get_fat+0x1e>
		return 1;
    e532:	2301      	movs	r3, #1
    e534:	e0a3      	b.n	e67e <get_fat+0x166>

	switch (fs->fs_type) {
    e536:	687b      	ldr	r3, [r7, #4]
    e538:	781b      	ldrb	r3, [r3, #0]
    e53a:	2b02      	cmp	r3, #2
    e53c:	d04a      	beq.n	e5d4 <get_fat+0xbc>
    e53e:	2b03      	cmp	r3, #3
    e540:	d06a      	beq.n	e618 <get_fat+0x100>
    e542:	2b01      	cmp	r3, #1
    e544:	d000      	beq.n	e548 <get_fat+0x30>
    e546:	e098      	b.n	e67a <get_fat+0x162>
	case FS_FAT12 :
		bc = (UINT)clst; bc += bc / 2;
    e548:	683b      	ldr	r3, [r7, #0]
    e54a:	617b      	str	r3, [r7, #20]
    e54c:	697b      	ldr	r3, [r7, #20]
    e54e:	085b      	lsrs	r3, r3, #1
    e550:	697a      	ldr	r2, [r7, #20]
    e552:	18d3      	adds	r3, r2, r3
    e554:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    e556:	687b      	ldr	r3, [r7, #4]
    e558:	6a1a      	ldr	r2, [r3, #32]
    e55a:	697b      	ldr	r3, [r7, #20]
    e55c:	0a5b      	lsrs	r3, r3, #9
    e55e:	18d2      	adds	r2, r2, r3
    e560:	687b      	ldr	r3, [r7, #4]
    e562:	0011      	movs	r1, r2
    e564:	0018      	movs	r0, r3
    e566:	4b48      	ldr	r3, [pc, #288]	; (e688 <get_fat+0x170>)
    e568:	447b      	add	r3, pc
    e56a:	4798      	blx	r3
    e56c:	1e03      	subs	r3, r0, #0
    e56e:	d000      	beq.n	e572 <get_fat+0x5a>
    e570:	e07c      	b.n	e66c <get_fat+0x154>
		wc = fs->win[bc % SS(fs)]; bc++;
    e572:	697b      	ldr	r3, [r7, #20]
    e574:	05db      	lsls	r3, r3, #23
    e576:	0ddb      	lsrs	r3, r3, #23
    e578:	687a      	ldr	r2, [r7, #4]
    e57a:	2130      	movs	r1, #48	; 0x30
    e57c:	18d3      	adds	r3, r2, r3
    e57e:	185b      	adds	r3, r3, r1
    e580:	781b      	ldrb	r3, [r3, #0]
    e582:	613b      	str	r3, [r7, #16]
    e584:	697b      	ldr	r3, [r7, #20]
    e586:	3301      	adds	r3, #1
    e588:	617b      	str	r3, [r7, #20]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    e58a:	687b      	ldr	r3, [r7, #4]
    e58c:	6a1a      	ldr	r2, [r3, #32]
    e58e:	697b      	ldr	r3, [r7, #20]
    e590:	0a5b      	lsrs	r3, r3, #9
    e592:	18d2      	adds	r2, r2, r3
    e594:	687b      	ldr	r3, [r7, #4]
    e596:	0011      	movs	r1, r2
    e598:	0018      	movs	r0, r3
    e59a:	4b3c      	ldr	r3, [pc, #240]	; (e68c <get_fat+0x174>)
    e59c:	447b      	add	r3, pc
    e59e:	4798      	blx	r3
    e5a0:	1e03      	subs	r3, r0, #0
    e5a2:	d165      	bne.n	e670 <get_fat+0x158>
		wc |= fs->win[bc % SS(fs)] << 8;
    e5a4:	697b      	ldr	r3, [r7, #20]
    e5a6:	05db      	lsls	r3, r3, #23
    e5a8:	0ddb      	lsrs	r3, r3, #23
    e5aa:	687a      	ldr	r2, [r7, #4]
    e5ac:	2130      	movs	r1, #48	; 0x30
    e5ae:	18d3      	adds	r3, r2, r3
    e5b0:	185b      	adds	r3, r3, r1
    e5b2:	781b      	ldrb	r3, [r3, #0]
    e5b4:	021b      	lsls	r3, r3, #8
    e5b6:	001a      	movs	r2, r3
    e5b8:	693b      	ldr	r3, [r7, #16]
    e5ba:	4313      	orrs	r3, r2
    e5bc:	613b      	str	r3, [r7, #16]
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    e5be:	683b      	ldr	r3, [r7, #0]
    e5c0:	2201      	movs	r2, #1
    e5c2:	4013      	ands	r3, r2
    e5c4:	d002      	beq.n	e5cc <get_fat+0xb4>
    e5c6:	693b      	ldr	r3, [r7, #16]
    e5c8:	091b      	lsrs	r3, r3, #4
    e5ca:	e058      	b.n	e67e <get_fat+0x166>
    e5cc:	693b      	ldr	r3, [r7, #16]
    e5ce:	051b      	lsls	r3, r3, #20
    e5d0:	0d1b      	lsrs	r3, r3, #20
    e5d2:	e054      	b.n	e67e <get_fat+0x166>

	case FS_FAT16 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    e5d4:	687b      	ldr	r3, [r7, #4]
    e5d6:	6a1a      	ldr	r2, [r3, #32]
    e5d8:	683b      	ldr	r3, [r7, #0]
    e5da:	0a1b      	lsrs	r3, r3, #8
    e5dc:	18d2      	adds	r2, r2, r3
    e5de:	687b      	ldr	r3, [r7, #4]
    e5e0:	0011      	movs	r1, r2
    e5e2:	0018      	movs	r0, r3
    e5e4:	4b2a      	ldr	r3, [pc, #168]	; (e690 <get_fat+0x178>)
    e5e6:	447b      	add	r3, pc
    e5e8:	4798      	blx	r3
    e5ea:	1e03      	subs	r3, r0, #0
    e5ec:	d142      	bne.n	e674 <get_fat+0x15c>
		p = &fs->win[clst * 2 % SS(fs)];
    e5ee:	683b      	ldr	r3, [r7, #0]
    e5f0:	005a      	lsls	r2, r3, #1
    e5f2:	23ff      	movs	r3, #255	; 0xff
    e5f4:	005b      	lsls	r3, r3, #1
    e5f6:	4013      	ands	r3, r2
    e5f8:	3330      	adds	r3, #48	; 0x30
    e5fa:	687a      	ldr	r2, [r7, #4]
    e5fc:	18d3      	adds	r3, r2, r3
    e5fe:	60fb      	str	r3, [r7, #12]
		return LD_WORD(p);
    e600:	68fb      	ldr	r3, [r7, #12]
    e602:	3301      	adds	r3, #1
    e604:	781b      	ldrb	r3, [r3, #0]
    e606:	021b      	lsls	r3, r3, #8
    e608:	b21a      	sxth	r2, r3
    e60a:	68fb      	ldr	r3, [r7, #12]
    e60c:	781b      	ldrb	r3, [r3, #0]
    e60e:	b21b      	sxth	r3, r3
    e610:	4313      	orrs	r3, r2
    e612:	b21b      	sxth	r3, r3
    e614:	b29b      	uxth	r3, r3
    e616:	e032      	b.n	e67e <get_fat+0x166>

	case FS_FAT32 :
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    e618:	687b      	ldr	r3, [r7, #4]
    e61a:	6a1a      	ldr	r2, [r3, #32]
    e61c:	683b      	ldr	r3, [r7, #0]
    e61e:	09db      	lsrs	r3, r3, #7
    e620:	18d2      	adds	r2, r2, r3
    e622:	687b      	ldr	r3, [r7, #4]
    e624:	0011      	movs	r1, r2
    e626:	0018      	movs	r0, r3
    e628:	4b1a      	ldr	r3, [pc, #104]	; (e694 <get_fat+0x17c>)
    e62a:	447b      	add	r3, pc
    e62c:	4798      	blx	r3
    e62e:	1e03      	subs	r3, r0, #0
    e630:	d122      	bne.n	e678 <get_fat+0x160>
		p = &fs->win[clst * 4 % SS(fs)];
    e632:	683b      	ldr	r3, [r7, #0]
    e634:	009a      	lsls	r2, r3, #2
    e636:	23fe      	movs	r3, #254	; 0xfe
    e638:	005b      	lsls	r3, r3, #1
    e63a:	4013      	ands	r3, r2
    e63c:	3330      	adds	r3, #48	; 0x30
    e63e:	687a      	ldr	r2, [r7, #4]
    e640:	18d3      	adds	r3, r2, r3
    e642:	60fb      	str	r3, [r7, #12]
		return LD_DWORD(p) & 0x0FFFFFFF;
    e644:	68fb      	ldr	r3, [r7, #12]
    e646:	3303      	adds	r3, #3
    e648:	781b      	ldrb	r3, [r3, #0]
    e64a:	061a      	lsls	r2, r3, #24
    e64c:	68fb      	ldr	r3, [r7, #12]
    e64e:	3302      	adds	r3, #2
    e650:	781b      	ldrb	r3, [r3, #0]
    e652:	041b      	lsls	r3, r3, #16
    e654:	4313      	orrs	r3, r2
    e656:	68fa      	ldr	r2, [r7, #12]
    e658:	3201      	adds	r2, #1
    e65a:	7812      	ldrb	r2, [r2, #0]
    e65c:	0212      	lsls	r2, r2, #8
    e65e:	4313      	orrs	r3, r2
    e660:	68fa      	ldr	r2, [r7, #12]
    e662:	7812      	ldrb	r2, [r2, #0]
    e664:	4313      	orrs	r3, r2
    e666:	011b      	lsls	r3, r3, #4
    e668:	091b      	lsrs	r3, r3, #4
    e66a:	e008      	b.n	e67e <get_fat+0x166>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    e66c:	46c0      	nop			; (mov r8, r8)
    e66e:	e004      	b.n	e67a <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    e670:	46c0      	nop			; (mov r8, r8)
    e672:	e002      	b.n	e67a <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    e674:	46c0      	nop			; (mov r8, r8)
    e676:	e000      	b.n	e67a <get_fat+0x162>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    e678:	46c0      	nop			; (mov r8, r8)
	}

	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    e67a:	2301      	movs	r3, #1
    e67c:	425b      	negs	r3, r3
}
    e67e:	0018      	movs	r0, r3
    e680:	46bd      	mov	sp, r7
    e682:	b006      	add	sp, #24
    e684:	bd80      	pop	{r7, pc}
    e686:	46c0      	nop			; (mov r8, r8)
    e688:	fffffcf1 	.word	0xfffffcf1
    e68c:	fffffcbd 	.word	0xfffffcbd
    e690:	fffffc73 	.word	0xfffffc73
    e694:	fffffc2f 	.word	0xfffffc2f

0000e698 <put_fat>:
static FRESULT put_fat (
	FATFS *fs,	/* File system object */
	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
	DWORD val	/* New value to mark the cluster */
)
{
    e698:	b590      	push	{r4, r7, lr}
    e69a:	b089      	sub	sp, #36	; 0x24
    e69c:	af00      	add	r7, sp, #0
    e69e:	60f8      	str	r0, [r7, #12]
    e6a0:	60b9      	str	r1, [r7, #8]
    e6a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    e6a4:	68bb      	ldr	r3, [r7, #8]
    e6a6:	2b01      	cmp	r3, #1
    e6a8:	d904      	bls.n	e6b4 <put_fat+0x1c>
    e6aa:	68fb      	ldr	r3, [r7, #12]
    e6ac:	699a      	ldr	r2, [r3, #24]
    e6ae:	68bb      	ldr	r3, [r7, #8]
    e6b0:	429a      	cmp	r2, r3
    e6b2:	d804      	bhi.n	e6be <put_fat+0x26>
		res = FR_INT_ERR;
    e6b4:	231f      	movs	r3, #31
    e6b6:	18fb      	adds	r3, r7, r3
    e6b8:	2202      	movs	r2, #2
    e6ba:	701a      	strb	r2, [r3, #0]
    e6bc:	e104      	b.n	e8c8 <put_fat+0x230>

	} else {
		switch (fs->fs_type) {
    e6be:	68fb      	ldr	r3, [r7, #12]
    e6c0:	781b      	ldrb	r3, [r3, #0]
    e6c2:	2b02      	cmp	r3, #2
    e6c4:	d100      	bne.n	e6c8 <put_fat+0x30>
    e6c6:	e07a      	b.n	e7be <put_fat+0x126>
    e6c8:	2b03      	cmp	r3, #3
    e6ca:	d100      	bne.n	e6ce <put_fat+0x36>
    e6cc:	e0a1      	b.n	e812 <put_fat+0x17a>
    e6ce:	2b01      	cmp	r3, #1
    e6d0:	d000      	beq.n	e6d4 <put_fat+0x3c>
    e6d2:	e0ea      	b.n	e8aa <put_fat+0x212>
		case FS_FAT12 :
			bc = clst; bc += bc / 2;
    e6d4:	68bb      	ldr	r3, [r7, #8]
    e6d6:	61bb      	str	r3, [r7, #24]
    e6d8:	69bb      	ldr	r3, [r7, #24]
    e6da:	085b      	lsrs	r3, r3, #1
    e6dc:	69ba      	ldr	r2, [r7, #24]
    e6de:	18d3      	adds	r3, r2, r3
    e6e0:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    e6e2:	68fb      	ldr	r3, [r7, #12]
    e6e4:	6a1a      	ldr	r2, [r3, #32]
    e6e6:	69bb      	ldr	r3, [r7, #24]
    e6e8:	0a5b      	lsrs	r3, r3, #9
    e6ea:	18d2      	adds	r2, r2, r3
    e6ec:	231f      	movs	r3, #31
    e6ee:	18fc      	adds	r4, r7, r3
    e6f0:	68fb      	ldr	r3, [r7, #12]
    e6f2:	0011      	movs	r1, r2
    e6f4:	0018      	movs	r0, r3
    e6f6:	4b78      	ldr	r3, [pc, #480]	; (e8d8 <put_fat+0x240>)
    e6f8:	447b      	add	r3, pc
    e6fa:	4798      	blx	r3
    e6fc:	0003      	movs	r3, r0
    e6fe:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    e700:	231f      	movs	r3, #31
    e702:	18fb      	adds	r3, r7, r3
    e704:	781b      	ldrb	r3, [r3, #0]
    e706:	2b00      	cmp	r3, #0
    e708:	d000      	beq.n	e70c <put_fat+0x74>
    e70a:	e0d3      	b.n	e8b4 <put_fat+0x21c>
			p = &fs->win[bc % SS(fs)];
    e70c:	69bb      	ldr	r3, [r7, #24]
    e70e:	05db      	lsls	r3, r3, #23
    e710:	0ddb      	lsrs	r3, r3, #23
    e712:	3330      	adds	r3, #48	; 0x30
    e714:	68fa      	ldr	r2, [r7, #12]
    e716:	18d3      	adds	r3, r2, r3
    e718:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    e71a:	68bb      	ldr	r3, [r7, #8]
    e71c:	2201      	movs	r2, #1
    e71e:	4013      	ands	r3, r2
    e720:	d00d      	beq.n	e73e <put_fat+0xa6>
    e722:	697b      	ldr	r3, [r7, #20]
    e724:	781b      	ldrb	r3, [r3, #0]
    e726:	b25b      	sxtb	r3, r3
    e728:	220f      	movs	r2, #15
    e72a:	4013      	ands	r3, r2
    e72c:	b25a      	sxtb	r2, r3
    e72e:	687b      	ldr	r3, [r7, #4]
    e730:	b2db      	uxtb	r3, r3
    e732:	011b      	lsls	r3, r3, #4
    e734:	b25b      	sxtb	r3, r3
    e736:	4313      	orrs	r3, r2
    e738:	b25b      	sxtb	r3, r3
    e73a:	b2db      	uxtb	r3, r3
    e73c:	e001      	b.n	e742 <put_fat+0xaa>
    e73e:	687b      	ldr	r3, [r7, #4]
    e740:	b2db      	uxtb	r3, r3
    e742:	697a      	ldr	r2, [r7, #20]
    e744:	7013      	strb	r3, [r2, #0]
			bc++;
    e746:	69bb      	ldr	r3, [r7, #24]
    e748:	3301      	adds	r3, #1
    e74a:	61bb      	str	r3, [r7, #24]
			fs->wflag = 1;
    e74c:	68fb      	ldr	r3, [r7, #12]
    e74e:	2201      	movs	r2, #1
    e750:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    e752:	68fb      	ldr	r3, [r7, #12]
    e754:	6a1a      	ldr	r2, [r3, #32]
    e756:	69bb      	ldr	r3, [r7, #24]
    e758:	0a5b      	lsrs	r3, r3, #9
    e75a:	18d2      	adds	r2, r2, r3
    e75c:	231f      	movs	r3, #31
    e75e:	18fc      	adds	r4, r7, r3
    e760:	68fb      	ldr	r3, [r7, #12]
    e762:	0011      	movs	r1, r2
    e764:	0018      	movs	r0, r3
    e766:	4b5d      	ldr	r3, [pc, #372]	; (e8dc <put_fat+0x244>)
    e768:	447b      	add	r3, pc
    e76a:	4798      	blx	r3
    e76c:	0003      	movs	r3, r0
    e76e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    e770:	231f      	movs	r3, #31
    e772:	18fb      	adds	r3, r7, r3
    e774:	781b      	ldrb	r3, [r3, #0]
    e776:	2b00      	cmp	r3, #0
    e778:	d000      	beq.n	e77c <put_fat+0xe4>
    e77a:	e09d      	b.n	e8b8 <put_fat+0x220>
			p = &fs->win[bc % SS(fs)];
    e77c:	69bb      	ldr	r3, [r7, #24]
    e77e:	05db      	lsls	r3, r3, #23
    e780:	0ddb      	lsrs	r3, r3, #23
    e782:	3330      	adds	r3, #48	; 0x30
    e784:	68fa      	ldr	r2, [r7, #12]
    e786:	18d3      	adds	r3, r2, r3
    e788:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    e78a:	68bb      	ldr	r3, [r7, #8]
    e78c:	2201      	movs	r2, #1
    e78e:	4013      	ands	r3, r2
    e790:	d003      	beq.n	e79a <put_fat+0x102>
    e792:	687b      	ldr	r3, [r7, #4]
    e794:	091b      	lsrs	r3, r3, #4
    e796:	b2db      	uxtb	r3, r3
    e798:	e00e      	b.n	e7b8 <put_fat+0x120>
    e79a:	697b      	ldr	r3, [r7, #20]
    e79c:	781b      	ldrb	r3, [r3, #0]
    e79e:	b25b      	sxtb	r3, r3
    e7a0:	220f      	movs	r2, #15
    e7a2:	4393      	bics	r3, r2
    e7a4:	b25a      	sxtb	r2, r3
    e7a6:	687b      	ldr	r3, [r7, #4]
    e7a8:	0a1b      	lsrs	r3, r3, #8
    e7aa:	b25b      	sxtb	r3, r3
    e7ac:	210f      	movs	r1, #15
    e7ae:	400b      	ands	r3, r1
    e7b0:	b25b      	sxtb	r3, r3
    e7b2:	4313      	orrs	r3, r2
    e7b4:	b25b      	sxtb	r3, r3
    e7b6:	b2db      	uxtb	r3, r3
    e7b8:	697a      	ldr	r2, [r7, #20]
    e7ba:	7013      	strb	r3, [r2, #0]
			break;
    e7bc:	e081      	b.n	e8c2 <put_fat+0x22a>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    e7be:	68fb      	ldr	r3, [r7, #12]
    e7c0:	6a1a      	ldr	r2, [r3, #32]
    e7c2:	68bb      	ldr	r3, [r7, #8]
    e7c4:	0a1b      	lsrs	r3, r3, #8
    e7c6:	18d2      	adds	r2, r2, r3
    e7c8:	231f      	movs	r3, #31
    e7ca:	18fc      	adds	r4, r7, r3
    e7cc:	68fb      	ldr	r3, [r7, #12]
    e7ce:	0011      	movs	r1, r2
    e7d0:	0018      	movs	r0, r3
    e7d2:	4b43      	ldr	r3, [pc, #268]	; (e8e0 <put_fat+0x248>)
    e7d4:	447b      	add	r3, pc
    e7d6:	4798      	blx	r3
    e7d8:	0003      	movs	r3, r0
    e7da:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    e7dc:	231f      	movs	r3, #31
    e7de:	18fb      	adds	r3, r7, r3
    e7e0:	781b      	ldrb	r3, [r3, #0]
    e7e2:	2b00      	cmp	r3, #0
    e7e4:	d16a      	bne.n	e8bc <put_fat+0x224>
			p = &fs->win[clst * 2 % SS(fs)];
    e7e6:	68bb      	ldr	r3, [r7, #8]
    e7e8:	005a      	lsls	r2, r3, #1
    e7ea:	23ff      	movs	r3, #255	; 0xff
    e7ec:	005b      	lsls	r3, r3, #1
    e7ee:	4013      	ands	r3, r2
    e7f0:	3330      	adds	r3, #48	; 0x30
    e7f2:	68fa      	ldr	r2, [r7, #12]
    e7f4:	18d3      	adds	r3, r2, r3
    e7f6:	617b      	str	r3, [r7, #20]
			ST_WORD(p, (WORD)val);
    e7f8:	687b      	ldr	r3, [r7, #4]
    e7fa:	b2da      	uxtb	r2, r3
    e7fc:	697b      	ldr	r3, [r7, #20]
    e7fe:	701a      	strb	r2, [r3, #0]
    e800:	697b      	ldr	r3, [r7, #20]
    e802:	3301      	adds	r3, #1
    e804:	687a      	ldr	r2, [r7, #4]
    e806:	b292      	uxth	r2, r2
    e808:	0a12      	lsrs	r2, r2, #8
    e80a:	b292      	uxth	r2, r2
    e80c:	b2d2      	uxtb	r2, r2
    e80e:	701a      	strb	r2, [r3, #0]
			break;
    e810:	e057      	b.n	e8c2 <put_fat+0x22a>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    e812:	68fb      	ldr	r3, [r7, #12]
    e814:	6a1a      	ldr	r2, [r3, #32]
    e816:	68bb      	ldr	r3, [r7, #8]
    e818:	09db      	lsrs	r3, r3, #7
    e81a:	18d2      	adds	r2, r2, r3
    e81c:	231f      	movs	r3, #31
    e81e:	18fc      	adds	r4, r7, r3
    e820:	68fb      	ldr	r3, [r7, #12]
    e822:	0011      	movs	r1, r2
    e824:	0018      	movs	r0, r3
    e826:	4b2f      	ldr	r3, [pc, #188]	; (e8e4 <put_fat+0x24c>)
    e828:	447b      	add	r3, pc
    e82a:	4798      	blx	r3
    e82c:	0003      	movs	r3, r0
    e82e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    e830:	231f      	movs	r3, #31
    e832:	18fb      	adds	r3, r7, r3
    e834:	781b      	ldrb	r3, [r3, #0]
    e836:	2b00      	cmp	r3, #0
    e838:	d142      	bne.n	e8c0 <put_fat+0x228>
			p = &fs->win[clst * 4 % SS(fs)];
    e83a:	68bb      	ldr	r3, [r7, #8]
    e83c:	009a      	lsls	r2, r3, #2
    e83e:	23fe      	movs	r3, #254	; 0xfe
    e840:	005b      	lsls	r3, r3, #1
    e842:	4013      	ands	r3, r2
    e844:	3330      	adds	r3, #48	; 0x30
    e846:	68fa      	ldr	r2, [r7, #12]
    e848:	18d3      	adds	r3, r2, r3
    e84a:	617b      	str	r3, [r7, #20]
			val |= LD_DWORD(p) & 0xF0000000;
    e84c:	697b      	ldr	r3, [r7, #20]
    e84e:	3303      	adds	r3, #3
    e850:	781b      	ldrb	r3, [r3, #0]
    e852:	061a      	lsls	r2, r3, #24
    e854:	697b      	ldr	r3, [r7, #20]
    e856:	3302      	adds	r3, #2
    e858:	781b      	ldrb	r3, [r3, #0]
    e85a:	041b      	lsls	r3, r3, #16
    e85c:	4313      	orrs	r3, r2
    e85e:	697a      	ldr	r2, [r7, #20]
    e860:	3201      	adds	r2, #1
    e862:	7812      	ldrb	r2, [r2, #0]
    e864:	0212      	lsls	r2, r2, #8
    e866:	4313      	orrs	r3, r2
    e868:	697a      	ldr	r2, [r7, #20]
    e86a:	7812      	ldrb	r2, [r2, #0]
    e86c:	4313      	orrs	r3, r2
    e86e:	0f1b      	lsrs	r3, r3, #28
    e870:	071b      	lsls	r3, r3, #28
    e872:	687a      	ldr	r2, [r7, #4]
    e874:	4313      	orrs	r3, r2
    e876:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
    e878:	687b      	ldr	r3, [r7, #4]
    e87a:	b2da      	uxtb	r2, r3
    e87c:	697b      	ldr	r3, [r7, #20]
    e87e:	701a      	strb	r2, [r3, #0]
    e880:	697b      	ldr	r3, [r7, #20]
    e882:	3301      	adds	r3, #1
    e884:	687a      	ldr	r2, [r7, #4]
    e886:	b292      	uxth	r2, r2
    e888:	0a12      	lsrs	r2, r2, #8
    e88a:	b292      	uxth	r2, r2
    e88c:	b2d2      	uxtb	r2, r2
    e88e:	701a      	strb	r2, [r3, #0]
    e890:	697b      	ldr	r3, [r7, #20]
    e892:	3302      	adds	r3, #2
    e894:	687a      	ldr	r2, [r7, #4]
    e896:	0c12      	lsrs	r2, r2, #16
    e898:	b2d2      	uxtb	r2, r2
    e89a:	701a      	strb	r2, [r3, #0]
    e89c:	697b      	ldr	r3, [r7, #20]
    e89e:	3303      	adds	r3, #3
    e8a0:	687a      	ldr	r2, [r7, #4]
    e8a2:	0e12      	lsrs	r2, r2, #24
    e8a4:	b2d2      	uxtb	r2, r2
    e8a6:	701a      	strb	r2, [r3, #0]
			break;
    e8a8:	e00b      	b.n	e8c2 <put_fat+0x22a>

		default :
			res = FR_INT_ERR;
    e8aa:	231f      	movs	r3, #31
    e8ac:	18fb      	adds	r3, r7, r3
    e8ae:	2202      	movs	r2, #2
    e8b0:	701a      	strb	r2, [r3, #0]
    e8b2:	e006      	b.n	e8c2 <put_fat+0x22a>
			if (res != FR_OK) break;
    e8b4:	46c0      	nop			; (mov r8, r8)
    e8b6:	e004      	b.n	e8c2 <put_fat+0x22a>
			if (res != FR_OK) break;
    e8b8:	46c0      	nop			; (mov r8, r8)
    e8ba:	e002      	b.n	e8c2 <put_fat+0x22a>
			if (res != FR_OK) break;
    e8bc:	46c0      	nop			; (mov r8, r8)
    e8be:	e000      	b.n	e8c2 <put_fat+0x22a>
			if (res != FR_OK) break;
    e8c0:	46c0      	nop			; (mov r8, r8)
		}
		fs->wflag = 1;
    e8c2:	68fb      	ldr	r3, [r7, #12]
    e8c4:	2201      	movs	r2, #1
    e8c6:	711a      	strb	r2, [r3, #4]
	}

	return res;
    e8c8:	231f      	movs	r3, #31
    e8ca:	18fb      	adds	r3, r7, r3
    e8cc:	781b      	ldrb	r3, [r3, #0]
}
    e8ce:	0018      	movs	r0, r3
    e8d0:	46bd      	mov	sp, r7
    e8d2:	b009      	add	sp, #36	; 0x24
    e8d4:	bd90      	pop	{r4, r7, pc}
    e8d6:	46c0      	nop			; (mov r8, r8)
    e8d8:	fffffb61 	.word	0xfffffb61
    e8dc:	fffffaf1 	.word	0xfffffaf1
    e8e0:	fffffa85 	.word	0xfffffa85
    e8e4:	fffffa31 	.word	0xfffffa31

0000e8e8 <remove_chain>:
static
FRESULT remove_chain (
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
    e8e8:	b590      	push	{r4, r7, lr}
    e8ea:	b085      	sub	sp, #20
    e8ec:	af00      	add	r7, sp, #0
    e8ee:	6078      	str	r0, [r7, #4]
    e8f0:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_ERASE
	DWORD scl = clst, ecl = clst, resion[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    e8f2:	683b      	ldr	r3, [r7, #0]
    e8f4:	2b01      	cmp	r3, #1
    e8f6:	d904      	bls.n	e902 <remove_chain+0x1a>
    e8f8:	687b      	ldr	r3, [r7, #4]
    e8fa:	699a      	ldr	r2, [r3, #24]
    e8fc:	683b      	ldr	r3, [r7, #0]
    e8fe:	429a      	cmp	r2, r3
    e900:	d804      	bhi.n	e90c <remove_chain+0x24>
		res = FR_INT_ERR;
    e902:	230f      	movs	r3, #15
    e904:	18fb      	adds	r3, r7, r3
    e906:	2202      	movs	r2, #2
    e908:	701a      	strb	r2, [r3, #0]
    e90a:	e047      	b.n	e99c <remove_chain+0xb4>

	} else {
		res = FR_OK;
    e90c:	230f      	movs	r3, #15
    e90e:	18fb      	adds	r3, r7, r3
    e910:	2200      	movs	r2, #0
    e912:	701a      	strb	r2, [r3, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    e914:	e039      	b.n	e98a <remove_chain+0xa2>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    e916:	683a      	ldr	r2, [r7, #0]
    e918:	687b      	ldr	r3, [r7, #4]
    e91a:	0011      	movs	r1, r2
    e91c:	0018      	movs	r0, r3
    e91e:	4b23      	ldr	r3, [pc, #140]	; (e9ac <remove_chain+0xc4>)
    e920:	447b      	add	r3, pc
    e922:	4798      	blx	r3
    e924:	0003      	movs	r3, r0
    e926:	60bb      	str	r3, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
    e928:	68bb      	ldr	r3, [r7, #8]
    e92a:	2b00      	cmp	r3, #0
    e92c:	d033      	beq.n	e996 <remove_chain+0xae>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    e92e:	68bb      	ldr	r3, [r7, #8]
    e930:	2b01      	cmp	r3, #1
    e932:	d104      	bne.n	e93e <remove_chain+0x56>
    e934:	230f      	movs	r3, #15
    e936:	18fb      	adds	r3, r7, r3
    e938:	2202      	movs	r2, #2
    e93a:	701a      	strb	r2, [r3, #0]
    e93c:	e02e      	b.n	e99c <remove_chain+0xb4>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    e93e:	68bb      	ldr	r3, [r7, #8]
    e940:	3301      	adds	r3, #1
    e942:	d104      	bne.n	e94e <remove_chain+0x66>
    e944:	230f      	movs	r3, #15
    e946:	18fb      	adds	r3, r7, r3
    e948:	2201      	movs	r2, #1
    e94a:	701a      	strb	r2, [r3, #0]
    e94c:	e026      	b.n	e99c <remove_chain+0xb4>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    e94e:	230f      	movs	r3, #15
    e950:	18fc      	adds	r4, r7, r3
    e952:	6839      	ldr	r1, [r7, #0]
    e954:	687b      	ldr	r3, [r7, #4]
    e956:	2200      	movs	r2, #0
    e958:	0018      	movs	r0, r3
    e95a:	4b15      	ldr	r3, [pc, #84]	; (e9b0 <remove_chain+0xc8>)
    e95c:	447b      	add	r3, pc
    e95e:	4798      	blx	r3
    e960:	0003      	movs	r3, r0
    e962:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    e964:	230f      	movs	r3, #15
    e966:	18fb      	adds	r3, r7, r3
    e968:	781b      	ldrb	r3, [r3, #0]
    e96a:	2b00      	cmp	r3, #0
    e96c:	d115      	bne.n	e99a <remove_chain+0xb2>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    e96e:	687b      	ldr	r3, [r7, #4]
    e970:	691b      	ldr	r3, [r3, #16]
    e972:	3301      	adds	r3, #1
    e974:	d007      	beq.n	e986 <remove_chain+0x9e>
				fs->free_clust++;
    e976:	687b      	ldr	r3, [r7, #4]
    e978:	691b      	ldr	r3, [r3, #16]
    e97a:	1c5a      	adds	r2, r3, #1
    e97c:	687b      	ldr	r3, [r7, #4]
    e97e:	611a      	str	r2, [r3, #16]
				fs->fsi_flag = 1;
    e980:	687b      	ldr	r3, [r7, #4]
    e982:	2201      	movs	r2, #1
    e984:	715a      	strb	r2, [r3, #5]
				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
    e986:	68bb      	ldr	r3, [r7, #8]
    e988:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
    e98a:	687b      	ldr	r3, [r7, #4]
    e98c:	699a      	ldr	r2, [r3, #24]
    e98e:	683b      	ldr	r3, [r7, #0]
    e990:	429a      	cmp	r2, r3
    e992:	d8c0      	bhi.n	e916 <remove_chain+0x2e>
    e994:	e002      	b.n	e99c <remove_chain+0xb4>
			if (nxt == 0) break;				/* Empty cluster? */
    e996:	46c0      	nop			; (mov r8, r8)
    e998:	e000      	b.n	e99c <remove_chain+0xb4>
			if (res != FR_OK) break;
    e99a:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    e99c:	230f      	movs	r3, #15
    e99e:	18fb      	adds	r3, r7, r3
    e9a0:	781b      	ldrb	r3, [r3, #0]
}
    e9a2:	0018      	movs	r0, r3
    e9a4:	46bd      	mov	sp, r7
    e9a6:	b005      	add	sp, #20
    e9a8:	bd90      	pop	{r4, r7, pc}
    e9aa:	46c0      	nop			; (mov r8, r8)
    e9ac:	fffffbf5 	.word	0xfffffbf5
    e9b0:	fffffd39 	.word	0xfffffd39

0000e9b4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS *fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
    e9b4:	b590      	push	{r4, r7, lr}
    e9b6:	b087      	sub	sp, #28
    e9b8:	af00      	add	r7, sp, #0
    e9ba:	6078      	str	r0, [r7, #4]
    e9bc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
    e9be:	683b      	ldr	r3, [r7, #0]
    e9c0:	2b00      	cmp	r3, #0
    e9c2:	d10d      	bne.n	e9e0 <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
    e9c4:	687b      	ldr	r3, [r7, #4]
    e9c6:	68db      	ldr	r3, [r3, #12]
    e9c8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    e9ca:	693b      	ldr	r3, [r7, #16]
    e9cc:	2b00      	cmp	r3, #0
    e9ce:	d004      	beq.n	e9da <create_chain+0x26>
    e9d0:	687b      	ldr	r3, [r7, #4]
    e9d2:	699a      	ldr	r2, [r3, #24]
    e9d4:	693b      	ldr	r3, [r7, #16]
    e9d6:	429a      	cmp	r2, r3
    e9d8:	d819      	bhi.n	ea0e <create_chain+0x5a>
    e9da:	2301      	movs	r3, #1
    e9dc:	613b      	str	r3, [r7, #16]
    e9de:	e016      	b.n	ea0e <create_chain+0x5a>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
    e9e0:	683a      	ldr	r2, [r7, #0]
    e9e2:	687b      	ldr	r3, [r7, #4]
    e9e4:	0011      	movs	r1, r2
    e9e6:	0018      	movs	r0, r3
    e9e8:	4b40      	ldr	r3, [pc, #256]	; (eaec <create_chain+0x138>)
    e9ea:	447b      	add	r3, pc
    e9ec:	4798      	blx	r3
    e9ee:	0003      	movs	r3, r0
    e9f0:	60bb      	str	r3, [r7, #8]
		if (cs < 2) return 1;			/* It is an invalid cluster */
    e9f2:	68bb      	ldr	r3, [r7, #8]
    e9f4:	2b01      	cmp	r3, #1
    e9f6:	d801      	bhi.n	e9fc <create_chain+0x48>
    e9f8:	2301      	movs	r3, #1
    e9fa:	e073      	b.n	eae4 <create_chain+0x130>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    e9fc:	687b      	ldr	r3, [r7, #4]
    e9fe:	699a      	ldr	r2, [r3, #24]
    ea00:	68bb      	ldr	r3, [r7, #8]
    ea02:	429a      	cmp	r2, r3
    ea04:	d901      	bls.n	ea0a <create_chain+0x56>
    ea06:	68bb      	ldr	r3, [r7, #8]
    ea08:	e06c      	b.n	eae4 <create_chain+0x130>
		scl = clst;
    ea0a:	683b      	ldr	r3, [r7, #0]
    ea0c:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
    ea0e:	693b      	ldr	r3, [r7, #16]
    ea10:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
    ea12:	697b      	ldr	r3, [r7, #20]
    ea14:	3301      	adds	r3, #1
    ea16:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    ea18:	687b      	ldr	r3, [r7, #4]
    ea1a:	699a      	ldr	r2, [r3, #24]
    ea1c:	697b      	ldr	r3, [r7, #20]
    ea1e:	429a      	cmp	r2, r3
    ea20:	d807      	bhi.n	ea32 <create_chain+0x7e>
			ncl = 2;
    ea22:	2302      	movs	r3, #2
    ea24:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
    ea26:	697a      	ldr	r2, [r7, #20]
    ea28:	693b      	ldr	r3, [r7, #16]
    ea2a:	429a      	cmp	r2, r3
    ea2c:	d901      	bls.n	ea32 <create_chain+0x7e>
    ea2e:	2300      	movs	r3, #0
    ea30:	e058      	b.n	eae4 <create_chain+0x130>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    ea32:	697a      	ldr	r2, [r7, #20]
    ea34:	687b      	ldr	r3, [r7, #4]
    ea36:	0011      	movs	r1, r2
    ea38:	0018      	movs	r0, r3
    ea3a:	4b2d      	ldr	r3, [pc, #180]	; (eaf0 <create_chain+0x13c>)
    ea3c:	447b      	add	r3, pc
    ea3e:	4798      	blx	r3
    ea40:	0003      	movs	r3, r0
    ea42:	60bb      	str	r3, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
    ea44:	68bb      	ldr	r3, [r7, #8]
    ea46:	2b00      	cmp	r3, #0
    ea48:	d00d      	beq.n	ea66 <create_chain+0xb2>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    ea4a:	68bb      	ldr	r3, [r7, #8]
    ea4c:	3301      	adds	r3, #1
    ea4e:	d002      	beq.n	ea56 <create_chain+0xa2>
    ea50:	68bb      	ldr	r3, [r7, #8]
    ea52:	2b01      	cmp	r3, #1
    ea54:	d101      	bne.n	ea5a <create_chain+0xa6>
			return cs;
    ea56:	68bb      	ldr	r3, [r7, #8]
    ea58:	e044      	b.n	eae4 <create_chain+0x130>
		if (ncl == scl) return 0;		/* No free cluster */
    ea5a:	697a      	ldr	r2, [r7, #20]
    ea5c:	693b      	ldr	r3, [r7, #16]
    ea5e:	429a      	cmp	r2, r3
    ea60:	d1d7      	bne.n	ea12 <create_chain+0x5e>
    ea62:	2300      	movs	r3, #0
    ea64:	e03e      	b.n	eae4 <create_chain+0x130>
		if (cs == 0) break;				/* Found a free cluster */
    ea66:	46c0      	nop			; (mov r8, r8)
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    ea68:	230f      	movs	r3, #15
    ea6a:	18fc      	adds	r4, r7, r3
    ea6c:	4a21      	ldr	r2, [pc, #132]	; (eaf4 <create_chain+0x140>)
    ea6e:	6979      	ldr	r1, [r7, #20]
    ea70:	687b      	ldr	r3, [r7, #4]
    ea72:	0018      	movs	r0, r3
    ea74:	4b20      	ldr	r3, [pc, #128]	; (eaf8 <create_chain+0x144>)
    ea76:	447b      	add	r3, pc
    ea78:	4798      	blx	r3
    ea7a:	0003      	movs	r3, r0
    ea7c:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK && clst != 0) {
    ea7e:	230f      	movs	r3, #15
    ea80:	18fb      	adds	r3, r7, r3
    ea82:	781b      	ldrb	r3, [r3, #0]
    ea84:	2b00      	cmp	r3, #0
    ea86:	d10d      	bne.n	eaa4 <create_chain+0xf0>
    ea88:	683b      	ldr	r3, [r7, #0]
    ea8a:	2b00      	cmp	r3, #0
    ea8c:	d00a      	beq.n	eaa4 <create_chain+0xf0>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    ea8e:	230f      	movs	r3, #15
    ea90:	18fc      	adds	r4, r7, r3
    ea92:	697a      	ldr	r2, [r7, #20]
    ea94:	6839      	ldr	r1, [r7, #0]
    ea96:	687b      	ldr	r3, [r7, #4]
    ea98:	0018      	movs	r0, r3
    ea9a:	4b18      	ldr	r3, [pc, #96]	; (eafc <create_chain+0x148>)
    ea9c:	447b      	add	r3, pc
    ea9e:	4798      	blx	r3
    eaa0:	0003      	movs	r3, r0
    eaa2:	7023      	strb	r3, [r4, #0]
	}
	if (res == FR_OK) {
    eaa4:	230f      	movs	r3, #15
    eaa6:	18fb      	adds	r3, r7, r3
    eaa8:	781b      	ldrb	r3, [r3, #0]
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d10f      	bne.n	eace <create_chain+0x11a>
		fs->last_clust = ncl;			/* Update FSINFO */
    eaae:	687b      	ldr	r3, [r7, #4]
    eab0:	697a      	ldr	r2, [r7, #20]
    eab2:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    eab4:	687b      	ldr	r3, [r7, #4]
    eab6:	691b      	ldr	r3, [r3, #16]
    eab8:	3301      	adds	r3, #1
    eaba:	d012      	beq.n	eae2 <create_chain+0x12e>
			fs->free_clust--;
    eabc:	687b      	ldr	r3, [r7, #4]
    eabe:	691b      	ldr	r3, [r3, #16]
    eac0:	1e5a      	subs	r2, r3, #1
    eac2:	687b      	ldr	r3, [r7, #4]
    eac4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag = 1;
    eac6:	687b      	ldr	r3, [r7, #4]
    eac8:	2201      	movs	r2, #1
    eaca:	715a      	strb	r2, [r3, #5]
    eacc:	e009      	b.n	eae2 <create_chain+0x12e>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    eace:	230f      	movs	r3, #15
    ead0:	18fb      	adds	r3, r7, r3
    ead2:	781b      	ldrb	r3, [r3, #0]
    ead4:	2b01      	cmp	r3, #1
    ead6:	d102      	bne.n	eade <create_chain+0x12a>
    ead8:	2301      	movs	r3, #1
    eada:	425b      	negs	r3, r3
    eadc:	e000      	b.n	eae0 <create_chain+0x12c>
    eade:	2301      	movs	r3, #1
    eae0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
    eae2:	697b      	ldr	r3, [r7, #20]
}
    eae4:	0018      	movs	r0, r3
    eae6:	46bd      	mov	sp, r7
    eae8:	b007      	add	sp, #28
    eaea:	bd90      	pop	{r4, r7, pc}
    eaec:	fffffb2b 	.word	0xfffffb2b
    eaf0:	fffffad9 	.word	0xfffffad9
    eaf4:	0fffffff 	.word	0x0fffffff
    eaf8:	fffffc1f 	.word	0xfffffc1f
    eafc:	fffffbf9 	.word	0xfffffbf9

0000eb00 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR *dj,		/* Pointer to directory object */
	WORD idx		/* Directory index number */
)
{
    eb00:	b580      	push	{r7, lr}
    eb02:	b084      	sub	sp, #16
    eb04:	af00      	add	r7, sp, #0
    eb06:	6078      	str	r0, [r7, #4]
    eb08:	000a      	movs	r2, r1
    eb0a:	1cbb      	adds	r3, r7, #2
    eb0c:	801a      	strh	r2, [r3, #0]
	DWORD clst;
	WORD ic;


	dj->index = idx;
    eb0e:	687b      	ldr	r3, [r7, #4]
    eb10:	1cba      	adds	r2, r7, #2
    eb12:	8812      	ldrh	r2, [r2, #0]
    eb14:	80da      	strh	r2, [r3, #6]
	clst = dj->sclust;
    eb16:	687b      	ldr	r3, [r7, #4]
    eb18:	689b      	ldr	r3, [r3, #8]
    eb1a:	60fb      	str	r3, [r7, #12]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    eb1c:	68fb      	ldr	r3, [r7, #12]
    eb1e:	2b01      	cmp	r3, #1
    eb20:	d005      	beq.n	eb2e <dir_sdi+0x2e>
    eb22:	687b      	ldr	r3, [r7, #4]
    eb24:	681b      	ldr	r3, [r3, #0]
    eb26:	699a      	ldr	r2, [r3, #24]
    eb28:	68fb      	ldr	r3, [r7, #12]
    eb2a:	429a      	cmp	r2, r3
    eb2c:	d801      	bhi.n	eb32 <dir_sdi+0x32>
		return FR_INT_ERR;
    eb2e:	2302      	movs	r3, #2
    eb30:	e077      	b.n	ec22 <dir_sdi+0x122>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    eb32:	68fb      	ldr	r3, [r7, #12]
    eb34:	2b00      	cmp	r3, #0
    eb36:	d108      	bne.n	eb4a <dir_sdi+0x4a>
    eb38:	687b      	ldr	r3, [r7, #4]
    eb3a:	681b      	ldr	r3, [r3, #0]
    eb3c:	781b      	ldrb	r3, [r3, #0]
    eb3e:	2b03      	cmp	r3, #3
    eb40:	d103      	bne.n	eb4a <dir_sdi+0x4a>
		clst = dj->fs->dirbase;
    eb42:	687b      	ldr	r3, [r7, #4]
    eb44:	681b      	ldr	r3, [r3, #0]
    eb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eb48:	60fb      	str	r3, [r7, #12]

	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    eb4a:	68fb      	ldr	r3, [r7, #12]
    eb4c:	2b00      	cmp	r3, #0
    eb4e:	d116      	bne.n	eb7e <dir_sdi+0x7e>
		dj->clust = clst;
    eb50:	687b      	ldr	r3, [r7, #4]
    eb52:	68fa      	ldr	r2, [r7, #12]
    eb54:	60da      	str	r2, [r3, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    eb56:	687b      	ldr	r3, [r7, #4]
    eb58:	681b      	ldr	r3, [r3, #0]
    eb5a:	891b      	ldrh	r3, [r3, #8]
    eb5c:	1cba      	adds	r2, r7, #2
    eb5e:	8812      	ldrh	r2, [r2, #0]
    eb60:	429a      	cmp	r2, r3
    eb62:	d301      	bcc.n	eb68 <dir_sdi+0x68>
			return FR_INT_ERR;
    eb64:	2302      	movs	r3, #2
    eb66:	e05c      	b.n	ec22 <dir_sdi+0x122>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    eb68:	687b      	ldr	r3, [r7, #4]
    eb6a:	681b      	ldr	r3, [r3, #0]
    eb6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    eb6e:	1cba      	adds	r2, r7, #2
    eb70:	8812      	ldrh	r2, [r2, #0]
    eb72:	0912      	lsrs	r2, r2, #4
    eb74:	b292      	uxth	r2, r2
    eb76:	189a      	adds	r2, r3, r2
    eb78:	687b      	ldr	r3, [r7, #4]
    eb7a:	611a      	str	r2, [r3, #16]
    eb7c:	e044      	b.n	ec08 <dir_sdi+0x108>
	}
	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    eb7e:	687b      	ldr	r3, [r7, #4]
    eb80:	681b      	ldr	r3, [r3, #0]
    eb82:	789b      	ldrb	r3, [r3, #2]
    eb84:	b29a      	uxth	r2, r3
    eb86:	230a      	movs	r3, #10
    eb88:	18fb      	adds	r3, r7, r3
    eb8a:	0112      	lsls	r2, r2, #4
    eb8c:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    eb8e:	e021      	b.n	ebd4 <dir_sdi+0xd4>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    eb90:	687b      	ldr	r3, [r7, #4]
    eb92:	681b      	ldr	r3, [r3, #0]
    eb94:	68fa      	ldr	r2, [r7, #12]
    eb96:	0011      	movs	r1, r2
    eb98:	0018      	movs	r0, r3
    eb9a:	4b24      	ldr	r3, [pc, #144]	; (ec2c <dir_sdi+0x12c>)
    eb9c:	447b      	add	r3, pc
    eb9e:	4798      	blx	r3
    eba0:	0003      	movs	r3, r0
    eba2:	60fb      	str	r3, [r7, #12]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    eba4:	68fb      	ldr	r3, [r7, #12]
    eba6:	3301      	adds	r3, #1
    eba8:	d101      	bne.n	ebae <dir_sdi+0xae>
    ebaa:	2301      	movs	r3, #1
    ebac:	e039      	b.n	ec22 <dir_sdi+0x122>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    ebae:	68fb      	ldr	r3, [r7, #12]
    ebb0:	2b01      	cmp	r3, #1
    ebb2:	d905      	bls.n	ebc0 <dir_sdi+0xc0>
    ebb4:	687b      	ldr	r3, [r7, #4]
    ebb6:	681b      	ldr	r3, [r3, #0]
    ebb8:	699a      	ldr	r2, [r3, #24]
    ebba:	68fb      	ldr	r3, [r7, #12]
    ebbc:	429a      	cmp	r2, r3
    ebbe:	d801      	bhi.n	ebc4 <dir_sdi+0xc4>
				return FR_INT_ERR;
    ebc0:	2302      	movs	r3, #2
    ebc2:	e02e      	b.n	ec22 <dir_sdi+0x122>
			idx -= ic;
    ebc4:	1cbb      	adds	r3, r7, #2
    ebc6:	1cb9      	adds	r1, r7, #2
    ebc8:	220a      	movs	r2, #10
    ebca:	18ba      	adds	r2, r7, r2
    ebcc:	8809      	ldrh	r1, [r1, #0]
    ebce:	8812      	ldrh	r2, [r2, #0]
    ebd0:	1a8a      	subs	r2, r1, r2
    ebd2:	801a      	strh	r2, [r3, #0]
		while (idx >= ic) {	/* Follow cluster chain */
    ebd4:	1cba      	adds	r2, r7, #2
    ebd6:	230a      	movs	r3, #10
    ebd8:	18fb      	adds	r3, r7, r3
    ebda:	8812      	ldrh	r2, [r2, #0]
    ebdc:	881b      	ldrh	r3, [r3, #0]
    ebde:	429a      	cmp	r2, r3
    ebe0:	d2d6      	bcs.n	eb90 <dir_sdi+0x90>
		}
		dj->clust = clst;
    ebe2:	687b      	ldr	r3, [r7, #4]
    ebe4:	68fa      	ldr	r2, [r7, #12]
    ebe6:	60da      	str	r2, [r3, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    ebe8:	687b      	ldr	r3, [r7, #4]
    ebea:	681b      	ldr	r3, [r3, #0]
    ebec:	68fa      	ldr	r2, [r7, #12]
    ebee:	0011      	movs	r1, r2
    ebf0:	0018      	movs	r0, r3
    ebf2:	4b0f      	ldr	r3, [pc, #60]	; (ec30 <dir_sdi+0x130>)
    ebf4:	447b      	add	r3, pc
    ebf6:	4798      	blx	r3
    ebf8:	0002      	movs	r2, r0
    ebfa:	1cbb      	adds	r3, r7, #2
    ebfc:	881b      	ldrh	r3, [r3, #0]
    ebfe:	091b      	lsrs	r3, r3, #4
    ec00:	b29b      	uxth	r3, r3
    ec02:	18d2      	adds	r2, r2, r3
    ec04:	687b      	ldr	r3, [r7, #4]
    ec06:	611a      	str	r2, [r3, #16]
	}

	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    ec08:	687b      	ldr	r3, [r7, #4]
    ec0a:	681b      	ldr	r3, [r3, #0]
    ec0c:	3330      	adds	r3, #48	; 0x30
    ec0e:	001a      	movs	r2, r3
    ec10:	1cbb      	adds	r3, r7, #2
    ec12:	881b      	ldrh	r3, [r3, #0]
    ec14:	210f      	movs	r1, #15
    ec16:	400b      	ands	r3, r1
    ec18:	015b      	lsls	r3, r3, #5
    ec1a:	18d2      	adds	r2, r2, r3
    ec1c:	687b      	ldr	r3, [r7, #4]
    ec1e:	615a      	str	r2, [r3, #20]

	return FR_OK;	/* Seek succeeded */
    ec20:	2300      	movs	r3, #0
}
    ec22:	0018      	movs	r0, r3
    ec24:	46bd      	mov	sp, r7
    ec26:	b004      	add	sp, #16
    ec28:	bd80      	pop	{r7, pc}
    ec2a:	46c0      	nop			; (mov r8, r8)
    ec2c:	fffff979 	.word	0xfffff979
    ec30:	fffff8e9 	.word	0xfffff8e9

0000ec34 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch */
	DIR *dj,		/* Pointer to directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
    ec34:	b590      	push	{r4, r7, lr}
    ec36:	b085      	sub	sp, #20
    ec38:	af00      	add	r7, sp, #0
    ec3a:	6078      	str	r0, [r7, #4]
    ec3c:	6039      	str	r1, [r7, #0]
	DWORD clst;
	WORD i;


	stretch = stretch;		/* To suppress warning on read-only cfg. */
	i = dj->index + 1;
    ec3e:	687b      	ldr	r3, [r7, #4]
    ec40:	88da      	ldrh	r2, [r3, #6]
    ec42:	2308      	movs	r3, #8
    ec44:	18fb      	adds	r3, r7, r3
    ec46:	3201      	adds	r2, #1
    ec48:	801a      	strh	r2, [r3, #0]
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    ec4a:	2308      	movs	r3, #8
    ec4c:	18fb      	adds	r3, r7, r3
    ec4e:	881b      	ldrh	r3, [r3, #0]
    ec50:	2b00      	cmp	r3, #0
    ec52:	d003      	beq.n	ec5c <dir_next+0x28>
    ec54:	687b      	ldr	r3, [r7, #4]
    ec56:	691b      	ldr	r3, [r3, #16]
    ec58:	2b00      	cmp	r3, #0
    ec5a:	d101      	bne.n	ec60 <dir_next+0x2c>
		return FR_NO_FILE;
    ec5c:	2304      	movs	r3, #4
    ec5e:	e0d9      	b.n	ee14 <dir_next+0x1e0>

	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    ec60:	2308      	movs	r3, #8
    ec62:	18fb      	adds	r3, r7, r3
    ec64:	881b      	ldrh	r3, [r3, #0]
    ec66:	220f      	movs	r2, #15
    ec68:	4013      	ands	r3, r2
    ec6a:	b29b      	uxth	r3, r3
    ec6c:	2b00      	cmp	r3, #0
    ec6e:	d000      	beq.n	ec72 <dir_next+0x3e>
    ec70:	e0bd      	b.n	edee <dir_next+0x1ba>
		dj->sect++;					/* Next sector */
    ec72:	687b      	ldr	r3, [r7, #4]
    ec74:	691b      	ldr	r3, [r3, #16]
    ec76:	1c5a      	adds	r2, r3, #1
    ec78:	687b      	ldr	r3, [r7, #4]
    ec7a:	611a      	str	r2, [r3, #16]

		if (dj->clust == 0) {	/* Static table */
    ec7c:	687b      	ldr	r3, [r7, #4]
    ec7e:	68db      	ldr	r3, [r3, #12]
    ec80:	2b00      	cmp	r3, #0
    ec82:	d10a      	bne.n	ec9a <dir_next+0x66>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    ec84:	687b      	ldr	r3, [r7, #4]
    ec86:	681b      	ldr	r3, [r3, #0]
    ec88:	891b      	ldrh	r3, [r3, #8]
    ec8a:	2208      	movs	r2, #8
    ec8c:	18ba      	adds	r2, r7, r2
    ec8e:	8812      	ldrh	r2, [r2, #0]
    ec90:	429a      	cmp	r2, r3
    ec92:	d200      	bcs.n	ec96 <dir_next+0x62>
    ec94:	e0ab      	b.n	edee <dir_next+0x1ba>
				return FR_NO_FILE;
    ec96:	2304      	movs	r3, #4
    ec98:	e0bc      	b.n	ee14 <dir_next+0x1e0>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    ec9a:	2308      	movs	r3, #8
    ec9c:	18fb      	adds	r3, r7, r3
    ec9e:	881b      	ldrh	r3, [r3, #0]
    eca0:	091b      	lsrs	r3, r3, #4
    eca2:	b29b      	uxth	r3, r3
    eca4:	001a      	movs	r2, r3
    eca6:	687b      	ldr	r3, [r7, #4]
    eca8:	681b      	ldr	r3, [r3, #0]
    ecaa:	789b      	ldrb	r3, [r3, #2]
    ecac:	3b01      	subs	r3, #1
    ecae:	4013      	ands	r3, r2
    ecb0:	d000      	beq.n	ecb4 <dir_next+0x80>
    ecb2:	e09c      	b.n	edee <dir_next+0x1ba>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    ecb4:	687b      	ldr	r3, [r7, #4]
    ecb6:	681a      	ldr	r2, [r3, #0]
    ecb8:	687b      	ldr	r3, [r7, #4]
    ecba:	68db      	ldr	r3, [r3, #12]
    ecbc:	0019      	movs	r1, r3
    ecbe:	0010      	movs	r0, r2
    ecc0:	4b56      	ldr	r3, [pc, #344]	; (ee1c <dir_next+0x1e8>)
    ecc2:	447b      	add	r3, pc
    ecc4:	4798      	blx	r3
    ecc6:	0003      	movs	r3, r0
    ecc8:	60fb      	str	r3, [r7, #12]
				if (clst <= 1) return FR_INT_ERR;
    ecca:	68fb      	ldr	r3, [r7, #12]
    eccc:	2b01      	cmp	r3, #1
    ecce:	d801      	bhi.n	ecd4 <dir_next+0xa0>
    ecd0:	2302      	movs	r3, #2
    ecd2:	e09f      	b.n	ee14 <dir_next+0x1e0>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    ecd4:	68fb      	ldr	r3, [r7, #12]
    ecd6:	3301      	adds	r3, #1
    ecd8:	d101      	bne.n	ecde <dir_next+0xaa>
    ecda:	2301      	movs	r3, #1
    ecdc:	e09a      	b.n	ee14 <dir_next+0x1e0>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    ecde:	687b      	ldr	r3, [r7, #4]
    ece0:	681b      	ldr	r3, [r3, #0]
    ece2:	699a      	ldr	r2, [r3, #24]
    ece4:	68fb      	ldr	r3, [r7, #12]
    ece6:	429a      	cmp	r2, r3
    ece8:	d900      	bls.n	ecec <dir_next+0xb8>
    ecea:	e072      	b.n	edd2 <dir_next+0x19e>
#if !_FS_READONLY
					BYTE c;
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    ecec:	683b      	ldr	r3, [r7, #0]
    ecee:	2b00      	cmp	r3, #0
    ecf0:	d101      	bne.n	ecf6 <dir_next+0xc2>
    ecf2:	2304      	movs	r3, #4
    ecf4:	e08e      	b.n	ee14 <dir_next+0x1e0>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    ecf6:	687b      	ldr	r3, [r7, #4]
    ecf8:	681a      	ldr	r2, [r3, #0]
    ecfa:	687b      	ldr	r3, [r7, #4]
    ecfc:	68db      	ldr	r3, [r3, #12]
    ecfe:	0019      	movs	r1, r3
    ed00:	0010      	movs	r0, r2
    ed02:	4b47      	ldr	r3, [pc, #284]	; (ee20 <dir_next+0x1ec>)
    ed04:	447b      	add	r3, pc
    ed06:	4798      	blx	r3
    ed08:	0003      	movs	r3, r0
    ed0a:	60fb      	str	r3, [r7, #12]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    ed0c:	68fb      	ldr	r3, [r7, #12]
    ed0e:	2b00      	cmp	r3, #0
    ed10:	d101      	bne.n	ed16 <dir_next+0xe2>
    ed12:	2307      	movs	r3, #7
    ed14:	e07e      	b.n	ee14 <dir_next+0x1e0>
					if (clst == 1) return FR_INT_ERR;
    ed16:	68fb      	ldr	r3, [r7, #12]
    ed18:	2b01      	cmp	r3, #1
    ed1a:	d101      	bne.n	ed20 <dir_next+0xec>
    ed1c:	2302      	movs	r3, #2
    ed1e:	e079      	b.n	ee14 <dir_next+0x1e0>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    ed20:	68fb      	ldr	r3, [r7, #12]
    ed22:	3301      	adds	r3, #1
    ed24:	d101      	bne.n	ed2a <dir_next+0xf6>
    ed26:	2301      	movs	r3, #1
    ed28:	e074      	b.n	ee14 <dir_next+0x1e0>
					/* Clean-up stretched table */
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    ed2a:	687b      	ldr	r3, [r7, #4]
    ed2c:	681b      	ldr	r3, [r3, #0]
    ed2e:	2100      	movs	r1, #0
    ed30:	0018      	movs	r0, r3
    ed32:	4b3c      	ldr	r3, [pc, #240]	; (ee24 <dir_next+0x1f0>)
    ed34:	447b      	add	r3, pc
    ed36:	4798      	blx	r3
    ed38:	1e03      	subs	r3, r0, #0
    ed3a:	d001      	beq.n	ed40 <dir_next+0x10c>
    ed3c:	2301      	movs	r3, #1
    ed3e:	e069      	b.n	ee14 <dir_next+0x1e0>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    ed40:	687b      	ldr	r3, [r7, #4]
    ed42:	681b      	ldr	r3, [r3, #0]
    ed44:	3330      	adds	r3, #48	; 0x30
    ed46:	0018      	movs	r0, r3
    ed48:	2380      	movs	r3, #128	; 0x80
    ed4a:	009b      	lsls	r3, r3, #2
    ed4c:	001a      	movs	r2, r3
    ed4e:	2100      	movs	r1, #0
    ed50:	4b35      	ldr	r3, [pc, #212]	; (ee28 <dir_next+0x1f4>)
    ed52:	447b      	add	r3, pc
    ed54:	4798      	blx	r3
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    ed56:	687b      	ldr	r3, [r7, #4]
    ed58:	681c      	ldr	r4, [r3, #0]
    ed5a:	687b      	ldr	r3, [r7, #4]
    ed5c:	681b      	ldr	r3, [r3, #0]
    ed5e:	68fa      	ldr	r2, [r7, #12]
    ed60:	0011      	movs	r1, r2
    ed62:	0018      	movs	r0, r3
    ed64:	4b31      	ldr	r3, [pc, #196]	; (ee2c <dir_next+0x1f8>)
    ed66:	447b      	add	r3, pc
    ed68:	4798      	blx	r3
    ed6a:	0003      	movs	r3, r0
    ed6c:	62e3      	str	r3, [r4, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    ed6e:	230b      	movs	r3, #11
    ed70:	18fb      	adds	r3, r7, r3
    ed72:	2200      	movs	r2, #0
    ed74:	701a      	strb	r2, [r3, #0]
    ed76:	e01a      	b.n	edae <dir_next+0x17a>
						dj->fs->wflag = 1;
    ed78:	687b      	ldr	r3, [r7, #4]
    ed7a:	681b      	ldr	r3, [r3, #0]
    ed7c:	2201      	movs	r2, #1
    ed7e:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    ed80:	687b      	ldr	r3, [r7, #4]
    ed82:	681b      	ldr	r3, [r3, #0]
    ed84:	2100      	movs	r1, #0
    ed86:	0018      	movs	r0, r3
    ed88:	4b29      	ldr	r3, [pc, #164]	; (ee30 <dir_next+0x1fc>)
    ed8a:	447b      	add	r3, pc
    ed8c:	4798      	blx	r3
    ed8e:	1e03      	subs	r3, r0, #0
    ed90:	d001      	beq.n	ed96 <dir_next+0x162>
    ed92:	2301      	movs	r3, #1
    ed94:	e03e      	b.n	ee14 <dir_next+0x1e0>
						dj->fs->winsect++;
    ed96:	687b      	ldr	r3, [r7, #4]
    ed98:	681b      	ldr	r3, [r3, #0]
    ed9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed9c:	3201      	adds	r2, #1
    ed9e:	62da      	str	r2, [r3, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    eda0:	230b      	movs	r3, #11
    eda2:	18fb      	adds	r3, r7, r3
    eda4:	781a      	ldrb	r2, [r3, #0]
    eda6:	230b      	movs	r3, #11
    eda8:	18fb      	adds	r3, r7, r3
    edaa:	3201      	adds	r2, #1
    edac:	701a      	strb	r2, [r3, #0]
    edae:	687b      	ldr	r3, [r7, #4]
    edb0:	681b      	ldr	r3, [r3, #0]
    edb2:	789b      	ldrb	r3, [r3, #2]
    edb4:	220b      	movs	r2, #11
    edb6:	18ba      	adds	r2, r7, r2
    edb8:	7812      	ldrb	r2, [r2, #0]
    edba:	429a      	cmp	r2, r3
    edbc:	d3dc      	bcc.n	ed78 <dir_next+0x144>
					}
					dj->fs->winsect -= c;						/* Rewind window address */
    edbe:	687b      	ldr	r3, [r7, #4]
    edc0:	681b      	ldr	r3, [r3, #0]
    edc2:	687a      	ldr	r2, [r7, #4]
    edc4:	6812      	ldr	r2, [r2, #0]
    edc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    edc8:	220b      	movs	r2, #11
    edca:	18ba      	adds	r2, r7, r2
    edcc:	7812      	ldrb	r2, [r2, #0]
    edce:	1a8a      	subs	r2, r1, r2
    edd0:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dj->clust = clst;				/* Initialize data for new cluster */
    edd2:	687b      	ldr	r3, [r7, #4]
    edd4:	68fa      	ldr	r2, [r7, #12]
    edd6:	60da      	str	r2, [r3, #12]
				dj->sect = clust2sect(dj->fs, clst);
    edd8:	687b      	ldr	r3, [r7, #4]
    edda:	681b      	ldr	r3, [r3, #0]
    eddc:	68fa      	ldr	r2, [r7, #12]
    edde:	0011      	movs	r1, r2
    ede0:	0018      	movs	r0, r3
    ede2:	4b14      	ldr	r3, [pc, #80]	; (ee34 <dir_next+0x200>)
    ede4:	447b      	add	r3, pc
    ede6:	4798      	blx	r3
    ede8:	0002      	movs	r2, r0
    edea:	687b      	ldr	r3, [r7, #4]
    edec:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dj->index = i;
    edee:	687b      	ldr	r3, [r7, #4]
    edf0:	2208      	movs	r2, #8
    edf2:	18ba      	adds	r2, r7, r2
    edf4:	8812      	ldrh	r2, [r2, #0]
    edf6:	80da      	strh	r2, [r3, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    edf8:	687b      	ldr	r3, [r7, #4]
    edfa:	681b      	ldr	r3, [r3, #0]
    edfc:	3330      	adds	r3, #48	; 0x30
    edfe:	001a      	movs	r2, r3
    ee00:	2308      	movs	r3, #8
    ee02:	18fb      	adds	r3, r7, r3
    ee04:	881b      	ldrh	r3, [r3, #0]
    ee06:	210f      	movs	r1, #15
    ee08:	400b      	ands	r3, r1
    ee0a:	015b      	lsls	r3, r3, #5
    ee0c:	18d2      	adds	r2, r2, r3
    ee0e:	687b      	ldr	r3, [r7, #4]
    ee10:	615a      	str	r2, [r3, #20]

	return FR_OK;
    ee12:	2300      	movs	r3, #0
}
    ee14:	0018      	movs	r0, r3
    ee16:	46bd      	mov	sp, r7
    ee18:	b005      	add	sp, #20
    ee1a:	bd90      	pop	{r4, r7, pc}
    ee1c:	fffff853 	.word	0xfffff853
    ee20:	fffffcad 	.word	0xfffffcad
    ee24:	fffff525 	.word	0xfffff525
    ee28:	fffff45b 	.word	0xfffff45b
    ee2c:	fffff777 	.word	0xfffff777
    ee30:	fffff4cf 	.word	0xfffff4cf
    ee34:	fffff6f9 	.word	0xfffff6f9

0000ee38 <dir_find>:

static
FRESULT dir_find (
	DIR *dj			/* Pointer to the directory object linked to the file name */
)
{
    ee38:	b590      	push	{r4, r7, lr}
    ee3a:	b087      	sub	sp, #28
    ee3c:	af00      	add	r7, sp, #0
    ee3e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dj, 0);			/* Rewind directory object */
    ee40:	2317      	movs	r3, #23
    ee42:	18fc      	adds	r4, r7, r3
    ee44:	687b      	ldr	r3, [r7, #4]
    ee46:	2100      	movs	r1, #0
    ee48:	0018      	movs	r0, r3
    ee4a:	4b2e      	ldr	r3, [pc, #184]	; (ef04 <dir_find+0xcc>)
    ee4c:	447b      	add	r3, pc
    ee4e:	4798      	blx	r3
    ee50:	0003      	movs	r3, r0
    ee52:	7023      	strb	r3, [r4, #0]
	if (res != FR_OK) return res;
    ee54:	2317      	movs	r3, #23
    ee56:	18fb      	adds	r3, r7, r3
    ee58:	781b      	ldrb	r3, [r3, #0]
    ee5a:	2b00      	cmp	r3, #0
    ee5c:	d003      	beq.n	ee66 <dir_find+0x2e>
    ee5e:	2317      	movs	r3, #23
    ee60:	18fb      	adds	r3, r7, r3
    ee62:	781b      	ldrb	r3, [r3, #0]
    ee64:	e04a      	b.n	eefc <dir_find+0xc4>

#if _USE_LFN
	ord = sum = 0xFF;
#endif
	do {
		res = move_window(dj->fs, dj->sect);
    ee66:	687b      	ldr	r3, [r7, #4]
    ee68:	681a      	ldr	r2, [r3, #0]
    ee6a:	687b      	ldr	r3, [r7, #4]
    ee6c:	691b      	ldr	r3, [r3, #16]
    ee6e:	2117      	movs	r1, #23
    ee70:	187c      	adds	r4, r7, r1
    ee72:	0019      	movs	r1, r3
    ee74:	0010      	movs	r0, r2
    ee76:	4b24      	ldr	r3, [pc, #144]	; (ef08 <dir_find+0xd0>)
    ee78:	447b      	add	r3, pc
    ee7a:	4798      	blx	r3
    ee7c:	0003      	movs	r3, r0
    ee7e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    ee80:	2317      	movs	r3, #23
    ee82:	18fb      	adds	r3, r7, r3
    ee84:	781b      	ldrb	r3, [r3, #0]
    ee86:	2b00      	cmp	r3, #0
    ee88:	d132      	bne.n	eef0 <dir_find+0xb8>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    ee8a:	687b      	ldr	r3, [r7, #4]
    ee8c:	695b      	ldr	r3, [r3, #20]
    ee8e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    ee90:	230f      	movs	r3, #15
    ee92:	18fb      	adds	r3, r7, r3
    ee94:	693a      	ldr	r2, [r7, #16]
    ee96:	7812      	ldrb	r2, [r2, #0]
    ee98:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    ee9a:	230f      	movs	r3, #15
    ee9c:	18fb      	adds	r3, r7, r3
    ee9e:	781b      	ldrb	r3, [r3, #0]
    eea0:	2b00      	cmp	r3, #0
    eea2:	d104      	bne.n	eeae <dir_find+0x76>
    eea4:	2317      	movs	r3, #23
    eea6:	18fb      	adds	r3, r7, r3
    eea8:	2204      	movs	r2, #4
    eeaa:	701a      	strb	r2, [r3, #0]
    eeac:	e023      	b.n	eef6 <dir_find+0xbe>
				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    eeae:	693b      	ldr	r3, [r7, #16]
    eeb0:	330b      	adds	r3, #11
    eeb2:	781b      	ldrb	r3, [r3, #0]
    eeb4:	001a      	movs	r2, r3
    eeb6:	2308      	movs	r3, #8
    eeb8:	4013      	ands	r3, r2
    eeba:	d109      	bne.n	eed0 <dir_find+0x98>
    eebc:	687b      	ldr	r3, [r7, #4]
    eebe:	6999      	ldr	r1, [r3, #24]
    eec0:	693b      	ldr	r3, [r7, #16]
    eec2:	220b      	movs	r2, #11
    eec4:	0018      	movs	r0, r3
    eec6:	4b11      	ldr	r3, [pc, #68]	; (ef0c <dir_find+0xd4>)
    eec8:	447b      	add	r3, pc
    eeca:	4798      	blx	r3
    eecc:	1e03      	subs	r3, r0, #0
    eece:	d011      	beq.n	eef4 <dir_find+0xbc>
			break;
#endif
		res = dir_next(dj, 0);		/* Next entry */
    eed0:	2317      	movs	r3, #23
    eed2:	18fc      	adds	r4, r7, r3
    eed4:	687b      	ldr	r3, [r7, #4]
    eed6:	2100      	movs	r1, #0
    eed8:	0018      	movs	r0, r3
    eeda:	4b0d      	ldr	r3, [pc, #52]	; (ef10 <dir_find+0xd8>)
    eedc:	447b      	add	r3, pc
    eede:	4798      	blx	r3
    eee0:	0003      	movs	r3, r0
    eee2:	7023      	strb	r3, [r4, #0]
	} while (res == FR_OK);
    eee4:	2317      	movs	r3, #23
    eee6:	18fb      	adds	r3, r7, r3
    eee8:	781b      	ldrb	r3, [r3, #0]
    eeea:	2b00      	cmp	r3, #0
    eeec:	d0bb      	beq.n	ee66 <dir_find+0x2e>
    eeee:	e002      	b.n	eef6 <dir_find+0xbe>
		if (res != FR_OK) break;
    eef0:	46c0      	nop			; (mov r8, r8)
    eef2:	e000      	b.n	eef6 <dir_find+0xbe>
			break;
    eef4:	46c0      	nop			; (mov r8, r8)

	return res;
    eef6:	2317      	movs	r3, #23
    eef8:	18fb      	adds	r3, r7, r3
    eefa:	781b      	ldrb	r3, [r3, #0]
}
    eefc:	0018      	movs	r0, r3
    eefe:	46bd      	mov	sp, r7
    ef00:	b007      	add	sp, #28
    ef02:	bd90      	pop	{r4, r7, pc}
    ef04:	fffffcb1 	.word	0xfffffcb1
    ef08:	fffff3e1 	.word	0xfffff3e1
    ef0c:	fffff315 	.word	0xfffff315
    ef10:	fffffd55 	.word	0xfffffd55

0000ef14 <dir_read>:
#if _FS_MINIMIZE <= 1
static
FRESULT dir_read (
	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
)
{
    ef14:	b590      	push	{r4, r7, lr}
    ef16:	b087      	sub	sp, #28
    ef18:	af00      	add	r7, sp, #0
    ef1a:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
    ef1c:	2317      	movs	r3, #23
    ef1e:	18fb      	adds	r3, r7, r3
    ef20:	2204      	movs	r2, #4
    ef22:	701a      	strb	r2, [r3, #0]
	while (dj->sect) {
    ef24:	e043      	b.n	efae <dir_read+0x9a>
		res = move_window(dj->fs, dj->sect);
    ef26:	687b      	ldr	r3, [r7, #4]
    ef28:	681a      	ldr	r2, [r3, #0]
    ef2a:	687b      	ldr	r3, [r7, #4]
    ef2c:	691b      	ldr	r3, [r3, #16]
    ef2e:	2117      	movs	r1, #23
    ef30:	187c      	adds	r4, r7, r1
    ef32:	0019      	movs	r1, r3
    ef34:	0010      	movs	r0, r2
    ef36:	4b2a      	ldr	r3, [pc, #168]	; (efe0 <dir_read+0xcc>)
    ef38:	447b      	add	r3, pc
    ef3a:	4798      	blx	r3
    ef3c:	0003      	movs	r3, r0
    ef3e:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    ef40:	2317      	movs	r3, #23
    ef42:	18fb      	adds	r3, r7, r3
    ef44:	781b      	ldrb	r3, [r3, #0]
    ef46:	2b00      	cmp	r3, #0
    ef48:	d136      	bne.n	efb8 <dir_read+0xa4>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    ef4a:	687b      	ldr	r3, [r7, #4]
    ef4c:	695b      	ldr	r3, [r3, #20]
    ef4e:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
    ef50:	230f      	movs	r3, #15
    ef52:	18fb      	adds	r3, r7, r3
    ef54:	693a      	ldr	r2, [r7, #16]
    ef56:	7812      	ldrb	r2, [r2, #0]
    ef58:	701a      	strb	r2, [r3, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    ef5a:	230f      	movs	r3, #15
    ef5c:	18fb      	adds	r3, r7, r3
    ef5e:	781b      	ldrb	r3, [r3, #0]
    ef60:	2b00      	cmp	r3, #0
    ef62:	d104      	bne.n	ef6e <dir_read+0x5a>
    ef64:	2317      	movs	r3, #23
    ef66:	18fb      	adds	r3, r7, r3
    ef68:	2204      	movs	r2, #4
    ef6a:	701a      	strb	r2, [r3, #0]
    ef6c:	e029      	b.n	efc2 <dir_read+0xae>
					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    ef6e:	230f      	movs	r3, #15
    ef70:	18fb      	adds	r3, r7, r3
    ef72:	781b      	ldrb	r3, [r3, #0]
    ef74:	2be5      	cmp	r3, #229	; 0xe5
    ef76:	d00b      	beq.n	ef90 <dir_read+0x7c>
    ef78:	230f      	movs	r3, #15
    ef7a:	18fb      	adds	r3, r7, r3
    ef7c:	781b      	ldrb	r3, [r3, #0]
    ef7e:	2b2e      	cmp	r3, #46	; 0x2e
    ef80:	d006      	beq.n	ef90 <dir_read+0x7c>
    ef82:	693b      	ldr	r3, [r7, #16]
    ef84:	330b      	adds	r3, #11
    ef86:	781b      	ldrb	r3, [r3, #0]
    ef88:	001a      	movs	r2, r3
    ef8a:	2308      	movs	r3, #8
    ef8c:	4013      	ands	r3, r2
    ef8e:	d015      	beq.n	efbc <dir_read+0xa8>
			break;
#endif
		res = dir_next(dj, 0);				/* Next entry */
    ef90:	2317      	movs	r3, #23
    ef92:	18fc      	adds	r4, r7, r3
    ef94:	687b      	ldr	r3, [r7, #4]
    ef96:	2100      	movs	r1, #0
    ef98:	0018      	movs	r0, r3
    ef9a:	4b12      	ldr	r3, [pc, #72]	; (efe4 <dir_read+0xd0>)
    ef9c:	447b      	add	r3, pc
    ef9e:	4798      	blx	r3
    efa0:	0003      	movs	r3, r0
    efa2:	7023      	strb	r3, [r4, #0]
		if (res != FR_OK) break;
    efa4:	2317      	movs	r3, #23
    efa6:	18fb      	adds	r3, r7, r3
    efa8:	781b      	ldrb	r3, [r3, #0]
    efaa:	2b00      	cmp	r3, #0
    efac:	d108      	bne.n	efc0 <dir_read+0xac>
	while (dj->sect) {
    efae:	687b      	ldr	r3, [r7, #4]
    efb0:	691b      	ldr	r3, [r3, #16]
    efb2:	2b00      	cmp	r3, #0
    efb4:	d1b7      	bne.n	ef26 <dir_read+0x12>
    efb6:	e004      	b.n	efc2 <dir_read+0xae>
		if (res != FR_OK) break;
    efb8:	46c0      	nop			; (mov r8, r8)
    efba:	e002      	b.n	efc2 <dir_read+0xae>
			break;
    efbc:	46c0      	nop			; (mov r8, r8)
    efbe:	e000      	b.n	efc2 <dir_read+0xae>
		if (res != FR_OK) break;
    efc0:	46c0      	nop			; (mov r8, r8)
	}

	if (res != FR_OK) dj->sect = 0;
    efc2:	2317      	movs	r3, #23
    efc4:	18fb      	adds	r3, r7, r3
    efc6:	781b      	ldrb	r3, [r3, #0]
    efc8:	2b00      	cmp	r3, #0
    efca:	d002      	beq.n	efd2 <dir_read+0xbe>
    efcc:	687b      	ldr	r3, [r7, #4]
    efce:	2200      	movs	r2, #0
    efd0:	611a      	str	r2, [r3, #16]

	return res;
    efd2:	2317      	movs	r3, #23
    efd4:	18fb      	adds	r3, r7, r3
    efd6:	781b      	ldrb	r3, [r3, #0]
}
    efd8:	0018      	movs	r0, r3
    efda:	46bd      	mov	sp, r7
    efdc:	b007      	add	sp, #28
    efde:	bd90      	pop	{r4, r7, pc}
    efe0:	fffff321 	.word	0xfffff321
    efe4:	fffffc95 	.word	0xfffffc95

0000efe8 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR *dj				/* Target directory with object name to be created */
)
{
    efe8:	b590      	push	{r4, r7, lr}
    efea:	b085      	sub	sp, #20
    efec:	af00      	add	r7, sp, #0
    efee:	6078      	str	r0, [r7, #4]
			} while (res == FR_OK && --ne);
		}
	}

#else	/* Non LFN configuration */
	res = dir_sdi(dj, 0);
    eff0:	230f      	movs	r3, #15
    eff2:	18fc      	adds	r4, r7, r3
    eff4:	687b      	ldr	r3, [r7, #4]
    eff6:	2100      	movs	r1, #0
    eff8:	0018      	movs	r0, r3
    effa:	4b38      	ldr	r3, [pc, #224]	; (f0dc <dir_register+0xf4>)
    effc:	447b      	add	r3, pc
    effe:	4798      	blx	r3
    f000:	0003      	movs	r3, r0
    f002:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    f004:	230f      	movs	r3, #15
    f006:	18fb      	adds	r3, r7, r3
    f008:	781b      	ldrb	r3, [r3, #0]
    f00a:	2b00      	cmp	r3, #0
    f00c:	d132      	bne.n	f074 <dir_register+0x8c>
		do {	/* Find a blank entry for the SFN */
			res = move_window(dj->fs, dj->sect);
    f00e:	687b      	ldr	r3, [r7, #4]
    f010:	681a      	ldr	r2, [r3, #0]
    f012:	687b      	ldr	r3, [r7, #4]
    f014:	691b      	ldr	r3, [r3, #16]
    f016:	210f      	movs	r1, #15
    f018:	187c      	adds	r4, r7, r1
    f01a:	0019      	movs	r1, r3
    f01c:	0010      	movs	r0, r2
    f01e:	4b30      	ldr	r3, [pc, #192]	; (f0e0 <dir_register+0xf8>)
    f020:	447b      	add	r3, pc
    f022:	4798      	blx	r3
    f024:	0003      	movs	r3, r0
    f026:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    f028:	230f      	movs	r3, #15
    f02a:	18fb      	adds	r3, r7, r3
    f02c:	781b      	ldrb	r3, [r3, #0]
    f02e:	2b00      	cmp	r3, #0
    f030:	d11f      	bne.n	f072 <dir_register+0x8a>
			c = *dj->dir;
    f032:	687b      	ldr	r3, [r7, #4]
    f034:	695a      	ldr	r2, [r3, #20]
    f036:	230e      	movs	r3, #14
    f038:	18fb      	adds	r3, r7, r3
    f03a:	7812      	ldrb	r2, [r2, #0]
    f03c:	701a      	strb	r2, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    f03e:	230e      	movs	r3, #14
    f040:	18fb      	adds	r3, r7, r3
    f042:	781b      	ldrb	r3, [r3, #0]
    f044:	2be5      	cmp	r3, #229	; 0xe5
    f046:	d015      	beq.n	f074 <dir_register+0x8c>
    f048:	230e      	movs	r3, #14
    f04a:	18fb      	adds	r3, r7, r3
    f04c:	781b      	ldrb	r3, [r3, #0]
    f04e:	2b00      	cmp	r3, #0
    f050:	d010      	beq.n	f074 <dir_register+0x8c>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    f052:	230f      	movs	r3, #15
    f054:	18fc      	adds	r4, r7, r3
    f056:	687b      	ldr	r3, [r7, #4]
    f058:	2101      	movs	r1, #1
    f05a:	0018      	movs	r0, r3
    f05c:	4b21      	ldr	r3, [pc, #132]	; (f0e4 <dir_register+0xfc>)
    f05e:	447b      	add	r3, pc
    f060:	4798      	blx	r3
    f062:	0003      	movs	r3, r0
    f064:	7023      	strb	r3, [r4, #0]
		} while (res == FR_OK);
    f066:	230f      	movs	r3, #15
    f068:	18fb      	adds	r3, r7, r3
    f06a:	781b      	ldrb	r3, [r3, #0]
    f06c:	2b00      	cmp	r3, #0
    f06e:	d0ce      	beq.n	f00e <dir_register+0x26>
    f070:	e000      	b.n	f074 <dir_register+0x8c>
			if (res != FR_OK) break;
    f072:	46c0      	nop			; (mov r8, r8)
	}
#endif

	if (res == FR_OK) {		/* Initialize the SFN entry */
    f074:	230f      	movs	r3, #15
    f076:	18fb      	adds	r3, r7, r3
    f078:	781b      	ldrb	r3, [r3, #0]
    f07a:	2b00      	cmp	r3, #0
    f07c:	d127      	bne.n	f0ce <dir_register+0xe6>
		res = move_window(dj->fs, dj->sect);
    f07e:	687b      	ldr	r3, [r7, #4]
    f080:	681a      	ldr	r2, [r3, #0]
    f082:	687b      	ldr	r3, [r7, #4]
    f084:	691b      	ldr	r3, [r3, #16]
    f086:	210f      	movs	r1, #15
    f088:	187c      	adds	r4, r7, r1
    f08a:	0019      	movs	r1, r3
    f08c:	0010      	movs	r0, r2
    f08e:	4b16      	ldr	r3, [pc, #88]	; (f0e8 <dir_register+0x100>)
    f090:	447b      	add	r3, pc
    f092:	4798      	blx	r3
    f094:	0003      	movs	r3, r0
    f096:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    f098:	230f      	movs	r3, #15
    f09a:	18fb      	adds	r3, r7, r3
    f09c:	781b      	ldrb	r3, [r3, #0]
    f09e:	2b00      	cmp	r3, #0
    f0a0:	d115      	bne.n	f0ce <dir_register+0xe6>
			dir = dj->dir;
    f0a2:	687b      	ldr	r3, [r7, #4]
    f0a4:	695b      	ldr	r3, [r3, #20]
    f0a6:	60bb      	str	r3, [r7, #8]
			mem_set(dir, 0, SZ_DIR);	/* Clean the entry */
    f0a8:	68bb      	ldr	r3, [r7, #8]
    f0aa:	2220      	movs	r2, #32
    f0ac:	2100      	movs	r1, #0
    f0ae:	0018      	movs	r0, r3
    f0b0:	4b0e      	ldr	r3, [pc, #56]	; (f0ec <dir_register+0x104>)
    f0b2:	447b      	add	r3, pc
    f0b4:	4798      	blx	r3
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    f0b6:	687b      	ldr	r3, [r7, #4]
    f0b8:	6999      	ldr	r1, [r3, #24]
    f0ba:	68bb      	ldr	r3, [r7, #8]
    f0bc:	220b      	movs	r2, #11
    f0be:	0018      	movs	r0, r3
    f0c0:	4b0b      	ldr	r3, [pc, #44]	; (f0f0 <dir_register+0x108>)
    f0c2:	447b      	add	r3, pc
    f0c4:	4798      	blx	r3
#if _USE_LFN
			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dj->fs->wflag = 1;
    f0c6:	687b      	ldr	r3, [r7, #4]
    f0c8:	681b      	ldr	r3, [r3, #0]
    f0ca:	2201      	movs	r2, #1
    f0cc:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
    f0ce:	230f      	movs	r3, #15
    f0d0:	18fb      	adds	r3, r7, r3
    f0d2:	781b      	ldrb	r3, [r3, #0]
}
    f0d4:	0018      	movs	r0, r3
    f0d6:	46bd      	mov	sp, r7
    f0d8:	b005      	add	sp, #20
    f0da:	bd90      	pop	{r4, r7, pc}
    f0dc:	fffffb01 	.word	0xfffffb01
    f0e0:	fffff239 	.word	0xfffff239
    f0e4:	fffffbd3 	.word	0xfffffbd3
    f0e8:	fffff1c9 	.word	0xfffff1c9
    f0ec:	fffff0fb 	.word	0xfffff0fb
    f0f0:	fffff0b3 	.word	0xfffff0b3

0000f0f4 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR *dj				/* Directory object pointing the entry to be removed */
)
{
    f0f4:	b590      	push	{r4, r7, lr}
    f0f6:	b085      	sub	sp, #20
    f0f8:	af00      	add	r7, sp, #0
    f0fa:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dj, dj->index);
    f0fc:	687b      	ldr	r3, [r7, #4]
    f0fe:	88da      	ldrh	r2, [r3, #6]
    f100:	230f      	movs	r3, #15
    f102:	18fc      	adds	r4, r7, r3
    f104:	687b      	ldr	r3, [r7, #4]
    f106:	0011      	movs	r1, r2
    f108:	0018      	movs	r0, r3
    f10a:	4b15      	ldr	r3, [pc, #84]	; (f160 <dir_remove+0x6c>)
    f10c:	447b      	add	r3, pc
    f10e:	4798      	blx	r3
    f110:	0003      	movs	r3, r0
    f112:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
    f114:	230f      	movs	r3, #15
    f116:	18fb      	adds	r3, r7, r3
    f118:	781b      	ldrb	r3, [r3, #0]
    f11a:	2b00      	cmp	r3, #0
    f11c:	d119      	bne.n	f152 <dir_remove+0x5e>
		res = move_window(dj->fs, dj->sect);
    f11e:	687b      	ldr	r3, [r7, #4]
    f120:	681a      	ldr	r2, [r3, #0]
    f122:	687b      	ldr	r3, [r7, #4]
    f124:	691b      	ldr	r3, [r3, #16]
    f126:	210f      	movs	r1, #15
    f128:	187c      	adds	r4, r7, r1
    f12a:	0019      	movs	r1, r3
    f12c:	0010      	movs	r0, r2
    f12e:	4b0d      	ldr	r3, [pc, #52]	; (f164 <dir_remove+0x70>)
    f130:	447b      	add	r3, pc
    f132:	4798      	blx	r3
    f134:	0003      	movs	r3, r0
    f136:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {
    f138:	230f      	movs	r3, #15
    f13a:	18fb      	adds	r3, r7, r3
    f13c:	781b      	ldrb	r3, [r3, #0]
    f13e:	2b00      	cmp	r3, #0
    f140:	d107      	bne.n	f152 <dir_remove+0x5e>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    f142:	687b      	ldr	r3, [r7, #4]
    f144:	695b      	ldr	r3, [r3, #20]
    f146:	22e5      	movs	r2, #229	; 0xe5
    f148:	701a      	strb	r2, [r3, #0]
			dj->fs->wflag = 1;
    f14a:	687b      	ldr	r3, [r7, #4]
    f14c:	681b      	ldr	r3, [r3, #0]
    f14e:	2201      	movs	r2, #1
    f150:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
    f152:	230f      	movs	r3, #15
    f154:	18fb      	adds	r3, r7, r3
    f156:	781b      	ldrb	r3, [r3, #0]
}
    f158:	0018      	movs	r0, r3
    f15a:	46bd      	mov	sp, r7
    f15c:	b005      	add	sp, #20
    f15e:	bd90      	pop	{r4, r7, pc}
    f160:	fffff9f1 	.word	0xfffff9f1
    f164:	fffff129 	.word	0xfffff129

0000f168 <create_name>:
static
FRESULT create_name (
	DIR *dj,			/* Pointer to the directory object */
	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
)
{
    f168:	b580      	push	{r7, lr}
    f16a:	b088      	sub	sp, #32
    f16c:	af00      	add	r7, sp, #0
    f16e:	6078      	str	r0, [r7, #4]
    f170:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    f172:	683b      	ldr	r3, [r7, #0]
    f174:	681b      	ldr	r3, [r3, #0]
    f176:	60fb      	str	r3, [r7, #12]
    f178:	e002      	b.n	f180 <create_name+0x18>
    f17a:	68fb      	ldr	r3, [r7, #12]
    f17c:	3301      	adds	r3, #1
    f17e:	60fb      	str	r3, [r7, #12]
    f180:	68fb      	ldr	r3, [r7, #12]
    f182:	781b      	ldrb	r3, [r3, #0]
    f184:	2b2f      	cmp	r3, #47	; 0x2f
    f186:	d0f8      	beq.n	f17a <create_name+0x12>
    f188:	68fb      	ldr	r3, [r7, #12]
    f18a:	781b      	ldrb	r3, [r3, #0]
    f18c:	2b5c      	cmp	r3, #92	; 0x5c
    f18e:	d0f4      	beq.n	f17a <create_name+0x12>
	sfn = dj->fn;
    f190:	687b      	ldr	r3, [r7, #4]
    f192:	699b      	ldr	r3, [r3, #24]
    f194:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
    f196:	68bb      	ldr	r3, [r7, #8]
    f198:	220b      	movs	r2, #11
    f19a:	2120      	movs	r1, #32
    f19c:	0018      	movs	r0, r3
    f19e:	4b75      	ldr	r3, [pc, #468]	; (f374 <create_name+0x20c>)
    f1a0:	447b      	add	r3, pc
    f1a2:	4798      	blx	r3
	si = i = b = 0; ni = 8;
    f1a4:	231f      	movs	r3, #31
    f1a6:	18fb      	adds	r3, r7, r3
    f1a8:	2200      	movs	r2, #0
    f1aa:	701a      	strb	r2, [r3, #0]
    f1ac:	2300      	movs	r3, #0
    f1ae:	613b      	str	r3, [r7, #16]
    f1b0:	693b      	ldr	r3, [r7, #16]
    f1b2:	617b      	str	r3, [r7, #20]
    f1b4:	2308      	movs	r3, #8
    f1b6:	61bb      	str	r3, [r7, #24]
		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
    f1b8:	697b      	ldr	r3, [r7, #20]
    f1ba:	1c5a      	adds	r2, r3, #1
    f1bc:	617a      	str	r2, [r7, #20]
    f1be:	68fa      	ldr	r2, [r7, #12]
    f1c0:	18d2      	adds	r2, r2, r3
    f1c2:	231e      	movs	r3, #30
    f1c4:	18fb      	adds	r3, r7, r3
    f1c6:	7812      	ldrb	r2, [r2, #0]
    f1c8:	701a      	strb	r2, [r3, #0]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    f1ca:	231e      	movs	r3, #30
    f1cc:	18fb      	adds	r3, r7, r3
    f1ce:	781b      	ldrb	r3, [r3, #0]
    f1d0:	2b20      	cmp	r3, #32
    f1d2:	d800      	bhi.n	f1d6 <create_name+0x6e>
    f1d4:	e07e      	b.n	f2d4 <create_name+0x16c>
    f1d6:	231e      	movs	r3, #30
    f1d8:	18fb      	adds	r3, r7, r3
    f1da:	781b      	ldrb	r3, [r3, #0]
    f1dc:	2b2f      	cmp	r3, #47	; 0x2f
    f1de:	d100      	bne.n	f1e2 <create_name+0x7a>
    f1e0:	e078      	b.n	f2d4 <create_name+0x16c>
    f1e2:	231e      	movs	r3, #30
    f1e4:	18fb      	adds	r3, r7, r3
    f1e6:	781b      	ldrb	r3, [r3, #0]
    f1e8:	2b5c      	cmp	r3, #92	; 0x5c
    f1ea:	d100      	bne.n	f1ee <create_name+0x86>
    f1ec:	e072      	b.n	f2d4 <create_name+0x16c>
		if (c == '.' || i >= ni) {
    f1ee:	231e      	movs	r3, #30
    f1f0:	18fb      	adds	r3, r7, r3
    f1f2:	781b      	ldrb	r3, [r3, #0]
    f1f4:	2b2e      	cmp	r3, #46	; 0x2e
    f1f6:	d003      	beq.n	f200 <create_name+0x98>
    f1f8:	693a      	ldr	r2, [r7, #16]
    f1fa:	69bb      	ldr	r3, [r7, #24]
    f1fc:	429a      	cmp	r2, r3
    f1fe:	d315      	bcc.n	f22c <create_name+0xc4>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    f200:	69bb      	ldr	r3, [r7, #24]
    f202:	2b08      	cmp	r3, #8
    f204:	d104      	bne.n	f210 <create_name+0xa8>
    f206:	231e      	movs	r3, #30
    f208:	18fb      	adds	r3, r7, r3
    f20a:	781b      	ldrb	r3, [r3, #0]
    f20c:	2b2e      	cmp	r3, #46	; 0x2e
    f20e:	d001      	beq.n	f214 <create_name+0xac>
    f210:	2306      	movs	r3, #6
    f212:	e0aa      	b.n	f36a <create_name+0x202>
			i = 8; ni = 11;
    f214:	2308      	movs	r3, #8
    f216:	613b      	str	r3, [r7, #16]
    f218:	230b      	movs	r3, #11
    f21a:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
    f21c:	231f      	movs	r3, #31
    f21e:	18fb      	adds	r3, r7, r3
    f220:	221f      	movs	r2, #31
    f222:	18ba      	adds	r2, r7, r2
    f224:	7812      	ldrb	r2, [r2, #0]
    f226:	0092      	lsls	r2, r2, #2
    f228:	701a      	strb	r2, [r3, #0]
    f22a:	e052      	b.n	f2d2 <create_name+0x16a>
		}
		if (c >= 0x80) {				/* Extended char? */
    f22c:	231e      	movs	r3, #30
    f22e:	18fb      	adds	r3, r7, r3
    f230:	781b      	ldrb	r3, [r3, #0]
    f232:	b25b      	sxtb	r3, r3
    f234:	2b00      	cmp	r3, #0
    f236:	da09      	bge.n	f24c <create_name+0xe4>
			b |= 3;						/* Eliminate NT flag */
    f238:	231f      	movs	r3, #31
    f23a:	18fb      	adds	r3, r7, r3
    f23c:	221f      	movs	r2, #31
    f23e:	18ba      	adds	r2, r7, r2
    f240:	7812      	ldrb	r2, [r2, #0]
    f242:	2103      	movs	r1, #3
    f244:	430a      	orrs	r2, r1
    f246:	701a      	strb	r2, [r3, #0]
#ifdef _EXCVT
			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
#else
#if !_DF1S	/* ASCII only cfg */
			return FR_INVALID_NAME;
    f248:	2306      	movs	r3, #6
    f24a:	e08e      	b.n	f36a <create_name+0x202>
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
    f24c:	231e      	movs	r3, #30
    f24e:	18fb      	adds	r3, r7, r3
    f250:	781b      	ldrb	r3, [r3, #0]
    f252:	4a49      	ldr	r2, [pc, #292]	; (f378 <create_name+0x210>)
    f254:	447a      	add	r2, pc
    f256:	0019      	movs	r1, r3
    f258:	0010      	movs	r0, r2
    f25a:	4b48      	ldr	r3, [pc, #288]	; (f37c <create_name+0x214>)
    f25c:	447b      	add	r3, pc
    f25e:	4798      	blx	r3
    f260:	1e03      	subs	r3, r0, #0
    f262:	d001      	beq.n	f268 <create_name+0x100>
				return FR_INVALID_NAME;
    f264:	2306      	movs	r3, #6
    f266:	e080      	b.n	f36a <create_name+0x202>
			if (IsUpper(c)) {			/* ASCII large capital? */
    f268:	231e      	movs	r3, #30
    f26a:	18fb      	adds	r3, r7, r3
    f26c:	781b      	ldrb	r3, [r3, #0]
    f26e:	2b40      	cmp	r3, #64	; 0x40
    f270:	d90d      	bls.n	f28e <create_name+0x126>
    f272:	231e      	movs	r3, #30
    f274:	18fb      	adds	r3, r7, r3
    f276:	781b      	ldrb	r3, [r3, #0]
    f278:	2b5a      	cmp	r3, #90	; 0x5a
    f27a:	d808      	bhi.n	f28e <create_name+0x126>
				b |= 2;
    f27c:	231f      	movs	r3, #31
    f27e:	18fb      	adds	r3, r7, r3
    f280:	221f      	movs	r2, #31
    f282:	18ba      	adds	r2, r7, r2
    f284:	7812      	ldrb	r2, [r2, #0]
    f286:	2102      	movs	r1, #2
    f288:	430a      	orrs	r2, r1
    f28a:	701a      	strb	r2, [r3, #0]
    f28c:	e018      	b.n	f2c0 <create_name+0x158>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
    f28e:	231e      	movs	r3, #30
    f290:	18fb      	adds	r3, r7, r3
    f292:	781b      	ldrb	r3, [r3, #0]
    f294:	2b60      	cmp	r3, #96	; 0x60
    f296:	d913      	bls.n	f2c0 <create_name+0x158>
    f298:	231e      	movs	r3, #30
    f29a:	18fb      	adds	r3, r7, r3
    f29c:	781b      	ldrb	r3, [r3, #0]
    f29e:	2b7a      	cmp	r3, #122	; 0x7a
    f2a0:	d80e      	bhi.n	f2c0 <create_name+0x158>
					b |= 1; c -= 0x20;
    f2a2:	231f      	movs	r3, #31
    f2a4:	18fb      	adds	r3, r7, r3
    f2a6:	221f      	movs	r2, #31
    f2a8:	18ba      	adds	r2, r7, r2
    f2aa:	7812      	ldrb	r2, [r2, #0]
    f2ac:	2101      	movs	r1, #1
    f2ae:	430a      	orrs	r2, r1
    f2b0:	701a      	strb	r2, [r3, #0]
    f2b2:	231e      	movs	r3, #30
    f2b4:	18fb      	adds	r3, r7, r3
    f2b6:	221e      	movs	r2, #30
    f2b8:	18ba      	adds	r2, r7, r2
    f2ba:	7812      	ldrb	r2, [r2, #0]
    f2bc:	3a20      	subs	r2, #32
    f2be:	701a      	strb	r2, [r3, #0]
				}
			}
			sfn[i++] = c;
    f2c0:	693b      	ldr	r3, [r7, #16]
    f2c2:	1c5a      	adds	r2, r3, #1
    f2c4:	613a      	str	r2, [r7, #16]
    f2c6:	68ba      	ldr	r2, [r7, #8]
    f2c8:	18d3      	adds	r3, r2, r3
    f2ca:	221e      	movs	r2, #30
    f2cc:	18ba      	adds	r2, r7, r2
    f2ce:	7812      	ldrb	r2, [r2, #0]
    f2d0:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
    f2d2:	e771      	b.n	f1b8 <create_name+0x50>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
    f2d4:	68fa      	ldr	r2, [r7, #12]
    f2d6:	697b      	ldr	r3, [r7, #20]
    f2d8:	18d2      	adds	r2, r2, r3
    f2da:	683b      	ldr	r3, [r7, #0]
    f2dc:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    f2de:	231e      	movs	r3, #30
    f2e0:	18fb      	adds	r3, r7, r3
    f2e2:	781b      	ldrb	r3, [r3, #0]
    f2e4:	2b20      	cmp	r3, #32
    f2e6:	d801      	bhi.n	f2ec <create_name+0x184>
    f2e8:	2204      	movs	r2, #4
    f2ea:	e000      	b.n	f2ee <create_name+0x186>
    f2ec:	2200      	movs	r2, #0
    f2ee:	231e      	movs	r3, #30
    f2f0:	18fb      	adds	r3, r7, r3
    f2f2:	701a      	strb	r2, [r3, #0]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    f2f4:	693b      	ldr	r3, [r7, #16]
    f2f6:	2b00      	cmp	r3, #0
    f2f8:	d101      	bne.n	f2fe <create_name+0x196>
    f2fa:	2306      	movs	r3, #6
    f2fc:	e035      	b.n	f36a <create_name+0x202>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    f2fe:	68bb      	ldr	r3, [r7, #8]
    f300:	781b      	ldrb	r3, [r3, #0]
    f302:	2be5      	cmp	r3, #229	; 0xe5
    f304:	d102      	bne.n	f30c <create_name+0x1a4>
    f306:	68bb      	ldr	r3, [r7, #8]
    f308:	2205      	movs	r2, #5
    f30a:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
    f30c:	69bb      	ldr	r3, [r7, #24]
    f30e:	2b08      	cmp	r3, #8
    f310:	d106      	bne.n	f320 <create_name+0x1b8>
    f312:	231f      	movs	r3, #31
    f314:	18fb      	adds	r3, r7, r3
    f316:	221f      	movs	r2, #31
    f318:	18ba      	adds	r2, r7, r2
    f31a:	7812      	ldrb	r2, [r2, #0]
    f31c:	0092      	lsls	r2, r2, #2
    f31e:	701a      	strb	r2, [r3, #0]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    f320:	231f      	movs	r3, #31
    f322:	18fb      	adds	r3, r7, r3
    f324:	781b      	ldrb	r3, [r3, #0]
    f326:	2203      	movs	r2, #3
    f328:	4013      	ands	r3, r2
    f32a:	2b01      	cmp	r3, #1
    f32c:	d107      	bne.n	f33e <create_name+0x1d6>
    f32e:	231e      	movs	r3, #30
    f330:	18fb      	adds	r3, r7, r3
    f332:	221e      	movs	r2, #30
    f334:	18ba      	adds	r2, r7, r2
    f336:	7812      	ldrb	r2, [r2, #0]
    f338:	2110      	movs	r1, #16
    f33a:	430a      	orrs	r2, r1
    f33c:	701a      	strb	r2, [r3, #0]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    f33e:	231f      	movs	r3, #31
    f340:	18fb      	adds	r3, r7, r3
    f342:	781b      	ldrb	r3, [r3, #0]
    f344:	220c      	movs	r2, #12
    f346:	4013      	ands	r3, r2
    f348:	2b04      	cmp	r3, #4
    f34a:	d107      	bne.n	f35c <create_name+0x1f4>
    f34c:	231e      	movs	r3, #30
    f34e:	18fb      	adds	r3, r7, r3
    f350:	221e      	movs	r2, #30
    f352:	18ba      	adds	r2, r7, r2
    f354:	7812      	ldrb	r2, [r2, #0]
    f356:	2108      	movs	r1, #8
    f358:	430a      	orrs	r2, r1
    f35a:	701a      	strb	r2, [r3, #0]

	sfn[NS] = c;		/* Store NT flag, File name is created */
    f35c:	68bb      	ldr	r3, [r7, #8]
    f35e:	330b      	adds	r3, #11
    f360:	221e      	movs	r2, #30
    f362:	18ba      	adds	r2, r7, r2
    f364:	7812      	ldrb	r2, [r2, #0]
    f366:	701a      	strb	r2, [r3, #0]

	return FR_OK;
    f368:	2300      	movs	r3, #0
#endif
}
    f36a:	0018      	movs	r0, r3
    f36c:	46bd      	mov	sp, r7
    f36e:	b008      	add	sp, #32
    f370:	bd80      	pop	{r7, pc}
    f372:	46c0      	nop			; (mov r8, r8)
    f374:	fffff00d 	.word	0xfffff00d
    f378:	00002ab4 	.word	0x00002ab4
    f37c:	ffffefcb 	.word	0xffffefcb

0000f380 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
    f380:	b580      	push	{r7, lr}
    f382:	b088      	sub	sp, #32
    f384:	af00      	add	r7, sp, #0
    f386:	6078      	str	r0, [r7, #4]
    f388:	6039      	str	r1, [r7, #0]
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
    f38a:	683b      	ldr	r3, [r7, #0]
    f38c:	3309      	adds	r3, #9
    f38e:	61bb      	str	r3, [r7, #24]
	if (dj->sect) {
    f390:	687b      	ldr	r3, [r7, #4]
    f392:	691b      	ldr	r3, [r3, #16]
    f394:	2b00      	cmp	r3, #0
    f396:	d100      	bne.n	f39a <get_fileinfo+0x1a>
    f398:	e08a      	b.n	f4b0 <get_fileinfo+0x130>
		dir = dj->dir;
    f39a:	687b      	ldr	r3, [r7, #4]
    f39c:	695b      	ldr	r3, [r3, #20]
    f39e:	613b      	str	r3, [r7, #16]
		nt = dir[DIR_NTres];		/* NT flag */
    f3a0:	230f      	movs	r3, #15
    f3a2:	18fb      	adds	r3, r7, r3
    f3a4:	693a      	ldr	r2, [r7, #16]
    f3a6:	7b12      	ldrb	r2, [r2, #12]
    f3a8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    f3aa:	2300      	movs	r3, #0
    f3ac:	61fb      	str	r3, [r7, #28]
    f3ae:	e01e      	b.n	f3ee <get_fileinfo+0x6e>
			c = dir[i];
    f3b0:	693a      	ldr	r2, [r7, #16]
    f3b2:	69fb      	ldr	r3, [r7, #28]
    f3b4:	18d2      	adds	r2, r2, r3
    f3b6:	2317      	movs	r3, #23
    f3b8:	18fb      	adds	r3, r7, r3
    f3ba:	7812      	ldrb	r2, [r2, #0]
    f3bc:	701a      	strb	r2, [r3, #0]
			if (c == ' ') break;
    f3be:	2317      	movs	r3, #23
    f3c0:	18fb      	adds	r3, r7, r3
    f3c2:	781b      	ldrb	r3, [r3, #0]
    f3c4:	2b20      	cmp	r3, #32
    f3c6:	d016      	beq.n	f3f6 <get_fileinfo+0x76>
			if (c == NDDE) c = (TCHAR)DDE;
    f3c8:	2317      	movs	r3, #23
    f3ca:	18fb      	adds	r3, r7, r3
    f3cc:	781b      	ldrb	r3, [r3, #0]
    f3ce:	2b05      	cmp	r3, #5
    f3d0:	d103      	bne.n	f3da <get_fileinfo+0x5a>
    f3d2:	2317      	movs	r3, #23
    f3d4:	18fb      	adds	r3, r7, r3
    f3d6:	22e5      	movs	r2, #229	; 0xe5
    f3d8:	701a      	strb	r2, [r3, #0]
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
    f3da:	69bb      	ldr	r3, [r7, #24]
    f3dc:	1c5a      	adds	r2, r3, #1
    f3de:	61ba      	str	r2, [r7, #24]
    f3e0:	2217      	movs	r2, #23
    f3e2:	18ba      	adds	r2, r7, r2
    f3e4:	7812      	ldrb	r2, [r2, #0]
    f3e6:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
    f3e8:	69fb      	ldr	r3, [r7, #28]
    f3ea:	3301      	adds	r3, #1
    f3ec:	61fb      	str	r3, [r7, #28]
    f3ee:	69fb      	ldr	r3, [r7, #28]
    f3f0:	2b07      	cmp	r3, #7
    f3f2:	d9dd      	bls.n	f3b0 <get_fileinfo+0x30>
    f3f4:	e000      	b.n	f3f8 <get_fileinfo+0x78>
			if (c == ' ') break;
    f3f6:	46c0      	nop			; (mov r8, r8)
		}
		if (dir[8] != ' ') {		/* Copy name extension */
    f3f8:	693b      	ldr	r3, [r7, #16]
    f3fa:	3308      	adds	r3, #8
    f3fc:	781b      	ldrb	r3, [r3, #0]
    f3fe:	2b20      	cmp	r3, #32
    f400:	d022      	beq.n	f448 <get_fileinfo+0xc8>
			*p++ = '.';
    f402:	69bb      	ldr	r3, [r7, #24]
    f404:	1c5a      	adds	r2, r3, #1
    f406:	61ba      	str	r2, [r7, #24]
    f408:	222e      	movs	r2, #46	; 0x2e
    f40a:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    f40c:	2308      	movs	r3, #8
    f40e:	61fb      	str	r3, [r7, #28]
    f410:	e015      	b.n	f43e <get_fileinfo+0xbe>
				c = dir[i];
    f412:	693a      	ldr	r2, [r7, #16]
    f414:	69fb      	ldr	r3, [r7, #28]
    f416:	18d2      	adds	r2, r2, r3
    f418:	2317      	movs	r3, #23
    f41a:	18fb      	adds	r3, r7, r3
    f41c:	7812      	ldrb	r2, [r2, #0]
    f41e:	701a      	strb	r2, [r3, #0]
				if (c == ' ') break;
    f420:	2317      	movs	r3, #23
    f422:	18fb      	adds	r3, r7, r3
    f424:	781b      	ldrb	r3, [r3, #0]
    f426:	2b20      	cmp	r3, #32
    f428:	d00d      	beq.n	f446 <get_fileinfo+0xc6>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
    f42a:	69bb      	ldr	r3, [r7, #24]
    f42c:	1c5a      	adds	r2, r3, #1
    f42e:	61ba      	str	r2, [r7, #24]
    f430:	2217      	movs	r2, #23
    f432:	18ba      	adds	r2, r7, r2
    f434:	7812      	ldrb	r2, [r2, #0]
    f436:	701a      	strb	r2, [r3, #0]
			for (i = 8; i < 11; i++) {
    f438:	69fb      	ldr	r3, [r7, #28]
    f43a:	3301      	adds	r3, #1
    f43c:	61fb      	str	r3, [r7, #28]
    f43e:	69fb      	ldr	r3, [r7, #28]
    f440:	2b0a      	cmp	r3, #10
    f442:	d9e6      	bls.n	f412 <get_fileinfo+0x92>
    f444:	e000      	b.n	f448 <get_fileinfo+0xc8>
				if (c == ' ') break;
    f446:	46c0      	nop			; (mov r8, r8)
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
    f448:	693b      	ldr	r3, [r7, #16]
    f44a:	7ada      	ldrb	r2, [r3, #11]
    f44c:	683b      	ldr	r3, [r7, #0]
    f44e:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
    f450:	693b      	ldr	r3, [r7, #16]
    f452:	331f      	adds	r3, #31
    f454:	781b      	ldrb	r3, [r3, #0]
    f456:	061a      	lsls	r2, r3, #24
    f458:	693b      	ldr	r3, [r7, #16]
    f45a:	331e      	adds	r3, #30
    f45c:	781b      	ldrb	r3, [r3, #0]
    f45e:	041b      	lsls	r3, r3, #16
    f460:	4313      	orrs	r3, r2
    f462:	693a      	ldr	r2, [r7, #16]
    f464:	321d      	adds	r2, #29
    f466:	7812      	ldrb	r2, [r2, #0]
    f468:	0212      	lsls	r2, r2, #8
    f46a:	4313      	orrs	r3, r2
    f46c:	693a      	ldr	r2, [r7, #16]
    f46e:	321c      	adds	r2, #28
    f470:	7812      	ldrb	r2, [r2, #0]
    f472:	431a      	orrs	r2, r3
    f474:	683b      	ldr	r3, [r7, #0]
    f476:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
    f478:	693b      	ldr	r3, [r7, #16]
    f47a:	3319      	adds	r3, #25
    f47c:	781b      	ldrb	r3, [r3, #0]
    f47e:	021b      	lsls	r3, r3, #8
    f480:	b21a      	sxth	r2, r3
    f482:	693b      	ldr	r3, [r7, #16]
    f484:	3318      	adds	r3, #24
    f486:	781b      	ldrb	r3, [r3, #0]
    f488:	b21b      	sxth	r3, r3
    f48a:	4313      	orrs	r3, r2
    f48c:	b21b      	sxth	r3, r3
    f48e:	b29a      	uxth	r2, r3
    f490:	683b      	ldr	r3, [r7, #0]
    f492:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
    f494:	693b      	ldr	r3, [r7, #16]
    f496:	3317      	adds	r3, #23
    f498:	781b      	ldrb	r3, [r3, #0]
    f49a:	021b      	lsls	r3, r3, #8
    f49c:	b21a      	sxth	r2, r3
    f49e:	693b      	ldr	r3, [r7, #16]
    f4a0:	3316      	adds	r3, #22
    f4a2:	781b      	ldrb	r3, [r3, #0]
    f4a4:	b21b      	sxth	r3, r3
    f4a6:	4313      	orrs	r3, r2
    f4a8:	b21b      	sxth	r3, r3
    f4aa:	b29a      	uxth	r2, r3
    f4ac:	683b      	ldr	r3, [r7, #0]
    f4ae:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
    f4b0:	69bb      	ldr	r3, [r7, #24]
    f4b2:	2200      	movs	r2, #0
    f4b4:	701a      	strb	r2, [r3, #0]
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
    f4b6:	46c0      	nop			; (mov r8, r8)
    f4b8:	46bd      	mov	sp, r7
    f4ba:	b008      	add	sp, #32
    f4bc:	bd80      	pop	{r7, pc}
	...

0000f4c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	const TCHAR *path	/* Full-path string to find a file or directory */
)
{
    f4c0:	b590      	push	{r4, r7, lr}
    f4c2:	b085      	sub	sp, #20
    f4c4:	af00      	add	r7, sp, #0
    f4c6:	6078      	str	r0, [r7, #4]
    f4c8:	6039      	str	r1, [r7, #0]
		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
	} else {							/* No heading separator */
		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
	}
#else
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    f4ca:	683b      	ldr	r3, [r7, #0]
    f4cc:	781b      	ldrb	r3, [r3, #0]
    f4ce:	2b2f      	cmp	r3, #47	; 0x2f
    f4d0:	d003      	beq.n	f4da <follow_path+0x1a>
    f4d2:	683b      	ldr	r3, [r7, #0]
    f4d4:	781b      	ldrb	r3, [r3, #0]
    f4d6:	2b5c      	cmp	r3, #92	; 0x5c
    f4d8:	d102      	bne.n	f4e0 <follow_path+0x20>
		path++;
    f4da:	683b      	ldr	r3, [r7, #0]
    f4dc:	3301      	adds	r3, #1
    f4de:	603b      	str	r3, [r7, #0]
	dj->sclust = 0;						/* Start from the root dir */
    f4e0:	687b      	ldr	r3, [r7, #4]
    f4e2:	2200      	movs	r2, #0
    f4e4:	609a      	str	r2, [r3, #8]
#endif

	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    f4e6:	683b      	ldr	r3, [r7, #0]
    f4e8:	781b      	ldrb	r3, [r3, #0]
    f4ea:	2b1f      	cmp	r3, #31
    f4ec:	d80d      	bhi.n	f50a <follow_path+0x4a>
		res = dir_sdi(dj, 0);
    f4ee:	230f      	movs	r3, #15
    f4f0:	18fc      	adds	r4, r7, r3
    f4f2:	687b      	ldr	r3, [r7, #4]
    f4f4:	2100      	movs	r1, #0
    f4f6:	0018      	movs	r0, r3
    f4f8:	4b3e      	ldr	r3, [pc, #248]	; (f5f4 <follow_path+0x134>)
    f4fa:	447b      	add	r3, pc
    f4fc:	4798      	blx	r3
    f4fe:	0003      	movs	r3, r0
    f500:	7023      	strb	r3, [r4, #0]
		dj->dir = 0;
    f502:	687b      	ldr	r3, [r7, #4]
    f504:	2200      	movs	r2, #0
    f506:	615a      	str	r2, [r3, #20]
    f508:	e06c      	b.n	f5e4 <follow_path+0x124>

	} else {							/* Follow path */
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
    f50a:	230f      	movs	r3, #15
    f50c:	18fc      	adds	r4, r7, r3
    f50e:	003a      	movs	r2, r7
    f510:	687b      	ldr	r3, [r7, #4]
    f512:	0011      	movs	r1, r2
    f514:	0018      	movs	r0, r3
    f516:	4b38      	ldr	r3, [pc, #224]	; (f5f8 <follow_path+0x138>)
    f518:	447b      	add	r3, pc
    f51a:	4798      	blx	r3
    f51c:	0003      	movs	r3, r0
    f51e:	7023      	strb	r3, [r4, #0]
			if (res != FR_OK) break;
    f520:	230f      	movs	r3, #15
    f522:	18fb      	adds	r3, r7, r3
    f524:	781b      	ldrb	r3, [r3, #0]
    f526:	2b00      	cmp	r3, #0
    f528:	d155      	bne.n	f5d6 <follow_path+0x116>
			res = dir_find(dj);				/* Find it */
    f52a:	230f      	movs	r3, #15
    f52c:	18fc      	adds	r4, r7, r3
    f52e:	687b      	ldr	r3, [r7, #4]
    f530:	0018      	movs	r0, r3
    f532:	4b32      	ldr	r3, [pc, #200]	; (f5fc <follow_path+0x13c>)
    f534:	447b      	add	r3, pc
    f536:	4798      	blx	r3
    f538:	0003      	movs	r3, r0
    f53a:	7023      	strb	r3, [r4, #0]
			ns = *(dj->fn+NS);
    f53c:	687b      	ldr	r3, [r7, #4]
    f53e:	699a      	ldr	r2, [r3, #24]
    f540:	230e      	movs	r3, #14
    f542:	18fb      	adds	r3, r7, r3
    f544:	7ad2      	ldrb	r2, [r2, #11]
    f546:	701a      	strb	r2, [r3, #0]
			if (res != FR_OK) {				/* Failed to find the object */
    f548:	230f      	movs	r3, #15
    f54a:	18fb      	adds	r3, r7, r3
    f54c:	781b      	ldrb	r3, [r3, #0]
    f54e:	2b00      	cmp	r3, #0
    f550:	d00f      	beq.n	f572 <follow_path+0xb2>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    f552:	230f      	movs	r3, #15
    f554:	18fb      	adds	r3, r7, r3
    f556:	781b      	ldrb	r3, [r3, #0]
    f558:	2b04      	cmp	r3, #4
    f55a:	d13e      	bne.n	f5da <follow_path+0x11a>
				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
					res = FR_OK;
					if (!(ns & NS_LAST)) continue;
				} else {							/* Could not find the object */
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    f55c:	230e      	movs	r3, #14
    f55e:	18fb      	adds	r3, r7, r3
    f560:	781b      	ldrb	r3, [r3, #0]
    f562:	2204      	movs	r2, #4
    f564:	4013      	ands	r3, r2
    f566:	d13a      	bne.n	f5de <follow_path+0x11e>
    f568:	230f      	movs	r3, #15
    f56a:	18fb      	adds	r3, r7, r3
    f56c:	2205      	movs	r2, #5
    f56e:	701a      	strb	r2, [r3, #0]
				}
				break;
    f570:	e035      	b.n	f5de <follow_path+0x11e>
			}
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    f572:	230e      	movs	r3, #14
    f574:	18fb      	adds	r3, r7, r3
    f576:	781b      	ldrb	r3, [r3, #0]
    f578:	2204      	movs	r2, #4
    f57a:	4013      	ands	r3, r2
    f57c:	d131      	bne.n	f5e2 <follow_path+0x122>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    f57e:	687b      	ldr	r3, [r7, #4]
    f580:	695b      	ldr	r3, [r3, #20]
    f582:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    f584:	68bb      	ldr	r3, [r7, #8]
    f586:	330b      	adds	r3, #11
    f588:	781b      	ldrb	r3, [r3, #0]
    f58a:	001a      	movs	r2, r3
    f58c:	2310      	movs	r3, #16
    f58e:	4013      	ands	r3, r2
    f590:	d104      	bne.n	f59c <follow_path+0xdc>
				res = FR_NO_PATH; break;
    f592:	230f      	movs	r3, #15
    f594:	18fb      	adds	r3, r7, r3
    f596:	2205      	movs	r2, #5
    f598:	701a      	strb	r2, [r3, #0]
    f59a:	e023      	b.n	f5e4 <follow_path+0x124>
			}
			dj->sclust = LD_CLUST(dir);
    f59c:	68bb      	ldr	r3, [r7, #8]
    f59e:	3315      	adds	r3, #21
    f5a0:	781b      	ldrb	r3, [r3, #0]
    f5a2:	021b      	lsls	r3, r3, #8
    f5a4:	b21a      	sxth	r2, r3
    f5a6:	68bb      	ldr	r3, [r7, #8]
    f5a8:	3314      	adds	r3, #20
    f5aa:	781b      	ldrb	r3, [r3, #0]
    f5ac:	b21b      	sxth	r3, r3
    f5ae:	4313      	orrs	r3, r2
    f5b0:	b21b      	sxth	r3, r3
    f5b2:	b29b      	uxth	r3, r3
    f5b4:	041b      	lsls	r3, r3, #16
    f5b6:	68ba      	ldr	r2, [r7, #8]
    f5b8:	321b      	adds	r2, #27
    f5ba:	7812      	ldrb	r2, [r2, #0]
    f5bc:	0212      	lsls	r2, r2, #8
    f5be:	b211      	sxth	r1, r2
    f5c0:	68ba      	ldr	r2, [r7, #8]
    f5c2:	321a      	adds	r2, #26
    f5c4:	7812      	ldrb	r2, [r2, #0]
    f5c6:	b212      	sxth	r2, r2
    f5c8:	430a      	orrs	r2, r1
    f5ca:	b212      	sxth	r2, r2
    f5cc:	b292      	uxth	r2, r2
    f5ce:	431a      	orrs	r2, r3
    f5d0:	687b      	ldr	r3, [r7, #4]
    f5d2:	609a      	str	r2, [r3, #8]
			res = create_name(dj, &path);	/* Get a segment */
    f5d4:	e799      	b.n	f50a <follow_path+0x4a>
			if (res != FR_OK) break;
    f5d6:	46c0      	nop			; (mov r8, r8)
    f5d8:	e004      	b.n	f5e4 <follow_path+0x124>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    f5da:	46c0      	nop			; (mov r8, r8)
    f5dc:	e002      	b.n	f5e4 <follow_path+0x124>
				break;
    f5de:	46c0      	nop			; (mov r8, r8)
    f5e0:	e000      	b.n	f5e4 <follow_path+0x124>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    f5e2:	46c0      	nop			; (mov r8, r8)
		}
	}

	return res;
    f5e4:	230f      	movs	r3, #15
    f5e6:	18fb      	adds	r3, r7, r3
    f5e8:	781b      	ldrb	r3, [r3, #0]
}
    f5ea:	0018      	movs	r0, r3
    f5ec:	46bd      	mov	sp, r7
    f5ee:	b005      	add	sp, #20
    f5f0:	bd90      	pop	{r4, r7, pc}
    f5f2:	46c0      	nop			; (mov r8, r8)
    f5f4:	fffff603 	.word	0xfffff603
    f5f8:	fffffc4d 	.word	0xfffffc4d
    f5fc:	fffff901 	.word	0xfffff901

0000f600 <check_fs>:
static
BYTE check_fs (	/* 0:FAT-VBR, 1:Valid BR but not FAT, 2:Not a BR, 3:Disk error */
	FATFS *fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    f600:	b5b0      	push	{r4, r5, r7, lr}
    f602:	b082      	sub	sp, #8
    f604:	af00      	add	r7, sp, #0
    f606:	6078      	str	r0, [r7, #4]
    f608:	6039      	str	r1, [r7, #0]
    f60a:	4d30      	ldr	r5, [pc, #192]	; (f6cc <check_fs+0xcc>)
    f60c:	447d      	add	r5, pc
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    f60e:	687b      	ldr	r3, [r7, #4]
    f610:	7858      	ldrb	r0, [r3, #1]
    f612:	687b      	ldr	r3, [r7, #4]
    f614:	3330      	adds	r3, #48	; 0x30
    f616:	0019      	movs	r1, r3
    f618:	683a      	ldr	r2, [r7, #0]
    f61a:	2301      	movs	r3, #1
    f61c:	4c2c      	ldr	r4, [pc, #176]	; (f6d0 <check_fs+0xd0>)
    f61e:	592c      	ldr	r4, [r5, r4]
    f620:	47a0      	blx	r4
    f622:	1e03      	subs	r3, r0, #0
    f624:	d001      	beq.n	f62a <check_fs+0x2a>
		return 3;
    f626:	2303      	movs	r3, #3
    f628:	e04b      	b.n	f6c2 <check_fs+0xc2>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    f62a:	687b      	ldr	r3, [r7, #4]
    f62c:	4a29      	ldr	r2, [pc, #164]	; (f6d4 <check_fs+0xd4>)
    f62e:	4694      	mov	ip, r2
    f630:	4463      	add	r3, ip
    f632:	3301      	adds	r3, #1
    f634:	781b      	ldrb	r3, [r3, #0]
    f636:	021b      	lsls	r3, r3, #8
    f638:	b21a      	sxth	r2, r3
    f63a:	687b      	ldr	r3, [r7, #4]
    f63c:	4925      	ldr	r1, [pc, #148]	; (f6d4 <check_fs+0xd4>)
    f63e:	5c5b      	ldrb	r3, [r3, r1]
    f640:	b21b      	sxth	r3, r3
    f642:	4313      	orrs	r3, r2
    f644:	b21b      	sxth	r3, r3
    f646:	4a24      	ldr	r2, [pc, #144]	; (f6d8 <check_fs+0xd8>)
    f648:	4293      	cmp	r3, r2
    f64a:	d001      	beq.n	f650 <check_fs+0x50>
		return 2;
    f64c:	2302      	movs	r3, #2
    f64e:	e038      	b.n	f6c2 <check_fs+0xc2>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    f650:	687b      	ldr	r3, [r7, #4]
    f652:	3366      	adds	r3, #102	; 0x66
    f654:	3303      	adds	r3, #3
    f656:	781b      	ldrb	r3, [r3, #0]
    f658:	061a      	lsls	r2, r3, #24
    f65a:	687b      	ldr	r3, [r7, #4]
    f65c:	3366      	adds	r3, #102	; 0x66
    f65e:	3302      	adds	r3, #2
    f660:	781b      	ldrb	r3, [r3, #0]
    f662:	041b      	lsls	r3, r3, #16
    f664:	4313      	orrs	r3, r2
    f666:	687a      	ldr	r2, [r7, #4]
    f668:	3266      	adds	r2, #102	; 0x66
    f66a:	3201      	adds	r2, #1
    f66c:	7812      	ldrb	r2, [r2, #0]
    f66e:	0212      	lsls	r2, r2, #8
    f670:	4313      	orrs	r3, r2
    f672:	687a      	ldr	r2, [r7, #4]
    f674:	2166      	movs	r1, #102	; 0x66
    f676:	5c52      	ldrb	r2, [r2, r1]
    f678:	4313      	orrs	r3, r2
    f67a:	021b      	lsls	r3, r3, #8
    f67c:	0a1b      	lsrs	r3, r3, #8
    f67e:	4a17      	ldr	r2, [pc, #92]	; (f6dc <check_fs+0xdc>)
    f680:	4293      	cmp	r3, r2
    f682:	d101      	bne.n	f688 <check_fs+0x88>
		return 0;
    f684:	2300      	movs	r3, #0
    f686:	e01c      	b.n	f6c2 <check_fs+0xc2>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    f688:	687b      	ldr	r3, [r7, #4]
    f68a:	3382      	adds	r3, #130	; 0x82
    f68c:	3303      	adds	r3, #3
    f68e:	781b      	ldrb	r3, [r3, #0]
    f690:	061a      	lsls	r2, r3, #24
    f692:	687b      	ldr	r3, [r7, #4]
    f694:	3382      	adds	r3, #130	; 0x82
    f696:	3302      	adds	r3, #2
    f698:	781b      	ldrb	r3, [r3, #0]
    f69a:	041b      	lsls	r3, r3, #16
    f69c:	4313      	orrs	r3, r2
    f69e:	687a      	ldr	r2, [r7, #4]
    f6a0:	3282      	adds	r2, #130	; 0x82
    f6a2:	3201      	adds	r2, #1
    f6a4:	7812      	ldrb	r2, [r2, #0]
    f6a6:	0212      	lsls	r2, r2, #8
    f6a8:	4313      	orrs	r3, r2
    f6aa:	687a      	ldr	r2, [r7, #4]
    f6ac:	2182      	movs	r1, #130	; 0x82
    f6ae:	5c52      	ldrb	r2, [r2, r1]
    f6b0:	4313      	orrs	r3, r2
    f6b2:	021b      	lsls	r3, r3, #8
    f6b4:	0a1b      	lsrs	r3, r3, #8
    f6b6:	4a09      	ldr	r2, [pc, #36]	; (f6dc <check_fs+0xdc>)
    f6b8:	4293      	cmp	r3, r2
    f6ba:	d101      	bne.n	f6c0 <check_fs+0xc0>
		return 0;
    f6bc:	2300      	movs	r3, #0
    f6be:	e000      	b.n	f6c2 <check_fs+0xc2>

	return 1;
    f6c0:	2301      	movs	r3, #1
}
    f6c2:	0018      	movs	r0, r3
    f6c4:	46bd      	mov	sp, r7
    f6c6:	b002      	add	sp, #8
    f6c8:	bdb0      	pop	{r4, r5, r7, pc}
    f6ca:	46c0      	nop			; (mov r8, r8)
    f6cc:	000027c4 	.word	0x000027c4
    f6d0:	000002b8 	.word	0x000002b8
    f6d4:	0000022e 	.word	0x0000022e
    f6d8:	ffffaa55 	.word	0xffffaa55
    f6dc:	00544146 	.word	0x00544146

0000f6e0 <chk_mounted>:
FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
	FATFS **rfs,		/* Pointer to pointer to the found file system object */
	BYTE chk_wp			/* !=0: Check media write protection for write access */
)
{
    f6e0:	b5b0      	push	{r4, r5, r7, lr}
    f6e2:	b092      	sub	sp, #72	; 0x48
    f6e4:	af00      	add	r7, sp, #0
    f6e6:	60f8      	str	r0, [r7, #12]
    f6e8:	60b9      	str	r1, [r7, #8]
    f6ea:	1dfb      	adds	r3, r7, #7
    f6ec:	701a      	strb	r2, [r3, #0]
    f6ee:	4cd0      	ldr	r4, [pc, #832]	; (fa30 <chk_mounted+0x350>)
    f6f0:	447c      	add	r4, pc
	BYTE fmt, b, pi, *tbl;
	UINT vol;
	DSTATUS stat;
	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
	WORD nrsv;
	const TCHAR *p = *path;
    f6f2:	68fb      	ldr	r3, [r7, #12]
    f6f4:	681b      	ldr	r3, [r3, #0]
    f6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	FATFS *fs;

	/* Get logical drive number from the path name */
	vol = p[0] - '0';					/* Is there a drive number? */
    f6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f6fa:	781b      	ldrb	r3, [r3, #0]
    f6fc:	3b30      	subs	r3, #48	; 0x30
    f6fe:	643b      	str	r3, [r7, #64]	; 0x40
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    f700:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f702:	2b09      	cmp	r3, #9
    f704:	d80b      	bhi.n	f71e <chk_mounted+0x3e>
    f706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f708:	3301      	adds	r3, #1
    f70a:	781b      	ldrb	r3, [r3, #0]
    f70c:	2b3a      	cmp	r3, #58	; 0x3a
    f70e:	d106      	bne.n	f71e <chk_mounted+0x3e>
		p += 2; *path = p;				/* Return pointer to the path name */
    f710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    f712:	3302      	adds	r3, #2
    f714:	62fb      	str	r3, [r7, #44]	; 0x2c
    f716:	68fb      	ldr	r3, [r7, #12]
    f718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    f71a:	601a      	str	r2, [r3, #0]
    f71c:	e001      	b.n	f722 <chk_mounted+0x42>
	} else {							/* No drive number is given */
#if _FS_RPATH
		vol = CurrVol;					/* Use current drive */
#else
		vol = 0;						/* Use drive 0 */
    f71e:	2300      	movs	r3, #0
    f720:	643b      	str	r3, [r7, #64]	; 0x40
#endif
	}

	/* Check if the file system object is valid or not */
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    f722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f724:	2b00      	cmp	r3, #0
    f726:	d001      	beq.n	f72c <chk_mounted+0x4c>
		return FR_INVALID_DRIVE;
    f728:	230b      	movs	r3, #11
    f72a:	e2bc      	b.n	fca6 <chk_mounted+0x5c6>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    f72c:	4bc1      	ldr	r3, [pc, #772]	; (fa34 <chk_mounted+0x354>)
    f72e:	447b      	add	r3, pc
    f730:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    f732:	0092      	lsls	r2, r2, #2
    f734:	58d3      	ldr	r3, [r2, r3]
    f736:	62bb      	str	r3, [r7, #40]	; 0x28
    f738:	68bb      	ldr	r3, [r7, #8]
    f73a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f73c:	601a      	str	r2, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    f73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f740:	2b00      	cmp	r3, #0
    f742:	d101      	bne.n	f748 <chk_mounted+0x68>
    f744:	230c      	movs	r3, #12
    f746:	e2ae      	b.n	fca6 <chk_mounted+0x5c6>

	ENTER_FF(fs);						/* Lock file system */

	if (fs->fs_type) {					/* If the logical drive has been mounted */
    f748:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f74a:	781b      	ldrb	r3, [r3, #0]
    f74c:	2b00      	cmp	r3, #0
    f74e:	d01d      	beq.n	f78c <chk_mounted+0xac>
		stat = disk_status(fs->drv);
    f750:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f752:	785b      	ldrb	r3, [r3, #1]
    f754:	2227      	movs	r2, #39	; 0x27
    f756:	18bd      	adds	r5, r7, r2
    f758:	0018      	movs	r0, r3
    f75a:	4bb7      	ldr	r3, [pc, #732]	; (fa38 <chk_mounted+0x358>)
    f75c:	58e3      	ldr	r3, [r4, r3]
    f75e:	4798      	blx	r3
    f760:	0003      	movs	r3, r0
    f762:	702b      	strb	r3, [r5, #0]
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    f764:	2327      	movs	r3, #39	; 0x27
    f766:	18fb      	adds	r3, r7, r3
    f768:	781b      	ldrb	r3, [r3, #0]
    f76a:	2201      	movs	r2, #1
    f76c:	4013      	ands	r3, r2
    f76e:	d10d      	bne.n	f78c <chk_mounted+0xac>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    f770:	1dfb      	adds	r3, r7, #7
    f772:	781b      	ldrb	r3, [r3, #0]
    f774:	2b00      	cmp	r3, #0
    f776:	d007      	beq.n	f788 <chk_mounted+0xa8>
    f778:	2327      	movs	r3, #39	; 0x27
    f77a:	18fb      	adds	r3, r7, r3
    f77c:	781b      	ldrb	r3, [r3, #0]
    f77e:	2204      	movs	r2, #4
    f780:	4013      	ands	r3, r2
    f782:	d001      	beq.n	f788 <chk_mounted+0xa8>
				return FR_WRITE_PROTECTED;
    f784:	230a      	movs	r3, #10
    f786:	e28e      	b.n	fca6 <chk_mounted+0x5c6>
			return FR_OK;				/* The file system object is valid */
    f788:	2300      	movs	r3, #0
    f78a:	e28c      	b.n	fca6 <chk_mounted+0x5c6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
    f78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f78e:	2200      	movs	r2, #0
    f790:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    f792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    f794:	b2da      	uxtb	r2, r3
    f796:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f798:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    f79a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f79c:	785b      	ldrb	r3, [r3, #1]
    f79e:	2227      	movs	r2, #39	; 0x27
    f7a0:	18bd      	adds	r5, r7, r2
    f7a2:	0018      	movs	r0, r3
    f7a4:	4ba5      	ldr	r3, [pc, #660]	; (fa3c <chk_mounted+0x35c>)
    f7a6:	58e3      	ldr	r3, [r4, r3]
    f7a8:	4798      	blx	r3
    f7aa:	0003      	movs	r3, r0
    f7ac:	702b      	strb	r3, [r5, #0]
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    f7ae:	2327      	movs	r3, #39	; 0x27
    f7b0:	18fb      	adds	r3, r7, r3
    f7b2:	781b      	ldrb	r3, [r3, #0]
    f7b4:	2201      	movs	r2, #1
    f7b6:	4013      	ands	r3, r2
    f7b8:	d001      	beq.n	f7be <chk_mounted+0xde>
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    f7ba:	2303      	movs	r3, #3
    f7bc:	e273      	b.n	fca6 <chk_mounted+0x5c6>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    f7be:	1dfb      	adds	r3, r7, #7
    f7c0:	781b      	ldrb	r3, [r3, #0]
    f7c2:	2b00      	cmp	r3, #0
    f7c4:	d007      	beq.n	f7d6 <chk_mounted+0xf6>
    f7c6:	2327      	movs	r3, #39	; 0x27
    f7c8:	18fb      	adds	r3, r7, r3
    f7ca:	781b      	ldrb	r3, [r3, #0]
    f7cc:	2204      	movs	r2, #4
    f7ce:	4013      	ands	r3, r2
    f7d0:	d001      	beq.n	f7d6 <chk_mounted+0xf6>
		return FR_WRITE_PROTECTED;
    f7d2:	230a      	movs	r3, #10
    f7d4:	e267      	b.n	fca6 <chk_mounted+0x5c6>
#if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
		return FR_DISK_ERR;
#endif
	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    f7d6:	2300      	movs	r3, #0
    f7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    f7da:	2347      	movs	r3, #71	; 0x47
    f7dc:	18fd      	adds	r5, r7, r3
    f7de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f7e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f7e2:	0011      	movs	r1, r2
    f7e4:	0018      	movs	r0, r3
    f7e6:	4b96      	ldr	r3, [pc, #600]	; (fa40 <chk_mounted+0x360>)
    f7e8:	447b      	add	r3, pc
    f7ea:	4798      	blx	r3
    f7ec:	0003      	movs	r3, r0
    f7ee:	702b      	strb	r3, [r5, #0]
	if (LD2PT(vol) && !fmt) fmt = 1;	/* Force non-SFD if the volume is forced partition */
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    f7f0:	2347      	movs	r3, #71	; 0x47
    f7f2:	18fb      	adds	r3, r7, r3
    f7f4:	781b      	ldrb	r3, [r3, #0]
    f7f6:	2b01      	cmp	r3, #1
    f7f8:	d13c      	bne.n	f874 <chk_mounted+0x194>
		/* Check the partition listed in the partition table */
		pi = LD2PT(vol);
    f7fa:	2346      	movs	r3, #70	; 0x46
    f7fc:	18fb      	adds	r3, r7, r3
    f7fe:	2200      	movs	r2, #0
    f800:	701a      	strb	r2, [r3, #0]
		if (pi) pi--;
    f802:	2346      	movs	r3, #70	; 0x46
    f804:	18fb      	adds	r3, r7, r3
    f806:	781b      	ldrb	r3, [r3, #0]
    f808:	2b00      	cmp	r3, #0
    f80a:	d006      	beq.n	f81a <chk_mounted+0x13a>
    f80c:	2346      	movs	r3, #70	; 0x46
    f80e:	18fb      	adds	r3, r7, r3
    f810:	781a      	ldrb	r2, [r3, #0]
    f812:	2346      	movs	r3, #70	; 0x46
    f814:	18fb      	adds	r3, r7, r3
    f816:	3a01      	subs	r2, #1
    f818:	701a      	strb	r2, [r3, #0]
		tbl = &fs->win[MBR_Table + pi * SZ_PTE];/* Partition table */
    f81a:	2346      	movs	r3, #70	; 0x46
    f81c:	18fb      	adds	r3, r7, r3
    f81e:	781b      	ldrb	r3, [r3, #0]
    f820:	011b      	lsls	r3, r3, #4
    f822:	33bf      	adds	r3, #191	; 0xbf
    f824:	33ff      	adds	r3, #255	; 0xff
    f826:	3330      	adds	r3, #48	; 0x30
    f828:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f82a:	18d3      	adds	r3, r2, r3
    f82c:	623b      	str	r3, [r7, #32]
		if (tbl[4]) {						/* Is the partition existing? */
    f82e:	6a3b      	ldr	r3, [r7, #32]
    f830:	3304      	adds	r3, #4
    f832:	781b      	ldrb	r3, [r3, #0]
    f834:	2b00      	cmp	r3, #0
    f836:	d01d      	beq.n	f874 <chk_mounted+0x194>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    f838:	6a3b      	ldr	r3, [r7, #32]
    f83a:	330b      	adds	r3, #11
    f83c:	781b      	ldrb	r3, [r3, #0]
    f83e:	061a      	lsls	r2, r3, #24
    f840:	6a3b      	ldr	r3, [r7, #32]
    f842:	330a      	adds	r3, #10
    f844:	781b      	ldrb	r3, [r3, #0]
    f846:	041b      	lsls	r3, r3, #16
    f848:	4313      	orrs	r3, r2
    f84a:	6a3a      	ldr	r2, [r7, #32]
    f84c:	3209      	adds	r2, #9
    f84e:	7812      	ldrb	r2, [r2, #0]
    f850:	0212      	lsls	r2, r2, #8
    f852:	4313      	orrs	r3, r2
    f854:	6a3a      	ldr	r2, [r7, #32]
    f856:	3208      	adds	r2, #8
    f858:	7812      	ldrb	r2, [r2, #0]
    f85a:	4313      	orrs	r3, r2
    f85c:	63fb      	str	r3, [r7, #60]	; 0x3c
			fmt = check_fs(fs, bsect);		/* Check the partition */
    f85e:	2347      	movs	r3, #71	; 0x47
    f860:	18fd      	adds	r5, r7, r3
    f862:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    f864:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f866:	0011      	movs	r1, r2
    f868:	0018      	movs	r0, r3
    f86a:	4b76      	ldr	r3, [pc, #472]	; (fa44 <chk_mounted+0x364>)
    f86c:	447b      	add	r3, pc
    f86e:	4798      	blx	r3
    f870:	0003      	movs	r3, r0
    f872:	702b      	strb	r3, [r5, #0]
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    f874:	2347      	movs	r3, #71	; 0x47
    f876:	18fb      	adds	r3, r7, r3
    f878:	781b      	ldrb	r3, [r3, #0]
    f87a:	2b03      	cmp	r3, #3
    f87c:	d101      	bne.n	f882 <chk_mounted+0x1a2>
    f87e:	2301      	movs	r3, #1
    f880:	e211      	b.n	fca6 <chk_mounted+0x5c6>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    f882:	2347      	movs	r3, #71	; 0x47
    f884:	18fb      	adds	r3, r7, r3
    f886:	781b      	ldrb	r3, [r3, #0]
    f888:	2b00      	cmp	r3, #0
    f88a:	d001      	beq.n	f890 <chk_mounted+0x1b0>
    f88c:	230d      	movs	r3, #13
    f88e:	e20a      	b.n	fca6 <chk_mounted+0x5c6>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    f890:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f892:	223c      	movs	r2, #60	; 0x3c
    f894:	5c9b      	ldrb	r3, [r3, r2]
    f896:	021b      	lsls	r3, r3, #8
    f898:	b21a      	sxth	r2, r3
    f89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f89c:	213b      	movs	r1, #59	; 0x3b
    f89e:	5c5b      	ldrb	r3, [r3, r1]
    f8a0:	b21b      	sxth	r3, r3
    f8a2:	4313      	orrs	r3, r2
    f8a4:	b21a      	sxth	r2, r3
    f8a6:	2380      	movs	r3, #128	; 0x80
    f8a8:	009b      	lsls	r3, r3, #2
    f8aa:	429a      	cmp	r2, r3
    f8ac:	d001      	beq.n	f8b2 <chk_mounted+0x1d2>
		return FR_NO_FILESYSTEM;
    f8ae:	230d      	movs	r3, #13
    f8b0:	e1f9      	b.n	fca6 <chk_mounted+0x5c6>

	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    f8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f8b4:	2247      	movs	r2, #71	; 0x47
    f8b6:	5c9b      	ldrb	r3, [r3, r2]
    f8b8:	021b      	lsls	r3, r3, #8
    f8ba:	b21a      	sxth	r2, r3
    f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f8be:	2146      	movs	r1, #70	; 0x46
    f8c0:	5c5b      	ldrb	r3, [r3, r1]
    f8c2:	b21b      	sxth	r3, r3
    f8c4:	4313      	orrs	r3, r2
    f8c6:	b21b      	sxth	r3, r3
    f8c8:	b29b      	uxth	r3, r3
    f8ca:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    f8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f8ce:	2b00      	cmp	r3, #0
    f8d0:	d112      	bne.n	f8f8 <chk_mounted+0x218>
    f8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f8d4:	2257      	movs	r2, #87	; 0x57
    f8d6:	5c9b      	ldrb	r3, [r3, r2]
    f8d8:	061a      	lsls	r2, r3, #24
    f8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f8dc:	2156      	movs	r1, #86	; 0x56
    f8de:	5c5b      	ldrb	r3, [r3, r1]
    f8e0:	041b      	lsls	r3, r3, #16
    f8e2:	4313      	orrs	r3, r2
    f8e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f8e6:	2155      	movs	r1, #85	; 0x55
    f8e8:	5c52      	ldrb	r2, [r2, r1]
    f8ea:	0212      	lsls	r2, r2, #8
    f8ec:	4313      	orrs	r3, r2
    f8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f8f0:	2154      	movs	r1, #84	; 0x54
    f8f2:	5c52      	ldrb	r2, [r2, r1]
    f8f4:	4313      	orrs	r3, r2
    f8f6:	63bb      	str	r3, [r7, #56]	; 0x38
	fs->fsize = fasize;
    f8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f8fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
    f8fc:	61da      	str	r2, [r3, #28]

	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    f8fe:	231f      	movs	r3, #31
    f900:	18fb      	adds	r3, r7, r3
    f902:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f904:	2140      	movs	r1, #64	; 0x40
    f906:	5c52      	ldrb	r2, [r2, r1]
    f908:	701a      	strb	r2, [r3, #0]
    f90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f90c:	221f      	movs	r2, #31
    f90e:	18ba      	adds	r2, r7, r2
    f910:	7812      	ldrb	r2, [r2, #0]
    f912:	70da      	strb	r2, [r3, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    f914:	231f      	movs	r3, #31
    f916:	18fb      	adds	r3, r7, r3
    f918:	781b      	ldrb	r3, [r3, #0]
    f91a:	2b01      	cmp	r3, #1
    f91c:	d006      	beq.n	f92c <chk_mounted+0x24c>
    f91e:	231f      	movs	r3, #31
    f920:	18fb      	adds	r3, r7, r3
    f922:	781b      	ldrb	r3, [r3, #0]
    f924:	2b02      	cmp	r3, #2
    f926:	d001      	beq.n	f92c <chk_mounted+0x24c>
    f928:	230d      	movs	r3, #13
    f92a:	e1bc      	b.n	fca6 <chk_mounted+0x5c6>
	fasize *= b;										/* Number of sectors for FAT area */
    f92c:	231f      	movs	r3, #31
    f92e:	18fb      	adds	r3, r7, r3
    f930:	781a      	ldrb	r2, [r3, #0]
    f932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    f934:	4353      	muls	r3, r2
    f936:	63bb      	str	r3, [r7, #56]	; 0x38

	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    f938:	231f      	movs	r3, #31
    f93a:	18fb      	adds	r3, r7, r3
    f93c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f93e:	213d      	movs	r1, #61	; 0x3d
    f940:	5c52      	ldrb	r2, [r2, r1]
    f942:	701a      	strb	r2, [r3, #0]
    f944:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f946:	221f      	movs	r2, #31
    f948:	18ba      	adds	r2, r7, r2
    f94a:	7812      	ldrb	r2, [r2, #0]
    f94c:	709a      	strb	r2, [r3, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    f94e:	231f      	movs	r3, #31
    f950:	18fb      	adds	r3, r7, r3
    f952:	781b      	ldrb	r3, [r3, #0]
    f954:	2b00      	cmp	r3, #0
    f956:	d008      	beq.n	f96a <chk_mounted+0x28a>
    f958:	231f      	movs	r3, #31
    f95a:	18fb      	adds	r3, r7, r3
    f95c:	781b      	ldrb	r3, [r3, #0]
    f95e:	221f      	movs	r2, #31
    f960:	18ba      	adds	r2, r7, r2
    f962:	7812      	ldrb	r2, [r2, #0]
    f964:	3a01      	subs	r2, #1
    f966:	4013      	ands	r3, r2
    f968:	d001      	beq.n	f96e <chk_mounted+0x28e>
    f96a:	230d      	movs	r3, #13
    f96c:	e19b      	b.n	fca6 <chk_mounted+0x5c6>

	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    f96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f970:	2242      	movs	r2, #66	; 0x42
    f972:	5c9b      	ldrb	r3, [r3, r2]
    f974:	021b      	lsls	r3, r3, #8
    f976:	b21a      	sxth	r2, r3
    f978:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f97a:	2141      	movs	r1, #65	; 0x41
    f97c:	5c5b      	ldrb	r3, [r3, r1]
    f97e:	b21b      	sxth	r3, r3
    f980:	4313      	orrs	r3, r2
    f982:	b21b      	sxth	r3, r3
    f984:	b29a      	uxth	r2, r3
    f986:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f988:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    f98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f98c:	891b      	ldrh	r3, [r3, #8]
    f98e:	220f      	movs	r2, #15
    f990:	4013      	ands	r3, r2
    f992:	b29b      	uxth	r3, r3
    f994:	2b00      	cmp	r3, #0
    f996:	d001      	beq.n	f99c <chk_mounted+0x2bc>
    f998:	230d      	movs	r3, #13
    f99a:	e184      	b.n	fca6 <chk_mounted+0x5c6>

	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    f99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f99e:	2244      	movs	r2, #68	; 0x44
    f9a0:	5c9b      	ldrb	r3, [r3, r2]
    f9a2:	021b      	lsls	r3, r3, #8
    f9a4:	b21a      	sxth	r2, r3
    f9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9a8:	2143      	movs	r1, #67	; 0x43
    f9aa:	5c5b      	ldrb	r3, [r3, r1]
    f9ac:	b21b      	sxth	r3, r3
    f9ae:	4313      	orrs	r3, r2
    f9b0:	b21b      	sxth	r3, r3
    f9b2:	b29b      	uxth	r3, r3
    f9b4:	637b      	str	r3, [r7, #52]	; 0x34
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    f9b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    f9b8:	2b00      	cmp	r3, #0
    f9ba:	d112      	bne.n	f9e2 <chk_mounted+0x302>
    f9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9be:	2253      	movs	r2, #83	; 0x53
    f9c0:	5c9b      	ldrb	r3, [r3, r2]
    f9c2:	061a      	lsls	r2, r3, #24
    f9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9c6:	2152      	movs	r1, #82	; 0x52
    f9c8:	5c5b      	ldrb	r3, [r3, r1]
    f9ca:	041b      	lsls	r3, r3, #16
    f9cc:	4313      	orrs	r3, r2
    f9ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f9d0:	2151      	movs	r1, #81	; 0x51
    f9d2:	5c52      	ldrb	r2, [r2, r1]
    f9d4:	0212      	lsls	r2, r2, #8
    f9d6:	4313      	orrs	r3, r2
    f9d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
    f9da:	2150      	movs	r1, #80	; 0x50
    f9dc:	5c52      	ldrb	r2, [r2, r1]
    f9de:	4313      	orrs	r3, r2
    f9e0:	637b      	str	r3, [r7, #52]	; 0x34

	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    f9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9e4:	223f      	movs	r2, #63	; 0x3f
    f9e6:	5c9b      	ldrb	r3, [r3, r2]
    f9e8:	021b      	lsls	r3, r3, #8
    f9ea:	b21a      	sxth	r2, r3
    f9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    f9ee:	213e      	movs	r1, #62	; 0x3e
    f9f0:	5c5b      	ldrb	r3, [r3, r1]
    f9f2:	b21b      	sxth	r3, r3
    f9f4:	4313      	orrs	r3, r2
    f9f6:	b21a      	sxth	r2, r3
    f9f8:	231c      	movs	r3, #28
    f9fa:	18fb      	adds	r3, r7, r3
    f9fc:	801a      	strh	r2, [r3, #0]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    f9fe:	231c      	movs	r3, #28
    fa00:	18fb      	adds	r3, r7, r3
    fa02:	881b      	ldrh	r3, [r3, #0]
    fa04:	2b00      	cmp	r3, #0
    fa06:	d101      	bne.n	fa0c <chk_mounted+0x32c>
    fa08:	230d      	movs	r3, #13
    fa0a:	e14c      	b.n	fca6 <chk_mounted+0x5c6>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    fa0c:	231c      	movs	r3, #28
    fa0e:	18fb      	adds	r3, r7, r3
    fa10:	881a      	ldrh	r2, [r3, #0]
    fa12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fa14:	18d3      	adds	r3, r2, r3
    fa16:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fa18:	8912      	ldrh	r2, [r2, #8]
    fa1a:	0912      	lsrs	r2, r2, #4
    fa1c:	b292      	uxth	r2, r2
    fa1e:	189b      	adds	r3, r3, r2
    fa20:	61bb      	str	r3, [r7, #24]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    fa22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fa24:	69bb      	ldr	r3, [r7, #24]
    fa26:	429a      	cmp	r2, r3
    fa28:	d20e      	bcs.n	fa48 <chk_mounted+0x368>
    fa2a:	230d      	movs	r3, #13
    fa2c:	e13b      	b.n	fca6 <chk_mounted+0x5c6>
    fa2e:	46c0      	nop			; (mov r8, r8)
    fa30:	000026e0 	.word	0x000026e0
    fa34:	1fff0f2a 	.word	0x1fff0f2a
    fa38:	000000c8 	.word	0x000000c8
    fa3c:	000000a4 	.word	0x000000a4
    fa40:	fffffe15 	.word	0xfffffe15
    fa44:	fffffd91 	.word	0xfffffd91
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    fa48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    fa4a:	69bb      	ldr	r3, [r7, #24]
    fa4c:	1ad2      	subs	r2, r2, r3
    fa4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa50:	789b      	ldrb	r3, [r3, #2]
    fa52:	0019      	movs	r1, r3
    fa54:	4b96      	ldr	r3, [pc, #600]	; (fcb0 <chk_mounted+0x5d0>)
    fa56:	58e3      	ldr	r3, [r4, r3]
    fa58:	0010      	movs	r0, r2
    fa5a:	4798      	blx	r3
    fa5c:	0003      	movs	r3, r0
    fa5e:	617b      	str	r3, [r7, #20]
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    fa60:	697b      	ldr	r3, [r7, #20]
    fa62:	2b00      	cmp	r3, #0
    fa64:	d101      	bne.n	fa6a <chk_mounted+0x38a>
    fa66:	230d      	movs	r3, #13
    fa68:	e11d      	b.n	fca6 <chk_mounted+0x5c6>
	fmt = FS_FAT12;
    fa6a:	2347      	movs	r3, #71	; 0x47
    fa6c:	18fb      	adds	r3, r7, r3
    fa6e:	2201      	movs	r2, #1
    fa70:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    fa72:	697b      	ldr	r3, [r7, #20]
    fa74:	4a8f      	ldr	r2, [pc, #572]	; (fcb4 <chk_mounted+0x5d4>)
    fa76:	4293      	cmp	r3, r2
    fa78:	d903      	bls.n	fa82 <chk_mounted+0x3a2>
    fa7a:	2347      	movs	r3, #71	; 0x47
    fa7c:	18fb      	adds	r3, r7, r3
    fa7e:	2202      	movs	r2, #2
    fa80:	701a      	strb	r2, [r3, #0]
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    fa82:	697b      	ldr	r3, [r7, #20]
    fa84:	4a8c      	ldr	r2, [pc, #560]	; (fcb8 <chk_mounted+0x5d8>)
    fa86:	4293      	cmp	r3, r2
    fa88:	d903      	bls.n	fa92 <chk_mounted+0x3b2>
    fa8a:	2347      	movs	r3, #71	; 0x47
    fa8c:	18fb      	adds	r3, r7, r3
    fa8e:	2203      	movs	r2, #3
    fa90:	701a      	strb	r2, [r3, #0]

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    fa92:	697b      	ldr	r3, [r7, #20]
    fa94:	1c9a      	adds	r2, r3, #2
    fa96:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fa98:	619a      	str	r2, [r3, #24]
	fs->database = bsect + sysect;						/* Data start sector */
    fa9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fa9c:	69bb      	ldr	r3, [r7, #24]
    fa9e:	18d2      	adds	r2, r2, r3
    faa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    faa2:	629a      	str	r2, [r3, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    faa4:	231c      	movs	r3, #28
    faa6:	18fb      	adds	r3, r7, r3
    faa8:	881a      	ldrh	r2, [r3, #0]
    faaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    faac:	18d2      	adds	r2, r2, r3
    faae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fab0:	621a      	str	r2, [r3, #32]
	if (fmt == FS_FAT32) {
    fab2:	2347      	movs	r3, #71	; 0x47
    fab4:	18fb      	adds	r3, r7, r3
    fab6:	781b      	ldrb	r3, [r3, #0]
    fab8:	2b03      	cmp	r3, #3
    faba:	d11e      	bne.n	fafa <chk_mounted+0x41a>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    fabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fabe:	891b      	ldrh	r3, [r3, #8]
    fac0:	2b00      	cmp	r3, #0
    fac2:	d001      	beq.n	fac8 <chk_mounted+0x3e8>
    fac4:	230d      	movs	r3, #13
    fac6:	e0ee      	b.n	fca6 <chk_mounted+0x5c6>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    fac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    faca:	225f      	movs	r2, #95	; 0x5f
    facc:	5c9b      	ldrb	r3, [r3, r2]
    face:	061a      	lsls	r2, r3, #24
    fad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fad2:	215e      	movs	r1, #94	; 0x5e
    fad4:	5c5b      	ldrb	r3, [r3, r1]
    fad6:	041b      	lsls	r3, r3, #16
    fad8:	4313      	orrs	r3, r2
    fada:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fadc:	215d      	movs	r1, #93	; 0x5d
    fade:	5c52      	ldrb	r2, [r2, r1]
    fae0:	0212      	lsls	r2, r2, #8
    fae2:	4313      	orrs	r3, r2
    fae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fae6:	215c      	movs	r1, #92	; 0x5c
    fae8:	5c52      	ldrb	r2, [r2, r1]
    faea:	431a      	orrs	r2, r3
    faec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    faee:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    faf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    faf2:	699b      	ldr	r3, [r3, #24]
    faf4:	009b      	lsls	r3, r3, #2
    faf6:	633b      	str	r3, [r7, #48]	; 0x30
    faf8:	e020      	b.n	fb3c <chk_mounted+0x45c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    fafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fafc:	891b      	ldrh	r3, [r3, #8]
    fafe:	2b00      	cmp	r3, #0
    fb00:	d101      	bne.n	fb06 <chk_mounted+0x426>
    fb02:	230d      	movs	r3, #13
    fb04:	e0cf      	b.n	fca6 <chk_mounted+0x5c6>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    fb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb08:	6a1a      	ldr	r2, [r3, #32]
    fb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    fb0c:	18d2      	adds	r2, r2, r3
    fb0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb10:	625a      	str	r2, [r3, #36]	; 0x24
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    fb12:	2347      	movs	r3, #71	; 0x47
    fb14:	18fb      	adds	r3, r7, r3
    fb16:	781b      	ldrb	r3, [r3, #0]
    fb18:	2b02      	cmp	r3, #2
    fb1a:	d103      	bne.n	fb24 <chk_mounted+0x444>
    fb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb1e:	699b      	ldr	r3, [r3, #24]
    fb20:	005b      	lsls	r3, r3, #1
    fb22:	e00a      	b.n	fb3a <chk_mounted+0x45a>
    fb24:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb26:	699a      	ldr	r2, [r3, #24]
    fb28:	0013      	movs	r3, r2
    fb2a:	005b      	lsls	r3, r3, #1
    fb2c:	189b      	adds	r3, r3, r2
    fb2e:	085a      	lsrs	r2, r3, #1
    fb30:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb32:	699b      	ldr	r3, [r3, #24]
    fb34:	2101      	movs	r1, #1
    fb36:	400b      	ands	r3, r1
    fb38:	18d3      	adds	r3, r2, r3
		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
    fb3a:	633b      	str	r3, [r7, #48]	; 0x30
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    fb3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb3e:	69da      	ldr	r2, [r3, #28]
    fb40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    fb42:	495e      	ldr	r1, [pc, #376]	; (fcbc <chk_mounted+0x5dc>)
    fb44:	468c      	mov	ip, r1
    fb46:	4463      	add	r3, ip
    fb48:	0a5b      	lsrs	r3, r3, #9
    fb4a:	429a      	cmp	r2, r3
    fb4c:	d201      	bcs.n	fb52 <chk_mounted+0x472>
		return FR_NO_FILESYSTEM;
    fb4e:	230d      	movs	r3, #13
    fb50:	e0a9      	b.n	fca6 <chk_mounted+0x5c6>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->free_clust = 0xFFFFFFFF;
    fb52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb54:	2201      	movs	r2, #1
    fb56:	4252      	negs	r2, r2
    fb58:	611a      	str	r2, [r3, #16]
	fs->last_clust = 0;
    fb5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb5c:	2200      	movs	r2, #0
    fb5e:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	if (fmt == FS_FAT32) {
    fb60:	2347      	movs	r3, #71	; 0x47
    fb62:	18fb      	adds	r3, r7, r3
    fb64:	781b      	ldrb	r3, [r3, #0]
    fb66:	2b03      	cmp	r3, #3
    fb68:	d000      	beq.n	fb6c <chk_mounted+0x48c>
    fb6a:	e083      	b.n	fc74 <chk_mounted+0x594>
	 	fs->fsi_flag = 0;
    fb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb6e:	2200      	movs	r2, #0
    fb70:	715a      	strb	r2, [r3, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    fb72:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb74:	2261      	movs	r2, #97	; 0x61
    fb76:	5c9b      	ldrb	r3, [r3, r2]
    fb78:	021b      	lsls	r3, r3, #8
    fb7a:	b21a      	sxth	r2, r3
    fb7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb7e:	2160      	movs	r1, #96	; 0x60
    fb80:	5c5b      	ldrb	r3, [r3, r1]
    fb82:	b21b      	sxth	r3, r3
    fb84:	4313      	orrs	r3, r2
    fb86:	b21b      	sxth	r3, r3
    fb88:	b29b      	uxth	r3, r3
    fb8a:	001a      	movs	r2, r3
    fb8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    fb8e:	18d2      	adds	r2, r2, r3
    fb90:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb92:	615a      	str	r2, [r3, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    fb94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb96:	7858      	ldrb	r0, [r3, #1]
    fb98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fb9a:	3330      	adds	r3, #48	; 0x30
    fb9c:	0019      	movs	r1, r3
    fb9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fba0:	695a      	ldr	r2, [r3, #20]
    fba2:	2301      	movs	r3, #1
    fba4:	4d46      	ldr	r5, [pc, #280]	; (fcc0 <chk_mounted+0x5e0>)
    fba6:	5964      	ldr	r4, [r4, r5]
    fba8:	47a0      	blx	r4
    fbaa:	1e03      	subs	r3, r0, #0
    fbac:	d162      	bne.n	fc74 <chk_mounted+0x594>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    fbae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbb0:	4a44      	ldr	r2, [pc, #272]	; (fcc4 <chk_mounted+0x5e4>)
    fbb2:	5c9b      	ldrb	r3, [r3, r2]
    fbb4:	021b      	lsls	r3, r3, #8
    fbb6:	b21a      	sxth	r2, r3
    fbb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbba:	4943      	ldr	r1, [pc, #268]	; (fcc8 <chk_mounted+0x5e8>)
    fbbc:	5c5b      	ldrb	r3, [r3, r1]
    fbbe:	b21b      	sxth	r3, r3
    fbc0:	4313      	orrs	r3, r2
    fbc2:	b21b      	sxth	r3, r3
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    fbc4:	4a41      	ldr	r2, [pc, #260]	; (fccc <chk_mounted+0x5ec>)
    fbc6:	4293      	cmp	r3, r2
    fbc8:	d154      	bne.n	fc74 <chk_mounted+0x594>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    fbca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbcc:	2233      	movs	r2, #51	; 0x33
    fbce:	5c9b      	ldrb	r3, [r3, r2]
    fbd0:	061a      	lsls	r2, r3, #24
    fbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbd4:	2132      	movs	r1, #50	; 0x32
    fbd6:	5c5b      	ldrb	r3, [r3, r1]
    fbd8:	041b      	lsls	r3, r3, #16
    fbda:	4313      	orrs	r3, r2
    fbdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fbde:	2131      	movs	r1, #49	; 0x31
    fbe0:	5c52      	ldrb	r2, [r2, r1]
    fbe2:	0212      	lsls	r2, r2, #8
    fbe4:	4313      	orrs	r3, r2
    fbe6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fbe8:	2130      	movs	r1, #48	; 0x30
    fbea:	5c52      	ldrb	r2, [r2, r1]
    fbec:	4313      	orrs	r3, r2
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    fbee:	4a38      	ldr	r2, [pc, #224]	; (fcd0 <chk_mounted+0x5f0>)
    fbf0:	4293      	cmp	r3, r2
    fbf2:	d13f      	bne.n	fc74 <chk_mounted+0x594>
			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
    fbf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbf6:	4a37      	ldr	r2, [pc, #220]	; (fcd4 <chk_mounted+0x5f4>)
    fbf8:	5c9b      	ldrb	r3, [r3, r2]
    fbfa:	061a      	lsls	r2, r3, #24
    fbfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fbfe:	4936      	ldr	r1, [pc, #216]	; (fcd8 <chk_mounted+0x5f8>)
    fc00:	5c5b      	ldrb	r3, [r3, r1]
    fc02:	041b      	lsls	r3, r3, #16
    fc04:	4313      	orrs	r3, r2
    fc06:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fc08:	4934      	ldr	r1, [pc, #208]	; (fcdc <chk_mounted+0x5fc>)
    fc0a:	5c52      	ldrb	r2, [r2, r1]
    fc0c:	0212      	lsls	r2, r2, #8
    fc0e:	4313      	orrs	r3, r2
    fc10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    fc12:	2285      	movs	r2, #133	; 0x85
    fc14:	0092      	lsls	r2, r2, #2
    fc16:	5c8a      	ldrb	r2, [r1, r2]
    fc18:	4313      	orrs	r3, r2
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    fc1a:	4a31      	ldr	r2, [pc, #196]	; (fce0 <chk_mounted+0x600>)
    fc1c:	4293      	cmp	r3, r2
    fc1e:	d129      	bne.n	fc74 <chk_mounted+0x594>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    fc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc22:	4a30      	ldr	r2, [pc, #192]	; (fce4 <chk_mounted+0x604>)
    fc24:	5c9b      	ldrb	r3, [r3, r2]
    fc26:	061a      	lsls	r2, r3, #24
    fc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc2a:	492f      	ldr	r1, [pc, #188]	; (fce8 <chk_mounted+0x608>)
    fc2c:	5c5b      	ldrb	r3, [r3, r1]
    fc2e:	041b      	lsls	r3, r3, #16
    fc30:	4313      	orrs	r3, r2
    fc32:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fc34:	492d      	ldr	r1, [pc, #180]	; (fcec <chk_mounted+0x60c>)
    fc36:	5c52      	ldrb	r2, [r2, r1]
    fc38:	0212      	lsls	r2, r2, #8
    fc3a:	4313      	orrs	r3, r2
    fc3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    fc3e:	2287      	movs	r2, #135	; 0x87
    fc40:	0092      	lsls	r2, r2, #2
    fc42:	5c8a      	ldrb	r2, [r1, r2]
    fc44:	431a      	orrs	r2, r3
    fc46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc48:	60da      	str	r2, [r3, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    fc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc4c:	4a28      	ldr	r2, [pc, #160]	; (fcf0 <chk_mounted+0x610>)
    fc4e:	5c9b      	ldrb	r3, [r3, r2]
    fc50:	061a      	lsls	r2, r3, #24
    fc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc54:	4927      	ldr	r1, [pc, #156]	; (fcf4 <chk_mounted+0x614>)
    fc56:	5c5b      	ldrb	r3, [r3, r1]
    fc58:	041b      	lsls	r3, r3, #16
    fc5a:	4313      	orrs	r3, r2
    fc5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
    fc5e:	4926      	ldr	r1, [pc, #152]	; (fcf8 <chk_mounted+0x618>)
    fc60:	5c52      	ldrb	r2, [r2, r1]
    fc62:	0212      	lsls	r2, r2, #8
    fc64:	4313      	orrs	r3, r2
    fc66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
    fc68:	2286      	movs	r2, #134	; 0x86
    fc6a:	0092      	lsls	r2, r2, #2
    fc6c:	5c8a      	ldrb	r2, [r1, r2]
    fc6e:	431a      	orrs	r2, r3
    fc70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc72:	611a      	str	r2, [r3, #16]
		}
	}
#endif
	fs->fs_type = fmt;		/* FAT sub-type */
    fc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc76:	2247      	movs	r2, #71	; 0x47
    fc78:	18ba      	adds	r2, r7, r2
    fc7a:	7812      	ldrb	r2, [r2, #0]
    fc7c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    fc7e:	4b1f      	ldr	r3, [pc, #124]	; (fcfc <chk_mounted+0x61c>)
    fc80:	447b      	add	r3, pc
    fc82:	881b      	ldrh	r3, [r3, #0]
    fc84:	3301      	adds	r3, #1
    fc86:	b29a      	uxth	r2, r3
    fc88:	4b1d      	ldr	r3, [pc, #116]	; (fd00 <chk_mounted+0x620>)
    fc8a:	447b      	add	r3, pc
    fc8c:	801a      	strh	r2, [r3, #0]
    fc8e:	4b1d      	ldr	r3, [pc, #116]	; (fd04 <chk_mounted+0x624>)
    fc90:	447b      	add	r3, pc
    fc92:	881a      	ldrh	r2, [r3, #0]
    fc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc96:	80da      	strh	r2, [r3, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    fc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fc9a:	2200      	movs	r2, #0
    fc9c:	62da      	str	r2, [r3, #44]	; 0x2c
	fs->wflag = 0;
    fc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    fca0:	2200      	movs	r2, #0
    fca2:	711a      	strb	r2, [r3, #4]
#endif
#if _FS_SHARE				/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
    fca4:	2300      	movs	r3, #0
}
    fca6:	0018      	movs	r0, r3
    fca8:	46bd      	mov	sp, r7
    fcaa:	b012      	add	sp, #72	; 0x48
    fcac:	bdb0      	pop	{r4, r5, r7, pc}
    fcae:	46c0      	nop			; (mov r8, r8)
    fcb0:	00000204 	.word	0x00000204
    fcb4:	00000ff5 	.word	0x00000ff5
    fcb8:	0000fff5 	.word	0x0000fff5
    fcbc:	000001ff 	.word	0x000001ff
    fcc0:	000002b8 	.word	0x000002b8
    fcc4:	0000022f 	.word	0x0000022f
    fcc8:	0000022e 	.word	0x0000022e
    fccc:	ffffaa55 	.word	0xffffaa55
    fcd0:	41615252 	.word	0x41615252
    fcd4:	00000217 	.word	0x00000217
    fcd8:	00000216 	.word	0x00000216
    fcdc:	00000215 	.word	0x00000215
    fce0:	61417272 	.word	0x61417272
    fce4:	0000021f 	.word	0x0000021f
    fce8:	0000021e 	.word	0x0000021e
    fcec:	0000021d 	.word	0x0000021d
    fcf0:	0000021b 	.word	0x0000021b
    fcf4:	0000021a 	.word	0x0000021a
    fcf8:	00000219 	.word	0x00000219
    fcfc:	1fff09dc 	.word	0x1fff09dc
    fd00:	1fff09d2 	.word	0x1fff09d2
    fd04:	1fff09cc 	.word	0x1fff09cc

0000fd08 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
    fd08:	b580      	push	{r7, lr}
    fd0a:	b082      	sub	sp, #8
    fd0c:	af00      	add	r7, sp, #0
    fd0e:	6078      	str	r0, [r7, #4]
    fd10:	000a      	movs	r2, r1
    fd12:	1cbb      	adds	r3, r7, #2
    fd14:	801a      	strh	r2, [r3, #0]
    fd16:	4a11      	ldr	r2, [pc, #68]	; (fd5c <validate+0x54>)
    fd18:	447a      	add	r2, pc
	if (!fs || !fs->fs_type || fs->id != id)
    fd1a:	687b      	ldr	r3, [r7, #4]
    fd1c:	2b00      	cmp	r3, #0
    fd1e:	d009      	beq.n	fd34 <validate+0x2c>
    fd20:	687b      	ldr	r3, [r7, #4]
    fd22:	781b      	ldrb	r3, [r3, #0]
    fd24:	2b00      	cmp	r3, #0
    fd26:	d005      	beq.n	fd34 <validate+0x2c>
    fd28:	687b      	ldr	r3, [r7, #4]
    fd2a:	88db      	ldrh	r3, [r3, #6]
    fd2c:	1cb9      	adds	r1, r7, #2
    fd2e:	8809      	ldrh	r1, [r1, #0]
    fd30:	4299      	cmp	r1, r3
    fd32:	d001      	beq.n	fd38 <validate+0x30>
		return FR_INVALID_OBJECT;
    fd34:	2309      	movs	r3, #9
    fd36:	e00d      	b.n	fd54 <validate+0x4c>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
    fd38:	687b      	ldr	r3, [r7, #4]
    fd3a:	785b      	ldrb	r3, [r3, #1]
    fd3c:	0018      	movs	r0, r3
    fd3e:	4b08      	ldr	r3, [pc, #32]	; (fd60 <validate+0x58>)
    fd40:	58d3      	ldr	r3, [r2, r3]
    fd42:	4798      	blx	r3
    fd44:	0003      	movs	r3, r0
    fd46:	001a      	movs	r2, r3
    fd48:	2301      	movs	r3, #1
    fd4a:	4013      	ands	r3, r2
    fd4c:	d001      	beq.n	fd52 <validate+0x4a>
		return FR_NOT_READY;
    fd4e:	2303      	movs	r3, #3
    fd50:	e000      	b.n	fd54 <validate+0x4c>

	return FR_OK;
    fd52:	2300      	movs	r3, #0
}
    fd54:	0018      	movs	r0, r3
    fd56:	46bd      	mov	sp, r7
    fd58:	b002      	add	sp, #8
    fd5a:	bd80      	pop	{r7, pc}
    fd5c:	000020b8 	.word	0x000020b8
    fd60:	000000c8 	.word	0x000000c8

0000fd64 <f_mount>:

FRESULT f_mount (
	BYTE vol,		/* Logical drive number to be mounted/unmounted */
	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
)
{
    fd64:	b580      	push	{r7, lr}
    fd66:	b084      	sub	sp, #16
    fd68:	af00      	add	r7, sp, #0
    fd6a:	0002      	movs	r2, r0
    fd6c:	6039      	str	r1, [r7, #0]
    fd6e:	1dfb      	adds	r3, r7, #7
    fd70:	701a      	strb	r2, [r3, #0]
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    fd72:	1dfb      	adds	r3, r7, #7
    fd74:	781b      	ldrb	r3, [r3, #0]
    fd76:	2b00      	cmp	r3, #0
    fd78:	d001      	beq.n	fd7e <f_mount+0x1a>
		return FR_INVALID_DRIVE;
    fd7a:	230b      	movs	r3, #11
    fd7c:	e01a      	b.n	fdb4 <f_mount+0x50>
	rfs = FatFs[vol];			/* Get current fs object */
    fd7e:	1dfb      	adds	r3, r7, #7
    fd80:	781a      	ldrb	r2, [r3, #0]
    fd82:	4b0e      	ldr	r3, [pc, #56]	; (fdbc <f_mount+0x58>)
    fd84:	447b      	add	r3, pc
    fd86:	0092      	lsls	r2, r2, #2
    fd88:	58d3      	ldr	r3, [r2, r3]
    fd8a:	60fb      	str	r3, [r7, #12]

	if (rfs) {
    fd8c:	68fb      	ldr	r3, [r7, #12]
    fd8e:	2b00      	cmp	r3, #0
    fd90:	d002      	beq.n	fd98 <f_mount+0x34>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    fd92:	68fb      	ldr	r3, [r7, #12]
    fd94:	2200      	movs	r2, #0
    fd96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
    fd98:	683b      	ldr	r3, [r7, #0]
    fd9a:	2b00      	cmp	r3, #0
    fd9c:	d002      	beq.n	fda4 <f_mount+0x40>
		fs->fs_type = 0;		/* Clear new fs object */
    fd9e:	683b      	ldr	r3, [r7, #0]
    fda0:	2200      	movs	r2, #0
    fda2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    fda4:	1dfb      	adds	r3, r7, #7
    fda6:	781a      	ldrb	r2, [r3, #0]
    fda8:	4b05      	ldr	r3, [pc, #20]	; (fdc0 <f_mount+0x5c>)
    fdaa:	447b      	add	r3, pc
    fdac:	0092      	lsls	r2, r2, #2
    fdae:	6839      	ldr	r1, [r7, #0]
    fdb0:	50d1      	str	r1, [r2, r3]

	return FR_OK;
    fdb2:	2300      	movs	r3, #0
}
    fdb4:	0018      	movs	r0, r3
    fdb6:	46bd      	mov	sp, r7
    fdb8:	b004      	add	sp, #16
    fdba:	bd80      	pop	{r7, pc}
    fdbc:	1fff08d4 	.word	0x1fff08d4
    fdc0:	1fff08ae 	.word	0x1fff08ae

0000fdc4 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    fdc4:	b5b0      	push	{r4, r5, r7, lr}
    fdc6:	b092      	sub	sp, #72	; 0x48
    fdc8:	af00      	add	r7, sp, #0
    fdca:	60f8      	str	r0, [r7, #12]
    fdcc:	60b9      	str	r1, [r7, #8]
    fdce:	1dfb      	adds	r3, r7, #7
    fdd0:	701a      	strb	r2, [r3, #0]
    fdd2:	4cd1      	ldr	r4, [pc, #836]	; (10118 <f_open+0x354>)
    fdd4:	447c      	add	r4, pc
	DIR dj;
	BYTE *dir;
	DEF_NAMEBUF;


	fp->fs = 0;			/* Clear file object */
    fdd6:	68fb      	ldr	r3, [r7, #12]
    fdd8:	2200      	movs	r2, #0
    fdda:	601a      	str	r2, [r3, #0]

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    fddc:	1dfb      	adds	r3, r7, #7
    fdde:	1dfa      	adds	r2, r7, #7
    fde0:	7812      	ldrb	r2, [r2, #0]
    fde2:	211f      	movs	r1, #31
    fde4:	400a      	ands	r2, r1
    fde6:	701a      	strb	r2, [r3, #0]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    fde8:	1dfb      	adds	r3, r7, #7
    fdea:	781b      	ldrb	r3, [r3, #0]
    fdec:	2201      	movs	r2, #1
    fdee:	4393      	bics	r3, r2
    fdf0:	b2da      	uxtb	r2, r3
    fdf2:	2347      	movs	r3, #71	; 0x47
    fdf4:	18fd      	adds	r5, r7, r3
    fdf6:	231c      	movs	r3, #28
    fdf8:	18f9      	adds	r1, r7, r3
    fdfa:	2308      	movs	r3, #8
    fdfc:	18fb      	adds	r3, r7, r3
    fdfe:	0018      	movs	r0, r3
    fe00:	4bc6      	ldr	r3, [pc, #792]	; (1011c <f_open+0x358>)
    fe02:	447b      	add	r3, pc
    fe04:	4798      	blx	r3
    fe06:	0003      	movs	r3, r0
    fe08:	702b      	strb	r3, [r5, #0]
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    fe0a:	231c      	movs	r3, #28
    fe0c:	18fb      	adds	r3, r7, r3
    fe0e:	2210      	movs	r2, #16
    fe10:	18ba      	adds	r2, r7, r2
    fe12:	619a      	str	r2, [r3, #24]
	if (res == FR_OK)
    fe14:	2347      	movs	r3, #71	; 0x47
    fe16:	18fb      	adds	r3, r7, r3
    fe18:	781b      	ldrb	r3, [r3, #0]
    fe1a:	2b00      	cmp	r3, #0
    fe1c:	d10b      	bne.n	fe36 <f_open+0x72>
		res = follow_path(&dj, path);	/* Follow the file path */
    fe1e:	68ba      	ldr	r2, [r7, #8]
    fe20:	2347      	movs	r3, #71	; 0x47
    fe22:	18fd      	adds	r5, r7, r3
    fe24:	231c      	movs	r3, #28
    fe26:	18fb      	adds	r3, r7, r3
    fe28:	0011      	movs	r1, r2
    fe2a:	0018      	movs	r0, r3
    fe2c:	4bbc      	ldr	r3, [pc, #752]	; (10120 <f_open+0x35c>)
    fe2e:	447b      	add	r3, pc
    fe30:	4798      	blx	r3
    fe32:	0003      	movs	r3, r0
    fe34:	702b      	strb	r3, [r5, #0]
	dir = dj.dir;
    fe36:	231c      	movs	r3, #28
    fe38:	18fb      	adds	r3, r7, r3
    fe3a:	695b      	ldr	r3, [r3, #20]
    fe3c:	643b      	str	r3, [r7, #64]	; 0x40

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    fe3e:	2347      	movs	r3, #71	; 0x47
    fe40:	18fb      	adds	r3, r7, r3
    fe42:	781b      	ldrb	r3, [r3, #0]
    fe44:	2b00      	cmp	r3, #0
    fe46:	d106      	bne.n	fe56 <f_open+0x92>
		if (!dir)	/* Current dir itself */
    fe48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fe4a:	2b00      	cmp	r3, #0
    fe4c:	d103      	bne.n	fe56 <f_open+0x92>
			res = FR_INVALID_NAME;
    fe4e:	2347      	movs	r3, #71	; 0x47
    fe50:	18fb      	adds	r3, r7, r3
    fe52:	2206      	movs	r2, #6
    fe54:	701a      	strb	r2, [r3, #0]
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    fe56:	1dfb      	adds	r3, r7, #7
    fe58:	781b      	ldrb	r3, [r3, #0]
    fe5a:	221c      	movs	r2, #28
    fe5c:	4013      	ands	r3, r2
    fe5e:	d100      	bne.n	fe62 <f_open+0x9e>
    fe60:	e0cf      	b.n	10002 <f_open+0x23e>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    fe62:	2347      	movs	r3, #71	; 0x47
    fe64:	18fb      	adds	r3, r7, r3
    fe66:	781b      	ldrb	r3, [r3, #0]
    fe68:	2b00      	cmp	r3, #0
    fe6a:	d019      	beq.n	fea0 <f_open+0xdc>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    fe6c:	2347      	movs	r3, #71	; 0x47
    fe6e:	18fb      	adds	r3, r7, r3
    fe70:	781b      	ldrb	r3, [r3, #0]
    fe72:	2b04      	cmp	r3, #4
    fe74:	d109      	bne.n	fe8a <f_open+0xc6>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    fe76:	2347      	movs	r3, #71	; 0x47
    fe78:	18fd      	adds	r5, r7, r3
    fe7a:	231c      	movs	r3, #28
    fe7c:	18fb      	adds	r3, r7, r3
    fe7e:	0018      	movs	r0, r3
    fe80:	4ba8      	ldr	r3, [pc, #672]	; (10124 <f_open+0x360>)
    fe82:	447b      	add	r3, pc
    fe84:	4798      	blx	r3
    fe86:	0003      	movs	r3, r0
    fe88:	702b      	strb	r3, [r5, #0]
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    fe8a:	1dfb      	adds	r3, r7, #7
    fe8c:	1dfa      	adds	r2, r7, #7
    fe8e:	7812      	ldrb	r2, [r2, #0]
    fe90:	2108      	movs	r1, #8
    fe92:	430a      	orrs	r2, r1
    fe94:	701a      	strb	r2, [r3, #0]
			dir = dj.dir;					/* New entry */
    fe96:	231c      	movs	r3, #28
    fe98:	18fb      	adds	r3, r7, r3
    fe9a:	695b      	ldr	r3, [r3, #20]
    fe9c:	643b      	str	r3, [r7, #64]	; 0x40
    fe9e:	e014      	b.n	feca <f_open+0x106>
		}
		else {								/* Any object is already existing */
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    fea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fea2:	330b      	adds	r3, #11
    fea4:	781b      	ldrb	r3, [r3, #0]
    fea6:	001a      	movs	r2, r3
    fea8:	2311      	movs	r3, #17
    feaa:	4013      	ands	r3, r2
    feac:	d004      	beq.n	feb8 <f_open+0xf4>
				res = FR_DENIED;
    feae:	2347      	movs	r3, #71	; 0x47
    feb0:	18fb      	adds	r3, r7, r3
    feb2:	2207      	movs	r2, #7
    feb4:	701a      	strb	r2, [r3, #0]
    feb6:	e008      	b.n	feca <f_open+0x106>
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    feb8:	1dfb      	adds	r3, r7, #7
    feba:	781b      	ldrb	r3, [r3, #0]
    febc:	2204      	movs	r2, #4
    febe:	4013      	ands	r3, r2
    fec0:	d003      	beq.n	feca <f_open+0x106>
					res = FR_EXIST;
    fec2:	2347      	movs	r3, #71	; 0x47
    fec4:	18fb      	adds	r3, r7, r3
    fec6:	2208      	movs	r2, #8
    fec8:	701a      	strb	r2, [r3, #0]
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    feca:	2347      	movs	r3, #71	; 0x47
    fecc:	18fb      	adds	r3, r7, r3
    fece:	781b      	ldrb	r3, [r3, #0]
    fed0:	2b00      	cmp	r3, #0
    fed2:	d000      	beq.n	fed6 <f_open+0x112>
    fed4:	e0b6      	b.n	10044 <f_open+0x280>
    fed6:	1dfb      	adds	r3, r7, #7
    fed8:	781b      	ldrb	r3, [r3, #0]
    feda:	2208      	movs	r2, #8
    fedc:	4013      	ands	r3, r2
    fede:	d100      	bne.n	fee2 <f_open+0x11e>
    fee0:	e0b0      	b.n	10044 <f_open+0x280>
			dw = get_fattime();					/* Created time */
    fee2:	4b91      	ldr	r3, [pc, #580]	; (10128 <f_open+0x364>)
    fee4:	58e3      	ldr	r3, [r4, r3]
    fee6:	4798      	blx	r3
    fee8:	0003      	movs	r3, r0
    feea:	63fb      	str	r3, [r7, #60]	; 0x3c
			ST_DWORD(dir+DIR_CrtTime, dw);
    feec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    feee:	330e      	adds	r3, #14
    fef0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fef2:	b2d2      	uxtb	r2, r2
    fef4:	701a      	strb	r2, [r3, #0]
    fef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    fef8:	330f      	adds	r3, #15
    fefa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fefc:	b292      	uxth	r2, r2
    fefe:	0a12      	lsrs	r2, r2, #8
    ff00:	b292      	uxth	r2, r2
    ff02:	b2d2      	uxtb	r2, r2
    ff04:	701a      	strb	r2, [r3, #0]
    ff06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff08:	3310      	adds	r3, #16
    ff0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ff0c:	0c12      	lsrs	r2, r2, #16
    ff0e:	b2d2      	uxtb	r2, r2
    ff10:	701a      	strb	r2, [r3, #0]
    ff12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff14:	3311      	adds	r3, #17
    ff16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    ff18:	0e12      	lsrs	r2, r2, #24
    ff1a:	b2d2      	uxtb	r2, r2
    ff1c:	701a      	strb	r2, [r3, #0]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    ff1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff20:	330b      	adds	r3, #11
    ff22:	2200      	movs	r2, #0
    ff24:	701a      	strb	r2, [r3, #0]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    ff26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff28:	331c      	adds	r3, #28
    ff2a:	2200      	movs	r2, #0
    ff2c:	701a      	strb	r2, [r3, #0]
    ff2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff30:	331d      	adds	r3, #29
    ff32:	2200      	movs	r2, #0
    ff34:	701a      	strb	r2, [r3, #0]
    ff36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff38:	331e      	adds	r3, #30
    ff3a:	2200      	movs	r2, #0
    ff3c:	701a      	strb	r2, [r3, #0]
    ff3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff40:	331f      	adds	r3, #31
    ff42:	2200      	movs	r2, #0
    ff44:	701a      	strb	r2, [r3, #0]
			cl = LD_CLUST(dir);					/* Get start cluster */
    ff46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff48:	3315      	adds	r3, #21
    ff4a:	781b      	ldrb	r3, [r3, #0]
    ff4c:	021b      	lsls	r3, r3, #8
    ff4e:	b21a      	sxth	r2, r3
    ff50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff52:	3314      	adds	r3, #20
    ff54:	781b      	ldrb	r3, [r3, #0]
    ff56:	b21b      	sxth	r3, r3
    ff58:	4313      	orrs	r3, r2
    ff5a:	b21b      	sxth	r3, r3
    ff5c:	b29b      	uxth	r3, r3
    ff5e:	041b      	lsls	r3, r3, #16
    ff60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ff62:	321b      	adds	r2, #27
    ff64:	7812      	ldrb	r2, [r2, #0]
    ff66:	0212      	lsls	r2, r2, #8
    ff68:	b211      	sxth	r1, r2
    ff6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    ff6c:	321a      	adds	r2, #26
    ff6e:	7812      	ldrb	r2, [r2, #0]
    ff70:	b212      	sxth	r2, r2
    ff72:	430a      	orrs	r2, r1
    ff74:	b212      	sxth	r2, r2
    ff76:	b292      	uxth	r2, r2
    ff78:	4313      	orrs	r3, r2
    ff7a:	63bb      	str	r3, [r7, #56]	; 0x38
			ST_CLUST(dir, 0);					/* cluster = 0 */
    ff7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff7e:	331a      	adds	r3, #26
    ff80:	2200      	movs	r2, #0
    ff82:	701a      	strb	r2, [r3, #0]
    ff84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff86:	331b      	adds	r3, #27
    ff88:	2200      	movs	r2, #0
    ff8a:	701a      	strb	r2, [r3, #0]
    ff8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff8e:	3314      	adds	r3, #20
    ff90:	2200      	movs	r2, #0
    ff92:	701a      	strb	r2, [r3, #0]
    ff94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    ff96:	3315      	adds	r3, #21
    ff98:	2200      	movs	r2, #0
    ff9a:	701a      	strb	r2, [r3, #0]
			dj.fs->wflag = 1;
    ff9c:	231c      	movs	r3, #28
    ff9e:	18fb      	adds	r3, r7, r3
    ffa0:	681b      	ldr	r3, [r3, #0]
    ffa2:	2201      	movs	r2, #1
    ffa4:	711a      	strb	r2, [r3, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    ffa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    ffa8:	2b00      	cmp	r3, #0
    ffaa:	d04b      	beq.n	10044 <f_open+0x280>
				dw = dj.fs->winsect;
    ffac:	231c      	movs	r3, #28
    ffae:	18fb      	adds	r3, r7, r3
    ffb0:	681b      	ldr	r3, [r3, #0]
    ffb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    ffb4:	63fb      	str	r3, [r7, #60]	; 0x3c
				res = remove_chain(dj.fs, cl);
    ffb6:	231c      	movs	r3, #28
    ffb8:	18fb      	adds	r3, r7, r3
    ffba:	681b      	ldr	r3, [r3, #0]
    ffbc:	2247      	movs	r2, #71	; 0x47
    ffbe:	18bc      	adds	r4, r7, r2
    ffc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ffc2:	0011      	movs	r1, r2
    ffc4:	0018      	movs	r0, r3
    ffc6:	4b59      	ldr	r3, [pc, #356]	; (1012c <f_open+0x368>)
    ffc8:	447b      	add	r3, pc
    ffca:	4798      	blx	r3
    ffcc:	0003      	movs	r3, r0
    ffce:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
    ffd0:	2347      	movs	r3, #71	; 0x47
    ffd2:	18fb      	adds	r3, r7, r3
    ffd4:	781b      	ldrb	r3, [r3, #0]
    ffd6:	2b00      	cmp	r3, #0
    ffd8:	d134      	bne.n	10044 <f_open+0x280>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    ffda:	231c      	movs	r3, #28
    ffdc:	18fb      	adds	r3, r7, r3
    ffde:	681b      	ldr	r3, [r3, #0]
    ffe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
    ffe2:	3a01      	subs	r2, #1
    ffe4:	60da      	str	r2, [r3, #12]
					res = move_window(dj.fs, dw);
    ffe6:	231c      	movs	r3, #28
    ffe8:	18fb      	adds	r3, r7, r3
    ffea:	681b      	ldr	r3, [r3, #0]
    ffec:	2247      	movs	r2, #71	; 0x47
    ffee:	18bc      	adds	r4, r7, r2
    fff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    fff2:	0011      	movs	r1, r2
    fff4:	0018      	movs	r0, r3
    fff6:	4b4e      	ldr	r3, [pc, #312]	; (10130 <f_open+0x36c>)
    fff8:	447b      	add	r3, pc
    fffa:	4798      	blx	r3
    fffc:	0003      	movs	r3, r0
    fffe:	7023      	strb	r3, [r4, #0]
   10000:	e020      	b.n	10044 <f_open+0x280>
				}
			}
		}
	}
	else {	/* Open an existing file */
		if (res == FR_OK) {						/* Follow succeeded */
   10002:	2347      	movs	r3, #71	; 0x47
   10004:	18fb      	adds	r3, r7, r3
   10006:	781b      	ldrb	r3, [r3, #0]
   10008:	2b00      	cmp	r3, #0
   1000a:	d11b      	bne.n	10044 <f_open+0x280>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
   1000c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1000e:	330b      	adds	r3, #11
   10010:	781b      	ldrb	r3, [r3, #0]
   10012:	001a      	movs	r2, r3
   10014:	2310      	movs	r3, #16
   10016:	4013      	ands	r3, r2
   10018:	d004      	beq.n	10024 <f_open+0x260>
				res = FR_NO_FILE;
   1001a:	2347      	movs	r3, #71	; 0x47
   1001c:	18fb      	adds	r3, r7, r3
   1001e:	2204      	movs	r2, #4
   10020:	701a      	strb	r2, [r3, #0]
   10022:	e00f      	b.n	10044 <f_open+0x280>
			} else {
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
   10024:	1dfb      	adds	r3, r7, #7
   10026:	781b      	ldrb	r3, [r3, #0]
   10028:	2202      	movs	r2, #2
   1002a:	4013      	ands	r3, r2
   1002c:	d00a      	beq.n	10044 <f_open+0x280>
   1002e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10030:	330b      	adds	r3, #11
   10032:	781b      	ldrb	r3, [r3, #0]
   10034:	001a      	movs	r2, r3
   10036:	2301      	movs	r3, #1
   10038:	4013      	ands	r3, r2
   1003a:	d003      	beq.n	10044 <f_open+0x280>
					res = FR_DENIED;
   1003c:	2347      	movs	r3, #71	; 0x47
   1003e:	18fb      	adds	r3, r7, r3
   10040:	2207      	movs	r2, #7
   10042:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if (res == FR_OK) {
   10044:	2347      	movs	r3, #71	; 0x47
   10046:	18fb      	adds	r3, r7, r3
   10048:	781b      	ldrb	r3, [r3, #0]
   1004a:	2b00      	cmp	r3, #0
   1004c:	d113      	bne.n	10076 <f_open+0x2b2>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
   1004e:	1dfb      	adds	r3, r7, #7
   10050:	781b      	ldrb	r3, [r3, #0]
   10052:	2208      	movs	r2, #8
   10054:	4013      	ands	r3, r2
   10056:	d005      	beq.n	10064 <f_open+0x2a0>
			mode |= FA__WRITTEN;
   10058:	1dfb      	adds	r3, r7, #7
   1005a:	1dfa      	adds	r2, r7, #7
   1005c:	7812      	ldrb	r2, [r2, #0]
   1005e:	2120      	movs	r1, #32
   10060:	430a      	orrs	r2, r1
   10062:	701a      	strb	r2, [r3, #0]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
   10064:	231c      	movs	r3, #28
   10066:	18fb      	adds	r3, r7, r3
   10068:	681b      	ldr	r3, [r3, #0]
   1006a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1006c:	68fb      	ldr	r3, [r7, #12]
   1006e:	61da      	str	r2, [r3, #28]
		fp->dir_ptr = dir;
   10070:	68fb      	ldr	r3, [r7, #12]
   10072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   10074:	621a      	str	r2, [r3, #32]
		}
	}
#endif
	FREE_BUF();

	if (res == FR_OK) {
   10076:	2347      	movs	r3, #71	; 0x47
   10078:	18fb      	adds	r3, r7, r3
   1007a:	781b      	ldrb	r3, [r3, #0]
   1007c:	2b00      	cmp	r3, #0
   1007e:	d144      	bne.n	1010a <f_open+0x346>
		fp->flag = mode;					/* File access mode */
   10080:	68fb      	ldr	r3, [r7, #12]
   10082:	1dfa      	adds	r2, r7, #7
   10084:	7812      	ldrb	r2, [r2, #0]
   10086:	719a      	strb	r2, [r3, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
   10088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   1008a:	3315      	adds	r3, #21
   1008c:	781b      	ldrb	r3, [r3, #0]
   1008e:	021b      	lsls	r3, r3, #8
   10090:	b21a      	sxth	r2, r3
   10092:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   10094:	3314      	adds	r3, #20
   10096:	781b      	ldrb	r3, [r3, #0]
   10098:	b21b      	sxth	r3, r3
   1009a:	4313      	orrs	r3, r2
   1009c:	b21b      	sxth	r3, r3
   1009e:	b29b      	uxth	r3, r3
   100a0:	041b      	lsls	r3, r3, #16
   100a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   100a4:	321b      	adds	r2, #27
   100a6:	7812      	ldrb	r2, [r2, #0]
   100a8:	0212      	lsls	r2, r2, #8
   100aa:	b211      	sxth	r1, r2
   100ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   100ae:	321a      	adds	r2, #26
   100b0:	7812      	ldrb	r2, [r2, #0]
   100b2:	b212      	sxth	r2, r2
   100b4:	430a      	orrs	r2, r1
   100b6:	b212      	sxth	r2, r2
   100b8:	b292      	uxth	r2, r2
   100ba:	431a      	orrs	r2, r3
   100bc:	68fb      	ldr	r3, [r7, #12]
   100be:	611a      	str	r2, [r3, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
   100c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100c2:	331f      	adds	r3, #31
   100c4:	781b      	ldrb	r3, [r3, #0]
   100c6:	061a      	lsls	r2, r3, #24
   100c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   100ca:	331e      	adds	r3, #30
   100cc:	781b      	ldrb	r3, [r3, #0]
   100ce:	041b      	lsls	r3, r3, #16
   100d0:	4313      	orrs	r3, r2
   100d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   100d4:	321d      	adds	r2, #29
   100d6:	7812      	ldrb	r2, [r2, #0]
   100d8:	0212      	lsls	r2, r2, #8
   100da:	4313      	orrs	r3, r2
   100dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
   100de:	321c      	adds	r2, #28
   100e0:	7812      	ldrb	r2, [r2, #0]
   100e2:	431a      	orrs	r2, r3
   100e4:	68fb      	ldr	r3, [r7, #12]
   100e6:	60da      	str	r2, [r3, #12]
		fp->fptr = 0;						/* File pointer */
   100e8:	68fb      	ldr	r3, [r7, #12]
   100ea:	2200      	movs	r2, #0
   100ec:	609a      	str	r2, [r3, #8]
		fp->dsect = 0;
   100ee:	68fb      	ldr	r3, [r7, #12]
   100f0:	2200      	movs	r2, #0
   100f2:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
		fp->cltbl = 0;						/* Normal seek mode */
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
   100f4:	231c      	movs	r3, #28
   100f6:	18fb      	adds	r3, r7, r3
   100f8:	681a      	ldr	r2, [r3, #0]
   100fa:	68fb      	ldr	r3, [r7, #12]
   100fc:	601a      	str	r2, [r3, #0]
   100fe:	231c      	movs	r3, #28
   10100:	18fb      	adds	r3, r7, r3
   10102:	681b      	ldr	r3, [r3, #0]
   10104:	88da      	ldrh	r2, [r3, #6]
   10106:	68fb      	ldr	r3, [r7, #12]
   10108:	809a      	strh	r2, [r3, #4]
	}

	LEAVE_FF(dj.fs, res);
   1010a:	2347      	movs	r3, #71	; 0x47
   1010c:	18fb      	adds	r3, r7, r3
   1010e:	781b      	ldrb	r3, [r3, #0]
}
   10110:	0018      	movs	r0, r3
   10112:	46bd      	mov	sp, r7
   10114:	b012      	add	sp, #72	; 0x48
   10116:	bdb0      	pop	{r4, r5, r7, pc}
   10118:	00001ffc 	.word	0x00001ffc
   1011c:	fffff8db 	.word	0xfffff8db
   10120:	fffff68f 	.word	0xfffff68f
   10124:	fffff163 	.word	0xfffff163
   10128:	000001d8 	.word	0x000001d8
   1012c:	ffffe91d 	.word	0xffffe91d
   10130:	ffffe261 	.word	0xffffe261

00010134 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
   10134:	b5b0      	push	{r4, r5, r7, lr}
   10136:	b08c      	sub	sp, #48	; 0x30
   10138:	af00      	add	r7, sp, #0
   1013a:	60f8      	str	r0, [r7, #12]
   1013c:	60b9      	str	r1, [r7, #8]
   1013e:	607a      	str	r2, [r7, #4]
   10140:	603b      	str	r3, [r7, #0]
   10142:	4ca1      	ldr	r4, [pc, #644]	; (103c8 <f_read+0x294>)
   10144:	447c      	add	r4, pc
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;
   10146:	68bb      	ldr	r3, [r7, #8]
   10148:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Initialize byte counter */
   1014a:	683b      	ldr	r3, [r7, #0]
   1014c:	2200      	movs	r2, #0
   1014e:	601a      	str	r2, [r3, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
   10150:	68fb      	ldr	r3, [r7, #12]
   10152:	681a      	ldr	r2, [r3, #0]
   10154:	68fb      	ldr	r3, [r7, #12]
   10156:	889b      	ldrh	r3, [r3, #4]
   10158:	211f      	movs	r1, #31
   1015a:	187d      	adds	r5, r7, r1
   1015c:	0019      	movs	r1, r3
   1015e:	0010      	movs	r0, r2
   10160:	4b9a      	ldr	r3, [pc, #616]	; (103cc <f_read+0x298>)
   10162:	447b      	add	r3, pc
   10164:	4798      	blx	r3
   10166:	0003      	movs	r3, r0
   10168:	702b      	strb	r3, [r5, #0]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
   1016a:	231f      	movs	r3, #31
   1016c:	18fb      	adds	r3, r7, r3
   1016e:	781b      	ldrb	r3, [r3, #0]
   10170:	2b00      	cmp	r3, #0
   10172:	d003      	beq.n	1017c <f_read+0x48>
   10174:	231f      	movs	r3, #31
   10176:	18fb      	adds	r3, r7, r3
   10178:	781b      	ldrb	r3, [r3, #0]
   1017a:	e121      	b.n	103c0 <f_read+0x28c>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
   1017c:	68fb      	ldr	r3, [r7, #12]
   1017e:	799b      	ldrb	r3, [r3, #6]
   10180:	b25b      	sxtb	r3, r3
   10182:	2b00      	cmp	r3, #0
   10184:	da01      	bge.n	1018a <f_read+0x56>
		LEAVE_FF(fp->fs, FR_INT_ERR);
   10186:	2302      	movs	r3, #2
   10188:	e11a      	b.n	103c0 <f_read+0x28c>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
   1018a:	68fb      	ldr	r3, [r7, #12]
   1018c:	799b      	ldrb	r3, [r3, #6]
   1018e:	001a      	movs	r2, r3
   10190:	2301      	movs	r3, #1
   10192:	4013      	ands	r3, r2
   10194:	d101      	bne.n	1019a <f_read+0x66>
		LEAVE_FF(fp->fs, FR_DENIED);
   10196:	2307      	movs	r3, #7
   10198:	e112      	b.n	103c0 <f_read+0x28c>
	remain = fp->fsize - fp->fptr;
   1019a:	68fb      	ldr	r3, [r7, #12]
   1019c:	68da      	ldr	r2, [r3, #12]
   1019e:	68fb      	ldr	r3, [r7, #12]
   101a0:	689b      	ldr	r3, [r3, #8]
   101a2:	1ad3      	subs	r3, r2, r3
   101a4:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
   101a6:	687a      	ldr	r2, [r7, #4]
   101a8:	69bb      	ldr	r3, [r7, #24]
   101aa:	429a      	cmp	r2, r3
   101ac:	d800      	bhi.n	101b0 <f_read+0x7c>
   101ae:	e102      	b.n	103b6 <f_read+0x282>
   101b0:	69bb      	ldr	r3, [r7, #24]
   101b2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
   101b4:	e0ff      	b.n	103b6 <f_read+0x282>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
   101b6:	68fb      	ldr	r3, [r7, #12]
   101b8:	689b      	ldr	r3, [r3, #8]
   101ba:	05db      	lsls	r3, r3, #23
   101bc:	0ddb      	lsrs	r3, r3, #23
   101be:	d000      	beq.n	101c2 <f_read+0x8e>
   101c0:	e0b4      	b.n	1032c <f_read+0x1f8>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
   101c2:	68fb      	ldr	r3, [r7, #12]
   101c4:	689b      	ldr	r3, [r3, #8]
   101c6:	0a5b      	lsrs	r3, r3, #9
   101c8:	b2da      	uxtb	r2, r3
   101ca:	68fb      	ldr	r3, [r7, #12]
   101cc:	681b      	ldr	r3, [r3, #0]
   101ce:	789b      	ldrb	r3, [r3, #2]
   101d0:	3b01      	subs	r3, #1
   101d2:	b2d9      	uxtb	r1, r3
   101d4:	2317      	movs	r3, #23
   101d6:	18fb      	adds	r3, r7, r3
   101d8:	400a      	ands	r2, r1
   101da:	701a      	strb	r2, [r3, #0]
			if (!csect) {						/* On the cluster boundary? */
   101dc:	2317      	movs	r3, #23
   101de:	18fb      	adds	r3, r7, r3
   101e0:	781b      	ldrb	r3, [r3, #0]
   101e2:	2b00      	cmp	r3, #0
   101e4:	d12f      	bne.n	10246 <f_read+0x112>
				if (fp->fptr == 0) {			/* On the top of the file? */
   101e6:	68fb      	ldr	r3, [r7, #12]
   101e8:	689b      	ldr	r3, [r3, #8]
   101ea:	2b00      	cmp	r3, #0
   101ec:	d103      	bne.n	101f6 <f_read+0xc2>
					clst = fp->sclust;			/* Follow from the origin */
   101ee:	68fb      	ldr	r3, [r7, #12]
   101f0:	691b      	ldr	r3, [r3, #16]
   101f2:	62fb      	str	r3, [r7, #44]	; 0x2c
   101f4:	e00a      	b.n	1020c <f_read+0xd8>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
   101f6:	68fb      	ldr	r3, [r7, #12]
   101f8:	681a      	ldr	r2, [r3, #0]
   101fa:	68fb      	ldr	r3, [r7, #12]
   101fc:	695b      	ldr	r3, [r3, #20]
   101fe:	0019      	movs	r1, r3
   10200:	0010      	movs	r0, r2
   10202:	4b73      	ldr	r3, [pc, #460]	; (103d0 <f_read+0x29c>)
   10204:	447b      	add	r3, pc
   10206:	4798      	blx	r3
   10208:	0003      	movs	r3, r0
   1020a:	62fb      	str	r3, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
   1020c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   1020e:	2b01      	cmp	r3, #1
   10210:	d809      	bhi.n	10226 <f_read+0xf2>
   10212:	68fb      	ldr	r3, [r7, #12]
   10214:	799b      	ldrb	r3, [r3, #6]
   10216:	2280      	movs	r2, #128	; 0x80
   10218:	4252      	negs	r2, r2
   1021a:	4313      	orrs	r3, r2
   1021c:	b2da      	uxtb	r2, r3
   1021e:	68fb      	ldr	r3, [r7, #12]
   10220:	719a      	strb	r2, [r3, #6]
   10222:	2302      	movs	r3, #2
   10224:	e0cc      	b.n	103c0 <f_read+0x28c>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
   10226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   10228:	3301      	adds	r3, #1
   1022a:	d109      	bne.n	10240 <f_read+0x10c>
   1022c:	68fb      	ldr	r3, [r7, #12]
   1022e:	799b      	ldrb	r3, [r3, #6]
   10230:	2280      	movs	r2, #128	; 0x80
   10232:	4252      	negs	r2, r2
   10234:	4313      	orrs	r3, r2
   10236:	b2da      	uxtb	r2, r3
   10238:	68fb      	ldr	r3, [r7, #12]
   1023a:	719a      	strb	r2, [r3, #6]
   1023c:	2301      	movs	r3, #1
   1023e:	e0bf      	b.n	103c0 <f_read+0x28c>
				fp->clust = clst;				/* Update current cluster */
   10240:	68fb      	ldr	r3, [r7, #12]
   10242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   10244:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
   10246:	68fb      	ldr	r3, [r7, #12]
   10248:	681a      	ldr	r2, [r3, #0]
   1024a:	68fb      	ldr	r3, [r7, #12]
   1024c:	695b      	ldr	r3, [r3, #20]
   1024e:	0019      	movs	r1, r3
   10250:	0010      	movs	r0, r2
   10252:	4b60      	ldr	r3, [pc, #384]	; (103d4 <f_read+0x2a0>)
   10254:	447b      	add	r3, pc
   10256:	4798      	blx	r3
   10258:	0003      	movs	r3, r0
   1025a:	613b      	str	r3, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
   1025c:	693b      	ldr	r3, [r7, #16]
   1025e:	2b00      	cmp	r3, #0
   10260:	d109      	bne.n	10276 <f_read+0x142>
   10262:	68fb      	ldr	r3, [r7, #12]
   10264:	799b      	ldrb	r3, [r3, #6]
   10266:	2280      	movs	r2, #128	; 0x80
   10268:	4252      	negs	r2, r2
   1026a:	4313      	orrs	r3, r2
   1026c:	b2da      	uxtb	r2, r3
   1026e:	68fb      	ldr	r3, [r7, #12]
   10270:	719a      	strb	r2, [r3, #6]
   10272:	2302      	movs	r3, #2
   10274:	e0a4      	b.n	103c0 <f_read+0x28c>
			sect += csect;
   10276:	2317      	movs	r3, #23
   10278:	18fb      	adds	r3, r7, r3
   1027a:	781b      	ldrb	r3, [r3, #0]
   1027c:	693a      	ldr	r2, [r7, #16]
   1027e:	18d3      	adds	r3, r2, r3
   10280:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
   10282:	687b      	ldr	r3, [r7, #4]
   10284:	0a5b      	lsrs	r3, r3, #9
   10286:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
   10288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   1028a:	2b00      	cmp	r3, #0
   1028c:	d04b      	beq.n	10326 <f_read+0x1f2>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
   1028e:	2317      	movs	r3, #23
   10290:	18fb      	adds	r3, r7, r3
   10292:	781a      	ldrb	r2, [r3, #0]
   10294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10296:	18d2      	adds	r2, r2, r3
   10298:	68fb      	ldr	r3, [r7, #12]
   1029a:	681b      	ldr	r3, [r3, #0]
   1029c:	789b      	ldrb	r3, [r3, #2]
   1029e:	429a      	cmp	r2, r3
   102a0:	d908      	bls.n	102b4 <f_read+0x180>
					cc = fp->fs->csize - csect;
   102a2:	68fb      	ldr	r3, [r7, #12]
   102a4:	681b      	ldr	r3, [r3, #0]
   102a6:	789b      	ldrb	r3, [r3, #2]
   102a8:	001a      	movs	r2, r3
   102aa:	2317      	movs	r3, #23
   102ac:	18fb      	adds	r3, r7, r3
   102ae:	781b      	ldrb	r3, [r3, #0]
   102b0:	1ad3      	subs	r3, r2, r3
   102b2:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
   102b4:	68fb      	ldr	r3, [r7, #12]
   102b6:	681b      	ldr	r3, [r3, #0]
   102b8:	7858      	ldrb	r0, [r3, #1]
   102ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   102bc:	b2db      	uxtb	r3, r3
   102be:	693a      	ldr	r2, [r7, #16]
   102c0:	6a39      	ldr	r1, [r7, #32]
   102c2:	4d45      	ldr	r5, [pc, #276]	; (103d8 <f_read+0x2a4>)
   102c4:	5965      	ldr	r5, [r4, r5]
   102c6:	47a8      	blx	r5
   102c8:	1e03      	subs	r3, r0, #0
   102ca:	d009      	beq.n	102e0 <f_read+0x1ac>
					ABORT(fp->fs, FR_DISK_ERR);
   102cc:	68fb      	ldr	r3, [r7, #12]
   102ce:	799b      	ldrb	r3, [r3, #6]
   102d0:	2280      	movs	r2, #128	; 0x80
   102d2:	4252      	negs	r2, r2
   102d4:	4313      	orrs	r3, r2
   102d6:	b2da      	uxtb	r2, r3
   102d8:	68fb      	ldr	r3, [r7, #12]
   102da:	719a      	strb	r2, [r3, #6]
   102dc:	2301      	movs	r3, #1
   102de:	e06f      	b.n	103c0 <f_read+0x28c>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
   102e0:	68fb      	ldr	r3, [r7, #12]
   102e2:	681b      	ldr	r3, [r3, #0]
   102e4:	791b      	ldrb	r3, [r3, #4]
   102e6:	2b00      	cmp	r3, #0
   102e8:	d019      	beq.n	1031e <f_read+0x1ea>
   102ea:	68fb      	ldr	r3, [r7, #12]
   102ec:	681b      	ldr	r3, [r3, #0]
   102ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   102f0:	693b      	ldr	r3, [r7, #16]
   102f2:	1ad2      	subs	r2, r2, r3
   102f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   102f6:	429a      	cmp	r2, r3
   102f8:	d211      	bcs.n	1031e <f_read+0x1ea>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
   102fa:	68fb      	ldr	r3, [r7, #12]
   102fc:	681b      	ldr	r3, [r3, #0]
   102fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   10300:	693b      	ldr	r3, [r7, #16]
   10302:	1ad3      	subs	r3, r2, r3
   10304:	025b      	lsls	r3, r3, #9
   10306:	6a3a      	ldr	r2, [r7, #32]
   10308:	18d0      	adds	r0, r2, r3
   1030a:	68fb      	ldr	r3, [r7, #12]
   1030c:	681b      	ldr	r3, [r3, #0]
   1030e:	3330      	adds	r3, #48	; 0x30
   10310:	0019      	movs	r1, r3
   10312:	2380      	movs	r3, #128	; 0x80
   10314:	009b      	lsls	r3, r3, #2
   10316:	001a      	movs	r2, r3
   10318:	4b30      	ldr	r3, [pc, #192]	; (103dc <f_read+0x2a8>)
   1031a:	447b      	add	r3, pc
   1031c:	4798      	blx	r3
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
   1031e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   10320:	025b      	lsls	r3, r3, #9
   10322:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
   10324:	e033      	b.n	1038e <f_read+0x25a>
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
					ABORT(fp->fs, FR_DISK_ERR);
			}
#endif
			fp->dsect = sect;
   10326:	68fb      	ldr	r3, [r7, #12]
   10328:	693a      	ldr	r2, [r7, #16]
   1032a:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
   1032c:	68fb      	ldr	r3, [r7, #12]
   1032e:	689b      	ldr	r3, [r3, #8]
   10330:	05db      	lsls	r3, r3, #23
   10332:	0ddb      	lsrs	r3, r3, #23
   10334:	2280      	movs	r2, #128	; 0x80
   10336:	0092      	lsls	r2, r2, #2
   10338:	1ad3      	subs	r3, r2, r3
   1033a:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
   1033c:	6aba      	ldr	r2, [r7, #40]	; 0x28
   1033e:	687b      	ldr	r3, [r7, #4]
   10340:	429a      	cmp	r2, r3
   10342:	d901      	bls.n	10348 <f_read+0x214>
   10344:	687b      	ldr	r3, [r7, #4]
   10346:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
   10348:	68fb      	ldr	r3, [r7, #12]
   1034a:	681a      	ldr	r2, [r3, #0]
   1034c:	68fb      	ldr	r3, [r7, #12]
   1034e:	699b      	ldr	r3, [r3, #24]
   10350:	0019      	movs	r1, r3
   10352:	0010      	movs	r0, r2
   10354:	4b22      	ldr	r3, [pc, #136]	; (103e0 <f_read+0x2ac>)
   10356:	447b      	add	r3, pc
   10358:	4798      	blx	r3
   1035a:	1e03      	subs	r3, r0, #0
   1035c:	d009      	beq.n	10372 <f_read+0x23e>
			ABORT(fp->fs, FR_DISK_ERR);
   1035e:	68fb      	ldr	r3, [r7, #12]
   10360:	799b      	ldrb	r3, [r3, #6]
   10362:	2280      	movs	r2, #128	; 0x80
   10364:	4252      	negs	r2, r2
   10366:	4313      	orrs	r3, r2
   10368:	b2da      	uxtb	r2, r3
   1036a:	68fb      	ldr	r3, [r7, #12]
   1036c:	719a      	strb	r2, [r3, #6]
   1036e:	2301      	movs	r3, #1
   10370:	e026      	b.n	103c0 <f_read+0x28c>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
   10372:	68fb      	ldr	r3, [r7, #12]
   10374:	681a      	ldr	r2, [r3, #0]
   10376:	68fb      	ldr	r3, [r7, #12]
   10378:	689b      	ldr	r3, [r3, #8]
   1037a:	05db      	lsls	r3, r3, #23
   1037c:	0ddb      	lsrs	r3, r3, #23
   1037e:	3330      	adds	r3, #48	; 0x30
   10380:	18d1      	adds	r1, r2, r3
   10382:	6aba      	ldr	r2, [r7, #40]	; 0x28
   10384:	6a3b      	ldr	r3, [r7, #32]
   10386:	0018      	movs	r0, r3
   10388:	4b16      	ldr	r3, [pc, #88]	; (103e4 <f_read+0x2b0>)
   1038a:	447b      	add	r3, pc
   1038c:	4798      	blx	r3
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
   1038e:	6a3a      	ldr	r2, [r7, #32]
   10390:	6abb      	ldr	r3, [r7, #40]	; 0x28
   10392:	18d3      	adds	r3, r2, r3
   10394:	623b      	str	r3, [r7, #32]
   10396:	68fb      	ldr	r3, [r7, #12]
   10398:	689a      	ldr	r2, [r3, #8]
   1039a:	6abb      	ldr	r3, [r7, #40]	; 0x28
   1039c:	18d2      	adds	r2, r2, r3
   1039e:	68fb      	ldr	r3, [r7, #12]
   103a0:	609a      	str	r2, [r3, #8]
   103a2:	683b      	ldr	r3, [r7, #0]
   103a4:	681a      	ldr	r2, [r3, #0]
   103a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
   103a8:	18d2      	adds	r2, r2, r3
   103aa:	683b      	ldr	r3, [r7, #0]
   103ac:	601a      	str	r2, [r3, #0]
   103ae:	687a      	ldr	r2, [r7, #4]
   103b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
   103b2:	1ad3      	subs	r3, r2, r3
   103b4:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
   103b6:	687b      	ldr	r3, [r7, #4]
   103b8:	2b00      	cmp	r3, #0
   103ba:	d000      	beq.n	103be <f_read+0x28a>
   103bc:	e6fb      	b.n	101b6 <f_read+0x82>
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
   103be:	2300      	movs	r3, #0
}
   103c0:	0018      	movs	r0, r3
   103c2:	46bd      	mov	sp, r7
   103c4:	b00c      	add	sp, #48	; 0x30
   103c6:	bdb0      	pop	{r4, r5, r7, pc}
   103c8:	00001c8c 	.word	0x00001c8c
   103cc:	fffffba3 	.word	0xfffffba3
   103d0:	ffffe311 	.word	0xffffe311
   103d4:	ffffe289 	.word	0xffffe289
   103d8:	000002b8 	.word	0x000002b8
   103dc:	ffffde5b 	.word	0xffffde5b
   103e0:	ffffdf03 	.word	0xffffdf03
   103e4:	ffffddeb 	.word	0xffffddeb

000103e8 <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
   103e8:	b590      	push	{r4, r7, lr}
   103ea:	b08f      	sub	sp, #60	; 0x3c
   103ec:	af00      	add	r7, sp, #0
   103ee:	6078      	str	r0, [r7, #4]
   103f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
   103f2:	2337      	movs	r3, #55	; 0x37
   103f4:	18fc      	adds	r4, r7, r3
   103f6:	2318      	movs	r3, #24
   103f8:	18f9      	adds	r1, r7, r3
   103fa:	1d3b      	adds	r3, r7, #4
   103fc:	2200      	movs	r2, #0
   103fe:	0018      	movs	r0, r3
   10400:	4b1c      	ldr	r3, [pc, #112]	; (10474 <f_stat+0x8c>)
   10402:	447b      	add	r3, pc
   10404:	4798      	blx	r3
   10406:	0003      	movs	r3, r0
   10408:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   1040a:	2337      	movs	r3, #55	; 0x37
   1040c:	18fb      	adds	r3, r7, r3
   1040e:	781b      	ldrb	r3, [r3, #0]
   10410:	2b00      	cmp	r3, #0
   10412:	d127      	bne.n	10464 <f_stat+0x7c>
		INIT_BUF(dj);
   10414:	2318      	movs	r3, #24
   10416:	18fb      	adds	r3, r7, r3
   10418:	220c      	movs	r2, #12
   1041a:	18ba      	adds	r2, r7, r2
   1041c:	619a      	str	r2, [r3, #24]
		res = follow_path(&dj, path);	/* Follow the file path */
   1041e:	687a      	ldr	r2, [r7, #4]
   10420:	2337      	movs	r3, #55	; 0x37
   10422:	18fc      	adds	r4, r7, r3
   10424:	2318      	movs	r3, #24
   10426:	18fb      	adds	r3, r7, r3
   10428:	0011      	movs	r1, r2
   1042a:	0018      	movs	r0, r3
   1042c:	4b12      	ldr	r3, [pc, #72]	; (10478 <f_stat+0x90>)
   1042e:	447b      	add	r3, pc
   10430:	4798      	blx	r3
   10432:	0003      	movs	r3, r0
   10434:	7023      	strb	r3, [r4, #0]
		if (res == FR_OK) {				/* Follow completed */
   10436:	2337      	movs	r3, #55	; 0x37
   10438:	18fb      	adds	r3, r7, r3
   1043a:	781b      	ldrb	r3, [r3, #0]
   1043c:	2b00      	cmp	r3, #0
   1043e:	d111      	bne.n	10464 <f_stat+0x7c>
			if (dj.dir)		/* Found an object */
   10440:	2318      	movs	r3, #24
   10442:	18fb      	adds	r3, r7, r3
   10444:	695b      	ldr	r3, [r3, #20]
   10446:	2b00      	cmp	r3, #0
   10448:	d008      	beq.n	1045c <f_stat+0x74>
				get_fileinfo(&dj, fno);
   1044a:	683a      	ldr	r2, [r7, #0]
   1044c:	2318      	movs	r3, #24
   1044e:	18fb      	adds	r3, r7, r3
   10450:	0011      	movs	r1, r2
   10452:	0018      	movs	r0, r3
   10454:	4b09      	ldr	r3, [pc, #36]	; (1047c <f_stat+0x94>)
   10456:	447b      	add	r3, pc
   10458:	4798      	blx	r3
   1045a:	e003      	b.n	10464 <f_stat+0x7c>
			else			/* It is root dir */
				res = FR_INVALID_NAME;
   1045c:	2337      	movs	r3, #55	; 0x37
   1045e:	18fb      	adds	r3, r7, r3
   10460:	2206      	movs	r2, #6
   10462:	701a      	strb	r2, [r3, #0]
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
   10464:	2337      	movs	r3, #55	; 0x37
   10466:	18fb      	adds	r3, r7, r3
   10468:	781b      	ldrb	r3, [r3, #0]
}
   1046a:	0018      	movs	r0, r3
   1046c:	46bd      	mov	sp, r7
   1046e:	b00f      	add	sp, #60	; 0x3c
   10470:	bd90      	pop	{r4, r7, pc}
   10472:	46c0      	nop			; (mov r8, r8)
   10474:	fffff2db 	.word	0xfffff2db
   10478:	fffff08f 	.word	0xfffff08f
   1047c:	ffffef27 	.word	0xffffef27

00010480 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
   10480:	b590      	push	{r4, r7, lr}
   10482:	b097      	sub	sp, #92	; 0x5c
   10484:	af00      	add	r7, sp, #0
   10486:	6078      	str	r0, [r7, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
   10488:	2357      	movs	r3, #87	; 0x57
   1048a:	18fc      	adds	r4, r7, r3
   1048c:	2330      	movs	r3, #48	; 0x30
   1048e:	18f9      	adds	r1, r7, r3
   10490:	1d3b      	adds	r3, r7, #4
   10492:	2201      	movs	r2, #1
   10494:	0018      	movs	r0, r3
   10496:	4b6e      	ldr	r3, [pc, #440]	; (10650 <f_unlink+0x1d0>)
   10498:	447b      	add	r3, pc
   1049a:	4798      	blx	r3
   1049c:	0003      	movs	r3, r0
   1049e:	7023      	strb	r3, [r4, #0]
	if (res == FR_OK) {
   104a0:	2357      	movs	r3, #87	; 0x57
   104a2:	18fb      	adds	r3, r7, r3
   104a4:	781b      	ldrb	r3, [r3, #0]
   104a6:	2b00      	cmp	r3, #0
   104a8:	d000      	beq.n	104ac <f_unlink+0x2c>
   104aa:	e0c9      	b.n	10640 <f_unlink+0x1c0>
		INIT_BUF(dj);
   104ac:	2330      	movs	r3, #48	; 0x30
   104ae:	18fb      	adds	r3, r7, r3
   104b0:	2208      	movs	r2, #8
   104b2:	18ba      	adds	r2, r7, r2
   104b4:	619a      	str	r2, [r3, #24]
		res = follow_path(&dj, path);		/* Follow the file path */
   104b6:	687a      	ldr	r2, [r7, #4]
   104b8:	2357      	movs	r3, #87	; 0x57
   104ba:	18fc      	adds	r4, r7, r3
   104bc:	2330      	movs	r3, #48	; 0x30
   104be:	18fb      	adds	r3, r7, r3
   104c0:	0011      	movs	r1, r2
   104c2:	0018      	movs	r0, r3
   104c4:	4b63      	ldr	r3, [pc, #396]	; (10654 <f_unlink+0x1d4>)
   104c6:	447b      	add	r3, pc
   104c8:	4798      	blx	r3
   104ca:	0003      	movs	r3, r0
   104cc:	7023      	strb	r3, [r4, #0]
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
   104ce:	2357      	movs	r3, #87	; 0x57
   104d0:	18fb      	adds	r3, r7, r3
   104d2:	781b      	ldrb	r3, [r3, #0]
   104d4:	2b00      	cmp	r3, #0
   104d6:	d000      	beq.n	104da <f_unlink+0x5a>
   104d8:	e0b2      	b.n	10640 <f_unlink+0x1c0>
			dir = dj.dir;
   104da:	2330      	movs	r3, #48	; 0x30
   104dc:	18fb      	adds	r3, r7, r3
   104de:	695b      	ldr	r3, [r3, #20]
   104e0:	653b      	str	r3, [r7, #80]	; 0x50
			if (!dir) {
   104e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   104e4:	2b00      	cmp	r3, #0
   104e6:	d104      	bne.n	104f2 <f_unlink+0x72>
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
   104e8:	2357      	movs	r3, #87	; 0x57
   104ea:	18fb      	adds	r3, r7, r3
   104ec:	2206      	movs	r2, #6
   104ee:	701a      	strb	r2, [r3, #0]
   104f0:	e00a      	b.n	10508 <f_unlink+0x88>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
   104f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   104f4:	330b      	adds	r3, #11
   104f6:	781b      	ldrb	r3, [r3, #0]
   104f8:	001a      	movs	r2, r3
   104fa:	2301      	movs	r3, #1
   104fc:	4013      	ands	r3, r2
   104fe:	d003      	beq.n	10508 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
   10500:	2357      	movs	r3, #87	; 0x57
   10502:	18fb      	adds	r3, r7, r3
   10504:	2207      	movs	r2, #7
   10506:	701a      	strb	r2, [r3, #0]
			}
			dclst = LD_CLUST(dir);
   10508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1050a:	3315      	adds	r3, #21
   1050c:	781b      	ldrb	r3, [r3, #0]
   1050e:	021b      	lsls	r3, r3, #8
   10510:	b21a      	sxth	r2, r3
   10512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   10514:	3314      	adds	r3, #20
   10516:	781b      	ldrb	r3, [r3, #0]
   10518:	b21b      	sxth	r3, r3
   1051a:	4313      	orrs	r3, r2
   1051c:	b21b      	sxth	r3, r3
   1051e:	b29b      	uxth	r3, r3
   10520:	041b      	lsls	r3, r3, #16
   10522:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   10524:	321b      	adds	r2, #27
   10526:	7812      	ldrb	r2, [r2, #0]
   10528:	0212      	lsls	r2, r2, #8
   1052a:	b211      	sxth	r1, r2
   1052c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
   1052e:	321a      	adds	r2, #26
   10530:	7812      	ldrb	r2, [r2, #0]
   10532:	b212      	sxth	r2, r2
   10534:	430a      	orrs	r2, r1
   10536:	b212      	sxth	r2, r2
   10538:	b292      	uxth	r2, r2
   1053a:	4313      	orrs	r3, r2
   1053c:	64fb      	str	r3, [r7, #76]	; 0x4c
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
   1053e:	2357      	movs	r3, #87	; 0x57
   10540:	18fb      	adds	r3, r7, r3
   10542:	781b      	ldrb	r3, [r3, #0]
   10544:	2b00      	cmp	r3, #0
   10546:	d147      	bne.n	105d8 <f_unlink+0x158>
   10548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   1054a:	330b      	adds	r3, #11
   1054c:	781b      	ldrb	r3, [r3, #0]
   1054e:	001a      	movs	r2, r3
   10550:	2310      	movs	r3, #16
   10552:	4013      	ands	r3, r2
   10554:	d040      	beq.n	105d8 <f_unlink+0x158>
				if (dclst < 2) {
   10556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10558:	2b01      	cmp	r3, #1
   1055a:	d804      	bhi.n	10566 <f_unlink+0xe6>
					res = FR_INT_ERR;
   1055c:	2357      	movs	r3, #87	; 0x57
   1055e:	18fb      	adds	r3, r7, r3
   10560:	2202      	movs	r2, #2
   10562:	701a      	strb	r2, [r3, #0]
   10564:	e038      	b.n	105d8 <f_unlink+0x158>
				} else {
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
   10566:	2330      	movs	r3, #48	; 0x30
   10568:	18f9      	adds	r1, r7, r3
   1056a:	2314      	movs	r3, #20
   1056c:	18fb      	adds	r3, r7, r3
   1056e:	221c      	movs	r2, #28
   10570:	0018      	movs	r0, r3
   10572:	4b39      	ldr	r3, [pc, #228]	; (10658 <f_unlink+0x1d8>)
   10574:	447b      	add	r3, pc
   10576:	4798      	blx	r3
					sdj.sclust = dclst;
   10578:	2314      	movs	r3, #20
   1057a:	18fb      	adds	r3, r7, r3
   1057c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   1057e:	609a      	str	r2, [r3, #8]
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
   10580:	2357      	movs	r3, #87	; 0x57
   10582:	18fc      	adds	r4, r7, r3
   10584:	2314      	movs	r3, #20
   10586:	18fb      	adds	r3, r7, r3
   10588:	2102      	movs	r1, #2
   1058a:	0018      	movs	r0, r3
   1058c:	4b33      	ldr	r3, [pc, #204]	; (1065c <f_unlink+0x1dc>)
   1058e:	447b      	add	r3, pc
   10590:	4798      	blx	r3
   10592:	0003      	movs	r3, r0
   10594:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) {
   10596:	2357      	movs	r3, #87	; 0x57
   10598:	18fb      	adds	r3, r7, r3
   1059a:	781b      	ldrb	r3, [r3, #0]
   1059c:	2b00      	cmp	r3, #0
   1059e:	d11b      	bne.n	105d8 <f_unlink+0x158>
						res = dir_read(&sdj);
   105a0:	2357      	movs	r3, #87	; 0x57
   105a2:	18fc      	adds	r4, r7, r3
   105a4:	2314      	movs	r3, #20
   105a6:	18fb      	adds	r3, r7, r3
   105a8:	0018      	movs	r0, r3
   105aa:	4b2d      	ldr	r3, [pc, #180]	; (10660 <f_unlink+0x1e0>)
   105ac:	447b      	add	r3, pc
   105ae:	4798      	blx	r3
   105b0:	0003      	movs	r3, r0
   105b2:	7023      	strb	r3, [r4, #0]
						if (res == FR_OK			/* Not empty dir */
   105b4:	2357      	movs	r3, #87	; 0x57
   105b6:	18fb      	adds	r3, r7, r3
   105b8:	781b      	ldrb	r3, [r3, #0]
   105ba:	2b00      	cmp	r3, #0
   105bc:	d103      	bne.n	105c6 <f_unlink+0x146>
#if _FS_RPATH
						|| dclst == sdj.fs->cdir	/* Current dir */
#endif
						) res = FR_DENIED;
   105be:	2357      	movs	r3, #87	; 0x57
   105c0:	18fb      	adds	r3, r7, r3
   105c2:	2207      	movs	r2, #7
   105c4:	701a      	strb	r2, [r3, #0]
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
   105c6:	2357      	movs	r3, #87	; 0x57
   105c8:	18fb      	adds	r3, r7, r3
   105ca:	781b      	ldrb	r3, [r3, #0]
   105cc:	2b04      	cmp	r3, #4
   105ce:	d103      	bne.n	105d8 <f_unlink+0x158>
   105d0:	2357      	movs	r3, #87	; 0x57
   105d2:	18fb      	adds	r3, r7, r3
   105d4:	2200      	movs	r2, #0
   105d6:	701a      	strb	r2, [r3, #0]
					}
				}
			}
			if (res == FR_OK) {
   105d8:	2357      	movs	r3, #87	; 0x57
   105da:	18fb      	adds	r3, r7, r3
   105dc:	781b      	ldrb	r3, [r3, #0]
   105de:	2b00      	cmp	r3, #0
   105e0:	d12e      	bne.n	10640 <f_unlink+0x1c0>
				res = dir_remove(&dj);		/* Remove the directory entry */
   105e2:	2357      	movs	r3, #87	; 0x57
   105e4:	18fc      	adds	r4, r7, r3
   105e6:	2330      	movs	r3, #48	; 0x30
   105e8:	18fb      	adds	r3, r7, r3
   105ea:	0018      	movs	r0, r3
   105ec:	4b1d      	ldr	r3, [pc, #116]	; (10664 <f_unlink+0x1e4>)
   105ee:	447b      	add	r3, pc
   105f0:	4798      	blx	r3
   105f2:	0003      	movs	r3, r0
   105f4:	7023      	strb	r3, [r4, #0]
				if (res == FR_OK) {
   105f6:	2357      	movs	r3, #87	; 0x57
   105f8:	18fb      	adds	r3, r7, r3
   105fa:	781b      	ldrb	r3, [r3, #0]
   105fc:	2b00      	cmp	r3, #0
   105fe:	d11f      	bne.n	10640 <f_unlink+0x1c0>
					if (dclst)				/* Remove the cluster chain if exist */
   10600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   10602:	2b00      	cmp	r3, #0
   10604:	d00c      	beq.n	10620 <f_unlink+0x1a0>
						res = remove_chain(dj.fs, dclst);
   10606:	2330      	movs	r3, #48	; 0x30
   10608:	18fb      	adds	r3, r7, r3
   1060a:	681b      	ldr	r3, [r3, #0]
   1060c:	2257      	movs	r2, #87	; 0x57
   1060e:	18bc      	adds	r4, r7, r2
   10610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
   10612:	0011      	movs	r1, r2
   10614:	0018      	movs	r0, r3
   10616:	4b14      	ldr	r3, [pc, #80]	; (10668 <f_unlink+0x1e8>)
   10618:	447b      	add	r3, pc
   1061a:	4798      	blx	r3
   1061c:	0003      	movs	r3, r0
   1061e:	7023      	strb	r3, [r4, #0]
					if (res == FR_OK) res = sync(dj.fs);
   10620:	2357      	movs	r3, #87	; 0x57
   10622:	18fb      	adds	r3, r7, r3
   10624:	781b      	ldrb	r3, [r3, #0]
   10626:	2b00      	cmp	r3, #0
   10628:	d10a      	bne.n	10640 <f_unlink+0x1c0>
   1062a:	2330      	movs	r3, #48	; 0x30
   1062c:	18fb      	adds	r3, r7, r3
   1062e:	681b      	ldr	r3, [r3, #0]
   10630:	2257      	movs	r2, #87	; 0x57
   10632:	18bc      	adds	r4, r7, r2
   10634:	0018      	movs	r0, r3
   10636:	4b0d      	ldr	r3, [pc, #52]	; (1066c <f_unlink+0x1ec>)
   10638:	447b      	add	r3, pc
   1063a:	4798      	blx	r3
   1063c:	0003      	movs	r3, r0
   1063e:	7023      	strb	r3, [r4, #0]
				}
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
   10640:	2357      	movs	r3, #87	; 0x57
   10642:	18fb      	adds	r3, r7, r3
   10644:	781b      	ldrb	r3, [r3, #0]
}
   10646:	0018      	movs	r0, r3
   10648:	46bd      	mov	sp, r7
   1064a:	b017      	add	sp, #92	; 0x5c
   1064c:	bd90      	pop	{r4, r7, pc}
   1064e:	46c0      	nop			; (mov r8, r8)
   10650:	fffff245 	.word	0xfffff245
   10654:	ffffeff7 	.word	0xffffeff7
   10658:	ffffdc01 	.word	0xffffdc01
   1065c:	ffffe56f 	.word	0xffffe56f
   10660:	ffffe965 	.word	0xffffe965
   10664:	ffffeb03 	.word	0xffffeb03
   10668:	ffffe2cd 	.word	0xffffe2cd
   1066c:	ffffdcf9 	.word	0xffffdcf9

00010670 <__gnu_thumb1_case_si>:
   10670:	b403      	push	{r0, r1}
   10672:	4671      	mov	r1, lr
   10674:	3102      	adds	r1, #2
   10676:	0889      	lsrs	r1, r1, #2
   10678:	0080      	lsls	r0, r0, #2
   1067a:	0089      	lsls	r1, r1, #2
   1067c:	5808      	ldr	r0, [r1, r0]
   1067e:	1840      	adds	r0, r0, r1
   10680:	4686      	mov	lr, r0
   10682:	bc03      	pop	{r0, r1}
   10684:	46f7      	mov	pc, lr
   10686:	46c0      	nop			; (mov r8, r8)

00010688 <__udivsi3>:
   10688:	2200      	movs	r2, #0
   1068a:	0843      	lsrs	r3, r0, #1
   1068c:	428b      	cmp	r3, r1
   1068e:	d374      	bcc.n	1077a <__udivsi3+0xf2>
   10690:	0903      	lsrs	r3, r0, #4
   10692:	428b      	cmp	r3, r1
   10694:	d35f      	bcc.n	10756 <__udivsi3+0xce>
   10696:	0a03      	lsrs	r3, r0, #8
   10698:	428b      	cmp	r3, r1
   1069a:	d344      	bcc.n	10726 <__udivsi3+0x9e>
   1069c:	0b03      	lsrs	r3, r0, #12
   1069e:	428b      	cmp	r3, r1
   106a0:	d328      	bcc.n	106f4 <__udivsi3+0x6c>
   106a2:	0c03      	lsrs	r3, r0, #16
   106a4:	428b      	cmp	r3, r1
   106a6:	d30d      	bcc.n	106c4 <__udivsi3+0x3c>
   106a8:	22ff      	movs	r2, #255	; 0xff
   106aa:	0209      	lsls	r1, r1, #8
   106ac:	ba12      	rev	r2, r2
   106ae:	0c03      	lsrs	r3, r0, #16
   106b0:	428b      	cmp	r3, r1
   106b2:	d302      	bcc.n	106ba <__udivsi3+0x32>
   106b4:	1212      	asrs	r2, r2, #8
   106b6:	0209      	lsls	r1, r1, #8
   106b8:	d065      	beq.n	10786 <__udivsi3+0xfe>
   106ba:	0b03      	lsrs	r3, r0, #12
   106bc:	428b      	cmp	r3, r1
   106be:	d319      	bcc.n	106f4 <__udivsi3+0x6c>
   106c0:	e000      	b.n	106c4 <__udivsi3+0x3c>
   106c2:	0a09      	lsrs	r1, r1, #8
   106c4:	0bc3      	lsrs	r3, r0, #15
   106c6:	428b      	cmp	r3, r1
   106c8:	d301      	bcc.n	106ce <__udivsi3+0x46>
   106ca:	03cb      	lsls	r3, r1, #15
   106cc:	1ac0      	subs	r0, r0, r3
   106ce:	4152      	adcs	r2, r2
   106d0:	0b83      	lsrs	r3, r0, #14
   106d2:	428b      	cmp	r3, r1
   106d4:	d301      	bcc.n	106da <__udivsi3+0x52>
   106d6:	038b      	lsls	r3, r1, #14
   106d8:	1ac0      	subs	r0, r0, r3
   106da:	4152      	adcs	r2, r2
   106dc:	0b43      	lsrs	r3, r0, #13
   106de:	428b      	cmp	r3, r1
   106e0:	d301      	bcc.n	106e6 <__udivsi3+0x5e>
   106e2:	034b      	lsls	r3, r1, #13
   106e4:	1ac0      	subs	r0, r0, r3
   106e6:	4152      	adcs	r2, r2
   106e8:	0b03      	lsrs	r3, r0, #12
   106ea:	428b      	cmp	r3, r1
   106ec:	d301      	bcc.n	106f2 <__udivsi3+0x6a>
   106ee:	030b      	lsls	r3, r1, #12
   106f0:	1ac0      	subs	r0, r0, r3
   106f2:	4152      	adcs	r2, r2
   106f4:	0ac3      	lsrs	r3, r0, #11
   106f6:	428b      	cmp	r3, r1
   106f8:	d301      	bcc.n	106fe <__udivsi3+0x76>
   106fa:	02cb      	lsls	r3, r1, #11
   106fc:	1ac0      	subs	r0, r0, r3
   106fe:	4152      	adcs	r2, r2
   10700:	0a83      	lsrs	r3, r0, #10
   10702:	428b      	cmp	r3, r1
   10704:	d301      	bcc.n	1070a <__udivsi3+0x82>
   10706:	028b      	lsls	r3, r1, #10
   10708:	1ac0      	subs	r0, r0, r3
   1070a:	4152      	adcs	r2, r2
   1070c:	0a43      	lsrs	r3, r0, #9
   1070e:	428b      	cmp	r3, r1
   10710:	d301      	bcc.n	10716 <__udivsi3+0x8e>
   10712:	024b      	lsls	r3, r1, #9
   10714:	1ac0      	subs	r0, r0, r3
   10716:	4152      	adcs	r2, r2
   10718:	0a03      	lsrs	r3, r0, #8
   1071a:	428b      	cmp	r3, r1
   1071c:	d301      	bcc.n	10722 <__udivsi3+0x9a>
   1071e:	020b      	lsls	r3, r1, #8
   10720:	1ac0      	subs	r0, r0, r3
   10722:	4152      	adcs	r2, r2
   10724:	d2cd      	bcs.n	106c2 <__udivsi3+0x3a>
   10726:	09c3      	lsrs	r3, r0, #7
   10728:	428b      	cmp	r3, r1
   1072a:	d301      	bcc.n	10730 <__udivsi3+0xa8>
   1072c:	01cb      	lsls	r3, r1, #7
   1072e:	1ac0      	subs	r0, r0, r3
   10730:	4152      	adcs	r2, r2
   10732:	0983      	lsrs	r3, r0, #6
   10734:	428b      	cmp	r3, r1
   10736:	d301      	bcc.n	1073c <__udivsi3+0xb4>
   10738:	018b      	lsls	r3, r1, #6
   1073a:	1ac0      	subs	r0, r0, r3
   1073c:	4152      	adcs	r2, r2
   1073e:	0943      	lsrs	r3, r0, #5
   10740:	428b      	cmp	r3, r1
   10742:	d301      	bcc.n	10748 <__udivsi3+0xc0>
   10744:	014b      	lsls	r3, r1, #5
   10746:	1ac0      	subs	r0, r0, r3
   10748:	4152      	adcs	r2, r2
   1074a:	0903      	lsrs	r3, r0, #4
   1074c:	428b      	cmp	r3, r1
   1074e:	d301      	bcc.n	10754 <__udivsi3+0xcc>
   10750:	010b      	lsls	r3, r1, #4
   10752:	1ac0      	subs	r0, r0, r3
   10754:	4152      	adcs	r2, r2
   10756:	08c3      	lsrs	r3, r0, #3
   10758:	428b      	cmp	r3, r1
   1075a:	d301      	bcc.n	10760 <__udivsi3+0xd8>
   1075c:	00cb      	lsls	r3, r1, #3
   1075e:	1ac0      	subs	r0, r0, r3
   10760:	4152      	adcs	r2, r2
   10762:	0883      	lsrs	r3, r0, #2
   10764:	428b      	cmp	r3, r1
   10766:	d301      	bcc.n	1076c <__udivsi3+0xe4>
   10768:	008b      	lsls	r3, r1, #2
   1076a:	1ac0      	subs	r0, r0, r3
   1076c:	4152      	adcs	r2, r2
   1076e:	0843      	lsrs	r3, r0, #1
   10770:	428b      	cmp	r3, r1
   10772:	d301      	bcc.n	10778 <__udivsi3+0xf0>
   10774:	004b      	lsls	r3, r1, #1
   10776:	1ac0      	subs	r0, r0, r3
   10778:	4152      	adcs	r2, r2
   1077a:	1a41      	subs	r1, r0, r1
   1077c:	d200      	bcs.n	10780 <__udivsi3+0xf8>
   1077e:	4601      	mov	r1, r0
   10780:	4152      	adcs	r2, r2
   10782:	4610      	mov	r0, r2
   10784:	4770      	bx	lr
   10786:	e7ff      	b.n	10788 <__udivsi3+0x100>
   10788:	b501      	push	{r0, lr}
   1078a:	2000      	movs	r0, #0
   1078c:	f000 f8f0 	bl	10970 <__aeabi_idiv0>
   10790:	bd02      	pop	{r1, pc}
   10792:	46c0      	nop			; (mov r8, r8)

00010794 <__aeabi_uidivmod>:
   10794:	2900      	cmp	r1, #0
   10796:	d0f7      	beq.n	10788 <__udivsi3+0x100>
   10798:	e776      	b.n	10688 <__udivsi3>
   1079a:	4770      	bx	lr

0001079c <__divsi3>:
   1079c:	4603      	mov	r3, r0
   1079e:	430b      	orrs	r3, r1
   107a0:	d47f      	bmi.n	108a2 <__divsi3+0x106>
   107a2:	2200      	movs	r2, #0
   107a4:	0843      	lsrs	r3, r0, #1
   107a6:	428b      	cmp	r3, r1
   107a8:	d374      	bcc.n	10894 <__divsi3+0xf8>
   107aa:	0903      	lsrs	r3, r0, #4
   107ac:	428b      	cmp	r3, r1
   107ae:	d35f      	bcc.n	10870 <__divsi3+0xd4>
   107b0:	0a03      	lsrs	r3, r0, #8
   107b2:	428b      	cmp	r3, r1
   107b4:	d344      	bcc.n	10840 <__divsi3+0xa4>
   107b6:	0b03      	lsrs	r3, r0, #12
   107b8:	428b      	cmp	r3, r1
   107ba:	d328      	bcc.n	1080e <__divsi3+0x72>
   107bc:	0c03      	lsrs	r3, r0, #16
   107be:	428b      	cmp	r3, r1
   107c0:	d30d      	bcc.n	107de <__divsi3+0x42>
   107c2:	22ff      	movs	r2, #255	; 0xff
   107c4:	0209      	lsls	r1, r1, #8
   107c6:	ba12      	rev	r2, r2
   107c8:	0c03      	lsrs	r3, r0, #16
   107ca:	428b      	cmp	r3, r1
   107cc:	d302      	bcc.n	107d4 <__divsi3+0x38>
   107ce:	1212      	asrs	r2, r2, #8
   107d0:	0209      	lsls	r1, r1, #8
   107d2:	d065      	beq.n	108a0 <__divsi3+0x104>
   107d4:	0b03      	lsrs	r3, r0, #12
   107d6:	428b      	cmp	r3, r1
   107d8:	d319      	bcc.n	1080e <__divsi3+0x72>
   107da:	e000      	b.n	107de <__divsi3+0x42>
   107dc:	0a09      	lsrs	r1, r1, #8
   107de:	0bc3      	lsrs	r3, r0, #15
   107e0:	428b      	cmp	r3, r1
   107e2:	d301      	bcc.n	107e8 <__divsi3+0x4c>
   107e4:	03cb      	lsls	r3, r1, #15
   107e6:	1ac0      	subs	r0, r0, r3
   107e8:	4152      	adcs	r2, r2
   107ea:	0b83      	lsrs	r3, r0, #14
   107ec:	428b      	cmp	r3, r1
   107ee:	d301      	bcc.n	107f4 <__divsi3+0x58>
   107f0:	038b      	lsls	r3, r1, #14
   107f2:	1ac0      	subs	r0, r0, r3
   107f4:	4152      	adcs	r2, r2
   107f6:	0b43      	lsrs	r3, r0, #13
   107f8:	428b      	cmp	r3, r1
   107fa:	d301      	bcc.n	10800 <__divsi3+0x64>
   107fc:	034b      	lsls	r3, r1, #13
   107fe:	1ac0      	subs	r0, r0, r3
   10800:	4152      	adcs	r2, r2
   10802:	0b03      	lsrs	r3, r0, #12
   10804:	428b      	cmp	r3, r1
   10806:	d301      	bcc.n	1080c <__divsi3+0x70>
   10808:	030b      	lsls	r3, r1, #12
   1080a:	1ac0      	subs	r0, r0, r3
   1080c:	4152      	adcs	r2, r2
   1080e:	0ac3      	lsrs	r3, r0, #11
   10810:	428b      	cmp	r3, r1
   10812:	d301      	bcc.n	10818 <__divsi3+0x7c>
   10814:	02cb      	lsls	r3, r1, #11
   10816:	1ac0      	subs	r0, r0, r3
   10818:	4152      	adcs	r2, r2
   1081a:	0a83      	lsrs	r3, r0, #10
   1081c:	428b      	cmp	r3, r1
   1081e:	d301      	bcc.n	10824 <__divsi3+0x88>
   10820:	028b      	lsls	r3, r1, #10
   10822:	1ac0      	subs	r0, r0, r3
   10824:	4152      	adcs	r2, r2
   10826:	0a43      	lsrs	r3, r0, #9
   10828:	428b      	cmp	r3, r1
   1082a:	d301      	bcc.n	10830 <__divsi3+0x94>
   1082c:	024b      	lsls	r3, r1, #9
   1082e:	1ac0      	subs	r0, r0, r3
   10830:	4152      	adcs	r2, r2
   10832:	0a03      	lsrs	r3, r0, #8
   10834:	428b      	cmp	r3, r1
   10836:	d301      	bcc.n	1083c <__divsi3+0xa0>
   10838:	020b      	lsls	r3, r1, #8
   1083a:	1ac0      	subs	r0, r0, r3
   1083c:	4152      	adcs	r2, r2
   1083e:	d2cd      	bcs.n	107dc <__divsi3+0x40>
   10840:	09c3      	lsrs	r3, r0, #7
   10842:	428b      	cmp	r3, r1
   10844:	d301      	bcc.n	1084a <__divsi3+0xae>
   10846:	01cb      	lsls	r3, r1, #7
   10848:	1ac0      	subs	r0, r0, r3
   1084a:	4152      	adcs	r2, r2
   1084c:	0983      	lsrs	r3, r0, #6
   1084e:	428b      	cmp	r3, r1
   10850:	d301      	bcc.n	10856 <__divsi3+0xba>
   10852:	018b      	lsls	r3, r1, #6
   10854:	1ac0      	subs	r0, r0, r3
   10856:	4152      	adcs	r2, r2
   10858:	0943      	lsrs	r3, r0, #5
   1085a:	428b      	cmp	r3, r1
   1085c:	d301      	bcc.n	10862 <__divsi3+0xc6>
   1085e:	014b      	lsls	r3, r1, #5
   10860:	1ac0      	subs	r0, r0, r3
   10862:	4152      	adcs	r2, r2
   10864:	0903      	lsrs	r3, r0, #4
   10866:	428b      	cmp	r3, r1
   10868:	d301      	bcc.n	1086e <__divsi3+0xd2>
   1086a:	010b      	lsls	r3, r1, #4
   1086c:	1ac0      	subs	r0, r0, r3
   1086e:	4152      	adcs	r2, r2
   10870:	08c3      	lsrs	r3, r0, #3
   10872:	428b      	cmp	r3, r1
   10874:	d301      	bcc.n	1087a <__divsi3+0xde>
   10876:	00cb      	lsls	r3, r1, #3
   10878:	1ac0      	subs	r0, r0, r3
   1087a:	4152      	adcs	r2, r2
   1087c:	0883      	lsrs	r3, r0, #2
   1087e:	428b      	cmp	r3, r1
   10880:	d301      	bcc.n	10886 <__divsi3+0xea>
   10882:	008b      	lsls	r3, r1, #2
   10884:	1ac0      	subs	r0, r0, r3
   10886:	4152      	adcs	r2, r2
   10888:	0843      	lsrs	r3, r0, #1
   1088a:	428b      	cmp	r3, r1
   1088c:	d301      	bcc.n	10892 <__divsi3+0xf6>
   1088e:	004b      	lsls	r3, r1, #1
   10890:	1ac0      	subs	r0, r0, r3
   10892:	4152      	adcs	r2, r2
   10894:	1a41      	subs	r1, r0, r1
   10896:	d200      	bcs.n	1089a <__divsi3+0xfe>
   10898:	4601      	mov	r1, r0
   1089a:	4152      	adcs	r2, r2
   1089c:	4610      	mov	r0, r2
   1089e:	4770      	bx	lr
   108a0:	e05d      	b.n	1095e <__divsi3+0x1c2>
   108a2:	0fca      	lsrs	r2, r1, #31
   108a4:	d000      	beq.n	108a8 <__divsi3+0x10c>
   108a6:	4249      	negs	r1, r1
   108a8:	1003      	asrs	r3, r0, #32
   108aa:	d300      	bcc.n	108ae <__divsi3+0x112>
   108ac:	4240      	negs	r0, r0
   108ae:	4053      	eors	r3, r2
   108b0:	2200      	movs	r2, #0
   108b2:	469c      	mov	ip, r3
   108b4:	0903      	lsrs	r3, r0, #4
   108b6:	428b      	cmp	r3, r1
   108b8:	d32d      	bcc.n	10916 <__divsi3+0x17a>
   108ba:	0a03      	lsrs	r3, r0, #8
   108bc:	428b      	cmp	r3, r1
   108be:	d312      	bcc.n	108e6 <__divsi3+0x14a>
   108c0:	22fc      	movs	r2, #252	; 0xfc
   108c2:	0189      	lsls	r1, r1, #6
   108c4:	ba12      	rev	r2, r2
   108c6:	0a03      	lsrs	r3, r0, #8
   108c8:	428b      	cmp	r3, r1
   108ca:	d30c      	bcc.n	108e6 <__divsi3+0x14a>
   108cc:	0189      	lsls	r1, r1, #6
   108ce:	1192      	asrs	r2, r2, #6
   108d0:	428b      	cmp	r3, r1
   108d2:	d308      	bcc.n	108e6 <__divsi3+0x14a>
   108d4:	0189      	lsls	r1, r1, #6
   108d6:	1192      	asrs	r2, r2, #6
   108d8:	428b      	cmp	r3, r1
   108da:	d304      	bcc.n	108e6 <__divsi3+0x14a>
   108dc:	0189      	lsls	r1, r1, #6
   108de:	d03a      	beq.n	10956 <__divsi3+0x1ba>
   108e0:	1192      	asrs	r2, r2, #6
   108e2:	e000      	b.n	108e6 <__divsi3+0x14a>
   108e4:	0989      	lsrs	r1, r1, #6
   108e6:	09c3      	lsrs	r3, r0, #7
   108e8:	428b      	cmp	r3, r1
   108ea:	d301      	bcc.n	108f0 <__divsi3+0x154>
   108ec:	01cb      	lsls	r3, r1, #7
   108ee:	1ac0      	subs	r0, r0, r3
   108f0:	4152      	adcs	r2, r2
   108f2:	0983      	lsrs	r3, r0, #6
   108f4:	428b      	cmp	r3, r1
   108f6:	d301      	bcc.n	108fc <__divsi3+0x160>
   108f8:	018b      	lsls	r3, r1, #6
   108fa:	1ac0      	subs	r0, r0, r3
   108fc:	4152      	adcs	r2, r2
   108fe:	0943      	lsrs	r3, r0, #5
   10900:	428b      	cmp	r3, r1
   10902:	d301      	bcc.n	10908 <__divsi3+0x16c>
   10904:	014b      	lsls	r3, r1, #5
   10906:	1ac0      	subs	r0, r0, r3
   10908:	4152      	adcs	r2, r2
   1090a:	0903      	lsrs	r3, r0, #4
   1090c:	428b      	cmp	r3, r1
   1090e:	d301      	bcc.n	10914 <__divsi3+0x178>
   10910:	010b      	lsls	r3, r1, #4
   10912:	1ac0      	subs	r0, r0, r3
   10914:	4152      	adcs	r2, r2
   10916:	08c3      	lsrs	r3, r0, #3
   10918:	428b      	cmp	r3, r1
   1091a:	d301      	bcc.n	10920 <__divsi3+0x184>
   1091c:	00cb      	lsls	r3, r1, #3
   1091e:	1ac0      	subs	r0, r0, r3
   10920:	4152      	adcs	r2, r2
   10922:	0883      	lsrs	r3, r0, #2
   10924:	428b      	cmp	r3, r1
   10926:	d301      	bcc.n	1092c <__divsi3+0x190>
   10928:	008b      	lsls	r3, r1, #2
   1092a:	1ac0      	subs	r0, r0, r3
   1092c:	4152      	adcs	r2, r2
   1092e:	d2d9      	bcs.n	108e4 <__divsi3+0x148>
   10930:	0843      	lsrs	r3, r0, #1
   10932:	428b      	cmp	r3, r1
   10934:	d301      	bcc.n	1093a <__divsi3+0x19e>
   10936:	004b      	lsls	r3, r1, #1
   10938:	1ac0      	subs	r0, r0, r3
   1093a:	4152      	adcs	r2, r2
   1093c:	1a41      	subs	r1, r0, r1
   1093e:	d200      	bcs.n	10942 <__divsi3+0x1a6>
   10940:	4601      	mov	r1, r0
   10942:	4663      	mov	r3, ip
   10944:	4152      	adcs	r2, r2
   10946:	105b      	asrs	r3, r3, #1
   10948:	4610      	mov	r0, r2
   1094a:	d301      	bcc.n	10950 <__divsi3+0x1b4>
   1094c:	4240      	negs	r0, r0
   1094e:	2b00      	cmp	r3, #0
   10950:	d500      	bpl.n	10954 <__divsi3+0x1b8>
   10952:	4249      	negs	r1, r1
   10954:	4770      	bx	lr
   10956:	4663      	mov	r3, ip
   10958:	105b      	asrs	r3, r3, #1
   1095a:	d300      	bcc.n	1095e <__divsi3+0x1c2>
   1095c:	4240      	negs	r0, r0
   1095e:	b501      	push	{r0, lr}
   10960:	2000      	movs	r0, #0
   10962:	f000 f805 	bl	10970 <__aeabi_idiv0>
   10966:	bd02      	pop	{r1, pc}

00010968 <__aeabi_idivmod>:
   10968:	2900      	cmp	r1, #0
   1096a:	d0f8      	beq.n	1095e <__divsi3+0x1c2>
   1096c:	e716      	b.n	1079c <__divsi3>
   1096e:	4770      	bx	lr

00010970 <__aeabi_idiv0>:
   10970:	4770      	bx	lr
   10972:	46c0      	nop			; (mov r8, r8)

00010974 <__ctzsi2>:
   10974:	4241      	negs	r1, r0
   10976:	4008      	ands	r0, r1
   10978:	211c      	movs	r1, #28
   1097a:	2301      	movs	r3, #1
   1097c:	041b      	lsls	r3, r3, #16
   1097e:	4298      	cmp	r0, r3
   10980:	d301      	bcc.n	10986 <__ctzsi2+0x12>
   10982:	0c00      	lsrs	r0, r0, #16
   10984:	3910      	subs	r1, #16
   10986:	0a1b      	lsrs	r3, r3, #8
   10988:	4298      	cmp	r0, r3
   1098a:	d301      	bcc.n	10990 <__ctzsi2+0x1c>
   1098c:	0a00      	lsrs	r0, r0, #8
   1098e:	3908      	subs	r1, #8
   10990:	091b      	lsrs	r3, r3, #4
   10992:	4298      	cmp	r0, r3
   10994:	d301      	bcc.n	1099a <__ctzsi2+0x26>
   10996:	0900      	lsrs	r0, r0, #4
   10998:	3904      	subs	r1, #4
   1099a:	a202      	add	r2, pc, #8	; (adr r2, 109a4 <__ctzsi2+0x30>)
   1099c:	5c10      	ldrb	r0, [r2, r0]
   1099e:	1a40      	subs	r0, r0, r1
   109a0:	4770      	bx	lr
   109a2:	46c0      	nop			; (mov r8, r8)
   109a4:	1d1d1c1b 	.word	0x1d1d1c1b
   109a8:	1e1e1e1e 	.word	0x1e1e1e1e
   109ac:	1f1f1f1f 	.word	0x1f1f1f1f
   109b0:	1f1f1f1f 	.word	0x1f1f1f1f

000109b4 <__libc_init_array>:
   109b4:	b570      	push	{r4, r5, r6, lr}
   109b6:	2600      	movs	r6, #0
   109b8:	4d0c      	ldr	r5, [pc, #48]	; (109ec <__libc_init_array+0x38>)
   109ba:	4c0d      	ldr	r4, [pc, #52]	; (109f0 <__libc_init_array+0x3c>)
   109bc:	1b64      	subs	r4, r4, r5
   109be:	10a4      	asrs	r4, r4, #2
   109c0:	42a6      	cmp	r6, r4
   109c2:	d109      	bne.n	109d8 <__libc_init_array+0x24>
   109c4:	2600      	movs	r6, #0
   109c6:	f001 f9f5 	bl	11db4 <_init>
   109ca:	4d0a      	ldr	r5, [pc, #40]	; (109f4 <__libc_init_array+0x40>)
   109cc:	4c0a      	ldr	r4, [pc, #40]	; (109f8 <__libc_init_array+0x44>)
   109ce:	1b64      	subs	r4, r4, r5
   109d0:	10a4      	asrs	r4, r4, #2
   109d2:	42a6      	cmp	r6, r4
   109d4:	d105      	bne.n	109e2 <__libc_init_array+0x2e>
   109d6:	bd70      	pop	{r4, r5, r6, pc}
   109d8:	00b3      	lsls	r3, r6, #2
   109da:	58eb      	ldr	r3, [r5, r3]
   109dc:	4798      	blx	r3
   109de:	3601      	adds	r6, #1
   109e0:	e7ee      	b.n	109c0 <__libc_init_array+0xc>
   109e2:	00b3      	lsls	r3, r6, #2
   109e4:	58eb      	ldr	r3, [r5, r3]
   109e6:	4798      	blx	r3
   109e8:	3601      	adds	r6, #1
   109ea:	e7f2      	b.n	109d2 <__libc_init_array+0x1e>
   109ec:	00011dc0 	.word	0x00011dc0
   109f0:	00011dc0 	.word	0x00011dc0
   109f4:	00011dc0 	.word	0x00011dc0
   109f8:	00011dc4 	.word	0x00011dc4

000109fc <memcpy>:
   109fc:	2300      	movs	r3, #0
   109fe:	b510      	push	{r4, lr}
   10a00:	429a      	cmp	r2, r3
   10a02:	d100      	bne.n	10a06 <memcpy+0xa>
   10a04:	bd10      	pop	{r4, pc}
   10a06:	5ccc      	ldrb	r4, [r1, r3]
   10a08:	54c4      	strb	r4, [r0, r3]
   10a0a:	3301      	adds	r3, #1
   10a0c:	e7f8      	b.n	10a00 <memcpy+0x4>

00010a0e <memset>:
   10a0e:	0003      	movs	r3, r0
   10a10:	1882      	adds	r2, r0, r2
   10a12:	4293      	cmp	r3, r2
   10a14:	d100      	bne.n	10a18 <memset+0xa>
   10a16:	4770      	bx	lr
   10a18:	7019      	strb	r1, [r3, #0]
   10a1a:	3301      	adds	r3, #1
   10a1c:	e7f9      	b.n	10a12 <memset+0x4>

00010a1e <setbuf>:
   10a1e:	424a      	negs	r2, r1
   10a20:	414a      	adcs	r2, r1
   10a22:	2380      	movs	r3, #128	; 0x80
   10a24:	b510      	push	{r4, lr}
   10a26:	0052      	lsls	r2, r2, #1
   10a28:	00db      	lsls	r3, r3, #3
   10a2a:	f000 f801 	bl	10a30 <setvbuf>
   10a2e:	bd10      	pop	{r4, pc}

00010a30 <setvbuf>:
   10a30:	b5f0      	push	{r4, r5, r6, r7, lr}
   10a32:	001d      	movs	r5, r3
   10a34:	4b4f      	ldr	r3, [pc, #316]	; (10b74 <setvbuf+0x144>)
   10a36:	b085      	sub	sp, #20
   10a38:	681e      	ldr	r6, [r3, #0]
   10a3a:	0004      	movs	r4, r0
   10a3c:	000f      	movs	r7, r1
   10a3e:	9200      	str	r2, [sp, #0]
   10a40:	2e00      	cmp	r6, #0
   10a42:	d005      	beq.n	10a50 <setvbuf+0x20>
   10a44:	69b3      	ldr	r3, [r6, #24]
   10a46:	2b00      	cmp	r3, #0
   10a48:	d102      	bne.n	10a50 <setvbuf+0x20>
   10a4a:	0030      	movs	r0, r6
   10a4c:	f000 f9aa 	bl	10da4 <__sinit>
   10a50:	4b49      	ldr	r3, [pc, #292]	; (10b78 <setvbuf+0x148>)
   10a52:	429c      	cmp	r4, r3
   10a54:	d150      	bne.n	10af8 <setvbuf+0xc8>
   10a56:	6874      	ldr	r4, [r6, #4]
   10a58:	9b00      	ldr	r3, [sp, #0]
   10a5a:	2b02      	cmp	r3, #2
   10a5c:	d005      	beq.n	10a6a <setvbuf+0x3a>
   10a5e:	2b01      	cmp	r3, #1
   10a60:	d900      	bls.n	10a64 <setvbuf+0x34>
   10a62:	e084      	b.n	10b6e <setvbuf+0x13e>
   10a64:	2d00      	cmp	r5, #0
   10a66:	da00      	bge.n	10a6a <setvbuf+0x3a>
   10a68:	e081      	b.n	10b6e <setvbuf+0x13e>
   10a6a:	0021      	movs	r1, r4
   10a6c:	0030      	movs	r0, r6
   10a6e:	f000 f92b 	bl	10cc8 <_fflush_r>
   10a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10a74:	2900      	cmp	r1, #0
   10a76:	d008      	beq.n	10a8a <setvbuf+0x5a>
   10a78:	0023      	movs	r3, r4
   10a7a:	3344      	adds	r3, #68	; 0x44
   10a7c:	4299      	cmp	r1, r3
   10a7e:	d002      	beq.n	10a86 <setvbuf+0x56>
   10a80:	0030      	movs	r0, r6
   10a82:	f000 fa95 	bl	10fb0 <_free_r>
   10a86:	2300      	movs	r3, #0
   10a88:	6363      	str	r3, [r4, #52]	; 0x34
   10a8a:	2300      	movs	r3, #0
   10a8c:	61a3      	str	r3, [r4, #24]
   10a8e:	6063      	str	r3, [r4, #4]
   10a90:	89a3      	ldrh	r3, [r4, #12]
   10a92:	061b      	lsls	r3, r3, #24
   10a94:	d503      	bpl.n	10a9e <setvbuf+0x6e>
   10a96:	6921      	ldr	r1, [r4, #16]
   10a98:	0030      	movs	r0, r6
   10a9a:	f000 fa89 	bl	10fb0 <_free_r>
   10a9e:	89a3      	ldrh	r3, [r4, #12]
   10aa0:	4a36      	ldr	r2, [pc, #216]	; (10b7c <setvbuf+0x14c>)
   10aa2:	4013      	ands	r3, r2
   10aa4:	81a3      	strh	r3, [r4, #12]
   10aa6:	9b00      	ldr	r3, [sp, #0]
   10aa8:	2b02      	cmp	r3, #2
   10aaa:	d05a      	beq.n	10b62 <setvbuf+0x132>
   10aac:	ab03      	add	r3, sp, #12
   10aae:	aa02      	add	r2, sp, #8
   10ab0:	0021      	movs	r1, r4
   10ab2:	0030      	movs	r0, r6
   10ab4:	f000 fa0c 	bl	10ed0 <__swhatbuf_r>
   10ab8:	89a3      	ldrh	r3, [r4, #12]
   10aba:	4318      	orrs	r0, r3
   10abc:	81a0      	strh	r0, [r4, #12]
   10abe:	2d00      	cmp	r5, #0
   10ac0:	d124      	bne.n	10b0c <setvbuf+0xdc>
   10ac2:	9d02      	ldr	r5, [sp, #8]
   10ac4:	0028      	movs	r0, r5
   10ac6:	f000 fa69 	bl	10f9c <malloc>
   10aca:	9501      	str	r5, [sp, #4]
   10acc:	1e07      	subs	r7, r0, #0
   10ace:	d142      	bne.n	10b56 <setvbuf+0x126>
   10ad0:	9b02      	ldr	r3, [sp, #8]
   10ad2:	9301      	str	r3, [sp, #4]
   10ad4:	42ab      	cmp	r3, r5
   10ad6:	d139      	bne.n	10b4c <setvbuf+0x11c>
   10ad8:	2001      	movs	r0, #1
   10ada:	4240      	negs	r0, r0
   10adc:	2302      	movs	r3, #2
   10ade:	89a2      	ldrh	r2, [r4, #12]
   10ae0:	4313      	orrs	r3, r2
   10ae2:	81a3      	strh	r3, [r4, #12]
   10ae4:	2300      	movs	r3, #0
   10ae6:	60a3      	str	r3, [r4, #8]
   10ae8:	0023      	movs	r3, r4
   10aea:	3347      	adds	r3, #71	; 0x47
   10aec:	6023      	str	r3, [r4, #0]
   10aee:	6123      	str	r3, [r4, #16]
   10af0:	2301      	movs	r3, #1
   10af2:	6163      	str	r3, [r4, #20]
   10af4:	b005      	add	sp, #20
   10af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10af8:	4b21      	ldr	r3, [pc, #132]	; (10b80 <setvbuf+0x150>)
   10afa:	429c      	cmp	r4, r3
   10afc:	d101      	bne.n	10b02 <setvbuf+0xd2>
   10afe:	68b4      	ldr	r4, [r6, #8]
   10b00:	e7aa      	b.n	10a58 <setvbuf+0x28>
   10b02:	4b20      	ldr	r3, [pc, #128]	; (10b84 <setvbuf+0x154>)
   10b04:	429c      	cmp	r4, r3
   10b06:	d1a7      	bne.n	10a58 <setvbuf+0x28>
   10b08:	68f4      	ldr	r4, [r6, #12]
   10b0a:	e7a5      	b.n	10a58 <setvbuf+0x28>
   10b0c:	2f00      	cmp	r7, #0
   10b0e:	d0d9      	beq.n	10ac4 <setvbuf+0x94>
   10b10:	69b3      	ldr	r3, [r6, #24]
   10b12:	2b00      	cmp	r3, #0
   10b14:	d102      	bne.n	10b1c <setvbuf+0xec>
   10b16:	0030      	movs	r0, r6
   10b18:	f000 f944 	bl	10da4 <__sinit>
   10b1c:	9b00      	ldr	r3, [sp, #0]
   10b1e:	2b01      	cmp	r3, #1
   10b20:	d103      	bne.n	10b2a <setvbuf+0xfa>
   10b22:	89a3      	ldrh	r3, [r4, #12]
   10b24:	9a00      	ldr	r2, [sp, #0]
   10b26:	431a      	orrs	r2, r3
   10b28:	81a2      	strh	r2, [r4, #12]
   10b2a:	2008      	movs	r0, #8
   10b2c:	89a3      	ldrh	r3, [r4, #12]
   10b2e:	6027      	str	r7, [r4, #0]
   10b30:	6127      	str	r7, [r4, #16]
   10b32:	6165      	str	r5, [r4, #20]
   10b34:	4018      	ands	r0, r3
   10b36:	d018      	beq.n	10b6a <setvbuf+0x13a>
   10b38:	2001      	movs	r0, #1
   10b3a:	4018      	ands	r0, r3
   10b3c:	2300      	movs	r3, #0
   10b3e:	4298      	cmp	r0, r3
   10b40:	d011      	beq.n	10b66 <setvbuf+0x136>
   10b42:	426d      	negs	r5, r5
   10b44:	60a3      	str	r3, [r4, #8]
   10b46:	61a5      	str	r5, [r4, #24]
   10b48:	0018      	movs	r0, r3
   10b4a:	e7d3      	b.n	10af4 <setvbuf+0xc4>
   10b4c:	9801      	ldr	r0, [sp, #4]
   10b4e:	f000 fa25 	bl	10f9c <malloc>
   10b52:	1e07      	subs	r7, r0, #0
   10b54:	d0c0      	beq.n	10ad8 <setvbuf+0xa8>
   10b56:	2380      	movs	r3, #128	; 0x80
   10b58:	89a2      	ldrh	r2, [r4, #12]
   10b5a:	9d01      	ldr	r5, [sp, #4]
   10b5c:	4313      	orrs	r3, r2
   10b5e:	81a3      	strh	r3, [r4, #12]
   10b60:	e7d6      	b.n	10b10 <setvbuf+0xe0>
   10b62:	2000      	movs	r0, #0
   10b64:	e7ba      	b.n	10adc <setvbuf+0xac>
   10b66:	60a5      	str	r5, [r4, #8]
   10b68:	e7c4      	b.n	10af4 <setvbuf+0xc4>
   10b6a:	60a0      	str	r0, [r4, #8]
   10b6c:	e7c2      	b.n	10af4 <setvbuf+0xc4>
   10b6e:	2001      	movs	r0, #1
   10b70:	4240      	negs	r0, r0
   10b72:	e7bf      	b.n	10af4 <setvbuf+0xc4>
   10b74:	20000120 	.word	0x20000120
   10b78:	00011d40 	.word	0x00011d40
   10b7c:	fffff35c 	.word	0xfffff35c
   10b80:	00011d60 	.word	0x00011d60
   10b84:	00011d20 	.word	0x00011d20

00010b88 <viprintf>:
   10b88:	4b09      	ldr	r3, [pc, #36]	; (10bb0 <viprintf+0x28>)
   10b8a:	b570      	push	{r4, r5, r6, lr}
   10b8c:	681c      	ldr	r4, [r3, #0]
   10b8e:	0005      	movs	r5, r0
   10b90:	000e      	movs	r6, r1
   10b92:	2c00      	cmp	r4, #0
   10b94:	d005      	beq.n	10ba2 <viprintf+0x1a>
   10b96:	69a3      	ldr	r3, [r4, #24]
   10b98:	2b00      	cmp	r3, #0
   10b9a:	d102      	bne.n	10ba2 <viprintf+0x1a>
   10b9c:	0020      	movs	r0, r4
   10b9e:	f000 f901 	bl	10da4 <__sinit>
   10ba2:	0033      	movs	r3, r6
   10ba4:	002a      	movs	r2, r5
   10ba6:	68a1      	ldr	r1, [r4, #8]
   10ba8:	0020      	movs	r0, r4
   10baa:	f000 fad1 	bl	11150 <_vfiprintf_r>
   10bae:	bd70      	pop	{r4, r5, r6, pc}
   10bb0:	20000120 	.word	0x20000120

00010bb4 <__sflush_r>:
   10bb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10bb6:	898a      	ldrh	r2, [r1, #12]
   10bb8:	0005      	movs	r5, r0
   10bba:	000c      	movs	r4, r1
   10bbc:	0713      	lsls	r3, r2, #28
   10bbe:	d460      	bmi.n	10c82 <__sflush_r+0xce>
   10bc0:	684b      	ldr	r3, [r1, #4]
   10bc2:	2b00      	cmp	r3, #0
   10bc4:	dc04      	bgt.n	10bd0 <__sflush_r+0x1c>
   10bc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   10bc8:	2b00      	cmp	r3, #0
   10bca:	dc01      	bgt.n	10bd0 <__sflush_r+0x1c>
   10bcc:	2000      	movs	r0, #0
   10bce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10bd0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10bd2:	2f00      	cmp	r7, #0
   10bd4:	d0fa      	beq.n	10bcc <__sflush_r+0x18>
   10bd6:	2300      	movs	r3, #0
   10bd8:	682e      	ldr	r6, [r5, #0]
   10bda:	602b      	str	r3, [r5, #0]
   10bdc:	2380      	movs	r3, #128	; 0x80
   10bde:	015b      	lsls	r3, r3, #5
   10be0:	401a      	ands	r2, r3
   10be2:	d034      	beq.n	10c4e <__sflush_r+0x9a>
   10be4:	6d60      	ldr	r0, [r4, #84]	; 0x54
   10be6:	89a3      	ldrh	r3, [r4, #12]
   10be8:	075b      	lsls	r3, r3, #29
   10bea:	d506      	bpl.n	10bfa <__sflush_r+0x46>
   10bec:	6863      	ldr	r3, [r4, #4]
   10bee:	1ac0      	subs	r0, r0, r3
   10bf0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   10bf2:	2b00      	cmp	r3, #0
   10bf4:	d001      	beq.n	10bfa <__sflush_r+0x46>
   10bf6:	6c23      	ldr	r3, [r4, #64]	; 0x40
   10bf8:	1ac0      	subs	r0, r0, r3
   10bfa:	0002      	movs	r2, r0
   10bfc:	6a21      	ldr	r1, [r4, #32]
   10bfe:	2300      	movs	r3, #0
   10c00:	0028      	movs	r0, r5
   10c02:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
   10c04:	47b8      	blx	r7
   10c06:	89a1      	ldrh	r1, [r4, #12]
   10c08:	1c43      	adds	r3, r0, #1
   10c0a:	d106      	bne.n	10c1a <__sflush_r+0x66>
   10c0c:	682b      	ldr	r3, [r5, #0]
   10c0e:	2b1d      	cmp	r3, #29
   10c10:	d831      	bhi.n	10c76 <__sflush_r+0xc2>
   10c12:	4a2c      	ldr	r2, [pc, #176]	; (10cc4 <__sflush_r+0x110>)
   10c14:	40da      	lsrs	r2, r3
   10c16:	07d3      	lsls	r3, r2, #31
   10c18:	d52d      	bpl.n	10c76 <__sflush_r+0xc2>
   10c1a:	2300      	movs	r3, #0
   10c1c:	6063      	str	r3, [r4, #4]
   10c1e:	6923      	ldr	r3, [r4, #16]
   10c20:	6023      	str	r3, [r4, #0]
   10c22:	04cb      	lsls	r3, r1, #19
   10c24:	d505      	bpl.n	10c32 <__sflush_r+0x7e>
   10c26:	1c43      	adds	r3, r0, #1
   10c28:	d102      	bne.n	10c30 <__sflush_r+0x7c>
   10c2a:	682b      	ldr	r3, [r5, #0]
   10c2c:	2b00      	cmp	r3, #0
   10c2e:	d100      	bne.n	10c32 <__sflush_r+0x7e>
   10c30:	6560      	str	r0, [r4, #84]	; 0x54
   10c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
   10c34:	602e      	str	r6, [r5, #0]
   10c36:	2900      	cmp	r1, #0
   10c38:	d0c8      	beq.n	10bcc <__sflush_r+0x18>
   10c3a:	0023      	movs	r3, r4
   10c3c:	3344      	adds	r3, #68	; 0x44
   10c3e:	4299      	cmp	r1, r3
   10c40:	d002      	beq.n	10c48 <__sflush_r+0x94>
   10c42:	0028      	movs	r0, r5
   10c44:	f000 f9b4 	bl	10fb0 <_free_r>
   10c48:	2000      	movs	r0, #0
   10c4a:	6360      	str	r0, [r4, #52]	; 0x34
   10c4c:	e7bf      	b.n	10bce <__sflush_r+0x1a>
   10c4e:	2301      	movs	r3, #1
   10c50:	6a21      	ldr	r1, [r4, #32]
   10c52:	0028      	movs	r0, r5
   10c54:	47b8      	blx	r7
   10c56:	1c43      	adds	r3, r0, #1
   10c58:	d1c5      	bne.n	10be6 <__sflush_r+0x32>
   10c5a:	682b      	ldr	r3, [r5, #0]
   10c5c:	2b00      	cmp	r3, #0
   10c5e:	d0c2      	beq.n	10be6 <__sflush_r+0x32>
   10c60:	2b1d      	cmp	r3, #29
   10c62:	d001      	beq.n	10c68 <__sflush_r+0xb4>
   10c64:	2b16      	cmp	r3, #22
   10c66:	d101      	bne.n	10c6c <__sflush_r+0xb8>
   10c68:	602e      	str	r6, [r5, #0]
   10c6a:	e7af      	b.n	10bcc <__sflush_r+0x18>
   10c6c:	2340      	movs	r3, #64	; 0x40
   10c6e:	89a2      	ldrh	r2, [r4, #12]
   10c70:	4313      	orrs	r3, r2
   10c72:	81a3      	strh	r3, [r4, #12]
   10c74:	e7ab      	b.n	10bce <__sflush_r+0x1a>
   10c76:	2340      	movs	r3, #64	; 0x40
   10c78:	430b      	orrs	r3, r1
   10c7a:	2001      	movs	r0, #1
   10c7c:	81a3      	strh	r3, [r4, #12]
   10c7e:	4240      	negs	r0, r0
   10c80:	e7a5      	b.n	10bce <__sflush_r+0x1a>
   10c82:	690f      	ldr	r7, [r1, #16]
   10c84:	2f00      	cmp	r7, #0
   10c86:	d0a1      	beq.n	10bcc <__sflush_r+0x18>
   10c88:	680b      	ldr	r3, [r1, #0]
   10c8a:	600f      	str	r7, [r1, #0]
   10c8c:	1bdb      	subs	r3, r3, r7
   10c8e:	9301      	str	r3, [sp, #4]
   10c90:	2300      	movs	r3, #0
   10c92:	0792      	lsls	r2, r2, #30
   10c94:	d100      	bne.n	10c98 <__sflush_r+0xe4>
   10c96:	694b      	ldr	r3, [r1, #20]
   10c98:	60a3      	str	r3, [r4, #8]
   10c9a:	9b01      	ldr	r3, [sp, #4]
   10c9c:	2b00      	cmp	r3, #0
   10c9e:	dc00      	bgt.n	10ca2 <__sflush_r+0xee>
   10ca0:	e794      	b.n	10bcc <__sflush_r+0x18>
   10ca2:	9b01      	ldr	r3, [sp, #4]
   10ca4:	003a      	movs	r2, r7
   10ca6:	6a21      	ldr	r1, [r4, #32]
   10ca8:	0028      	movs	r0, r5
   10caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   10cac:	47b0      	blx	r6
   10cae:	2800      	cmp	r0, #0
   10cb0:	dc03      	bgt.n	10cba <__sflush_r+0x106>
   10cb2:	2340      	movs	r3, #64	; 0x40
   10cb4:	89a2      	ldrh	r2, [r4, #12]
   10cb6:	4313      	orrs	r3, r2
   10cb8:	e7df      	b.n	10c7a <__sflush_r+0xc6>
   10cba:	9b01      	ldr	r3, [sp, #4]
   10cbc:	183f      	adds	r7, r7, r0
   10cbe:	1a1b      	subs	r3, r3, r0
   10cc0:	9301      	str	r3, [sp, #4]
   10cc2:	e7ea      	b.n	10c9a <__sflush_r+0xe6>
   10cc4:	20400001 	.word	0x20400001

00010cc8 <_fflush_r>:
   10cc8:	690b      	ldr	r3, [r1, #16]
   10cca:	b570      	push	{r4, r5, r6, lr}
   10ccc:	0005      	movs	r5, r0
   10cce:	000c      	movs	r4, r1
   10cd0:	2b00      	cmp	r3, #0
   10cd2:	d101      	bne.n	10cd8 <_fflush_r+0x10>
   10cd4:	2000      	movs	r0, #0
   10cd6:	bd70      	pop	{r4, r5, r6, pc}
   10cd8:	2800      	cmp	r0, #0
   10cda:	d004      	beq.n	10ce6 <_fflush_r+0x1e>
   10cdc:	6983      	ldr	r3, [r0, #24]
   10cde:	2b00      	cmp	r3, #0
   10ce0:	d101      	bne.n	10ce6 <_fflush_r+0x1e>
   10ce2:	f000 f85f 	bl	10da4 <__sinit>
   10ce6:	4b0b      	ldr	r3, [pc, #44]	; (10d14 <_fflush_r+0x4c>)
   10ce8:	429c      	cmp	r4, r3
   10cea:	d109      	bne.n	10d00 <_fflush_r+0x38>
   10cec:	686c      	ldr	r4, [r5, #4]
   10cee:	220c      	movs	r2, #12
   10cf0:	5ea3      	ldrsh	r3, [r4, r2]
   10cf2:	2b00      	cmp	r3, #0
   10cf4:	d0ee      	beq.n	10cd4 <_fflush_r+0xc>
   10cf6:	0021      	movs	r1, r4
   10cf8:	0028      	movs	r0, r5
   10cfa:	f7ff ff5b 	bl	10bb4 <__sflush_r>
   10cfe:	e7ea      	b.n	10cd6 <_fflush_r+0xe>
   10d00:	4b05      	ldr	r3, [pc, #20]	; (10d18 <_fflush_r+0x50>)
   10d02:	429c      	cmp	r4, r3
   10d04:	d101      	bne.n	10d0a <_fflush_r+0x42>
   10d06:	68ac      	ldr	r4, [r5, #8]
   10d08:	e7f1      	b.n	10cee <_fflush_r+0x26>
   10d0a:	4b04      	ldr	r3, [pc, #16]	; (10d1c <_fflush_r+0x54>)
   10d0c:	429c      	cmp	r4, r3
   10d0e:	d1ee      	bne.n	10cee <_fflush_r+0x26>
   10d10:	68ec      	ldr	r4, [r5, #12]
   10d12:	e7ec      	b.n	10cee <_fflush_r+0x26>
   10d14:	00011d40 	.word	0x00011d40
   10d18:	00011d60 	.word	0x00011d60
   10d1c:	00011d20 	.word	0x00011d20

00010d20 <_cleanup_r>:
   10d20:	b510      	push	{r4, lr}
   10d22:	4902      	ldr	r1, [pc, #8]	; (10d2c <_cleanup_r+0xc>)
   10d24:	f000 f8b2 	bl	10e8c <_fwalk_reent>
   10d28:	bd10      	pop	{r4, pc}
   10d2a:	46c0      	nop			; (mov r8, r8)
   10d2c:	00010cc9 	.word	0x00010cc9

00010d30 <std.isra.0>:
   10d30:	2300      	movs	r3, #0
   10d32:	b510      	push	{r4, lr}
   10d34:	0004      	movs	r4, r0
   10d36:	6003      	str	r3, [r0, #0]
   10d38:	6043      	str	r3, [r0, #4]
   10d3a:	6083      	str	r3, [r0, #8]
   10d3c:	8181      	strh	r1, [r0, #12]
   10d3e:	6643      	str	r3, [r0, #100]	; 0x64
   10d40:	81c2      	strh	r2, [r0, #14]
   10d42:	6103      	str	r3, [r0, #16]
   10d44:	6143      	str	r3, [r0, #20]
   10d46:	6183      	str	r3, [r0, #24]
   10d48:	0019      	movs	r1, r3
   10d4a:	2208      	movs	r2, #8
   10d4c:	305c      	adds	r0, #92	; 0x5c
   10d4e:	f7ff fe5e 	bl	10a0e <memset>
   10d52:	4b05      	ldr	r3, [pc, #20]	; (10d68 <std.isra.0+0x38>)
   10d54:	6224      	str	r4, [r4, #32]
   10d56:	6263      	str	r3, [r4, #36]	; 0x24
   10d58:	4b04      	ldr	r3, [pc, #16]	; (10d6c <std.isra.0+0x3c>)
   10d5a:	62a3      	str	r3, [r4, #40]	; 0x28
   10d5c:	4b04      	ldr	r3, [pc, #16]	; (10d70 <std.isra.0+0x40>)
   10d5e:	62e3      	str	r3, [r4, #44]	; 0x2c
   10d60:	4b04      	ldr	r3, [pc, #16]	; (10d74 <std.isra.0+0x44>)
   10d62:	6323      	str	r3, [r4, #48]	; 0x30
   10d64:	bd10      	pop	{r4, pc}
   10d66:	46c0      	nop			; (mov r8, r8)
   10d68:	000116bd 	.word	0x000116bd
   10d6c:	000116e5 	.word	0x000116e5
   10d70:	0001171d 	.word	0x0001171d
   10d74:	00011749 	.word	0x00011749

00010d78 <__sfmoreglue>:
   10d78:	b570      	push	{r4, r5, r6, lr}
   10d7a:	2568      	movs	r5, #104	; 0x68
   10d7c:	1e4a      	subs	r2, r1, #1
   10d7e:	4355      	muls	r5, r2
   10d80:	000e      	movs	r6, r1
   10d82:	0029      	movs	r1, r5
   10d84:	3174      	adds	r1, #116	; 0x74
   10d86:	f000 f95d 	bl	11044 <_malloc_r>
   10d8a:	1e04      	subs	r4, r0, #0
   10d8c:	d008      	beq.n	10da0 <__sfmoreglue+0x28>
   10d8e:	2100      	movs	r1, #0
   10d90:	002a      	movs	r2, r5
   10d92:	6001      	str	r1, [r0, #0]
   10d94:	6046      	str	r6, [r0, #4]
   10d96:	300c      	adds	r0, #12
   10d98:	60a0      	str	r0, [r4, #8]
   10d9a:	3268      	adds	r2, #104	; 0x68
   10d9c:	f7ff fe37 	bl	10a0e <memset>
   10da0:	0020      	movs	r0, r4
   10da2:	bd70      	pop	{r4, r5, r6, pc}

00010da4 <__sinit>:
   10da4:	6983      	ldr	r3, [r0, #24]
   10da6:	b513      	push	{r0, r1, r4, lr}
   10da8:	0004      	movs	r4, r0
   10daa:	2b00      	cmp	r3, #0
   10dac:	d128      	bne.n	10e00 <__sinit+0x5c>
   10dae:	6483      	str	r3, [r0, #72]	; 0x48
   10db0:	64c3      	str	r3, [r0, #76]	; 0x4c
   10db2:	6503      	str	r3, [r0, #80]	; 0x50
   10db4:	4b13      	ldr	r3, [pc, #76]	; (10e04 <__sinit+0x60>)
   10db6:	4a14      	ldr	r2, [pc, #80]	; (10e08 <__sinit+0x64>)
   10db8:	681b      	ldr	r3, [r3, #0]
   10dba:	6282      	str	r2, [r0, #40]	; 0x28
   10dbc:	9301      	str	r3, [sp, #4]
   10dbe:	4298      	cmp	r0, r3
   10dc0:	d101      	bne.n	10dc6 <__sinit+0x22>
   10dc2:	2301      	movs	r3, #1
   10dc4:	6183      	str	r3, [r0, #24]
   10dc6:	0020      	movs	r0, r4
   10dc8:	f000 f820 	bl	10e0c <__sfp>
   10dcc:	6060      	str	r0, [r4, #4]
   10dce:	0020      	movs	r0, r4
   10dd0:	f000 f81c 	bl	10e0c <__sfp>
   10dd4:	60a0      	str	r0, [r4, #8]
   10dd6:	0020      	movs	r0, r4
   10dd8:	f000 f818 	bl	10e0c <__sfp>
   10ddc:	2200      	movs	r2, #0
   10dde:	60e0      	str	r0, [r4, #12]
   10de0:	2104      	movs	r1, #4
   10de2:	6860      	ldr	r0, [r4, #4]
   10de4:	f7ff ffa4 	bl	10d30 <std.isra.0>
   10de8:	2201      	movs	r2, #1
   10dea:	2109      	movs	r1, #9
   10dec:	68a0      	ldr	r0, [r4, #8]
   10dee:	f7ff ff9f 	bl	10d30 <std.isra.0>
   10df2:	2202      	movs	r2, #2
   10df4:	2112      	movs	r1, #18
   10df6:	68e0      	ldr	r0, [r4, #12]
   10df8:	f7ff ff9a 	bl	10d30 <std.isra.0>
   10dfc:	2301      	movs	r3, #1
   10dfe:	61a3      	str	r3, [r4, #24]
   10e00:	bd13      	pop	{r0, r1, r4, pc}
   10e02:	46c0      	nop			; (mov r8, r8)
   10e04:	00011d1c 	.word	0x00011d1c
   10e08:	00010d21 	.word	0x00010d21

00010e0c <__sfp>:
   10e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e0e:	4b1e      	ldr	r3, [pc, #120]	; (10e88 <__sfp+0x7c>)
   10e10:	0007      	movs	r7, r0
   10e12:	681e      	ldr	r6, [r3, #0]
   10e14:	69b3      	ldr	r3, [r6, #24]
   10e16:	2b00      	cmp	r3, #0
   10e18:	d102      	bne.n	10e20 <__sfp+0x14>
   10e1a:	0030      	movs	r0, r6
   10e1c:	f7ff ffc2 	bl	10da4 <__sinit>
   10e20:	3648      	adds	r6, #72	; 0x48
   10e22:	68b4      	ldr	r4, [r6, #8]
   10e24:	6873      	ldr	r3, [r6, #4]
   10e26:	3b01      	subs	r3, #1
   10e28:	d504      	bpl.n	10e34 <__sfp+0x28>
   10e2a:	6833      	ldr	r3, [r6, #0]
   10e2c:	2b00      	cmp	r3, #0
   10e2e:	d007      	beq.n	10e40 <__sfp+0x34>
   10e30:	6836      	ldr	r6, [r6, #0]
   10e32:	e7f6      	b.n	10e22 <__sfp+0x16>
   10e34:	220c      	movs	r2, #12
   10e36:	5ea5      	ldrsh	r5, [r4, r2]
   10e38:	2d00      	cmp	r5, #0
   10e3a:	d00d      	beq.n	10e58 <__sfp+0x4c>
   10e3c:	3468      	adds	r4, #104	; 0x68
   10e3e:	e7f2      	b.n	10e26 <__sfp+0x1a>
   10e40:	2104      	movs	r1, #4
   10e42:	0038      	movs	r0, r7
   10e44:	f7ff ff98 	bl	10d78 <__sfmoreglue>
   10e48:	6030      	str	r0, [r6, #0]
   10e4a:	2800      	cmp	r0, #0
   10e4c:	d1f0      	bne.n	10e30 <__sfp+0x24>
   10e4e:	230c      	movs	r3, #12
   10e50:	0004      	movs	r4, r0
   10e52:	603b      	str	r3, [r7, #0]
   10e54:	0020      	movs	r0, r4
   10e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10e58:	2301      	movs	r3, #1
   10e5a:	0020      	movs	r0, r4
   10e5c:	425b      	negs	r3, r3
   10e5e:	81e3      	strh	r3, [r4, #14]
   10e60:	3302      	adds	r3, #2
   10e62:	81a3      	strh	r3, [r4, #12]
   10e64:	6665      	str	r5, [r4, #100]	; 0x64
   10e66:	6025      	str	r5, [r4, #0]
   10e68:	60a5      	str	r5, [r4, #8]
   10e6a:	6065      	str	r5, [r4, #4]
   10e6c:	6125      	str	r5, [r4, #16]
   10e6e:	6165      	str	r5, [r4, #20]
   10e70:	61a5      	str	r5, [r4, #24]
   10e72:	2208      	movs	r2, #8
   10e74:	0029      	movs	r1, r5
   10e76:	305c      	adds	r0, #92	; 0x5c
   10e78:	f7ff fdc9 	bl	10a0e <memset>
   10e7c:	6365      	str	r5, [r4, #52]	; 0x34
   10e7e:	63a5      	str	r5, [r4, #56]	; 0x38
   10e80:	64a5      	str	r5, [r4, #72]	; 0x48
   10e82:	64e5      	str	r5, [r4, #76]	; 0x4c
   10e84:	e7e6      	b.n	10e54 <__sfp+0x48>
   10e86:	46c0      	nop			; (mov r8, r8)
   10e88:	00011d1c 	.word	0x00011d1c

00010e8c <_fwalk_reent>:
   10e8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10e8e:	0004      	movs	r4, r0
   10e90:	0007      	movs	r7, r0
   10e92:	2600      	movs	r6, #0
   10e94:	9101      	str	r1, [sp, #4]
   10e96:	3448      	adds	r4, #72	; 0x48
   10e98:	2c00      	cmp	r4, #0
   10e9a:	d101      	bne.n	10ea0 <_fwalk_reent+0x14>
   10e9c:	0030      	movs	r0, r6
   10e9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10ea0:	6863      	ldr	r3, [r4, #4]
   10ea2:	68a5      	ldr	r5, [r4, #8]
   10ea4:	9300      	str	r3, [sp, #0]
   10ea6:	9b00      	ldr	r3, [sp, #0]
   10ea8:	3b01      	subs	r3, #1
   10eaa:	9300      	str	r3, [sp, #0]
   10eac:	d501      	bpl.n	10eb2 <_fwalk_reent+0x26>
   10eae:	6824      	ldr	r4, [r4, #0]
   10eb0:	e7f2      	b.n	10e98 <_fwalk_reent+0xc>
   10eb2:	89ab      	ldrh	r3, [r5, #12]
   10eb4:	2b01      	cmp	r3, #1
   10eb6:	d908      	bls.n	10eca <_fwalk_reent+0x3e>
   10eb8:	220e      	movs	r2, #14
   10eba:	5eab      	ldrsh	r3, [r5, r2]
   10ebc:	3301      	adds	r3, #1
   10ebe:	d004      	beq.n	10eca <_fwalk_reent+0x3e>
   10ec0:	0029      	movs	r1, r5
   10ec2:	0038      	movs	r0, r7
   10ec4:	9b01      	ldr	r3, [sp, #4]
   10ec6:	4798      	blx	r3
   10ec8:	4306      	orrs	r6, r0
   10eca:	3568      	adds	r5, #104	; 0x68
   10ecc:	e7eb      	b.n	10ea6 <_fwalk_reent+0x1a>
	...

00010ed0 <__swhatbuf_r>:
   10ed0:	b570      	push	{r4, r5, r6, lr}
   10ed2:	000e      	movs	r6, r1
   10ed4:	001d      	movs	r5, r3
   10ed6:	230e      	movs	r3, #14
   10ed8:	5ec9      	ldrsh	r1, [r1, r3]
   10eda:	b090      	sub	sp, #64	; 0x40
   10edc:	0014      	movs	r4, r2
   10ede:	2900      	cmp	r1, #0
   10ee0:	da07      	bge.n	10ef2 <__swhatbuf_r+0x22>
   10ee2:	2300      	movs	r3, #0
   10ee4:	602b      	str	r3, [r5, #0]
   10ee6:	89b3      	ldrh	r3, [r6, #12]
   10ee8:	061b      	lsls	r3, r3, #24
   10eea:	d411      	bmi.n	10f10 <__swhatbuf_r+0x40>
   10eec:	2380      	movs	r3, #128	; 0x80
   10eee:	00db      	lsls	r3, r3, #3
   10ef0:	e00f      	b.n	10f12 <__swhatbuf_r+0x42>
   10ef2:	aa01      	add	r2, sp, #4
   10ef4:	f000 fd20 	bl	11938 <_fstat_r>
   10ef8:	2800      	cmp	r0, #0
   10efa:	dbf2      	blt.n	10ee2 <__swhatbuf_r+0x12>
   10efc:	22f0      	movs	r2, #240	; 0xf0
   10efe:	9b02      	ldr	r3, [sp, #8]
   10f00:	0212      	lsls	r2, r2, #8
   10f02:	4013      	ands	r3, r2
   10f04:	4a05      	ldr	r2, [pc, #20]	; (10f1c <__swhatbuf_r+0x4c>)
   10f06:	189b      	adds	r3, r3, r2
   10f08:	425a      	negs	r2, r3
   10f0a:	4153      	adcs	r3, r2
   10f0c:	602b      	str	r3, [r5, #0]
   10f0e:	e7ed      	b.n	10eec <__swhatbuf_r+0x1c>
   10f10:	2340      	movs	r3, #64	; 0x40
   10f12:	2000      	movs	r0, #0
   10f14:	6023      	str	r3, [r4, #0]
   10f16:	b010      	add	sp, #64	; 0x40
   10f18:	bd70      	pop	{r4, r5, r6, pc}
   10f1a:	46c0      	nop			; (mov r8, r8)
   10f1c:	ffffe000 	.word	0xffffe000

00010f20 <__smakebuf_r>:
   10f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10f22:	2602      	movs	r6, #2
   10f24:	898b      	ldrh	r3, [r1, #12]
   10f26:	0005      	movs	r5, r0
   10f28:	000c      	movs	r4, r1
   10f2a:	4233      	tst	r3, r6
   10f2c:	d006      	beq.n	10f3c <__smakebuf_r+0x1c>
   10f2e:	0023      	movs	r3, r4
   10f30:	3347      	adds	r3, #71	; 0x47
   10f32:	6023      	str	r3, [r4, #0]
   10f34:	6123      	str	r3, [r4, #16]
   10f36:	2301      	movs	r3, #1
   10f38:	6163      	str	r3, [r4, #20]
   10f3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   10f3c:	ab01      	add	r3, sp, #4
   10f3e:	466a      	mov	r2, sp
   10f40:	f7ff ffc6 	bl	10ed0 <__swhatbuf_r>
   10f44:	9900      	ldr	r1, [sp, #0]
   10f46:	0007      	movs	r7, r0
   10f48:	0028      	movs	r0, r5
   10f4a:	f000 f87b 	bl	11044 <_malloc_r>
   10f4e:	2800      	cmp	r0, #0
   10f50:	d106      	bne.n	10f60 <__smakebuf_r+0x40>
   10f52:	220c      	movs	r2, #12
   10f54:	5ea3      	ldrsh	r3, [r4, r2]
   10f56:	059a      	lsls	r2, r3, #22
   10f58:	d4ef      	bmi.n	10f3a <__smakebuf_r+0x1a>
   10f5a:	431e      	orrs	r6, r3
   10f5c:	81a6      	strh	r6, [r4, #12]
   10f5e:	e7e6      	b.n	10f2e <__smakebuf_r+0xe>
   10f60:	4b0d      	ldr	r3, [pc, #52]	; (10f98 <__smakebuf_r+0x78>)
   10f62:	62ab      	str	r3, [r5, #40]	; 0x28
   10f64:	2380      	movs	r3, #128	; 0x80
   10f66:	89a2      	ldrh	r2, [r4, #12]
   10f68:	6020      	str	r0, [r4, #0]
   10f6a:	4313      	orrs	r3, r2
   10f6c:	81a3      	strh	r3, [r4, #12]
   10f6e:	9b00      	ldr	r3, [sp, #0]
   10f70:	6120      	str	r0, [r4, #16]
   10f72:	6163      	str	r3, [r4, #20]
   10f74:	9b01      	ldr	r3, [sp, #4]
   10f76:	2b00      	cmp	r3, #0
   10f78:	d00a      	beq.n	10f90 <__smakebuf_r+0x70>
   10f7a:	230e      	movs	r3, #14
   10f7c:	5ee1      	ldrsh	r1, [r4, r3]
   10f7e:	0028      	movs	r0, r5
   10f80:	f000 fcec 	bl	1195c <_isatty_r>
   10f84:	2800      	cmp	r0, #0
   10f86:	d003      	beq.n	10f90 <__smakebuf_r+0x70>
   10f88:	2301      	movs	r3, #1
   10f8a:	89a2      	ldrh	r2, [r4, #12]
   10f8c:	4313      	orrs	r3, r2
   10f8e:	81a3      	strh	r3, [r4, #12]
   10f90:	89a0      	ldrh	r0, [r4, #12]
   10f92:	4338      	orrs	r0, r7
   10f94:	81a0      	strh	r0, [r4, #12]
   10f96:	e7d0      	b.n	10f3a <__smakebuf_r+0x1a>
   10f98:	00010d21 	.word	0x00010d21

00010f9c <malloc>:
   10f9c:	b510      	push	{r4, lr}
   10f9e:	4b03      	ldr	r3, [pc, #12]	; (10fac <malloc+0x10>)
   10fa0:	0001      	movs	r1, r0
   10fa2:	6818      	ldr	r0, [r3, #0]
   10fa4:	f000 f84e 	bl	11044 <_malloc_r>
   10fa8:	bd10      	pop	{r4, pc}
   10faa:	46c0      	nop			; (mov r8, r8)
   10fac:	20000120 	.word	0x20000120

00010fb0 <_free_r>:
   10fb0:	b570      	push	{r4, r5, r6, lr}
   10fb2:	0005      	movs	r5, r0
   10fb4:	2900      	cmp	r1, #0
   10fb6:	d010      	beq.n	10fda <_free_r+0x2a>
   10fb8:	1f0c      	subs	r4, r1, #4
   10fba:	6823      	ldr	r3, [r4, #0]
   10fbc:	2b00      	cmp	r3, #0
   10fbe:	da00      	bge.n	10fc2 <_free_r+0x12>
   10fc0:	18e4      	adds	r4, r4, r3
   10fc2:	0028      	movs	r0, r5
   10fc4:	f000 fcfb 	bl	119be <__malloc_lock>
   10fc8:	4a1d      	ldr	r2, [pc, #116]	; (11040 <_free_r+0x90>)
   10fca:	6813      	ldr	r3, [r2, #0]
   10fcc:	2b00      	cmp	r3, #0
   10fce:	d105      	bne.n	10fdc <_free_r+0x2c>
   10fd0:	6063      	str	r3, [r4, #4]
   10fd2:	6014      	str	r4, [r2, #0]
   10fd4:	0028      	movs	r0, r5
   10fd6:	f000 fcf3 	bl	119c0 <__malloc_unlock>
   10fda:	bd70      	pop	{r4, r5, r6, pc}
   10fdc:	42a3      	cmp	r3, r4
   10fde:	d909      	bls.n	10ff4 <_free_r+0x44>
   10fe0:	6821      	ldr	r1, [r4, #0]
   10fe2:	1860      	adds	r0, r4, r1
   10fe4:	4283      	cmp	r3, r0
   10fe6:	d1f3      	bne.n	10fd0 <_free_r+0x20>
   10fe8:	6818      	ldr	r0, [r3, #0]
   10fea:	685b      	ldr	r3, [r3, #4]
   10fec:	1841      	adds	r1, r0, r1
   10fee:	6021      	str	r1, [r4, #0]
   10ff0:	e7ee      	b.n	10fd0 <_free_r+0x20>
   10ff2:	0013      	movs	r3, r2
   10ff4:	685a      	ldr	r2, [r3, #4]
   10ff6:	2a00      	cmp	r2, #0
   10ff8:	d001      	beq.n	10ffe <_free_r+0x4e>
   10ffa:	42a2      	cmp	r2, r4
   10ffc:	d9f9      	bls.n	10ff2 <_free_r+0x42>
   10ffe:	6819      	ldr	r1, [r3, #0]
   11000:	1858      	adds	r0, r3, r1
   11002:	42a0      	cmp	r0, r4
   11004:	d10b      	bne.n	1101e <_free_r+0x6e>
   11006:	6820      	ldr	r0, [r4, #0]
   11008:	1809      	adds	r1, r1, r0
   1100a:	1858      	adds	r0, r3, r1
   1100c:	6019      	str	r1, [r3, #0]
   1100e:	4282      	cmp	r2, r0
   11010:	d1e0      	bne.n	10fd4 <_free_r+0x24>
   11012:	6810      	ldr	r0, [r2, #0]
   11014:	6852      	ldr	r2, [r2, #4]
   11016:	1841      	adds	r1, r0, r1
   11018:	6019      	str	r1, [r3, #0]
   1101a:	605a      	str	r2, [r3, #4]
   1101c:	e7da      	b.n	10fd4 <_free_r+0x24>
   1101e:	42a0      	cmp	r0, r4
   11020:	d902      	bls.n	11028 <_free_r+0x78>
   11022:	230c      	movs	r3, #12
   11024:	602b      	str	r3, [r5, #0]
   11026:	e7d5      	b.n	10fd4 <_free_r+0x24>
   11028:	6821      	ldr	r1, [r4, #0]
   1102a:	1860      	adds	r0, r4, r1
   1102c:	4282      	cmp	r2, r0
   1102e:	d103      	bne.n	11038 <_free_r+0x88>
   11030:	6810      	ldr	r0, [r2, #0]
   11032:	6852      	ldr	r2, [r2, #4]
   11034:	1841      	adds	r1, r0, r1
   11036:	6021      	str	r1, [r4, #0]
   11038:	6062      	str	r2, [r4, #4]
   1103a:	605c      	str	r4, [r3, #4]
   1103c:	e7ca      	b.n	10fd4 <_free_r+0x24>
   1103e:	46c0      	nop			; (mov r8, r8)
   11040:	20000664 	.word	0x20000664

00011044 <_malloc_r>:
   11044:	2303      	movs	r3, #3
   11046:	b570      	push	{r4, r5, r6, lr}
   11048:	1ccd      	adds	r5, r1, #3
   1104a:	439d      	bics	r5, r3
   1104c:	3508      	adds	r5, #8
   1104e:	0006      	movs	r6, r0
   11050:	2d0c      	cmp	r5, #12
   11052:	d21e      	bcs.n	11092 <_malloc_r+0x4e>
   11054:	250c      	movs	r5, #12
   11056:	42a9      	cmp	r1, r5
   11058:	d81d      	bhi.n	11096 <_malloc_r+0x52>
   1105a:	0030      	movs	r0, r6
   1105c:	f000 fcaf 	bl	119be <__malloc_lock>
   11060:	4a25      	ldr	r2, [pc, #148]	; (110f8 <_malloc_r+0xb4>)
   11062:	6814      	ldr	r4, [r2, #0]
   11064:	0021      	movs	r1, r4
   11066:	2900      	cmp	r1, #0
   11068:	d119      	bne.n	1109e <_malloc_r+0x5a>
   1106a:	4c24      	ldr	r4, [pc, #144]	; (110fc <_malloc_r+0xb8>)
   1106c:	6823      	ldr	r3, [r4, #0]
   1106e:	2b00      	cmp	r3, #0
   11070:	d103      	bne.n	1107a <_malloc_r+0x36>
   11072:	0030      	movs	r0, r6
   11074:	f000 fb10 	bl	11698 <_sbrk_r>
   11078:	6020      	str	r0, [r4, #0]
   1107a:	0029      	movs	r1, r5
   1107c:	0030      	movs	r0, r6
   1107e:	f000 fb0b 	bl	11698 <_sbrk_r>
   11082:	1c43      	adds	r3, r0, #1
   11084:	d12c      	bne.n	110e0 <_malloc_r+0x9c>
   11086:	230c      	movs	r3, #12
   11088:	0030      	movs	r0, r6
   1108a:	6033      	str	r3, [r6, #0]
   1108c:	f000 fc98 	bl	119c0 <__malloc_unlock>
   11090:	e003      	b.n	1109a <_malloc_r+0x56>
   11092:	2d00      	cmp	r5, #0
   11094:	dadf      	bge.n	11056 <_malloc_r+0x12>
   11096:	230c      	movs	r3, #12
   11098:	6033      	str	r3, [r6, #0]
   1109a:	2000      	movs	r0, #0
   1109c:	bd70      	pop	{r4, r5, r6, pc}
   1109e:	680b      	ldr	r3, [r1, #0]
   110a0:	1b5b      	subs	r3, r3, r5
   110a2:	d41a      	bmi.n	110da <_malloc_r+0x96>
   110a4:	2b0b      	cmp	r3, #11
   110a6:	d903      	bls.n	110b0 <_malloc_r+0x6c>
   110a8:	600b      	str	r3, [r1, #0]
   110aa:	18cc      	adds	r4, r1, r3
   110ac:	6025      	str	r5, [r4, #0]
   110ae:	e003      	b.n	110b8 <_malloc_r+0x74>
   110b0:	428c      	cmp	r4, r1
   110b2:	d10e      	bne.n	110d2 <_malloc_r+0x8e>
   110b4:	6863      	ldr	r3, [r4, #4]
   110b6:	6013      	str	r3, [r2, #0]
   110b8:	0030      	movs	r0, r6
   110ba:	f000 fc81 	bl	119c0 <__malloc_unlock>
   110be:	0020      	movs	r0, r4
   110c0:	2207      	movs	r2, #7
   110c2:	300b      	adds	r0, #11
   110c4:	1d23      	adds	r3, r4, #4
   110c6:	4390      	bics	r0, r2
   110c8:	1ac3      	subs	r3, r0, r3
   110ca:	d0e7      	beq.n	1109c <_malloc_r+0x58>
   110cc:	425a      	negs	r2, r3
   110ce:	50e2      	str	r2, [r4, r3]
   110d0:	e7e4      	b.n	1109c <_malloc_r+0x58>
   110d2:	684b      	ldr	r3, [r1, #4]
   110d4:	6063      	str	r3, [r4, #4]
   110d6:	000c      	movs	r4, r1
   110d8:	e7ee      	b.n	110b8 <_malloc_r+0x74>
   110da:	000c      	movs	r4, r1
   110dc:	6849      	ldr	r1, [r1, #4]
   110de:	e7c2      	b.n	11066 <_malloc_r+0x22>
   110e0:	2303      	movs	r3, #3
   110e2:	1cc4      	adds	r4, r0, #3
   110e4:	439c      	bics	r4, r3
   110e6:	42a0      	cmp	r0, r4
   110e8:	d0e0      	beq.n	110ac <_malloc_r+0x68>
   110ea:	1a21      	subs	r1, r4, r0
   110ec:	0030      	movs	r0, r6
   110ee:	f000 fad3 	bl	11698 <_sbrk_r>
   110f2:	1c43      	adds	r3, r0, #1
   110f4:	d1da      	bne.n	110ac <_malloc_r+0x68>
   110f6:	e7c6      	b.n	11086 <_malloc_r+0x42>
   110f8:	20000664 	.word	0x20000664
   110fc:	20000668 	.word	0x20000668

00011100 <__sfputc_r>:
   11100:	6893      	ldr	r3, [r2, #8]
   11102:	b510      	push	{r4, lr}
   11104:	3b01      	subs	r3, #1
   11106:	6093      	str	r3, [r2, #8]
   11108:	2b00      	cmp	r3, #0
   1110a:	da05      	bge.n	11118 <__sfputc_r+0x18>
   1110c:	6994      	ldr	r4, [r2, #24]
   1110e:	42a3      	cmp	r3, r4
   11110:	db08      	blt.n	11124 <__sfputc_r+0x24>
   11112:	b2cb      	uxtb	r3, r1
   11114:	2b0a      	cmp	r3, #10
   11116:	d005      	beq.n	11124 <__sfputc_r+0x24>
   11118:	6813      	ldr	r3, [r2, #0]
   1111a:	1c58      	adds	r0, r3, #1
   1111c:	6010      	str	r0, [r2, #0]
   1111e:	7019      	strb	r1, [r3, #0]
   11120:	b2c8      	uxtb	r0, r1
   11122:	bd10      	pop	{r4, pc}
   11124:	f000 fb16 	bl	11754 <__swbuf_r>
   11128:	e7fb      	b.n	11122 <__sfputc_r+0x22>

0001112a <__sfputs_r>:
   1112a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1112c:	0006      	movs	r6, r0
   1112e:	000f      	movs	r7, r1
   11130:	0014      	movs	r4, r2
   11132:	18d5      	adds	r5, r2, r3
   11134:	42ac      	cmp	r4, r5
   11136:	d101      	bne.n	1113c <__sfputs_r+0x12>
   11138:	2000      	movs	r0, #0
   1113a:	e007      	b.n	1114c <__sfputs_r+0x22>
   1113c:	7821      	ldrb	r1, [r4, #0]
   1113e:	003a      	movs	r2, r7
   11140:	0030      	movs	r0, r6
   11142:	f7ff ffdd 	bl	11100 <__sfputc_r>
   11146:	3401      	adds	r4, #1
   11148:	1c43      	adds	r3, r0, #1
   1114a:	d1f3      	bne.n	11134 <__sfputs_r+0xa>
   1114c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00011150 <_vfiprintf_r>:
   11150:	b5f0      	push	{r4, r5, r6, r7, lr}
   11152:	b09f      	sub	sp, #124	; 0x7c
   11154:	0006      	movs	r6, r0
   11156:	000f      	movs	r7, r1
   11158:	0014      	movs	r4, r2
   1115a:	9305      	str	r3, [sp, #20]
   1115c:	2800      	cmp	r0, #0
   1115e:	d004      	beq.n	1116a <_vfiprintf_r+0x1a>
   11160:	6983      	ldr	r3, [r0, #24]
   11162:	2b00      	cmp	r3, #0
   11164:	d101      	bne.n	1116a <_vfiprintf_r+0x1a>
   11166:	f7ff fe1d 	bl	10da4 <__sinit>
   1116a:	4b7f      	ldr	r3, [pc, #508]	; (11368 <_vfiprintf_r+0x218>)
   1116c:	429f      	cmp	r7, r3
   1116e:	d15c      	bne.n	1122a <_vfiprintf_r+0xda>
   11170:	6877      	ldr	r7, [r6, #4]
   11172:	89bb      	ldrh	r3, [r7, #12]
   11174:	071b      	lsls	r3, r3, #28
   11176:	d562      	bpl.n	1123e <_vfiprintf_r+0xee>
   11178:	693b      	ldr	r3, [r7, #16]
   1117a:	2b00      	cmp	r3, #0
   1117c:	d05f      	beq.n	1123e <_vfiprintf_r+0xee>
   1117e:	2300      	movs	r3, #0
   11180:	ad06      	add	r5, sp, #24
   11182:	616b      	str	r3, [r5, #20]
   11184:	3320      	adds	r3, #32
   11186:	766b      	strb	r3, [r5, #25]
   11188:	3310      	adds	r3, #16
   1118a:	76ab      	strb	r3, [r5, #26]
   1118c:	9402      	str	r4, [sp, #8]
   1118e:	9c02      	ldr	r4, [sp, #8]
   11190:	7823      	ldrb	r3, [r4, #0]
   11192:	2b00      	cmp	r3, #0
   11194:	d15d      	bne.n	11252 <_vfiprintf_r+0x102>
   11196:	9b02      	ldr	r3, [sp, #8]
   11198:	1ae3      	subs	r3, r4, r3
   1119a:	9304      	str	r3, [sp, #16]
   1119c:	d00d      	beq.n	111ba <_vfiprintf_r+0x6a>
   1119e:	9b04      	ldr	r3, [sp, #16]
   111a0:	9a02      	ldr	r2, [sp, #8]
   111a2:	0039      	movs	r1, r7
   111a4:	0030      	movs	r0, r6
   111a6:	f7ff ffc0 	bl	1112a <__sfputs_r>
   111aa:	1c43      	adds	r3, r0, #1
   111ac:	d100      	bne.n	111b0 <_vfiprintf_r+0x60>
   111ae:	e0cc      	b.n	1134a <_vfiprintf_r+0x1fa>
   111b0:	696a      	ldr	r2, [r5, #20]
   111b2:	9b04      	ldr	r3, [sp, #16]
   111b4:	4694      	mov	ip, r2
   111b6:	4463      	add	r3, ip
   111b8:	616b      	str	r3, [r5, #20]
   111ba:	7823      	ldrb	r3, [r4, #0]
   111bc:	2b00      	cmp	r3, #0
   111be:	d100      	bne.n	111c2 <_vfiprintf_r+0x72>
   111c0:	e0c3      	b.n	1134a <_vfiprintf_r+0x1fa>
   111c2:	2201      	movs	r2, #1
   111c4:	2300      	movs	r3, #0
   111c6:	4252      	negs	r2, r2
   111c8:	606a      	str	r2, [r5, #4]
   111ca:	a902      	add	r1, sp, #8
   111cc:	3254      	adds	r2, #84	; 0x54
   111ce:	1852      	adds	r2, r2, r1
   111d0:	3401      	adds	r4, #1
   111d2:	602b      	str	r3, [r5, #0]
   111d4:	60eb      	str	r3, [r5, #12]
   111d6:	60ab      	str	r3, [r5, #8]
   111d8:	7013      	strb	r3, [r2, #0]
   111da:	65ab      	str	r3, [r5, #88]	; 0x58
   111dc:	7821      	ldrb	r1, [r4, #0]
   111de:	2205      	movs	r2, #5
   111e0:	4862      	ldr	r0, [pc, #392]	; (1136c <_vfiprintf_r+0x21c>)
   111e2:	f000 fbe1 	bl	119a8 <memchr>
   111e6:	1c63      	adds	r3, r4, #1
   111e8:	469c      	mov	ip, r3
   111ea:	2800      	cmp	r0, #0
   111ec:	d135      	bne.n	1125a <_vfiprintf_r+0x10a>
   111ee:	6829      	ldr	r1, [r5, #0]
   111f0:	06cb      	lsls	r3, r1, #27
   111f2:	d504      	bpl.n	111fe <_vfiprintf_r+0xae>
   111f4:	2353      	movs	r3, #83	; 0x53
   111f6:	aa02      	add	r2, sp, #8
   111f8:	3020      	adds	r0, #32
   111fa:	189b      	adds	r3, r3, r2
   111fc:	7018      	strb	r0, [r3, #0]
   111fe:	070b      	lsls	r3, r1, #28
   11200:	d504      	bpl.n	1120c <_vfiprintf_r+0xbc>
   11202:	2353      	movs	r3, #83	; 0x53
   11204:	202b      	movs	r0, #43	; 0x2b
   11206:	aa02      	add	r2, sp, #8
   11208:	189b      	adds	r3, r3, r2
   1120a:	7018      	strb	r0, [r3, #0]
   1120c:	7823      	ldrb	r3, [r4, #0]
   1120e:	2b2a      	cmp	r3, #42	; 0x2a
   11210:	d02c      	beq.n	1126c <_vfiprintf_r+0x11c>
   11212:	2000      	movs	r0, #0
   11214:	210a      	movs	r1, #10
   11216:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11218:	7822      	ldrb	r2, [r4, #0]
   1121a:	3a30      	subs	r2, #48	; 0x30
   1121c:	2a09      	cmp	r2, #9
   1121e:	d800      	bhi.n	11222 <_vfiprintf_r+0xd2>
   11220:	e06b      	b.n	112fa <_vfiprintf_r+0x1aa>
   11222:	2800      	cmp	r0, #0
   11224:	d02a      	beq.n	1127c <_vfiprintf_r+0x12c>
   11226:	9309      	str	r3, [sp, #36]	; 0x24
   11228:	e028      	b.n	1127c <_vfiprintf_r+0x12c>
   1122a:	4b51      	ldr	r3, [pc, #324]	; (11370 <_vfiprintf_r+0x220>)
   1122c:	429f      	cmp	r7, r3
   1122e:	d101      	bne.n	11234 <_vfiprintf_r+0xe4>
   11230:	68b7      	ldr	r7, [r6, #8]
   11232:	e79e      	b.n	11172 <_vfiprintf_r+0x22>
   11234:	4b4f      	ldr	r3, [pc, #316]	; (11374 <_vfiprintf_r+0x224>)
   11236:	429f      	cmp	r7, r3
   11238:	d19b      	bne.n	11172 <_vfiprintf_r+0x22>
   1123a:	68f7      	ldr	r7, [r6, #12]
   1123c:	e799      	b.n	11172 <_vfiprintf_r+0x22>
   1123e:	0039      	movs	r1, r7
   11240:	0030      	movs	r0, r6
   11242:	f000 faf1 	bl	11828 <__swsetup_r>
   11246:	2800      	cmp	r0, #0
   11248:	d099      	beq.n	1117e <_vfiprintf_r+0x2e>
   1124a:	2001      	movs	r0, #1
   1124c:	4240      	negs	r0, r0
   1124e:	b01f      	add	sp, #124	; 0x7c
   11250:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11252:	2b25      	cmp	r3, #37	; 0x25
   11254:	d09f      	beq.n	11196 <_vfiprintf_r+0x46>
   11256:	3401      	adds	r4, #1
   11258:	e79a      	b.n	11190 <_vfiprintf_r+0x40>
   1125a:	4b44      	ldr	r3, [pc, #272]	; (1136c <_vfiprintf_r+0x21c>)
   1125c:	6829      	ldr	r1, [r5, #0]
   1125e:	1ac0      	subs	r0, r0, r3
   11260:	2301      	movs	r3, #1
   11262:	4083      	lsls	r3, r0
   11264:	430b      	orrs	r3, r1
   11266:	602b      	str	r3, [r5, #0]
   11268:	4664      	mov	r4, ip
   1126a:	e7b7      	b.n	111dc <_vfiprintf_r+0x8c>
   1126c:	9b05      	ldr	r3, [sp, #20]
   1126e:	1d18      	adds	r0, r3, #4
   11270:	681b      	ldr	r3, [r3, #0]
   11272:	9005      	str	r0, [sp, #20]
   11274:	2b00      	cmp	r3, #0
   11276:	db3a      	blt.n	112ee <_vfiprintf_r+0x19e>
   11278:	9309      	str	r3, [sp, #36]	; 0x24
   1127a:	4664      	mov	r4, ip
   1127c:	7823      	ldrb	r3, [r4, #0]
   1127e:	2b2e      	cmp	r3, #46	; 0x2e
   11280:	d10b      	bne.n	1129a <_vfiprintf_r+0x14a>
   11282:	7863      	ldrb	r3, [r4, #1]
   11284:	1c62      	adds	r2, r4, #1
   11286:	2b2a      	cmp	r3, #42	; 0x2a
   11288:	d13f      	bne.n	1130a <_vfiprintf_r+0x1ba>
   1128a:	9b05      	ldr	r3, [sp, #20]
   1128c:	3402      	adds	r4, #2
   1128e:	1d1a      	adds	r2, r3, #4
   11290:	681b      	ldr	r3, [r3, #0]
   11292:	9205      	str	r2, [sp, #20]
   11294:	2b00      	cmp	r3, #0
   11296:	db35      	blt.n	11304 <_vfiprintf_r+0x1b4>
   11298:	9307      	str	r3, [sp, #28]
   1129a:	7821      	ldrb	r1, [r4, #0]
   1129c:	2203      	movs	r2, #3
   1129e:	4836      	ldr	r0, [pc, #216]	; (11378 <_vfiprintf_r+0x228>)
   112a0:	f000 fb82 	bl	119a8 <memchr>
   112a4:	2800      	cmp	r0, #0
   112a6:	d007      	beq.n	112b8 <_vfiprintf_r+0x168>
   112a8:	4b33      	ldr	r3, [pc, #204]	; (11378 <_vfiprintf_r+0x228>)
   112aa:	682a      	ldr	r2, [r5, #0]
   112ac:	1ac0      	subs	r0, r0, r3
   112ae:	2340      	movs	r3, #64	; 0x40
   112b0:	4083      	lsls	r3, r0
   112b2:	4313      	orrs	r3, r2
   112b4:	602b      	str	r3, [r5, #0]
   112b6:	3401      	adds	r4, #1
   112b8:	7821      	ldrb	r1, [r4, #0]
   112ba:	1c63      	adds	r3, r4, #1
   112bc:	2206      	movs	r2, #6
   112be:	482f      	ldr	r0, [pc, #188]	; (1137c <_vfiprintf_r+0x22c>)
   112c0:	9302      	str	r3, [sp, #8]
   112c2:	7629      	strb	r1, [r5, #24]
   112c4:	f000 fb70 	bl	119a8 <memchr>
   112c8:	2800      	cmp	r0, #0
   112ca:	d044      	beq.n	11356 <_vfiprintf_r+0x206>
   112cc:	4b2c      	ldr	r3, [pc, #176]	; (11380 <_vfiprintf_r+0x230>)
   112ce:	2b00      	cmp	r3, #0
   112d0:	d12f      	bne.n	11332 <_vfiprintf_r+0x1e2>
   112d2:	6829      	ldr	r1, [r5, #0]
   112d4:	9b05      	ldr	r3, [sp, #20]
   112d6:	2207      	movs	r2, #7
   112d8:	05c9      	lsls	r1, r1, #23
   112da:	d528      	bpl.n	1132e <_vfiprintf_r+0x1de>
   112dc:	189b      	adds	r3, r3, r2
   112de:	4393      	bics	r3, r2
   112e0:	3308      	adds	r3, #8
   112e2:	9305      	str	r3, [sp, #20]
   112e4:	696b      	ldr	r3, [r5, #20]
   112e6:	9a03      	ldr	r2, [sp, #12]
   112e8:	189b      	adds	r3, r3, r2
   112ea:	616b      	str	r3, [r5, #20]
   112ec:	e74f      	b.n	1118e <_vfiprintf_r+0x3e>
   112ee:	425b      	negs	r3, r3
   112f0:	60eb      	str	r3, [r5, #12]
   112f2:	2302      	movs	r3, #2
   112f4:	430b      	orrs	r3, r1
   112f6:	602b      	str	r3, [r5, #0]
   112f8:	e7bf      	b.n	1127a <_vfiprintf_r+0x12a>
   112fa:	434b      	muls	r3, r1
   112fc:	3401      	adds	r4, #1
   112fe:	189b      	adds	r3, r3, r2
   11300:	2001      	movs	r0, #1
   11302:	e789      	b.n	11218 <_vfiprintf_r+0xc8>
   11304:	2301      	movs	r3, #1
   11306:	425b      	negs	r3, r3
   11308:	e7c6      	b.n	11298 <_vfiprintf_r+0x148>
   1130a:	2300      	movs	r3, #0
   1130c:	0014      	movs	r4, r2
   1130e:	200a      	movs	r0, #10
   11310:	001a      	movs	r2, r3
   11312:	606b      	str	r3, [r5, #4]
   11314:	7821      	ldrb	r1, [r4, #0]
   11316:	3930      	subs	r1, #48	; 0x30
   11318:	2909      	cmp	r1, #9
   1131a:	d903      	bls.n	11324 <_vfiprintf_r+0x1d4>
   1131c:	2b00      	cmp	r3, #0
   1131e:	d0bc      	beq.n	1129a <_vfiprintf_r+0x14a>
   11320:	9207      	str	r2, [sp, #28]
   11322:	e7ba      	b.n	1129a <_vfiprintf_r+0x14a>
   11324:	4342      	muls	r2, r0
   11326:	3401      	adds	r4, #1
   11328:	1852      	adds	r2, r2, r1
   1132a:	2301      	movs	r3, #1
   1132c:	e7f2      	b.n	11314 <_vfiprintf_r+0x1c4>
   1132e:	3307      	adds	r3, #7
   11330:	e7d5      	b.n	112de <_vfiprintf_r+0x18e>
   11332:	ab05      	add	r3, sp, #20
   11334:	9300      	str	r3, [sp, #0]
   11336:	003a      	movs	r2, r7
   11338:	4b12      	ldr	r3, [pc, #72]	; (11384 <_vfiprintf_r+0x234>)
   1133a:	0029      	movs	r1, r5
   1133c:	0030      	movs	r0, r6
   1133e:	e000      	b.n	11342 <_vfiprintf_r+0x1f2>
   11340:	bf00      	nop
   11342:	9003      	str	r0, [sp, #12]
   11344:	9b03      	ldr	r3, [sp, #12]
   11346:	3301      	adds	r3, #1
   11348:	d1cc      	bne.n	112e4 <_vfiprintf_r+0x194>
   1134a:	89bb      	ldrh	r3, [r7, #12]
   1134c:	065b      	lsls	r3, r3, #25
   1134e:	d500      	bpl.n	11352 <_vfiprintf_r+0x202>
   11350:	e77b      	b.n	1124a <_vfiprintf_r+0xfa>
   11352:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11354:	e77b      	b.n	1124e <_vfiprintf_r+0xfe>
   11356:	ab05      	add	r3, sp, #20
   11358:	9300      	str	r3, [sp, #0]
   1135a:	003a      	movs	r2, r7
   1135c:	4b09      	ldr	r3, [pc, #36]	; (11384 <_vfiprintf_r+0x234>)
   1135e:	0029      	movs	r1, r5
   11360:	0030      	movs	r0, r6
   11362:	f000 f87f 	bl	11464 <_printf_i>
   11366:	e7ec      	b.n	11342 <_vfiprintf_r+0x1f2>
   11368:	00011d40 	.word	0x00011d40
   1136c:	00011d80 	.word	0x00011d80
   11370:	00011d60 	.word	0x00011d60
   11374:	00011d20 	.word	0x00011d20
   11378:	00011d86 	.word	0x00011d86
   1137c:	00011d8a 	.word	0x00011d8a
   11380:	00000000 	.word	0x00000000
   11384:	0001112b 	.word	0x0001112b

00011388 <_printf_common>:
   11388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1138a:	0015      	movs	r5, r2
   1138c:	9301      	str	r3, [sp, #4]
   1138e:	688a      	ldr	r2, [r1, #8]
   11390:	690b      	ldr	r3, [r1, #16]
   11392:	9000      	str	r0, [sp, #0]
   11394:	000c      	movs	r4, r1
   11396:	4293      	cmp	r3, r2
   11398:	da00      	bge.n	1139c <_printf_common+0x14>
   1139a:	0013      	movs	r3, r2
   1139c:	0022      	movs	r2, r4
   1139e:	602b      	str	r3, [r5, #0]
   113a0:	3243      	adds	r2, #67	; 0x43
   113a2:	7812      	ldrb	r2, [r2, #0]
   113a4:	2a00      	cmp	r2, #0
   113a6:	d001      	beq.n	113ac <_printf_common+0x24>
   113a8:	3301      	adds	r3, #1
   113aa:	602b      	str	r3, [r5, #0]
   113ac:	6823      	ldr	r3, [r4, #0]
   113ae:	069b      	lsls	r3, r3, #26
   113b0:	d502      	bpl.n	113b8 <_printf_common+0x30>
   113b2:	682b      	ldr	r3, [r5, #0]
   113b4:	3302      	adds	r3, #2
   113b6:	602b      	str	r3, [r5, #0]
   113b8:	2706      	movs	r7, #6
   113ba:	6823      	ldr	r3, [r4, #0]
   113bc:	401f      	ands	r7, r3
   113be:	d027      	beq.n	11410 <_printf_common+0x88>
   113c0:	0023      	movs	r3, r4
   113c2:	3343      	adds	r3, #67	; 0x43
   113c4:	781b      	ldrb	r3, [r3, #0]
   113c6:	1e5a      	subs	r2, r3, #1
   113c8:	4193      	sbcs	r3, r2
   113ca:	6822      	ldr	r2, [r4, #0]
   113cc:	0692      	lsls	r2, r2, #26
   113ce:	d430      	bmi.n	11432 <_printf_common+0xaa>
   113d0:	0022      	movs	r2, r4
   113d2:	9901      	ldr	r1, [sp, #4]
   113d4:	3243      	adds	r2, #67	; 0x43
   113d6:	9800      	ldr	r0, [sp, #0]
   113d8:	9e08      	ldr	r6, [sp, #32]
   113da:	47b0      	blx	r6
   113dc:	1c43      	adds	r3, r0, #1
   113de:	d025      	beq.n	1142c <_printf_common+0xa4>
   113e0:	2306      	movs	r3, #6
   113e2:	6820      	ldr	r0, [r4, #0]
   113e4:	682a      	ldr	r2, [r5, #0]
   113e6:	68e1      	ldr	r1, [r4, #12]
   113e8:	4003      	ands	r3, r0
   113ea:	2500      	movs	r5, #0
   113ec:	2b04      	cmp	r3, #4
   113ee:	d103      	bne.n	113f8 <_printf_common+0x70>
   113f0:	1a8d      	subs	r5, r1, r2
   113f2:	43eb      	mvns	r3, r5
   113f4:	17db      	asrs	r3, r3, #31
   113f6:	401d      	ands	r5, r3
   113f8:	68a3      	ldr	r3, [r4, #8]
   113fa:	6922      	ldr	r2, [r4, #16]
   113fc:	4293      	cmp	r3, r2
   113fe:	dd01      	ble.n	11404 <_printf_common+0x7c>
   11400:	1a9b      	subs	r3, r3, r2
   11402:	18ed      	adds	r5, r5, r3
   11404:	2700      	movs	r7, #0
   11406:	42bd      	cmp	r5, r7
   11408:	d120      	bne.n	1144c <_printf_common+0xc4>
   1140a:	2000      	movs	r0, #0
   1140c:	e010      	b.n	11430 <_printf_common+0xa8>
   1140e:	3701      	adds	r7, #1
   11410:	68e3      	ldr	r3, [r4, #12]
   11412:	682a      	ldr	r2, [r5, #0]
   11414:	1a9b      	subs	r3, r3, r2
   11416:	429f      	cmp	r7, r3
   11418:	dad2      	bge.n	113c0 <_printf_common+0x38>
   1141a:	0022      	movs	r2, r4
   1141c:	2301      	movs	r3, #1
   1141e:	3219      	adds	r2, #25
   11420:	9901      	ldr	r1, [sp, #4]
   11422:	9800      	ldr	r0, [sp, #0]
   11424:	9e08      	ldr	r6, [sp, #32]
   11426:	47b0      	blx	r6
   11428:	1c43      	adds	r3, r0, #1
   1142a:	d1f0      	bne.n	1140e <_printf_common+0x86>
   1142c:	2001      	movs	r0, #1
   1142e:	4240      	negs	r0, r0
   11430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   11432:	2030      	movs	r0, #48	; 0x30
   11434:	18e1      	adds	r1, r4, r3
   11436:	3143      	adds	r1, #67	; 0x43
   11438:	7008      	strb	r0, [r1, #0]
   1143a:	0021      	movs	r1, r4
   1143c:	1c5a      	adds	r2, r3, #1
   1143e:	3145      	adds	r1, #69	; 0x45
   11440:	7809      	ldrb	r1, [r1, #0]
   11442:	18a2      	adds	r2, r4, r2
   11444:	3243      	adds	r2, #67	; 0x43
   11446:	3302      	adds	r3, #2
   11448:	7011      	strb	r1, [r2, #0]
   1144a:	e7c1      	b.n	113d0 <_printf_common+0x48>
   1144c:	0022      	movs	r2, r4
   1144e:	2301      	movs	r3, #1
   11450:	321a      	adds	r2, #26
   11452:	9901      	ldr	r1, [sp, #4]
   11454:	9800      	ldr	r0, [sp, #0]
   11456:	9e08      	ldr	r6, [sp, #32]
   11458:	47b0      	blx	r6
   1145a:	1c43      	adds	r3, r0, #1
   1145c:	d0e6      	beq.n	1142c <_printf_common+0xa4>
   1145e:	3701      	adds	r7, #1
   11460:	e7d1      	b.n	11406 <_printf_common+0x7e>
	...

00011464 <_printf_i>:
   11464:	b5f0      	push	{r4, r5, r6, r7, lr}
   11466:	b08b      	sub	sp, #44	; 0x2c
   11468:	9206      	str	r2, [sp, #24]
   1146a:	000a      	movs	r2, r1
   1146c:	3243      	adds	r2, #67	; 0x43
   1146e:	9307      	str	r3, [sp, #28]
   11470:	9005      	str	r0, [sp, #20]
   11472:	9204      	str	r2, [sp, #16]
   11474:	7e0a      	ldrb	r2, [r1, #24]
   11476:	000c      	movs	r4, r1
   11478:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1147a:	2a6e      	cmp	r2, #110	; 0x6e
   1147c:	d100      	bne.n	11480 <_printf_i+0x1c>
   1147e:	e08f      	b.n	115a0 <_printf_i+0x13c>
   11480:	d817      	bhi.n	114b2 <_printf_i+0x4e>
   11482:	2a63      	cmp	r2, #99	; 0x63
   11484:	d02c      	beq.n	114e0 <_printf_i+0x7c>
   11486:	d808      	bhi.n	1149a <_printf_i+0x36>
   11488:	2a00      	cmp	r2, #0
   1148a:	d100      	bne.n	1148e <_printf_i+0x2a>
   1148c:	e099      	b.n	115c2 <_printf_i+0x15e>
   1148e:	2a58      	cmp	r2, #88	; 0x58
   11490:	d054      	beq.n	1153c <_printf_i+0xd8>
   11492:	0026      	movs	r6, r4
   11494:	3642      	adds	r6, #66	; 0x42
   11496:	7032      	strb	r2, [r6, #0]
   11498:	e029      	b.n	114ee <_printf_i+0x8a>
   1149a:	2a64      	cmp	r2, #100	; 0x64
   1149c:	d001      	beq.n	114a2 <_printf_i+0x3e>
   1149e:	2a69      	cmp	r2, #105	; 0x69
   114a0:	d1f7      	bne.n	11492 <_printf_i+0x2e>
   114a2:	6821      	ldr	r1, [r4, #0]
   114a4:	681a      	ldr	r2, [r3, #0]
   114a6:	0608      	lsls	r0, r1, #24
   114a8:	d523      	bpl.n	114f2 <_printf_i+0x8e>
   114aa:	1d11      	adds	r1, r2, #4
   114ac:	6019      	str	r1, [r3, #0]
   114ae:	6815      	ldr	r5, [r2, #0]
   114b0:	e025      	b.n	114fe <_printf_i+0x9a>
   114b2:	2a73      	cmp	r2, #115	; 0x73
   114b4:	d100      	bne.n	114b8 <_printf_i+0x54>
   114b6:	e088      	b.n	115ca <_printf_i+0x166>
   114b8:	d808      	bhi.n	114cc <_printf_i+0x68>
   114ba:	2a6f      	cmp	r2, #111	; 0x6f
   114bc:	d029      	beq.n	11512 <_printf_i+0xae>
   114be:	2a70      	cmp	r2, #112	; 0x70
   114c0:	d1e7      	bne.n	11492 <_printf_i+0x2e>
   114c2:	2220      	movs	r2, #32
   114c4:	6809      	ldr	r1, [r1, #0]
   114c6:	430a      	orrs	r2, r1
   114c8:	6022      	str	r2, [r4, #0]
   114ca:	e003      	b.n	114d4 <_printf_i+0x70>
   114cc:	2a75      	cmp	r2, #117	; 0x75
   114ce:	d020      	beq.n	11512 <_printf_i+0xae>
   114d0:	2a78      	cmp	r2, #120	; 0x78
   114d2:	d1de      	bne.n	11492 <_printf_i+0x2e>
   114d4:	0022      	movs	r2, r4
   114d6:	2178      	movs	r1, #120	; 0x78
   114d8:	3245      	adds	r2, #69	; 0x45
   114da:	7011      	strb	r1, [r2, #0]
   114dc:	4a6c      	ldr	r2, [pc, #432]	; (11690 <_printf_i+0x22c>)
   114de:	e030      	b.n	11542 <_printf_i+0xde>
   114e0:	000e      	movs	r6, r1
   114e2:	681a      	ldr	r2, [r3, #0]
   114e4:	3642      	adds	r6, #66	; 0x42
   114e6:	1d11      	adds	r1, r2, #4
   114e8:	6019      	str	r1, [r3, #0]
   114ea:	6813      	ldr	r3, [r2, #0]
   114ec:	7033      	strb	r3, [r6, #0]
   114ee:	2301      	movs	r3, #1
   114f0:	e079      	b.n	115e6 <_printf_i+0x182>
   114f2:	0649      	lsls	r1, r1, #25
   114f4:	d5d9      	bpl.n	114aa <_printf_i+0x46>
   114f6:	1d11      	adds	r1, r2, #4
   114f8:	6019      	str	r1, [r3, #0]
   114fa:	2300      	movs	r3, #0
   114fc:	5ed5      	ldrsh	r5, [r2, r3]
   114fe:	2d00      	cmp	r5, #0
   11500:	da03      	bge.n	1150a <_printf_i+0xa6>
   11502:	232d      	movs	r3, #45	; 0x2d
   11504:	9a04      	ldr	r2, [sp, #16]
   11506:	426d      	negs	r5, r5
   11508:	7013      	strb	r3, [r2, #0]
   1150a:	4b62      	ldr	r3, [pc, #392]	; (11694 <_printf_i+0x230>)
   1150c:	270a      	movs	r7, #10
   1150e:	9303      	str	r3, [sp, #12]
   11510:	e02f      	b.n	11572 <_printf_i+0x10e>
   11512:	6820      	ldr	r0, [r4, #0]
   11514:	6819      	ldr	r1, [r3, #0]
   11516:	0605      	lsls	r5, r0, #24
   11518:	d503      	bpl.n	11522 <_printf_i+0xbe>
   1151a:	1d08      	adds	r0, r1, #4
   1151c:	6018      	str	r0, [r3, #0]
   1151e:	680d      	ldr	r5, [r1, #0]
   11520:	e005      	b.n	1152e <_printf_i+0xca>
   11522:	0640      	lsls	r0, r0, #25
   11524:	d5f9      	bpl.n	1151a <_printf_i+0xb6>
   11526:	680d      	ldr	r5, [r1, #0]
   11528:	1d08      	adds	r0, r1, #4
   1152a:	6018      	str	r0, [r3, #0]
   1152c:	b2ad      	uxth	r5, r5
   1152e:	4b59      	ldr	r3, [pc, #356]	; (11694 <_printf_i+0x230>)
   11530:	2708      	movs	r7, #8
   11532:	9303      	str	r3, [sp, #12]
   11534:	2a6f      	cmp	r2, #111	; 0x6f
   11536:	d018      	beq.n	1156a <_printf_i+0x106>
   11538:	270a      	movs	r7, #10
   1153a:	e016      	b.n	1156a <_printf_i+0x106>
   1153c:	3145      	adds	r1, #69	; 0x45
   1153e:	700a      	strb	r2, [r1, #0]
   11540:	4a54      	ldr	r2, [pc, #336]	; (11694 <_printf_i+0x230>)
   11542:	9203      	str	r2, [sp, #12]
   11544:	681a      	ldr	r2, [r3, #0]
   11546:	6821      	ldr	r1, [r4, #0]
   11548:	1d10      	adds	r0, r2, #4
   1154a:	6018      	str	r0, [r3, #0]
   1154c:	6815      	ldr	r5, [r2, #0]
   1154e:	0608      	lsls	r0, r1, #24
   11550:	d522      	bpl.n	11598 <_printf_i+0x134>
   11552:	07cb      	lsls	r3, r1, #31
   11554:	d502      	bpl.n	1155c <_printf_i+0xf8>
   11556:	2320      	movs	r3, #32
   11558:	4319      	orrs	r1, r3
   1155a:	6021      	str	r1, [r4, #0]
   1155c:	2710      	movs	r7, #16
   1155e:	2d00      	cmp	r5, #0
   11560:	d103      	bne.n	1156a <_printf_i+0x106>
   11562:	2320      	movs	r3, #32
   11564:	6822      	ldr	r2, [r4, #0]
   11566:	439a      	bics	r2, r3
   11568:	6022      	str	r2, [r4, #0]
   1156a:	0023      	movs	r3, r4
   1156c:	2200      	movs	r2, #0
   1156e:	3343      	adds	r3, #67	; 0x43
   11570:	701a      	strb	r2, [r3, #0]
   11572:	6863      	ldr	r3, [r4, #4]
   11574:	60a3      	str	r3, [r4, #8]
   11576:	2b00      	cmp	r3, #0
   11578:	db5c      	blt.n	11634 <_printf_i+0x1d0>
   1157a:	2204      	movs	r2, #4
   1157c:	6821      	ldr	r1, [r4, #0]
   1157e:	4391      	bics	r1, r2
   11580:	6021      	str	r1, [r4, #0]
   11582:	2d00      	cmp	r5, #0
   11584:	d158      	bne.n	11638 <_printf_i+0x1d4>
   11586:	9e04      	ldr	r6, [sp, #16]
   11588:	2b00      	cmp	r3, #0
   1158a:	d064      	beq.n	11656 <_printf_i+0x1f2>
   1158c:	0026      	movs	r6, r4
   1158e:	9b03      	ldr	r3, [sp, #12]
   11590:	3642      	adds	r6, #66	; 0x42
   11592:	781b      	ldrb	r3, [r3, #0]
   11594:	7033      	strb	r3, [r6, #0]
   11596:	e05e      	b.n	11656 <_printf_i+0x1f2>
   11598:	0648      	lsls	r0, r1, #25
   1159a:	d5da      	bpl.n	11552 <_printf_i+0xee>
   1159c:	b2ad      	uxth	r5, r5
   1159e:	e7d8      	b.n	11552 <_printf_i+0xee>
   115a0:	6809      	ldr	r1, [r1, #0]
   115a2:	681a      	ldr	r2, [r3, #0]
   115a4:	0608      	lsls	r0, r1, #24
   115a6:	d505      	bpl.n	115b4 <_printf_i+0x150>
   115a8:	1d11      	adds	r1, r2, #4
   115aa:	6019      	str	r1, [r3, #0]
   115ac:	6813      	ldr	r3, [r2, #0]
   115ae:	6962      	ldr	r2, [r4, #20]
   115b0:	601a      	str	r2, [r3, #0]
   115b2:	e006      	b.n	115c2 <_printf_i+0x15e>
   115b4:	0649      	lsls	r1, r1, #25
   115b6:	d5f7      	bpl.n	115a8 <_printf_i+0x144>
   115b8:	1d11      	adds	r1, r2, #4
   115ba:	6019      	str	r1, [r3, #0]
   115bc:	6813      	ldr	r3, [r2, #0]
   115be:	8aa2      	ldrh	r2, [r4, #20]
   115c0:	801a      	strh	r2, [r3, #0]
   115c2:	2300      	movs	r3, #0
   115c4:	9e04      	ldr	r6, [sp, #16]
   115c6:	6123      	str	r3, [r4, #16]
   115c8:	e054      	b.n	11674 <_printf_i+0x210>
   115ca:	681a      	ldr	r2, [r3, #0]
   115cc:	1d11      	adds	r1, r2, #4
   115ce:	6019      	str	r1, [r3, #0]
   115d0:	6816      	ldr	r6, [r2, #0]
   115d2:	2100      	movs	r1, #0
   115d4:	6862      	ldr	r2, [r4, #4]
   115d6:	0030      	movs	r0, r6
   115d8:	f000 f9e6 	bl	119a8 <memchr>
   115dc:	2800      	cmp	r0, #0
   115de:	d001      	beq.n	115e4 <_printf_i+0x180>
   115e0:	1b80      	subs	r0, r0, r6
   115e2:	6060      	str	r0, [r4, #4]
   115e4:	6863      	ldr	r3, [r4, #4]
   115e6:	6123      	str	r3, [r4, #16]
   115e8:	2300      	movs	r3, #0
   115ea:	9a04      	ldr	r2, [sp, #16]
   115ec:	7013      	strb	r3, [r2, #0]
   115ee:	e041      	b.n	11674 <_printf_i+0x210>
   115f0:	6923      	ldr	r3, [r4, #16]
   115f2:	0032      	movs	r2, r6
   115f4:	9906      	ldr	r1, [sp, #24]
   115f6:	9805      	ldr	r0, [sp, #20]
   115f8:	9d07      	ldr	r5, [sp, #28]
   115fa:	47a8      	blx	r5
   115fc:	1c43      	adds	r3, r0, #1
   115fe:	d043      	beq.n	11688 <_printf_i+0x224>
   11600:	6823      	ldr	r3, [r4, #0]
   11602:	2500      	movs	r5, #0
   11604:	079b      	lsls	r3, r3, #30
   11606:	d40f      	bmi.n	11628 <_printf_i+0x1c4>
   11608:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1160a:	68e0      	ldr	r0, [r4, #12]
   1160c:	4298      	cmp	r0, r3
   1160e:	da3d      	bge.n	1168c <_printf_i+0x228>
   11610:	0018      	movs	r0, r3
   11612:	e03b      	b.n	1168c <_printf_i+0x228>
   11614:	0022      	movs	r2, r4
   11616:	2301      	movs	r3, #1
   11618:	3219      	adds	r2, #25
   1161a:	9906      	ldr	r1, [sp, #24]
   1161c:	9805      	ldr	r0, [sp, #20]
   1161e:	9e07      	ldr	r6, [sp, #28]
   11620:	47b0      	blx	r6
   11622:	1c43      	adds	r3, r0, #1
   11624:	d030      	beq.n	11688 <_printf_i+0x224>
   11626:	3501      	adds	r5, #1
   11628:	68e3      	ldr	r3, [r4, #12]
   1162a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1162c:	1a9b      	subs	r3, r3, r2
   1162e:	429d      	cmp	r5, r3
   11630:	dbf0      	blt.n	11614 <_printf_i+0x1b0>
   11632:	e7e9      	b.n	11608 <_printf_i+0x1a4>
   11634:	2d00      	cmp	r5, #0
   11636:	d0a9      	beq.n	1158c <_printf_i+0x128>
   11638:	9e04      	ldr	r6, [sp, #16]
   1163a:	0028      	movs	r0, r5
   1163c:	0039      	movs	r1, r7
   1163e:	f7ff f8a9 	bl	10794 <__aeabi_uidivmod>
   11642:	9b03      	ldr	r3, [sp, #12]
   11644:	3e01      	subs	r6, #1
   11646:	5c5b      	ldrb	r3, [r3, r1]
   11648:	0028      	movs	r0, r5
   1164a:	7033      	strb	r3, [r6, #0]
   1164c:	0039      	movs	r1, r7
   1164e:	f7ff f81b 	bl	10688 <__udivsi3>
   11652:	1e05      	subs	r5, r0, #0
   11654:	d1f1      	bne.n	1163a <_printf_i+0x1d6>
   11656:	2f08      	cmp	r7, #8
   11658:	d109      	bne.n	1166e <_printf_i+0x20a>
   1165a:	6823      	ldr	r3, [r4, #0]
   1165c:	07db      	lsls	r3, r3, #31
   1165e:	d506      	bpl.n	1166e <_printf_i+0x20a>
   11660:	6863      	ldr	r3, [r4, #4]
   11662:	6922      	ldr	r2, [r4, #16]
   11664:	4293      	cmp	r3, r2
   11666:	dc02      	bgt.n	1166e <_printf_i+0x20a>
   11668:	2330      	movs	r3, #48	; 0x30
   1166a:	3e01      	subs	r6, #1
   1166c:	7033      	strb	r3, [r6, #0]
   1166e:	9b04      	ldr	r3, [sp, #16]
   11670:	1b9b      	subs	r3, r3, r6
   11672:	6123      	str	r3, [r4, #16]
   11674:	9b07      	ldr	r3, [sp, #28]
   11676:	aa09      	add	r2, sp, #36	; 0x24
   11678:	9300      	str	r3, [sp, #0]
   1167a:	0021      	movs	r1, r4
   1167c:	9b06      	ldr	r3, [sp, #24]
   1167e:	9805      	ldr	r0, [sp, #20]
   11680:	f7ff fe82 	bl	11388 <_printf_common>
   11684:	1c43      	adds	r3, r0, #1
   11686:	d1b3      	bne.n	115f0 <_printf_i+0x18c>
   11688:	2001      	movs	r0, #1
   1168a:	4240      	negs	r0, r0
   1168c:	b00b      	add	sp, #44	; 0x2c
   1168e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   11690:	00011da2 	.word	0x00011da2
   11694:	00011d91 	.word	0x00011d91

00011698 <_sbrk_r>:
   11698:	2300      	movs	r3, #0
   1169a:	b570      	push	{r4, r5, r6, lr}
   1169c:	4c06      	ldr	r4, [pc, #24]	; (116b8 <_sbrk_r+0x20>)
   1169e:	0005      	movs	r5, r0
   116a0:	0008      	movs	r0, r1
   116a2:	6023      	str	r3, [r4, #0]
   116a4:	f7fc fa6a 	bl	db7c <_sbrk>
   116a8:	1c43      	adds	r3, r0, #1
   116aa:	d103      	bne.n	116b4 <_sbrk_r+0x1c>
   116ac:	6823      	ldr	r3, [r4, #0]
   116ae:	2b00      	cmp	r3, #0
   116b0:	d000      	beq.n	116b4 <_sbrk_r+0x1c>
   116b2:	602b      	str	r3, [r5, #0]
   116b4:	bd70      	pop	{r4, r5, r6, pc}
   116b6:	46c0      	nop			; (mov r8, r8)
   116b8:	20000a78 	.word	0x20000a78

000116bc <__sread>:
   116bc:	b570      	push	{r4, r5, r6, lr}
   116be:	000c      	movs	r4, r1
   116c0:	250e      	movs	r5, #14
   116c2:	5f49      	ldrsh	r1, [r1, r5]
   116c4:	f000 f97e 	bl	119c4 <_read_r>
   116c8:	2800      	cmp	r0, #0
   116ca:	db03      	blt.n	116d4 <__sread+0x18>
   116cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   116ce:	181b      	adds	r3, r3, r0
   116d0:	6563      	str	r3, [r4, #84]	; 0x54
   116d2:	bd70      	pop	{r4, r5, r6, pc}
   116d4:	89a3      	ldrh	r3, [r4, #12]
   116d6:	4a02      	ldr	r2, [pc, #8]	; (116e0 <__sread+0x24>)
   116d8:	4013      	ands	r3, r2
   116da:	81a3      	strh	r3, [r4, #12]
   116dc:	e7f9      	b.n	116d2 <__sread+0x16>
   116de:	46c0      	nop			; (mov r8, r8)
   116e0:	ffffefff 	.word	0xffffefff

000116e4 <__swrite>:
   116e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116e6:	001f      	movs	r7, r3
   116e8:	898b      	ldrh	r3, [r1, #12]
   116ea:	0005      	movs	r5, r0
   116ec:	000c      	movs	r4, r1
   116ee:	0016      	movs	r6, r2
   116f0:	05db      	lsls	r3, r3, #23
   116f2:	d505      	bpl.n	11700 <__swrite+0x1c>
   116f4:	230e      	movs	r3, #14
   116f6:	5ec9      	ldrsh	r1, [r1, r3]
   116f8:	2200      	movs	r2, #0
   116fa:	2302      	movs	r3, #2
   116fc:	f000 f940 	bl	11980 <_lseek_r>
   11700:	89a3      	ldrh	r3, [r4, #12]
   11702:	4a05      	ldr	r2, [pc, #20]	; (11718 <__swrite+0x34>)
   11704:	0028      	movs	r0, r5
   11706:	4013      	ands	r3, r2
   11708:	81a3      	strh	r3, [r4, #12]
   1170a:	0032      	movs	r2, r6
   1170c:	230e      	movs	r3, #14
   1170e:	5ee1      	ldrsh	r1, [r4, r3]
   11710:	003b      	movs	r3, r7
   11712:	f000 f875 	bl	11800 <_write_r>
   11716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11718:	ffffefff 	.word	0xffffefff

0001171c <__sseek>:
   1171c:	b570      	push	{r4, r5, r6, lr}
   1171e:	000c      	movs	r4, r1
   11720:	250e      	movs	r5, #14
   11722:	5f49      	ldrsh	r1, [r1, r5]
   11724:	f000 f92c 	bl	11980 <_lseek_r>
   11728:	89a3      	ldrh	r3, [r4, #12]
   1172a:	1c42      	adds	r2, r0, #1
   1172c:	d103      	bne.n	11736 <__sseek+0x1a>
   1172e:	4a05      	ldr	r2, [pc, #20]	; (11744 <__sseek+0x28>)
   11730:	4013      	ands	r3, r2
   11732:	81a3      	strh	r3, [r4, #12]
   11734:	bd70      	pop	{r4, r5, r6, pc}
   11736:	2280      	movs	r2, #128	; 0x80
   11738:	0152      	lsls	r2, r2, #5
   1173a:	4313      	orrs	r3, r2
   1173c:	81a3      	strh	r3, [r4, #12]
   1173e:	6560      	str	r0, [r4, #84]	; 0x54
   11740:	e7f8      	b.n	11734 <__sseek+0x18>
   11742:	46c0      	nop			; (mov r8, r8)
   11744:	ffffefff 	.word	0xffffefff

00011748 <__sclose>:
   11748:	b510      	push	{r4, lr}
   1174a:	230e      	movs	r3, #14
   1174c:	5ec9      	ldrsh	r1, [r1, r3]
   1174e:	f000 f8e1 	bl	11914 <_close_r>
   11752:	bd10      	pop	{r4, pc}

00011754 <__swbuf_r>:
   11754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11756:	0005      	movs	r5, r0
   11758:	000e      	movs	r6, r1
   1175a:	0014      	movs	r4, r2
   1175c:	2800      	cmp	r0, #0
   1175e:	d004      	beq.n	1176a <__swbuf_r+0x16>
   11760:	6983      	ldr	r3, [r0, #24]
   11762:	2b00      	cmp	r3, #0
   11764:	d101      	bne.n	1176a <__swbuf_r+0x16>
   11766:	f7ff fb1d 	bl	10da4 <__sinit>
   1176a:	4b22      	ldr	r3, [pc, #136]	; (117f4 <__swbuf_r+0xa0>)
   1176c:	429c      	cmp	r4, r3
   1176e:	d12d      	bne.n	117cc <__swbuf_r+0x78>
   11770:	686c      	ldr	r4, [r5, #4]
   11772:	69a3      	ldr	r3, [r4, #24]
   11774:	60a3      	str	r3, [r4, #8]
   11776:	89a3      	ldrh	r3, [r4, #12]
   11778:	071b      	lsls	r3, r3, #28
   1177a:	d531      	bpl.n	117e0 <__swbuf_r+0x8c>
   1177c:	6923      	ldr	r3, [r4, #16]
   1177e:	2b00      	cmp	r3, #0
   11780:	d02e      	beq.n	117e0 <__swbuf_r+0x8c>
   11782:	6823      	ldr	r3, [r4, #0]
   11784:	6922      	ldr	r2, [r4, #16]
   11786:	b2f7      	uxtb	r7, r6
   11788:	1a98      	subs	r0, r3, r2
   1178a:	6963      	ldr	r3, [r4, #20]
   1178c:	b2f6      	uxtb	r6, r6
   1178e:	4298      	cmp	r0, r3
   11790:	db05      	blt.n	1179e <__swbuf_r+0x4a>
   11792:	0021      	movs	r1, r4
   11794:	0028      	movs	r0, r5
   11796:	f7ff fa97 	bl	10cc8 <_fflush_r>
   1179a:	2800      	cmp	r0, #0
   1179c:	d126      	bne.n	117ec <__swbuf_r+0x98>
   1179e:	68a3      	ldr	r3, [r4, #8]
   117a0:	3001      	adds	r0, #1
   117a2:	3b01      	subs	r3, #1
   117a4:	60a3      	str	r3, [r4, #8]
   117a6:	6823      	ldr	r3, [r4, #0]
   117a8:	1c5a      	adds	r2, r3, #1
   117aa:	6022      	str	r2, [r4, #0]
   117ac:	701f      	strb	r7, [r3, #0]
   117ae:	6963      	ldr	r3, [r4, #20]
   117b0:	4298      	cmp	r0, r3
   117b2:	d004      	beq.n	117be <__swbuf_r+0x6a>
   117b4:	89a3      	ldrh	r3, [r4, #12]
   117b6:	07db      	lsls	r3, r3, #31
   117b8:	d51a      	bpl.n	117f0 <__swbuf_r+0x9c>
   117ba:	2e0a      	cmp	r6, #10
   117bc:	d118      	bne.n	117f0 <__swbuf_r+0x9c>
   117be:	0021      	movs	r1, r4
   117c0:	0028      	movs	r0, r5
   117c2:	f7ff fa81 	bl	10cc8 <_fflush_r>
   117c6:	2800      	cmp	r0, #0
   117c8:	d012      	beq.n	117f0 <__swbuf_r+0x9c>
   117ca:	e00f      	b.n	117ec <__swbuf_r+0x98>
   117cc:	4b0a      	ldr	r3, [pc, #40]	; (117f8 <__swbuf_r+0xa4>)
   117ce:	429c      	cmp	r4, r3
   117d0:	d101      	bne.n	117d6 <__swbuf_r+0x82>
   117d2:	68ac      	ldr	r4, [r5, #8]
   117d4:	e7cd      	b.n	11772 <__swbuf_r+0x1e>
   117d6:	4b09      	ldr	r3, [pc, #36]	; (117fc <__swbuf_r+0xa8>)
   117d8:	429c      	cmp	r4, r3
   117da:	d1ca      	bne.n	11772 <__swbuf_r+0x1e>
   117dc:	68ec      	ldr	r4, [r5, #12]
   117de:	e7c8      	b.n	11772 <__swbuf_r+0x1e>
   117e0:	0021      	movs	r1, r4
   117e2:	0028      	movs	r0, r5
   117e4:	f000 f820 	bl	11828 <__swsetup_r>
   117e8:	2800      	cmp	r0, #0
   117ea:	d0ca      	beq.n	11782 <__swbuf_r+0x2e>
   117ec:	2601      	movs	r6, #1
   117ee:	4276      	negs	r6, r6
   117f0:	0030      	movs	r0, r6
   117f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   117f4:	00011d40 	.word	0x00011d40
   117f8:	00011d60 	.word	0x00011d60
   117fc:	00011d20 	.word	0x00011d20

00011800 <_write_r>:
   11800:	b570      	push	{r4, r5, r6, lr}
   11802:	0005      	movs	r5, r0
   11804:	0008      	movs	r0, r1
   11806:	0011      	movs	r1, r2
   11808:	2200      	movs	r2, #0
   1180a:	4c06      	ldr	r4, [pc, #24]	; (11824 <_write_r+0x24>)
   1180c:	6022      	str	r2, [r4, #0]
   1180e:	001a      	movs	r2, r3
   11810:	f7fc f978 	bl	db04 <_write>
   11814:	1c43      	adds	r3, r0, #1
   11816:	d103      	bne.n	11820 <_write_r+0x20>
   11818:	6823      	ldr	r3, [r4, #0]
   1181a:	2b00      	cmp	r3, #0
   1181c:	d000      	beq.n	11820 <_write_r+0x20>
   1181e:	602b      	str	r3, [r5, #0]
   11820:	bd70      	pop	{r4, r5, r6, pc}
   11822:	46c0      	nop			; (mov r8, r8)
   11824:	20000a78 	.word	0x20000a78

00011828 <__swsetup_r>:
   11828:	4b36      	ldr	r3, [pc, #216]	; (11904 <__swsetup_r+0xdc>)
   1182a:	b570      	push	{r4, r5, r6, lr}
   1182c:	681d      	ldr	r5, [r3, #0]
   1182e:	0006      	movs	r6, r0
   11830:	000c      	movs	r4, r1
   11832:	2d00      	cmp	r5, #0
   11834:	d005      	beq.n	11842 <__swsetup_r+0x1a>
   11836:	69ab      	ldr	r3, [r5, #24]
   11838:	2b00      	cmp	r3, #0
   1183a:	d102      	bne.n	11842 <__swsetup_r+0x1a>
   1183c:	0028      	movs	r0, r5
   1183e:	f7ff fab1 	bl	10da4 <__sinit>
   11842:	4b31      	ldr	r3, [pc, #196]	; (11908 <__swsetup_r+0xe0>)
   11844:	429c      	cmp	r4, r3
   11846:	d10f      	bne.n	11868 <__swsetup_r+0x40>
   11848:	686c      	ldr	r4, [r5, #4]
   1184a:	230c      	movs	r3, #12
   1184c:	5ee2      	ldrsh	r2, [r4, r3]
   1184e:	b293      	uxth	r3, r2
   11850:	0719      	lsls	r1, r3, #28
   11852:	d42d      	bmi.n	118b0 <__swsetup_r+0x88>
   11854:	06d9      	lsls	r1, r3, #27
   11856:	d411      	bmi.n	1187c <__swsetup_r+0x54>
   11858:	2309      	movs	r3, #9
   1185a:	2001      	movs	r0, #1
   1185c:	6033      	str	r3, [r6, #0]
   1185e:	3337      	adds	r3, #55	; 0x37
   11860:	4313      	orrs	r3, r2
   11862:	81a3      	strh	r3, [r4, #12]
   11864:	4240      	negs	r0, r0
   11866:	bd70      	pop	{r4, r5, r6, pc}
   11868:	4b28      	ldr	r3, [pc, #160]	; (1190c <__swsetup_r+0xe4>)
   1186a:	429c      	cmp	r4, r3
   1186c:	d101      	bne.n	11872 <__swsetup_r+0x4a>
   1186e:	68ac      	ldr	r4, [r5, #8]
   11870:	e7eb      	b.n	1184a <__swsetup_r+0x22>
   11872:	4b27      	ldr	r3, [pc, #156]	; (11910 <__swsetup_r+0xe8>)
   11874:	429c      	cmp	r4, r3
   11876:	d1e8      	bne.n	1184a <__swsetup_r+0x22>
   11878:	68ec      	ldr	r4, [r5, #12]
   1187a:	e7e6      	b.n	1184a <__swsetup_r+0x22>
   1187c:	075b      	lsls	r3, r3, #29
   1187e:	d513      	bpl.n	118a8 <__swsetup_r+0x80>
   11880:	6b61      	ldr	r1, [r4, #52]	; 0x34
   11882:	2900      	cmp	r1, #0
   11884:	d008      	beq.n	11898 <__swsetup_r+0x70>
   11886:	0023      	movs	r3, r4
   11888:	3344      	adds	r3, #68	; 0x44
   1188a:	4299      	cmp	r1, r3
   1188c:	d002      	beq.n	11894 <__swsetup_r+0x6c>
   1188e:	0030      	movs	r0, r6
   11890:	f7ff fb8e 	bl	10fb0 <_free_r>
   11894:	2300      	movs	r3, #0
   11896:	6363      	str	r3, [r4, #52]	; 0x34
   11898:	2224      	movs	r2, #36	; 0x24
   1189a:	89a3      	ldrh	r3, [r4, #12]
   1189c:	4393      	bics	r3, r2
   1189e:	81a3      	strh	r3, [r4, #12]
   118a0:	2300      	movs	r3, #0
   118a2:	6063      	str	r3, [r4, #4]
   118a4:	6923      	ldr	r3, [r4, #16]
   118a6:	6023      	str	r3, [r4, #0]
   118a8:	2308      	movs	r3, #8
   118aa:	89a2      	ldrh	r2, [r4, #12]
   118ac:	4313      	orrs	r3, r2
   118ae:	81a3      	strh	r3, [r4, #12]
   118b0:	6923      	ldr	r3, [r4, #16]
   118b2:	2b00      	cmp	r3, #0
   118b4:	d10b      	bne.n	118ce <__swsetup_r+0xa6>
   118b6:	21a0      	movs	r1, #160	; 0xa0
   118b8:	2280      	movs	r2, #128	; 0x80
   118ba:	89a3      	ldrh	r3, [r4, #12]
   118bc:	0089      	lsls	r1, r1, #2
   118be:	0092      	lsls	r2, r2, #2
   118c0:	400b      	ands	r3, r1
   118c2:	4293      	cmp	r3, r2
   118c4:	d003      	beq.n	118ce <__swsetup_r+0xa6>
   118c6:	0021      	movs	r1, r4
   118c8:	0030      	movs	r0, r6
   118ca:	f7ff fb29 	bl	10f20 <__smakebuf_r>
   118ce:	2301      	movs	r3, #1
   118d0:	89a2      	ldrh	r2, [r4, #12]
   118d2:	4013      	ands	r3, r2
   118d4:	d011      	beq.n	118fa <__swsetup_r+0xd2>
   118d6:	2300      	movs	r3, #0
   118d8:	60a3      	str	r3, [r4, #8]
   118da:	6963      	ldr	r3, [r4, #20]
   118dc:	425b      	negs	r3, r3
   118de:	61a3      	str	r3, [r4, #24]
   118e0:	2000      	movs	r0, #0
   118e2:	6923      	ldr	r3, [r4, #16]
   118e4:	4283      	cmp	r3, r0
   118e6:	d1be      	bne.n	11866 <__swsetup_r+0x3e>
   118e8:	230c      	movs	r3, #12
   118ea:	5ee2      	ldrsh	r2, [r4, r3]
   118ec:	0613      	lsls	r3, r2, #24
   118ee:	d5ba      	bpl.n	11866 <__swsetup_r+0x3e>
   118f0:	2340      	movs	r3, #64	; 0x40
   118f2:	4313      	orrs	r3, r2
   118f4:	81a3      	strh	r3, [r4, #12]
   118f6:	3801      	subs	r0, #1
   118f8:	e7b5      	b.n	11866 <__swsetup_r+0x3e>
   118fa:	0792      	lsls	r2, r2, #30
   118fc:	d400      	bmi.n	11900 <__swsetup_r+0xd8>
   118fe:	6963      	ldr	r3, [r4, #20]
   11900:	60a3      	str	r3, [r4, #8]
   11902:	e7ed      	b.n	118e0 <__swsetup_r+0xb8>
   11904:	20000120 	.word	0x20000120
   11908:	00011d40 	.word	0x00011d40
   1190c:	00011d60 	.word	0x00011d60
   11910:	00011d20 	.word	0x00011d20

00011914 <_close_r>:
   11914:	2300      	movs	r3, #0
   11916:	b570      	push	{r4, r5, r6, lr}
   11918:	4c06      	ldr	r4, [pc, #24]	; (11934 <_close_r+0x20>)
   1191a:	0005      	movs	r5, r0
   1191c:	0008      	movs	r0, r1
   1191e:	6023      	str	r3, [r4, #0]
   11920:	f7fc f95c 	bl	dbdc <_close>
   11924:	1c43      	adds	r3, r0, #1
   11926:	d103      	bne.n	11930 <_close_r+0x1c>
   11928:	6823      	ldr	r3, [r4, #0]
   1192a:	2b00      	cmp	r3, #0
   1192c:	d000      	beq.n	11930 <_close_r+0x1c>
   1192e:	602b      	str	r3, [r5, #0]
   11930:	bd70      	pop	{r4, r5, r6, pc}
   11932:	46c0      	nop			; (mov r8, r8)
   11934:	20000a78 	.word	0x20000a78

00011938 <_fstat_r>:
   11938:	2300      	movs	r3, #0
   1193a:	b570      	push	{r4, r5, r6, lr}
   1193c:	4c06      	ldr	r4, [pc, #24]	; (11958 <_fstat_r+0x20>)
   1193e:	0005      	movs	r5, r0
   11940:	0008      	movs	r0, r1
   11942:	0011      	movs	r1, r2
   11944:	6023      	str	r3, [r4, #0]
   11946:	f7fc f953 	bl	dbf0 <_fstat>
   1194a:	1c43      	adds	r3, r0, #1
   1194c:	d103      	bne.n	11956 <_fstat_r+0x1e>
   1194e:	6823      	ldr	r3, [r4, #0]
   11950:	2b00      	cmp	r3, #0
   11952:	d000      	beq.n	11956 <_fstat_r+0x1e>
   11954:	602b      	str	r3, [r5, #0]
   11956:	bd70      	pop	{r4, r5, r6, pc}
   11958:	20000a78 	.word	0x20000a78

0001195c <_isatty_r>:
   1195c:	2300      	movs	r3, #0
   1195e:	b570      	push	{r4, r5, r6, lr}
   11960:	4c06      	ldr	r4, [pc, #24]	; (1197c <_isatty_r+0x20>)
   11962:	0005      	movs	r5, r0
   11964:	0008      	movs	r0, r1
   11966:	6023      	str	r3, [r4, #0]
   11968:	f7fc f950 	bl	dc0c <_isatty>
   1196c:	1c43      	adds	r3, r0, #1
   1196e:	d103      	bne.n	11978 <_isatty_r+0x1c>
   11970:	6823      	ldr	r3, [r4, #0]
   11972:	2b00      	cmp	r3, #0
   11974:	d000      	beq.n	11978 <_isatty_r+0x1c>
   11976:	602b      	str	r3, [r5, #0]
   11978:	bd70      	pop	{r4, r5, r6, pc}
   1197a:	46c0      	nop			; (mov r8, r8)
   1197c:	20000a78 	.word	0x20000a78

00011980 <_lseek_r>:
   11980:	b570      	push	{r4, r5, r6, lr}
   11982:	0005      	movs	r5, r0
   11984:	0008      	movs	r0, r1
   11986:	0011      	movs	r1, r2
   11988:	2200      	movs	r2, #0
   1198a:	4c06      	ldr	r4, [pc, #24]	; (119a4 <_lseek_r+0x24>)
   1198c:	6022      	str	r2, [r4, #0]
   1198e:	001a      	movs	r2, r3
   11990:	f7fc f945 	bl	dc1e <_lseek>
   11994:	1c43      	adds	r3, r0, #1
   11996:	d103      	bne.n	119a0 <_lseek_r+0x20>
   11998:	6823      	ldr	r3, [r4, #0]
   1199a:	2b00      	cmp	r3, #0
   1199c:	d000      	beq.n	119a0 <_lseek_r+0x20>
   1199e:	602b      	str	r3, [r5, #0]
   119a0:	bd70      	pop	{r4, r5, r6, pc}
   119a2:	46c0      	nop			; (mov r8, r8)
   119a4:	20000a78 	.word	0x20000a78

000119a8 <memchr>:
   119a8:	b2c9      	uxtb	r1, r1
   119aa:	1882      	adds	r2, r0, r2
   119ac:	4290      	cmp	r0, r2
   119ae:	d101      	bne.n	119b4 <memchr+0xc>
   119b0:	2000      	movs	r0, #0
   119b2:	4770      	bx	lr
   119b4:	7803      	ldrb	r3, [r0, #0]
   119b6:	428b      	cmp	r3, r1
   119b8:	d0fb      	beq.n	119b2 <memchr+0xa>
   119ba:	3001      	adds	r0, #1
   119bc:	e7f6      	b.n	119ac <memchr+0x4>

000119be <__malloc_lock>:
   119be:	4770      	bx	lr

000119c0 <__malloc_unlock>:
   119c0:	4770      	bx	lr
	...

000119c4 <_read_r>:
   119c4:	b570      	push	{r4, r5, r6, lr}
   119c6:	0005      	movs	r5, r0
   119c8:	0008      	movs	r0, r1
   119ca:	0011      	movs	r1, r2
   119cc:	2200      	movs	r2, #0
   119ce:	4c06      	ldr	r4, [pc, #24]	; (119e8 <_read_r+0x24>)
   119d0:	6022      	str	r2, [r4, #0]
   119d2:	001a      	movs	r2, r3
   119d4:	f7fc f866 	bl	daa4 <_read>
   119d8:	1c43      	adds	r3, r0, #1
   119da:	d103      	bne.n	119e4 <_read_r+0x20>
   119dc:	6823      	ldr	r3, [r4, #0]
   119de:	2b00      	cmp	r3, #0
   119e0:	d000      	beq.n	119e4 <_read_r+0x20>
   119e2:	602b      	str	r3, [r5, #0]
   119e4:	bd70      	pop	{r4, r5, r6, pc}
   119e6:	46c0      	nop			; (mov r8, r8)
   119e8:	20000a78 	.word	0x20000a78

000119ec <sd_mmc_trans_units>:
   119ec:	0000000a 00000064 000003e8 00002710     ....d........'..
	...

00011a08 <sd_trans_multipliers>:
   11a08:	00000000 0000000a 0000000c 0000000d     ................
   11a18:	0000000f 00000014 00000019 0000001e     ................
   11a28:	00000023 00000028 0000002d 00000032     #...(...-...2...
   11a38:	00000037 0000003c 00000046 00000050     7...<...F...P...

00011a48 <mmc_trans_multipliers>:
   11a48:	00000000 0000000a 0000000c 0000000d     ................
   11a58:	0000000f 00000014 0000001a 0000001e     ................
   11a68:	00000023 00000028 0000002d 00000034     #...(...-...4...
   11a78:	00000037 0000003c 00000046 00000050     7...<...F...P...
   11a88:	695f6473 6567616d 6e69622e 00000000     sd_image.bin....
   11a98:	000a0a0a 2e2e2e2e 6f42202e 6f6c746f     ......... Bootlo
   11aa8:	72656461 61747320 64657472 2e2e2e20     ader started ...
   11ab8:	000a2e2e 313a3232 32313a34 00000000     ....22:14:12....
   11ac8:	20727041 32203731 00373130 706d6f43     Apr 17 2017.Comp
   11ad8:	64656c69 3a6e6f20 20732520 0a207325     iled on: %s %s .
   11ae8:	00000a0a 20435452 75646f6d 6920656c     ....RTC module i
   11af8:	2074696e 6c696166 0a2e6465 00000000     nit failed......
   11b08:	20444f42 75646f6d 6920656c 2074696e     BOD module init 
   11b18:	6c696166 0a2e6465 00000000 49545845     failed......EXTI
   11b28:	6d20544e 6c75646f 6e692065 66207469     NT module init f
   11b38:	656c6961 000a2e64 204d564e 75646f6d     ailed...NVM modu
   11b48:	6920656c 2074696e 6c696166 0a2e6465     le init failed..
   11b58:	00000000 61636f4c 6954206c 203a656d     ....Local Time: 
   11b68:	252f6425 64252f64 64252020 3a64253a     %d/%d/%d  %d:%d:
   11b78:	000a6425 20544f4e 4e554f46 00000044     %d..NOT FOUND...
   11b88:	4e554f46 00000044 2077654e 67616d69     FOUND...New imag
   11b98:	69662065 203a656c 000a7325 68746f4e     e file: %s..Noth
   11ba8:	20676e69 64206f74 47202e6f 676e696f     ing to do. Going
   11bb8:	206f7420 65656c73 000a2e70 656c6946      to sleep...File
   11bc8:	65706f20 6166206e 64656c69 00000a2e      open failed....
   11bd8:	656c6946 63786520 73646565 78616d20     File exceeds max
   11be8:	7a697320 666f2065 20642520 65747962      size of %d byte
   11bf8:	000a2e73 656c6946 61657220 72652064     s...File read er
   11c08:	20726f72 65746661 64252072 74796220     ror after %d byt
   11c18:	000a7365 676f7250 656d6172 75252064     es..Programed %u
   11c28:	20666f20 62207525 73657479 0000000a      of %u bytes....
   11c38:	206f6f54 796e616d 74796220 000a7365     Too many bytes..
   11c48:	62616e55 7420656c 6564206f 6574656c     Unable to delete
   11c58:	6c696620 000a2e65 756f6853 6e20646c      file...Should n
   11c68:	6220746f 65682065 000a6572 204d564e     ot be here..NVM 
   11c78:	73617265 6f722065 72652077 0a726f72     erase row error.
   11c88:	00000000 204d564e 74697277 75622065     ....NVM write bu
   11c98:	72656666 72726520 000a726f 63656843     ffer error..Chec
   11ca8:	6166206b 64656c69 0000000a 2e2e3231     k failed....12..
   11cb8:	0046452e 42000800 42000c00 42001000     .EF....B...B...B
   11cc8:	42001400 42001800 42001c00 0c0b0a09     ...B...B...B....
   11cd8:	00000e0d 2f445322 20434d4d 64726143     ...."SD/MMC Card
   11ce8:	6f6c5320 22302074 00000000 01020300      Slot 0"........

00011cf8 <_usb_device_irq_bits>:
   11cf8:	00080004 00800070 01000001 00000200     ....p...........

00011d08 <_usb_endpoint_irq_bits>:
   11d08:	60100c03 2c2b2a22 3d3c3b3a 5d5b3f3e     ...`"*+,:;<=>?[]
   11d18:	00007f7c                                |...

00011d1c <_global_impure_ptr>:
   11d1c:	20000124                                $.. 

00011d20 <__sf_fake_stderr>:
	...

00011d40 <__sf_fake_stdin>:
	...

00011d60 <__sf_fake_stdout>:
	...
   11d80:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
   11d90:	32313000 36353433 41393837 45444342     .0123456789ABCDE
   11da0:	31300046 35343332 39383736 64636261     F.0123456789abcd
   11db0:	00006665                                ef..

00011db4 <_init>:
   11db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11db6:	46c0      	nop			; (mov r8, r8)
   11db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11dba:	bc08      	pop	{r3}
   11dbc:	469e      	mov	lr, r3
   11dbe:	4770      	bx	lr

00011dc0 <__init_array_start>:
   11dc0:	000000dd 	.word	0x000000dd

00011dc4 <_fini>:
   11dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11dc6:	46c0      	nop			; (mov r8, r8)
   11dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   11dca:	bc08      	pop	{r3}
   11dcc:	469e      	mov	lr, r3
   11dce:	4770      	bx	lr

00011dd0 <__fini_array_start>:
   11dd0:	000000b5 	.word	0x000000b5
