
Bootloader_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004bac  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00004bac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000478  2000000c  00004bb8  0002000c  2**2
                  ALLOC
  3 .stack        00002004  20000484  00005030  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY
  6 .debug_info   00002efa  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000118f  00000000  00000000  00022f89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000118b  00000000  00000000  00024118  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b50  00000000  00000000  000252a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000013a8  00000000  00000000  00025df3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004c78  00000000  00000000  0002719b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002538  00000000  00000000  0002be13  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001e90  00000000  00000000  0002e34c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	88 24 00 20 21 47 00 00 1d 47 00 00 1d 47 00 00     .$. !G...G...G..
	...
      2c:	1d 47 00 00 00 00 00 00 00 00 00 00 1d 47 00 00     .G...........G..
      3c:	1d 47 00 00 1d 47 00 00 b5 1f 00 00 1d 47 00 00     .G...G.......G..
      4c:	25 0c 00 00 e1 2e 00 00 1d 47 00 00 1d 47 00 00     %........G...G..
      5c:	55 39 00 00 1d 47 00 00 61 2e 00 00 71 2e 00 00     U9...G..a...q...
      6c:	81 2e 00 00 91 2e 00 00 a1 2e 00 00 b1 2e 00 00     ................
      7c:	1d 47 00 00 1d 47 00 00 1d 47 00 00 1d 47 00 00     .G...G...G...G..
      8c:	1d 47 00 00 1d 47 00 00 00 00 00 00 00 00 00 00     .G...G..........
      9c:	1d 47 00 00 1d 47 00 00 1d 47 00 00 1d 47 00 00     .G...G...G...G..
      ac:	1d 47 00 00 00 00 00 00                             .G......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00004bac 	.word	0x00004bac

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00004bac 	.word	0x00004bac
     10c:	00004bac 	.word	0x00004bac
     110:	00000000 	.word	0x00000000

00000114 <SDMMC_UNSTUFF_BITS>:
 * \brief Macro function to extract a bits field from a large SD MMC register
 * Used by : CSD, SCR, Switch status
 */
static inline uint32_t SDMMC_UNSTUFF_BITS(uint8_t *reg, uint16_t reg_size,
		uint16_t pos, uint8_t size)
{
     114:	b570      	push	{r4, r5, r6, lr}
	uint32_t value;
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     116:	2507      	movs	r5, #7
     118:	1a8c      	subs	r4, r1, r2
     11a:	3407      	adds	r4, #7
     11c:	17e1      	asrs	r1, r4, #31
     11e:	4029      	ands	r1, r5
     120:	1909      	adds	r1, r1, r4
     122:	10c9      	asrs	r1, r1, #3
     124:	1840      	adds	r0, r0, r1
     126:	1e41      	subs	r1, r0, #1
     128:	402a      	ands	r2, r5
     12a:	7809      	ldrb	r1, [r1, #0]
	if (((pos % 8) + size) > 8) {
     12c:	18d6      	adds	r6, r2, r3
	value = reg[((reg_size - pos + 7) / 8) - 1] >> (pos % 8);
     12e:	4111      	asrs	r1, r2
	if (((pos % 8) + size) > 8) {
     130:	2e08      	cmp	r6, #8
     132:	dd0d      	ble.n	150 <SDMMC_UNSTUFF_BITS+0x3c>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 2] << (8 - (pos % 8));
     134:	1e84      	subs	r4, r0, #2
     136:	7824      	ldrb	r4, [r4, #0]
     138:	3501      	adds	r5, #1
     13a:	1aad      	subs	r5, r5, r2
     13c:	40ac      	lsls	r4, r5
     13e:	4321      	orrs	r1, r4
	}
	if (((pos % 8) + size) > 16) {
     140:	2e10      	cmp	r6, #16
     142:	dd05      	ble.n	150 <SDMMC_UNSTUFF_BITS+0x3c>
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     144:	2410      	movs	r4, #16
     146:	3803      	subs	r0, #3
     148:	7800      	ldrb	r0, [r0, #0]
     14a:	1aa2      	subs	r2, r4, r2
     14c:	4090      	lsls	r0, r2
	}
	if (((pos % 8) + size) > 16) {
		value |= (uint32_t)reg[((reg_size - pos + 7) / 8) - 3] << (16 - (pos % 8));
     14e:	4301      	orrs	r1, r0
	}
	value &=  ((uint32_t)1 << size) - 1;
     150:	2001      	movs	r0, #1
     152:	4098      	lsls	r0, r3
     154:	3801      	subs	r0, #1
     156:	4008      	ands	r0, r1
	return value;
}
     158:	bd70      	pop	{r4, r5, r6, pc}
	...

0000015c <sd_mmc_configure_slot>:

/**
 * \brief Configures the driver with the selected card configuration
 */
static void sd_mmc_configure_slot(void)
{
     15c:	b510      	push	{r4, lr}
	driver_select_device(sd_mmc_slot_sel, sd_mmc_card->clock,
     15e:	4b06      	ldr	r3, [pc, #24]	; (178 <sd_mmc_configure_slot+0x1c>)
     160:	4806      	ldr	r0, [pc, #24]	; (17c <sd_mmc_configure_slot+0x20>)
     162:	6819      	ldr	r1, [r3, #0]
     164:	7800      	ldrb	r0, [r0, #0]
     166:	7f8b      	ldrb	r3, [r1, #30]
     168:	4c05      	ldr	r4, [pc, #20]	; (180 <sd_mmc_configure_slot+0x24>)
     16a:	1e5a      	subs	r2, r3, #1
     16c:	4193      	sbcs	r3, r2
     16e:	7b4a      	ldrb	r2, [r1, #13]
     170:	b2db      	uxtb	r3, r3
     172:	6809      	ldr	r1, [r1, #0]
     174:	47a0      	blx	r4
			sd_mmc_card->bus_width, sd_mmc_card->high_speed);
}
     176:	bd10      	pop	{r4, pc}
     178:	20000028 	.word	0x20000028
     17c:	20000050 	.word	0x20000050
     180:	000032dd 	.word	0x000032dd

00000184 <sd_mmc_cmd13>:
{
     184:	b570      	push	{r4, r5, r6, lr}
			if (!(driver_get_response() & 0xFF)) {
     186:	26ff      	movs	r6, #255	; 0xff
{
     188:	4d08      	ldr	r5, [pc, #32]	; (1ac <sd_mmc_cmd13+0x28>)
			if (!driver_send_cmd(SDMMC_SPI_CMD13_SEND_STATUS, 0)) {
     18a:	2100      	movs	r1, #0
     18c:	4808      	ldr	r0, [pc, #32]	; (1b0 <sd_mmc_cmd13+0x2c>)
     18e:	4b09      	ldr	r3, [pc, #36]	; (1b4 <sd_mmc_cmd13+0x30>)
     190:	4798      	blx	r3
     192:	1e04      	subs	r4, r0, #0
     194:	d102      	bne.n	19c <sd_mmc_cmd13+0x18>
				return false;
     196:	2400      	movs	r4, #0
}
     198:	0020      	movs	r0, r4
     19a:	bd70      	pop	{r4, r5, r6, pc}
			if (!(driver_get_response() & 0xFF)) {
     19c:	4b06      	ldr	r3, [pc, #24]	; (1b8 <sd_mmc_cmd13+0x34>)
     19e:	4798      	blx	r3
     1a0:	4230      	tst	r0, r6
     1a2:	d0f9      	beq.n	198 <sd_mmc_cmd13+0x14>
     1a4:	3d01      	subs	r5, #1
		if (nec_timeout-- == 0) {
     1a6:	2d00      	cmp	r5, #0
     1a8:	d1ef      	bne.n	18a <sd_mmc_cmd13+0x6>
     1aa:	e7f4      	b.n	196 <sd_mmc_cmd13+0x12>
     1ac:	00030d41 	.word	0x00030d41
     1b0:	00001b0d 	.word	0x00001b0d
     1b4:	000034e9 	.word	0x000034e9
     1b8:	000034fd 	.word	0x000034fd

000001bc <sd_mmc_deselect_slot>:

/**
 * \brief Deselect the current card slot
 */
static void sd_mmc_deselect_slot(void)
{
     1bc:	b510      	push	{r4, lr}
	if (sd_mmc_slot_sel < SD_MMC_MEM_CNT) {
     1be:	4b03      	ldr	r3, [pc, #12]	; (1cc <sd_mmc_deselect_slot+0x10>)
     1c0:	7818      	ldrb	r0, [r3, #0]
     1c2:	2800      	cmp	r0, #0
     1c4:	d101      	bne.n	1ca <sd_mmc_deselect_slot+0xe>
		driver_deselect_device(sd_mmc_slot_sel);
     1c6:	4b02      	ldr	r3, [pc, #8]	; (1d0 <sd_mmc_deselect_slot+0x14>)
     1c8:	4798      	blx	r3
	}
}
     1ca:	bd10      	pop	{r4, pc}
     1cc:	20000050 	.word	0x20000050
     1d0:	00003331 	.word	0x00003331

000001d4 <sd_mmc_select_slot>:
{
     1d4:	b510      	push	{r4, lr}
		return SD_MMC_ERR_SLOT;
     1d6:	2304      	movs	r3, #4
	if (slot >= SD_MMC_MEM_CNT) {
     1d8:	2800      	cmp	r0, #0
     1da:	d117      	bne.n	20c <sd_mmc_select_slot+0x38>
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     1dc:	4c0c      	ldr	r4, [pc, #48]	; (210 <sd_mmc_select_slot+0x3c>)
			|| (sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_UNUSABLE)) {
     1de:	7aa3      	ldrb	r3, [r4, #10]
	if ((sd_mmc_cards[slot].state == SD_MMC_CARD_STATE_NO_CARD)
     1e0:	3b03      	subs	r3, #3
     1e2:	2b01      	cmp	r3, #1
     1e4:	d806      	bhi.n	1f4 <sd_mmc_select_slot+0x20>
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_INIT;
     1e6:	2302      	movs	r3, #2
     1e8:	72a3      	strb	r3, [r4, #10]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     1ea:	4b0a      	ldr	r3, [pc, #40]	; (214 <sd_mmc_select_slot+0x40>)
		sd_mmc_cards[slot].high_speed = 0;
     1ec:	77a0      	strb	r0, [r4, #30]
		sd_mmc_cards[slot].clock = SDMMC_CLOCK_INIT;
     1ee:	6023      	str	r3, [r4, #0]
		sd_mmc_cards[slot].bus_width = 1;
     1f0:	2301      	movs	r3, #1
     1f2:	7363      	strb	r3, [r4, #13]
	sd_mmc_slot_sel = slot;
     1f4:	2200      	movs	r2, #0
     1f6:	4b08      	ldr	r3, [pc, #32]	; (218 <sd_mmc_select_slot+0x44>)
     1f8:	701a      	strb	r2, [r3, #0]
	sd_mmc_card = &sd_mmc_cards[slot];
     1fa:	4b08      	ldr	r3, [pc, #32]	; (21c <sd_mmc_select_slot+0x48>)
     1fc:	601c      	str	r4, [r3, #0]
	sd_mmc_configure_slot();
     1fe:	4b08      	ldr	r3, [pc, #32]	; (220 <sd_mmc_select_slot+0x4c>)
     200:	4798      	blx	r3
			SD_MMC_INIT_ONGOING : SD_MMC_OK;
     202:	7aa3      	ldrb	r3, [r4, #10]
     204:	3b02      	subs	r3, #2
     206:	4258      	negs	r0, r3
     208:	4143      	adcs	r3, r0
     20a:	b2db      	uxtb	r3, r3
}
     20c:	0018      	movs	r0, r3
     20e:	bd10      	pop	{r4, pc}
     210:	2000002c 	.word	0x2000002c
     214:	00061a80 	.word	0x00061a80
     218:	20000050 	.word	0x20000050
     21c:	20000028 	.word	0x20000028
     220:	0000015d 	.word	0x0000015d

00000224 <sd_mmc_cmd9_spi>:
{
     224:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!driver_adtc_start(SDMMC_SPI_CMD9_SEND_CSD, (uint32_t)sd_mmc_card->rca << 16,
     226:	2401      	movs	r4, #1
     228:	4d0b      	ldr	r5, [pc, #44]	; (258 <sd_mmc_cmd9_spi+0x34>)
     22a:	2210      	movs	r2, #16
     22c:	682b      	ldr	r3, [r5, #0]
     22e:	480b      	ldr	r0, [pc, #44]	; (25c <sd_mmc_cmd9_spi+0x38>)
     230:	8919      	ldrh	r1, [r3, #8]
     232:	4e0b      	ldr	r6, [pc, #44]	; (260 <sd_mmc_cmd9_spi+0x3c>)
     234:	0409      	lsls	r1, r1, #16
     236:	9400      	str	r4, [sp, #0]
     238:	0023      	movs	r3, r4
     23a:	47b0      	blx	r6
     23c:	2800      	cmp	r0, #0
     23e:	d101      	bne.n	244 <sd_mmc_cmd9_spi+0x20>
		return false;
     240:	2000      	movs	r0, #0
}
     242:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	if (!driver_start_read_blocks(sd_mmc_card->csd, 1)) {
     244:	6828      	ldr	r0, [r5, #0]
     246:	0021      	movs	r1, r4
     248:	300e      	adds	r0, #14
     24a:	4b06      	ldr	r3, [pc, #24]	; (264 <sd_mmc_cmd9_spi+0x40>)
     24c:	4798      	blx	r3
     24e:	2800      	cmp	r0, #0
     250:	d0f6      	beq.n	240 <sd_mmc_cmd9_spi+0x1c>
	return driver_wait_end_of_read_blocks();
     252:	4b05      	ldr	r3, [pc, #20]	; (268 <sd_mmc_cmd9_spi+0x44>)
     254:	4798      	blx	r3
     256:	e7f4      	b.n	242 <sd_mmc_cmd9_spi+0x1e>
     258:	20000028 	.word	0x20000028
     25c:	00081109 	.word	0x00081109
     260:	0000338d 	.word	0x0000338d
     264:	00003579 	.word	0x00003579
     268:	000035e1 	.word	0x000035e1

0000026c <sd_mmc_init>:
	pmc_enable_periph_clk(SD_MMC_##slot##_WP_PIO_ID);
	MREPEAT(SD_MMC_MEM_CNT, SD_MMC_ENABLE_WP_PIN, ~)
# undef SD_MMC_ENABLE_WP_PIN
#endif
	for (uint8_t slot = 0; slot < SD_MMC_MEM_CNT; slot++) {
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     26c:	2204      	movs	r2, #4
{
     26e:	b510      	push	{r4, lr}
		sd_mmc_cards[slot].state = SD_MMC_CARD_STATE_NO_CARD;
     270:	4b03      	ldr	r3, [pc, #12]	; (280 <sd_mmc_init+0x14>)
     272:	729a      	strb	r2, [r3, #10]
	}
	sd_mmc_slot_sel = 0xFF; // No slot configurated
     274:	4b03      	ldr	r3, [pc, #12]	; (284 <sd_mmc_init+0x18>)
     276:	32fb      	adds	r2, #251	; 0xfb
     278:	701a      	strb	r2, [r3, #0]
	driver_init();
     27a:	4b03      	ldr	r3, [pc, #12]	; (288 <sd_mmc_init+0x1c>)
     27c:	4798      	blx	r3
}
     27e:	bd10      	pop	{r4, pc}
     280:	2000002c 	.word	0x2000002c
     284:	20000050 	.word	0x20000050
     288:	000031e5 	.word	0x000031e5

0000028c <sd_mmc_check>:
{
	return SD_MMC_MEM_CNT;
}

sd_mmc_err_t sd_mmc_check(uint8_t slot)
{
     28c:	b5f0      	push	{r4, r5, r6, r7, lr}
	sd_mmc_err_t sd_mmc_err;

	sd_mmc_err = sd_mmc_select_slot(slot);
     28e:	4bca      	ldr	r3, [pc, #808]	; (5b8 <sd_mmc_check+0x32c>)
{
     290:	b089      	sub	sp, #36	; 0x24
	sd_mmc_err = sd_mmc_select_slot(slot);
     292:	4798      	blx	r3
     294:	9002      	str	r0, [sp, #8]
	if (sd_mmc_err != SD_MMC_INIT_ONGOING) {
     296:	2801      	cmp	r0, #1
     298:	d004      	beq.n	2a4 <sd_mmc_check+0x18>
	// Initialization of the card requested
	if (sd_mmc_is_spi()? sd_mmc_spi_card_init()
			: sd_mmc_mci_card_init()) {
		sd_mmc_debug("SD/MMC card ready\n\r");
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
		sd_mmc_deselect_slot();
     29a:	4bc8      	ldr	r3, [pc, #800]	; (5bc <sd_mmc_check+0x330>)
     29c:	4798      	blx	r3
	}
	sd_mmc_debug("SD/MMC card initialization failed\n\r");
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
	sd_mmc_deselect_slot();
	return SD_MMC_ERR_UNUSABLE;
}
     29e:	9802      	ldr	r0, [sp, #8]
     2a0:	b009      	add	sp, #36	; 0x24
     2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sd_mmc_card->type = CARD_TYPE_SD;
     2a4:	466a      	mov	r2, sp
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     2a6:	2400      	movs	r4, #0
	sd_mmc_card->type = CARD_TYPE_SD;
     2a8:	4dc5      	ldr	r5, [pc, #788]	; (5c0 <sd_mmc_check+0x334>)
     2aa:	7a12      	ldrb	r2, [r2, #8]
     2ac:	682b      	ldr	r3, [r5, #0]
	sd_mmc_card->version = CARD_VER_UNKNOWN;
     2ae:	731c      	strb	r4, [r3, #12]
	sd_mmc_card->rca = 0;
     2b0:	811c      	strh	r4, [r3, #8]
	sd_mmc_card->type = CARD_TYPE_SD;
     2b2:	72da      	strb	r2, [r3, #11]
	driver_send_clock();
     2b4:	4bc3      	ldr	r3, [pc, #780]	; (5c4 <sd_mmc_check+0x338>)
     2b6:	4798      	blx	r3
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     2b8:	2088      	movs	r0, #136	; 0x88
     2ba:	0021      	movs	r1, r4
     2bc:	0140      	lsls	r0, r0, #5
     2be:	4cc2      	ldr	r4, [pc, #776]	; (5c8 <sd_mmc_check+0x33c>)
     2c0:	47a0      	blx	r4
     2c2:	2800      	cmp	r0, #0
     2c4:	d012      	beq.n	2ec <sd_mmc_check+0x60>
	if (!driver_send_cmd(SD_CMD8_SEND_IF_COND,
     2c6:	26d5      	movs	r6, #213	; 0xd5
     2c8:	0076      	lsls	r6, r6, #1
     2ca:	0031      	movs	r1, r6
     2cc:	48bf      	ldr	r0, [pc, #764]	; (5cc <sd_mmc_check+0x340>)
     2ce:	47a0      	blx	r4
     2d0:	2800      	cmp	r0, #0
     2d2:	d100      	bne.n	2d6 <sd_mmc_check+0x4a>
     2d4:	e1a2      	b.n	61c <sd_mmc_check+0x390>
	resp = driver_get_response();
     2d6:	4bbe      	ldr	r3, [pc, #760]	; (5d0 <sd_mmc_check+0x344>)
     2d8:	4798      	blx	r3
	if (resp == 0xFFFFFFFF) {
     2da:	1c43      	adds	r3, r0, #1
     2dc:	d100      	bne.n	2e0 <sd_mmc_check+0x54>
     2de:	e19d      	b.n	61c <sd_mmc_check+0x390>
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     2e0:	0500      	lsls	r0, r0, #20
     2e2:	0d00      	lsrs	r0, r0, #20
	*v2 = 1;
     2e4:	9b02      	ldr	r3, [sp, #8]
	if ((resp & (SD_CMD8_MASK_PATTERN | SD_CMD8_MASK_VOLTAGE))
     2e6:	42b0      	cmp	r0, r6
     2e8:	d100      	bne.n	2ec <sd_mmc_check+0x60>
     2ea:	e198      	b.n	61e <sd_mmc_check+0x392>
	sd_mmc_card->state = SD_MMC_CARD_STATE_UNUSABLE;
     2ec:	2403      	movs	r4, #3
     2ee:	4bb4      	ldr	r3, [pc, #720]	; (5c0 <sd_mmc_check+0x334>)
     2f0:	681b      	ldr	r3, [r3, #0]
     2f2:	729c      	strb	r4, [r3, #10]
	sd_mmc_deselect_slot();
     2f4:	4bb1      	ldr	r3, [pc, #708]	; (5bc <sd_mmc_check+0x330>)
     2f6:	4798      	blx	r3
	return SD_MMC_ERR_UNUSABLE;
     2f8:	9402      	str	r4, [sp, #8]
     2fa:	e7d0      	b.n	29e <sd_mmc_check+0x12>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     2fc:	48b5      	ldr	r0, [pc, #724]	; (5d4 <sd_mmc_check+0x348>)
     2fe:	47a0      	blx	r4
     300:	2800      	cmp	r0, #0
     302:	d100      	bne.n	306 <sd_mmc_check+0x7a>
     304:	e1a6      	b.n	654 <sd_mmc_check+0x3c8>
	if ((driver_get_response() & OCR_CCS) != 0) {
     306:	47b8      	blx	r7
     308:	0043      	lsls	r3, r0, #1
     30a:	d504      	bpl.n	316 <sd_mmc_check+0x8a>
		sd_mmc_card->type |= CARD_TYPE_HC;
     30c:	2308      	movs	r3, #8
     30e:	682a      	ldr	r2, [r5, #0]
     310:	7ad1      	ldrb	r1, [r2, #11]
     312:	430b      	orrs	r3, r1
     314:	72d3      	strb	r3, [r2, #11]
		if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     316:	2100      	movs	r1, #0
     318:	48af      	ldr	r0, [pc, #700]	; (5d8 <sd_mmc_check+0x34c>)
     31a:	47a0      	blx	r4
     31c:	2800      	cmp	r0, #0
     31e:	d0e5      	beq.n	2ec <sd_mmc_check+0x60>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     320:	682b      	ldr	r3, [r5, #0]
     322:	7adb      	ldrb	r3, [r3, #11]
     324:	07db      	lsls	r3, r3, #31
     326:	d400      	bmi.n	32a <sd_mmc_check+0x9e>
     328:	e126      	b.n	578 <sd_mmc_check+0x2ec>
		if (!sd_mmc_cmd9_spi()) {
     32a:	4bac      	ldr	r3, [pc, #688]	; (5dc <sd_mmc_check+0x350>)
     32c:	4798      	blx	r3
     32e:	2800      	cmp	r0, #0
     330:	d0dc      	beq.n	2ec <sd_mmc_check+0x60>
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     332:	682f      	ldr	r7, [r5, #0]
     334:	2308      	movs	r3, #8
     336:	003e      	movs	r6, r7
     338:	360e      	adds	r6, #14
     33a:	2260      	movs	r2, #96	; 0x60
     33c:	2180      	movs	r1, #128	; 0x80
     33e:	0030      	movs	r0, r6
     340:	4da7      	ldr	r5, [pc, #668]	; (5e0 <sd_mmc_check+0x354>)
     342:	47a8      	blx	r5
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     344:	2307      	movs	r3, #7
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     346:	0642      	lsls	r2, r0, #25
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     348:	4018      	ands	r0, r3
	sd_mmc_card->clock = unit * mul * 1000;
     34a:	4ba6      	ldr	r3, [pc, #664]	; (5e4 <sd_mmc_check+0x358>)
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     34c:	0080      	lsls	r0, r0, #2
	sd_mmc_card->clock = unit * mul * 1000;
     34e:	58c1      	ldr	r1, [r0, r3]
     350:	23fa      	movs	r3, #250	; 0xfa
     352:	009b      	lsls	r3, r3, #2
     354:	434b      	muls	r3, r1
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     356:	0f12      	lsrs	r2, r2, #28
	sd_mmc_card->clock = unit * mul * 1000;
     358:	49a3      	ldr	r1, [pc, #652]	; (5e8 <sd_mmc_check+0x35c>)
	mul = sd_trans_multipliers[(tran_speed >> 3) & 0xF];
     35a:	0092      	lsls	r2, r2, #2
	sd_mmc_card->clock = unit * mul * 1000;
     35c:	5852      	ldr	r2, [r2, r1]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     35e:	0030      	movs	r0, r6
	sd_mmc_card->clock = unit * mul * 1000;
     360:	4353      	muls	r3, r2
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     362:	2180      	movs	r1, #128	; 0x80
	sd_mmc_card->clock = unit * mul * 1000;
     364:	603b      	str	r3, [r7, #0]
	if (CSD_STRUCTURE_VERSION(sd_mmc_card->csd) >= SD_CSD_VER_2_0) {
     366:	227e      	movs	r2, #126	; 0x7e
     368:	2302      	movs	r3, #2
     36a:	47a8      	blx	r5
     36c:	2800      	cmp	r0, #0
     36e:	d100      	bne.n	372 <sd_mmc_check+0xe6>
     370:	e0e8      	b.n	544 <sd_mmc_check+0x2b8>
				(SD_CSD_2_0_C_SIZE(sd_mmc_card->csd) + 1)
     372:	2316      	movs	r3, #22
     374:	2230      	movs	r2, #48	; 0x30
     376:	2180      	movs	r1, #128	; 0x80
     378:	0030      	movs	r0, r6
     37a:	47a8      	blx	r5
				* 512;
     37c:	3001      	adds	r0, #1
     37e:	0240      	lsls	r0, r0, #9
		sd_mmc_card->capacity =
     380:	6078      	str	r0, [r7, #4]
	if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, (uint32_t)sd_mmc_card->rca << 16)) {
     382:	8939      	ldrh	r1, [r7, #8]
     384:	4899      	ldr	r0, [pc, #612]	; (5ec <sd_mmc_check+0x360>)
     386:	0409      	lsls	r1, r1, #16
     388:	4b8f      	ldr	r3, [pc, #572]	; (5c8 <sd_mmc_check+0x33c>)
     38a:	4798      	blx	r3
     38c:	2800      	cmp	r0, #0
     38e:	d0ad      	beq.n	2ec <sd_mmc_check+0x60>
	if (!driver_adtc_start(SD_ACMD51_SEND_SCR, 0,
     390:	2501      	movs	r5, #1
     392:	2208      	movs	r2, #8
     394:	9500      	str	r5, [sp, #0]
     396:	002b      	movs	r3, r5
     398:	2100      	movs	r1, #0
     39a:	4895      	ldr	r0, [pc, #596]	; (5f0 <sd_mmc_check+0x364>)
     39c:	4c95      	ldr	r4, [pc, #596]	; (5f4 <sd_mmc_check+0x368>)
     39e:	47a0      	blx	r4
     3a0:	2800      	cmp	r0, #0
     3a2:	d0a3      	beq.n	2ec <sd_mmc_check+0x60>
	if (!driver_start_read_blocks(scr, 1)) {
     3a4:	0029      	movs	r1, r5
     3a6:	a806      	add	r0, sp, #24
     3a8:	4b93      	ldr	r3, [pc, #588]	; (5f8 <sd_mmc_check+0x36c>)
     3aa:	4798      	blx	r3
     3ac:	2800      	cmp	r0, #0
     3ae:	d09d      	beq.n	2ec <sd_mmc_check+0x60>
	if (!driver_wait_end_of_read_blocks()) {
     3b0:	4b92      	ldr	r3, [pc, #584]	; (5fc <sd_mmc_check+0x370>)
     3b2:	4798      	blx	r3
     3b4:	2800      	cmp	r0, #0
     3b6:	d099      	beq.n	2ec <sd_mmc_check+0x60>
	switch (SD_SCR_SD_SPEC(scr)) {
     3b8:	2304      	movs	r3, #4
     3ba:	2238      	movs	r2, #56	; 0x38
     3bc:	2140      	movs	r1, #64	; 0x40
     3be:	a806      	add	r0, sp, #24
     3c0:	4e87      	ldr	r6, [pc, #540]	; (5e0 <sd_mmc_check+0x354>)
     3c2:	47b0      	blx	r6
     3c4:	4c7e      	ldr	r4, [pc, #504]	; (5c0 <sd_mmc_check+0x334>)
     3c6:	42a8      	cmp	r0, r5
     3c8:	d100      	bne.n	3cc <sd_mmc_check+0x140>
     3ca:	e0d2      	b.n	572 <sd_mmc_check+0x2e6>
     3cc:	2800      	cmp	r0, #0
     3ce:	d002      	beq.n	3d6 <sd_mmc_check+0x14a>
     3d0:	2802      	cmp	r0, #2
     3d2:	d100      	bne.n	3d6 <sd_mmc_check+0x14a>
     3d4:	e0dc      	b.n	590 <sd_mmc_check+0x304>
		sd_mmc_card->version = CARD_VER_SD_1_0;
     3d6:	6823      	ldr	r3, [r4, #0]
     3d8:	2210      	movs	r2, #16
     3da:	e0cc      	b.n	576 <sd_mmc_check+0x2ea>
	if (!driver_send_cmd(SDMMC_SPI_CMD58_READ_OCR, 0)) {
     3dc:	487d      	ldr	r0, [pc, #500]	; (5d4 <sd_mmc_check+0x348>)
     3de:	47a0      	blx	r4
     3e0:	2800      	cmp	r0, #0
     3e2:	d083      	beq.n	2ec <sd_mmc_check+0x60>
	if ((driver_get_response() & OCR_ACCESS_MODE_MASK)
     3e4:	47b8      	blx	r7
     3e6:	23c0      	movs	r3, #192	; 0xc0
     3e8:	05db      	lsls	r3, r3, #23
     3ea:	4018      	ands	r0, r3
     3ec:	2380      	movs	r3, #128	; 0x80
     3ee:	05db      	lsls	r3, r3, #23
     3f0:	4298      	cmp	r0, r3
     3f2:	d104      	bne.n	3fe <sd_mmc_check+0x172>
		sd_mmc_card->type |= CARD_TYPE_HC;
     3f4:	2308      	movs	r3, #8
     3f6:	682a      	ldr	r2, [r5, #0]
     3f8:	7ad1      	ldrb	r1, [r2, #11]
     3fa:	430b      	orrs	r3, r1
     3fc:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD59_CRC_ON_OFF, 0)) {
     3fe:	2100      	movs	r1, #0
     400:	4875      	ldr	r0, [pc, #468]	; (5d8 <sd_mmc_check+0x34c>)
     402:	47a0      	blx	r4
     404:	2800      	cmp	r0, #0
     406:	d100      	bne.n	40a <sd_mmc_check+0x17e>
     408:	e770      	b.n	2ec <sd_mmc_check+0x60>
	if (!sd_mmc_cmd9_spi()) {
     40a:	4b74      	ldr	r3, [pc, #464]	; (5dc <sd_mmc_check+0x350>)
     40c:	4798      	blx	r3
     40e:	2800      	cmp	r0, #0
     410:	d100      	bne.n	414 <sd_mmc_check+0x188>
     412:	e76b      	b.n	2ec <sd_mmc_check+0x60>
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     414:	682c      	ldr	r4, [r5, #0]
     416:	2304      	movs	r3, #4
     418:	0025      	movs	r5, r4
     41a:	350e      	adds	r5, #14
     41c:	227a      	movs	r2, #122	; 0x7a
     41e:	2180      	movs	r1, #128	; 0x80
     420:	0028      	movs	r0, r5
     422:	4e6f      	ldr	r6, [pc, #444]	; (5e0 <sd_mmc_check+0x354>)
     424:	47b0      	blx	r6
     426:	3801      	subs	r0, #1
		sd_mmc_card->version = CARD_VER_MMC_1_2;
     428:	2312      	movs	r3, #18
	switch (MMC_CSD_SPEC_VERS(sd_mmc_card->csd)) {
     42a:	2803      	cmp	r0, #3
     42c:	d804      	bhi.n	438 <sd_mmc_check+0x1ac>
     42e:	f004 f9d5 	bl	47dc <__gnu_thumb1_case_uqi>
     432:	8302      	.short	0x8302
     434:	8785      	.short	0x8785
		sd_mmc_card->version = CARD_VER_MMC_1_4;
     436:	2314      	movs	r3, #20
		sd_mmc_card->version = CARD_VER_MMC_4;
     438:	7323      	strb	r3, [r4, #12]
	tran_speed = CSD_TRAN_SPEED(sd_mmc_card->csd);
     43a:	2260      	movs	r2, #96	; 0x60
     43c:	2308      	movs	r3, #8
     43e:	2180      	movs	r1, #128	; 0x80
     440:	4f67      	ldr	r7, [pc, #412]	; (5e0 <sd_mmc_check+0x354>)
     442:	0028      	movs	r0, r5
     444:	47b8      	blx	r7
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     446:	2307      	movs	r3, #7
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     448:	0642      	lsls	r2, r0, #25
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     44a:	4018      	ands	r0, r3
	sd_mmc_card->clock = unit * mul * 1000;
     44c:	4b65      	ldr	r3, [pc, #404]	; (5e4 <sd_mmc_check+0x358>)
	unit = sd_mmc_trans_units[tran_speed & 0x7];
     44e:	0080      	lsls	r0, r0, #2
	sd_mmc_card->clock = unit * mul * 1000;
     450:	58c1      	ldr	r1, [r0, r3]
     452:	23fa      	movs	r3, #250	; 0xfa
     454:	009b      	lsls	r3, r3, #2
     456:	434b      	muls	r3, r1
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     458:	0f12      	lsrs	r2, r2, #28
	sd_mmc_card->clock = unit * mul * 1000;
     45a:	4969      	ldr	r1, [pc, #420]	; (600 <sd_mmc_check+0x374>)
	mul = mmc_trans_multipliers[(tran_speed >> 3) & 0xF];
     45c:	0092      	lsls	r2, r2, #2
	sd_mmc_card->clock = unit * mul * 1000;
     45e:	5852      	ldr	r2, [r2, r1]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     460:	0028      	movs	r0, r5
	sd_mmc_card->clock = unit * mul * 1000;
     462:	4353      	muls	r3, r2
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     464:	2180      	movs	r1, #128	; 0x80
	sd_mmc_card->clock = unit * mul * 1000;
     466:	6023      	str	r3, [r4, #0]
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) != 0xFFF) {
     468:	223e      	movs	r2, #62	; 0x3e
     46a:	230c      	movs	r3, #12
     46c:	47b8      	blx	r7
     46e:	4b65      	ldr	r3, [pc, #404]	; (604 <sd_mmc_check+0x378>)
     470:	0006      	movs	r6, r0
     472:	4298      	cmp	r0, r3
     474:	d00f      	beq.n	496 <sd_mmc_check+0x20a>
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     476:	2303      	movs	r3, #3
     478:	222f      	movs	r2, #47	; 0x2f
     47a:	2180      	movs	r1, #128	; 0x80
     47c:	0028      	movs	r0, r5
     47e:	47b8      	blx	r7
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     480:	3601      	adds	r6, #1
			(1 << (MMC_CSD_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     482:	3002      	adds	r0, #2
		uint32_t blocknr = ((MMC_CSD_C_SIZE(sd_mmc_card->csd) + 1) *
     484:	4086      	lsls	r6, r0
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     486:	2304      	movs	r3, #4
     488:	2250      	movs	r2, #80	; 0x50
     48a:	2180      	movs	r1, #128	; 0x80
     48c:	0028      	movs	r0, r5
     48e:	47b8      	blx	r7
		sd_mmc_card->capacity = blocknr *
     490:	4086      	lsls	r6, r0
			(1 << MMC_CSD_READ_BL_LEN(sd_mmc_card->csd)) / 1024;
     492:	0ab6      	lsrs	r6, r6, #10
		sd_mmc_card->capacity = blocknr *
     494:	6066      	str	r6, [r4, #4]
	if (sd_mmc_card->version >= CARD_VER_MMC_4) {
     496:	7b23      	ldrb	r3, [r4, #12]
     498:	2b3f      	cmp	r3, #63	; 0x3f
     49a:	d939      	bls.n	510 <sd_mmc_check+0x284>
	if (!driver_adtc_start(MMC_CMD8_SEND_EXT_CSD, 0,
     49c:	2100      	movs	r1, #0
     49e:	2280      	movs	r2, #128	; 0x80
     4a0:	9100      	str	r1, [sp, #0]
     4a2:	2301      	movs	r3, #1
     4a4:	0092      	lsls	r2, r2, #2
     4a6:	4858      	ldr	r0, [pc, #352]	; (608 <sd_mmc_check+0x37c>)
     4a8:	4c52      	ldr	r4, [pc, #328]	; (5f4 <sd_mmc_check+0x368>)
     4aa:	47a0      	blx	r4
     4ac:	2800      	cmp	r0, #0
     4ae:	d100      	bne.n	4b2 <sd_mmc_check+0x226>
     4b0:	e71c      	b.n	2ec <sd_mmc_check+0x60>
     4b2:	2432      	movs	r4, #50	; 0x32
		if (!driver_read_word(&ext_csd)) {
     4b4:	a805      	add	r0, sp, #20
     4b6:	4d55      	ldr	r5, [pc, #340]	; (60c <sd_mmc_check+0x380>)
     4b8:	47a8      	blx	r5
     4ba:	2800      	cmp	r0, #0
     4bc:	d100      	bne.n	4c0 <sd_mmc_check+0x234>
     4be:	e715      	b.n	2ec <sd_mmc_check+0x60>
     4c0:	3c01      	subs	r4, #1
     4c2:	b2a4      	uxth	r4, r4
	for (i = 0; i < (EXT_CSD_CARD_TYPE_INDEX + 4) / 4; i++) {
     4c4:	2c00      	cmp	r4, #0
     4c6:	d1f5      	bne.n	4b4 <sd_mmc_check+0x228>
	if (MMC_CSD_C_SIZE(sd_mmc_card->csd) == 0xFFF) {
     4c8:	4e3d      	ldr	r6, [pc, #244]	; (5c0 <sd_mmc_check+0x334>)
     4ca:	230c      	movs	r3, #12
     4cc:	6830      	ldr	r0, [r6, #0]
     4ce:	4c44      	ldr	r4, [pc, #272]	; (5e0 <sd_mmc_check+0x354>)
     4d0:	300e      	adds	r0, #14
     4d2:	223e      	movs	r2, #62	; 0x3e
     4d4:	2180      	movs	r1, #128	; 0x80
     4d6:	47a0      	blx	r4
     4d8:	4b4a      	ldr	r3, [pc, #296]	; (604 <sd_mmc_check+0x378>)
     4da:	2432      	movs	r4, #50	; 0x32
     4dc:	4298      	cmp	r0, r3
     4de:	d10e      	bne.n	4fe <sd_mmc_check+0x272>
     4e0:	3c2e      	subs	r4, #46	; 0x2e
			if (!driver_read_word(&sec_count)) {
     4e2:	a806      	add	r0, sp, #24
     4e4:	47a8      	blx	r5
     4e6:	2800      	cmp	r0, #0
     4e8:	d100      	bne.n	4ec <sd_mmc_check+0x260>
     4ea:	e6ff      	b.n	2ec <sd_mmc_check+0x60>
     4ec:	3c01      	subs	r4, #1
     4ee:	b2a4      	uxth	r4, r4
		for (; i <(EXT_CSD_SEC_COUNT_INDEX + 4) / 4; i++) {
     4f0:	2c00      	cmp	r4, #0
     4f2:	d1f6      	bne.n	4e2 <sd_mmc_check+0x256>
		sd_mmc_card->capacity = sec_count / 2;
     4f4:	9b06      	ldr	r3, [sp, #24]
     4f6:	6832      	ldr	r2, [r6, #0]
     4f8:	085b      	lsrs	r3, r3, #1
     4fa:	6053      	str	r3, [r2, #4]
     4fc:	3436      	adds	r4, #54	; 0x36
		if (!driver_read_word(&sec_count)) {
     4fe:	a806      	add	r0, sp, #24
     500:	47a8      	blx	r5
     502:	2800      	cmp	r0, #0
     504:	d100      	bne.n	508 <sd_mmc_check+0x27c>
     506:	e6f1      	b.n	2ec <sd_mmc_check+0x60>
	for (; i < EXT_CSD_BSIZE / 4; i++) {
     508:	3401      	adds	r4, #1
     50a:	b2a4      	uxth	r4, r4
     50c:	2c80      	cmp	r4, #128	; 0x80
     50e:	d1f6      	bne.n	4fe <sd_mmc_check+0x272>
	if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     510:	2180      	movs	r1, #128	; 0x80
     512:	483f      	ldr	r0, [pc, #252]	; (610 <sd_mmc_check+0x384>)
     514:	0089      	lsls	r1, r1, #2
     516:	4b2c      	ldr	r3, [pc, #176]	; (5c8 <sd_mmc_check+0x33c>)
     518:	4798      	blx	r3
     51a:	2800      	cmp	r0, #0
     51c:	d100      	bne.n	520 <sd_mmc_check+0x294>
     51e:	e6e5      	b.n	2ec <sd_mmc_check+0x60>
	if (!sd_mmc_cmd13()) {
     520:	4b3c      	ldr	r3, [pc, #240]	; (614 <sd_mmc_check+0x388>)
     522:	4798      	blx	r3
     524:	2800      	cmp	r0, #0
     526:	d100      	bne.n	52a <sd_mmc_check+0x29e>
     528:	e6e0      	b.n	2ec <sd_mmc_check+0x60>
	sd_mmc_configure_slot();
     52a:	4b3b      	ldr	r3, [pc, #236]	; (618 <sd_mmc_check+0x38c>)
     52c:	4798      	blx	r3
		sd_mmc_card->state = SD_MMC_CARD_STATE_READY;
     52e:	2200      	movs	r2, #0
     530:	4b23      	ldr	r3, [pc, #140]	; (5c0 <sd_mmc_check+0x334>)
     532:	681b      	ldr	r3, [r3, #0]
     534:	729a      	strb	r2, [r3, #10]
     536:	e6b0      	b.n	29a <sd_mmc_check+0xe>
		sd_mmc_card->version = CARD_VER_MMC_2_2;
     538:	2322      	movs	r3, #34	; 0x22
     53a:	e77d      	b.n	438 <sd_mmc_check+0x1ac>
		sd_mmc_card->version = CARD_VER_MMC_3;
     53c:	2330      	movs	r3, #48	; 0x30
     53e:	e77b      	b.n	438 <sd_mmc_check+0x1ac>
		sd_mmc_card->version = CARD_VER_MMC_4;
     540:	2340      	movs	r3, #64	; 0x40
     542:	e779      	b.n	438 <sd_mmc_check+0x1ac>
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     544:	230c      	movs	r3, #12
     546:	223e      	movs	r2, #62	; 0x3e
     548:	2180      	movs	r1, #128	; 0x80
     54a:	0030      	movs	r0, r6
     54c:	47a8      	blx	r5
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     54e:	2303      	movs	r3, #3
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     550:	0004      	movs	r4, r0
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     552:	222f      	movs	r2, #47	; 0x2f
     554:	2180      	movs	r1, #128	; 0x80
     556:	0030      	movs	r0, r6
     558:	47a8      	blx	r5
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     55a:	3401      	adds	r4, #1
				(1 << (SD_CSD_1_0_C_SIZE_MULT(sd_mmc_card->csd) + 2)));
     55c:	3002      	adds	r0, #2
		uint32_t blocknr = ((SD_CSD_1_0_C_SIZE(sd_mmc_card->csd) + 1) *
     55e:	4084      	lsls	r4, r0
				(1 << SD_CSD_1_0_READ_BL_LEN(sd_mmc_card->csd))
     560:	2304      	movs	r3, #4
     562:	2250      	movs	r2, #80	; 0x50
     564:	2180      	movs	r1, #128	; 0x80
     566:	0030      	movs	r0, r6
     568:	47a8      	blx	r5
		sd_mmc_card->capacity = blocknr *
     56a:	4084      	lsls	r4, r0
				/ 1024;
     56c:	0aa4      	lsrs	r4, r4, #10
		sd_mmc_card->capacity = blocknr *
     56e:	607c      	str	r4, [r7, #4]
     570:	e707      	b.n	382 <sd_mmc_check+0xf6>
		sd_mmc_card->version = CARD_VER_SD_1_10;
     572:	221a      	movs	r2, #26
     574:	6823      	ldr	r3, [r4, #0]
		sd_mmc_card->version = CARD_VER_SD_1_0;
     576:	731a      	strb	r2, [r3, #12]
	if ((sd_mmc_card->type & CARD_TYPE_SD) &&
     578:	2209      	movs	r2, #9
     57a:	4c11      	ldr	r4, [pc, #68]	; (5c0 <sd_mmc_check+0x334>)
     57c:	6823      	ldr	r3, [r4, #0]
     57e:	7adb      	ldrb	r3, [r3, #11]
     580:	4013      	ands	r3, r2
     582:	2b01      	cmp	r3, #1
     584:	d00f      	beq.n	5a6 <sd_mmc_check+0x31a>
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     586:	6823      	ldr	r3, [r4, #0]
     588:	7adb      	ldrb	r3, [r3, #11]
     58a:	07db      	lsls	r3, r3, #31
     58c:	d4c8      	bmi.n	520 <sd_mmc_check+0x294>
     58e:	e7cc      	b.n	52a <sd_mmc_check+0x29e>
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     590:	002b      	movs	r3, r5
     592:	222f      	movs	r2, #47	; 0x2f
     594:	2140      	movs	r1, #64	; 0x40
     596:	a806      	add	r0, sp, #24
     598:	47b0      	blx	r6
			sd_mmc_card->version = CARD_VER_SD_3_0;
     59a:	6823      	ldr	r3, [r4, #0]
     59c:	2230      	movs	r2, #48	; 0x30
		if (SD_SCR_SD_SPEC3(scr) == SD_SCR_SD_SPEC_3_00) {
     59e:	2801      	cmp	r0, #1
     5a0:	d0e9      	beq.n	576 <sd_mmc_check+0x2ea>
			sd_mmc_card->version = CARD_VER_SD_2_0;
     5a2:	2220      	movs	r2, #32
     5a4:	e7e7      	b.n	576 <sd_mmc_check+0x2ea>
		if (!driver_send_cmd(SDMMC_CMD16_SET_BLOCKLEN, SD_MMC_BLOCK_SIZE)) {
     5a6:	2180      	movs	r1, #128	; 0x80
     5a8:	4819      	ldr	r0, [pc, #100]	; (610 <sd_mmc_check+0x384>)
     5aa:	0089      	lsls	r1, r1, #2
     5ac:	4b06      	ldr	r3, [pc, #24]	; (5c8 <sd_mmc_check+0x33c>)
     5ae:	4798      	blx	r3
     5b0:	2800      	cmp	r0, #0
     5b2:	d1e8      	bne.n	586 <sd_mmc_check+0x2fa>
     5b4:	e69a      	b.n	2ec <sd_mmc_check+0x60>
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	000001d5 	.word	0x000001d5
     5bc:	000001bd 	.word	0x000001bd
     5c0:	20000028 	.word	0x20000028
     5c4:	00003359 	.word	0x00003359
     5c8:	000034e9 	.word	0x000034e9
     5cc:	00005508 	.word	0x00005508
     5d0:	000034fd 	.word	0x000034fd
     5d4:	0000053a 	.word	0x0000053a
     5d8:	0000113b 	.word	0x0000113b
     5dc:	00000225 	.word	0x00000225
     5e0:	00000115 	.word	0x00000115
     5e4:	000049e0 	.word	0x000049e0
     5e8:	000049fc 	.word	0x000049fc
     5ec:	00001137 	.word	0x00001137
     5f0:	00081133 	.word	0x00081133
     5f4:	0000338d 	.word	0x0000338d
     5f8:	00003579 	.word	0x00003579
     5fc:	000035e1 	.word	0x000035e1
     600:	000049a0 	.word	0x000049a0
     604:	00000fff 	.word	0x00000fff
     608:	00081108 	.word	0x00081108
     60c:	00003509 	.word	0x00003509
     610:	00001110 	.word	0x00001110
     614:	00000185 	.word	0x00000185
     618:	0000015d 	.word	0x0000015d
	*v2 = 0;
     61c:	2300      	movs	r3, #0
	if (sd_mmc_card->type & CARD_TYPE_SD) {
     61e:	682a      	ldr	r2, [r5, #0]
     620:	7ad2      	ldrb	r2, [r2, #11]
     622:	07d2      	lsls	r2, r2, #31
     624:	d400      	bmi.n	628 <sd_mmc_check+0x39c>
     626:	e67b      	b.n	320 <sd_mmc_check+0x94>
     628:	079b      	lsls	r3, r3, #30
     62a:	4e18      	ldr	r6, [pc, #96]	; (68c <sd_mmc_check+0x400>)
     62c:	9303      	str	r3, [sp, #12]
		if (!driver_send_cmd(SDMMC_CMD55_APP_CMD, 0)) {
     62e:	2100      	movs	r1, #0
     630:	4817      	ldr	r0, [pc, #92]	; (690 <sd_mmc_check+0x404>)
     632:	47a0      	blx	r4
     634:	2800      	cmp	r0, #0
     636:	d00d      	beq.n	654 <sd_mmc_check+0x3c8>
		if (!driver_send_cmd(SD_SPI_ACMD41_SD_SEND_OP_COND, arg)) {
     638:	9903      	ldr	r1, [sp, #12]
     63a:	4816      	ldr	r0, [pc, #88]	; (694 <sd_mmc_check+0x408>)
     63c:	47a0      	blx	r4
     63e:	2800      	cmp	r0, #0
     640:	d008      	beq.n	654 <sd_mmc_check+0x3c8>
		resp = driver_get_response();
     642:	4f15      	ldr	r7, [pc, #84]	; (698 <sd_mmc_check+0x40c>)
     644:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
     646:	2101      	movs	r1, #1
     648:	4001      	ands	r1, r0
     64a:	d100      	bne.n	64e <sd_mmc_check+0x3c2>
     64c:	e656      	b.n	2fc <sd_mmc_check+0x70>
     64e:	3e01      	subs	r6, #1
		if (retry-- == 0) {
     650:	2e00      	cmp	r6, #0
     652:	d1ec      	bne.n	62e <sd_mmc_check+0x3a2>
			sd_mmc_card->type = CARD_TYPE_MMC;
     654:	2302      	movs	r3, #2
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     656:	2088      	movs	r0, #136	; 0x88
			sd_mmc_card->type = CARD_TYPE_MMC;
     658:	682a      	ldr	r2, [r5, #0]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     65a:	2100      	movs	r1, #0
			sd_mmc_card->type = CARD_TYPE_MMC;
     65c:	72d3      	strb	r3, [r2, #11]
	if (!driver_send_cmd(SDMMC_SPI_CMD0_GO_IDLE_STATE, 0)) {
     65e:	0140      	lsls	r0, r0, #5
     660:	47a0      	blx	r4
     662:	2800      	cmp	r0, #0
     664:	d100      	bne.n	668 <sd_mmc_check+0x3dc>
     666:	e641      	b.n	2ec <sd_mmc_check+0x60>
     668:	4e08      	ldr	r6, [pc, #32]	; (68c <sd_mmc_check+0x400>)
		if (!driver_send_cmd(MMC_SPI_CMD1_SEND_OP_COND, 0)) {
     66a:	2100      	movs	r1, #0
     66c:	480b      	ldr	r0, [pc, #44]	; (69c <sd_mmc_check+0x410>)
     66e:	47a0      	blx	r4
     670:	2800      	cmp	r0, #0
     672:	d100      	bne.n	676 <sd_mmc_check+0x3ea>
     674:	e63a      	b.n	2ec <sd_mmc_check+0x60>
		resp = driver_get_response();
     676:	4f08      	ldr	r7, [pc, #32]	; (698 <sd_mmc_check+0x40c>)
     678:	47b8      	blx	r7
		if (!(resp & R1_SPI_IDLE)) {
     67a:	2101      	movs	r1, #1
     67c:	4001      	ands	r1, r0
     67e:	d100      	bne.n	682 <sd_mmc_check+0x3f6>
     680:	e6ac      	b.n	3dc <sd_mmc_check+0x150>
     682:	3e01      	subs	r6, #1
		if (retry-- == 0) {
     684:	2e00      	cmp	r6, #0
     686:	d1f0      	bne.n	66a <sd_mmc_check+0x3de>
     688:	e630      	b.n	2ec <sd_mmc_check+0x60>
     68a:	46c0      	nop			; (mov r8, r8)
     68c:	00001bef 	.word	0x00001bef
     690:	00001137 	.word	0x00001137
     694:	00001129 	.word	0x00001129
     698:	000034fd 	.word	0x000034fd
     69c:	00001101 	.word	0x00001101

000006a0 <sd_mmc_get_type>:

card_type_t sd_mmc_get_type(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     6a0:	4b06      	ldr	r3, [pc, #24]	; (6bc <sd_mmc_get_type+0x1c>)
{
     6a2:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     6a4:	4798      	blx	r3
		return CARD_TYPE_UNKNOWN;
     6a6:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     6a8:	4298      	cmp	r0, r3
     6aa:	d104      	bne.n	6b6 <sd_mmc_get_type+0x16>
	}
	sd_mmc_deselect_slot();
     6ac:	4b04      	ldr	r3, [pc, #16]	; (6c0 <sd_mmc_get_type+0x20>)
     6ae:	4798      	blx	r3
	return sd_mmc_card->type;
     6b0:	4b04      	ldr	r3, [pc, #16]	; (6c4 <sd_mmc_get_type+0x24>)
     6b2:	681b      	ldr	r3, [r3, #0]
     6b4:	7adb      	ldrb	r3, [r3, #11]
}
     6b6:	0018      	movs	r0, r3
     6b8:	bd10      	pop	{r4, pc}
     6ba:	46c0      	nop			; (mov r8, r8)
     6bc:	000001d5 	.word	0x000001d5
     6c0:	000001bd 	.word	0x000001bd
     6c4:	20000028 	.word	0x20000028

000006c8 <sd_mmc_get_capacity>:
	return sd_mmc_card->version;
}

uint32_t sd_mmc_get_capacity(uint8_t slot)
{
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     6c8:	4b06      	ldr	r3, [pc, #24]	; (6e4 <sd_mmc_get_capacity+0x1c>)
{
     6ca:	b510      	push	{r4, lr}
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     6cc:	4798      	blx	r3
		return 0;
     6ce:	2300      	movs	r3, #0
	if (SD_MMC_OK != sd_mmc_select_slot(slot)) {
     6d0:	4298      	cmp	r0, r3
     6d2:	d104      	bne.n	6de <sd_mmc_get_capacity+0x16>
	}
	sd_mmc_deselect_slot();
     6d4:	4b04      	ldr	r3, [pc, #16]	; (6e8 <sd_mmc_get_capacity+0x20>)
     6d6:	4798      	blx	r3
	return sd_mmc_card->capacity;
     6d8:	4b04      	ldr	r3, [pc, #16]	; (6ec <sd_mmc_get_capacity+0x24>)
     6da:	681b      	ldr	r3, [r3, #0]
     6dc:	685b      	ldr	r3, [r3, #4]
}
     6de:	0018      	movs	r0, r3
     6e0:	bd10      	pop	{r4, pc}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	000001d5 	.word	0x000001d5
     6e8:	000001bd 	.word	0x000001bd
     6ec:	20000028 	.word	0x20000028

000006f0 <sd_mmc_is_write_protected>:
			== SD_MMC_0_WP_DETECT_VALUE) {
		return true;
	}
#endif
	return false;
}
     6f0:	2000      	movs	r0, #0
     6f2:	4770      	bx	lr

000006f4 <sd_mmc_init_read_blocks>:

sd_mmc_err_t sd_mmc_init_read_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     6f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     6f6:	4b14      	ldr	r3, [pc, #80]	; (748 <sd_mmc_init_read_blocks+0x54>)
{
     6f8:	000e      	movs	r6, r1
     6fa:	0014      	movs	r4, r2
	sd_mmc_err = sd_mmc_select_slot(slot);
     6fc:	4798      	blx	r3
     6fe:	1e05      	subs	r5, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     700:	d106      	bne.n	710 <sd_mmc_init_read_blocks+0x1c>
		return sd_mmc_err;
	}

	// Wait for data ready status
	if (!sd_mmc_cmd13()) {
     702:	4b12      	ldr	r3, [pc, #72]	; (74c <sd_mmc_init_read_blocks+0x58>)
     704:	4798      	blx	r3
     706:	2800      	cmp	r0, #0
     708:	d104      	bne.n	714 <sd_mmc_init_read_blocks+0x20>
		sd_mmc_deselect_slot();
     70a:	4b11      	ldr	r3, [pc, #68]	; (750 <sd_mmc_init_read_blocks+0x5c>)
     70c:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     70e:	2505      	movs	r5, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     710:	0028      	movs	r0, r5
     712:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	if (nb_block > 1) {
     714:	2c01      	cmp	r4, #1
     716:	d815      	bhi.n	744 <sd_mmc_init_read_blocks+0x50>
		cmd = SDMMC_CMD17_READ_SINGLE_BLOCK;
     718:	480e      	ldr	r0, [pc, #56]	; (754 <sd_mmc_init_read_blocks+0x60>)
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     71a:	4b0f      	ldr	r3, [pc, #60]	; (758 <sd_mmc_init_read_blocks+0x64>)
     71c:	681b      	ldr	r3, [r3, #0]
     71e:	7adb      	ldrb	r3, [r3, #11]
     720:	071b      	lsls	r3, r3, #28
     722:	d400      	bmi.n	726 <sd_mmc_init_read_blocks+0x32>
		arg = (start * SD_MMC_BLOCK_SIZE);
     724:	0276      	lsls	r6, r6, #9
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     726:	2301      	movs	r3, #1
     728:	2280      	movs	r2, #128	; 0x80
     72a:	9300      	str	r3, [sp, #0]
     72c:	0031      	movs	r1, r6
     72e:	0023      	movs	r3, r4
     730:	0092      	lsls	r2, r2, #2
     732:	4e0a      	ldr	r6, [pc, #40]	; (75c <sd_mmc_init_read_blocks+0x68>)
     734:	47b0      	blx	r6
     736:	2800      	cmp	r0, #0
     738:	d0e7      	beq.n	70a <sd_mmc_init_read_blocks+0x16>
	sd_mmc_nb_block_remaining = nb_block;
     73a:	4b09      	ldr	r3, [pc, #36]	; (760 <sd_mmc_init_read_blocks+0x6c>)
     73c:	801c      	strh	r4, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     73e:	4b09      	ldr	r3, [pc, #36]	; (764 <sd_mmc_init_read_blocks+0x70>)
     740:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
     742:	e7e5      	b.n	710 <sd_mmc_init_read_blocks+0x1c>
		cmd = SDMMC_CMD18_READ_MULTIPLE_BLOCK;
     744:	4808      	ldr	r0, [pc, #32]	; (768 <sd_mmc_init_read_blocks+0x74>)
     746:	e7e8      	b.n	71a <sd_mmc_init_read_blocks+0x26>
     748:	000001d5 	.word	0x000001d5
     74c:	00000185 	.word	0x00000185
     750:	000001bd 	.word	0x000001bd
     754:	00081111 	.word	0x00081111
     758:	20000028 	.word	0x20000028
     75c:	0000338d 	.word	0x0000338d
     760:	2000004c 	.word	0x2000004c
     764:	2000004e 	.word	0x2000004e
     768:	00101112 	.word	0x00101112

0000076c <sd_mmc_start_read_blocks>:

sd_mmc_err_t sd_mmc_start_read_blocks(void *dest, uint16_t nb_block)
{
     76c:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);

	if (!driver_start_read_blocks(dest, nb_block)) {
     76e:	4b07      	ldr	r3, [pc, #28]	; (78c <sd_mmc_start_read_blocks+0x20>)
{
     770:	000c      	movs	r4, r1
	if (!driver_start_read_blocks(dest, nb_block)) {
     772:	4798      	blx	r3
     774:	4b06      	ldr	r3, [pc, #24]	; (790 <sd_mmc_start_read_blocks+0x24>)
     776:	2800      	cmp	r0, #0
     778:	d102      	bne.n	780 <sd_mmc_start_read_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
     77a:	8018      	strh	r0, [r3, #0]
		return SD_MMC_ERR_COMM;
     77c:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     77e:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     780:	8819      	ldrh	r1, [r3, #0]
	return SD_MMC_OK;
     782:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
     784:	1b09      	subs	r1, r1, r4
     786:	8019      	strh	r1, [r3, #0]
	return SD_MMC_OK;
     788:	e7f9      	b.n	77e <sd_mmc_start_read_blocks+0x12>
     78a:	46c0      	nop			; (mov r8, r8)
     78c:	00003579 	.word	0x00003579
     790:	2000004c 	.word	0x2000004c

00000794 <sd_mmc_wait_end_of_read_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_read_blocks(bool abort)
{
     794:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_read_blocks()) {
     796:	4b11      	ldr	r3, [pc, #68]	; (7dc <sd_mmc_wait_end_of_read_blocks+0x48>)
{
     798:	0004      	movs	r4, r0
	if (!driver_wait_end_of_read_blocks()) {
     79a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     79c:	2305      	movs	r3, #5
	if (!driver_wait_end_of_read_blocks()) {
     79e:	2800      	cmp	r0, #0
     7a0:	d010      	beq.n	7c4 <sd_mmc_wait_end_of_read_blocks+0x30>
     7a2:	4b0f      	ldr	r3, [pc, #60]	; (7e0 <sd_mmc_wait_end_of_read_blocks+0x4c>)
	}
	if (abort) {
     7a4:	2c00      	cmp	r4, #0
     7a6:	d009      	beq.n	7bc <sd_mmc_wait_end_of_read_blocks+0x28>
		sd_mmc_nb_block_remaining = 0;
     7a8:	2200      	movs	r2, #0
     7aa:	801a      	strh	r2, [r3, #0]
	} else if (sd_mmc_nb_block_remaining) {
		return SD_MMC_OK;
	}

	// All blocks are transfered then stop read operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
     7ac:	4b0d      	ldr	r3, [pc, #52]	; (7e4 <sd_mmc_wait_end_of_read_blocks+0x50>)
     7ae:	881b      	ldrh	r3, [r3, #0]
     7b0:	2b01      	cmp	r3, #1
     7b2:	d109      	bne.n	7c8 <sd_mmc_wait_end_of_read_blocks+0x34>
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
     7b4:	4b0c      	ldr	r3, [pc, #48]	; (7e8 <sd_mmc_wait_end_of_read_blocks+0x54>)
     7b6:	4798      	blx	r3
		return SD_MMC_OK;
     7b8:	2300      	movs	r3, #0
     7ba:	e003      	b.n	7c4 <sd_mmc_wait_end_of_read_blocks+0x30>
	} else if (sd_mmc_nb_block_remaining) {
     7bc:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     7be:	0023      	movs	r3, r4
	} else if (sd_mmc_nb_block_remaining) {
     7c0:	2a00      	cmp	r2, #0
     7c2:	d0f3      	beq.n	7ac <sd_mmc_wait_end_of_read_blocks+0x18>
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     7c4:	0018      	movs	r0, r3
     7c6:	bd10      	pop	{r4, pc}
	if (!driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0)) {
     7c8:	2100      	movs	r1, #0
     7ca:	4808      	ldr	r0, [pc, #32]	; (7ec <sd_mmc_wait_end_of_read_blocks+0x58>)
     7cc:	4c08      	ldr	r4, [pc, #32]	; (7f0 <sd_mmc_wait_end_of_read_blocks+0x5c>)
     7ce:	47a0      	blx	r4
     7d0:	1e01      	subs	r1, r0, #0
     7d2:	d1ef      	bne.n	7b4 <sd_mmc_wait_end_of_read_blocks+0x20>
		driver_adtc_stop(SDMMC_CMD12_STOP_TRANSMISSION, 0);
     7d4:	4805      	ldr	r0, [pc, #20]	; (7ec <sd_mmc_wait_end_of_read_blocks+0x58>)
     7d6:	47a0      	blx	r4
     7d8:	e7ec      	b.n	7b4 <sd_mmc_wait_end_of_read_blocks+0x20>
     7da:	46c0      	nop			; (mov r8, r8)
     7dc:	000035e1 	.word	0x000035e1
     7e0:	2000004c 	.word	0x2000004c
     7e4:	2000004e 	.word	0x2000004e
     7e8:	000001bd 	.word	0x000001bd
     7ec:	0000310c 	.word	0x0000310c
     7f0:	000034e9 	.word	0x000034e9

000007f4 <sd_mmc_init_write_blocks>:

sd_mmc_err_t sd_mmc_init_write_blocks(uint8_t slot, uint32_t start,
		uint16_t nb_block)
{
     7f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sd_mmc_err_t sd_mmc_err;
	uint32_t cmd, arg, resp;

	sd_mmc_err = sd_mmc_select_slot(slot);
     7f6:	4b12      	ldr	r3, [pc, #72]	; (840 <sd_mmc_init_write_blocks+0x4c>)
{
     7f8:	000e      	movs	r6, r1
     7fa:	0014      	movs	r4, r2
	sd_mmc_err = sd_mmc_select_slot(slot);
     7fc:	4798      	blx	r3
     7fe:	1e05      	subs	r5, r0, #0
	if (sd_mmc_err != SD_MMC_OK) {
     800:	d115      	bne.n	82e <sd_mmc_init_write_blocks+0x3a>
	if (sd_mmc_is_write_protected(slot)) {
		sd_mmc_deselect_slot();
		return SD_MMC_ERR_WP;
	}

	if (nb_block > 1) {
     802:	2c01      	cmp	r4, #1
     804:	d815      	bhi.n	832 <sd_mmc_init_write_blocks+0x3e>
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
	} else {
		cmd = SDMMC_CMD24_WRITE_BLOCK;
     806:	480f      	ldr	r0, [pc, #60]	; (844 <sd_mmc_init_write_blocks+0x50>)
	}
	/*
	 * SDSC Card (CCS=0) uses byte unit address,
	 * SDHC and SDXC Cards (CCS=1) use block unit address (512 Bytes unit).
	 */
	if (sd_mmc_card->type & CARD_TYPE_HC) {
     808:	4b0f      	ldr	r3, [pc, #60]	; (848 <sd_mmc_init_write_blocks+0x54>)
     80a:	681b      	ldr	r3, [r3, #0]
     80c:	7adb      	ldrb	r3, [r3, #11]
     80e:	071b      	lsls	r3, r3, #28
     810:	d400      	bmi.n	814 <sd_mmc_init_write_blocks+0x20>
		arg = start;
	} else {
		arg = (start * SD_MMC_BLOCK_SIZE);
     812:	0276      	lsls	r6, r6, #9
	}
	if (!driver_adtc_start(cmd, arg, SD_MMC_BLOCK_SIZE, nb_block, true)) {
     814:	2301      	movs	r3, #1
     816:	2280      	movs	r2, #128	; 0x80
     818:	9300      	str	r3, [sp, #0]
     81a:	0031      	movs	r1, r6
     81c:	0023      	movs	r3, r4
     81e:	0092      	lsls	r2, r2, #2
     820:	4e0a      	ldr	r6, [pc, #40]	; (84c <sd_mmc_init_write_blocks+0x58>)
     822:	47b0      	blx	r6
     824:	2800      	cmp	r0, #0
     826:	d106      	bne.n	836 <sd_mmc_init_write_blocks+0x42>
		sd_mmc_deselect_slot();
     828:	4b09      	ldr	r3, [pc, #36]	; (850 <sd_mmc_init_write_blocks+0x5c>)
     82a:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     82c:	2505      	movs	r5, #5
		}
	}
	sd_mmc_nb_block_remaining = nb_block;
	sd_mmc_nb_block_to_tranfer = nb_block;
	return SD_MMC_OK;
}
     82e:	0028      	movs	r0, r5
     830:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
		cmd = SDMMC_CMD25_WRITE_MULTIPLE_BLOCK;
     832:	4808      	ldr	r0, [pc, #32]	; (854 <sd_mmc_init_write_blocks+0x60>)
     834:	e7e8      	b.n	808 <sd_mmc_init_write_blocks+0x14>
	sd_mmc_nb_block_remaining = nb_block;
     836:	4b08      	ldr	r3, [pc, #32]	; (858 <sd_mmc_init_write_blocks+0x64>)
     838:	801c      	strh	r4, [r3, #0]
	sd_mmc_nb_block_to_tranfer = nb_block;
     83a:	4b08      	ldr	r3, [pc, #32]	; (85c <sd_mmc_init_write_blocks+0x68>)
     83c:	801c      	strh	r4, [r3, #0]
	return SD_MMC_OK;
     83e:	e7f6      	b.n	82e <sd_mmc_init_write_blocks+0x3a>
     840:	000001d5 	.word	0x000001d5
     844:	00089118 	.word	0x00089118
     848:	20000028 	.word	0x20000028
     84c:	0000338d 	.word	0x0000338d
     850:	000001bd 	.word	0x000001bd
     854:	00109119 	.word	0x00109119
     858:	2000004c 	.word	0x2000004c
     85c:	2000004e 	.word	0x2000004e

00000860 <sd_mmc_start_write_blocks>:

sd_mmc_err_t sd_mmc_start_write_blocks(const void *src, uint16_t nb_block)
{
     860:	b510      	push	{r4, lr}
	Assert(sd_mmc_nb_block_remaining >= nb_block);
	if (!driver_start_write_blocks(src, nb_block)) {
     862:	4b07      	ldr	r3, [pc, #28]	; (880 <sd_mmc_start_write_blocks+0x20>)
{
     864:	000c      	movs	r4, r1
	if (!driver_start_write_blocks(src, nb_block)) {
     866:	4798      	blx	r3
     868:	4b06      	ldr	r3, [pc, #24]	; (884 <sd_mmc_start_write_blocks+0x24>)
     86a:	2800      	cmp	r0, #0
     86c:	d102      	bne.n	874 <sd_mmc_start_write_blocks+0x14>
		sd_mmc_nb_block_remaining = 0;
     86e:	8018      	strh	r0, [r3, #0]
		return SD_MMC_ERR_COMM;
     870:	3005      	adds	r0, #5
	}
	sd_mmc_nb_block_remaining -= nb_block;
	return SD_MMC_OK;
}
     872:	bd10      	pop	{r4, pc}
	sd_mmc_nb_block_remaining -= nb_block;
     874:	8819      	ldrh	r1, [r3, #0]
	return SD_MMC_OK;
     876:	2000      	movs	r0, #0
	sd_mmc_nb_block_remaining -= nb_block;
     878:	1b09      	subs	r1, r1, r4
     87a:	8019      	strh	r1, [r3, #0]
	return SD_MMC_OK;
     87c:	e7f9      	b.n	872 <sd_mmc_start_write_blocks+0x12>
     87e:	46c0      	nop			; (mov r8, r8)
     880:	000035e5 	.word	0x000035e5
     884:	2000004c 	.word	0x2000004c

00000888 <sd_mmc_wait_end_of_write_blocks>:

sd_mmc_err_t sd_mmc_wait_end_of_write_blocks(bool abort)
{
     888:	b510      	push	{r4, lr}
	if (!driver_wait_end_of_write_blocks()) {
     88a:	4b0a      	ldr	r3, [pc, #40]	; (8b4 <sd_mmc_wait_end_of_write_blocks+0x2c>)
{
     88c:	0004      	movs	r4, r0
	if (!driver_wait_end_of_write_blocks()) {
     88e:	4798      	blx	r3
		return SD_MMC_ERR_COMM;
     890:	2305      	movs	r3, #5
	if (!driver_wait_end_of_write_blocks()) {
     892:	2800      	cmp	r0, #0
     894:	d00c      	beq.n	8b0 <sd_mmc_wait_end_of_write_blocks+0x28>
     896:	4b08      	ldr	r3, [pc, #32]	; (8b8 <sd_mmc_wait_end_of_write_blocks+0x30>)
	}
	if (abort) {
     898:	2c00      	cmp	r4, #0
     89a:	d005      	beq.n	8a8 <sd_mmc_wait_end_of_write_blocks+0x20>
		sd_mmc_nb_block_remaining = 0;
     89c:	2200      	movs	r2, #0
     89e:	801a      	strh	r2, [r3, #0]
	}

	// All blocks are transfered then stop write operation
	if (sd_mmc_nb_block_to_tranfer == 1) {
		// Single block transfer, then nothing to do
		sd_mmc_deselect_slot();
     8a0:	4b06      	ldr	r3, [pc, #24]	; (8bc <sd_mmc_wait_end_of_write_blocks+0x34>)
     8a2:	4798      	blx	r3
		return SD_MMC_OK;
     8a4:	2300      	movs	r3, #0
     8a6:	e003      	b.n	8b0 <sd_mmc_wait_end_of_write_blocks+0x28>
	} else if (sd_mmc_nb_block_remaining) {
     8a8:	881a      	ldrh	r2, [r3, #0]
		return SD_MMC_OK;
     8aa:	0023      	movs	r3, r4
	} else if (sd_mmc_nb_block_remaining) {
     8ac:	2a00      	cmp	r2, #0
     8ae:	d0f7      	beq.n	8a0 <sd_mmc_wait_end_of_write_blocks+0x18>
			return SD_MMC_ERR_COMM;
		}
	}
	sd_mmc_deselect_slot();
	return SD_MMC_OK;
}
     8b0:	0018      	movs	r0, r3
     8b2:	bd10      	pop	{r4, pc}
     8b4:	00003659 	.word	0x00003659
     8b8:	2000004c 	.word	0x2000004c
     8bc:	000001bd 	.word	0x000001bd

000008c0 <sd_mmc_test_unit_ready>:
 */

static bool sd_mmc_ejected[2] = {false, false};

Ctrl_status sd_mmc_test_unit_ready(uint8_t slot)
{
     8c0:	b570      	push	{r4, r5, r6, lr}
	switch (sd_mmc_check(slot))
     8c2:	4b0e      	ldr	r3, [pc, #56]	; (8fc <sd_mmc_test_unit_ready+0x3c>)
{
     8c4:	0005      	movs	r5, r0
	switch (sd_mmc_check(slot))
     8c6:	4798      	blx	r3
		}
		// It is not a memory card
		return CTRL_NO_PRESENT;

	case SD_MMC_INIT_ONGOING:
		return CTRL_BUSY;
     8c8:	2403      	movs	r4, #3
	switch (sd_mmc_check(slot))
     8ca:	2801      	cmp	r0, #1
     8cc:	d013      	beq.n	8f6 <sd_mmc_test_unit_ready+0x36>
     8ce:	2800      	cmp	r0, #0
     8d0:	d007      	beq.n	8e2 <sd_mmc_test_unit_ready+0x22>
	case SD_MMC_ERR_NO_CARD:
		sd_mmc_ejected[slot] = false;
		return CTRL_NO_PRESENT;

	default:
		return CTRL_FAIL;
     8d2:	3c02      	subs	r4, #2
	switch (sd_mmc_check(slot))
     8d4:	2802      	cmp	r0, #2
     8d6:	d10e      	bne.n	8f6 <sd_mmc_test_unit_ready+0x36>
		sd_mmc_ejected[slot] = false;
     8d8:	2200      	movs	r2, #0
     8da:	4b09      	ldr	r3, [pc, #36]	; (900 <sd_mmc_test_unit_ready+0x40>)
		return CTRL_NO_PRESENT;
     8dc:	0004      	movs	r4, r0
		sd_mmc_ejected[slot] = false;
     8de:	555a      	strb	r2, [r3, r5]
		return CTRL_NO_PRESENT;
     8e0:	e009      	b.n	8f6 <sd_mmc_test_unit_ready+0x36>
		if (sd_mmc_ejected[slot]) {
     8e2:	4b07      	ldr	r3, [pc, #28]	; (900 <sd_mmc_test_unit_ready+0x40>)
     8e4:	5d5c      	ldrb	r4, [r3, r5]
     8e6:	2c00      	cmp	r4, #0
     8e8:	d104      	bne.n	8f4 <sd_mmc_test_unit_ready+0x34>
		if (sd_mmc_get_type(slot) & (CARD_TYPE_SD | CARD_TYPE_MMC)) {
     8ea:	4b06      	ldr	r3, [pc, #24]	; (904 <sd_mmc_test_unit_ready+0x44>)
     8ec:	0028      	movs	r0, r5
     8ee:	4798      	blx	r3
     8f0:	0783      	lsls	r3, r0, #30
     8f2:	d100      	bne.n	8f6 <sd_mmc_test_unit_ready+0x36>
		return CTRL_NO_PRESENT;
     8f4:	2402      	movs	r4, #2
	}
}
     8f6:	0020      	movs	r0, r4
     8f8:	bd70      	pop	{r4, r5, r6, pc}
     8fa:	46c0      	nop			; (mov r8, r8)
     8fc:	0000028d 	.word	0x0000028d
     900:	20000051 	.word	0x20000051
     904:	000006a1 	.word	0x000006a1

00000908 <sd_mmc_test_unit_ready_0>:

Ctrl_status sd_mmc_test_unit_ready_0(void)
{
     908:	b510      	push	{r4, lr}
	return sd_mmc_test_unit_ready(0);
     90a:	2000      	movs	r0, #0
     90c:	4b01      	ldr	r3, [pc, #4]	; (914 <sd_mmc_test_unit_ready_0+0xc>)
     90e:	4798      	blx	r3
}
     910:	bd10      	pop	{r4, pc}
     912:	46c0      	nop			; (mov r8, r8)
     914:	000008c1 	.word	0x000008c1

00000918 <sd_mmc_read_capacity>:
{
	return sd_mmc_test_unit_ready(1);
}

Ctrl_status sd_mmc_read_capacity(uint8_t slot, uint32_t *nb_sector)
{
     918:	b570      	push	{r4, r5, r6, lr}
	// Return last sector address (-1)
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     91a:	4b05      	ldr	r3, [pc, #20]	; (930 <sd_mmc_read_capacity+0x18>)
{
     91c:	000d      	movs	r5, r1
     91e:	0004      	movs	r4, r0
	*nb_sector = (sd_mmc_get_capacity(slot) * 2) - 1;
     920:	4798      	blx	r3
     922:	0040      	lsls	r0, r0, #1
     924:	3801      	subs	r0, #1
     926:	6028      	str	r0, [r5, #0]
	return sd_mmc_test_unit_ready(slot);
     928:	4b02      	ldr	r3, [pc, #8]	; (934 <sd_mmc_read_capacity+0x1c>)
     92a:	0020      	movs	r0, r4
     92c:	4798      	blx	r3
}
     92e:	bd70      	pop	{r4, r5, r6, pc}
     930:	000006c9 	.word	0x000006c9
     934:	000008c1 	.word	0x000008c1

00000938 <sd_mmc_read_capacity_0>:

Ctrl_status sd_mmc_read_capacity_0(uint32_t *nb_sector)
{
     938:	b510      	push	{r4, lr}
     93a:	0001      	movs	r1, r0
	return sd_mmc_read_capacity(0, nb_sector);
     93c:	4b01      	ldr	r3, [pc, #4]	; (944 <sd_mmc_read_capacity_0+0xc>)
     93e:	2000      	movs	r0, #0
     940:	4798      	blx	r3
}
     942:	bd10      	pop	{r4, pc}
     944:	00000919 	.word	0x00000919

00000948 <sd_mmc_wr_protect_0>:
{
	return sd_mmc_is_write_protected(slot);
}

bool sd_mmc_wr_protect_0(void)
{
     948:	b510      	push	{r4, lr}
	return sd_mmc_is_write_protected(slot);
     94a:	2000      	movs	r0, #0
     94c:	4b01      	ldr	r3, [pc, #4]	; (954 <sd_mmc_wr_protect_0+0xc>)
     94e:	4798      	blx	r3
	return sd_mmc_wr_protect(0);
}
     950:	bd10      	pop	{r4, pc}
     952:	46c0      	nop			; (mov r8, r8)
     954:	000006f1 	.word	0x000006f1

00000958 <sd_mmc_mem_2_ram>:
/**
 * \name MEM <-> RAM Interface
 * @{
 */
Ctrl_status sd_mmc_mem_2_ram(uint8_t slot, uint32_t addr, void *ram)
{
     958:	b510      	push	{r4, lr}
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     95a:	4b0c      	ldr	r3, [pc, #48]	; (98c <sd_mmc_mem_2_ram+0x34>)
{
     95c:	0014      	movs	r4, r2
	switch (sd_mmc_init_read_blocks(slot, addr, 1)) {
     95e:	2201      	movs	r2, #1
     960:	4798      	blx	r3
     962:	2800      	cmp	r0, #0
     964:	d005      	beq.n	972 <sd_mmc_mem_2_ram+0x1a>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     966:	3802      	subs	r0, #2
     968:	4243      	negs	r3, r0
     96a:	4143      	adcs	r3, r0
     96c:	3301      	adds	r3, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     96e:	0018      	movs	r0, r3
     970:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     972:	4b07      	ldr	r3, [pc, #28]	; (990 <sd_mmc_mem_2_ram+0x38>)
     974:	2101      	movs	r1, #1
     976:	0020      	movs	r0, r4
     978:	4798      	blx	r3
		return CTRL_FAIL;
     97a:	2301      	movs	r3, #1
	if (SD_MMC_OK != sd_mmc_start_read_blocks(ram, 1)) {
     97c:	2800      	cmp	r0, #0
     97e:	d1f6      	bne.n	96e <sd_mmc_mem_2_ram+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_read_blocks(false)) {
     980:	4b04      	ldr	r3, [pc, #16]	; (994 <sd_mmc_mem_2_ram+0x3c>)
     982:	4798      	blx	r3
     984:	1e43      	subs	r3, r0, #1
     986:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     988:	b2c3      	uxtb	r3, r0
     98a:	e7f0      	b.n	96e <sd_mmc_mem_2_ram+0x16>
     98c:	000006f5 	.word	0x000006f5
     990:	0000076d 	.word	0x0000076d
     994:	00000795 	.word	0x00000795

00000998 <sd_mmc_mem_2_ram_0>:

Ctrl_status sd_mmc_mem_2_ram_0(uint32_t addr, void *ram)
{
     998:	b510      	push	{r4, lr}
     99a:	000a      	movs	r2, r1
	return sd_mmc_mem_2_ram(0, addr, ram);
     99c:	4b02      	ldr	r3, [pc, #8]	; (9a8 <sd_mmc_mem_2_ram_0+0x10>)
     99e:	0001      	movs	r1, r0
     9a0:	2000      	movs	r0, #0
     9a2:	4798      	blx	r3
}
     9a4:	bd10      	pop	{r4, pc}
     9a6:	46c0      	nop			; (mov r8, r8)
     9a8:	00000959 	.word	0x00000959

000009ac <sd_mmc_ram_2_mem>:
{
	return sd_mmc_mem_2_ram(1, addr, ram);
}

Ctrl_status sd_mmc_ram_2_mem(uint8_t slot, uint32_t addr, const void *ram)
{
     9ac:	b510      	push	{r4, lr}
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     9ae:	4b0c      	ldr	r3, [pc, #48]	; (9e0 <sd_mmc_ram_2_mem+0x34>)
{
     9b0:	0014      	movs	r4, r2
	switch (sd_mmc_init_write_blocks(slot, addr, 1)) {
     9b2:	2201      	movs	r2, #1
     9b4:	4798      	blx	r3
     9b6:	2800      	cmp	r0, #0
     9b8:	d005      	beq.n	9c6 <sd_mmc_ram_2_mem+0x1a>
	case SD_MMC_OK:
		break;
	case SD_MMC_ERR_NO_CARD:
		return CTRL_NO_PRESENT;
	default:
		return CTRL_FAIL;
     9ba:	3802      	subs	r0, #2
     9bc:	4243      	negs	r3, r0
     9be:	4143      	adcs	r3, r0
     9c0:	3301      	adds	r3, #1
	}
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
		return CTRL_FAIL;
	}
	return CTRL_GOOD;
}
     9c2:	0018      	movs	r0, r3
     9c4:	bd10      	pop	{r4, pc}
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     9c6:	4b07      	ldr	r3, [pc, #28]	; (9e4 <sd_mmc_ram_2_mem+0x38>)
     9c8:	2101      	movs	r1, #1
     9ca:	0020      	movs	r0, r4
     9cc:	4798      	blx	r3
		return CTRL_FAIL;
     9ce:	2301      	movs	r3, #1
	if (SD_MMC_OK != sd_mmc_start_write_blocks(ram, 1)) {
     9d0:	2800      	cmp	r0, #0
     9d2:	d1f6      	bne.n	9c2 <sd_mmc_ram_2_mem+0x16>
	if (SD_MMC_OK != sd_mmc_wait_end_of_write_blocks(false)) {
     9d4:	4b04      	ldr	r3, [pc, #16]	; (9e8 <sd_mmc_ram_2_mem+0x3c>)
     9d6:	4798      	blx	r3
     9d8:	1e43      	subs	r3, r0, #1
     9da:	4198      	sbcs	r0, r3
		return CTRL_NO_PRESENT;
     9dc:	b2c3      	uxtb	r3, r0
     9de:	e7f0      	b.n	9c2 <sd_mmc_ram_2_mem+0x16>
     9e0:	000007f5 	.word	0x000007f5
     9e4:	00000861 	.word	0x00000861
     9e8:	00000889 	.word	0x00000889

000009ec <sd_mmc_ram_2_mem_0>:

Ctrl_status sd_mmc_ram_2_mem_0(uint32_t addr, const void *ram)
{
     9ec:	b510      	push	{r4, lr}
     9ee:	000a      	movs	r2, r1
	return sd_mmc_ram_2_mem(0, addr, ram);
     9f0:	4b02      	ldr	r3, [pc, #8]	; (9fc <sd_mmc_ram_2_mem_0+0x10>)
     9f2:	0001      	movs	r1, r0
     9f4:	2000      	movs	r0, #0
     9f6:	4798      	blx	r3
}
     9f8:	bd10      	pop	{r4, pc}
     9fa:	46c0      	nop			; (mov r8, r8)
     9fc:	000009ad 	.word	0x000009ad

00000a00 <rtc_calendar_is_syncing>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a00:	6803      	ldr	r3, [r0, #0]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
     a02:	7a98      	ldrb	r0, [r3, #10]
     a04:	09c0      	lsrs	r0, r0, #7
                return true;
        }

        return false;
}
     a06:	4770      	bx	lr

00000a08 <rtc_calendar_enable>:
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a08:	2208      	movs	r2, #8
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
     a0a:	b570      	push	{r4, r5, r6, lr}
     a0c:	0005      	movs	r5, r0
     a0e:	4b06      	ldr	r3, [pc, #24]	; (a28 <rtc_calendar_enable+0x20>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a10:	6804      	ldr	r4, [r0, #0]
     a12:	601a      	str	r2, [r3, #0]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     a14:	0028      	movs	r0, r5
     a16:	4b05      	ldr	r3, [pc, #20]	; (a2c <rtc_calendar_enable+0x24>)
     a18:	4798      	blx	r3
     a1a:	2800      	cmp	r0, #0
     a1c:	d1fa      	bne.n	a14 <rtc_calendar_enable+0xc>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
     a1e:	2302      	movs	r3, #2
     a20:	8822      	ldrh	r2, [r4, #0]
     a22:	4313      	orrs	r3, r2
     a24:	8023      	strh	r3, [r4, #0]
}
     a26:	bd70      	pop	{r4, r5, r6, pc}
     a28:	e000e100 	.word	0xe000e100
     a2c:	00000a01 	.word	0x00000a01

00000a30 <rtc_calendar_disable>:
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     a30:	2208      	movs	r2, #8
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
     a32:	b570      	push	{r4, r5, r6, lr}
     a34:	0005      	movs	r5, r0
     a36:	4b08      	ldr	r3, [pc, #32]	; (a58 <rtc_calendar_disable+0x28>)
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
     a38:	6804      	ldr	r4, [r0, #0]
     a3a:	67da      	str	r2, [r3, #124]	; 0x7c

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_calendar_is_syncing(module)) {
     a3c:	0028      	movs	r0, r5
     a3e:	4b07      	ldr	r3, [pc, #28]	; (a5c <rtc_calendar_disable+0x2c>)
     a40:	4798      	blx	r3
     a42:	2800      	cmp	r0, #0
     a44:	d1fa      	bne.n	a3c <rtc_calendar_disable+0xc>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     a46:	23c1      	movs	r3, #193	; 0xc1
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     a48:	2202      	movs	r2, #2
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
     a4a:	71a3      	strb	r3, [r4, #6]
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
     a4c:	7223      	strb	r3, [r4, #8]
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
     a4e:	8823      	ldrh	r3, [r4, #0]
     a50:	4393      	bics	r3, r2
     a52:	8023      	strh	r3, [r4, #0]
}
     a54:	bd70      	pop	{r4, r5, r6, pc}
     a56:	46c0      	nop			; (mov r8, r8)
     a58:	e000e104 	.word	0xe000e104
     a5c:	00000a01 	.word	0x00000a01

00000a60 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
     a60:	b570      	push	{r4, r5, r6, lr}
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;

	/* Disable module before reset. */
	rtc_calendar_disable(module);
     a62:	4b08      	ldr	r3, [pc, #32]	; (a84 <rtc_calendar_reset+0x24>)
{
     a64:	0004      	movs	r4, r0
	Rtc *const rtc_module = module->hw;
     a66:	6805      	ldr	r5, [r0, #0]
	rtc_calendar_disable(module);
     a68:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
     a6a:	2300      	movs	r3, #0
     a6c:	8223      	strh	r3, [r4, #16]
	module->enabled_callback    = 0;
     a6e:	8263      	strh	r3, [r4, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
     a70:	0020      	movs	r0, r4
     a72:	4b05      	ldr	r3, [pc, #20]	; (a88 <rtc_calendar_reset+0x28>)
     a74:	4798      	blx	r3
     a76:	2800      	cmp	r0, #0
     a78:	d1fa      	bne.n	a70 <rtc_calendar_reset+0x10>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
     a7a:	2301      	movs	r3, #1
     a7c:	882a      	ldrh	r2, [r5, #0]
     a7e:	4313      	orrs	r3, r2
     a80:	802b      	strh	r3, [r5, #0]
}
     a82:	bd70      	pop	{r4, r5, r6, pc}
     a84:	00000a31 	.word	0x00000a31
     a88:	00000a01 	.word	0x00000a01

00000a8c <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
     a8c:	b510      	push	{r4, lr}
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
     a8e:	88cb      	ldrh	r3, [r1, #6]
     a90:	88c2      	ldrh	r2, [r0, #6]

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     a92:	790c      	ldrb	r4, [r1, #4]
	register_value = (time->year - module->year_init_value) <<
     a94:	1a9a      	subs	r2, r3, r2
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     a96:	794b      	ldrb	r3, [r1, #5]
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
     a98:	0464      	lsls	r4, r4, #17
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
     a9a:	059b      	lsls	r3, r3, #22

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     a9c:	4323      	orrs	r3, r4
     a9e:	788c      	ldrb	r4, [r1, #2]
	register_value = (time->year - module->year_init_value) <<
     aa0:	0692      	lsls	r2, r2, #26
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
     aa2:	0324      	lsls	r4, r4, #12
     aa4:	4323      	orrs	r3, r4
     aa6:	4313      	orrs	r3, r2

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
     aa8:	7902      	ldrb	r2, [r0, #4]
     aaa:	2a00      	cmp	r2, #0
     aac:	d105      	bne.n	aba <rtc_calendar_time_to_register_value+0x2e>
     aae:	78ca      	ldrb	r2, [r1, #3]
     ab0:	2a00      	cmp	r2, #0
     ab2:	d002      	beq.n	aba <rtc_calendar_time_to_register_value+0x2e>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
     ab4:	2280      	movs	r2, #128	; 0x80
     ab6:	0252      	lsls	r2, r2, #9
     ab8:	4313      	orrs	r3, r2
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     aba:	7848      	ldrb	r0, [r1, #1]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     abc:	780a      	ldrb	r2, [r1, #0]
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
     abe:	0180      	lsls	r0, r0, #6
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
     ac0:	4310      	orrs	r0, r2
     ac2:	4318      	orrs	r0, r3

	return register_value;
}
     ac4:	bd10      	pop	{r4, pc}

00000ac6 <rtc_calendar_register_value_to_time>:
 */
void rtc_calendar_register_value_to_time(
		struct rtc_module *const module,
		const uint32_t register_value,
		struct rtc_calendar_time *const time)
{
     ac6:	b570      	push	{r4, r5, r6, lr}
	/* Set year plus value of initial year. */
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;

	/* Set month value into time struct. */
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     ac8:	250f      	movs	r5, #15
			RTC_MODE2_CLOCK_MONTH_Pos);

	/* Set day value into time struct. */
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     aca:	261f      	movs	r6, #31
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     acc:	88c4      	ldrh	r4, [r0, #6]
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     ace:	0e8b      	lsrs	r3, r1, #26
			RTC_MODE2_CLOCK_YEAR_Pos) + module->year_init_value;
     ad0:	191b      	adds	r3, r3, r4
	time->month = ((register_value & RTC_MODE2_CLOCK_MONTH_Msk) >>
     ad2:	0d8c      	lsrs	r4, r1, #22
     ad4:	402c      	ands	r4, r5
     ad6:	7154      	strb	r4, [r2, #5]
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     ad8:	0c4c      	lsrs	r4, r1, #17
     ada:	4034      	ands	r4, r6
	time->year = ((register_value & RTC_MODE2_CLOCK_YEAR_Msk) >>
     adc:	80d3      	strh	r3, [r2, #6]
	time->day = ((register_value & RTC_MODE2_CLOCK_DAY_Msk) >>
     ade:	7114      	strb	r4, [r2, #4]
			RTC_MODE2_CLOCK_DAY_Pos);

	if (module->clock_24h) {
     ae0:	7900      	ldrb	r0, [r0, #4]
     ae2:	0b0b      	lsrs	r3, r1, #12
     ae4:	2800      	cmp	r0, #0
     ae6:	d008      	beq.n	afa <rtc_calendar_register_value_to_time+0x34>
		/* Set hour in 24h mode. */
		time->hour = ((register_value & RTC_MODE2_CLOCK_HOUR_Msk) >>
     ae8:	4033      	ands	r3, r6
     aea:	7093      	strb	r3, [r2, #2]
		/* Set pm flag */
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
	}

	/* Set minute value into time struct. */
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     aec:	203f      	movs	r0, #63	; 0x3f
     aee:	098b      	lsrs	r3, r1, #6
     af0:	4003      	ands	r3, r0
			RTC_MODE2_CLOCK_MINUTE_Pos);

	/* Set second value into time struct. */
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     af2:	4001      	ands	r1, r0
	time->minute = ((register_value & RTC_MODE2_CLOCK_MINUTE_Msk) >>
     af4:	7053      	strb	r3, [r2, #1]
	time->second = ((register_value & RTC_MODE2_CLOCK_SECOND_Msk) >>
     af6:	7011      	strb	r1, [r2, #0]
			RTC_MODE2_CLOCK_SECOND_Pos);
}
     af8:	bd70      	pop	{r4, r5, r6, pc}
				(RTC_MODE2_CLOCK_HOUR_Msk & ~RTC_MODE2_CLOCK_HOUR_PM)) >>
     afa:	402b      	ands	r3, r5
		time->hour = ((register_value &
     afc:	7093      	strb	r3, [r2, #2]
		time->pm = ((register_value & RTC_MODE2_CLOCK_HOUR_PM) != 0);
     afe:	03cb      	lsls	r3, r1, #15
     b00:	0fdb      	lsrs	r3, r3, #31
     b02:	70d3      	strb	r3, [r2, #3]
     b04:	e7f2      	b.n	aec <rtc_calendar_register_value_to_time+0x26>
	...

00000b08 <rtc_calendar_get_time>:
 * \param[out] time  Pointer to value that will be filled with current time
 */
void rtc_calendar_get_time(
		struct rtc_module *const module,
		struct rtc_calendar_time *const time)
{
     b08:	b570      	push	{r4, r5, r6, lr}

	Rtc *const rtc_module = module->hw;

	/* Change of read method based on value of continuously_update value in
	 * the configuration structure. */
	if (!(module->continuously_update)) {
     b0a:	7943      	ldrb	r3, [r0, #5]
{
     b0c:	0005      	movs	r5, r0
     b0e:	000e      	movs	r6, r1
	Rtc *const rtc_module = module->hw;
     b10:	6804      	ldr	r4, [r0, #0]
	if (!(module->continuously_update)) {
     b12:	2b00      	cmp	r3, #0
     b14:	d10c      	bne.n	b30 <rtc_calendar_get_time+0x28>
		/* Request read on CLOCK register. */
		rtc_module->MODE2.READREQ.reg = RTC_READREQ_RREQ;
     b16:	4b0d      	ldr	r3, [pc, #52]	; (b4c <rtc_calendar_get_time+0x44>)
     b18:	8063      	strh	r3, [r4, #2]

		while (rtc_calendar_is_syncing(module)) {
     b1a:	0028      	movs	r0, r5
     b1c:	4b0c      	ldr	r3, [pc, #48]	; (b50 <rtc_calendar_get_time+0x48>)
     b1e:	4798      	blx	r3
     b20:	2800      	cmp	r0, #0
     b22:	d1fa      	bne.n	b1a <rtc_calendar_get_time+0x12>

	/* Read value. */
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;

	/* Convert value to time structure. */
	rtc_calendar_register_value_to_time(module, register_value, time);
     b24:	0032      	movs	r2, r6
     b26:	0028      	movs	r0, r5
	uint32_t register_value = rtc_module->MODE2.CLOCK.reg;
     b28:	6921      	ldr	r1, [r4, #16]
	rtc_calendar_register_value_to_time(module, register_value, time);
     b2a:	4b0a      	ldr	r3, [pc, #40]	; (b54 <rtc_calendar_get_time+0x4c>)
     b2c:	4798      	blx	r3
}
     b2e:	bd70      	pop	{r4, r5, r6, pc}
	} else if (!(rtc_module->MODE2.READREQ.reg & RTC_READREQ_RCONT)){
     b30:	8863      	ldrh	r3, [r4, #2]
     b32:	045b      	lsls	r3, r3, #17
     b34:	d4f6      	bmi.n	b24 <rtc_calendar_get_time+0x1c>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT | RTC_READREQ_RREQ;
     b36:	22c0      	movs	r2, #192	; 0xc0
     b38:	8863      	ldrh	r3, [r4, #2]
     b3a:	0212      	lsls	r2, r2, #8
     b3c:	4313      	orrs	r3, r2
     b3e:	8063      	strh	r3, [r4, #2]
		while (rtc_calendar_is_syncing(module)) {
     b40:	0028      	movs	r0, r5
     b42:	4b03      	ldr	r3, [pc, #12]	; (b50 <rtc_calendar_get_time+0x48>)
     b44:	4798      	blx	r3
     b46:	2800      	cmp	r0, #0
     b48:	d1fa      	bne.n	b40 <rtc_calendar_get_time+0x38>
     b4a:	e7eb      	b.n	b24 <rtc_calendar_get_time+0x1c>
     b4c:	ffff8000 	.word	0xffff8000
     b50:	00000a01 	.word	0x00000a01
     b54:	00000ac7 	.word	0x00000ac7

00000b58 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
     b58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     b5a:	0005      	movs	r5, r0
     b5c:	000e      	movs	r6, r1
     b5e:	0014      	movs	r4, r2

	Rtc *const rtc_module = module->hw;

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
		return STATUS_ERR_INVALID_ARG;
     b60:	2017      	movs	r0, #23
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
     b62:	2a01      	cmp	r2, #1
     b64:	d810      	bhi.n	b88 <rtc_calendar_set_alarm+0x30>
	Rtc *const rtc_module = module->hw;
     b66:	682b      	ldr	r3, [r5, #0]
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     b68:	0028      	movs	r0, r5
	Rtc *const rtc_module = module->hw;
     b6a:	9301      	str	r3, [sp, #4]
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
     b6c:	4b07      	ldr	r3, [pc, #28]	; (b8c <rtc_calendar_set_alarm+0x34>)
     b6e:	4798      	blx	r3
     b70:	0007      	movs	r7, r0

	while (rtc_calendar_is_syncing(module)) {
     b72:	0028      	movs	r0, r5
     b74:	4b06      	ldr	r3, [pc, #24]	; (b90 <rtc_calendar_set_alarm+0x38>)
     b76:	4798      	blx	r3
     b78:	2800      	cmp	r0, #0
     b7a:	d1fa      	bne.n	b72 <rtc_calendar_set_alarm+0x1a>
     b7c:	9b01      	ldr	r3, [sp, #4]
     b7e:	00e4      	lsls	r4, r4, #3
     b80:	191c      	adds	r4, r3, r4
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
     b82:	61a7      	str	r7, [r4, #24]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
     b84:	7a33      	ldrb	r3, [r6, #8]
     b86:	7723      	strb	r3, [r4, #28]

	return STATUS_OK;
}
     b88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
     b8a:	46c0      	nop			; (mov r8, r8)
     b8c:	00000a8d 	.word	0x00000a8d
     b90:	00000a01 	.word	0x00000a01

00000b94 <rtc_calendar_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     b94:	2320      	movs	r3, #32
{
     b96:	b537      	push	{r0, r1, r2, r4, r5, lr}
     b98:	0014      	movs	r4, r2
     b9a:	4a1c      	ldr	r2, [pc, #112]	; (c0c <rtc_calendar_init+0x78>)
	module->hw = hw;
     b9c:	6001      	str	r1, [r0, #0]
     b9e:	6991      	ldr	r1, [r2, #24]
{
     ba0:	0005      	movs	r5, r0
     ba2:	430b      	orrs	r3, r1
     ba4:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
     ba6:	2302      	movs	r3, #2
     ba8:	a901      	add	r1, sp, #4
     baa:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
     bac:	2004      	movs	r0, #4
     bae:	4b18      	ldr	r3, [pc, #96]	; (c10 <rtc_calendar_init+0x7c>)
     bb0:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
     bb2:	2004      	movs	r0, #4
     bb4:	4b17      	ldr	r3, [pc, #92]	; (c14 <rtc_calendar_init+0x80>)
     bb6:	4798      	blx	r3
	rtc_calendar_reset(module);
     bb8:	4b17      	ldr	r3, [pc, #92]	; (c18 <rtc_calendar_init+0x84>)
     bba:	0028      	movs	r0, r5
     bbc:	4798      	blx	r3
	module->clock_24h           = config->clock_24h;
     bbe:	7923      	ldrb	r3, [r4, #4]
     bc0:	712b      	strb	r3, [r5, #4]
	module->continuously_update = config->continuously_update;
     bc2:	78e3      	ldrb	r3, [r4, #3]
     bc4:	716b      	strb	r3, [r5, #5]
	module->year_init_value     = config->year_init_value;
     bc6:	88e3      	ldrh	r3, [r4, #6]
     bc8:	80eb      	strh	r3, [r5, #6]
	_rtc_instance[0] = module;
     bca:	4b14      	ldr	r3, [pc, #80]	; (c1c <rtc_calendar_init+0x88>)
     bcc:	601d      	str	r5, [r3, #0]
	if (!(config->clock_24h)) {
     bce:	7921      	ldrb	r1, [r4, #4]
	Rtc *const rtc_module = module->hw;
     bd0:	682a      	ldr	r2, [r5, #0]
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     bd2:	8823      	ldrh	r3, [r4, #0]
	if (!(config->clock_24h)) {
     bd4:	2900      	cmp	r1, #0
     bd6:	d016      	beq.n	c06 <rtc_calendar_init+0x72>
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
     bd8:	2108      	movs	r1, #8
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     bda:	430b      	orrs	r3, r1
	if (config->clear_on_match) {
     bdc:	78a1      	ldrb	r1, [r4, #2]
     bde:	2900      	cmp	r1, #0
     be0:	d001      	beq.n	be6 <rtc_calendar_init+0x52>
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
     be2:	2180      	movs	r1, #128	; 0x80
     be4:	430b      	orrs	r3, r1
	rtc_module->MODE2.CTRL.reg = tmp_reg;
     be6:	8013      	strh	r3, [r2, #0]
	if (config->continuously_update) {
     be8:	78e3      	ldrb	r3, [r4, #3]
     bea:	2b00      	cmp	r3, #0
     bec:	d004      	beq.n	bf8 <rtc_calendar_init+0x64>
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
     bee:	2380      	movs	r3, #128	; 0x80
     bf0:	8851      	ldrh	r1, [r2, #2]
     bf2:	01db      	lsls	r3, r3, #7
     bf4:	430b      	orrs	r3, r1
     bf6:	8053      	strh	r3, [r2, #2]
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
     bf8:	0021      	movs	r1, r4
     bfa:	0028      	movs	r0, r5
     bfc:	3108      	adds	r1, #8
     bfe:	2200      	movs	r2, #0
     c00:	4b07      	ldr	r3, [pc, #28]	; (c20 <rtc_calendar_init+0x8c>)
     c02:	4798      	blx	r3
}
     c04:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
     c06:	2148      	movs	r1, #72	; 0x48
     c08:	e7e7      	b.n	bda <rtc_calendar_init+0x46>
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	40000400 	.word	0x40000400
     c10:	000045ed 	.word	0x000045ed
     c14:	00004565 	.word	0x00004565
     c18:	00000a61 	.word	0x00000a61
     c1c:	2000030c 	.word	0x2000030c
     c20:	00000b59 	.word	0x00000b59

00000c24 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
     c24:	b570      	push	{r4, r5, r6, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
     c26:	4b0e      	ldr	r3, [pc, #56]	; (c60 <RTC_Handler+0x3c>)
     c28:	681b      	ldr	r3, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
     c2a:	8a59      	ldrh	r1, [r3, #18]
	Rtc *const rtc_module = module->hw;
     c2c:	681c      	ldr	r4, [r3, #0]
	callback_mask &= module->registered_callback;
     c2e:	8a1a      	ldrh	r2, [r3, #16]
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
     c30:	7a20      	ldrb	r0, [r4, #8]
	callback_mask &= module->registered_callback;
     c32:	400a      	ands	r2, r1
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
     c34:	79e1      	ldrb	r1, [r4, #7]
     c36:	4001      	ands	r1, r0
	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
     c38:	b248      	sxtb	r0, r1
     c3a:	2800      	cmp	r0, #0
     c3c:	da06      	bge.n	c4c <RTC_Handler+0x28>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
     c3e:	0792      	lsls	r2, r2, #30
     c40:	d501      	bpl.n	c46 <RTC_Handler+0x22>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
     c42:	68db      	ldr	r3, [r3, #12]
     c44:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
     c46:	2380      	movs	r3, #128	; 0x80
     c48:	7223      	strb	r3, [r4, #8]
	_rtc_interrupt_handler(0);
}
     c4a:	bd70      	pop	{r4, r5, r6, pc}
     c4c:	2501      	movs	r5, #1
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
     c4e:	4229      	tst	r1, r5
     c50:	d0fb      	beq.n	c4a <RTC_Handler+0x26>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
     c52:	422a      	tst	r2, r5
     c54:	d001      	beq.n	c5a <RTC_Handler+0x36>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
     c56:	689b      	ldr	r3, [r3, #8]
     c58:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
     c5a:	7225      	strb	r5, [r4, #8]
}
     c5c:	e7f5      	b.n	c4a <RTC_Handler+0x26>
     c5e:	46c0      	nop			; (mov r8, r8)
     c60:	2000030c 	.word	0x2000030c

00000c64 <disk_initialize>:
	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
     c64:	23a0      	movs	r3, #160	; 0xa0
 *
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_PROTECT).
 */
DSTATUS disk_initialize(BYTE drv)
{
     c66:	b530      	push	{r4, r5, lr}
     c68:	b087      	sub	sp, #28
     c6a:	aa01      	add	r2, sp, #4
     c6c:	011b      	lsls	r3, r3, #4
     c6e:	8013      	strh	r3, [r2, #0]
	config->clear_on_match      = false;
     c70:	2300      	movs	r3, #0
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
	config->clock_24h           = false;
	config->year_init_value     = 2000;
     c72:	21fa      	movs	r1, #250	; 0xfa
	config->clear_on_match      = false;
     c74:	7093      	strb	r3, [r2, #2]
	config->continuously_update = false;
     c76:	70d3      	strb	r3, [r2, #3]
	config_rtc_calendar.alarm[0].time = init_time;
     c78:	7253      	strb	r3, [r2, #9]
     c7a:	7293      	strb	r3, [r2, #10]
     c7c:	72d3      	strb	r3, [r2, #11]
     c7e:	4b15      	ldr	r3, [pc, #84]	; (cd4 <disk_initialize+0x70>)
	config->year_init_value     = 2000;
     c80:	00c9      	lsls	r1, r1, #3
{
     c82:	0004      	movs	r4, r0
     c84:	80d1      	strh	r1, [r2, #6]
	config_rtc_calendar.alarm[0].time = init_time;
     c86:	2004      	movs	r0, #4
	config_rtc_calendar.clock_24h     = true;
     c88:	2101      	movs	r1, #1
	config_rtc_calendar.alarm[0].time = init_time;
     c8a:	81d3      	strh	r3, [r2, #14]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
     c8c:	2306      	movs	r3, #6
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
     c8e:	4d12      	ldr	r5, [pc, #72]	; (cd8 <disk_initialize+0x74>)
	config_rtc_calendar.clock_24h     = true;
     c90:	7111      	strb	r1, [r2, #4]
	config_rtc_calendar.alarm[0].time = init_time;
     c92:	7210      	strb	r0, [r2, #8]
     c94:	7311      	strb	r1, [r2, #12]
     c96:	7351      	strb	r1, [r2, #13]
	config_rtc_calendar.alarm[0].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
     c98:	7413      	strb	r3, [r2, #16]
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
     c9a:	0028      	movs	r0, r5
     c9c:	4b0f      	ldr	r3, [pc, #60]	; (cdc <disk_initialize+0x78>)
     c9e:	4910      	ldr	r1, [pc, #64]	; (ce0 <disk_initialize+0x7c>)
     ca0:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
     ca2:	0028      	movs	r0, r5
     ca4:	4b0f      	ldr	r3, [pc, #60]	; (ce4 <disk_initialize+0x80>)
     ca6:	4798      	blx	r3
	/* USB disk with multiple LUNs */
	if (drv > LUN_ID_USB + Lun_usb_get_lun()) {
		return STA_NOINIT;
	}
#else
	if (drv > MAX_LUN) {
     ca8:	2c01      	cmp	r4, #1
     caa:	d902      	bls.n	cb2 <disk_initialize+0x4e>
		/* At least one of the LUN should be defined */
		return STA_NOINIT;
     cac:	2001      	movs	r0, #1
		return STA_PROTECT;
	}

	/* The memory should already be initialized */
	return 0;
}
     cae:	b007      	add	sp, #28
     cb0:	bd30      	pop	{r4, r5, pc}
		mem_status = mem_test_unit_ready(drv);
     cb2:	0020      	movs	r0, r4
     cb4:	4d0c      	ldr	r5, [pc, #48]	; (ce8 <disk_initialize+0x84>)
     cb6:	47a8      	blx	r5
		if (CTRL_BUSY != mem_status) {
     cb8:	2803      	cmp	r0, #3
     cba:	d101      	bne.n	cc0 <disk_initialize+0x5c>
		mem_status = mem_test_unit_ready(drv);
     cbc:	0020      	movs	r0, r4
     cbe:	47a8      	blx	r5
	if (mem_status != CTRL_GOOD) {
     cc0:	2800      	cmp	r0, #0
     cc2:	d1f3      	bne.n	cac <disk_initialize+0x48>
	if (mem_wr_protect(drv)) {
     cc4:	4b09      	ldr	r3, [pc, #36]	; (cec <disk_initialize+0x88>)
     cc6:	0020      	movs	r0, r4
     cc8:	4798      	blx	r3
	return 0;
     cca:	1e43      	subs	r3, r0, #1
     ccc:	4198      	sbcs	r0, r3
     cce:	0080      	lsls	r0, r0, #2
     cd0:	e7ed      	b.n	cae <disk_initialize+0x4a>
     cd2:	46c0      	nop			; (mov r8, r8)
     cd4:	000007de 	.word	0x000007de
     cd8:	20000310 	.word	0x20000310
     cdc:	00000b95 	.word	0x00000b95
     ce0:	40001400 	.word	0x40001400
     ce4:	00000a09 	.word	0x00000a09
     ce8:	0000367d 	.word	0x0000367d
     cec:	000036b1 	.word	0x000036b1

00000cf0 <disk_status>:
 * \return 0 or disk status in combination of DSTATUS bits
 *         (STA_NOINIT, STA_NODISK, STA_PROTECT).
 */
DSTATUS disk_status(BYTE drv)
{
	switch (mem_test_unit_ready(drv)) {
     cf0:	4b05      	ldr	r3, [pc, #20]	; (d08 <disk_status+0x18>)
{
     cf2:	b510      	push	{r4, lr}
	switch (mem_test_unit_ready(drv)) {
     cf4:	4798      	blx	r3
	case CTRL_GOOD:
		return 0;
     cf6:	1e03      	subs	r3, r0, #0
	switch (mem_test_unit_ready(drv)) {
     cf8:	d003      	beq.n	d02 <disk_status+0x12>
	case CTRL_NO_PRESENT:
		return STA_NOINIT | STA_NODISK;
     cfa:	2303      	movs	r3, #3
	switch (mem_test_unit_ready(drv)) {
     cfc:	2802      	cmp	r0, #2
     cfe:	d000      	beq.n	d02 <disk_status+0x12>
	default:
		return STA_NOINIT;
     d00:	3b02      	subs	r3, #2
	}
}
     d02:	0018      	movs	r0, r3
     d04:	bd10      	pop	{r4, pc}
     d06:	46c0      	nop			; (mov r8, r8)
     d08:	0000367d 	.word	0x0000367d

00000d0c <disk_read>:
 * \param count Number of sectors to read (1..255).
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_read(BYTE drv, BYTE *buff, DWORD sector, BYTE count)
{
     d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0e:	b087      	sub	sp, #28
     d10:	9302      	str	r3, [sp, #8]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
     d12:	4b17      	ldr	r3, [pc, #92]	; (d70 <disk_read+0x64>)
{
     d14:	0007      	movs	r7, r0
     d16:	000c      	movs	r4, r1
     d18:	0016      	movs	r6, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
     d1a:	4798      	blx	r3
     d1c:	1e05      	subs	r5, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
     d1e:	d102      	bne.n	d26 <disk_read+0x1a>
		return RES_ERROR;
     d20:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
     d22:	b007      	add	sp, #28
     d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
     d26:	4b13      	ldr	r3, [pc, #76]	; (d74 <disk_read+0x68>)
     d28:	a905      	add	r1, sp, #20
     d2a:	0038      	movs	r0, r7
     d2c:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
     d2e:	9a02      	ldr	r2, [sp, #8]
			(ul_last_sector_num + 1) * uc_sector_size) {
     d30:	9b05      	ldr	r3, [sp, #20]
	if ((sector + count * uc_sector_size) >
     d32:	436a      	muls	r2, r5
			(ul_last_sector_num + 1) * uc_sector_size) {
     d34:	3301      	adds	r3, #1
     d36:	436b      	muls	r3, r5
	if ((sector + count * uc_sector_size) >
     d38:	1992      	adds	r2, r2, r6
		return RES_PARERR;
     d3a:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
     d3c:	429a      	cmp	r2, r3
     d3e:	d8f0      	bhi.n	d22 <disk_read+0x16>
     d40:	026b      	lsls	r3, r5, #9
     d42:	9303      	str	r3, [sp, #12]
     d44:	2300      	movs	r3, #0
	for (i = 0; i < count; i++) {
     d46:	9301      	str	r3, [sp, #4]
     d48:	9b01      	ldr	r3, [sp, #4]
     d4a:	9a02      	ldr	r2, [sp, #8]
     d4c:	4293      	cmp	r3, r2
     d4e:	d301      	bcc.n	d54 <disk_read+0x48>
	return RES_OK;
     d50:	2000      	movs	r0, #0
     d52:	e7e6      	b.n	d22 <disk_read+0x16>
		if (memory_2_ram(drv, sector + uc_sector_size * i,
     d54:	0022      	movs	r2, r4
     d56:	0031      	movs	r1, r6
     d58:	4b07      	ldr	r3, [pc, #28]	; (d78 <disk_read+0x6c>)
     d5a:	0038      	movs	r0, r7
     d5c:	4798      	blx	r3
     d5e:	9b03      	ldr	r3, [sp, #12]
     d60:	1976      	adds	r6, r6, r5
     d62:	18e4      	adds	r4, r4, r3
     d64:	2800      	cmp	r0, #0
     d66:	d1db      	bne.n	d20 <disk_read+0x14>
	for (i = 0; i < count; i++) {
     d68:	9b01      	ldr	r3, [sp, #4]
     d6a:	3301      	adds	r3, #1
     d6c:	e7eb      	b.n	d46 <disk_read+0x3a>
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	000036a9 	.word	0x000036a9
     d74:	00003691 	.word	0x00003691
     d78:	000036c5 	.word	0x000036c5

00000d7c <disk_write>:
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
#if _READONLY == 0
DRESULT disk_write(BYTE drv, BYTE const *buff, DWORD sector, BYTE count)
{
     d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
     d7e:	b087      	sub	sp, #28
     d80:	9302      	str	r3, [sp, #8]
#if ACCESS_MEM_TO_RAM
	uint8_t uc_sector_size = mem_sector_size(drv);
     d82:	4b17      	ldr	r3, [pc, #92]	; (de0 <disk_write+0x64>)
{
     d84:	0007      	movs	r7, r0
     d86:	000c      	movs	r4, r1
     d88:	0016      	movs	r6, r2
	uint8_t uc_sector_size = mem_sector_size(drv);
     d8a:	4798      	blx	r3
     d8c:	1e05      	subs	r5, r0, #0
	uint32_t i;
	uint32_t ul_last_sector_num;

	if (uc_sector_size == 0) {
     d8e:	d102      	bne.n	d96 <disk_write+0x1a>
		return RES_ERROR;
     d90:	2001      	movs	r0, #1
	return RES_OK;

#else
	return RES_ERROR;
#endif
}
     d92:	b007      	add	sp, #28
     d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
	mem_read_capacity(drv, &ul_last_sector_num);
     d96:	4b13      	ldr	r3, [pc, #76]	; (de4 <disk_write+0x68>)
     d98:	a905      	add	r1, sp, #20
     d9a:	0038      	movs	r0, r7
     d9c:	4798      	blx	r3
	if ((sector + count * uc_sector_size) >
     d9e:	9a02      	ldr	r2, [sp, #8]
			(ul_last_sector_num + 1) * uc_sector_size) {
     da0:	9b05      	ldr	r3, [sp, #20]
	if ((sector + count * uc_sector_size) >
     da2:	436a      	muls	r2, r5
			(ul_last_sector_num + 1) * uc_sector_size) {
     da4:	3301      	adds	r3, #1
     da6:	436b      	muls	r3, r5
	if ((sector + count * uc_sector_size) >
     da8:	1992      	adds	r2, r2, r6
		return RES_PARERR;
     daa:	2004      	movs	r0, #4
	if ((sector + count * uc_sector_size) >
     dac:	429a      	cmp	r2, r3
     dae:	d8f0      	bhi.n	d92 <disk_write+0x16>
     db0:	026b      	lsls	r3, r5, #9
     db2:	9303      	str	r3, [sp, #12]
     db4:	2300      	movs	r3, #0
	for (i = 0; i < count; i++) {
     db6:	9301      	str	r3, [sp, #4]
     db8:	9b01      	ldr	r3, [sp, #4]
     dba:	9a02      	ldr	r2, [sp, #8]
     dbc:	4293      	cmp	r3, r2
     dbe:	d301      	bcc.n	dc4 <disk_write+0x48>
	return RES_OK;
     dc0:	2000      	movs	r0, #0
     dc2:	e7e6      	b.n	d92 <disk_write+0x16>
		if (ram_2_memory(drv, sector + uc_sector_size * i,
     dc4:	0022      	movs	r2, r4
     dc6:	0031      	movs	r1, r6
     dc8:	4b07      	ldr	r3, [pc, #28]	; (de8 <disk_write+0x6c>)
     dca:	0038      	movs	r0, r7
     dcc:	4798      	blx	r3
     dce:	9b03      	ldr	r3, [sp, #12]
     dd0:	1976      	adds	r6, r6, r5
     dd2:	18e4      	adds	r4, r4, r3
     dd4:	2800      	cmp	r0, #0
     dd6:	d1db      	bne.n	d90 <disk_write+0x14>
	for (i = 0; i < count; i++) {
     dd8:	9b01      	ldr	r3, [sp, #4]
     dda:	3301      	adds	r3, #1
     ddc:	e7eb      	b.n	db6 <disk_write+0x3a>
     dde:	46c0      	nop			; (mov r8, r8)
     de0:	000036a9 	.word	0x000036a9
     de4:	00003691 	.word	0x00003691
     de8:	000036e1 	.word	0x000036e1

00000dec <disk_ioctl>:
 * \param buff Buffer to send/receive control data.
 *
 * \return RES_OK for success, otherwise DRESULT error code.
 */
DRESULT disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
     dec:	b537      	push	{r0, r1, r2, r4, r5, lr}
			res = RES_NOTRDY;
		}
		break;

	default:
		res = RES_PARERR;
     dee:	2304      	movs	r3, #4
{
     df0:	0005      	movs	r5, r0
     df2:	0014      	movs	r4, r2
	switch (ctrl) {
     df4:	2903      	cmp	r1, #3
     df6:	d807      	bhi.n	e08 <disk_ioctl+0x1c>
     df8:	0008      	movs	r0, r1
     dfa:	f003 fcef 	bl	47dc <__gnu_thumb1_case_uqi>
     dfe:	071d      	.short	0x071d
     e00:	020e      	.short	0x020e
		*(DWORD *)buff = 1;
     e02:	2301      	movs	r3, #1
		*(DWORD *)buff = ul_last_sector_num + 1;
     e04:	6023      	str	r3, [r4, #0]
		res = RES_OK;
     e06:	2300      	movs	r3, #0
	}

	return res;
}
     e08:	0018      	movs	r0, r3
     e0a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
		mem_read_capacity(drv, &ul_last_sector_num);
     e0c:	4b0e      	ldr	r3, [pc, #56]	; (e48 <disk_ioctl+0x5c>)
     e0e:	a901      	add	r1, sp, #4
     e10:	0028      	movs	r0, r5
     e12:	4798      	blx	r3
		*(DWORD *)buff = ul_last_sector_num + 1;
     e14:	9b01      	ldr	r3, [sp, #4]
     e16:	3301      	adds	r3, #1
     e18:	e7f4      	b.n	e04 <disk_ioctl+0x18>
		uint8_t uc_sector_size = mem_sector_size(drv);
     e1a:	4b0c      	ldr	r3, [pc, #48]	; (e4c <disk_ioctl+0x60>)
     e1c:	0028      	movs	r0, r5
     e1e:	4798      	blx	r3
		if ((uc_sector_size != SECTOR_SIZE_512) &&
     e20:	1e43      	subs	r3, r0, #1
     e22:	b2db      	uxtb	r3, r3
     e24:	2b01      	cmp	r3, #1
     e26:	d904      	bls.n	e32 <disk_ioctl+0x46>
				(uc_sector_size != SECTOR_SIZE_1024) &&
     e28:	22fb      	movs	r2, #251	; 0xfb
     e2a:	3804      	subs	r0, #4
			return RES_ERROR;
     e2c:	2301      	movs	r3, #1
				(uc_sector_size != SECTOR_SIZE_1024) &&
     e2e:	4210      	tst	r0, r2
     e30:	d1ea      	bne.n	e08 <disk_ioctl+0x1c>
		*(U8 *)buff = uc_sector_size * SECTOR_SIZE_DEFAULT;
     e32:	2300      	movs	r3, #0
     e34:	7023      	strb	r3, [r4, #0]
	break;
     e36:	e7e7      	b.n	e08 <disk_ioctl+0x1c>
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
     e38:	4b05      	ldr	r3, [pc, #20]	; (e50 <disk_ioctl+0x64>)
     e3a:	0028      	movs	r0, r5
     e3c:	4798      	blx	r3
			res = RES_OK;
     e3e:	1e03      	subs	r3, r0, #0
		if (mem_test_unit_ready(drv) == CTRL_GOOD) {
     e40:	d0e2      	beq.n	e08 <disk_ioctl+0x1c>
			res = RES_NOTRDY;
     e42:	2303      	movs	r3, #3
     e44:	e7e0      	b.n	e08 <disk_ioctl+0x1c>
     e46:	46c0      	nop			; (mov r8, r8)
     e48:	00003691 	.word	0x00003691
     e4c:	000036a9 	.word	0x000036a9
     e50:	0000367d 	.word	0x0000367d

00000e54 <get_fattime>:
 * bit4:0    Second (0..29)
 *
 * \return Current time.
 */
uint32_t get_fattime(void)
{
     e54:	b507      	push	{r0, r1, r2, lr}
	uint32_t ul_time;
	struct rtc_calendar_time current_time;

	/* Retrieve date and time */
	rtc_calendar_get_time(&rtc_instance, &current_time);
     e56:	4b0e      	ldr	r3, [pc, #56]	; (e90 <get_fattime+0x3c>)
     e58:	480e      	ldr	r0, [pc, #56]	; (e94 <get_fattime+0x40>)
     e5a:	4669      	mov	r1, sp
     e5c:	4798      	blx	r3

	ul_time = ((current_time.year - 1980) << 25)
			| (current_time.month << 21)
     e5e:	466b      	mov	r3, sp
     e60:	7958      	ldrb	r0, [r3, #5]
			| (current_time.day << 16)
     e62:	791b      	ldrb	r3, [r3, #4]
			| (current_time.month << 21)
     e64:	0540      	lsls	r0, r0, #21
			| (current_time.day << 16)
     e66:	041b      	lsls	r3, r3, #16
			| (current_time.hour << 11)
			| (current_time.minute << 5)
			| ((current_time.second >> 1) << 0);
     e68:	4318      	orrs	r0, r3
			| (current_time.hour << 11)
     e6a:	466b      	mov	r3, sp
     e6c:	789b      	ldrb	r3, [r3, #2]
	ul_time = ((current_time.year - 1980) << 25)
     e6e:	4a0a      	ldr	r2, [pc, #40]	; (e98 <get_fattime+0x44>)
			| (current_time.hour << 11)
     e70:	02db      	lsls	r3, r3, #11
			| ((current_time.second >> 1) << 0);
     e72:	4318      	orrs	r0, r3
			| (current_time.minute << 5)
     e74:	466b      	mov	r3, sp
     e76:	785b      	ldrb	r3, [r3, #1]
     e78:	015b      	lsls	r3, r3, #5
			| ((current_time.second >> 1) << 0);
     e7a:	4318      	orrs	r0, r3
     e7c:	466b      	mov	r3, sp
     e7e:	781b      	ldrb	r3, [r3, #0]
     e80:	085b      	lsrs	r3, r3, #1
     e82:	4318      	orrs	r0, r3
	ul_time = ((current_time.year - 1980) << 25)
     e84:	466b      	mov	r3, sp
     e86:	88db      	ldrh	r3, [r3, #6]
     e88:	189b      	adds	r3, r3, r2
     e8a:	065b      	lsls	r3, r3, #25
			| ((current_time.second >> 1) << 0);
     e8c:	4318      	orrs	r0, r3

	return ul_time;
}
     e8e:	bd0e      	pop	{r1, r2, r3, pc}
     e90:	00000b09 	.word	0x00000b09
     e94:	20000310 	.word	0x20000310
     e98:	fffff844 	.word	0xfffff844

00000e9c <mem_cpy>:
		*(int*)d = *(int*)s;
		d += sizeof(int); s += sizeof(int);
		cnt -= sizeof(int);
	}
#endif
	while (cnt--)
     e9c:	2300      	movs	r3, #0
void mem_cpy (void* dst, const void* src, UINT cnt) {
     e9e:	b510      	push	{r4, lr}
	while (cnt--)
     ea0:	429a      	cmp	r2, r3
     ea2:	d100      	bne.n	ea6 <mem_cpy+0xa>
		*d++ = *s++;
}
     ea4:	bd10      	pop	{r4, pc}
		*d++ = *s++;
     ea6:	5ccc      	ldrb	r4, [r1, r3]
     ea8:	54c4      	strb	r4, [r0, r3]
     eaa:	3301      	adds	r3, #1
     eac:	e7f8      	b.n	ea0 <mem_cpy+0x4>

00000eae <clust2sect>:
	FATFS *fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     eae:	6982      	ldr	r2, [r0, #24]
	clst -= 2;
     eb0:	3902      	subs	r1, #2
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     eb2:	3a02      	subs	r2, #2
{
     eb4:	0003      	movs	r3, r0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     eb6:	2000      	movs	r0, #0
     eb8:	4291      	cmp	r1, r2
     eba:	d203      	bcs.n	ec4 <clust2sect+0x16>
	return clst * fs->csize + fs->database;
     ebc:	7898      	ldrb	r0, [r3, #2]
     ebe:	4341      	muls	r1, r0
     ec0:	6a98      	ldr	r0, [r3, #40]	; 0x28
     ec2:	1808      	adds	r0, r1, r0
}
     ec4:	4770      	bx	lr

00000ec6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR *dj,			/* Pointer to the directory object */
	FILINFO *fno	 	/* Pointer to the file information to be filled */
)
{
     ec6:	b570      	push	{r4, r5, r6, lr}
	UINT i;
	BYTE nt, *dir;
	TCHAR *p, c;


	p = fno->fname;
     ec8:	000c      	movs	r4, r1
	if (dj->sect) {
     eca:	6903      	ldr	r3, [r0, #16]
	p = fno->fname;
     ecc:	3409      	adds	r4, #9
	if (dj->sect) {
     ece:	2b00      	cmp	r3, #0
     ed0:	d038      	beq.n	f44 <get_fileinfo+0x7e>
		dir = dj->dir;
     ed2:	6943      	ldr	r3, [r0, #20]
	p = fno->fname;
     ed4:	0022      	movs	r2, r4
		nt = dir[DIR_NTres];		/* NT flag */
		for (i = 0; i < 8; i++) {	/* Copy name body */
     ed6:	2000      	movs	r0, #0
			c = dir[i];
			if (c == ' ') break;
			if (c == NDDE) c = (TCHAR)DDE;
     ed8:	26e5      	movs	r6, #229	; 0xe5
			c = dir[i];
     eda:	5c1d      	ldrb	r5, [r3, r0]
			if (c == ' ') break;
     edc:	2d20      	cmp	r5, #32
     ede:	d007      	beq.n	ef0 <get_fileinfo+0x2a>
			if (c == NDDE) c = (TCHAR)DDE;
     ee0:	2d05      	cmp	r5, #5
     ee2:	d100      	bne.n	ee6 <get_fileinfo+0x20>
     ee4:	0035      	movs	r5, r6
			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
				c = (c << 8) | dir[++i];
			c = ff_convert(c, 1);
			if (!c) c = '?';
#endif
			*p++ = c;
     ee6:	5425      	strb	r5, [r4, r0]
		for (i = 0; i < 8; i++) {	/* Copy name body */
     ee8:	3001      	adds	r0, #1
			*p++ = c;
     eea:	3201      	adds	r2, #1
		for (i = 0; i < 8; i++) {	/* Copy name body */
     eec:	2808      	cmp	r0, #8
     eee:	d1f4      	bne.n	eda <get_fileinfo+0x14>
		}
		if (dir[8] != ' ') {		/* Copy name extension */
     ef0:	7a18      	ldrb	r0, [r3, #8]
     ef2:	2820      	cmp	r0, #32
     ef4:	d00e      	beq.n	f14 <get_fileinfo+0x4e>
			*p++ = '.';
     ef6:	202e      	movs	r0, #46	; 0x2e
     ef8:	7010      	strb	r0, [r2, #0]
     efa:	0018      	movs	r0, r3
     efc:	1d14      	adds	r4, r2, #4
     efe:	3008      	adds	r0, #8
     f00:	3201      	adds	r2, #1
			for (i = 8; i < 11; i++) {
				c = dir[i];
     f02:	7806      	ldrb	r6, [r0, #0]
				if (c == ' ') break;
     f04:	2e20      	cmp	r6, #32
     f06:	d005      	beq.n	f14 <get_fileinfo+0x4e>
				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
					c = (c << 8) | dir[++i];
				c = ff_convert(c, 1);
				if (!c) c = '?';
#endif
				*p++ = c;
     f08:	1c55      	adds	r5, r2, #1
     f0a:	7016      	strb	r6, [r2, #0]
     f0c:	3001      	adds	r0, #1
			for (i = 8; i < 11; i++) {
     f0e:	42a5      	cmp	r5, r4
     f10:	d11b      	bne.n	f4a <get_fileinfo+0x84>
				*p++ = c;
     f12:	0022      	movs	r2, r4
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     f14:	7ad8      	ldrb	r0, [r3, #11]
     f16:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     f18:	7f5c      	ldrb	r4, [r3, #29]
     f1a:	7f18      	ldrb	r0, [r3, #28]
     f1c:	0224      	lsls	r4, r4, #8
     f1e:	4304      	orrs	r4, r0
     f20:	7f98      	ldrb	r0, [r3, #30]
     f22:	0400      	lsls	r0, r0, #16
     f24:	4304      	orrs	r4, r0
     f26:	7fd8      	ldrb	r0, [r3, #31]
     f28:	0600      	lsls	r0, r0, #24
     f2a:	4320      	orrs	r0, r4
     f2c:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     f2e:	7e5c      	ldrb	r4, [r3, #25]
     f30:	7e18      	ldrb	r0, [r3, #24]
     f32:	0224      	lsls	r4, r4, #8
     f34:	4320      	orrs	r0, r4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     f36:	0014      	movs	r4, r2
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     f38:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     f3a:	7dd8      	ldrb	r0, [r3, #23]
     f3c:	7d9b      	ldrb	r3, [r3, #22]
     f3e:	0200      	lsls	r0, r0, #8
     f40:	4303      	orrs	r3, r0
     f42:	80cb      	strh	r3, [r1, #6]
	}
	*p = 0;		/* Terminate SFN str by a \0 */
     f44:	2300      	movs	r3, #0
     f46:	7023      	strb	r3, [r4, #0]
			}
		}
		tp[i] = 0;	/* Terminate the LFN str by a \0 */
	}
#endif
}
     f48:	bd70      	pop	{r4, r5, r6, pc}
     f4a:	002a      	movs	r2, r5
     f4c:	e7d9      	b.n	f02 <get_fileinfo+0x3c>
	...

00000f50 <move_window>:
{
     f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	wsect = fs->winsect;
     f52:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
{
     f54:	0004      	movs	r4, r0
     f56:	000e      	movs	r6, r1
	if (wsect != sector) {	/* Changed current window */
     f58:	428d      	cmp	r5, r1
     f5a:	d101      	bne.n	f60 <move_window+0x10>
	return FR_OK;
     f5c:	2000      	movs	r0, #0
}
     f5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		if (fs->wflag) {	/* Write back dirty window if needed */
     f60:	7903      	ldrb	r3, [r0, #4]
     f62:	2b00      	cmp	r3, #0
     f64:	d10c      	bne.n	f80 <move_window+0x30>
		if (sector) {
     f66:	2e00      	cmp	r6, #0
     f68:	d0f8      	beq.n	f5c <move_window+0xc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
     f6a:	0021      	movs	r1, r4
     f6c:	7860      	ldrb	r0, [r4, #1]
     f6e:	2301      	movs	r3, #1
     f70:	0032      	movs	r2, r6
     f72:	3130      	adds	r1, #48	; 0x30
     f74:	4d14      	ldr	r5, [pc, #80]	; (fc8 <move_window+0x78>)
     f76:	47a8      	blx	r5
     f78:	2800      	cmp	r0, #0
     f7a:	d10c      	bne.n	f96 <move_window+0x46>
			fs->winsect = sector;
     f7c:	62e6      	str	r6, [r4, #44]	; 0x2c
     f7e:	e7ee      	b.n	f5e <move_window+0xe>
			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
     f80:	0003      	movs	r3, r0
     f82:	3330      	adds	r3, #48	; 0x30
     f84:	9301      	str	r3, [sp, #4]
     f86:	7840      	ldrb	r0, [r0, #1]
     f88:	2301      	movs	r3, #1
     f8a:	002a      	movs	r2, r5
     f8c:	9901      	ldr	r1, [sp, #4]
     f8e:	4f0f      	ldr	r7, [pc, #60]	; (fcc <move_window+0x7c>)
     f90:	47b8      	blx	r7
     f92:	2800      	cmp	r0, #0
     f94:	d001      	beq.n	f9a <move_window+0x4a>
				return FR_DISK_ERR;
     f96:	2001      	movs	r0, #1
     f98:	e7e1      	b.n	f5e <move_window+0xe>
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
     f9a:	6a23      	ldr	r3, [r4, #32]
     f9c:	69e2      	ldr	r2, [r4, #28]
			fs->wflag = 0;
     f9e:	7120      	strb	r0, [r4, #4]
			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
     fa0:	189b      	adds	r3, r3, r2
     fa2:	429d      	cmp	r5, r3
     fa4:	d2df      	bcs.n	f66 <move_window+0x16>
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
     fa6:	78e3      	ldrb	r3, [r4, #3]
     fa8:	9300      	str	r3, [sp, #0]
     faa:	9b00      	ldr	r3, [sp, #0]
     fac:	2b01      	cmp	r3, #1
     fae:	d9da      	bls.n	f66 <move_window+0x16>
					wsect += fs->fsize;
     fb0:	69e3      	ldr	r3, [r4, #28]
					disk_write(fs->drv, fs->win, wsect, 1);
     fb2:	4f06      	ldr	r7, [pc, #24]	; (fcc <move_window+0x7c>)
					wsect += fs->fsize;
     fb4:	18ed      	adds	r5, r5, r3
					disk_write(fs->drv, fs->win, wsect, 1);
     fb6:	7860      	ldrb	r0, [r4, #1]
     fb8:	2301      	movs	r3, #1
     fba:	002a      	movs	r2, r5
     fbc:	9901      	ldr	r1, [sp, #4]
     fbe:	47b8      	blx	r7
				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
     fc0:	9f00      	ldr	r7, [sp, #0]
     fc2:	3f01      	subs	r7, #1
     fc4:	b2fb      	uxtb	r3, r7
     fc6:	e7ef      	b.n	fa8 <move_window+0x58>
     fc8:	00000d0d 	.word	0x00000d0d
     fcc:	00000d7d 	.word	0x00000d7d

00000fd0 <validate>:
static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	FATFS *fs,		/* Pointer to the file system object */
	WORD id			/* Member id of the target object to be checked */
)
{
     fd0:	b510      	push	{r4, lr}
	if (!fs || !fs->fs_type || fs->id != id)
		return FR_INVALID_OBJECT;
     fd2:	2309      	movs	r3, #9
	if (!fs || !fs->fs_type || fs->id != id)
     fd4:	2800      	cmp	r0, #0
     fd6:	d00c      	beq.n	ff2 <validate+0x22>
     fd8:	7802      	ldrb	r2, [r0, #0]
     fda:	2a00      	cmp	r2, #0
     fdc:	d009      	beq.n	ff2 <validate+0x22>
     fde:	88c2      	ldrh	r2, [r0, #6]
     fe0:	428a      	cmp	r2, r1
     fe2:	d106      	bne.n	ff2 <validate+0x22>

	ENTER_FF(fs);		/* Lock file system */

	if (disk_status(fs->drv) & STA_NOINIT)
     fe4:	4b04      	ldr	r3, [pc, #16]	; (ff8 <validate+0x28>)
     fe6:	7840      	ldrb	r0, [r0, #1]
     fe8:	4798      	blx	r3
		return FR_NOT_READY;
     fea:	2303      	movs	r3, #3

	return FR_OK;
     fec:	07c0      	lsls	r0, r0, #31
     fee:	17c0      	asrs	r0, r0, #31
     ff0:	4003      	ands	r3, r0
}
     ff2:	0018      	movs	r0, r3
     ff4:	bd10      	pop	{r4, pc}
     ff6:	46c0      	nop			; (mov r8, r8)
     ff8:	00000cf1 	.word	0x00000cf1

00000ffc <check_fs>:
{
     ffc:	000a      	movs	r2, r1
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
     ffe:	0001      	movs	r1, r0
{
    1000:	b570      	push	{r4, r5, r6, lr}
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1002:	2301      	movs	r3, #1
{
    1004:	0004      	movs	r4, r0
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1006:	3130      	adds	r1, #48	; 0x30
    1008:	7840      	ldrb	r0, [r0, #1]
    100a:	4d16      	ldr	r5, [pc, #88]	; (1064 <check_fs+0x68>)
    100c:	47a8      	blx	r5
		return 3;
    100e:	2303      	movs	r3, #3
	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
    1010:	2800      	cmp	r0, #0
    1012:	d124      	bne.n	105e <check_fs+0x62>
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    1014:	4b14      	ldr	r3, [pc, #80]	; (1068 <check_fs+0x6c>)
    1016:	4a15      	ldr	r2, [pc, #84]	; (106c <check_fs+0x70>)
    1018:	5ce3      	ldrb	r3, [r4, r3]
    101a:	5ca2      	ldrb	r2, [r4, r2]
    101c:	021b      	lsls	r3, r3, #8
    101e:	431a      	orrs	r2, r3
    1020:	4913      	ldr	r1, [pc, #76]	; (1070 <check_fs+0x74>)
    1022:	b212      	sxth	r2, r2
		return 2;
    1024:	2302      	movs	r3, #2
	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 even if the sector size is >512) */
    1026:	428a      	cmp	r2, r1
    1028:	d119      	bne.n	105e <check_fs+0x62>
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    102a:	0023      	movs	r3, r4
    102c:	3366      	adds	r3, #102	; 0x66
    102e:	885a      	ldrh	r2, [r3, #2]
    1030:	8819      	ldrh	r1, [r3, #0]
    1032:	0412      	lsls	r2, r2, #16
    1034:	430a      	orrs	r2, r1
    1036:	490f      	ldr	r1, [pc, #60]	; (1074 <check_fs+0x78>)
    1038:	0212      	lsls	r2, r2, #8
    103a:	0a12      	lsrs	r2, r2, #8
		return 0;
    103c:	0003      	movs	r3, r0
	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
    103e:	428a      	cmp	r2, r1
    1040:	d00d      	beq.n	105e <check_fs+0x62>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
    1042:	0023      	movs	r3, r4
    1044:	3484      	adds	r4, #132	; 0x84
    1046:	3382      	adds	r3, #130	; 0x82
    1048:	8818      	ldrh	r0, [r3, #0]
    104a:	8823      	ldrh	r3, [r4, #0]
    104c:	4a0a      	ldr	r2, [pc, #40]	; (1078 <check_fs+0x7c>)
    104e:	041b      	lsls	r3, r3, #16
    1050:	4303      	orrs	r3, r0
    1052:	021b      	lsls	r3, r3, #8
    1054:	0a1b      	lsrs	r3, r3, #8
    1056:	189b      	adds	r3, r3, r2
    1058:	1e58      	subs	r0, r3, #1
    105a:	4183      	sbcs	r3, r0
		return 3;
    105c:	b2db      	uxtb	r3, r3
}
    105e:	0018      	movs	r0, r3
    1060:	bd70      	pop	{r4, r5, r6, pc}
    1062:	46c0      	nop			; (mov r8, r8)
    1064:	00000d0d 	.word	0x00000d0d
    1068:	0000022f 	.word	0x0000022f
    106c:	0000022e 	.word	0x0000022e
    1070:	ffffaa55 	.word	0xffffaa55
    1074:	00544146 	.word	0x00544146
    1078:	ffabbeba 	.word	0xffabbeba

0000107c <chk_mounted>:
{
    107c:	b5f0      	push	{r4, r5, r6, r7, lr}
	const TCHAR *p = *path;
    107e:	6803      	ldr	r3, [r0, #0]
{
    1080:	0015      	movs	r5, r2
	vol = p[0] - '0';					/* Is there a drive number? */
    1082:	781a      	ldrb	r2, [r3, #0]
{
    1084:	b085      	sub	sp, #20
	vol = p[0] - '0';					/* Is there a drive number? */
    1086:	3a30      	subs	r2, #48	; 0x30
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    1088:	2a09      	cmp	r2, #9
    108a:	d908      	bls.n	109e <chk_mounted+0x22>
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    108c:	4b8b      	ldr	r3, [pc, #556]	; (12bc <chk_mounted+0x240>)
    108e:	681c      	ldr	r4, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1090:	230c      	movs	r3, #12
	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
    1092:	600c      	str	r4, [r1, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
    1094:	2c00      	cmp	r4, #0
    1096:	d10b      	bne.n	10b0 <chk_mounted+0x34>
}
    1098:	0018      	movs	r0, r3
    109a:	b005      	add	sp, #20
    109c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
    109e:	785c      	ldrb	r4, [r3, #1]
    10a0:	2c3a      	cmp	r4, #58	; 0x3a
    10a2:	d1f3      	bne.n	108c <chk_mounted+0x10>
		p += 2; *path = p;				/* Return pointer to the path name */
    10a4:	3302      	adds	r3, #2
    10a6:	6003      	str	r3, [r0, #0]
		return FR_INVALID_DRIVE;
    10a8:	230b      	movs	r3, #11
	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
    10aa:	2a00      	cmp	r2, #0
    10ac:	d1f4      	bne.n	1098 <chk_mounted+0x1c>
    10ae:	e7ed      	b.n	108c <chk_mounted+0x10>
	if (fs->fs_type) {					/* If the logical drive has been mounted */
    10b0:	7823      	ldrb	r3, [r4, #0]
    10b2:	2b00      	cmp	r3, #0
    10b4:	d00b      	beq.n	10ce <chk_mounted+0x52>
		stat = disk_status(fs->drv);
    10b6:	4b82      	ldr	r3, [pc, #520]	; (12c0 <chk_mounted+0x244>)
    10b8:	7860      	ldrb	r0, [r4, #1]
    10ba:	4798      	blx	r3
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed), */
    10bc:	2301      	movs	r3, #1
    10be:	4003      	ands	r3, r0
    10c0:	d105      	bne.n	10ce <chk_mounted+0x52>
			if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
    10c2:	2d00      	cmp	r5, #0
    10c4:	d0e8      	beq.n	1098 <chk_mounted+0x1c>
    10c6:	0742      	lsls	r2, r0, #29
    10c8:	d5e6      	bpl.n	1098 <chk_mounted+0x1c>
				return FR_WRITE_PROTECTED;
    10ca:	230a      	movs	r3, #10
    10cc:	e7e4      	b.n	1098 <chk_mounted+0x1c>
	fs->fs_type = 0;					/* Clear the file system object */
    10ce:	2000      	movs	r0, #0
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    10d0:	4b7c      	ldr	r3, [pc, #496]	; (12c4 <chk_mounted+0x248>)
	fs->fs_type = 0;					/* Clear the file system object */
    10d2:	7020      	strb	r0, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
    10d4:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
    10d6:	4798      	blx	r3
		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
    10d8:	2303      	movs	r3, #3
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
    10da:	07c2      	lsls	r2, r0, #31
    10dc:	d4dc      	bmi.n	1098 <chk_mounted+0x1c>
	if (!_FS_READONLY && chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
    10de:	2d00      	cmp	r5, #0
    10e0:	d001      	beq.n	10e6 <chk_mounted+0x6a>
    10e2:	0743      	lsls	r3, r0, #29
    10e4:	d4f1      	bmi.n	10ca <chk_mounted+0x4e>
	fmt = check_fs(fs, bsect = 0);		/* Load sector 0 and check if it is an FAT-VBR (in SFD) */
    10e6:	2100      	movs	r1, #0
    10e8:	0020      	movs	r0, r4
    10ea:	4d77      	ldr	r5, [pc, #476]	; (12c8 <chk_mounted+0x24c>)
    10ec:	47a8      	blx	r5
    10ee:	2600      	movs	r6, #0
	if (fmt == 1) {						/* Not an FAT-VBR, the physical drive can be partitioned */
    10f0:	2801      	cmp	r0, #1
    10f2:	d116      	bne.n	1122 <chk_mounted+0xa6>
		if (tbl[4]) {						/* Is the partition existing? */
    10f4:	23f9      	movs	r3, #249	; 0xf9
    10f6:	005b      	lsls	r3, r3, #1
    10f8:	5ce3      	ldrb	r3, [r4, r3]
    10fa:	42b3      	cmp	r3, r6
    10fc:	d101      	bne.n	1102 <chk_mounted+0x86>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    10fe:	230d      	movs	r3, #13
    1100:	e7ca      	b.n	1098 <chk_mounted+0x1c>
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    1102:	23fb      	movs	r3, #251	; 0xfb
    1104:	005b      	lsls	r3, r3, #1
    1106:	18e1      	adds	r1, r4, r3
    1108:	5ce6      	ldrb	r6, [r4, r3]
    110a:	784b      	ldrb	r3, [r1, #1]
			fmt = check_fs(fs, bsect);		/* Check the partition */
    110c:	0020      	movs	r0, r4
			bsect = LD_DWORD(&tbl[8]);		/* Partition offset in LBA */
    110e:	021b      	lsls	r3, r3, #8
    1110:	4333      	orrs	r3, r6
    1112:	788e      	ldrb	r6, [r1, #2]
    1114:	0436      	lsls	r6, r6, #16
    1116:	4333      	orrs	r3, r6
    1118:	78ce      	ldrb	r6, [r1, #3]
    111a:	0636      	lsls	r6, r6, #24
    111c:	431e      	orrs	r6, r3
			fmt = check_fs(fs, bsect);		/* Check the partition */
    111e:	0031      	movs	r1, r6
    1120:	47a8      	blx	r5
	if (fmt == 3) return FR_DISK_ERR;
    1122:	2301      	movs	r3, #1
    1124:	2803      	cmp	r0, #3
    1126:	d0b7      	beq.n	1098 <chk_mounted+0x1c>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
    1128:	2800      	cmp	r0, #0
    112a:	d1e8      	bne.n	10fe <chk_mounted+0x82>
	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical sector size) */
    112c:	0023      	movs	r3, r4
    112e:	333c      	adds	r3, #60	; 0x3c
    1130:	781a      	ldrb	r2, [r3, #0]
    1132:	3b01      	subs	r3, #1
    1134:	781b      	ldrb	r3, [r3, #0]
    1136:	0212      	lsls	r2, r2, #8
    1138:	4313      	orrs	r3, r2
    113a:	2280      	movs	r2, #128	; 0x80
    113c:	b21b      	sxth	r3, r3
    113e:	0092      	lsls	r2, r2, #2
    1140:	4293      	cmp	r3, r2
    1142:	d1dc      	bne.n	10fe <chk_mounted+0x82>
	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
    1144:	0023      	movs	r3, r4
    1146:	3347      	adds	r3, #71	; 0x47
    1148:	781a      	ldrb	r2, [r3, #0]
    114a:	3b01      	subs	r3, #1
    114c:	781b      	ldrb	r3, [r3, #0]
    114e:	0212      	lsls	r2, r2, #8
    1150:	4313      	orrs	r3, r2
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    1152:	d100      	bne.n	1156 <chk_mounted+0xda>
    1154:	e09f      	b.n	1296 <chk_mounted+0x21a>
    1156:	9300      	str	r3, [sp, #0]
	fs->fsize = fasize;
    1158:	9b00      	ldr	r3, [sp, #0]
    115a:	61e3      	str	r3, [r4, #28]
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    115c:	0023      	movs	r3, r4
    115e:	3340      	adds	r3, #64	; 0x40
    1160:	781b      	ldrb	r3, [r3, #0]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1162:	1e5a      	subs	r2, r3, #1
	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
    1164:	70e3      	strb	r3, [r4, #3]
	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
    1166:	2a01      	cmp	r2, #1
    1168:	d8c9      	bhi.n	10fe <chk_mounted+0x82>
	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
    116a:	0022      	movs	r2, r4
    116c:	323d      	adds	r2, #61	; 0x3d
    116e:	7811      	ldrb	r1, [r2, #0]
    1170:	70a1      	strb	r1, [r4, #2]
	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
    1172:	2900      	cmp	r1, #0
    1174:	d0c3      	beq.n	10fe <chk_mounted+0x82>
    1176:	1e4a      	subs	r2, r1, #1
    1178:	4211      	tst	r1, r2
    117a:	d1c0      	bne.n	10fe <chk_mounted+0x82>
	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
    117c:	0022      	movs	r2, r4
    117e:	3242      	adds	r2, #66	; 0x42
    1180:	7817      	ldrb	r7, [r2, #0]
    1182:	3a01      	subs	r2, #1
    1184:	7812      	ldrb	r2, [r2, #0]
    1186:	023f      	lsls	r7, r7, #8
    1188:	4317      	orrs	r7, r2
    118a:	8127      	strh	r7, [r4, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIR)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector aligned) */
    118c:	073a      	lsls	r2, r7, #28
    118e:	d1b6      	bne.n	10fe <chk_mounted+0x82>
	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
    1190:	0022      	movs	r2, r4
    1192:	3244      	adds	r2, #68	; 0x44
    1194:	7810      	ldrb	r0, [r2, #0]
    1196:	3a01      	subs	r2, #1
    1198:	7812      	ldrb	r2, [r2, #0]
    119a:	0200      	lsls	r0, r0, #8
    119c:	4310      	orrs	r0, r2
	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
    119e:	d100      	bne.n	11a2 <chk_mounted+0x126>
    11a0:	6d20      	ldr	r0, [r4, #80]	; 0x50
	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
    11a2:	0022      	movs	r2, r4
    11a4:	0025      	movs	r5, r4
    11a6:	323f      	adds	r2, #63	; 0x3f
    11a8:	7812      	ldrb	r2, [r2, #0]
    11aa:	353e      	adds	r5, #62	; 0x3e
    11ac:	782d      	ldrb	r5, [r5, #0]
    11ae:	0212      	lsls	r2, r2, #8
    11b0:	4315      	orrs	r5, r2
    11b2:	9501      	str	r5, [sp, #4]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
    11b4:	d0a3      	beq.n	10fe <chk_mounted+0x82>
	fasize *= b;										/* Number of sectors for FAT area */
    11b6:	9a00      	ldr	r2, [sp, #0]
    11b8:	435a      	muls	r2, r3
    11ba:	9203      	str	r2, [sp, #12]
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIR);	/* RSV+FAT+DIR */
    11bc:	093b      	lsrs	r3, r7, #4
    11be:	9a03      	ldr	r2, [sp, #12]
    11c0:	195b      	adds	r3, r3, r5
    11c2:	189b      	adds	r3, r3, r2
    11c4:	9302      	str	r3, [sp, #8]
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
    11c6:	4298      	cmp	r0, r3
    11c8:	d399      	bcc.n	10fe <chk_mounted+0x82>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
    11ca:	1ac0      	subs	r0, r0, r3
    11cc:	4b3f      	ldr	r3, [pc, #252]	; (12cc <chk_mounted+0x250>)
    11ce:	4798      	blx	r3
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
    11d0:	2800      	cmp	r0, #0
    11d2:	d094      	beq.n	10fe <chk_mounted+0x82>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    11d4:	4b3e      	ldr	r3, [pc, #248]	; (12d0 <chk_mounted+0x254>)
	fmt = FS_FAT12;
    11d6:	2501      	movs	r5, #1
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    11d8:	4298      	cmp	r0, r3
    11da:	d904      	bls.n	11e6 <chk_mounted+0x16a>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
    11dc:	4d3d      	ldr	r5, [pc, #244]	; (12d4 <chk_mounted+0x258>)
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
    11de:	4285      	cmp	r5, r0
    11e0:	41ad      	sbcs	r5, r5
    11e2:	426d      	negs	r5, r5
    11e4:	3502      	adds	r5, #2
	fs->database = bsect + sysect;						/* Data start sector */
    11e6:	9b02      	ldr	r3, [sp, #8]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    11e8:	3002      	adds	r0, #2
	fs->database = bsect + sysect;						/* Data start sector */
    11ea:	18f3      	adds	r3, r6, r3
    11ec:	62a3      	str	r3, [r4, #40]	; 0x28
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    11ee:	9b01      	ldr	r3, [sp, #4]
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
    11f0:	61a0      	str	r0, [r4, #24]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
    11f2:	18f3      	adds	r3, r6, r3
    11f4:	6223      	str	r3, [r4, #32]
	if (fmt == FS_FAT32) {
    11f6:	2d03      	cmp	r5, #3
    11f8:	d14f      	bne.n	129a <chk_mounted+0x21e>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
    11fa:	2f00      	cmp	r7, #0
    11fc:	d000      	beq.n	1200 <chk_mounted+0x184>
    11fe:	e77e      	b.n	10fe <chk_mounted+0x82>
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    1200:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
    1202:	0080      	lsls	r0, r0, #2
		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
    1204:	6263      	str	r3, [r4, #36]	; 0x24
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than required) */
    1206:	4b34      	ldr	r3, [pc, #208]	; (12d8 <chk_mounted+0x25c>)
    1208:	18c0      	adds	r0, r0, r3
    120a:	9b00      	ldr	r3, [sp, #0]
    120c:	0a40      	lsrs	r0, r0, #9
    120e:	4283      	cmp	r3, r0
    1210:	d200      	bcs.n	1214 <chk_mounted+0x198>
    1212:	e774      	b.n	10fe <chk_mounted+0x82>
	fs->free_clust = 0xFFFFFFFF;
    1214:	2301      	movs	r3, #1
    1216:	425b      	negs	r3, r3
    1218:	6123      	str	r3, [r4, #16]
	fs->last_clust = 0;
    121a:	2300      	movs	r3, #0
    121c:	60e3      	str	r3, [r4, #12]
	if (fmt == FS_FAT32) {
    121e:	2d03      	cmp	r5, #3
    1220:	d12e      	bne.n	1280 <chk_mounted+0x204>
	 	fs->fsi_flag = 0;
    1222:	7163      	strb	r3, [r4, #5]
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    1224:	0023      	movs	r3, r4
    1226:	0022      	movs	r2, r4
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1228:	0021      	movs	r1, r4
		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
    122a:	3361      	adds	r3, #97	; 0x61
    122c:	781b      	ldrb	r3, [r3, #0]
    122e:	3260      	adds	r2, #96	; 0x60
    1230:	7812      	ldrb	r2, [r2, #0]
    1232:	021b      	lsls	r3, r3, #8
    1234:	431a      	orrs	r2, r3
    1236:	1992      	adds	r2, r2, r6
    1238:	6162      	str	r2, [r4, #20]
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    123a:	7860      	ldrb	r0, [r4, #1]
    123c:	2301      	movs	r3, #1
    123e:	3130      	adds	r1, #48	; 0x30
    1240:	4e26      	ldr	r6, [pc, #152]	; (12dc <chk_mounted+0x260>)
    1242:	47b0      	blx	r6
    1244:	2800      	cmp	r0, #0
    1246:	d11b      	bne.n	1280 <chk_mounted+0x204>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    1248:	4b25      	ldr	r3, [pc, #148]	; (12e0 <chk_mounted+0x264>)
    124a:	5ce2      	ldrb	r2, [r4, r3]
    124c:	4b25      	ldr	r3, [pc, #148]	; (12e4 <chk_mounted+0x268>)
    124e:	0212      	lsls	r2, r2, #8
    1250:	5ce3      	ldrb	r3, [r4, r3]
    1252:	4313      	orrs	r3, r2
		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
    1254:	4a24      	ldr	r2, [pc, #144]	; (12e8 <chk_mounted+0x26c>)
    1256:	b21b      	sxth	r3, r3
    1258:	4293      	cmp	r3, r2
    125a:	d111      	bne.n	1280 <chk_mounted+0x204>
			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
    125c:	4b23      	ldr	r3, [pc, #140]	; (12ec <chk_mounted+0x270>)
    125e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    1260:	429a      	cmp	r2, r3
    1262:	d10d      	bne.n	1280 <chk_mounted+0x204>
			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
    1264:	2285      	movs	r2, #133	; 0x85
    1266:	0092      	lsls	r2, r2, #2
    1268:	4b21      	ldr	r3, [pc, #132]	; (12f0 <chk_mounted+0x274>)
    126a:	58a2      	ldr	r2, [r4, r2]
    126c:	429a      	cmp	r2, r3
    126e:	d107      	bne.n	1280 <chk_mounted+0x204>
				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
    1270:	2387      	movs	r3, #135	; 0x87
    1272:	009b      	lsls	r3, r3, #2
    1274:	58e3      	ldr	r3, [r4, r3]
    1276:	60e3      	str	r3, [r4, #12]
				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
    1278:	2386      	movs	r3, #134	; 0x86
    127a:	009b      	lsls	r3, r3, #2
    127c:	58e3      	ldr	r3, [r4, r3]
    127e:	6123      	str	r3, [r4, #16]
	fs->id = ++Fsid;		/* File system mount ID */
    1280:	4a1c      	ldr	r2, [pc, #112]	; (12f4 <chk_mounted+0x278>)
	fs->fs_type = fmt;		/* FAT sub-type */
    1282:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
    1284:	8813      	ldrh	r3, [r2, #0]
    1286:	3301      	adds	r3, #1
    1288:	b29b      	uxth	r3, r3
    128a:	8013      	strh	r3, [r2, #0]
    128c:	80e3      	strh	r3, [r4, #6]
	fs->winsect = 0;		/* Invalidate sector cache */
    128e:	2300      	movs	r3, #0
    1290:	62e3      	str	r3, [r4, #44]	; 0x2c
	fs->wflag = 0;
    1292:	7123      	strb	r3, [r4, #4]
	return FR_OK;
    1294:	e700      	b.n	1098 <chk_mounted+0x1c>
	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
    1296:	6d63      	ldr	r3, [r4, #84]	; 0x54
    1298:	e75d      	b.n	1156 <chk_mounted+0xda>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
    129a:	2f00      	cmp	r7, #0
    129c:	d100      	bne.n	12a0 <chk_mounted+0x224>
    129e:	e72e      	b.n	10fe <chk_mounted+0x82>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
    12a0:	9a03      	ldr	r2, [sp, #12]
    12a2:	18d3      	adds	r3, r2, r3
    12a4:	6263      	str	r3, [r4, #36]	; 0x24
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
    12a6:	2d02      	cmp	r5, #2
    12a8:	d101      	bne.n	12ae <chk_mounted+0x232>
    12aa:	0040      	lsls	r0, r0, #1
    12ac:	e7ab      	b.n	1206 <chk_mounted+0x18a>
    12ae:	2303      	movs	r3, #3
    12b0:	2201      	movs	r2, #1
    12b2:	4343      	muls	r3, r0
    12b4:	4010      	ands	r0, r2
    12b6:	085b      	lsrs	r3, r3, #1
    12b8:	1818      	adds	r0, r3, r0
    12ba:	e7a4      	b.n	1206 <chk_mounted+0x18a>
    12bc:	20000054 	.word	0x20000054
    12c0:	00000cf1 	.word	0x00000cf1
    12c4:	00000c65 	.word	0x00000c65
    12c8:	00000ffd 	.word	0x00000ffd
    12cc:	000047f1 	.word	0x000047f1
    12d0:	00000ff5 	.word	0x00000ff5
    12d4:	0000fff5 	.word	0x0000fff5
    12d8:	000001ff 	.word	0x000001ff
    12dc:	00000d0d 	.word	0x00000d0d
    12e0:	0000022f 	.word	0x0000022f
    12e4:	0000022e 	.word	0x0000022e
    12e8:	ffffaa55 	.word	0xffffaa55
    12ec:	41615252 	.word	0x41615252
    12f0:	61417272 	.word	0x61417272
    12f4:	20000058 	.word	0x20000058

000012f8 <get_fat>:
{
    12f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
		return 1;
    12fa:	2401      	movs	r4, #1
{
    12fc:	0006      	movs	r6, r0
    12fe:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
    1300:	42a1      	cmp	r1, r4
    1302:	d92f      	bls.n	1364 <get_fat+0x6c>
    1304:	6983      	ldr	r3, [r0, #24]
    1306:	4299      	cmp	r1, r3
    1308:	d22c      	bcs.n	1364 <get_fat+0x6c>
	switch (fs->fs_type) {
    130a:	7803      	ldrb	r3, [r0, #0]
    130c:	2b02      	cmp	r3, #2
    130e:	d02e      	beq.n	136e <get_fat+0x76>
    1310:	2b03      	cmp	r3, #3
    1312:	d03e      	beq.n	1392 <get_fat+0x9a>
    1314:	42a3      	cmp	r3, r4
    1316:	d108      	bne.n	132a <get_fat+0x32>
		bc = (UINT)clst; bc += bc / 2;
    1318:	084f      	lsrs	r7, r1, #1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    131a:	6a03      	ldr	r3, [r0, #32]
		bc = (UINT)clst; bc += bc / 2;
    131c:	187f      	adds	r7, r7, r1
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    131e:	0a79      	lsrs	r1, r7, #9
    1320:	18c9      	adds	r1, r1, r3
    1322:	4b2a      	ldr	r3, [pc, #168]	; (13cc <get_fat+0xd4>)
    1324:	4798      	blx	r3
    1326:	2800      	cmp	r0, #0
    1328:	d002      	beq.n	1330 <get_fat+0x38>
	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
    132a:	2401      	movs	r4, #1
    132c:	4264      	negs	r4, r4
    132e:	e019      	b.n	1364 <get_fat+0x6c>
		wc = fs->win[bc % SS(fs)]; bc++;
    1330:	05fb      	lsls	r3, r7, #23
    1332:	0ddb      	lsrs	r3, r3, #23
    1334:	18f3      	adds	r3, r6, r3
    1336:	3330      	adds	r3, #48	; 0x30
    1338:	781b      	ldrb	r3, [r3, #0]
    133a:	3701      	adds	r7, #1
    133c:	9301      	str	r3, [sp, #4]
		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
    133e:	6a33      	ldr	r3, [r6, #32]
    1340:	0a79      	lsrs	r1, r7, #9
    1342:	18c9      	adds	r1, r1, r3
    1344:	0030      	movs	r0, r6
    1346:	4b21      	ldr	r3, [pc, #132]	; (13cc <get_fat+0xd4>)
    1348:	4798      	blx	r3
    134a:	2800      	cmp	r0, #0
    134c:	d1ed      	bne.n	132a <get_fat+0x32>
		wc |= fs->win[bc % SS(fs)] << 8;
    134e:	05ff      	lsls	r7, r7, #23
    1350:	0dff      	lsrs	r7, r7, #23
    1352:	19f6      	adds	r6, r6, r7
    1354:	3630      	adds	r6, #48	; 0x30
    1356:	7833      	ldrb	r3, [r6, #0]
    1358:	9a01      	ldr	r2, [sp, #4]
    135a:	021b      	lsls	r3, r3, #8
    135c:	4313      	orrs	r3, r2
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    135e:	4225      	tst	r5, r4
    1360:	d002      	beq.n	1368 <get_fat+0x70>
    1362:	091c      	lsrs	r4, r3, #4
}
    1364:	0020      	movs	r0, r4
    1366:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
    1368:	051c      	lsls	r4, r3, #20
    136a:	0d24      	lsrs	r4, r4, #20
    136c:	e7fa      	b.n	1364 <get_fat+0x6c>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
    136e:	6a03      	ldr	r3, [r0, #32]
    1370:	0a09      	lsrs	r1, r1, #8
    1372:	18c9      	adds	r1, r1, r3
    1374:	4b15      	ldr	r3, [pc, #84]	; (13cc <get_fat+0xd4>)
    1376:	4798      	blx	r3
    1378:	2800      	cmp	r0, #0
    137a:	d1d6      	bne.n	132a <get_fat+0x32>
		p = &fs->win[clst * 2 % SS(fs)];
    137c:	23ff      	movs	r3, #255	; 0xff
    137e:	006d      	lsls	r5, r5, #1
    1380:	005b      	lsls	r3, r3, #1
    1382:	401d      	ands	r5, r3
		return LD_WORD(p);
    1384:	1976      	adds	r6, r6, r5
    1386:	3630      	adds	r6, #48	; 0x30
    1388:	7874      	ldrb	r4, [r6, #1]
    138a:	7833      	ldrb	r3, [r6, #0]
    138c:	0224      	lsls	r4, r4, #8
    138e:	431c      	orrs	r4, r3
    1390:	e7e8      	b.n	1364 <get_fat+0x6c>
		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
    1392:	6a03      	ldr	r3, [r0, #32]
    1394:	09c9      	lsrs	r1, r1, #7
    1396:	18c9      	adds	r1, r1, r3
    1398:	4b0c      	ldr	r3, [pc, #48]	; (13cc <get_fat+0xd4>)
    139a:	4798      	blx	r3
    139c:	2800      	cmp	r0, #0
    139e:	d1c4      	bne.n	132a <get_fat+0x32>
		p = &fs->win[clst * 4 % SS(fs)];
    13a0:	23fe      	movs	r3, #254	; 0xfe
    13a2:	00ad      	lsls	r5, r5, #2
    13a4:	005b      	lsls	r3, r3, #1
    13a6:	401d      	ands	r5, r3
    13a8:	002b      	movs	r3, r5
    13aa:	3330      	adds	r3, #48	; 0x30
    13ac:	18f3      	adds	r3, r6, r3
		return LD_DWORD(p) & 0x0FFFFFFF;
    13ae:	78dc      	ldrb	r4, [r3, #3]
    13b0:	789a      	ldrb	r2, [r3, #2]
    13b2:	1976      	adds	r6, r6, r5
    13b4:	0412      	lsls	r2, r2, #16
    13b6:	0624      	lsls	r4, r4, #24
    13b8:	3630      	adds	r6, #48	; 0x30
    13ba:	4314      	orrs	r4, r2
    13bc:	785b      	ldrb	r3, [r3, #1]
    13be:	7832      	ldrb	r2, [r6, #0]
    13c0:	021b      	lsls	r3, r3, #8
    13c2:	4314      	orrs	r4, r2
    13c4:	431c      	orrs	r4, r3
    13c6:	0124      	lsls	r4, r4, #4
    13c8:	0924      	lsrs	r4, r4, #4
    13ca:	e7cb      	b.n	1364 <get_fat+0x6c>
    13cc:	00000f51 	.word	0x00000f51

000013d0 <dir_sdi>:
{
    13d0:	b570      	push	{r4, r5, r6, lr}
    13d2:	0005      	movs	r5, r0
	dj->index = idx;
    13d4:	80e9      	strh	r1, [r5, #6]
{
    13d6:	000c      	movs	r4, r1
	clst = dj->sclust;
    13d8:	6881      	ldr	r1, [r0, #8]
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    13da:	2901      	cmp	r1, #1
    13dc:	d101      	bne.n	13e2 <dir_sdi+0x12>
		return FR_INT_ERR;
    13de:	2002      	movs	r0, #2
}
    13e0:	bd70      	pop	{r4, r5, r6, pc}
	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
    13e2:	6803      	ldr	r3, [r0, #0]
    13e4:	699a      	ldr	r2, [r3, #24]
    13e6:	4291      	cmp	r1, r2
    13e8:	d2f9      	bcs.n	13de <dir_sdi+0xe>
	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
    13ea:	2900      	cmp	r1, #0
    13ec:	d117      	bne.n	141e <dir_sdi+0x4e>
    13ee:	781a      	ldrb	r2, [r3, #0]
    13f0:	2a03      	cmp	r2, #3
    13f2:	d102      	bne.n	13fa <dir_sdi+0x2a>
		clst = dj->fs->dirbase;
    13f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
    13f6:	2900      	cmp	r1, #0
    13f8:	d111      	bne.n	141e <dir_sdi+0x4e>
		dj->clust = clst;
    13fa:	2200      	movs	r2, #0
    13fc:	60ea      	str	r2, [r5, #12]
		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
    13fe:	891a      	ldrh	r2, [r3, #8]
    1400:	42a2      	cmp	r2, r4
    1402:	d9ec      	bls.n	13de <dir_sdi+0xe>
		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1406:	0922      	lsrs	r2, r4, #4
    1408:	189b      	adds	r3, r3, r2
    140a:	612b      	str	r3, [r5, #16]
	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;	/* Ptr to the entry in the sector */
    140c:	220f      	movs	r2, #15
    140e:	682b      	ldr	r3, [r5, #0]
    1410:	4014      	ands	r4, r2
    1412:	3330      	adds	r3, #48	; 0x30
    1414:	0164      	lsls	r4, r4, #5
    1416:	191c      	adds	r4, r3, r4
    1418:	616c      	str	r4, [r5, #20]
	return FR_OK;	/* Seek succeeded */
    141a:	2000      	movs	r0, #0
    141c:	e7e0      	b.n	13e0 <dir_sdi+0x10>
		ic = SS(dj->fs) / SZ_DIR * dj->fs->csize;	/* Entries per cluster */
    141e:	789e      	ldrb	r6, [r3, #2]
    1420:	0136      	lsls	r6, r6, #4
		while (idx >= ic) {	/* Follow cluster chain */
    1422:	42b4      	cmp	r4, r6
    1424:	d207      	bcs.n	1436 <dir_sdi+0x66>
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    1426:	4b0c      	ldr	r3, [pc, #48]	; (1458 <dir_sdi+0x88>)
		dj->clust = clst;
    1428:	60e9      	str	r1, [r5, #12]
		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / SZ_DIR);	/* Sector# */
    142a:	6828      	ldr	r0, [r5, #0]
    142c:	4798      	blx	r3
    142e:	0923      	lsrs	r3, r4, #4
    1430:	1818      	adds	r0, r3, r0
    1432:	6128      	str	r0, [r5, #16]
    1434:	e7ea      	b.n	140c <dir_sdi+0x3c>
			clst = get_fat(dj->fs, clst);				/* Get next cluster */
    1436:	6828      	ldr	r0, [r5, #0]
    1438:	4b08      	ldr	r3, [pc, #32]	; (145c <dir_sdi+0x8c>)
    143a:	4798      	blx	r3
    143c:	0001      	movs	r1, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    143e:	1c43      	adds	r3, r0, #1
    1440:	d008      	beq.n	1454 <dir_sdi+0x84>
			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
    1442:	2801      	cmp	r0, #1
    1444:	d9cb      	bls.n	13de <dir_sdi+0xe>
    1446:	682b      	ldr	r3, [r5, #0]
    1448:	699b      	ldr	r3, [r3, #24]
    144a:	4298      	cmp	r0, r3
    144c:	d2c7      	bcs.n	13de <dir_sdi+0xe>
			idx -= ic;
    144e:	1ba4      	subs	r4, r4, r6
    1450:	b2a4      	uxth	r4, r4
    1452:	e7e6      	b.n	1422 <dir_sdi+0x52>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
    1454:	2001      	movs	r0, #1
    1456:	e7c3      	b.n	13e0 <dir_sdi+0x10>
    1458:	00000eaf 	.word	0x00000eaf
    145c:	000012f9 	.word	0x000012f9

00001460 <put_fat>:
{
    1460:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1462:	0005      	movs	r5, r0
    1464:	000c      	movs	r4, r1
    1466:	0016      	movs	r6, r2
		res = FR_INT_ERR;
    1468:	2002      	movs	r0, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    146a:	2901      	cmp	r1, #1
    146c:	d940      	bls.n	14f0 <put_fat+0x90>
    146e:	69ab      	ldr	r3, [r5, #24]
    1470:	4299      	cmp	r1, r3
    1472:	d23d      	bcs.n	14f0 <put_fat+0x90>
		switch (fs->fs_type) {
    1474:	782f      	ldrb	r7, [r5, #0]
    1476:	4287      	cmp	r7, r0
    1478:	d044      	beq.n	1504 <put_fat+0xa4>
    147a:	2f03      	cmp	r7, #3
    147c:	d054      	beq.n	1528 <put_fat+0xc8>
    147e:	2f01      	cmp	r7, #1
    1480:	d134      	bne.n	14ec <put_fat+0x8c>
			bc = clst; bc += bc / 2;
    1482:	084b      	lsrs	r3, r1, #1
    1484:	185b      	adds	r3, r3, r1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    1486:	0a59      	lsrs	r1, r3, #9
			bc = clst; bc += bc / 2;
    1488:	9301      	str	r3, [sp, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    148a:	6a2b      	ldr	r3, [r5, #32]
    148c:	0028      	movs	r0, r5
    148e:	18c9      	adds	r1, r1, r3
    1490:	4b34      	ldr	r3, [pc, #208]	; (1564 <put_fat+0x104>)
    1492:	4798      	blx	r3
			if (res != FR_OK) break;
    1494:	2800      	cmp	r0, #0
    1496:	d129      	bne.n	14ec <put_fat+0x8c>
			p = &fs->win[bc % SS(fs)];
    1498:	9b01      	ldr	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    149a:	4027      	ands	r7, r4
			p = &fs->win[bc % SS(fs)];
    149c:	05db      	lsls	r3, r3, #23
    149e:	0ddb      	lsrs	r3, r3, #23
    14a0:	18eb      	adds	r3, r5, r3
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
    14a2:	b2f2      	uxtb	r2, r6
    14a4:	2f00      	cmp	r7, #0
    14a6:	d00a      	beq.n	14be <put_fat+0x5e>
    14a8:	001a      	movs	r2, r3
    14aa:	210f      	movs	r1, #15
    14ac:	20ff      	movs	r0, #255	; 0xff
    14ae:	3230      	adds	r2, #48	; 0x30
    14b0:	7812      	ldrb	r2, [r2, #0]
    14b2:	0100      	lsls	r0, r0, #4
    14b4:	400a      	ands	r2, r1
    14b6:	0131      	lsls	r1, r6, #4
    14b8:	4001      	ands	r1, r0
    14ba:	430a      	orrs	r2, r1
    14bc:	b2d2      	uxtb	r2, r2
    14be:	3330      	adds	r3, #48	; 0x30
    14c0:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
    14c2:	2301      	movs	r3, #1
			bc++;
    14c4:	9c01      	ldr	r4, [sp, #4]
			fs->wflag = 1;
    14c6:	712b      	strb	r3, [r5, #4]
			bc++;
    14c8:	3401      	adds	r4, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
    14ca:	6a2b      	ldr	r3, [r5, #32]
    14cc:	0a61      	lsrs	r1, r4, #9
    14ce:	18c9      	adds	r1, r1, r3
    14d0:	0028      	movs	r0, r5
    14d2:	4b24      	ldr	r3, [pc, #144]	; (1564 <put_fat+0x104>)
    14d4:	4798      	blx	r3
			if (res != FR_OK) break;
    14d6:	2800      	cmp	r0, #0
    14d8:	d108      	bne.n	14ec <put_fat+0x8c>
			p = &fs->win[bc % SS(fs)];
    14da:	05e4      	lsls	r4, r4, #23
    14dc:	0de4      	lsrs	r4, r4, #23
    14de:	192c      	adds	r4, r5, r4
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    14e0:	2f00      	cmp	r7, #0
    14e2:	d006      	beq.n	14f2 <put_fat+0x92>
    14e4:	0936      	lsrs	r6, r6, #4
    14e6:	b2f6      	uxtb	r6, r6
    14e8:	3430      	adds	r4, #48	; 0x30
    14ea:	7026      	strb	r6, [r4, #0]
		fs->wflag = 1;
    14ec:	2301      	movs	r3, #1
    14ee:	712b      	strb	r3, [r5, #4]
}
    14f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
    14f2:	0023      	movs	r3, r4
    14f4:	220f      	movs	r2, #15
    14f6:	3330      	adds	r3, #48	; 0x30
    14f8:	781b      	ldrb	r3, [r3, #0]
    14fa:	0a36      	lsrs	r6, r6, #8
    14fc:	4393      	bics	r3, r2
    14fe:	4016      	ands	r6, r2
    1500:	431e      	orrs	r6, r3
    1502:	e7f1      	b.n	14e8 <put_fat+0x88>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
    1504:	6a2b      	ldr	r3, [r5, #32]
    1506:	0a09      	lsrs	r1, r1, #8
    1508:	18c9      	adds	r1, r1, r3
    150a:	0028      	movs	r0, r5
    150c:	4b15      	ldr	r3, [pc, #84]	; (1564 <put_fat+0x104>)
    150e:	4798      	blx	r3
			if (res != FR_OK) break;
    1510:	2800      	cmp	r0, #0
    1512:	d1eb      	bne.n	14ec <put_fat+0x8c>
			p = &fs->win[clst * 2 % SS(fs)];
    1514:	23ff      	movs	r3, #255	; 0xff
    1516:	0064      	lsls	r4, r4, #1
    1518:	005b      	lsls	r3, r3, #1
    151a:	401c      	ands	r4, r3
			ST_WORD(p, (WORD)val);
    151c:	192c      	adds	r4, r5, r4
    151e:	3430      	adds	r4, #48	; 0x30
    1520:	7026      	strb	r6, [r4, #0]
    1522:	0a36      	lsrs	r6, r6, #8
    1524:	7066      	strb	r6, [r4, #1]
    1526:	e7e1      	b.n	14ec <put_fat+0x8c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
    1528:	6a2b      	ldr	r3, [r5, #32]
    152a:	09c9      	lsrs	r1, r1, #7
    152c:	18c9      	adds	r1, r1, r3
    152e:	0028      	movs	r0, r5
    1530:	4b0c      	ldr	r3, [pc, #48]	; (1564 <put_fat+0x104>)
    1532:	4798      	blx	r3
			if (res != FR_OK) break;
    1534:	2800      	cmp	r0, #0
    1536:	d1d9      	bne.n	14ec <put_fat+0x8c>
			p = &fs->win[clst * 4 % SS(fs)];
    1538:	23fe      	movs	r3, #254	; 0xfe
    153a:	00a4      	lsls	r4, r4, #2
    153c:	005b      	lsls	r3, r3, #1
    153e:	401c      	ands	r4, r3
    1540:	0023      	movs	r3, r4
    1542:	3330      	adds	r3, #48	; 0x30
    1544:	18eb      	adds	r3, r5, r3
			val |= LD_DWORD(p) & 0xF0000000;
    1546:	78da      	ldrb	r2, [r3, #3]
    1548:	192c      	adds	r4, r5, r4
    154a:	0912      	lsrs	r2, r2, #4
    154c:	0712      	lsls	r2, r2, #28
    154e:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
    1550:	0a32      	lsrs	r2, r6, #8
			val |= LD_DWORD(p) & 0xF0000000;
    1552:	3430      	adds	r4, #48	; 0x30
			ST_DWORD(p, val);
    1554:	7026      	strb	r6, [r4, #0]
    1556:	705a      	strb	r2, [r3, #1]
    1558:	0c32      	lsrs	r2, r6, #16
    155a:	0e36      	lsrs	r6, r6, #24
    155c:	709a      	strb	r2, [r3, #2]
    155e:	70de      	strb	r6, [r3, #3]
    1560:	e7c4      	b.n	14ec <put_fat+0x8c>
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	00000f51 	.word	0x00000f51

00001568 <create_chain>:
{
    1568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    156a:	0005      	movs	r5, r0
    156c:	1e0f      	subs	r7, r1, #0
	if (clst == 0) {		/* Create a new chain */
    156e:	d10f      	bne.n	1590 <create_chain+0x28>
		scl = fs->last_clust;			/* Get suggested start point */
    1570:	68c6      	ldr	r6, [r0, #12]
		if (!scl || scl >= fs->n_fatent) scl = 1;
    1572:	2e00      	cmp	r6, #0
    1574:	d002      	beq.n	157c <create_chain+0x14>
    1576:	6983      	ldr	r3, [r0, #24]
    1578:	429e      	cmp	r6, r3
    157a:	d300      	bcc.n	157e <create_chain+0x16>
    157c:	2601      	movs	r6, #1
    157e:	0034      	movs	r4, r6
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1580:	69ab      	ldr	r3, [r5, #24]
		ncl++;							/* Next cluster */
    1582:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Wrap around */
    1584:	429c      	cmp	r4, r3
    1586:	d30f      	bcc.n	15a8 <create_chain+0x40>
			if (ncl > scl) return 0;	/* No free cluster */
    1588:	2e01      	cmp	r6, #1
    158a:	d80c      	bhi.n	15a6 <create_chain+0x3e>
    158c:	2400      	movs	r4, #0
    158e:	e008      	b.n	15a2 <create_chain+0x3a>
		cs = get_fat(fs, clst);			/* Check the cluster status */
    1590:	4b1b      	ldr	r3, [pc, #108]	; (1600 <create_chain+0x98>)
    1592:	4798      	blx	r3
    1594:	0004      	movs	r4, r0
		if (cs < 2) return 1;			/* It is an invalid cluster */
    1596:	2801      	cmp	r0, #1
    1598:	d930      	bls.n	15fc <create_chain+0x94>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
    159a:	69ab      	ldr	r3, [r5, #24]
    159c:	003e      	movs	r6, r7
    159e:	4298      	cmp	r0, r3
    15a0:	d2ed      	bcs.n	157e <create_chain+0x16>
}
    15a2:	0020      	movs	r0, r4
    15a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			ncl = 2;
    15a6:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
    15a8:	0021      	movs	r1, r4
    15aa:	0028      	movs	r0, r5
    15ac:	4b14      	ldr	r3, [pc, #80]	; (1600 <create_chain+0x98>)
    15ae:	4798      	blx	r3
		if (cs == 0) break;				/* Found a free cluster */
    15b0:	2800      	cmp	r0, #0
    15b2:	d009      	beq.n	15c8 <create_chain+0x60>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    15b4:	1c43      	adds	r3, r0, #1
    15b6:	d102      	bne.n	15be <create_chain+0x56>
			ncl = 2;
    15b8:	2401      	movs	r4, #1
    15ba:	4264      	negs	r4, r4
    15bc:	e7f1      	b.n	15a2 <create_chain+0x3a>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
    15be:	2801      	cmp	r0, #1
    15c0:	d01c      	beq.n	15fc <create_chain+0x94>
		if (ncl == scl) return 0;		/* No free cluster */
    15c2:	42b4      	cmp	r4, r6
    15c4:	d1dc      	bne.n	1580 <create_chain+0x18>
    15c6:	e7e1      	b.n	158c <create_chain+0x24>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
    15c8:	4a0e      	ldr	r2, [pc, #56]	; (1604 <create_chain+0x9c>)
    15ca:	0021      	movs	r1, r4
    15cc:	0028      	movs	r0, r5
    15ce:	4e0e      	ldr	r6, [pc, #56]	; (1608 <create_chain+0xa0>)
    15d0:	47b0      	blx	r6
	if (res == FR_OK && clst != 0) {
    15d2:	2800      	cmp	r0, #0
    15d4:	d110      	bne.n	15f8 <create_chain+0x90>
    15d6:	2f00      	cmp	r7, #0
    15d8:	d108      	bne.n	15ec <create_chain+0x84>
		if (fs->free_clust != 0xFFFFFFFF) {
    15da:	692b      	ldr	r3, [r5, #16]
		fs->last_clust = ncl;			/* Update FSINFO */
    15dc:	60ec      	str	r4, [r5, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
    15de:	1c5a      	adds	r2, r3, #1
    15e0:	d0df      	beq.n	15a2 <create_chain+0x3a>
			fs->free_clust--;
    15e2:	3b01      	subs	r3, #1
    15e4:	612b      	str	r3, [r5, #16]
			fs->fsi_flag = 1;
    15e6:	2301      	movs	r3, #1
    15e8:	716b      	strb	r3, [r5, #5]
    15ea:	e7da      	b.n	15a2 <create_chain+0x3a>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
    15ec:	0022      	movs	r2, r4
    15ee:	0039      	movs	r1, r7
    15f0:	0028      	movs	r0, r5
    15f2:	47b0      	blx	r6
	if (res == FR_OK) {
    15f4:	2800      	cmp	r0, #0
    15f6:	d0f0      	beq.n	15da <create_chain+0x72>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
    15f8:	2801      	cmp	r0, #1
    15fa:	d0dd      	beq.n	15b8 <create_chain+0x50>
    15fc:	2401      	movs	r4, #1
    15fe:	e7d0      	b.n	15a2 <create_chain+0x3a>
    1600:	000012f9 	.word	0x000012f9
    1604:	0fffffff 	.word	0x0fffffff
    1608:	00001461 	.word	0x00001461

0000160c <dir_next>:
{
    160c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	i = dj->index + 1;
    160e:	88c6      	ldrh	r6, [r0, #6]
{
    1610:	0004      	movs	r4, r0
	i = dj->index + 1;
    1612:	3601      	adds	r6, #1
    1614:	b2b6      	uxth	r6, r6
{
    1616:	000f      	movs	r7, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1618:	2e00      	cmp	r6, #0
    161a:	d101      	bne.n	1620 <dir_next+0x14>
		return FR_NO_FILE;
    161c:	2004      	movs	r0, #4
}
    161e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
    1620:	6903      	ldr	r3, [r0, #16]
    1622:	2b00      	cmp	r3, #0
    1624:	d0fa      	beq.n	161c <dir_next+0x10>
	if (!(i % (SS(dj->fs) / SZ_DIR))) {	/* Sector changed? */
    1626:	220f      	movs	r2, #15
    1628:	4032      	ands	r2, r6
    162a:	9201      	str	r2, [sp, #4]
    162c:	d108      	bne.n	1640 <dir_next+0x34>
		if (dj->clust == 0) {	/* Static table */
    162e:	68c1      	ldr	r1, [r0, #12]
		dj->sect++;					/* Next sector */
    1630:	3301      	adds	r3, #1
    1632:	6103      	str	r3, [r0, #16]
    1634:	6800      	ldr	r0, [r0, #0]
		if (dj->clust == 0) {	/* Static table */
    1636:	2900      	cmp	r1, #0
    1638:	d10b      	bne.n	1652 <dir_next+0x46>
			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
    163a:	8903      	ldrh	r3, [r0, #8]
    163c:	42b3      	cmp	r3, r6
    163e:	d9ed      	bls.n	161c <dir_next+0x10>
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    1640:	6823      	ldr	r3, [r4, #0]
    1642:	9a01      	ldr	r2, [sp, #4]
    1644:	3330      	adds	r3, #48	; 0x30
    1646:	0152      	lsls	r2, r2, #5
    1648:	189b      	adds	r3, r3, r2
	dj->index = i;
    164a:	80e6      	strh	r6, [r4, #6]
	dj->dir = dj->fs->win + (i % (SS(dj->fs) / SZ_DIR)) * SZ_DIR;
    164c:	6163      	str	r3, [r4, #20]
	return FR_OK;
    164e:	2000      	movs	r0, #0
    1650:	e7e5      	b.n	161e <dir_next+0x12>
			if (((i / (SS(dj->fs) / SZ_DIR)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
    1652:	7883      	ldrb	r3, [r0, #2]
    1654:	0932      	lsrs	r2, r6, #4
    1656:	3b01      	subs	r3, #1
    1658:	421a      	tst	r2, r3
    165a:	d1f1      	bne.n	1640 <dir_next+0x34>
				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
    165c:	4b28      	ldr	r3, [pc, #160]	; (1700 <dir_next+0xf4>)
    165e:	4798      	blx	r3
    1660:	0005      	movs	r5, r0
				if (clst <= 1) return FR_INT_ERR;
    1662:	2801      	cmp	r0, #1
    1664:	d801      	bhi.n	166a <dir_next+0x5e>
    1666:	2002      	movs	r0, #2
    1668:	e7d9      	b.n	161e <dir_next+0x12>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    166a:	1c43      	adds	r3, r0, #1
    166c:	d101      	bne.n	1672 <dir_next+0x66>
    166e:	2001      	movs	r0, #1
    1670:	e7d5      	b.n	161e <dir_next+0x12>
				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
    1672:	6820      	ldr	r0, [r4, #0]
    1674:	6983      	ldr	r3, [r0, #24]
    1676:	429d      	cmp	r5, r3
    1678:	d328      	bcc.n	16cc <dir_next+0xc0>
					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
    167a:	2f00      	cmp	r7, #0
    167c:	d0ce      	beq.n	161c <dir_next+0x10>
					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
    167e:	68e1      	ldr	r1, [r4, #12]
    1680:	4b20      	ldr	r3, [pc, #128]	; (1704 <dir_next+0xf8>)
    1682:	4798      	blx	r3
    1684:	0005      	movs	r5, r0
					if (clst == 0) return FR_DENIED;			/* No free cluster */
    1686:	2007      	movs	r0, #7
    1688:	2d00      	cmp	r5, #0
    168a:	d0c8      	beq.n	161e <dir_next+0x12>
					if (clst == 1) return FR_INT_ERR;
    168c:	2d01      	cmp	r5, #1
    168e:	d0ea      	beq.n	1666 <dir_next+0x5a>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
    1690:	1c6b      	adds	r3, r5, #1
    1692:	d0ec      	beq.n	166e <dir_next+0x62>
					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
    1694:	2100      	movs	r1, #0
    1696:	6820      	ldr	r0, [r4, #0]
    1698:	4b1b      	ldr	r3, [pc, #108]	; (1708 <dir_next+0xfc>)
    169a:	4798      	blx	r3
    169c:	2800      	cmp	r0, #0
    169e:	d1e6      	bne.n	166e <dir_next+0x62>
					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
    16a0:	6823      	ldr	r3, [r4, #0]
    16a2:	218c      	movs	r1, #140	; 0x8c
    16a4:	001a      	movs	r2, r3
    16a6:	0089      	lsls	r1, r1, #2
    16a8:	3230      	adds	r2, #48	; 0x30
    16aa:	185b      	adds	r3, r3, r1
	while (cnt--)
    16ac:	429a      	cmp	r2, r3
    16ae:	d114      	bne.n	16da <dir_next+0xce>
					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
    16b0:	6827      	ldr	r7, [r4, #0]
    16b2:	0029      	movs	r1, r5
    16b4:	0038      	movs	r0, r7
    16b6:	4b15      	ldr	r3, [pc, #84]	; (170c <dir_next+0x100>)
    16b8:	4798      	blx	r3
    16ba:	62f8      	str	r0, [r7, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    16bc:	2700      	movs	r7, #0
    16be:	6823      	ldr	r3, [r4, #0]
    16c0:	789a      	ldrb	r2, [r3, #2]
    16c2:	42ba      	cmp	r2, r7
    16c4:	d80c      	bhi.n	16e0 <dir_next+0xd4>
					dj->fs->winsect -= c;						/* Rewind window address */
    16c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    16c8:	1bd7      	subs	r7, r2, r7
    16ca:	62df      	str	r7, [r3, #44]	; 0x2c
				dj->clust = clst;				/* Initialize data for new cluster */
    16cc:	60e5      	str	r5, [r4, #12]
				dj->sect = clust2sect(dj->fs, clst);
    16ce:	0029      	movs	r1, r5
    16d0:	6820      	ldr	r0, [r4, #0]
    16d2:	4b0e      	ldr	r3, [pc, #56]	; (170c <dir_next+0x100>)
    16d4:	4798      	blx	r3
    16d6:	6120      	str	r0, [r4, #16]
    16d8:	e7b2      	b.n	1640 <dir_next+0x34>
		*d++ = (BYTE)val;
    16da:	7010      	strb	r0, [r2, #0]
    16dc:	3201      	adds	r2, #1
    16de:	e7e5      	b.n	16ac <dir_next+0xa0>
						dj->fs->wflag = 1;
    16e0:	2201      	movs	r2, #1
    16e2:	711a      	strb	r2, [r3, #4]
						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
    16e4:	2100      	movs	r1, #0
    16e6:	6820      	ldr	r0, [r4, #0]
    16e8:	4b07      	ldr	r3, [pc, #28]	; (1708 <dir_next+0xfc>)
    16ea:	4798      	blx	r3
    16ec:	2800      	cmp	r0, #0
    16ee:	d1be      	bne.n	166e <dir_next+0x62>
						dj->fs->winsect++;
    16f0:	6822      	ldr	r2, [r4, #0]
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    16f2:	3701      	adds	r7, #1
						dj->fs->winsect++;
    16f4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
    16f6:	b2ff      	uxtb	r7, r7
						dj->fs->winsect++;
    16f8:	3301      	adds	r3, #1
    16fa:	62d3      	str	r3, [r2, #44]	; 0x2c
    16fc:	e7df      	b.n	16be <dir_next+0xb2>
    16fe:	46c0      	nop			; (mov r8, r8)
    1700:	000012f9 	.word	0x000012f9
    1704:	00001569 	.word	0x00001569
    1708:	00000f51 	.word	0x00000f51
    170c:	00000eaf 	.word	0x00000eaf

00001710 <dir_read>:
{
    1710:	b570      	push	{r4, r5, r6, lr}
    1712:	0004      	movs	r4, r0
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    1714:	2508      	movs	r5, #8
	res = FR_NO_FILE;
    1716:	2004      	movs	r0, #4
	while (dj->sect) {
    1718:	6921      	ldr	r1, [r4, #16]
    171a:	2900      	cmp	r1, #0
    171c:	d102      	bne.n	1724 <dir_read+0x14>
	if (res != FR_OK) dj->sect = 0;
    171e:	2800      	cmp	r0, #0
    1720:	d010      	beq.n	1744 <dir_read+0x34>
    1722:	e017      	b.n	1754 <dir_read+0x44>
		res = move_window(dj->fs, dj->sect);
    1724:	6820      	ldr	r0, [r4, #0]
    1726:	4b0e      	ldr	r3, [pc, #56]	; (1760 <dir_read+0x50>)
    1728:	4798      	blx	r3
		if (res != FR_OK) break;
    172a:	2800      	cmp	r0, #0
    172c:	d112      	bne.n	1754 <dir_read+0x44>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    172e:	6962      	ldr	r2, [r4, #20]
		c = dir[DIR_Name];
    1730:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1732:	2b00      	cmp	r3, #0
    1734:	d011      	beq.n	175a <dir_read+0x4a>
		if (c != DDE && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
    1736:	2be5      	cmp	r3, #229	; 0xe5
    1738:	d006      	beq.n	1748 <dir_read+0x38>
    173a:	2b2e      	cmp	r3, #46	; 0x2e
    173c:	d004      	beq.n	1748 <dir_read+0x38>
    173e:	7ad3      	ldrb	r3, [r2, #11]
    1740:	422b      	tst	r3, r5
    1742:	d101      	bne.n	1748 <dir_read+0x38>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1744:	2000      	movs	r0, #0
}
    1746:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dj, 0);				/* Next entry */
    1748:	2100      	movs	r1, #0
    174a:	0020      	movs	r0, r4
    174c:	4b05      	ldr	r3, [pc, #20]	; (1764 <dir_read+0x54>)
    174e:	4798      	blx	r3
		if (res != FR_OK) break;
    1750:	2800      	cmp	r0, #0
    1752:	d0e1      	beq.n	1718 <dir_read+0x8>
	if (res != FR_OK) dj->sect = 0;
    1754:	2300      	movs	r3, #0
    1756:	6123      	str	r3, [r4, #16]
    1758:	e7f5      	b.n	1746 <dir_read+0x36>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    175a:	2004      	movs	r0, #4
    175c:	e7fa      	b.n	1754 <dir_read+0x44>
    175e:	46c0      	nop			; (mov r8, r8)
    1760:	00000f51 	.word	0x00000f51
    1764:	0000160d 	.word	0x0000160d

00001768 <remove_chain>:
{
    1768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    176a:	0004      	movs	r4, r0
    176c:	000d      	movs	r5, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    176e:	2901      	cmp	r1, #1
    1770:	d801      	bhi.n	1776 <remove_chain+0xe>
		res = FR_INT_ERR;
    1772:	2002      	movs	r0, #2
}
    1774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    1776:	6983      	ldr	r3, [r0, #24]
				fs->fsi_flag = 1;
    1778:	2701      	movs	r7, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
    177a:	4299      	cmp	r1, r3
    177c:	d2f9      	bcs.n	1772 <remove_chain+0xa>
		while (clst < fs->n_fatent) {			/* Not a last link? */
    177e:	69a3      	ldr	r3, [r4, #24]
    1780:	429d      	cmp	r5, r3
    1782:	d205      	bcs.n	1790 <remove_chain+0x28>
			nxt = get_fat(fs, clst);			/* Get cluster status */
    1784:	0029      	movs	r1, r5
    1786:	0020      	movs	r0, r4
    1788:	4b0d      	ldr	r3, [pc, #52]	; (17c0 <remove_chain+0x58>)
    178a:	4798      	blx	r3
    178c:	1e06      	subs	r6, r0, #0
			if (nxt == 0) break;				/* Empty cluster? */
    178e:	d101      	bne.n	1794 <remove_chain+0x2c>
		res = FR_INT_ERR;
    1790:	2000      	movs	r0, #0
    1792:	e7ef      	b.n	1774 <remove_chain+0xc>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
    1794:	2801      	cmp	r0, #1
    1796:	d0ec      	beq.n	1772 <remove_chain+0xa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    1798:	1c43      	adds	r3, r0, #1
    179a:	d00e      	beq.n	17ba <remove_chain+0x52>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
    179c:	2200      	movs	r2, #0
    179e:	0029      	movs	r1, r5
    17a0:	0020      	movs	r0, r4
    17a2:	4b08      	ldr	r3, [pc, #32]	; (17c4 <remove_chain+0x5c>)
    17a4:	4798      	blx	r3
			if (res != FR_OK) break;
    17a6:	2800      	cmp	r0, #0
    17a8:	d1e4      	bne.n	1774 <remove_chain+0xc>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
    17aa:	6923      	ldr	r3, [r4, #16]
    17ac:	1c5a      	adds	r2, r3, #1
    17ae:	d002      	beq.n	17b6 <remove_chain+0x4e>
				fs->free_clust++;
    17b0:	3301      	adds	r3, #1
    17b2:	6123      	str	r3, [r4, #16]
				fs->fsi_flag = 1;
    17b4:	7167      	strb	r7, [r4, #5]
{
    17b6:	0035      	movs	r5, r6
    17b8:	e7e1      	b.n	177e <remove_chain+0x16>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
    17ba:	2001      	movs	r0, #1
    17bc:	e7da      	b.n	1774 <remove_chain+0xc>
    17be:	46c0      	nop			; (mov r8, r8)
    17c0:	000012f9 	.word	0x000012f9
    17c4:	00001461 	.word	0x00001461

000017c8 <dir_remove>:
{
    17c8:	b510      	push	{r4, lr}
	res = dir_sdi(dj, dj->index);
    17ca:	4b09      	ldr	r3, [pc, #36]	; (17f0 <dir_remove+0x28>)
    17cc:	88c1      	ldrh	r1, [r0, #6]
{
    17ce:	0004      	movs	r4, r0
	res = dir_sdi(dj, dj->index);
    17d0:	4798      	blx	r3
	if (res == FR_OK) {
    17d2:	2800      	cmp	r0, #0
    17d4:	d10b      	bne.n	17ee <dir_remove+0x26>
		res = move_window(dj->fs, dj->sect);
    17d6:	6921      	ldr	r1, [r4, #16]
    17d8:	6820      	ldr	r0, [r4, #0]
    17da:	4b06      	ldr	r3, [pc, #24]	; (17f4 <dir_remove+0x2c>)
    17dc:	4798      	blx	r3
		if (res == FR_OK) {
    17de:	2800      	cmp	r0, #0
    17e0:	d105      	bne.n	17ee <dir_remove+0x26>
			*dj->dir = DDE;			/* Mark the entry "deleted" */
    17e2:	23e5      	movs	r3, #229	; 0xe5
    17e4:	6962      	ldr	r2, [r4, #20]
    17e6:	7013      	strb	r3, [r2, #0]
			dj->fs->wflag = 1;
    17e8:	2201      	movs	r2, #1
    17ea:	6823      	ldr	r3, [r4, #0]
    17ec:	711a      	strb	r2, [r3, #4]
}
    17ee:	bd10      	pop	{r4, pc}
    17f0:	000013d1 	.word	0x000013d1
    17f4:	00000f51 	.word	0x00000f51

000017f8 <dir_register>:
{
    17f8:	b570      	push	{r4, r5, r6, lr}
	res = dir_sdi(dj, 0);
    17fa:	2100      	movs	r1, #0
    17fc:	4b16      	ldr	r3, [pc, #88]	; (1858 <dir_register+0x60>)
{
    17fe:	0004      	movs	r4, r0
	res = dir_sdi(dj, 0);
    1800:	4798      	blx	r3
    1802:	1e05      	subs	r5, r0, #0
	if (res == FR_OK) {
    1804:	d126      	bne.n	1854 <dir_register+0x5c>
			res = move_window(dj->fs, dj->sect);
    1806:	6921      	ldr	r1, [r4, #16]
    1808:	6820      	ldr	r0, [r4, #0]
    180a:	4e14      	ldr	r6, [pc, #80]	; (185c <dir_register+0x64>)
    180c:	47b0      	blx	r6
    180e:	1e05      	subs	r5, r0, #0
			if (res != FR_OK) break;
    1810:	d120      	bne.n	1854 <dir_register+0x5c>
			c = *dj->dir;
    1812:	6963      	ldr	r3, [r4, #20]
    1814:	781b      	ldrb	r3, [r3, #0]
			if (c == DDE || c == 0) break;	/* Is it a blank entry? */
    1816:	2be5      	cmp	r3, #229	; 0xe5
    1818:	d009      	beq.n	182e <dir_register+0x36>
    181a:	2b00      	cmp	r3, #0
    181c:	d007      	beq.n	182e <dir_register+0x36>
			res = dir_next(dj, 1);			/* Next entry with table stretch */
    181e:	2101      	movs	r1, #1
    1820:	0020      	movs	r0, r4
    1822:	4b0f      	ldr	r3, [pc, #60]	; (1860 <dir_register+0x68>)
    1824:	4798      	blx	r3
    1826:	e7ec      	b.n	1802 <dir_register+0xa>
		*d++ = (BYTE)val;
    1828:	7019      	strb	r1, [r3, #0]
    182a:	3301      	adds	r3, #1
    182c:	e009      	b.n	1842 <dir_register+0x4a>
		res = move_window(dj->fs, dj->sect);
    182e:	6921      	ldr	r1, [r4, #16]
    1830:	6820      	ldr	r0, [r4, #0]
    1832:	47b0      	blx	r6
    1834:	1e05      	subs	r5, r0, #0
		if (res == FR_OK) {
    1836:	d10d      	bne.n	1854 <dir_register+0x5c>
			dir = dj->dir;
    1838:	6960      	ldr	r0, [r4, #20]
		*d++ = (BYTE)val;
    183a:	0029      	movs	r1, r5
    183c:	0002      	movs	r2, r0
    183e:	0003      	movs	r3, r0
    1840:	3220      	adds	r2, #32
	while (cnt--)
    1842:	4293      	cmp	r3, r2
    1844:	d1f0      	bne.n	1828 <dir_register+0x30>
			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
    1846:	220b      	movs	r2, #11
    1848:	4b06      	ldr	r3, [pc, #24]	; (1864 <dir_register+0x6c>)
    184a:	69a1      	ldr	r1, [r4, #24]
    184c:	4798      	blx	r3
			dj->fs->wflag = 1;
    184e:	2201      	movs	r2, #1
    1850:	6823      	ldr	r3, [r4, #0]
    1852:	711a      	strb	r2, [r3, #4]
}
    1854:	0028      	movs	r0, r5
    1856:	bd70      	pop	{r4, r5, r6, pc}
    1858:	000013d1 	.word	0x000013d1
    185c:	00000f51 	.word	0x00000f51
    1860:	0000160d 	.word	0x0000160d
    1864:	00000e9d 	.word	0x00000e9d

00001868 <follow_path>:
{
    1868:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    186a:	780b      	ldrb	r3, [r1, #0]
{
    186c:	0004      	movs	r4, r0
	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
    186e:	2b2f      	cmp	r3, #47	; 0x2f
    1870:	d001      	beq.n	1876 <follow_path+0xe>
    1872:	2b5c      	cmp	r3, #92	; 0x5c
    1874:	d100      	bne.n	1878 <follow_path+0x10>
		path++;
    1876:	3101      	adds	r1, #1
	dj->sclust = 0;						/* Start from the root dir */
    1878:	2500      	movs	r5, #0
    187a:	60a5      	str	r5, [r4, #8]
	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
    187c:	780b      	ldrb	r3, [r1, #0]
    187e:	2b1f      	cmp	r3, #31
    1880:	d806      	bhi.n	1890 <follow_path+0x28>
		res = dir_sdi(dj, 0);
    1882:	0029      	movs	r1, r5
    1884:	0020      	movs	r0, r4
    1886:	4b5a      	ldr	r3, [pc, #360]	; (19f0 <follow_path+0x188>)
    1888:	4798      	blx	r3
		dj->dir = 0;
    188a:	6165      	str	r5, [r4, #20]
}
    188c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
    188e:	3101      	adds	r1, #1
    1890:	780b      	ldrb	r3, [r1, #0]
    1892:	2b2f      	cmp	r3, #47	; 0x2f
    1894:	d0fb      	beq.n	188e <follow_path+0x26>
    1896:	2b5c      	cmp	r3, #92	; 0x5c
    1898:	d0f9      	beq.n	188e <follow_path+0x26>
	sfn = dj->fn;
    189a:	69a6      	ldr	r6, [r4, #24]
    189c:	0032      	movs	r2, r6
    189e:	0033      	movs	r3, r6
    18a0:	320b      	adds	r2, #11
	while (cnt--)
    18a2:	4293      	cmp	r3, r2
    18a4:	d120      	bne.n	18e8 <follow_path+0x80>
    18a6:	2000      	movs	r0, #0
    18a8:	2308      	movs	r3, #8
    18aa:	0002      	movs	r2, r0
    18ac:	9300      	str	r3, [sp, #0]
    18ae:	0003      	movs	r3, r0
		c = (BYTE)p[si++];
    18b0:	1c55      	adds	r5, r2, #1
    18b2:	5c8a      	ldrb	r2, [r1, r2]
    18b4:	9501      	str	r5, [sp, #4]
    18b6:	194d      	adds	r5, r1, r5
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
    18b8:	2a20      	cmp	r2, #32
    18ba:	d95b      	bls.n	1974 <follow_path+0x10c>
    18bc:	2a2f      	cmp	r2, #47	; 0x2f
    18be:	d01c      	beq.n	18fa <follow_path+0x92>
    18c0:	2a5c      	cmp	r2, #92	; 0x5c
    18c2:	d01a      	beq.n	18fa <follow_path+0x92>
		if (c == '.' || i >= ni) {
    18c4:	2a2e      	cmp	r2, #46	; 0x2e
    18c6:	d07c      	beq.n	19c2 <follow_path+0x15a>
    18c8:	9d00      	ldr	r5, [sp, #0]
    18ca:	4285      	cmp	r5, r0
    18cc:	d90a      	bls.n	18e4 <follow_path+0x7c>
		if (c >= 0x80) {				/* Extended char? */
    18ce:	b255      	sxtb	r5, r2
    18d0:	2d00      	cmp	r5, #0
    18d2:	db07      	blt.n	18e4 <follow_path+0x7c>
    18d4:	2500      	movs	r5, #0
	while (*str && *str != chr) str++;
    18d6:	4f47      	ldr	r7, [pc, #284]	; (19f4 <follow_path+0x18c>)
    18d8:	5d7f      	ldrb	r7, [r7, r5]
    18da:	2f00      	cmp	r7, #0
    18dc:	d07b      	beq.n	19d6 <follow_path+0x16e>
    18de:	3501      	adds	r5, #1
    18e0:	42ba      	cmp	r2, r7
    18e2:	d1f8      	bne.n	18d6 <follow_path+0x6e>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    18e4:	2006      	movs	r0, #6
	return res;
    18e6:	e7d1      	b.n	188c <follow_path+0x24>
		*d++ = (BYTE)val;
    18e8:	2020      	movs	r0, #32
    18ea:	7018      	strb	r0, [r3, #0]
    18ec:	3301      	adds	r3, #1
    18ee:	e7d8      	b.n	18a2 <follow_path+0x3a>
				b |= 2;
    18f0:	2502      	movs	r5, #2
    18f2:	432b      	orrs	r3, r5
			sfn[i++] = c;
    18f4:	5432      	strb	r2, [r6, r0]
    18f6:	3001      	adds	r0, #1
    18f8:	e06b      	b.n	19d2 <follow_path+0x16a>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    18fa:	2200      	movs	r2, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
    18fc:	2800      	cmp	r0, #0
    18fe:	d0f1      	beq.n	18e4 <follow_path+0x7c>
	if (sfn[0] == DDE) sfn[0] = NDDE;	/* When first char collides with DDE, replace it with 0x05 */
    1900:	7831      	ldrb	r1, [r6, #0]
    1902:	29e5      	cmp	r1, #229	; 0xe5
    1904:	d101      	bne.n	190a <follow_path+0xa2>
    1906:	39e0      	subs	r1, #224	; 0xe0
    1908:	7031      	strb	r1, [r6, #0]
	if (ni == 8) b <<= 2;
    190a:	9900      	ldr	r1, [sp, #0]
    190c:	2908      	cmp	r1, #8
    190e:	d101      	bne.n	1914 <follow_path+0xac>
    1910:	009b      	lsls	r3, r3, #2
    1912:	b2db      	uxtb	r3, r3
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
    1914:	2103      	movs	r1, #3
    1916:	4019      	ands	r1, r3
    1918:	2901      	cmp	r1, #1
    191a:	d101      	bne.n	1920 <follow_path+0xb8>
    191c:	310f      	adds	r1, #15
    191e:	430a      	orrs	r2, r1
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
    1920:	210c      	movs	r1, #12
    1922:	400b      	ands	r3, r1
    1924:	2b04      	cmp	r3, #4
    1926:	d101      	bne.n	192c <follow_path+0xc4>
    1928:	3304      	adds	r3, #4
    192a:	431a      	orrs	r2, r3
	sfn[NS] = c;		/* Store NT flag, File name is created */
    192c:	72f2      	strb	r2, [r6, #11]
	res = dir_sdi(dj, 0);			/* Rewind directory object */
    192e:	2100      	movs	r1, #0
    1930:	0020      	movs	r0, r4
    1932:	4b2f      	ldr	r3, [pc, #188]	; (19f0 <follow_path+0x188>)
    1934:	4798      	blx	r3
	if (res != FR_OK) return res;
    1936:	2800      	cmp	r0, #0
    1938:	d121      	bne.n	197e <follow_path+0x116>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    193a:	2608      	movs	r6, #8
		res = move_window(dj->fs, dj->sect);
    193c:	6921      	ldr	r1, [r4, #16]
    193e:	6820      	ldr	r0, [r4, #0]
    1940:	4b2d      	ldr	r3, [pc, #180]	; (19f8 <follow_path+0x190>)
    1942:	4798      	blx	r3
		if (res != FR_OK) break;
    1944:	2800      	cmp	r0, #0
    1946:	d11a      	bne.n	197e <follow_path+0x116>
		dir = dj->dir;					/* Ptr to the directory entry of current index */
    1948:	6962      	ldr	r2, [r4, #20]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    194a:	7813      	ldrb	r3, [r2, #0]
    194c:	2b00      	cmp	r3, #0
    194e:	d022      	beq.n	1996 <follow_path+0x12e>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1950:	7ad3      	ldrb	r3, [r2, #11]
    1952:	4233      	tst	r3, r6
    1954:	d107      	bne.n	1966 <follow_path+0xfe>
    1956:	0003      	movs	r3, r0
    1958:	69a7      	ldr	r7, [r4, #24]
    195a:	1c59      	adds	r1, r3, #1
    195c:	468c      	mov	ip, r1
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    195e:	5cd1      	ldrb	r1, [r2, r3]
    1960:	5cfb      	ldrb	r3, [r7, r3]
    1962:	4299      	cmp	r1, r3
    1964:	d008      	beq.n	1978 <follow_path+0x110>
		res = dir_next(dj, 0);		/* Next entry */
    1966:	2100      	movs	r1, #0
    1968:	0020      	movs	r0, r4
    196a:	4b24      	ldr	r3, [pc, #144]	; (19fc <follow_path+0x194>)
    196c:	4798      	blx	r3
	} while (res == FR_OK);
    196e:	2800      	cmp	r0, #0
    1970:	d0e4      	beq.n	193c <follow_path+0xd4>
    1972:	e004      	b.n	197e <follow_path+0x116>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
    1974:	2204      	movs	r2, #4
    1976:	e7c1      	b.n	18fc <follow_path+0x94>
    1978:	4663      	mov	r3, ip
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    197a:	2b0b      	cmp	r3, #11
    197c:	d1ed      	bne.n	195a <follow_path+0xf2>
			ns = *(dj->fn+NS);
    197e:	69a3      	ldr	r3, [r4, #24]
    1980:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
    1982:	2800      	cmp	r0, #0
    1984:	d009      	beq.n	199a <follow_path+0x132>
				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
    1986:	2804      	cmp	r0, #4
    1988:	d000      	beq.n	198c <follow_path+0x124>
    198a:	e77f      	b.n	188c <follow_path+0x24>
					if (!(ns & NS_LAST)) res = FR_NO_PATH;
    198c:	4203      	tst	r3, r0
    198e:	d000      	beq.n	1992 <follow_path+0x12a>
    1990:	e77c      	b.n	188c <follow_path+0x24>
    1992:	2005      	movs	r0, #5
    1994:	e77a      	b.n	188c <follow_path+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
    1996:	2004      	movs	r0, #4
    1998:	e7f1      	b.n	197e <follow_path+0x116>
			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
    199a:	075b      	lsls	r3, r3, #29
    199c:	d500      	bpl.n	19a0 <follow_path+0x138>
    199e:	e775      	b.n	188c <follow_path+0x24>
			dir = dj->dir;						/* There is next segment. Follow the sub directory */
    19a0:	6963      	ldr	r3, [r4, #20]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
    19a2:	7ada      	ldrb	r2, [r3, #11]
    19a4:	06d2      	lsls	r2, r2, #27
    19a6:	d5f4      	bpl.n	1992 <follow_path+0x12a>
			dj->sclust = LD_CLUST(dir);
    19a8:	7d59      	ldrb	r1, [r3, #21]
    19aa:	7d1a      	ldrb	r2, [r3, #20]
    19ac:	0209      	lsls	r1, r1, #8
    19ae:	430a      	orrs	r2, r1
    19b0:	7ed9      	ldrb	r1, [r3, #27]
    19b2:	7e9b      	ldrb	r3, [r3, #26]
    19b4:	0209      	lsls	r1, r1, #8
    19b6:	430b      	orrs	r3, r1
    19b8:	0412      	lsls	r2, r2, #16
    19ba:	4313      	orrs	r3, r2
    19bc:	60a3      	str	r3, [r4, #8]
			res = create_name(dj, &path);	/* Get a segment */
    19be:	0029      	movs	r1, r5
    19c0:	e766      	b.n	1890 <follow_path+0x28>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
    19c2:	9a00      	ldr	r2, [sp, #0]
    19c4:	2a08      	cmp	r2, #8
    19c6:	d18d      	bne.n	18e4 <follow_path+0x7c>
			i = 8; ni = 11;
    19c8:	220b      	movs	r2, #11
			b <<= 2; continue;
    19ca:	009b      	lsls	r3, r3, #2
			i = 8; ni = 11;
    19cc:	9800      	ldr	r0, [sp, #0]
			b <<= 2; continue;
    19ce:	b2db      	uxtb	r3, r3
			i = 8; ni = 11;
    19d0:	9200      	str	r2, [sp, #0]
		c = (BYTE)p[si++];
    19d2:	9a01      	ldr	r2, [sp, #4]
    19d4:	e76c      	b.n	18b0 <follow_path+0x48>
			if (IsUpper(c)) {			/* ASCII large capital? */
    19d6:	0015      	movs	r5, r2
    19d8:	3d41      	subs	r5, #65	; 0x41
    19da:	2d19      	cmp	r5, #25
    19dc:	d988      	bls.n	18f0 <follow_path+0x88>
				if (IsLower(c)) {		/* ASCII small capital? */
    19de:	0015      	movs	r5, r2
    19e0:	3d61      	subs	r5, #97	; 0x61
    19e2:	2d19      	cmp	r5, #25
    19e4:	d886      	bhi.n	18f4 <follow_path+0x8c>
					b |= 1; c -= 0x20;
    19e6:	2501      	movs	r5, #1
    19e8:	3a20      	subs	r2, #32
    19ea:	432b      	orrs	r3, r5
    19ec:	b2d2      	uxtb	r2, r2
    19ee:	e781      	b.n	18f4 <follow_path+0x8c>
    19f0:	000013d1 	.word	0x000013d1
    19f4:	00004a3c 	.word	0x00004a3c
    19f8:	00000f51 	.word	0x00000f51
    19fc:	0000160d 	.word	0x0000160d

00001a00 <sync>:
{
    1a00:	b570      	push	{r4, r5, r6, lr}
	res = move_window(fs, 0);
    1a02:	4b2e      	ldr	r3, [pc, #184]	; (1abc <sync+0xbc>)
    1a04:	2100      	movs	r1, #0
{
    1a06:	0004      	movs	r4, r0
	res = move_window(fs, 0);
    1a08:	4798      	blx	r3
    1a0a:	1e03      	subs	r3, r0, #0
	if (res == FR_OK) {
    1a0c:	d152      	bne.n	1ab4 <sync+0xb4>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
    1a0e:	7822      	ldrb	r2, [r4, #0]
    1a10:	2a03      	cmp	r2, #3
    1a12:	d147      	bne.n	1aa4 <sync+0xa4>
    1a14:	7962      	ldrb	r2, [r4, #5]
    1a16:	2a00      	cmp	r2, #0
    1a18:	d044      	beq.n	1aa4 <sync+0xa4>
			mem_set(fs->win, 0, 512);
    1a1a:	0021      	movs	r1, r4
			fs->winsect = 0;
    1a1c:	62e0      	str	r0, [r4, #44]	; 0x2c
    1a1e:	208c      	movs	r0, #140	; 0x8c
			mem_set(fs->win, 0, 512);
    1a20:	3130      	adds	r1, #48	; 0x30
    1a22:	000a      	movs	r2, r1
    1a24:	0080      	lsls	r0, r0, #2
    1a26:	1820      	adds	r0, r4, r0
	while (cnt--)
    1a28:	4290      	cmp	r0, r2
    1a2a:	d144      	bne.n	1ab6 <sync+0xb6>
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1a2c:	2255      	movs	r2, #85	; 0x55
    1a2e:	4b24      	ldr	r3, [pc, #144]	; (1ac0 <sync+0xc0>)
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1a30:	2041      	movs	r0, #65	; 0x41
			ST_WORD(fs->win+BS_55AA, 0xAA55);
    1a32:	54e2      	strb	r2, [r4, r3]
    1a34:	4b23      	ldr	r3, [pc, #140]	; (1ac4 <sync+0xc4>)
    1a36:	1892      	adds	r2, r2, r2
    1a38:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1a3a:	0022      	movs	r2, r4
    1a3c:	3bde      	subs	r3, #222	; 0xde
    1a3e:	3bff      	subs	r3, #255	; 0xff
    1a40:	3231      	adds	r2, #49	; 0x31
    1a42:	700b      	strb	r3, [r1, #0]
    1a44:	7013      	strb	r3, [r2, #0]
    1a46:	0023      	movs	r3, r4
    1a48:	2261      	movs	r2, #97	; 0x61
    1a4a:	3332      	adds	r3, #50	; 0x32
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1a4c:	2585      	movs	r5, #133	; 0x85
			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
    1a4e:	701a      	strb	r2, [r3, #0]
    1a50:	7058      	strb	r0, [r3, #1]
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1a52:	2372      	movs	r3, #114	; 0x72
    1a54:	00ad      	lsls	r5, r5, #2
    1a56:	5563      	strb	r3, [r4, r5]
    1a58:	4d1b      	ldr	r5, [pc, #108]	; (1ac8 <sync+0xc8>)
    1a5a:	5563      	strb	r3, [r4, r5]
    1a5c:	4b1b      	ldr	r3, [pc, #108]	; (1acc <sync+0xcc>)
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    1a5e:	4d1c      	ldr	r5, [pc, #112]	; (1ad0 <sync+0xd0>)
			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
    1a60:	54e0      	strb	r0, [r4, r3]
    1a62:	4b1c      	ldr	r3, [pc, #112]	; (1ad4 <sync+0xd4>)
    1a64:	54e2      	strb	r2, [r4, r3]
			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
    1a66:	6923      	ldr	r3, [r4, #16]
    1a68:	32b8      	adds	r2, #184	; 0xb8
    1a6a:	32ff      	adds	r2, #255	; 0xff
    1a6c:	54a3      	strb	r3, [r4, r2]
    1a6e:	4a1a      	ldr	r2, [pc, #104]	; (1ad8 <sync+0xd8>)
    1a70:	0a18      	lsrs	r0, r3, #8
    1a72:	54a0      	strb	r0, [r4, r2]
    1a74:	4a19      	ldr	r2, [pc, #100]	; (1adc <sync+0xdc>)
    1a76:	0c18      	lsrs	r0, r3, #16
    1a78:	54a0      	strb	r0, [r4, r2]
    1a7a:	4a19      	ldr	r2, [pc, #100]	; (1ae0 <sync+0xe0>)
    1a7c:	0e1b      	lsrs	r3, r3, #24
    1a7e:	54a3      	strb	r3, [r4, r2]
			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
    1a80:	68e3      	ldr	r3, [r4, #12]
    1a82:	3201      	adds	r2, #1
    1a84:	54a3      	strb	r3, [r4, r2]
    1a86:	4a17      	ldr	r2, [pc, #92]	; (1ae4 <sync+0xe4>)
    1a88:	0a18      	lsrs	r0, r3, #8
    1a8a:	54a0      	strb	r0, [r4, r2]
    1a8c:	4a16      	ldr	r2, [pc, #88]	; (1ae8 <sync+0xe8>)
    1a8e:	0c18      	lsrs	r0, r3, #16
    1a90:	54a0      	strb	r0, [r4, r2]
    1a92:	4a16      	ldr	r2, [pc, #88]	; (1aec <sync+0xec>)
    1a94:	0e1b      	lsrs	r3, r3, #24
    1a96:	54a3      	strb	r3, [r4, r2]
			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
    1a98:	7860      	ldrb	r0, [r4, #1]
    1a9a:	2301      	movs	r3, #1
    1a9c:	6962      	ldr	r2, [r4, #20]
    1a9e:	47a8      	blx	r5
			fs->fsi_flag = 0;
    1aa0:	2300      	movs	r3, #0
    1aa2:	7163      	strb	r3, [r4, #5]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
    1aa4:	2200      	movs	r2, #0
    1aa6:	4b12      	ldr	r3, [pc, #72]	; (1af0 <sync+0xf0>)
    1aa8:	7860      	ldrb	r0, [r4, #1]
    1aaa:	0011      	movs	r1, r2
    1aac:	4798      	blx	r3
    1aae:	1e43      	subs	r3, r0, #1
    1ab0:	4198      	sbcs	r0, r3
    1ab2:	b2c0      	uxtb	r0, r0
}
    1ab4:	bd70      	pop	{r4, r5, r6, pc}
		*d++ = (BYTE)val;
    1ab6:	7013      	strb	r3, [r2, #0]
    1ab8:	3201      	adds	r2, #1
    1aba:	e7b5      	b.n	1a28 <sync+0x28>
    1abc:	00000f51 	.word	0x00000f51
    1ac0:	0000022e 	.word	0x0000022e
    1ac4:	0000022f 	.word	0x0000022f
    1ac8:	00000215 	.word	0x00000215
    1acc:	00000216 	.word	0x00000216
    1ad0:	00000d7d 	.word	0x00000d7d
    1ad4:	00000217 	.word	0x00000217
    1ad8:	00000219 	.word	0x00000219
    1adc:	0000021a 	.word	0x0000021a
    1ae0:	0000021b 	.word	0x0000021b
    1ae4:	0000021d 	.word	0x0000021d
    1ae8:	0000021e 	.word	0x0000021e
    1aec:	0000021f 	.word	0x0000021f
    1af0:	00000ded 	.word	0x00000ded

00001af4 <f_mount>:
{
	FATFS *rfs;


	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
		return FR_INVALID_DRIVE;
    1af4:	230b      	movs	r3, #11
	if (vol >= _VOLUMES)		/* Check if the drive number is valid */
    1af6:	2800      	cmp	r0, #0
    1af8:	d10a      	bne.n	1b10 <f_mount+0x1c>
	rfs = FatFs[vol];			/* Get current fs object */
    1afa:	4b06      	ldr	r3, [pc, #24]	; (1b14 <f_mount+0x20>)
    1afc:	681a      	ldr	r2, [r3, #0]

	if (rfs) {
    1afe:	2a00      	cmp	r2, #0
    1b00:	d000      	beq.n	1b04 <f_mount+0x10>
		clear_lock(rfs);
#endif
#if _FS_REENTRANT				/* Discard sync object of the current volume */
		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
#endif
		rfs->fs_type = 0;		/* Clear old fs object */
    1b02:	7010      	strb	r0, [r2, #0]
	}

	if (fs) {
    1b04:	2900      	cmp	r1, #0
    1b06:	d001      	beq.n	1b0c <f_mount+0x18>
		fs->fs_type = 0;		/* Clear new fs object */
    1b08:	2200      	movs	r2, #0
    1b0a:	700a      	strb	r2, [r1, #0]
#if _FS_REENTRANT				/* Create sync object for the new volume */
		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;			/* Register new fs object */
    1b0c:	6019      	str	r1, [r3, #0]

	return FR_OK;
    1b0e:	2300      	movs	r3, #0
}
    1b10:	0018      	movs	r0, r3
    1b12:	4770      	bx	lr
    1b14:	20000054 	.word	0x20000054

00001b18 <f_open>:
FRESULT f_open (
	FIL *fp,			/* Pointer to the blank file object */
	const TCHAR *path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
    1b18:	b5f0      	push	{r4, r5, r6, r7, lr}


	fp->fs = 0;			/* Clear file object */

#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1b1a:	271f      	movs	r7, #31
{
    1b1c:	0015      	movs	r5, r2
	fp->fs = 0;			/* Clear file object */
    1b1e:	2300      	movs	r3, #0
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
    1b20:	4017      	ands	r7, r2
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    1b22:	221e      	movs	r2, #30
{
    1b24:	b08d      	sub	sp, #52	; 0x34
	fp->fs = 0;			/* Clear file object */
    1b26:	6003      	str	r3, [r0, #0]
{
    1b28:	9101      	str	r1, [sp, #4]
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    1b2a:	4b49      	ldr	r3, [pc, #292]	; (1c50 <f_open+0x138>)
{
    1b2c:	0006      	movs	r6, r0
	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
    1b2e:	402a      	ands	r2, r5
    1b30:	a905      	add	r1, sp, #20
    1b32:	a801      	add	r0, sp, #4
    1b34:	4798      	blx	r3
#else
	mode &= FA_READ;
	res = chk_mounted(&path, &dj.fs, 0);
#endif
	INIT_BUF(dj);
    1b36:	ab02      	add	r3, sp, #8
    1b38:	930b      	str	r3, [sp, #44]	; 0x2c
	if (res == FR_OK)
    1b3a:	2800      	cmp	r0, #0
    1b3c:	d103      	bne.n	1b46 <f_open+0x2e>
		res = follow_path(&dj, path);	/* Follow the file path */
    1b3e:	9901      	ldr	r1, [sp, #4]
    1b40:	a805      	add	r0, sp, #20
    1b42:	4b44      	ldr	r3, [pc, #272]	; (1c54 <f_open+0x13c>)
    1b44:	4798      	blx	r3
	dir = dj.dir;
    1b46:	9c0a      	ldr	r4, [sp, #40]	; 0x28

#if !_FS_READONLY	/* R/W configuration */
	if (res == FR_OK) {
    1b48:	2800      	cmp	r0, #0
    1b4a:	d102      	bne.n	1b52 <f_open+0x3a>
		if (!dir)	/* Current dir itself */
    1b4c:	2c00      	cmp	r4, #0
    1b4e:	d100      	bne.n	1b52 <f_open+0x3a>
			res = FR_INVALID_NAME;
    1b50:	3006      	adds	r0, #6
		else
			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
	}
	/* Create or Open a file */
	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
    1b52:	231c      	movs	r3, #28
    1b54:	421d      	tst	r5, r3
    1b56:	d100      	bne.n	1b5a <f_open+0x42>
    1b58:	e06d      	b.n	1c36 <f_open+0x11e>
		DWORD dw, cl;

		if (res != FR_OK) {					/* No file, create new */
    1b5a:	2800      	cmp	r0, #0
    1b5c:	d00b      	beq.n	1b76 <f_open+0x5e>
			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
    1b5e:	2804      	cmp	r0, #4
    1b60:	d102      	bne.n	1b68 <f_open+0x50>
#if _FS_SHARE
				res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
				res = dir_register(&dj);
    1b62:	a805      	add	r0, sp, #20
    1b64:	4b3c      	ldr	r3, [pc, #240]	; (1c58 <f_open+0x140>)
    1b66:	4798      	blx	r3
#endif
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    1b68:	2308      	movs	r3, #8
			dir = dj.dir;					/* New entry */
    1b6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
			mode |= FA_CREATE_ALWAYS;		/* File is created */
    1b6c:	431f      	orrs	r7, r3
			} else {
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
					res = FR_EXIST;
			}
		}
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1b6e:	2800      	cmp	r0, #0
    1b70:	d009      	beq.n	1b86 <f_open+0x6e>
#endif
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
	}

	LEAVE_FF(dj.fs, res);
}
    1b72:	b00d      	add	sp, #52	; 0x34
    1b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1b76:	2311      	movs	r3, #17
    1b78:	7ae2      	ldrb	r2, [r4, #11]
				res = FR_DENIED;
    1b7a:	2007      	movs	r0, #7
			if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
    1b7c:	421a      	tst	r2, r3
    1b7e:	d1f8      	bne.n	1b72 <f_open+0x5a>
					res = FR_EXIST;
    1b80:	3001      	adds	r0, #1
				if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
    1b82:	076b      	lsls	r3, r5, #29
    1b84:	d4f5      	bmi.n	1b72 <f_open+0x5a>
		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
    1b86:	073b      	lsls	r3, r7, #28
    1b88:	d52f      	bpl.n	1bea <f_open+0xd2>
			dw = get_fattime();					/* Created time */
    1b8a:	4b34      	ldr	r3, [pc, #208]	; (1c5c <f_open+0x144>)
    1b8c:	4798      	blx	r3
			ST_DWORD(dir+DIR_CrtTime, dw);
    1b8e:	0a03      	lsrs	r3, r0, #8
    1b90:	73e3      	strb	r3, [r4, #15]
    1b92:	0c03      	lsrs	r3, r0, #16
    1b94:	7423      	strb	r3, [r4, #16]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    1b96:	2300      	movs	r3, #0
			cl = LD_CLUST(dir);					/* Get start cluster */
    1b98:	7d62      	ldrb	r2, [r4, #21]
    1b9a:	7d25      	ldrb	r5, [r4, #20]
    1b9c:	7ee1      	ldrb	r1, [r4, #27]
    1b9e:	0212      	lsls	r2, r2, #8
			ST_DWORD(dir+DIR_CrtTime, dw);
    1ba0:	73a0      	strb	r0, [r4, #14]
			cl = LD_CLUST(dir);					/* Get start cluster */
    1ba2:	4315      	orrs	r5, r2
			ST_DWORD(dir+DIR_CrtTime, dw);
    1ba4:	0e00      	lsrs	r0, r0, #24
			cl = LD_CLUST(dir);					/* Get start cluster */
    1ba6:	7ea2      	ldrb	r2, [r4, #26]
			ST_DWORD(dir+DIR_CrtTime, dw);
    1ba8:	7460      	strb	r0, [r4, #17]
			cl = LD_CLUST(dir);					/* Get start cluster */
    1baa:	0209      	lsls	r1, r1, #8
			dj.fs->wflag = 1;
    1bac:	9805      	ldr	r0, [sp, #20]
			dir[DIR_Attr] = 0;					/* Reset attribute */
    1bae:	72e3      	strb	r3, [r4, #11]
			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
    1bb0:	7723      	strb	r3, [r4, #28]
    1bb2:	7763      	strb	r3, [r4, #29]
    1bb4:	77a3      	strb	r3, [r4, #30]
    1bb6:	77e3      	strb	r3, [r4, #31]
			ST_CLUST(dir, 0);					/* cluster = 0 */
    1bb8:	76a3      	strb	r3, [r4, #26]
    1bba:	76e3      	strb	r3, [r4, #27]
    1bbc:	7523      	strb	r3, [r4, #20]
    1bbe:	7563      	strb	r3, [r4, #21]
			cl = LD_CLUST(dir);					/* Get start cluster */
    1bc0:	042d      	lsls	r5, r5, #16
    1bc2:	430a      	orrs	r2, r1
			dj.fs->wflag = 1;
    1bc4:	3301      	adds	r3, #1
			cl = LD_CLUST(dir);					/* Get start cluster */
    1bc6:	4315      	orrs	r5, r2
			dj.fs->wflag = 1;
    1bc8:	7103      	strb	r3, [r0, #4]
			if (cl) {							/* Remove the cluster chain if exist */
    1bca:	d00e      	beq.n	1bea <f_open+0xd2>
				dw = dj.fs->winsect;
    1bcc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
				res = remove_chain(dj.fs, cl);
    1bce:	0029      	movs	r1, r5
				dw = dj.fs->winsect;
    1bd0:	9300      	str	r3, [sp, #0]
				res = remove_chain(dj.fs, cl);
    1bd2:	4b23      	ldr	r3, [pc, #140]	; (1c60 <f_open+0x148>)
    1bd4:	4798      	blx	r3
				if (res == FR_OK) {
    1bd6:	2800      	cmp	r0, #0
    1bd8:	d1cb      	bne.n	1b72 <f_open+0x5a>
					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
    1bda:	9805      	ldr	r0, [sp, #20]
    1bdc:	3d01      	subs	r5, #1
    1bde:	60c5      	str	r5, [r0, #12]
					res = move_window(dj.fs, dw);
    1be0:	9900      	ldr	r1, [sp, #0]
    1be2:	4b20      	ldr	r3, [pc, #128]	; (1c64 <f_open+0x14c>)
    1be4:	4798      	blx	r3
	if (res == FR_OK) {
    1be6:	2800      	cmp	r0, #0
    1be8:	d1c3      	bne.n	1b72 <f_open+0x5a>
		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
    1bea:	073b      	lsls	r3, r7, #28
    1bec:	d501      	bpl.n	1bf2 <f_open+0xda>
			mode |= FA__WRITTEN;
    1bee:	2320      	movs	r3, #32
    1bf0:	431f      	orrs	r7, r3
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    1bf2:	9a05      	ldr	r2, [sp, #20]
    1bf4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		fp->dir_ptr = dir;
    1bf6:	6234      	str	r4, [r6, #32]
		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
    1bf8:	61f3      	str	r3, [r6, #28]
		fp->flag = mode;					/* File access mode */
    1bfa:	71b7      	strb	r7, [r6, #6]
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    1bfc:	7d61      	ldrb	r1, [r4, #21]
    1bfe:	7d23      	ldrb	r3, [r4, #20]
    1c00:	7ee0      	ldrb	r0, [r4, #27]
    1c02:	0209      	lsls	r1, r1, #8
    1c04:	430b      	orrs	r3, r1
    1c06:	7ea1      	ldrb	r1, [r4, #26]
    1c08:	0200      	lsls	r0, r0, #8
    1c0a:	4301      	orrs	r1, r0
		fp->fptr = 0;						/* File pointer */
    1c0c:	2000      	movs	r0, #0
		fp->sclust = LD_CLUST(dir);			/* File start cluster */
    1c0e:	041b      	lsls	r3, r3, #16
    1c10:	430b      	orrs	r3, r1
    1c12:	6133      	str	r3, [r6, #16]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1c14:	7f61      	ldrb	r1, [r4, #29]
    1c16:	7f23      	ldrb	r3, [r4, #28]
    1c18:	0209      	lsls	r1, r1, #8
    1c1a:	4319      	orrs	r1, r3
    1c1c:	7fa3      	ldrb	r3, [r4, #30]
    1c1e:	041b      	lsls	r3, r3, #16
    1c20:	4319      	orrs	r1, r3
    1c22:	7fe3      	ldrb	r3, [r4, #31]
		fp->fptr = 0;						/* File pointer */
    1c24:	60b0      	str	r0, [r6, #8]
		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    1c26:	061b      	lsls	r3, r3, #24
    1c28:	430b      	orrs	r3, r1
    1c2a:	60f3      	str	r3, [r6, #12]
		fp->dsect = 0;
    1c2c:	61b0      	str	r0, [r6, #24]
		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
    1c2e:	6032      	str	r2, [r6, #0]
    1c30:	88d3      	ldrh	r3, [r2, #6]
    1c32:	80b3      	strh	r3, [r6, #4]
    1c34:	e79d      	b.n	1b72 <f_open+0x5a>
		if (res == FR_OK) {						/* Follow succeeded */
    1c36:	2800      	cmp	r0, #0
    1c38:	d19b      	bne.n	1b72 <f_open+0x5a>
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    1c3a:	7ae3      	ldrb	r3, [r4, #11]
				res = FR_NO_FILE;
    1c3c:	3004      	adds	r0, #4
			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
    1c3e:	06da      	lsls	r2, r3, #27
    1c40:	d497      	bmi.n	1b72 <f_open+0x5a>
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1c42:	07aa      	lsls	r2, r5, #30
    1c44:	d5d1      	bpl.n	1bea <f_open+0xd2>
				res = FR_DENIED;
    1c46:	3003      	adds	r0, #3
				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
    1c48:	07db      	lsls	r3, r3, #31
    1c4a:	d500      	bpl.n	1c4e <f_open+0x136>
    1c4c:	e791      	b.n	1b72 <f_open+0x5a>
    1c4e:	e7cc      	b.n	1bea <f_open+0xd2>
    1c50:	0000107d 	.word	0x0000107d
    1c54:	00001869 	.word	0x00001869
    1c58:	000017f9 	.word	0x000017f9
    1c5c:	00000e55 	.word	0x00000e55
    1c60:	00001769 	.word	0x00001769
    1c64:	00000f51 	.word	0x00000f51

00001c68 <f_read>:
	FIL *fp, 		/* Pointer to the file object */
	void *buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT *br		/* Pointer to number of bytes read */
)
{
    1c68:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c6a:	b087      	sub	sp, #28
    1c6c:	9305      	str	r3, [sp, #20]
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = buff;


	*br = 0;	/* Initialize byte counter */
    1c6e:	2300      	movs	r3, #0
{
    1c70:	0016      	movs	r6, r2
	*br = 0;	/* Initialize byte counter */
    1c72:	9a05      	ldr	r2, [sp, #20]
{
    1c74:	9101      	str	r1, [sp, #4]
	*br = 0;	/* Initialize byte counter */
    1c76:	6013      	str	r3, [r2, #0]

	res = validate(fp->fs, fp->id);				/* Check validity */
    1c78:	8881      	ldrh	r1, [r0, #4]
{
    1c7a:	0004      	movs	r4, r0
	res = validate(fp->fs, fp->id);				/* Check validity */
    1c7c:	4b4d      	ldr	r3, [pc, #308]	; (1db4 <f_read+0x14c>)
    1c7e:	6800      	ldr	r0, [r0, #0]
    1c80:	4798      	blx	r3
    1c82:	1e05      	subs	r5, r0, #0
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
    1c84:	d131      	bne.n	1cea <f_read+0x82>
	if (fp->flag & FA__ERROR)					/* Aborted file? */
    1c86:	79a3      	ldrb	r3, [r4, #6]
    1c88:	b25a      	sxtb	r2, r3
    1c8a:	2a00      	cmp	r2, #0
    1c8c:	db1f      	blt.n	1cce <f_read+0x66>
		LEAVE_FF(fp->fs, FR_INT_ERR);
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
    1c8e:	07db      	lsls	r3, r3, #31
    1c90:	d400      	bmi.n	1c94 <f_read+0x2c>
    1c92:	e08c      	b.n	1dae <f_read+0x146>
		LEAVE_FF(fp->fs, FR_DENIED);
	remain = fp->fsize - fp->fptr;
    1c94:	68e3      	ldr	r3, [r4, #12]
    1c96:	68a2      	ldr	r2, [r4, #8]
    1c98:	1a9f      	subs	r7, r3, r2
    1c9a:	42b7      	cmp	r7, r6
    1c9c:	d900      	bls.n	1ca0 <f_read+0x38>
    1c9e:	0037      	movs	r7, r6
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */

	for ( ;  btr;								/* Repeat until all data read */
    1ca0:	2f00      	cmp	r7, #0
    1ca2:	d022      	beq.n	1cea <f_read+0x82>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
    1ca4:	68a3      	ldr	r3, [r4, #8]
    1ca6:	05da      	lsls	r2, r3, #23
    1ca8:	d166      	bne.n	1d78 <f_read+0x110>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
    1caa:	6820      	ldr	r0, [r4, #0]
    1cac:	0a5e      	lsrs	r6, r3, #9
    1cae:	7882      	ldrb	r2, [r0, #2]
    1cb0:	3a01      	subs	r2, #1
    1cb2:	4016      	ands	r6, r2
    1cb4:	b2f2      	uxtb	r2, r6
    1cb6:	1e16      	subs	r6, r2, #0
			if (!csect) {						/* On the cluster boundary? */
    1cb8:	d11b      	bne.n	1cf2 <f_read+0x8a>
				if (fp->fptr == 0) {			/* On the top of the file? */
    1cba:	2b00      	cmp	r3, #0
    1cbc:	d109      	bne.n	1cd2 <f_read+0x6a>
					clst = fp->sclust;			/* Follow from the origin */
    1cbe:	6920      	ldr	r0, [r4, #16]
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
    1cc0:	2801      	cmp	r0, #1
    1cc2:	d80a      	bhi.n	1cda <f_read+0x72>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
				fp->clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1cc4:	2380      	movs	r3, #128	; 0x80
    1cc6:	79a2      	ldrb	r2, [r4, #6]
    1cc8:	425b      	negs	r3, r3
    1cca:	4313      	orrs	r3, r2
    1ccc:	71a3      	strb	r3, [r4, #6]
		LEAVE_FF(fp->fs, FR_INT_ERR);
    1cce:	2502      	movs	r5, #2
    1cd0:	e00b      	b.n	1cea <f_read+0x82>
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
    1cd2:	6961      	ldr	r1, [r4, #20]
    1cd4:	4b38      	ldr	r3, [pc, #224]	; (1db8 <f_read+0x150>)
    1cd6:	4798      	blx	r3
    1cd8:	e7f2      	b.n	1cc0 <f_read+0x58>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
    1cda:	1c43      	adds	r3, r0, #1
    1cdc:	d108      	bne.n	1cf0 <f_read+0x88>
		}
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
		if (rcnt > btr) rcnt = btr;
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
    1cde:	2380      	movs	r3, #128	; 0x80
    1ce0:	2501      	movs	r5, #1
    1ce2:	79a2      	ldrb	r2, [r4, #6]
    1ce4:	425b      	negs	r3, r3
    1ce6:	4313      	orrs	r3, r2
    1ce8:	71a3      	strb	r3, [r4, #6]
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
}
    1cea:	0028      	movs	r0, r5
    1cec:	b007      	add	sp, #28
    1cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
				fp->clust = clst;				/* Update current cluster */
    1cf0:	6160      	str	r0, [r4, #20]
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
    1cf2:	6823      	ldr	r3, [r4, #0]
    1cf4:	6961      	ldr	r1, [r4, #20]
    1cf6:	9303      	str	r3, [sp, #12]
    1cf8:	0018      	movs	r0, r3
    1cfa:	4b30      	ldr	r3, [pc, #192]	; (1dbc <f_read+0x154>)
    1cfc:	4798      	blx	r3
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
    1cfe:	2800      	cmp	r0, #0
    1d00:	d0e0      	beq.n	1cc4 <f_read+0x5c>
			sect += csect;
    1d02:	1983      	adds	r3, r0, r6
    1d04:	9304      	str	r3, [sp, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
    1d06:	0a7b      	lsrs	r3, r7, #9
    1d08:	9302      	str	r3, [sp, #8]
			if (cc) {							/* Read maximum contiguous sectors directly */
    1d0a:	d033      	beq.n	1d74 <f_read+0x10c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
    1d0c:	9b03      	ldr	r3, [sp, #12]
    1d0e:	0a79      	lsrs	r1, r7, #9
    1d10:	789b      	ldrb	r3, [r3, #2]
    1d12:	1872      	adds	r2, r6, r1
    1d14:	429a      	cmp	r2, r3
    1d16:	d901      	bls.n	1d1c <f_read+0xb4>
					cc = fp->fs->csize - csect;
    1d18:	1b9b      	subs	r3, r3, r6
    1d1a:	9302      	str	r3, [sp, #8]
				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
    1d1c:	466b      	mov	r3, sp
    1d1e:	9a03      	ldr	r2, [sp, #12]
    1d20:	7a1b      	ldrb	r3, [r3, #8]
    1d22:	7850      	ldrb	r0, [r2, #1]
    1d24:	9901      	ldr	r1, [sp, #4]
    1d26:	9a04      	ldr	r2, [sp, #16]
    1d28:	4e25      	ldr	r6, [pc, #148]	; (1dc0 <f_read+0x158>)
    1d2a:	47b0      	blx	r6
    1d2c:	2800      	cmp	r0, #0
    1d2e:	d1d6      	bne.n	1cde <f_read+0x76>
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
    1d30:	6821      	ldr	r1, [r4, #0]
    1d32:	790b      	ldrb	r3, [r1, #4]
    1d34:	2b00      	cmp	r3, #0
    1d36:	d00d      	beq.n	1d54 <f_read+0xec>
    1d38:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    1d3a:	9a04      	ldr	r2, [sp, #16]
    1d3c:	1a98      	subs	r0, r3, r2
    1d3e:	9b02      	ldr	r3, [sp, #8]
    1d40:	4283      	cmp	r3, r0
    1d42:	d907      	bls.n	1d54 <f_read+0xec>
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
    1d44:	2280      	movs	r2, #128	; 0x80
    1d46:	9b01      	ldr	r3, [sp, #4]
    1d48:	0240      	lsls	r0, r0, #9
    1d4a:	1818      	adds	r0, r3, r0
    1d4c:	3130      	adds	r1, #48	; 0x30
    1d4e:	0092      	lsls	r2, r2, #2
    1d50:	4b1c      	ldr	r3, [pc, #112]	; (1dc4 <f_read+0x15c>)
    1d52:	4798      	blx	r3
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
    1d54:	9b02      	ldr	r3, [sp, #8]
    1d56:	025e      	lsls	r6, r3, #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
    1d58:	9b01      	ldr	r3, [sp, #4]
    1d5a:	9a05      	ldr	r2, [sp, #20]
    1d5c:	199b      	adds	r3, r3, r6
    1d5e:	9301      	str	r3, [sp, #4]
    1d60:	68a3      	ldr	r3, [r4, #8]
    1d62:	1bbf      	subs	r7, r7, r6
    1d64:	199b      	adds	r3, r3, r6
    1d66:	60a3      	str	r3, [r4, #8]
    1d68:	9b05      	ldr	r3, [sp, #20]
    1d6a:	681b      	ldr	r3, [r3, #0]
    1d6c:	9302      	str	r3, [sp, #8]
    1d6e:	199b      	adds	r3, r3, r6
    1d70:	6013      	str	r3, [r2, #0]
    1d72:	e795      	b.n	1ca0 <f_read+0x38>
			fp->dsect = sect;
    1d74:	9b04      	ldr	r3, [sp, #16]
    1d76:	61a3      	str	r3, [r4, #24]
		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
    1d78:	2280      	movs	r2, #128	; 0x80
    1d7a:	68a3      	ldr	r3, [r4, #8]
    1d7c:	0092      	lsls	r2, r2, #2
    1d7e:	05db      	lsls	r3, r3, #23
    1d80:	0ddb      	lsrs	r3, r3, #23
    1d82:	1ad3      	subs	r3, r2, r3
    1d84:	003e      	movs	r6, r7
    1d86:	429f      	cmp	r7, r3
    1d88:	d900      	bls.n	1d8c <f_read+0x124>
    1d8a:	001e      	movs	r6, r3
		if (move_window(fp->fs, fp->dsect))		/* Move sector window */
    1d8c:	69a1      	ldr	r1, [r4, #24]
    1d8e:	6820      	ldr	r0, [r4, #0]
    1d90:	4b0d      	ldr	r3, [pc, #52]	; (1dc8 <f_read+0x160>)
    1d92:	4798      	blx	r3
    1d94:	2800      	cmp	r0, #0
    1d96:	d1a2      	bne.n	1cde <f_read+0x76>
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
    1d98:	68a3      	ldr	r3, [r4, #8]
    1d9a:	0032      	movs	r2, r6
    1d9c:	05d9      	lsls	r1, r3, #23
    1d9e:	0dc9      	lsrs	r1, r1, #23
    1da0:	6823      	ldr	r3, [r4, #0]
    1da2:	3130      	adds	r1, #48	; 0x30
    1da4:	1859      	adds	r1, r3, r1
    1da6:	9801      	ldr	r0, [sp, #4]
    1da8:	4b06      	ldr	r3, [pc, #24]	; (1dc4 <f_read+0x15c>)
    1daa:	4798      	blx	r3
    1dac:	e7d4      	b.n	1d58 <f_read+0xf0>
		LEAVE_FF(fp->fs, FR_DENIED);
    1dae:	2507      	movs	r5, #7
    1db0:	e79b      	b.n	1cea <f_read+0x82>
    1db2:	46c0      	nop			; (mov r8, r8)
    1db4:	00000fd1 	.word	0x00000fd1
    1db8:	000012f9 	.word	0x000012f9
    1dbc:	00000eaf 	.word	0x00000eaf
    1dc0:	00000d0d 	.word	0x00000d0d
    1dc4:	00000e9d 	.word	0x00000e9d
    1dc8:	00000f51 	.word	0x00000f51

00001dcc <f_stat>:

FRESULT f_stat (
	const TCHAR *path,	/* Pointer to the file path */
	FILINFO *fno		/* Pointer to file information to return */
)
{
    1dcc:	b530      	push	{r4, r5, lr}
    1dce:	b08d      	sub	sp, #52	; 0x34
    1dd0:	9001      	str	r0, [sp, #4]
    1dd2:	000d      	movs	r5, r1
	FRESULT res;
	DIR dj;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 0);
    1dd4:	2200      	movs	r2, #0
    1dd6:	a905      	add	r1, sp, #20
    1dd8:	a801      	add	r0, sp, #4
    1dda:	4b0c      	ldr	r3, [pc, #48]	; (1e0c <f_stat+0x40>)
    1ddc:	4798      	blx	r3
    1dde:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    1de0:	d10f      	bne.n	1e02 <f_stat+0x36>
		INIT_BUF(dj);
    1de2:	ab02      	add	r3, sp, #8
    1de4:	930b      	str	r3, [sp, #44]	; 0x2c
		res = follow_path(&dj, path);	/* Follow the file path */
    1de6:	9901      	ldr	r1, [sp, #4]
    1de8:	a805      	add	r0, sp, #20
    1dea:	4b09      	ldr	r3, [pc, #36]	; (1e10 <f_stat+0x44>)
    1dec:	4798      	blx	r3
    1dee:	1e04      	subs	r4, r0, #0
		if (res == FR_OK) {				/* Follow completed */
    1df0:	d107      	bne.n	1e02 <f_stat+0x36>
			if (dj.dir)		/* Found an object */
    1df2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1df4:	9300      	str	r3, [sp, #0]
    1df6:	2b00      	cmp	r3, #0
    1df8:	d006      	beq.n	1e08 <f_stat+0x3c>
				get_fileinfo(&dj, fno);
    1dfa:	0029      	movs	r1, r5
    1dfc:	a805      	add	r0, sp, #20
    1dfe:	4b05      	ldr	r3, [pc, #20]	; (1e14 <f_stat+0x48>)
    1e00:	4798      	blx	r3
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
}
    1e02:	0020      	movs	r0, r4
    1e04:	b00d      	add	sp, #52	; 0x34
    1e06:	bd30      	pop	{r4, r5, pc}
				res = FR_INVALID_NAME;
    1e08:	2406      	movs	r4, #6
    1e0a:	e7fa      	b.n	1e02 <f_stat+0x36>
    1e0c:	0000107d 	.word	0x0000107d
    1e10:	00001869 	.word	0x00001869
    1e14:	00000ec7 	.word	0x00000ec7

00001e18 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR *path		/* Pointer to the file or directory path */
)
{
    1e18:	b530      	push	{r4, r5, lr}
    1e1a:	b095      	sub	sp, #84	; 0x54
    1e1c:	9001      	str	r0, [sp, #4]
	BYTE *dir;
	DWORD dclst;
	DEF_NAMEBUF;


	res = chk_mounted(&path, &dj.fs, 1);
    1e1e:	2201      	movs	r2, #1
    1e20:	a906      	add	r1, sp, #24
    1e22:	a801      	add	r0, sp, #4
    1e24:	4b26      	ldr	r3, [pc, #152]	; (1ec0 <f_unlink+0xa8>)
    1e26:	4798      	blx	r3
    1e28:	1e04      	subs	r4, r0, #0
	if (res == FR_OK) {
    1e2a:	d13d      	bne.n	1ea8 <f_unlink+0x90>
		INIT_BUF(dj);
    1e2c:	ab03      	add	r3, sp, #12
    1e2e:	930c      	str	r3, [sp, #48]	; 0x30
		res = follow_path(&dj, path);		/* Follow the file path */
    1e30:	9901      	ldr	r1, [sp, #4]
    1e32:	a806      	add	r0, sp, #24
    1e34:	4b23      	ldr	r3, [pc, #140]	; (1ec4 <f_unlink+0xac>)
    1e36:	4798      	blx	r3
    1e38:	1e04      	subs	r4, r0, #0
		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
#if _FS_SHARE
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
#endif
		if (res == FR_OK) {					/* The object is accessible */
    1e3a:	d135      	bne.n	1ea8 <f_unlink+0x90>
			dir = dj.dir;
    1e3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
			if (!dir) {
				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
    1e3e:	3406      	adds	r4, #6
			if (!dir) {
    1e40:	2b00      	cmp	r3, #0
    1e42:	d031      	beq.n	1ea8 <f_unlink+0x90>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
    1e44:	7ada      	ldrb	r2, [r3, #11]
					res = FR_DENIED;		/* Cannot remove R/O object */
    1e46:	3401      	adds	r4, #1
				if (dir[DIR_Attr] & AM_RDO)
    1e48:	07d1      	lsls	r1, r2, #31
    1e4a:	d42d      	bmi.n	1ea8 <f_unlink+0x90>
			}
			dclst = LD_CLUST(dir);
    1e4c:	7d59      	ldrb	r1, [r3, #21]
    1e4e:	7d1d      	ldrb	r5, [r3, #20]
    1e50:	0209      	lsls	r1, r1, #8
    1e52:	430d      	orrs	r5, r1
    1e54:	7ed9      	ldrb	r1, [r3, #27]
    1e56:	7e9b      	ldrb	r3, [r3, #26]
    1e58:	0209      	lsls	r1, r1, #8
    1e5a:	042d      	lsls	r5, r5, #16
    1e5c:	430b      	orrs	r3, r1
    1e5e:	431d      	orrs	r5, r3
			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
    1e60:	06d3      	lsls	r3, r2, #27
    1e62:	d40b      	bmi.n	1e7c <f_unlink+0x64>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);		/* Remove the directory entry */
    1e64:	a806      	add	r0, sp, #24
    1e66:	4b18      	ldr	r3, [pc, #96]	; (1ec8 <f_unlink+0xb0>)
    1e68:	4798      	blx	r3
    1e6a:	1e04      	subs	r4, r0, #0
				if (res == FR_OK) {
    1e6c:	d11c      	bne.n	1ea8 <f_unlink+0x90>
					if (dclst)				/* Remove the cluster chain if exist */
    1e6e:	2d00      	cmp	r5, #0
    1e70:	d11d      	bne.n	1eae <f_unlink+0x96>
						res = remove_chain(dj.fs, dclst);
					if (res == FR_OK) res = sync(dj.fs);
    1e72:	9806      	ldr	r0, [sp, #24]
    1e74:	4b15      	ldr	r3, [pc, #84]	; (1ecc <f_unlink+0xb4>)
    1e76:	4798      	blx	r3
    1e78:	0004      	movs	r4, r0
    1e7a:	e015      	b.n	1ea8 <f_unlink+0x90>
					res = FR_INT_ERR;
    1e7c:	2402      	movs	r4, #2
				if (dclst < 2) {
    1e7e:	2d01      	cmp	r5, #1
    1e80:	d912      	bls.n	1ea8 <f_unlink+0x90>
					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
    1e82:	221c      	movs	r2, #28
    1e84:	a906      	add	r1, sp, #24
    1e86:	a80d      	add	r0, sp, #52	; 0x34
    1e88:	4b11      	ldr	r3, [pc, #68]	; (1ed0 <f_unlink+0xb8>)
    1e8a:	4798      	blx	r3
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    1e8c:	0021      	movs	r1, r4
    1e8e:	a80d      	add	r0, sp, #52	; 0x34
    1e90:	4b10      	ldr	r3, [pc, #64]	; (1ed4 <f_unlink+0xbc>)
					sdj.sclust = dclst;
    1e92:	950f      	str	r5, [sp, #60]	; 0x3c
					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
    1e94:	4798      	blx	r3
    1e96:	1e04      	subs	r4, r0, #0
					if (res == FR_OK) {
    1e98:	d106      	bne.n	1ea8 <f_unlink+0x90>
						res = dir_read(&sdj);
    1e9a:	a80d      	add	r0, sp, #52	; 0x34
    1e9c:	4b0e      	ldr	r3, [pc, #56]	; (1ed8 <f_unlink+0xc0>)
    1e9e:	4798      	blx	r3
    1ea0:	1e04      	subs	r4, r0, #0
						if (res == FR_OK			/* Not empty dir */
    1ea2:	d00b      	beq.n	1ebc <f_unlink+0xa4>
						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
    1ea4:	2804      	cmp	r0, #4
    1ea6:	d0dd      	beq.n	1e64 <f_unlink+0x4c>
			}
		}
		FREE_BUF();
	}
	LEAVE_FF(dj.fs, res);
}
    1ea8:	0020      	movs	r0, r4
    1eaa:	b015      	add	sp, #84	; 0x54
    1eac:	bd30      	pop	{r4, r5, pc}
						res = remove_chain(dj.fs, dclst);
    1eae:	0029      	movs	r1, r5
    1eb0:	9806      	ldr	r0, [sp, #24]
    1eb2:	4b0a      	ldr	r3, [pc, #40]	; (1edc <f_unlink+0xc4>)
    1eb4:	4798      	blx	r3
    1eb6:	1e04      	subs	r4, r0, #0
					if (res == FR_OK) res = sync(dj.fs);
    1eb8:	d1f6      	bne.n	1ea8 <f_unlink+0x90>
    1eba:	e7da      	b.n	1e72 <f_unlink+0x5a>
						) res = FR_DENIED;
    1ebc:	2407      	movs	r4, #7
    1ebe:	e7f3      	b.n	1ea8 <f_unlink+0x90>
    1ec0:	0000107d 	.word	0x0000107d
    1ec4:	00001869 	.word	0x00001869
    1ec8:	000017c9 	.word	0x000017c9
    1ecc:	00001a01 	.word	0x00001a01
    1ed0:	00000e9d 	.word	0x00000e9d
    1ed4:	000013d1 	.word	0x000013d1
    1ed8:	00001711 	.word	0x00001711
    1edc:	00001769 	.word	0x00001769

00001ee0 <NVIC_SystemReset>:
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    1ee0:	f3bf 8f4f 	dsb	sy
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    1ee4:	4a02      	ldr	r2, [pc, #8]	; (1ef0 <NVIC_SystemReset+0x10>)
    1ee6:	4b03      	ldr	r3, [pc, #12]	; (1ef4 <NVIC_SystemReset+0x14>)
    1ee8:	60da      	str	r2, [r3, #12]
    1eea:	f3bf 8f4f 	dsb	sy
    1eee:	e7fe      	b.n	1eee <NVIC_SystemReset+0xe>
    1ef0:	05fa0004 	.word	0x05fa0004
    1ef4:	e000ed00 	.word	0xe000ed00

00001ef8 <led_blink>:
	}

}

// Toggle LED for blink codes
static void led_blink(int num_blinks, int blink_period_ms, bool green) {
    1ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
    1efa:	2500      	movs	r5, #0
    1efc:	2780      	movs	r7, #128	; 0x80
    1efe:	000e      	movs	r6, r1
    1f00:	b087      	sub	sp, #28
	bool state = 0;
	struct port_config cfg;
	port_get_config_defaults(&cfg);
	num_blinks = num_blinks * 2;
    1f02:	0043      	lsls	r3, r0, #1
    1f04:	9301      	str	r3, [sp, #4]
			cfg.direction = PORT_PIN_DIR_INPUT;
			cfg.input_pull = PORT_PIN_PULL_NONE;
			port_pin_set_output_level(LED_OUT_PIN, 0);
			port_pin_set_config(LED_OUT_PIN, &cfg);
		}
		delay_ms(blink_period_ms/2);
    1f06:	0fcb      	lsrs	r3, r1, #31
    1f08:	185b      	adds	r3, r3, r1
    1f0a:	ac05      	add	r4, sp, #20
    1f0c:	105b      	asrs	r3, r3, #1
static void led_blink(int num_blinks, int blink_period_ms, bool green) {
    1f0e:	9203      	str	r2, [sp, #12]
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
    1f10:	70a5      	strb	r5, [r4, #2]
		delay_ms(blink_period_ms/2);
    1f12:	9302      	str	r3, [sp, #8]
    1f14:	013f      	lsls	r7, r7, #4
	while(num_blinks > 0) {
    1f16:	9a01      	ldr	r2, [sp, #4]
    1f18:	4b16      	ldr	r3, [pc, #88]	; (1f74 <led_blink+0x7c>)
    1f1a:	2a00      	cmp	r2, #0
    1f1c:	dc0b      	bgt.n	1f36 <led_blink+0x3e>
		num_blinks--;
	}
	cfg.direction = PORT_PIN_DIR_INPUT;
    1f1e:	2200      	movs	r2, #0

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1f20:	2180      	movs	r1, #128	; 0x80
    1f22:	7022      	strb	r2, [r4, #0]
	cfg.input_pull = PORT_PIN_PULL_NONE;
    1f24:	7062      	strb	r2, [r4, #1]
    1f26:	4a14      	ldr	r2, [pc, #80]	; (1f78 <led_blink+0x80>)
    1f28:	0109      	lsls	r1, r1, #4
    1f2a:	6011      	str	r1, [r2, #0]
	port_pin_set_output_level(LED_OUT_PIN, 0);
	port_pin_set_config(LED_OUT_PIN, &cfg);
    1f2c:	202b      	movs	r0, #43	; 0x2b
    1f2e:	0021      	movs	r1, r4
    1f30:	4798      	blx	r3
}
    1f32:	b007      	add	sp, #28
    1f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		state = !state;
    1f36:	2201      	movs	r2, #1
    1f38:	4055      	eors	r5, r2
		if (state) {
    1f3a:	d014      	beq.n	1f66 <led_blink+0x6e>
			cfg.direction = PORT_PIN_DIR_OUTPUT;
    1f3c:	7022      	strb	r2, [r4, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    1f3e:	2200      	movs	r2, #0
    1f40:	7062      	strb	r2, [r4, #1]
	if (level) {
    1f42:	9a03      	ldr	r2, [sp, #12]
    1f44:	2a00      	cmp	r2, #0
    1f46:	d110      	bne.n	1f6a <led_blink+0x72>
		port_base->OUTSET.reg = pin_mask;
    1f48:	4a0c      	ldr	r2, [pc, #48]	; (1f7c <led_blink+0x84>)
		port_base->OUTCLR.reg = pin_mask;
    1f4a:	6017      	str	r7, [r2, #0]
			port_pin_set_config(LED_OUT_PIN, &cfg);
    1f4c:	0021      	movs	r1, r4
    1f4e:	202b      	movs	r0, #43	; 0x2b
    1f50:	4798      	blx	r3
		delay_ms(blink_period_ms/2);
    1f52:	1c73      	adds	r3, r6, #1
    1f54:	2b02      	cmp	r3, #2
    1f56:	d90a      	bls.n	1f6e <led_blink+0x76>
    1f58:	9802      	ldr	r0, [sp, #8]
    1f5a:	4b09      	ldr	r3, [pc, #36]	; (1f80 <led_blink+0x88>)
    1f5c:	4798      	blx	r3
		num_blinks--;
    1f5e:	9b01      	ldr	r3, [sp, #4]
    1f60:	3b01      	subs	r3, #1
    1f62:	9301      	str	r3, [sp, #4]
    1f64:	e7d7      	b.n	1f16 <led_blink+0x1e>
			cfg.direction = PORT_PIN_DIR_INPUT;
    1f66:	7025      	strb	r5, [r4, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    1f68:	7065      	strb	r5, [r4, #1]
    1f6a:	4a03      	ldr	r2, [pc, #12]	; (1f78 <led_blink+0x80>)
    1f6c:	e7ed      	b.n	1f4a <led_blink+0x52>
		delay_ms(blink_period_ms/2);
    1f6e:	2001      	movs	r0, #1
    1f70:	4b04      	ldr	r3, [pc, #16]	; (1f84 <led_blink+0x8c>)
    1f72:	e7f3      	b.n	1f5c <led_blink+0x64>
    1f74:	00003935 	.word	0x00003935
    1f78:	41004494 	.word	0x41004494
    1f7c:	41004498 	.word	0x41004498
    1f80:	00002ff9 	.word	0x00002ff9
    1f84:	00002fcd 	.word	0x00002fcd

00001f88 <fatal_error>:

// Fatal errors: blink light, print, sleep
static void fatal_error(int numBlinks, const char* fmt, ...) {
    1f88:	b40e      	push	{r1, r2, r3}
    1f8a:	b503      	push	{r0, r1, lr}
	va_list args;
	va_start(args, fmt);
    1f8c:	ab04      	add	r3, sp, #16
    1f8e:	9301      	str	r3, [sp, #4]
	debug_print(fmt, args);
	va_end(args);
	led_blink(numBlinks, 200, 0);
    1f90:	2200      	movs	r2, #0
    1f92:	21c8      	movs	r1, #200	; 0xc8
    1f94:	4b04      	ldr	r3, [pc, #16]	; (1fa8 <fatal_error+0x20>)
    1f96:	4798      	blx	r3
	delay_ms(100);
    1f98:	2064      	movs	r0, #100	; 0x64
    1f9a:	4b04      	ldr	r3, [pc, #16]	; (1fac <fatal_error+0x24>)
    1f9c:	4798      	blx	r3
    1f9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    1fa2:	bf30      	wfi
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
	NVIC_SystemReset();
    1fa4:	4b02      	ldr	r3, [pc, #8]	; (1fb0 <fatal_error+0x28>)
    1fa6:	4798      	blx	r3
    1fa8:	00001ef9 	.word	0x00001ef9
    1fac:	00002ff9 	.word	0x00002ff9
    1fb0:	00001ee1 	.word	0x00001ee1

00001fb4 <SYSCTRL_Handler>:
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    1fb4:	2280      	movs	r2, #128	; 0x80
    1fb6:	4b05      	ldr	r3, [pc, #20]	; (1fcc <SYSCTRL_Handler+0x18>)
    1fb8:	00d2      	lsls	r2, r2, #3
    1fba:	6899      	ldr	r1, [r3, #8]
    1fbc:	4211      	tst	r1, r2
    1fbe:	d003      	beq.n	1fc8 <SYSCTRL_Handler+0x14>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    1fc0:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb");
    1fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    1fc6:	bf30      	wfi
}
    1fc8:	4770      	bx	lr
    1fca:	46c0      	nop			; (mov r8, r8)
    1fcc:	40000800 	.word	0x40000800

00001fd0 <main>:
{
    1fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1fd2:	4ccc      	ldr	r4, [pc, #816]	; (2304 <STACK_SIZE+0x304>)
	delay_init();
    1fd4:	4bcc      	ldr	r3, [pc, #816]	; (2308 <STACK_SIZE+0x308>)
{
    1fd6:	44a5      	add	sp, r4
    1fd8:	af00      	add	r7, sp, #0
	delay_init();
    1fda:	4798      	blx	r3
	led_blink(1,100,1);				// Blink green once to indicate entry
    1fdc:	2201      	movs	r2, #1
    1fde:	2164      	movs	r1, #100	; 0x64
    1fe0:	0010      	movs	r0, r2
    1fe2:	4eca      	ldr	r6, [pc, #808]	; (230c <STACK_SIZE+0x30c>)
    1fe4:	47b0      	blx	r6
	config->direction  = PORT_PIN_DIR_INPUT;
    1fe6:	2210      	movs	r2, #16
    1fe8:	2308      	movs	r3, #8
    1fea:	18ba      	adds	r2, r7, r2
    1fec:	18d5      	adds	r5, r2, r3
    1fee:	2300      	movs	r3, #0
	config->input_pull = PORT_PIN_PULL_UP;
    1ff0:	2401      	movs	r4, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    1ff2:	702b      	strb	r3, [r5, #0]
	config->powersave  = false;
    1ff4:	70ab      	strb	r3, [r5, #2]
	port_pin_set_config(BUT1_IRQ_IN_PIN, &but_cfg);
    1ff6:	0029      	movs	r1, r5
    1ff8:	2003      	movs	r0, #3
    1ffa:	4bc5      	ldr	r3, [pc, #788]	; (2310 <STACK_SIZE+0x310>)
	config->input_pull = PORT_PIN_PULL_UP;
    1ffc:	706c      	strb	r4, [r5, #1]
    1ffe:	4798      	blx	r3
	port_pin_set_config(BUT2_IRQ_IN_PIN, &but_cfg);
    2000:	0029      	movs	r1, r5
    2002:	4bc3      	ldr	r3, [pc, #780]	; (2310 <STACK_SIZE+0x310>)
    2004:	201f      	movs	r0, #31
    2006:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    2008:	2108      	movs	r1, #8
    200a:	4ac2      	ldr	r2, [pc, #776]	; (2314 <STACK_SIZE+0x314>)
    200c:	6a13      	ldr	r3, [r2, #32]
    200e:	6a12      	ldr	r2, [r2, #32]
    2010:	400b      	ands	r3, r1
	if (b1 && b2) {
    2012:	d000      	beq.n	2016 <STACK_SIZE+0x16>
    2014:	e0db      	b.n	21ce <STACK_SIZE+0x1ce>
    2016:	2a00      	cmp	r2, #0
    2018:	da00      	bge.n	201c <STACK_SIZE+0x1c>
    201a:	e0d8      	b.n	21ce <STACK_SIZE+0x1ce>
		gotoApplication = 0;
    201c:	001c      	movs	r4, r3
		image_name = golden_image_name;		// Make the golden image the target
    201e:	4abe      	ldr	r2, [pc, #760]	; (2318 <STACK_SIZE+0x318>)
    2020:	60ba      	str	r2, [r7, #8]
	sd_mmc_init();
    2022:	4bbe      	ldr	r3, [pc, #760]	; (231c <STACK_SIZE+0x31c>)
    2024:	4798      	blx	r3
	bool sdError = 0;				// Any error in SD card process?
    2026:	2300      	movs	r3, #0
			sdError = 1;
    2028:	2501      	movs	r5, #1
	bool sdError = 0;				// Any error in SD card process?
    202a:	60fb      	str	r3, [r7, #12]
		status = sd_mmc_test_unit_ready(0);
    202c:	4bbc      	ldr	r3, [pc, #752]	; (2320 <STACK_SIZE+0x320>)
    202e:	2000      	movs	r0, #0
    2030:	4798      	blx	r3
		if (status == CTRL_FAIL || status == CTRL_NO_PRESENT) {
    2032:	1e43      	subs	r3, r0, #1
    2034:	b2db      	uxtb	r3, r3
		status = sd_mmc_test_unit_ready(0);
    2036:	0001      	movs	r1, r0
		if (status == CTRL_FAIL || status == CTRL_NO_PRESENT) {
    2038:	2b01      	cmp	r3, #1
    203a:	d800      	bhi.n	203e <STACK_SIZE+0x3e>
    203c:	e0ca      	b.n	21d4 <STACK_SIZE+0x1d4>
    203e:	68fb      	ldr	r3, [r7, #12]
	while (status != CTRL_GOOD) {
    2040:	2800      	cmp	r0, #0
    2042:	d000      	beq.n	2046 <STACK_SIZE+0x46>
    2044:	e0c7      	b.n	21d6 <STACK_SIZE+0x1d6>
	memset(&fs, 0, sizeof(FATFS));	
    2046:	2010      	movs	r0, #16
    2048:	2390      	movs	r3, #144	; 0x90
    204a:	228c      	movs	r2, #140	; 0x8c
    204c:	1838      	adds	r0, r7, r0
    204e:	18c0      	adds	r0, r0, r3
    2050:	0092      	lsls	r2, r2, #2
    2052:	4bb4      	ldr	r3, [pc, #720]	; (2324 <STACK_SIZE+0x324>)
    2054:	4798      	blx	r3
	if (sdError == 0) {
    2056:	68fb      	ldr	r3, [r7, #12]
    2058:	2b00      	cmp	r3, #0
    205a:	d112      	bne.n	2082 <STACK_SIZE+0x82>
		res = f_mount(LUN_ID_SD_MMC_0_MEM, &fs);
    205c:	2210      	movs	r2, #16
    205e:	3390      	adds	r3, #144	; 0x90
    2060:	18ba      	adds	r2, r7, r2
    2062:	18d1      	adds	r1, r2, r3
    2064:	68f8      	ldr	r0, [r7, #12]
    2066:	4bb0      	ldr	r3, [pc, #704]	; (2328 <STACK_SIZE+0x328>)
    2068:	4798      	blx	r3
		res = f_stat(image_name, &fno);
    206a:	2210      	movs	r2, #16
    206c:	2318      	movs	r3, #24
    206e:	18ba      	adds	r2, r7, r2
    2070:	18d1      	adds	r1, r2, r3
    2072:	68b8      	ldr	r0, [r7, #8]
    2074:	4bad      	ldr	r3, [pc, #692]	; (232c <STACK_SIZE+0x32c>)
    2076:	4798      	blx	r3
		if (res == FR_OK) {
    2078:	2800      	cmp	r0, #0
    207a:	d100      	bne.n	207e <STACK_SIZE+0x7e>
    207c:	e0ad      	b.n	21da <STACK_SIZE+0x1da>
		} else sdError = 1;
    207e:	2301      	movs	r3, #1
    2080:	60fb      	str	r3, [r7, #12]
	spi.hw = SD_MMC_SPI;
    2082:	4bab      	ldr	r3, [pc, #684]	; (2330 <STACK_SIZE+0x330>)
	spi_reset(&spi);
    2084:	2210      	movs	r2, #16
	spi.hw = SD_MMC_SPI;
    2086:	667b      	str	r3, [r7, #100]	; 0x64
	spi_reset(&spi);
    2088:	2354      	movs	r3, #84	; 0x54
    208a:	18ba      	adds	r2, r7, r2
    208c:	18d0      	adds	r0, r2, r3
    208e:	4ba9      	ldr	r3, [pc, #676]	; (2334 <STACK_SIZE+0x334>)
    2090:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    2092:	6e7d      	ldr	r5, [r7, #100]	; 0x64

#  if SPI_CALLBACK_MODE == true
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    2094:	4ba8      	ldr	r3, [pc, #672]	; (2338 <STACK_SIZE+0x338>)
    2096:	0028      	movs	r0, r5
    2098:	4798      	blx	r3
    209a:	231f      	movs	r3, #31
    209c:	4018      	ands	r0, r3
    209e:	3b1e      	subs	r3, #30
    20a0:	4083      	lsls	r3, r0
    20a2:	4aa6      	ldr	r2, [pc, #664]	; (233c <STACK_SIZE+0x33c>)
    20a4:	67d3      	str	r3, [r2, #124]	; 0x7c
	SercomSpi *const spi_module = &(module->hw->SPI);
    20a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
	return (spi_module->SYNCBUSY.reg);
    20a8:	69da      	ldr	r2, [r3, #28]
#  endif

	while (spi_is_syncing(module)) {
    20aa:	2a00      	cmp	r2, #0
    20ac:	d1fc      	bne.n	20a8 <STACK_SIZE+0xa8>
		/* Wait until the synchronization is complete */
	}

	/* Disbale interrupt */
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    20ae:	238f      	movs	r3, #143	; 0x8f
	/* Clear interrupt flag */
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;

	/* Disable SPI */
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    20b0:	2002      	movs	r0, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    20b2:	752b      	strb	r3, [r5, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    20b4:	762b      	strb	r3, [r5, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    20b6:	682b      	ldr	r3, [r5, #0]
    20b8:	4383      	bics	r3, r0
    20ba:	602b      	str	r3, [r5, #0]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    20bc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    20be:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    20c2:	4b9f      	ldr	r3, [pc, #636]	; (2340 <STACK_SIZE+0x340>)
    20c4:	4d9f      	ldr	r5, [pc, #636]	; (2344 <STACK_SIZE+0x344>)
    20c6:	701a      	strb	r2, [r3, #0]
	if (gotoApplication) {
    20c8:	2c00      	cmp	r4, #0
    20ca:	d00e      	beq.n	20ea <STACK_SIZE+0xea>
	if (*app_check_address_ptr == 0xFFFFFFFF) {
    20cc:	2480      	movs	r4, #128	; 0x80
    20ce:	0224      	lsls	r4, r4, #8
    20d0:	6823      	ldr	r3, [r4, #0]
    20d2:	3301      	adds	r3, #1
    20d4:	d009      	beq.n	20ea <STACK_SIZE+0xea>
	led_blink(2,100,1);				// Blink green twice to indicate jumping to application
    20d6:	3201      	adds	r2, #1
    20d8:	2164      	movs	r1, #100	; 0x64
    20da:	47b0      	blx	r6
	application_code_entry  = *(uint32_t*)(APP_START_ADDRESS + 4);
    20dc:	4b9a      	ldr	r3, [pc, #616]	; (2348 <STACK_SIZE+0x348>)

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp");
    20de:	6822      	ldr	r2, [r4, #0]
    20e0:	681b      	ldr	r3, [r3, #0]
    20e2:	f382 8808 	msr	MSP, r2
	SCB->VTOR = ((uint32_t) APP_START_ADDRESS & SCB_VTOR_TBLOFF_Msk);
    20e6:	60ac      	str	r4, [r5, #8]
	application_code_entry();
    20e8:	4798      	blx	r3
	led_blink(2,100,0);					// Blink red once to bootloader activated
    20ea:	2200      	movs	r2, #0
    20ec:	2164      	movs	r1, #100	; 0x64
    20ee:	2002      	movs	r0, #2
    20f0:	47b0      	blx	r6
	system_init();						// clocks and I/O pins
    20f2:	4b96      	ldr	r3, [pc, #600]	; (234c <STACK_SIZE+0x34c>)
    20f4:	4798      	blx	r3
	delay_init();						// delay clock update
    20f6:	4b84      	ldr	r3, [pc, #528]	; (2308 <STACK_SIZE+0x308>)
    20f8:	4798      	blx	r3
	cpu_irq_enable();
    20fa:	2301      	movs	r3, #1
    20fc:	4a90      	ldr	r2, [pc, #576]	; (2340 <STACK_SIZE+0x340>)
    20fe:	7013      	strb	r3, [r2, #0]
    2100:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2104:	b662      	cpsie	i
{

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    2106:	4b92      	ldr	r3, [pc, #584]	; (2350 <STACK_SIZE+0x350>)
    2108:	699b      	ldr	r3, [r3, #24]

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;
    210a:	051b      	lsls	r3, r3, #20
    210c:	0f1b      	lsrs	r3, r3, #28
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    210e:	2b02      	cmp	r3, #2
    2110:	d806      	bhi.n	2120 <STACK_SIZE+0x120>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    2112:	4b90      	ldr	r3, [pc, #576]	; (2354 <STACK_SIZE+0x354>)
    2114:	685a      	ldr	r2, [r3, #4]
    2116:	23c0      	movs	r3, #192	; 0xc0
    2118:	009b      	lsls	r3, r3, #2
    211a:	4313      	orrs	r3, r2
    211c:	4a8d      	ldr	r2, [pc, #564]	; (2354 <STACK_SIZE+0x354>)
    211e:	6053      	str	r3, [r2, #4]
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
			PM->SLEEP.reg = sleep_mode;
			break;

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    2120:	2204      	movs	r2, #4
    2122:	692b      	ldr	r3, [r5, #16]
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    2124:	2110      	movs	r1, #16
    2126:	4313      	orrs	r3, r2
    2128:	612b      	str	r3, [r5, #16]
	rtc_instance.hw = RTC;
    212a:	4a8b      	ldr	r2, [pc, #556]	; (2358 <STACK_SIZE+0x358>)
    212c:	4b8b      	ldr	r3, [pc, #556]	; (235c <STACK_SIZE+0x35c>)
    212e:	1879      	adds	r1, r7, r1
    2130:	601a      	str	r2, [r3, #0]
	rtc_instance.clock_24h = 1;
    2132:	2201      	movs	r2, #1
    2134:	711a      	strb	r2, [r3, #4]
	rtc_instance.year_init_value = 2000;
    2136:	23fa      	movs	r3, #250	; 0xfa
    2138:	4a88      	ldr	r2, [pc, #544]	; (235c <STACK_SIZE+0x35c>)
    213a:	00db      	lsls	r3, r3, #3
    213c:	80d3      	strh	r3, [r2, #6]
    213e:	2230      	movs	r2, #48	; 0x30
    2140:	188c      	adds	r4, r1, r2
	config->year_init_value     = 2000;
    2142:	80e3      	strh	r3, [r4, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
		config->alarm[i].time = time;
    2144:	81e3      	strh	r3, [r4, #14]
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    2146:	2306      	movs	r3, #6
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    2148:	22a0      	movs	r2, #160	; 0xa0
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    214a:	7423      	strb	r3, [r4, #16]
	config_rtc_calendar.clock_24h = true;
    214c:	3b05      	subs	r3, #5
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    214e:	0112      	lsls	r2, r2, #4
    2150:	7123      	strb	r3, [r4, #4]
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    2152:	2320      	movs	r3, #32
    2154:	2602      	movs	r6, #2
    2156:	8022      	strh	r2, [r4, #0]
		config->alarm[i].time = time;
    2158:	2201      	movs	r2, #1
    215a:	18fb      	adds	r3, r7, r3
	config->clear_on_match      = false;
    215c:	2500      	movs	r5, #0
		config->alarm[i].time = time;
    215e:	7322      	strb	r2, [r4, #12]
    2160:	701e      	strb	r6, [r3, #0]
    2162:	2201      	movs	r2, #1
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    2164:	2310      	movs	r3, #16
    2166:	7362      	strb	r2, [r4, #13]
    2168:	18c9      	adds	r1, r1, r3
    216a:	7225      	strb	r5, [r4, #8]
    216c:	7265      	strb	r5, [r4, #9]
    216e:	72a5      	strb	r5, [r4, #10]
    2170:	72e5      	strb	r5, [r4, #11]
    2172:	2004      	movs	r0, #4
    2174:	4b7a      	ldr	r3, [pc, #488]	; (2360 <STACK_SIZE+0x360>)
	config->clear_on_match      = false;
    2176:	70a5      	strb	r5, [r4, #2]
	config->continuously_update = false;
    2178:	70e5      	strb	r5, [r4, #3]
    217a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    217c:	2004      	movs	r0, #4
    217e:	4b79      	ldr	r3, [pc, #484]	; (2364 <STACK_SIZE+0x364>)
    2180:	4798      	blx	r3
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    2182:	0022      	movs	r2, r4
    2184:	4974      	ldr	r1, [pc, #464]	; (2358 <STACK_SIZE+0x358>)
    2186:	4875      	ldr	r0, [pc, #468]	; (235c <STACK_SIZE+0x35c>)
    2188:	4b77      	ldr	r3, [pc, #476]	; (2368 <STACK_SIZE+0x368>)
    218a:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    218c:	4873      	ldr	r0, [pc, #460]	; (235c <STACK_SIZE+0x35c>)
    218e:	4b77      	ldr	r3, [pc, #476]	; (236c <STACK_SIZE+0x36c>)
    2190:	4798      	blx	r3

	conf->prescaler      = BOD_PRESCALE_DIV_2;
	conf->mode           = BOD_MODE_CONTINUOUS;
	conf->action         = BOD_ACTION_RESET;
	conf->level          = 0x27;
	conf->hysteresis     = true;
    2192:	2301      	movs	r3, #1
    2194:	71a3      	strb	r3, [r4, #6]
	config_bod33.action = BOD_ACTION_INTERRUPT;
    2196:	2310      	movs	r3, #16
    2198:	7123      	strb	r3, [r4, #4]
	config_bod33.mode = BOD_MODE_SAMPLED;
    219a:	33f0      	adds	r3, #240	; 0xf0
    219c:	8063      	strh	r3, [r4, #2]
	config_bod33.level = 40;						// Set to 2.8V
    219e:	3bd8      	subs	r3, #216	; 0xd8
    21a0:	7163      	strb	r3, [r4, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    21a2:	0028      	movs	r0, r5
    21a4:	4b72      	ldr	r3, [pc, #456]	; (2370 <STACK_SIZE+0x370>)
    21a6:	0021      	movs	r1, r4
	conf->prescaler      = BOD_PRESCALE_DIV_2;
    21a8:	8025      	strh	r5, [r4, #0]
	config_bod33.run_in_standby = 0;
    21aa:	71e5      	strb	r5, [r4, #7]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    21ac:	4798      	blx	r3
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
	switch (bod_id) {
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    21ae:	4b71      	ldr	r3, [pc, #452]	; (2374 <STACK_SIZE+0x374>)
    21b0:	0005      	movs	r5, r0
    21b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    21b4:	4332      	orrs	r2, r6
    21b6:	635a      	str	r2, [r3, #52]	; 0x34
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    21b8:	2280      	movs	r2, #128	; 0x80
    21ba:	00d2      	lsls	r2, r2, #3
    21bc:	605a      	str	r2, [r3, #4]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    21be:	4b6e      	ldr	r3, [pc, #440]	; (2378 <STACK_SIZE+0x378>)
    21c0:	601e      	str	r6, [r3, #0]
	if (code1 != STATUS_OK) return code1;
    21c2:	2800      	cmp	r0, #0
    21c4:	d100      	bne.n	21c8 <STACK_SIZE+0x1c8>
    21c6:	e0fb      	b.n	23c0 <STACK_SIZE+0x3c0>
	if (code != STATUS_OK) fatal_error(2,"BOD module init failed.\n");
    21c8:	496c      	ldr	r1, [pc, #432]	; (237c <STACK_SIZE+0x37c>)
    21ca:	0030      	movs	r0, r6
    21cc:	e009      	b.n	21e2 <STACK_SIZE+0x1e2>
	char* image_name = new_image_name;
    21ce:	4b6c      	ldr	r3, [pc, #432]	; (2380 <STACK_SIZE+0x380>)
    21d0:	60bb      	str	r3, [r7, #8]
    21d2:	e726      	b.n	2022 <STACK_SIZE+0x22>
			sdError = 1;
    21d4:	002b      	movs	r3, r5
    21d6:	60fb      	str	r3, [r7, #12]
    21d8:	e728      	b.n	202c <STACK_SIZE+0x2c>
			gotoApplication = 0;
    21da:	68fc      	ldr	r4, [r7, #12]
    21dc:	e751      	b.n	2082 <STACK_SIZE+0x82>
	if (code != STATUS_OK) fatal_error(4,"NVM module init failed.\n");
    21de:	4969      	ldr	r1, [pc, #420]	; (2384 <STACK_SIZE+0x384>)
	if (res != FR_OK) fatal_error(4,"File open failed.\n");
    21e0:	2004      	movs	r0, #4
    21e2:	4b69      	ldr	r3, [pc, #420]	; (2388 <STACK_SIZE+0x388>)
    21e4:	4798      	blx	r3
	sd_mmc_init();
    21e6:	4b4d      	ldr	r3, [pc, #308]	; (231c <STACK_SIZE+0x31c>)
    21e8:	4798      	blx	r3
	res = f_open(&file_object,(const char *)image_name, FA_READ);
    21ea:	2201      	movs	r2, #1
    21ec:	68b9      	ldr	r1, [r7, #8]
    21ee:	0020      	movs	r0, r4
    21f0:	4b66      	ldr	r3, [pc, #408]	; (238c <STACK_SIZE+0x38c>)
    21f2:	4798      	blx	r3
	if (res != FR_OK) fatal_error(4,"File open failed.\n");
    21f4:	2800      	cmp	r0, #0
    21f6:	d001      	beq.n	21fc <STACK_SIZE+0x1fc>
    21f8:	4965      	ldr	r1, [pc, #404]	; (2390 <STACK_SIZE+0x390>)
    21fa:	e7f1      	b.n	21e0 <STACK_SIZE+0x1e0>
	uint32_t curr_prog_addr = APP_START_ADDRESS;
    21fc:	2680      	movs	r6, #128	; 0x80
	UINT iRead = 0;
    21fe:	68fb      	ldr	r3, [r7, #12]
	uint32_t curr_prog_addr = APP_START_ADDRESS;
    2200:	0236      	lsls	r6, r6, #8
	UINT iRead = 0;
    2202:	61fb      	str	r3, [r7, #28]
		if(file_object.fsize > MAX_CODE_SIZE) fatal_error(6,"File exceeds max size of %d bytes.\n", MAX_CODE_SIZE);
    2204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2206:	001a      	movs	r2, r3
    2208:	2380      	movs	r3, #128	; 0x80
    220a:	025b      	lsls	r3, r3, #9
    220c:	429a      	cmp	r2, r3
    220e:	d904      	bls.n	221a <STACK_SIZE+0x21a>
    2210:	001a      	movs	r2, r3
    2212:	2006      	movs	r0, #6
    2214:	495f      	ldr	r1, [pc, #380]	; (2394 <STACK_SIZE+0x394>)
		if(res != FR_OK) fatal_error(7,"File read error after %d bytes\n", iRead);
    2216:	4b5c      	ldr	r3, [pc, #368]	; (2388 <STACK_SIZE+0x388>)
    2218:	4798      	blx	r3
		res = f_read(&file_object, (void *) buff, MAX_BUF_SIZE, &iRead);
    221a:	2210      	movs	r2, #16
    221c:	230c      	movs	r3, #12
    221e:	18ba      	adds	r2, r7, r2
    2220:	2410      	movs	r4, #16
    2222:	18d3      	adds	r3, r2, r3
    2224:	2030      	movs	r0, #48	; 0x30
    2226:	2280      	movs	r2, #128	; 0x80
    2228:	193c      	adds	r4, r7, r4
    222a:	1820      	adds	r0, r4, r0
    222c:	0092      	lsls	r2, r2, #2
    222e:	495a      	ldr	r1, [pc, #360]	; (2398 <STACK_SIZE+0x398>)
    2230:	4c5a      	ldr	r4, [pc, #360]	; (239c <STACK_SIZE+0x39c>)
    2232:	47a0      	blx	r4
		if(res != FR_OK) fatal_error(7,"File read error after %d bytes\n", iRead);
    2234:	2800      	cmp	r0, #0
    2236:	d003      	beq.n	2240 <STACK_SIZE+0x240>
    2238:	69fa      	ldr	r2, [r7, #28]
    223a:	4959      	ldr	r1, [pc, #356]	; (23a0 <STACK_SIZE+0x3a0>)
    223c:	2007      	movs	r0, #7
    223e:	e7ea      	b.n	2216 <STACK_SIZE+0x216>
	uint32_t offset = 0;
    2240:	0004      	movs	r4, r0
		program_memory(curr_prog_addr, buff, iRead);
    2242:	69fb      	ldr	r3, [r7, #28]
    2244:	603b      	str	r3, [r7, #0]
    2246:	683b      	ldr	r3, [r7, #0]
    2248:	1935      	adds	r5, r6, r4
    224a:	1b1b      	subs	r3, r3, r4
    224c:	607b      	str	r3, [r7, #4]
	while (len >= NVMCTRL_PAGE_SIZE) {
    224e:	2b3f      	cmp	r3, #63	; 0x3f
    2250:	d829      	bhi.n	22a6 <STACK_SIZE+0x2a6>
	if (len > 0) {
    2252:	2b00      	cmp	r3, #0
    2254:	d01a      	beq.n	228c <STACK_SIZE+0x28c>
		if ((address & 0xFF) == 0) {
    2256:	b2eb      	uxtb	r3, r5
    2258:	2b00      	cmp	r3, #0
    225a:	d109      	bne.n	2270 <STACK_SIZE+0x270>
				code = nvm_erase_row(address);
    225c:	4b51      	ldr	r3, [pc, #324]	; (23a4 <STACK_SIZE+0x3a4>)
    225e:	0028      	movs	r0, r5
    2260:	4798      	blx	r3
    2262:	75f8      	strb	r0, [r7, #23]
			} while (code == STATUS_BUSY);
    2264:	7dfb      	ldrb	r3, [r7, #23]
    2266:	2b05      	cmp	r3, #5
    2268:	d0f8      	beq.n	225c <STACK_SIZE+0x25c>
			if (code != STATUS_OK) fatal_error(11,"NVM erase row error\n");
    226a:	7dfb      	ldrb	r3, [r7, #23]
    226c:	2b00      	cmp	r3, #0
    226e:	d127      	bne.n	22c0 <STACK_SIZE+0x2c0>
			code = nvm_write_buffer(address, buffer + offset, len);
    2270:	4849      	ldr	r0, [pc, #292]	; (2398 <STACK_SIZE+0x398>)
    2272:	1904      	adds	r4, r0, r4
    2274:	4b4c      	ldr	r3, [pc, #304]	; (23a8 <STACK_SIZE+0x3a8>)
    2276:	88ba      	ldrh	r2, [r7, #4]
    2278:	0021      	movs	r1, r4
    227a:	0028      	movs	r0, r5
    227c:	4798      	blx	r3
    227e:	75f8      	strb	r0, [r7, #23]
		} while (code == STATUS_BUSY);
    2280:	7dfb      	ldrb	r3, [r7, #23]
    2282:	2b05      	cmp	r3, #5
    2284:	d0f6      	beq.n	2274 <STACK_SIZE+0x274>
		if (code != STATUS_OK) fatal_error(12,"NVM write buffer error\n");
    2286:	7dfb      	ldrb	r3, [r7, #23]
    2288:	2b00      	cmp	r3, #0
    228a:	d12b      	bne.n	22e4 <STACK_SIZE+0x2e4>
		curr_prog_addr += iRead;
    228c:	69fb      	ldr	r3, [r7, #28]
		len += iRead;
    228e:	68fa      	ldr	r2, [r7, #12]
		curr_prog_addr += iRead;
    2290:	18f6      	adds	r6, r6, r3
		len += iRead;
    2292:	18d2      	adds	r2, r2, r3
    2294:	60fa      	str	r2, [r7, #12]
		if(len > MAX_CODE_SIZE)
    2296:	0011      	movs	r1, r2
    2298:	2280      	movs	r2, #128	; 0x80
    229a:	0252      	lsls	r2, r2, #9
    229c:	4291      	cmp	r1, r2
    229e:	d926      	bls.n	22ee <STACK_SIZE+0x2ee>
		fatal_error(8,"Too many bytes\n");
    22a0:	4942      	ldr	r1, [pc, #264]	; (23ac <STACK_SIZE+0x3ac>)
    22a2:	2008      	movs	r0, #8
    22a4:	e79d      	b.n	21e2 <STACK_SIZE+0x1e2>
		if ((address & 0xFF) == 0) {
    22a6:	23ff      	movs	r3, #255	; 0xff
    22a8:	421d      	tst	r5, r3
    22aa:	d10c      	bne.n	22c6 <STACK_SIZE+0x2c6>
				code = nvm_erase_row(address);
    22ac:	4b3d      	ldr	r3, [pc, #244]	; (23a4 <STACK_SIZE+0x3a4>)
    22ae:	0028      	movs	r0, r5
    22b0:	4798      	blx	r3
    22b2:	75f8      	strb	r0, [r7, #23]
			} while (code == STATUS_BUSY);
    22b4:	7dfb      	ldrb	r3, [r7, #23]
    22b6:	2b05      	cmp	r3, #5
    22b8:	d0f8      	beq.n	22ac <STACK_SIZE+0x2ac>
			if (code != STATUS_OK) fatal_error(11,"NVM erase row error\n");
    22ba:	7dfb      	ldrb	r3, [r7, #23]
    22bc:	2b00      	cmp	r3, #0
    22be:	d002      	beq.n	22c6 <STACK_SIZE+0x2c6>
    22c0:	493b      	ldr	r1, [pc, #236]	; (23b0 <STACK_SIZE+0x3b0>)
    22c2:	200b      	movs	r0, #11
    22c4:	e78d      	b.n	21e2 <STACK_SIZE+0x1e2>
			code = nvm_write_buffer(address, buffer + offset, NVMCTRL_PAGE_SIZE);
    22c6:	4b34      	ldr	r3, [pc, #208]	; (2398 <STACK_SIZE+0x398>)
    22c8:	191b      	adds	r3, r3, r4
    22ca:	607b      	str	r3, [r7, #4]
    22cc:	4b36      	ldr	r3, [pc, #216]	; (23a8 <STACK_SIZE+0x3a8>)
    22ce:	2240      	movs	r2, #64	; 0x40
    22d0:	6879      	ldr	r1, [r7, #4]
    22d2:	0028      	movs	r0, r5
    22d4:	4798      	blx	r3
    22d6:	75f8      	strb	r0, [r7, #23]
		} while (code == STATUS_BUSY);
    22d8:	7dfb      	ldrb	r3, [r7, #23]
    22da:	2b05      	cmp	r3, #5
    22dc:	d0f6      	beq.n	22cc <STACK_SIZE+0x2cc>
		if (code != STATUS_OK) fatal_error(12,"NVM write buffer error\n");
    22de:	7dfb      	ldrb	r3, [r7, #23]
    22e0:	2b00      	cmp	r3, #0
    22e2:	d002      	beq.n	22ea <STACK_SIZE+0x2ea>
    22e4:	4933      	ldr	r1, [pc, #204]	; (23b4 <STACK_SIZE+0x3b4>)
    22e6:	200c      	movs	r0, #12
    22e8:	e77b      	b.n	21e2 <STACK_SIZE+0x1e2>
		offset += NVMCTRL_PAGE_SIZE;
    22ea:	3440      	adds	r4, #64	; 0x40
    22ec:	e7ab      	b.n	2246 <STACK_SIZE+0x246>
	} while (iRead != 0);
    22ee:	2b00      	cmp	r3, #0
    22f0:	d188      	bne.n	2204 <STACK_SIZE+0x204>
	res = f_unlink((const char *)image_name);
    22f2:	68b8      	ldr	r0, [r7, #8]
    22f4:	4b30      	ldr	r3, [pc, #192]	; (23b8 <STACK_SIZE+0x3b8>)
    22f6:	4798      	blx	r3
	if (res != FR_OK) fatal_error(9,"Unable to delete file.\n");
    22f8:	2800      	cmp	r0, #0
    22fa:	d100      	bne.n	22fe <STACK_SIZE+0x2fe>
    22fc:	e0ac      	b.n	2458 <STACK_SIZE+0x458>
    22fe:	492f      	ldr	r1, [pc, #188]	; (23bc <STACK_SIZE+0x3bc>)
    2300:	2009      	movs	r0, #9
    2302:	e76e      	b.n	21e2 <STACK_SIZE+0x1e2>
    2304:	fffffd2c 	.word	0xfffffd2c
    2308:	00002f8d 	.word	0x00002f8d
    230c:	00001ef9 	.word	0x00001ef9
    2310:	00003935 	.word	0x00003935
    2314:	41004400 	.word	0x41004400
    2318:	00004a58 	.word	0x00004a58
    231c:	0000026d 	.word	0x0000026d
    2320:	000008c1 	.word	0x000008c1
    2324:	00004991 	.word	0x00004991
    2328:	00001af5 	.word	0x00001af5
    232c:	00001dcd 	.word	0x00001dcd
    2330:	42000c00 	.word	0x42000c00
    2334:	00002841 	.word	0x00002841
    2338:	00002e35 	.word	0x00002e35
    233c:	e000e104 	.word	0xe000e104
    2340:	20000009 	.word	0x20000009
    2344:	e000ed00 	.word	0xe000ed00
    2348:	00008004 	.word	0x00008004
    234c:	000046f1 	.word	0x000046f1
    2350:	41002000 	.word	0x41002000
    2354:	41004000 	.word	0x41004000
    2358:	40001400 	.word	0x40001400
    235c:	20000310 	.word	0x20000310
    2360:	000045ed 	.word	0x000045ed
    2364:	00004565 	.word	0x00004565
    2368:	00000b95 	.word	0x00000b95
    236c:	00000a09 	.word	0x00000a09
    2370:	00002f21 	.word	0x00002f21
    2374:	40000800 	.word	0x40000800
    2378:	e000e100 	.word	0xe000e100
    237c:	00004b2f 	.word	0x00004b2f
    2380:	00004a4b 	.word	0x00004a4b
    2384:	00004a6a 	.word	0x00004a6a
    2388:	00001f89 	.word	0x00001f89
    238c:	00001b19 	.word	0x00001b19
    2390:	00004a83 	.word	0x00004a83
    2394:	00004a96 	.word	0x00004a96
    2398:	2000005a 	.word	0x2000005a
    239c:	00001c69 	.word	0x00001c69
    23a0:	00004aba 	.word	0x00004aba
    23a4:	000038d5 	.word	0x000038d5
    23a8:	00003839 	.word	0x00003839
    23ac:	00004b07 	.word	0x00004b07
    23b0:	00004ada 	.word	0x00004ada
    23b4:	00004aef 	.word	0x00004aef
    23b8:	00001e19 	.word	0x00001e19
    23bc:	00004b17 	.word	0x00004b17
	extint_chan_get_config_defaults(&ext_conf);
    23c0:	0020      	movs	r0, r4
    23c2:	4b26      	ldr	r3, [pc, #152]	; (245c <STACK_SIZE+0x45c>)
    23c4:	4798      	blx	r3
	ext_conf.filter_input_signal = true;
    23c6:	2301      	movs	r3, #1
    23c8:	72a3      	strb	r3, [r4, #10]
	ext_conf.wake_if_sleeping = true;
    23ca:	2301      	movs	r3, #1
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    23cc:	72e6      	strb	r6, [r4, #11]
	ext_conf.wake_if_sleeping = true;
    23ce:	7263      	strb	r3, [r4, #9]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    23d0:	2603      	movs	r6, #3
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    23d2:	2301      	movs	r3, #1
	extint_chan_set_config(3, &ext_conf);
    23d4:	0030      	movs	r0, r6
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    23d6:	7223      	strb	r3, [r4, #8]
	extint_chan_set_config(3, &ext_conf);
    23d8:	0021      	movs	r1, r4
    23da:	4b21      	ldr	r3, [pc, #132]	; (2460 <STACK_SIZE+0x460>)
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    23dc:	643e      	str	r6, [r7, #64]	; 0x40
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    23de:	6065      	str	r5, [r4, #4]
	extint_chan_set_config(3, &ext_conf);
    23e0:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    23e2:	0029      	movs	r1, r5
    23e4:	0030      	movs	r0, r6
    23e6:	4e1f      	ldr	r6, [pc, #124]	; (2464 <STACK_SIZE+0x464>)
    23e8:	47b0      	blx	r6
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    23ea:	231f      	movs	r3, #31
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    23ec:	6078      	str	r0, [r7, #4]
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    23ee:	643b      	str	r3, [r7, #64]	; 0x40
	extint_chan_set_config(11, &ext_conf);
    23f0:	0021      	movs	r1, r4
    23f2:	4b1b      	ldr	r3, [pc, #108]	; (2460 <STACK_SIZE+0x460>)
    23f4:	200b      	movs	r0, #11
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    23f6:	6065      	str	r5, [r4, #4]
	extint_chan_set_config(11, &ext_conf);
    23f8:	4798      	blx	r3
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    23fa:	0029      	movs	r1, r5
    23fc:	200b      	movs	r0, #11
    23fe:	47b0      	blx	r6
	if (code1 != STATUS_OK) return code1;
    2400:	687b      	ldr	r3, [r7, #4]
    2402:	2b00      	cmp	r3, #0
    2404:	d101      	bne.n	240a <STACK_SIZE+0x40a>
	else if (code2 != STATUS_OK) return code2;
    2406:	2800      	cmp	r0, #0
    2408:	d002      	beq.n	2410 <STACK_SIZE+0x410>
	if (code != STATUS_OK) fatal_error(3,"EXTINT module init failed.\n");
    240a:	4917      	ldr	r1, [pc, #92]	; (2468 <STACK_SIZE+0x468>)
    240c:	2003      	movs	r0, #3
    240e:	e6e8      	b.n	21e2 <STACK_SIZE+0x1e2>
	Assert(config);

	/* Write the default configuration for the NVM configuration */
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
	config->manual_page_write = true;
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2410:	4b16      	ldr	r3, [pc, #88]	; (246c <STACK_SIZE+0x46c>)
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    2412:	7020      	strb	r0, [r4, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2414:	685b      	ldr	r3, [r3, #4]
	config->disable_cache     = false;
    2416:	70e0      	strb	r0, [r4, #3]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    2418:	06db      	lsls	r3, r3, #27
    241a:	0f1b      	lsrs	r3, r3, #28
    241c:	70a3      	strb	r3, [r4, #2]
#if (SAMC20) || (SAMC21)
	config->disable_rww_cache = false;
#endif
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    241e:	7120      	strb	r0, [r4, #4]
	config.manual_page_write = false;
    2420:	7060      	strb	r0, [r4, #1]
	enum status_code code = nvm_set_config(&config);
    2422:	4b13      	ldr	r3, [pc, #76]	; (2470 <STACK_SIZE+0x470>)
    2424:	0020      	movs	r0, r4
    2426:	4798      	blx	r3
    2428:	1e05      	subs	r5, r0, #0
	if (code != STATUS_OK) fatal_error(4,"NVM module init failed.\n");
    242a:	d000      	beq.n	242e <STACK_SIZE+0x42e>
    242c:	e6d7      	b.n	21de <STACK_SIZE+0x1de>
	rtc_calendar_get_time(&rtc_instance, &time);
    242e:	2310      	movs	r3, #16
    2430:	18fa      	adds	r2, r7, r3
    2432:	18d1      	adds	r1, r2, r3
    2434:	480f      	ldr	r0, [pc, #60]	; (2474 <STACK_SIZE+0x474>)
    2436:	4b10      	ldr	r3, [pc, #64]	; (2478 <STACK_SIZE+0x478>)
    2438:	4798      	blx	r3
	if (sdError) {
    243a:	68fb      	ldr	r3, [r7, #12]
    243c:	2b00      	cmp	r3, #0
    243e:	d100      	bne.n	2442 <STACK_SIZE+0x442>
    2440:	e6d1      	b.n	21e6 <STACK_SIZE+0x1e6>
		led_blink(1,100,0);		// Blink once to indicate nothing to do
    2442:	002a      	movs	r2, r5
    2444:	2164      	movs	r1, #100	; 0x64
    2446:	2001      	movs	r0, #1
    2448:	4b0c      	ldr	r3, [pc, #48]	; (247c <STACK_SIZE+0x47c>)
    244a:	4798      	blx	r3
		delay_ms(100);
    244c:	2064      	movs	r0, #100	; 0x64
    244e:	4b0c      	ldr	r3, [pc, #48]	; (2480 <STACK_SIZE+0x480>)
    2450:	4798      	blx	r3
  __ASM volatile ("dsb");
    2452:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2456:	bf30      	wfi
    2458:	4b0a      	ldr	r3, [pc, #40]	; (2484 <STACK_SIZE+0x484>)
    245a:	4798      	blx	r3
    245c:	0000251d 	.word	0x0000251d
    2460:	00002531 	.word	0x00002531
    2464:	00002ec1 	.word	0x00002ec1
    2468:	00004b48 	.word	0x00004b48
    246c:	41004000 	.word	0x41004000
    2470:	0000370d 	.word	0x0000370d
    2474:	20000310 	.word	0x20000310
    2478:	00000b09 	.word	0x00000b09
    247c:	00001ef9 	.word	0x00001ef9
    2480:	00002ff9 	.word	0x00002ff9
    2484:	00001ee1 	.word	0x00001ee1

00002488 <extint_is_syncing>:
static inline bool extint_is_syncing(void)
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    2488:	4b01      	ldr	r3, [pc, #4]	; (2490 <extint_is_syncing+0x8>)
    248a:	7858      	ldrb	r0, [r3, #1]
    248c:	09c0      	lsrs	r0, r0, #7
			return true;
		}
	}
	return false;
}
    248e:	4770      	bx	lr
    2490:	40001800 	.word	0x40001800

00002494 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2494:	2302      	movs	r3, #2
{
    2496:	b510      	push	{r4, lr}
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    2498:	4a04      	ldr	r2, [pc, #16]	; (24ac <_extint_enable+0x18>)
    249a:	7811      	ldrb	r1, [r2, #0]
    249c:	430b      	orrs	r3, r1
    249e:	7013      	strb	r3, [r2, #0]
	}

	while (extint_is_syncing()) {
    24a0:	4b03      	ldr	r3, [pc, #12]	; (24b0 <_extint_enable+0x1c>)
    24a2:	4798      	blx	r3
    24a4:	2800      	cmp	r0, #0
    24a6:	d1fb      	bne.n	24a0 <_extint_enable+0xc>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    24a8:	bd10      	pop	{r4, pc}
    24aa:	46c0      	nop			; (mov r8, r8)
    24ac:	40001800 	.word	0x40001800
    24b0:	00002489 	.word	0x00002489

000024b4 <_system_extint_init>:
    24b4:	2340      	movs	r3, #64	; 0x40
{
    24b6:	b507      	push	{r0, r1, r2, lr}
    24b8:	4a10      	ldr	r2, [pc, #64]	; (24fc <_system_extint_init+0x48>)
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    24ba:	2005      	movs	r0, #5
    24bc:	6991      	ldr	r1, [r2, #24]
    24be:	430b      	orrs	r3, r1
    24c0:	6193      	str	r3, [r2, #24]
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    24c2:	2302      	movs	r3, #2
    24c4:	a901      	add	r1, sp, #4
    24c6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    24c8:	4b0d      	ldr	r3, [pc, #52]	; (2500 <_system_extint_init+0x4c>)
    24ca:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
    24cc:	4b0d      	ldr	r3, [pc, #52]	; (2504 <_system_extint_init+0x50>)
    24ce:	2005      	movs	r0, #5
    24d0:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    24d2:	2301      	movs	r3, #1
    24d4:	4a0c      	ldr	r2, [pc, #48]	; (2508 <_system_extint_init+0x54>)
    24d6:	7811      	ldrb	r1, [r2, #0]
    24d8:	430b      	orrs	r3, r1
    24da:	7013      	strb	r3, [r2, #0]
	while (extint_is_syncing()) {
    24dc:	4b0b      	ldr	r3, [pc, #44]	; (250c <_system_extint_init+0x58>)
    24de:	4798      	blx	r3
    24e0:	2800      	cmp	r0, #0
    24e2:	d1fb      	bne.n	24dc <_system_extint_init+0x28>
		_extint_dev.callbacks[j] = NULL;
    24e4:	0002      	movs	r2, r0
    24e6:	4b0a      	ldr	r3, [pc, #40]	; (2510 <_system_extint_init+0x5c>)
    24e8:	501a      	str	r2, [r3, r0]
    24ea:	3004      	adds	r0, #4
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    24ec:	2840      	cmp	r0, #64	; 0x40
    24ee:	d1fb      	bne.n	24e8 <_system_extint_init+0x34>
    24f0:	2210      	movs	r2, #16
    24f2:	4b08      	ldr	r3, [pc, #32]	; (2514 <_system_extint_init+0x60>)
    24f4:	601a      	str	r2, [r3, #0]
	_extint_enable();
    24f6:	4b08      	ldr	r3, [pc, #32]	; (2518 <_system_extint_init+0x64>)
    24f8:	4798      	blx	r3
}
    24fa:	bd07      	pop	{r0, r1, r2, pc}
    24fc:	40000400 	.word	0x40000400
    2500:	000045ed 	.word	0x000045ed
    2504:	00004565 	.word	0x00004565
    2508:	40001800 	.word	0x40001800
    250c:	00002489 	.word	0x00002489
    2510:	20000324 	.word	0x20000324
    2514:	e000e100 	.word	0xe000e100
    2518:	00002495 	.word	0x00002495

0000251c <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    251c:	2300      	movs	r3, #0
	config->gpio_pin_mux        = 0;
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    251e:	2201      	movs	r2, #1
	config->gpio_pin            = 0;
    2520:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
    2522:	6043      	str	r3, [r0, #4]
	config->wake_if_sleeping    = true;
	config->filter_input_signal = false;
    2524:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    2526:	3302      	adds	r3, #2
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    2528:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
    252a:	7242      	strb	r2, [r0, #9]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    252c:	72c3      	strb	r3, [r0, #11]
}
    252e:	4770      	bx	lr

00002530 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    2530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2532:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2534:	2600      	movs	r6, #0
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
    2536:	7923      	ldrb	r3, [r4, #4]
    2538:	a901      	add	r1, sp, #4
    253a:	704e      	strb	r6, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
    253c:	70ce      	strb	r6, [r1, #3]
    253e:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2540:	7a23      	ldrb	r3, [r4, #8]
{
    2542:	0005      	movs	r5, r0
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    2544:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    2546:	7820      	ldrb	r0, [r4, #0]
    2548:	4b13      	ldr	r3, [pc, #76]	; (2598 <extint_chan_set_config+0x68>)
    254a:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
    254c:	0033      	movs	r3, r6
	if (eic_index < EIC_INST_NUM) {
    254e:	2d1f      	cmp	r5, #31
    2550:	d800      	bhi.n	2554 <extint_chan_set_config+0x24>
		return eics[eic_index];
    2552:	4b12      	ldr	r3, [pc, #72]	; (259c <extint_chan_set_config+0x6c>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
    2554:	2107      	movs	r1, #7

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    2556:	7aa2      	ldrb	r2, [r4, #10]
	uint32_t config_pos = (4 * (channel % 8));
    2558:	4029      	ands	r1, r5
    255a:	0089      	lsls	r1, r1, #2
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    255c:	7ae6      	ldrb	r6, [r4, #11]
	if (config->filter_input_signal) {
    255e:	2a00      	cmp	r2, #0
    2560:	d001      	beq.n	2566 <extint_chan_set_config+0x36>
    2562:	2208      	movs	r2, #8
    2564:	4316      	orrs	r6, r2
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2566:	270f      	movs	r7, #15
			(new_config << config_pos);
    2568:	408e      	lsls	r6, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    256a:	408f      	lsls	r7, r1
			(new_config << config_pos);
    256c:	0031      	movs	r1, r6
    256e:	08ea      	lsrs	r2, r5, #3
    2570:	0092      	lsls	r2, r2, #2
    2572:	189a      	adds	r2, r3, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    2574:	6990      	ldr	r0, [r2, #24]
    2576:	43b8      	bics	r0, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    2578:	4301      	orrs	r1, r0
		= (EIC_module->CONFIG[channel / 8].reg &
    257a:	6191      	str	r1, [r2, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    257c:	7a61      	ldrb	r1, [r4, #9]
    257e:	2201      	movs	r2, #1
    2580:	2900      	cmp	r1, #0
    2582:	d004      	beq.n	258e <extint_chan_set_config+0x5e>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    2584:	40aa      	lsls	r2, r5
    2586:	6959      	ldr	r1, [r3, #20]
    2588:	430a      	orrs	r2, r1
    258a:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    258c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    258e:	40aa      	lsls	r2, r5
    2590:	6959      	ldr	r1, [r3, #20]
    2592:	4391      	bics	r1, r2
    2594:	6159      	str	r1, [r3, #20]
}
    2596:	e7f9      	b.n	258c <extint_chan_set_config+0x5c>
    2598:	000046c1 	.word	0x000046c1
    259c:	40001800 	.word	0x40001800

000025a0 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    25a0:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    25a2:	0849      	lsrs	r1, r1, #1
{
    25a4:	0004      	movs	r4, r0
    25a6:	2300      	movs	r3, #0
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    25a8:	2040      	movs	r0, #64	; 0x40
	if (baudrate > (external_clock / 2)) {
    25aa:	42a1      	cmp	r1, r4
    25ac:	d201      	bcs.n	25b2 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    25ae:	bd10      	pop	{r4, pc}
		baud_calculated++;
    25b0:	0003      	movs	r3, r0
    25b2:	1c58      	adds	r0, r3, #1
		clock_value = clock_value - baudrate;
    25b4:	1b09      	subs	r1, r1, r4
		baud_calculated++;
    25b6:	b280      	uxth	r0, r0
	while (clock_value >= baudrate) {
    25b8:	428c      	cmp	r4, r1
    25ba:	d9f9      	bls.n	25b0 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    25bc:	2040      	movs	r0, #64	; 0x40
	if (baud_calculated > 0xFF) {
    25be:	2bff      	cmp	r3, #255	; 0xff
    25c0:	d8f5      	bhi.n	25ae <_sercom_get_sync_baud_val+0xe>
		*baudvalue = baud_calculated;
    25c2:	8013      	strh	r3, [r2, #0]
		return STATUS_OK;
    25c4:	2000      	movs	r0, #0
    25c6:	e7f2      	b.n	25ae <_sercom_get_sync_baud_val+0xe>

000025c8 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    25c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    25ca:	4c0d      	ldr	r4, [pc, #52]	; (2600 <sercom_set_gclk_generator+0x38>)
{
    25cc:	0005      	movs	r5, r0
	if (!_sercom_config.generator_is_set || force_change) {
    25ce:	7823      	ldrb	r3, [r4, #0]
    25d0:	2b00      	cmp	r3, #0
    25d2:	d001      	beq.n	25d8 <sercom_set_gclk_generator+0x10>
    25d4:	2900      	cmp	r1, #0
    25d6:	d00c      	beq.n	25f2 <sercom_set_gclk_generator+0x2a>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
		gclk_chan_conf.source_generator = generator_source;
    25d8:	a901      	add	r1, sp, #4
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    25da:	2013      	movs	r0, #19
    25dc:	4b09      	ldr	r3, [pc, #36]	; (2604 <sercom_set_gclk_generator+0x3c>)
		gclk_chan_conf.source_generator = generator_source;
    25de:	700d      	strb	r5, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    25e0:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    25e2:	2013      	movs	r0, #19
    25e4:	4b08      	ldr	r3, [pc, #32]	; (2608 <sercom_set_gclk_generator+0x40>)
    25e6:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;
    25e8:	2301      	movs	r3, #1

		return STATUS_OK;
    25ea:	2000      	movs	r0, #0
		_sercom_config.generator_source = generator_source;
    25ec:	7065      	strb	r5, [r4, #1]
		_sercom_config.generator_is_set = true;
    25ee:	7023      	strb	r3, [r4, #0]
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
}
    25f0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	} else if (generator_source == _sercom_config.generator_source) {
    25f2:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
    25f4:	0008      	movs	r0, r1
	} else if (generator_source == _sercom_config.generator_source) {
    25f6:	42ab      	cmp	r3, r5
    25f8:	d0fa      	beq.n	25f0 <sercom_set_gclk_generator+0x28>
	return STATUS_ERR_ALREADY_INITIALIZED;
    25fa:	201d      	movs	r0, #29
    25fc:	e7f8      	b.n	25f0 <sercom_set_gclk_generator+0x28>
    25fe:	46c0      	nop			; (mov r8, r8)
    2600:	2000025a 	.word	0x2000025a
    2604:	000045ed 	.word	0x000045ed
    2608:	00004565 	.word	0x00004565

0000260c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    260c:	4a39      	ldr	r2, [pc, #228]	; (26f4 <_sercom_get_default_pad+0xe8>)
{
    260e:	0003      	movs	r3, r0
    2610:	b500      	push	{lr}
    2612:	0008      	movs	r0, r1
	switch ((uintptr_t)sercom_module) {
    2614:	4293      	cmp	r3, r2
    2616:	d033      	beq.n	2680 <_sercom_get_default_pad+0x74>
    2618:	d807      	bhi.n	262a <_sercom_get_default_pad+0x1e>
    261a:	4a37      	ldr	r2, [pc, #220]	; (26f8 <_sercom_get_default_pad+0xec>)
    261c:	4293      	cmp	r3, r2
    261e:	d014      	beq.n	264a <_sercom_get_default_pad+0x3e>
    2620:	4a36      	ldr	r2, [pc, #216]	; (26fc <_sercom_get_default_pad+0xf0>)
    2622:	4293      	cmp	r3, r2
    2624:	d01f      	beq.n	2666 <_sercom_get_default_pad+0x5a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    2626:	2300      	movs	r3, #0
    2628:	e017      	b.n	265a <_sercom_get_default_pad+0x4e>
	switch ((uintptr_t)sercom_module) {
    262a:	4a35      	ldr	r2, [pc, #212]	; (2700 <_sercom_get_default_pad+0xf4>)
    262c:	4293      	cmp	r3, r2
    262e:	d03a      	beq.n	26a6 <_sercom_get_default_pad+0x9a>
    2630:	4a34      	ldr	r2, [pc, #208]	; (2704 <_sercom_get_default_pad+0xf8>)
    2632:	4293      	cmp	r3, r2
    2634:	d044      	beq.n	26c0 <_sercom_get_default_pad+0xb4>
    2636:	4a34      	ldr	r2, [pc, #208]	; (2708 <_sercom_get_default_pad+0xfc>)
    2638:	4293      	cmp	r3, r2
    263a:	d1f4      	bne.n	2626 <_sercom_get_default_pad+0x1a>
	return 0;
    263c:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    263e:	2903      	cmp	r1, #3
    2640:	d80b      	bhi.n	265a <_sercom_get_default_pad+0x4e>
    2642:	f002 f8cb 	bl	47dc <__gnu_thumb1_case_uqi>
    2646:	2a50      	.short	0x2a50
    2648:	2e2c      	.short	0x2e2c
	return 0;
    264a:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    264c:	2903      	cmp	r1, #3
    264e:	d804      	bhi.n	265a <_sercom_get_default_pad+0x4e>
    2650:	f002 f8c4 	bl	47dc <__gnu_thumb1_case_uqi>
    2654:	07050243 	.word	0x07050243
    2658:	4b2c      	ldr	r3, [pc, #176]	; (270c <_sercom_get_default_pad+0x100>)
}
    265a:	0018      	movs	r0, r3
    265c:	bd00      	pop	{pc}
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    265e:	4b2c      	ldr	r3, [pc, #176]	; (2710 <_sercom_get_default_pad+0x104>)
    2660:	e7fb      	b.n	265a <_sercom_get_default_pad+0x4e>
    2662:	4b2c      	ldr	r3, [pc, #176]	; (2714 <_sercom_get_default_pad+0x108>)
    2664:	e7f9      	b.n	265a <_sercom_get_default_pad+0x4e>
	return 0;
    2666:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2668:	2903      	cmp	r1, #3
    266a:	d8f6      	bhi.n	265a <_sercom_get_default_pad+0x4e>
    266c:	f002 f8b6 	bl	47dc <__gnu_thumb1_case_uqi>
    2670:	06040237 	.word	0x06040237
    2674:	4b28      	ldr	r3, [pc, #160]	; (2718 <_sercom_get_default_pad+0x10c>)
    2676:	e7f0      	b.n	265a <_sercom_get_default_pad+0x4e>
    2678:	4b28      	ldr	r3, [pc, #160]	; (271c <_sercom_get_default_pad+0x110>)
    267a:	e7ee      	b.n	265a <_sercom_get_default_pad+0x4e>
    267c:	4b28      	ldr	r3, [pc, #160]	; (2720 <_sercom_get_default_pad+0x114>)
    267e:	e7ec      	b.n	265a <_sercom_get_default_pad+0x4e>
	return 0;
    2680:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2682:	2903      	cmp	r1, #3
    2684:	d8e9      	bhi.n	265a <_sercom_get_default_pad+0x4e>
    2686:	f002 f8a9 	bl	47dc <__gnu_thumb1_case_uqi>
    268a:	022c      	.short	0x022c
    268c:	0604      	.short	0x0604
    268e:	4b25      	ldr	r3, [pc, #148]	; (2724 <_sercom_get_default_pad+0x118>)
    2690:	e7e3      	b.n	265a <_sercom_get_default_pad+0x4e>
    2692:	4b25      	ldr	r3, [pc, #148]	; (2728 <_sercom_get_default_pad+0x11c>)
    2694:	e7e1      	b.n	265a <_sercom_get_default_pad+0x4e>
    2696:	4b25      	ldr	r3, [pc, #148]	; (272c <_sercom_get_default_pad+0x120>)
    2698:	e7df      	b.n	265a <_sercom_get_default_pad+0x4e>
    269a:	4b25      	ldr	r3, [pc, #148]	; (2730 <_sercom_get_default_pad+0x124>)
    269c:	e7dd      	b.n	265a <_sercom_get_default_pad+0x4e>
    269e:	4b25      	ldr	r3, [pc, #148]	; (2734 <_sercom_get_default_pad+0x128>)
    26a0:	e7db      	b.n	265a <_sercom_get_default_pad+0x4e>
    26a2:	4b25      	ldr	r3, [pc, #148]	; (2738 <_sercom_get_default_pad+0x12c>)
    26a4:	e7d9      	b.n	265a <_sercom_get_default_pad+0x4e>
	return 0;
    26a6:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    26a8:	2903      	cmp	r1, #3
    26aa:	d8d6      	bhi.n	265a <_sercom_get_default_pad+0x4e>
    26ac:	f002 f896 	bl	47dc <__gnu_thumb1_case_uqi>
    26b0:	0604021d 	.word	0x0604021d
    26b4:	4b21      	ldr	r3, [pc, #132]	; (273c <_sercom_get_default_pad+0x130>)
    26b6:	e7d0      	b.n	265a <_sercom_get_default_pad+0x4e>
    26b8:	4b21      	ldr	r3, [pc, #132]	; (2740 <_sercom_get_default_pad+0x134>)
    26ba:	e7ce      	b.n	265a <_sercom_get_default_pad+0x4e>
    26bc:	4b21      	ldr	r3, [pc, #132]	; (2744 <_sercom_get_default_pad+0x138>)
    26be:	e7cc      	b.n	265a <_sercom_get_default_pad+0x4e>
	return 0;
    26c0:	2300      	movs	r3, #0
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    26c2:	2903      	cmp	r1, #3
    26c4:	d8c9      	bhi.n	265a <_sercom_get_default_pad+0x4e>
    26c6:	f002 f889 	bl	47dc <__gnu_thumb1_case_uqi>
    26ca:	0212      	.short	0x0212
    26cc:	0604      	.short	0x0604
    26ce:	4b1e      	ldr	r3, [pc, #120]	; (2748 <_sercom_get_default_pad+0x13c>)
    26d0:	e7c3      	b.n	265a <_sercom_get_default_pad+0x4e>
    26d2:	4b1e      	ldr	r3, [pc, #120]	; (274c <_sercom_get_default_pad+0x140>)
    26d4:	e7c1      	b.n	265a <_sercom_get_default_pad+0x4e>
    26d6:	4b1e      	ldr	r3, [pc, #120]	; (2750 <_sercom_get_default_pad+0x144>)
    26d8:	e7bf      	b.n	265a <_sercom_get_default_pad+0x4e>
    26da:	4b1e      	ldr	r3, [pc, #120]	; (2754 <_sercom_get_default_pad+0x148>)
    26dc:	e7bd      	b.n	265a <_sercom_get_default_pad+0x4e>
    26de:	2303      	movs	r3, #3
    26e0:	e7bb      	b.n	265a <_sercom_get_default_pad+0x4e>
    26e2:	4b1d      	ldr	r3, [pc, #116]	; (2758 <_sercom_get_default_pad+0x14c>)
    26e4:	e7b9      	b.n	265a <_sercom_get_default_pad+0x4e>
    26e6:	4b1d      	ldr	r3, [pc, #116]	; (275c <_sercom_get_default_pad+0x150>)
    26e8:	e7b7      	b.n	265a <_sercom_get_default_pad+0x4e>
    26ea:	4b1d      	ldr	r3, [pc, #116]	; (2760 <_sercom_get_default_pad+0x154>)
    26ec:	e7b5      	b.n	265a <_sercom_get_default_pad+0x4e>
    26ee:	4b1d      	ldr	r3, [pc, #116]	; (2764 <_sercom_get_default_pad+0x158>)
    26f0:	e7b3      	b.n	265a <_sercom_get_default_pad+0x4e>
    26f2:	46c0      	nop			; (mov r8, r8)
    26f4:	42001000 	.word	0x42001000
    26f8:	42000800 	.word	0x42000800
    26fc:	42000c00 	.word	0x42000c00
    2700:	42001800 	.word	0x42001800
    2704:	42001c00 	.word	0x42001c00
    2708:	42001400 	.word	0x42001400
    270c:	00050003 	.word	0x00050003
    2710:	00060003 	.word	0x00060003
    2714:	00070003 	.word	0x00070003
    2718:	00010003 	.word	0x00010003
    271c:	001e0003 	.word	0x001e0003
    2720:	001f0003 	.word	0x001f0003
    2724:	00090003 	.word	0x00090003
    2728:	000a0003 	.word	0x000a0003
    272c:	000b0003 	.word	0x000b0003
    2730:	00110003 	.word	0x00110003
    2734:	00120003 	.word	0x00120003
    2738:	00130003 	.word	0x00130003
    273c:	000d0003 	.word	0x000d0003
    2740:	000e0003 	.word	0x000e0003
    2744:	000f0003 	.word	0x000f0003
    2748:	00170003 	.word	0x00170003
    274c:	00180003 	.word	0x00180003
    2750:	00190003 	.word	0x00190003
    2754:	00040003 	.word	0x00040003
    2758:	00080003 	.word	0x00080003
    275c:	00100003 	.word	0x00100003
    2760:	000c0003 	.word	0x000c0003
    2764:	00160003 	.word	0x00160003

00002768 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    2768:	b570      	push	{r4, r5, r6, lr}
    276a:	b086      	sub	sp, #24
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    276c:	4669      	mov	r1, sp
    276e:	4b09      	ldr	r3, [pc, #36]	; (2794 <_sercom_get_sercom_inst_index+0x2c>)
    2770:	466a      	mov	r2, sp
    2772:	cb70      	ldmia	r3!, {r4, r5, r6}
    2774:	c170      	stmia	r1!, {r4, r5, r6}
    2776:	cb70      	ldmia	r3!, {r4, r5, r6}
    2778:	c170      	stmia	r1!, {r4, r5, r6}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    277a:	2300      	movs	r3, #0
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    277c:	0099      	lsls	r1, r3, #2
    277e:	5851      	ldr	r1, [r2, r1]
    2780:	4281      	cmp	r1, r0
    2782:	d102      	bne.n	278a <_sercom_get_sercom_inst_index+0x22>
			return i;
    2784:	b2d8      	uxtb	r0, r3
	}

	/* Invalid data given */
	Assert(false);
	return 0;
}
    2786:	b006      	add	sp, #24
    2788:	bd70      	pop	{r4, r5, r6, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    278a:	3301      	adds	r3, #1
    278c:	2b06      	cmp	r3, #6
    278e:	d1f5      	bne.n	277c <_sercom_get_sercom_inst_index+0x14>
	return 0;
    2790:	2000      	movs	r0, #0
    2792:	e7f8      	b.n	2786 <_sercom_get_sercom_inst_index+0x1e>
    2794:	00004b64 	.word	0x00004b64

00002798 <port_pin_set_output_level>:

	if (port_index < PORT_INST_NUM) {
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    2798:	2200      	movs	r2, #0
{
    279a:	b510      	push	{r4, lr}
	uint8_t group_index = (gpio_pin / 32);
    279c:	0943      	lsrs	r3, r0, #5
	if (port_index < PORT_INST_NUM) {
    279e:	09c4      	lsrs	r4, r0, #7
    27a0:	4294      	cmp	r4, r2
    27a2:	d102      	bne.n	27aa <port_pin_set_output_level+0x12>
		return &(ports[port_index]->Group[group_index]);
    27a4:	01da      	lsls	r2, r3, #7
    27a6:	4b06      	ldr	r3, [pc, #24]	; (27c0 <port_pin_set_output_level+0x28>)
    27a8:	18d2      	adds	r2, r2, r3
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    27aa:	231f      	movs	r3, #31
    27ac:	4018      	ands	r0, r3
    27ae:	3b1e      	subs	r3, #30
    27b0:	4083      	lsls	r3, r0
	if (level) {
    27b2:	2900      	cmp	r1, #0
    27b4:	d001      	beq.n	27ba <port_pin_set_output_level+0x22>
		port_base->OUTSET.reg = pin_mask;
    27b6:	6193      	str	r3, [r2, #24]
	}
}
    27b8:	bd10      	pop	{r4, pc}
		port_base->OUTCLR.reg = pin_mask;
    27ba:	6153      	str	r3, [r2, #20]
}
    27bc:	e7fc      	b.n	27b8 <port_pin_set_output_level+0x20>
    27be:	46c0      	nop			; (mov r8, r8)
    27c0:	41004400 	.word	0x41004400

000027c4 <spi_disable>:
{
    27c4:	b570      	push	{r4, r5, r6, lr}
	SercomSpi *const spi_module = &(module->hw->SPI);
    27c6:	6804      	ldr	r4, [r0, #0]
{
    27c8:	0005      	movs	r5, r0
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    27ca:	4b0a      	ldr	r3, [pc, #40]	; (27f4 <spi_disable+0x30>)
    27cc:	0020      	movs	r0, r4
    27ce:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    27d0:	231f      	movs	r3, #31
    27d2:	4018      	ands	r0, r3
    27d4:	3b1e      	subs	r3, #30
    27d6:	4083      	lsls	r3, r0
    27d8:	4a07      	ldr	r2, [pc, #28]	; (27f8 <spi_disable+0x34>)
    27da:	67d3      	str	r3, [r2, #124]	; 0x7c
	SercomSpi *const spi_module = &(module->hw->SPI);
    27dc:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    27de:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    27e0:	2b00      	cmp	r3, #0
    27e2:	d1fc      	bne.n	27de <spi_disable+0x1a>
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    27e4:	2202      	movs	r2, #2
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    27e6:	338f      	adds	r3, #143	; 0x8f
    27e8:	7523      	strb	r3, [r4, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    27ea:	7623      	strb	r3, [r4, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    27ec:	6823      	ldr	r3, [r4, #0]
    27ee:	4393      	bics	r3, r2
    27f0:	6023      	str	r3, [r4, #0]
}
    27f2:	bd70      	pop	{r4, r5, r6, pc}
    27f4:	00002e35 	.word	0x00002e35
    27f8:	e000e104 	.word	0xe000e104

000027fc <spi_write>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    27fc:	6803      	ldr	r3, [r0, #0]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    27fe:	2005      	movs	r0, #5
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2800:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    2802:	07d2      	lsls	r2, r2, #31
    2804:	d503      	bpl.n	280e <spi_write+0x12>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;

	return STATUS_OK;
    2806:	2000      	movs	r0, #0
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    2808:	05c9      	lsls	r1, r1, #23
    280a:	0dc9      	lsrs	r1, r1, #23
    280c:	6299      	str	r1, [r3, #40]	; 0x28
}
    280e:	4770      	bx	lr

00002810 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    2810:	b530      	push	{r4, r5, lr}
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2812:	2404      	movs	r4, #4
	SercomSpi *const spi_module = &(module->hw->SPI);
    2814:	6803      	ldr	r3, [r0, #0]
		/* No data has been received, return */
		return STATUS_ERR_IO;
    2816:	2210      	movs	r2, #16
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2818:	7e1d      	ldrb	r5, [r3, #24]
	if (!spi_is_ready_to_read(module)) {
    281a:	4225      	tst	r5, r4
    281c:	d00c      	beq.n	2838 <spi_read+0x28>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    281e:	8b5d      	ldrh	r5, [r3, #26]
	enum status_code retval = STATUS_OK;
    2820:	2200      	movs	r2, #0
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2822:	4225      	tst	r5, r4
    2824:	d001      	beq.n	282a <spi_read+0x1a>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2826:	835c      	strh	r4, [r3, #26]
		retval = STATUS_ERR_OVERFLOW;
    2828:	321e      	adds	r2, #30
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    282a:	7980      	ldrb	r0, [r0, #6]
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    282e:	2801      	cmp	r0, #1
    2830:	d104      	bne.n	283c <spi_read+0x2c>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2832:	05db      	lsls	r3, r3, #23
    2834:	0ddb      	lsrs	r3, r3, #23
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    2836:	800b      	strh	r3, [r1, #0]
	}

	return retval;
}
    2838:	0010      	movs	r0, r2
    283a:	bd30      	pop	{r4, r5, pc}
		*rx_data = (uint8_t)spi_module->DATA.reg;
    283c:	b2db      	uxtb	r3, r3
    283e:	e7fa      	b.n	2836 <spi_read+0x26>

00002840 <spi_reset>:
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(
		struct spi_module *const module)
{
    2840:	b570      	push	{r4, r5, r6, lr}
    2842:	0004      	movs	r4, r0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Disable the module */
	spi_disable(module);
    2844:	4b05      	ldr	r3, [pc, #20]	; (285c <spi_reset+0x1c>)
	SercomSpi *const spi_module = &(module->hw->SPI);
    2846:	6805      	ldr	r5, [r0, #0]
	spi_disable(module);
    2848:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    284a:	6822      	ldr	r2, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    284c:	69d3      	ldr	r3, [r2, #28]

	while (spi_is_syncing(module)) {
    284e:	2b00      	cmp	r3, #0
    2850:	d1fc      	bne.n	284c <spi_reset+0xc>
		/* Wait until the synchronization is complete */
	}

	/* Software reset the module */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_SWRST;
    2852:	682a      	ldr	r2, [r5, #0]
    2854:	3301      	adds	r3, #1
    2856:	4313      	orrs	r3, r2
    2858:	602b      	str	r3, [r5, #0]
}
    285a:	bd70      	pop	{r4, r5, r6, pc}
    285c:	000027c5 	.word	0x000027c5

00002860 <spi_set_baudrate>:
 * \retval STATUS_OK               If the configuration was written
 */
enum status_code spi_set_baudrate(
		struct spi_module *const module,
		uint32_t baudrate)
{
    2860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	Assert(module);
	Assert(baudrate);
	Assert(module->hw);

	/* Value to write to BAUD register */
	uint16_t baud = 0;
    2862:	466b      	mov	r3, sp
    2864:	1d9d      	adds	r5, r3, #6
    2866:	2300      	movs	r3, #0
{
    2868:	0004      	movs	r4, r0
	uint16_t baud = 0;
    286a:	802b      	strh	r3, [r5, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Disable the module */
	spi_disable(module);
    286c:	4b19      	ldr	r3, [pc, #100]	; (28d4 <spi_set_baudrate+0x74>)
	SercomSpi *const spi_module = &(module->hw->SPI);
    286e:	6806      	ldr	r6, [r0, #0]
{
    2870:	000f      	movs	r7, r1
	spi_disable(module);
    2872:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2874:	6820      	ldr	r0, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    2876:	69c3      	ldr	r3, [r0, #28]

	while (spi_is_syncing(module)) {
    2878:	2b00      	cmp	r3, #0
    287a:	d1fc      	bne.n	2876 <spi_set_baudrate+0x16>
		/* Wait until the synchronization is complete */
	}

	/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    287c:	4b16      	ldr	r3, [pc, #88]	; (28d8 <spi_set_baudrate+0x78>)
    287e:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2880:	3014      	adds	r0, #20
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2882:	4b16      	ldr	r3, [pc, #88]	; (28dc <spi_set_baudrate+0x7c>)
    2884:	b2c0      	uxtb	r0, r0
    2886:	4798      	blx	r3

	/* Get baud value, based on baudrate and the internal clock frequency */
	enum status_code error_code = _sercom_get_sync_baud_val(
    2888:	002a      	movs	r2, r5
	uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    288a:	0001      	movs	r1, r0
	enum status_code error_code = _sercom_get_sync_baud_val(
    288c:	4b14      	ldr	r3, [pc, #80]	; (28e0 <spi_set_baudrate+0x80>)
    288e:	0038      	movs	r0, r7
    2890:	4798      	blx	r3
    2892:	1e07      	subs	r7, r0, #0
			baudrate, internal_clock, &baud);

	if (error_code != STATUS_OK) {
    2894:	d11c      	bne.n	28d0 <spi_set_baudrate+0x70>
		/* Baud rate calculation error, return status code */
		return STATUS_ERR_INVALID_ARG;
	}

	spi_module->BAUD.reg = (uint8_t)baud;
    2896:	782b      	ldrb	r3, [r5, #0]
    2898:	7333      	strb	r3, [r6, #12]
	SercomSpi *const spi_module = &(module->hw->SPI);
    289a:	6825      	ldr	r5, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    289c:	69eb      	ldr	r3, [r5, #28]

	while (spi_is_syncing(module)) {
    289e:	2b00      	cmp	r3, #0
    28a0:	d1fc      	bne.n	289c <spi_set_baudrate+0x3c>
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    28a2:	4b10      	ldr	r3, [pc, #64]	; (28e4 <spi_set_baudrate+0x84>)
    28a4:	0028      	movs	r0, r5
    28a6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    28a8:	231f      	movs	r3, #31
    28aa:	4018      	ands	r0, r3
    28ac:	3b1e      	subs	r3, #30
    28ae:	4083      	lsls	r3, r0
    28b0:	4a0d      	ldr	r2, [pc, #52]	; (28e8 <spi_set_baudrate+0x88>)
    28b2:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    28b4:	6822      	ldr	r2, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    28b6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    28b8:	2b00      	cmp	r3, #0
    28ba:	d1fc      	bne.n	28b6 <spi_set_baudrate+0x56>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    28bc:	682a      	ldr	r2, [r5, #0]
    28be:	3302      	adds	r3, #2
    28c0:	4313      	orrs	r3, r2
    28c2:	602b      	str	r3, [r5, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    28c4:	6822      	ldr	r2, [r4, #0]
	return (spi_module->SYNCBUSY.reg);
    28c6:	69d3      	ldr	r3, [r2, #28]
	}

	/* Enable the module */
	spi_enable(module);

	while (spi_is_syncing(module)) {
    28c8:	2b00      	cmp	r3, #0
    28ca:	d1fc      	bne.n	28c6 <spi_set_baudrate+0x66>
		/* Wait until the synchronization is complete */
	}

	return STATUS_OK;
}
    28cc:	0038      	movs	r0, r7
    28ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    28d0:	2717      	movs	r7, #23
    28d2:	e7fb      	b.n	28cc <spi_set_baudrate+0x6c>
    28d4:	000027c5 	.word	0x000027c5
    28d8:	00002769 	.word	0x00002769
    28dc:	00004609 	.word	0x00004609
    28e0:	000025a1 	.word	0x000025a1
    28e4:	00002e35 	.word	0x00002e35
    28e8:	e000e100 	.word	0xe000e100

000028ec <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    28ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    28ee:	0005      	movs	r5, r0
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    28f0:	6029      	str	r1, [r5, #0]
{
    28f2:	0014      	movs	r4, r2

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    28f4:	680a      	ldr	r2, [r1, #0]
{
    28f6:	b089      	sub	sp, #36	; 0x24
    28f8:	000f      	movs	r7, r1
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    28fa:	231c      	movs	r3, #28
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    28fc:	0792      	lsls	r2, r2, #30
    28fe:	d500      	bpl.n	2902 <spi_init+0x16>
    2900:	e0ba      	b.n	2a78 <spi_init+0x18c>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    2902:	2601      	movs	r6, #1
    2904:	680b      	ldr	r3, [r1, #0]
    2906:	4033      	ands	r3, r6
    2908:	9301      	str	r3, [sp, #4]
    290a:	9a01      	ldr	r2, [sp, #4]
		return STATUS_BUSY;
    290c:	2305      	movs	r3, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    290e:	2a00      	cmp	r2, #0
    2910:	d000      	beq.n	2914 <spi_init+0x28>
    2912:	e0b1      	b.n	2a78 <spi_init+0x18c>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2914:	0008      	movs	r0, r1
    2916:	4b5a      	ldr	r3, [pc, #360]	; (2a80 <spi_init+0x194>)
    2918:	4798      	blx	r3
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    291a:	1c81      	adds	r1, r0, #2
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    291c:	408e      	lsls	r6, r1
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    291e:	4b59      	ldr	r3, [pc, #356]	; (2a84 <spi_init+0x198>)
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2920:	3014      	adds	r0, #20
    2922:	6a1a      	ldr	r2, [r3, #32]
    2924:	4316      	orrs	r6, r2
    2926:	621e      	str	r6, [r3, #32]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    2928:	1d63      	adds	r3, r4, #5
    292a:	7fdb      	ldrb	r3, [r3, #31]
    292c:	aa02      	add	r2, sp, #8
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    292e:	b2c6      	uxtb	r6, r0
	gclk_chan_conf.source_generator = config->generator_source;
    2930:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2932:	0011      	movs	r1, r2
    2934:	0030      	movs	r0, r6
    2936:	4b54      	ldr	r3, [pc, #336]	; (2a88 <spi_init+0x19c>)
    2938:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    293a:	0030      	movs	r0, r6
    293c:	4b53      	ldr	r3, [pc, #332]	; (2a8c <spi_init+0x1a0>)
    293e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2940:	1d63      	adds	r3, r4, #5
    2942:	7fd8      	ldrb	r0, [r3, #31]
    2944:	9901      	ldr	r1, [sp, #4]
    2946:	4b52      	ldr	r3, [pc, #328]	; (2a90 <spi_init+0x1a4>)
    2948:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    294a:	7823      	ldrb	r3, [r4, #0]
    294c:	2b01      	cmp	r3, #1
    294e:	d103      	bne.n	2958 <spi_init+0x6c>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    2950:	683a      	ldr	r2, [r7, #0]
    2952:	330b      	adds	r3, #11
    2954:	4313      	orrs	r3, r2
    2956:	603b      	str	r3, [r7, #0]
    2958:	002b      	movs	r3, r5
    295a:	002a      	movs	r2, r5
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
		module->callback[i]        = NULL;
    295c:	2600      	movs	r6, #0
    295e:	330c      	adds	r3, #12
    2960:	3228      	adds	r2, #40	; 0x28
    2962:	c340      	stmia	r3!, {r6}
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    2964:	4293      	cmp	r3, r2
    2966:	d1fc      	bne.n	2962 <spi_init+0x76>
	}
	module->tx_buffer_ptr              = NULL;
	module->rx_buffer_ptr              = NULL;
	module->remaining_tx_buffer_length = 0x0000;
	module->remaining_rx_buffer_length = 0x0000;
	module->registered_callback        = 0x00;
    2968:	002b      	movs	r3, r5
    296a:	3336      	adds	r3, #54	; 0x36
	module->remaining_tx_buffer_length = 0x0000;
    296c:	86ae      	strh	r6, [r5, #52]	; 0x34
	module->tx_buffer_ptr              = NULL;
    296e:	62ee      	str	r6, [r5, #44]	; 0x2c
	module->remaining_rx_buffer_length = 0x0000;
    2970:	862e      	strh	r6, [r5, #48]	; 0x30
	module->rx_buffer_ptr              = NULL;
    2972:	62ae      	str	r6, [r5, #40]	; 0x28
	module->registered_callback        = 0x00;
    2974:	701e      	strb	r6, [r3, #0]
	module->enabled_callback           = 0x00;
    2976:	705e      	strb	r6, [r3, #1]
	module->status                     = STATUS_OK;
    2978:	709e      	strb	r6, [r3, #2]
	module->dir                        = SPI_DIRECTION_IDLE;
    297a:	2303      	movs	r3, #3
	module->locked                     = false;
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    297c:	6828      	ldr	r0, [r5, #0]
	module->dir                        = SPI_DIRECTION_IDLE;
    297e:	726b      	strb	r3, [r5, #9]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2980:	4b3f      	ldr	r3, [pc, #252]	; (2a80 <spi_init+0x194>)
	module->locked                     = false;
    2982:	712e      	strb	r6, [r5, #4]
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    2984:	4798      	blx	r3
    2986:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    2988:	4b42      	ldr	r3, [pc, #264]	; (2a94 <spi_init+0x1a8>)
    298a:	4943      	ldr	r1, [pc, #268]	; (2a98 <spi_init+0x1ac>)
    298c:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    298e:	4b43      	ldr	r3, [pc, #268]	; (2a9c <spi_init+0x1b0>)
    2990:	00bf      	lsls	r7, r7, #2
    2992:	50fd      	str	r5, [r7, r3]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2994:	2380      	movs	r3, #128	; 0x80
    2996:	aa02      	add	r2, sp, #8
    2998:	7113      	strb	r3, [r2, #4]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    299a:	2301      	movs	r3, #1
    299c:	7193      	strb	r3, [r2, #6]
	if(config->mode == SPI_MODE_SLAVE) {
    299e:	7823      	ldrb	r3, [r4, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    29a0:	682f      	ldr	r7, [r5, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    29a2:	7156      	strb	r6, [r2, #5]
	config->powersave    = false;
    29a4:	71d6      	strb	r6, [r2, #7]
	if(config->mode == SPI_MODE_SLAVE) {
    29a6:	2b00      	cmp	r3, #0
    29a8:	d100      	bne.n	29ac <spi_init+0xc0>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    29aa:	7196      	strb	r6, [r2, #6]
	uint32_t pad_pinmuxes[] = {
    29ac:	2600      	movs	r6, #0
    29ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    29b0:	9304      	str	r3, [sp, #16]
    29b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    29b4:	9305      	str	r3, [sp, #20]
    29b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    29b8:	9306      	str	r3, [sp, #24]
    29ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
    29bc:	9307      	str	r3, [sp, #28]
		uint32_t current_pinmux = pad_pinmuxes[pad];
    29be:	00b3      	lsls	r3, r6, #2
    29c0:	aa04      	add	r2, sp, #16
    29c2:	5898      	ldr	r0, [r3, r2]
    29c4:	b2f1      	uxtb	r1, r6
		if (current_pinmux == PINMUX_DEFAULT) {
    29c6:	2800      	cmp	r0, #0
    29c8:	d102      	bne.n	29d0 <spi_init+0xe4>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    29ca:	0038      	movs	r0, r7
    29cc:	4b34      	ldr	r3, [pc, #208]	; (2aa0 <spi_init+0x1b4>)
    29ce:	4798      	blx	r3
		if (current_pinmux != PINMUX_UNUSED) {
    29d0:	1c43      	adds	r3, r0, #1
    29d2:	d006      	beq.n	29e2 <spi_init+0xf6>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    29d4:	ab02      	add	r3, sp, #8
    29d6:	7118      	strb	r0, [r3, #4]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    29d8:	0c00      	lsrs	r0, r0, #16
    29da:	b2c0      	uxtb	r0, r0
    29dc:	a903      	add	r1, sp, #12
    29de:	4b31      	ldr	r3, [pc, #196]	; (2aa4 <spi_init+0x1b8>)
    29e0:	4798      	blx	r3
    29e2:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    29e4:	2e04      	cmp	r6, #4
    29e6:	d1ea      	bne.n	29be <spi_init+0xd2>
	module->mode             = config->mode;
    29e8:	7823      	ldrb	r3, [r4, #0]
    29ea:	716b      	strb	r3, [r5, #5]
	module->character_size   = config->character_size;
    29ec:	7c23      	ldrb	r3, [r4, #16]
    29ee:	71ab      	strb	r3, [r5, #6]
	module->receiver_enabled = config->receiver_enable;
    29f0:	7ca3      	ldrb	r3, [r4, #18]
    29f2:	71eb      	strb	r3, [r5, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    29f4:	7d23      	ldrb	r3, [r4, #20]
    29f6:	722b      	strb	r3, [r5, #8]
	uint16_t baud = 0;
    29f8:	ab02      	add	r3, sp, #8
    29fa:	1c9e      	adds	r6, r3, #2
    29fc:	2300      	movs	r3, #0
    29fe:	8033      	strh	r3, [r6, #0]
	if (config->mode == SPI_MODE_MASTER) {
    2a00:	7823      	ldrb	r3, [r4, #0]
    2a02:	2b01      	cmp	r3, #1
    2a04:	d110      	bne.n	2a28 <spi_init+0x13c>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2a06:	4b1e      	ldr	r3, [pc, #120]	; (2a80 <spi_init+0x194>)
    2a08:	6828      	ldr	r0, [r5, #0]
    2a0a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2a0c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2a0e:	4b26      	ldr	r3, [pc, #152]	; (2aa8 <spi_init+0x1bc>)
    2a10:	b2c0      	uxtb	r0, r0
    2a12:	4798      	blx	r3
		enum status_code error_code = _sercom_get_sync_baud_val(
    2a14:	4b25      	ldr	r3, [pc, #148]	; (2aac <spi_init+0x1c0>)
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2a16:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    2a18:	0032      	movs	r2, r6
    2a1a:	69a0      	ldr	r0, [r4, #24]
    2a1c:	4798      	blx	r3
			return STATUS_ERR_INVALID_ARG;
    2a1e:	2317      	movs	r3, #23
		if (error_code != STATUS_OK) {
    2a20:	2800      	cmp	r0, #0
    2a22:	d129      	bne.n	2a78 <spi_init+0x18c>
		spi_module->BAUD.reg = (uint8_t)baud;
    2a24:	7833      	ldrb	r3, [r6, #0]
    2a26:	733b      	strb	r3, [r7, #12]
	ctrla |= config->transfer_mode;
    2a28:	68a3      	ldr	r3, [r4, #8]
    2a2a:	6862      	ldr	r2, [r4, #4]
	if (config->run_in_standby || system_is_debugger_present()) {
    2a2c:	7c61      	ldrb	r1, [r4, #17]
	ctrla |= config->transfer_mode;
    2a2e:	431a      	orrs	r2, r3
	ctrla |= config->mux_setting;
    2a30:	68e3      	ldr	r3, [r4, #12]
    2a32:	431a      	orrs	r2, r3
	ctrlb |= config->character_size;
    2a34:	7c23      	ldrb	r3, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    2a36:	2900      	cmp	r1, #0
    2a38:	d103      	bne.n	2a42 <spi_init+0x156>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    2a3a:	491d      	ldr	r1, [pc, #116]	; (2ab0 <spi_init+0x1c4>)
    2a3c:	7889      	ldrb	r1, [r1, #2]
    2a3e:	0789      	lsls	r1, r1, #30
    2a40:	d501      	bpl.n	2a46 <spi_init+0x15a>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2a42:	2180      	movs	r1, #128	; 0x80
    2a44:	430a      	orrs	r2, r1
	if (config->receiver_enable) {
    2a46:	7ca1      	ldrb	r1, [r4, #18]
    2a48:	2900      	cmp	r1, #0
    2a4a:	d002      	beq.n	2a52 <spi_init+0x166>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    2a4c:	2180      	movs	r1, #128	; 0x80
    2a4e:	0289      	lsls	r1, r1, #10
    2a50:	430b      	orrs	r3, r1
	if (config->select_slave_low_detect_enable) {
    2a52:	7ce1      	ldrb	r1, [r4, #19]
    2a54:	2900      	cmp	r1, #0
    2a56:	d002      	beq.n	2a5e <spi_init+0x172>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    2a58:	2180      	movs	r1, #128	; 0x80
    2a5a:	0089      	lsls	r1, r1, #2
    2a5c:	430b      	orrs	r3, r1
	if (config->master_slave_select_enable) {
    2a5e:	7d21      	ldrb	r1, [r4, #20]
    2a60:	2900      	cmp	r1, #0
    2a62:	d002      	beq.n	2a6a <spi_init+0x17e>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2a64:	2180      	movs	r1, #128	; 0x80
    2a66:	0189      	lsls	r1, r1, #6
    2a68:	430b      	orrs	r3, r1
	spi_module->CTRLA.reg |= ctrla;
    2a6a:	6839      	ldr	r1, [r7, #0]
    2a6c:	430a      	orrs	r2, r1
    2a6e:	603a      	str	r2, [r7, #0]
	spi_module->CTRLB.reg |= ctrlb;
    2a70:	687a      	ldr	r2, [r7, #4]
    2a72:	4313      	orrs	r3, r2
    2a74:	607b      	str	r3, [r7, #4]
	return STATUS_OK;
    2a76:	2300      	movs	r3, #0
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    2a78:	0018      	movs	r0, r3
    2a7a:	b009      	add	sp, #36	; 0x24
    2a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2a7e:	46c0      	nop			; (mov r8, r8)
    2a80:	00002769 	.word	0x00002769
    2a84:	40000400 	.word	0x40000400
    2a88:	000045ed 	.word	0x000045ed
    2a8c:	00004565 	.word	0x00004565
    2a90:	000025c9 	.word	0x000025c9
    2a94:	00002dfd 	.word	0x00002dfd
    2a98:	00002c4d 	.word	0x00002c4d
    2a9c:	20000368 	.word	0x20000368
    2aa0:	0000260d 	.word	0x0000260d
    2aa4:	000046c1 	.word	0x000046c1
    2aa8:	00004609 	.word	0x00004609
    2aac:	000025a1 	.word	0x000025a1
    2ab0:	41002000 	.word	0x41002000

00002ab4 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    2ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ab6:	b085      	sub	sp, #20
    2ab8:	9301      	str	r3, [sp, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2aba:	0003      	movs	r3, r0
{
    2abc:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2abe:	2005      	movs	r0, #5
{
    2ac0:	9100      	str	r1, [sp, #0]
	if (module->status == STATUS_BUSY) {
    2ac2:	3338      	adds	r3, #56	; 0x38
    2ac4:	781b      	ldrb	r3, [r3, #0]
{
    2ac6:	0016      	movs	r6, r2
	if (module->status == STATUS_BUSY) {
    2ac8:	4283      	cmp	r3, r0
    2aca:	d033      	beq.n	2b34 <spi_read_buffer_wait+0x80>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2acc:	3012      	adds	r0, #18
	if (length == 0) {
    2ace:	2a00      	cmp	r2, #0
    2ad0:	d030      	beq.n	2b34 <spi_read_buffer_wait+0x80>
	}

	if (!(module->receiver_enabled)) {
    2ad2:	79e3      	ldrb	r3, [r4, #7]
		return STATUS_ERR_DENIED;
    2ad4:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    2ad6:	2b00      	cmp	r3, #0
    2ad8:	d02c      	beq.n	2b34 <spi_read_buffer_wait+0x80>
    2ada:	2500      	movs	r5, #0
#  endif
	uint16_t rx_pos = 0;

	while (length--) {
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    2adc:	7963      	ldrb	r3, [r4, #5]
    2ade:	2b01      	cmp	r3, #1
    2ae0:	d108      	bne.n	2af4 <spi_read_buffer_wait+0x40>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2ae2:	6822      	ldr	r2, [r4, #0]
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    2ae4:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2ae6:	7e13      	ldrb	r3, [r2, #24]
    2ae8:	420b      	tst	r3, r1
    2aea:	d0fb      	beq.n	2ae4 <spi_read_buffer_wait+0x30>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    2aec:	9901      	ldr	r1, [sp, #4]
    2aee:	0020      	movs	r0, r4
    2af0:	4b12      	ldr	r3, [pc, #72]	; (2b3c <spi_read_buffer_wait+0x88>)
    2af2:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    2af4:	6822      	ldr	r2, [r4, #0]
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    2af6:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2af8:	7e13      	ldrb	r3, [r2, #24]
    2afa:	420b      	tst	r3, r1
    2afc:	d0fb      	beq.n	2af6 <spi_read_buffer_wait+0x42>
		}

		uint16_t received_data = 0;
    2afe:	ab02      	add	r3, sp, #8
    2b00:	1d9f      	adds	r7, r3, #6
    2b02:	2300      	movs	r3, #0
		enum status_code retval = spi_read(module, &received_data);
    2b04:	0039      	movs	r1, r7
		uint16_t received_data = 0;
    2b06:	803b      	strh	r3, [r7, #0]
		enum status_code retval = spi_read(module, &received_data);
    2b08:	0020      	movs	r0, r4
    2b0a:	4b0d      	ldr	r3, [pc, #52]	; (2b40 <spi_read_buffer_wait+0x8c>)
    2b0c:	4798      	blx	r3

		if (retval != STATUS_OK) {
    2b0e:	2800      	cmp	r0, #0
    2b10:	d110      	bne.n	2b34 <spi_read_buffer_wait+0x80>
			/* Overflow, abort */
			return retval;
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    2b12:	9900      	ldr	r1, [sp, #0]
    2b14:	883a      	ldrh	r2, [r7, #0]
    2b16:	1c6b      	adds	r3, r5, #1
    2b18:	554a      	strb	r2, [r1, r5]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2b1a:	79a1      	ldrb	r1, [r4, #6]
		rx_data[rx_pos++] = received_data;
    2b1c:	b29b      	uxth	r3, r3
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2b1e:	2901      	cmp	r1, #1
    2b20:	d10a      	bne.n	2b38 <spi_read_buffer_wait+0x84>
			rx_data[rx_pos++] = (received_data >> 8);
    2b22:	9900      	ldr	r1, [sp, #0]
    2b24:	3502      	adds	r5, #2
    2b26:	0a12      	lsrs	r2, r2, #8
    2b28:	b2ad      	uxth	r5, r5
    2b2a:	54ca      	strb	r2, [r1, r3]
    2b2c:	3e01      	subs	r6, #1
    2b2e:	b2b6      	uxth	r6, r6
	while (length--) {
    2b30:	2e00      	cmp	r6, #0
    2b32:	d1d3      	bne.n	2adc <spi_read_buffer_wait+0x28>
		}
	}

	return STATUS_OK;
}
    2b34:	b005      	add	sp, #20
    2b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		rx_data[rx_pos++] = received_data;
    2b38:	001d      	movs	r5, r3
    2b3a:	e7f7      	b.n	2b2c <spi_read_buffer_wait+0x78>
    2b3c:	000027fd 	.word	0x000027fd
    2b40:	00002811 	.word	0x00002811

00002b44 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    2b44:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2b46:	000e      	movs	r6, r1
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    2b48:	7941      	ldrb	r1, [r0, #5]
{
    2b4a:	0005      	movs	r5, r0
    2b4c:	0014      	movs	r4, r2
		return STATUS_ERR_UNSUPPORTED_DEV;
    2b4e:	2015      	movs	r0, #21
	if (module->mode != SPI_MODE_MASTER) {
    2b50:	2901      	cmp	r1, #1
    2b52:	d103      	bne.n	2b5c <spi_select_slave+0x18>
	}
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if(!(module->master_slave_select_enable))
    2b54:	7a2a      	ldrb	r2, [r5, #8]
    2b56:	2a00      	cmp	r2, #0
    2b58:	d001      	beq.n	2b5e <spi_select_slave+0x1a>
		} else {
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
    2b5a:	2000      	movs	r0, #0
}
    2b5c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    2b5e:	7830      	ldrb	r0, [r6, #0]
    2b60:	4b14      	ldr	r3, [pc, #80]	; (2bb4 <spi_select_slave+0x70>)
		if (select) {
    2b62:	2c00      	cmp	r4, #0
    2b64:	d022      	beq.n	2bac <spi_select_slave+0x68>
			if (slave->address_enabled) {
    2b66:	7874      	ldrb	r4, [r6, #1]
    2b68:	2c00      	cmp	r4, #0
    2b6a:	d01c      	beq.n	2ba6 <spi_select_slave+0x62>
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2b6c:	682c      	ldr	r4, [r5, #0]
    2b6e:	7e24      	ldrb	r4, [r4, #24]
				if (!spi_is_ready_to_write(module)) {
    2b70:	420c      	tst	r4, r1
    2b72:	d102      	bne.n	2b7a <spi_select_slave+0x36>
					port_pin_set_output_level(slave->ss_pin, true);
    2b74:	4798      	blx	r3
					return STATUS_BUSY;
    2b76:	2005      	movs	r0, #5
    2b78:	e7f0      	b.n	2b5c <spi_select_slave+0x18>
				port_pin_set_output_level(slave->ss_pin, false);
    2b7a:	0011      	movs	r1, r2
    2b7c:	4798      	blx	r3
				spi_write(module, slave->address);
    2b7e:	4b0e      	ldr	r3, [pc, #56]	; (2bb8 <spi_select_slave+0x74>)
    2b80:	78b1      	ldrb	r1, [r6, #2]
    2b82:	0028      	movs	r0, r5
    2b84:	4798      	blx	r3
				if (!(module->receiver_enabled)) {
    2b86:	79eb      	ldrb	r3, [r5, #7]
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d1e6      	bne.n	2b5a <spi_select_slave+0x16>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2b8c:	6829      	ldr	r1, [r5, #0]
					while (!spi_is_ready_to_read(module)) {
    2b8e:	3304      	adds	r3, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2b90:	7e0a      	ldrb	r2, [r1, #24]
    2b92:	421a      	tst	r2, r3
    2b94:	d0fc      	beq.n	2b90 <spi_select_slave+0x4c>
					uint16_t flush = 0;
    2b96:	466b      	mov	r3, sp
    2b98:	2400      	movs	r4, #0
    2b9a:	1d99      	adds	r1, r3, #6
					spi_read(module, &flush);
    2b9c:	0028      	movs	r0, r5
    2b9e:	4b07      	ldr	r3, [pc, #28]	; (2bbc <spi_select_slave+0x78>)
					uint16_t flush = 0;
    2ba0:	800c      	strh	r4, [r1, #0]
					spi_read(module, &flush);
    2ba2:	4798      	blx	r3
    2ba4:	e7d9      	b.n	2b5a <spi_select_slave+0x16>
				port_pin_set_output_level(slave->ss_pin, false);
    2ba6:	0021      	movs	r1, r4
    2ba8:	4798      	blx	r3
    2baa:	e7d6      	b.n	2b5a <spi_select_slave+0x16>
			port_pin_set_output_level(slave->ss_pin, true);
    2bac:	4798      	blx	r3
	return STATUS_OK;
    2bae:	0020      	movs	r0, r4
    2bb0:	e7d4      	b.n	2b5c <spi_select_slave+0x18>
    2bb2:	46c0      	nop			; (mov r8, r8)
    2bb4:	00002799 	.word	0x00002799
    2bb8:	000027fd 	.word	0x000027fd
    2bbc:	00002811 	.word	0x00002811

00002bc0 <spi_write_buffer_wait>:
{
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    2bc0:	0003      	movs	r3, r0
{
    2bc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2bc4:	0004      	movs	r4, r0
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    2bc6:	2005      	movs	r0, #5
	if (module->status == STATUS_BUSY) {
    2bc8:	3338      	adds	r3, #56	; 0x38
    2bca:	781b      	ldrb	r3, [r3, #0]
{
    2bcc:	000f      	movs	r7, r1
    2bce:	0015      	movs	r5, r2
	if (module->status == STATUS_BUSY) {
    2bd0:	4283      	cmp	r3, r0
    2bd2:	d003      	beq.n	2bdc <spi_write_buffer_wait+0x1c>
	}
#  endif

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2bd4:	3012      	adds	r0, #18
    2bd6:	2600      	movs	r6, #0
	if (length == 0) {
    2bd8:	2a00      	cmp	r2, #0
    2bda:	d120      	bne.n	2c1e <spi_write_buffer_wait+0x5e>
			}
		}
	}
#  endif
	return STATUS_OK;
}
    2bdc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		while (!spi_is_ready_to_write(module)) {
    2bde:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    2be0:	7e1a      	ldrb	r2, [r3, #24]
    2be2:	420a      	tst	r2, r1
    2be4:	d0fb      	beq.n	2bde <spi_write_buffer_wait+0x1e>
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2be6:	79a2      	ldrb	r2, [r4, #6]
		uint16_t data_to_send = tx_data[tx_pos++];
    2be8:	1873      	adds	r3, r6, r1
    2bea:	b29b      	uxth	r3, r3
    2bec:	5db9      	ldrb	r1, [r7, r6]
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2bee:	2a01      	cmp	r2, #1
    2bf0:	d017      	beq.n	2c22 <spi_write_buffer_wait+0x62>
		uint16_t data_to_send = tx_data[tx_pos++];
    2bf2:	001e      	movs	r6, r3
    2bf4:	b289      	uxth	r1, r1
		spi_write(module, data_to_send);
    2bf6:	4b13      	ldr	r3, [pc, #76]	; (2c44 <spi_write_buffer_wait+0x84>)
    2bf8:	0020      	movs	r0, r4
    2bfa:	4798      	blx	r3
		if (module->receiver_enabled) {
    2bfc:	79e3      	ldrb	r3, [r4, #7]
    2bfe:	2b00      	cmp	r3, #0
    2c00:	d009      	beq.n	2c16 <spi_write_buffer_wait+0x56>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2c02:	6822      	ldr	r2, [r4, #0]
			while (!spi_is_ready_to_read(module)) {
    2c04:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    2c06:	7e13      	ldrb	r3, [r2, #24]
    2c08:	420b      	tst	r3, r1
    2c0a:	d0fb      	beq.n	2c04 <spi_write_buffer_wait+0x44>
			spi_read(module, &flush);
    2c0c:	466b      	mov	r3, sp
    2c0e:	0020      	movs	r0, r4
    2c10:	1d99      	adds	r1, r3, #6
    2c12:	4b0d      	ldr	r3, [pc, #52]	; (2c48 <spi_write_buffer_wait+0x88>)
    2c14:	4798      	blx	r3
    2c16:	3d01      	subs	r5, #1
    2c18:	b2ad      	uxth	r5, r5
	while (length--) {
    2c1a:	2d00      	cmp	r5, #0
    2c1c:	d007      	beq.n	2c2e <spi_write_buffer_wait+0x6e>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2c1e:	6823      	ldr	r3, [r4, #0]
    2c20:	e7dd      	b.n	2bde <spi_write_buffer_wait+0x1e>
			data_to_send |= (tx_data[tx_pos++] << 8);
    2c22:	5cfb      	ldrb	r3, [r7, r3]
    2c24:	3602      	adds	r6, #2
    2c26:	021b      	lsls	r3, r3, #8
    2c28:	b2b6      	uxth	r6, r6
    2c2a:	4319      	orrs	r1, r3
    2c2c:	e7e3      	b.n	2bf6 <spi_write_buffer_wait+0x36>
	if (module->mode == SPI_MODE_MASTER) {
    2c2e:	7963      	ldrb	r3, [r4, #5]
	return STATUS_OK;
    2c30:	0028      	movs	r0, r5
	if (module->mode == SPI_MODE_MASTER) {
    2c32:	2b01      	cmp	r3, #1
    2c34:	d1d2      	bne.n	2bdc <spi_write_buffer_wait+0x1c>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2c36:	6821      	ldr	r1, [r4, #0]
		while (!spi_is_write_complete(module)) {
    2c38:	3301      	adds	r3, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    2c3a:	7e0a      	ldrb	r2, [r1, #24]
    2c3c:	421a      	tst	r2, r3
    2c3e:	d0fc      	beq.n	2c3a <spi_write_buffer_wait+0x7a>
	return STATUS_OK;
    2c40:	2000      	movs	r0, #0
    2c42:	e7cb      	b.n	2bdc <spi_write_buffer_wait+0x1c>
    2c44:	000027fd 	.word	0x000027fd
    2c48:	00002811 	.word	0x00002811

00002c4c <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    2c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Get device instance from the look-up table */
	struct spi_module *module
    2c4e:	4b68      	ldr	r3, [pc, #416]	; (2df0 <_spi_interrupt_handler+0x1a4>)
    2c50:	0080      	lsls	r0, r0, #2
    2c52:	58c4      	ldr	r4, [r0, r3]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    2c54:	0023      	movs	r3, r4
    2c56:	0022      	movs	r2, r4
    2c58:	3337      	adds	r3, #55	; 0x37
    2c5a:	3236      	adds	r2, #54	; 0x36
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2c5c:	6825      	ldr	r5, [r4, #0]
	uint8_t callback_mask =
    2c5e:	781b      	ldrb	r3, [r3, #0]
    2c60:	7816      	ldrb	r6, [r2, #0]
    2c62:	401e      	ands	r6, r3

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    2c64:	7e2b      	ldrb	r3, [r5, #24]
	interrupt_status &= spi_hw->INTENSET.reg;
    2c66:	7daf      	ldrb	r7, [r5, #22]
    2c68:	401f      	ands	r7, r3

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    2c6a:	07fb      	lsls	r3, r7, #31
    2c6c:	d534      	bpl.n	2cd8 <_spi_interrupt_handler+0x8c>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2c6e:	7962      	ldrb	r2, [r4, #5]
    2c70:	2a01      	cmp	r2, #1
    2c72:	d131      	bne.n	2cd8 <_spi_interrupt_handler+0x8c>
			(module->dir == SPI_DIRECTION_READ)) {
    2c74:	7a63      	ldrb	r3, [r4, #9]
		if ((module->mode == SPI_MODE_MASTER) &&
    2c76:	2b00      	cmp	r3, #0
    2c78:	d10d      	bne.n	2c96 <_spi_interrupt_handler+0x4a>
	spi_hw->DATA.reg = dummy_write;
    2c7a:	4b5e      	ldr	r3, [pc, #376]	; (2df4 <_spi_interrupt_handler+0x1a8>)
    2c7c:	881b      	ldrh	r3, [r3, #0]
    2c7e:	62ab      	str	r3, [r5, #40]	; 0x28
	module->remaining_dummy_buffer_length--;
    2c80:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2c82:	3b01      	subs	r3, #1
    2c84:	b29b      	uxth	r3, r3
    2c86:	8663      	strh	r3, [r4, #50]	; 0x32
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
			if (module->remaining_dummy_buffer_length == 0) {
    2c88:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2c8a:	2b00      	cmp	r3, #0
    2c8c:	d100      	bne.n	2c90 <_spi_interrupt_handler+0x44>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2c8e:	752a      	strb	r2, [r5, #20]
			}
		}
#  endif

		if (0
    2c90:	7963      	ldrb	r3, [r4, #5]
    2c92:	2b01      	cmp	r3, #1
    2c94:	d120      	bne.n	2cd8 <_spi_interrupt_handler+0x8c>
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
			(module->dir != SPI_DIRECTION_READ))
    2c96:	7a63      	ldrb	r3, [r4, #9]
		|| ((module->mode == SPI_MODE_MASTER) &&
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d01d      	beq.n	2cd8 <_spi_interrupt_handler+0x8c>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2c9c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	SercomSpi *const spi_hw = &(module->hw->SPI);
    2c9e:	6822      	ldr	r2, [r4, #0]
	(module->tx_buffer_ptr)++;
    2ca0:	1c48      	adds	r0, r1, #1
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ca2:	780b      	ldrb	r3, [r1, #0]
	(module->tx_buffer_ptr)++;
    2ca4:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2ca6:	79a0      	ldrb	r0, [r4, #6]
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2ca8:	b2db      	uxtb	r3, r3
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2caa:	2801      	cmp	r0, #1
    2cac:	d051      	beq.n	2d52 <_spi_interrupt_handler+0x106>
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    2cae:	b29b      	uxth	r3, r3
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    2cb0:	05db      	lsls	r3, r3, #23
    2cb2:	0ddb      	lsrs	r3, r3, #23
    2cb4:	6293      	str	r3, [r2, #40]	; 0x28
	(module->remaining_tx_buffer_length)--;
    2cb6:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2cb8:	3b01      	subs	r3, #1
    2cba:	b29b      	uxth	r3, r3
    2cbc:	86a3      	strh	r3, [r4, #52]	; 0x34
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
			if (module->remaining_tx_buffer_length == 0) {
    2cbe:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
    2cc0:	2b00      	cmp	r3, #0
    2cc2:	d109      	bne.n	2cd8 <_spi_interrupt_handler+0x8c>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    2cc4:	3301      	adds	r3, #1
    2cc6:	752b      	strb	r3, [r5, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    2cc8:	7a63      	ldrb	r3, [r4, #9]
    2cca:	2b01      	cmp	r3, #1
    2ccc:	d104      	bne.n	2cd8 <_spi_interrupt_handler+0x8c>
    2cce:	79e3      	ldrb	r3, [r4, #7]
    2cd0:	2b00      	cmp	r3, #0
    2cd2:	d101      	bne.n	2cd8 <_spi_interrupt_handler+0x8c>
						!(module->receiver_enabled)) {
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2cd4:	3302      	adds	r3, #2
    2cd6:	75ab      	strb	r3, [r5, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    2cd8:	2104      	movs	r1, #4
    2cda:	420f      	tst	r7, r1
    2cdc:	d015      	beq.n	2d0a <_spi_interrupt_handler+0xbe>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    2cde:	8b6b      	ldrh	r3, [r5, #26]
    2ce0:	420b      	tst	r3, r1
    2ce2:	d03c      	beq.n	2d5e <_spi_interrupt_handler+0x112>
			if (module->dir != SPI_DIRECTION_WRITE) {
    2ce4:	7a63      	ldrb	r3, [r4, #9]
    2ce6:	2b01      	cmp	r3, #1
    2ce8:	d00c      	beq.n	2d04 <_spi_interrupt_handler+0xb8>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    2cea:	0023      	movs	r3, r4
    2cec:	221e      	movs	r2, #30
    2cee:	3338      	adds	r3, #56	; 0x38
    2cf0:	701a      	strb	r2, [r3, #0]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    2cf2:	2303      	movs	r3, #3
    2cf4:	7263      	strb	r3, [r4, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    2cf6:	3302      	adds	r3, #2
    2cf8:	752b      	strb	r3, [r5, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    2cfa:	0733      	lsls	r3, r6, #28
    2cfc:	d502      	bpl.n	2d04 <_spi_interrupt_handler+0xb8>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    2cfe:	0020      	movs	r0, r4
    2d00:	69a3      	ldr	r3, [r4, #24]
    2d02:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    2d04:	6aab      	ldr	r3, [r5, #40]	; 0x28
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2d06:	2304      	movs	r3, #4
    2d08:	836b      	strh	r3, [r5, #26]
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    2d0a:	2102      	movs	r1, #2
    2d0c:	420f      	tst	r7, r1
    2d0e:	d014      	beq.n	2d3a <_spi_interrupt_handler+0xee>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    2d10:	7963      	ldrb	r3, [r4, #5]
    2d12:	2b01      	cmp	r3, #1
    2d14:	d111      	bne.n	2d3a <_spi_interrupt_handler+0xee>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2d16:	7a63      	ldrb	r3, [r4, #9]
    2d18:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    2d1a:	2b01      	cmp	r3, #1
    2d1c:	d10d      	bne.n	2d3a <_spi_interrupt_handler+0xee>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    2d1e:	79e2      	ldrb	r2, [r4, #7]
    2d20:	2a00      	cmp	r2, #0
    2d22:	d10a      	bne.n	2d3a <_spi_interrupt_handler+0xee>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    2d24:	7529      	strb	r1, [r5, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    2d26:	3101      	adds	r1, #1
    2d28:	7261      	strb	r1, [r4, #9]
			module->status = STATUS_OK;
    2d2a:	0021      	movs	r1, r4
    2d2c:	3138      	adds	r1, #56	; 0x38
    2d2e:	700a      	strb	r2, [r1, #0]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    2d30:	421e      	tst	r6, r3
    2d32:	d002      	beq.n	2d3a <_spi_interrupt_handler+0xee>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    2d34:	0020      	movs	r0, r4
    2d36:	68e3      	ldr	r3, [r4, #12]
    2d38:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    2d3a:	b27f      	sxtb	r7, r7
    2d3c:	2f00      	cmp	r7, #0
    2d3e:	da07      	bge.n	2d50 <_spi_interrupt_handler+0x104>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2d40:	2380      	movs	r3, #128	; 0x80
    2d42:	752b      	strb	r3, [r5, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    2d44:	762b      	strb	r3, [r5, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    2d46:	0673      	lsls	r3, r6, #25
    2d48:	d502      	bpl.n	2d50 <_spi_interrupt_handler+0x104>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    2d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2d4c:	0020      	movs	r0, r4
    2d4e:	4798      	blx	r3
		}
	}
#  endif
}
    2d50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2d52:	7848      	ldrb	r0, [r1, #1]
		(module->tx_buffer_ptr)++;
    2d54:	3102      	adds	r1, #2
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    2d56:	0200      	lsls	r0, r0, #8
    2d58:	4303      	orrs	r3, r0
		(module->tx_buffer_ptr)++;
    2d5a:	62e1      	str	r1, [r4, #44]	; 0x2c
    2d5c:	e7a8      	b.n	2cb0 <_spi_interrupt_handler+0x64>
			if (module->dir == SPI_DIRECTION_WRITE) {
    2d5e:	7a62      	ldrb	r2, [r4, #9]
    2d60:	6823      	ldr	r3, [r4, #0]
    2d62:	b2d2      	uxtb	r2, r2
	flush = spi_hw->DATA.reg;
    2d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
			if (module->dir == SPI_DIRECTION_WRITE) {
    2d66:	2a01      	cmp	r2, #1
    2d68:	d113      	bne.n	2d92 <_spi_interrupt_handler+0x146>
	module->remaining_dummy_buffer_length--;
    2d6a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2d6c:	3b01      	subs	r3, #1
    2d6e:	b29b      	uxth	r3, r3
    2d70:	8663      	strh	r3, [r4, #50]	; 0x32
				if (module->remaining_dummy_buffer_length == 0) {
    2d72:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2d74:	b29b      	uxth	r3, r3
    2d76:	2b00      	cmp	r3, #0
    2d78:	d1c7      	bne.n	2d0a <_spi_interrupt_handler+0xbe>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2d7a:	7529      	strb	r1, [r5, #20]
					module->status = STATUS_OK;
    2d7c:	0021      	movs	r1, r4
    2d7e:	3138      	adds	r1, #56	; 0x38
    2d80:	700b      	strb	r3, [r1, #0]
					module->dir = SPI_DIRECTION_IDLE;
    2d82:	3303      	adds	r3, #3
    2d84:	7263      	strb	r3, [r4, #9]
					if (callback_mask &
    2d86:	4216      	tst	r6, r2
    2d88:	d0bf      	beq.n	2d0a <_spi_interrupt_handler+0xbe>
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    2d8a:	0020      	movs	r0, r4
    2d8c:	68e3      	ldr	r3, [r4, #12]
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2d8e:	4798      	blx	r3
    2d90:	e7bb      	b.n	2d0a <_spi_interrupt_handler+0xbe>
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2d92:	05db      	lsls	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    2d94:	6aa1      	ldr	r1, [r4, #40]	; 0x28
	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    2d96:	0ddb      	lsrs	r3, r3, #23
	*(module->rx_buffer_ptr) = received_data;
    2d98:	b2da      	uxtb	r2, r3
    2d9a:	700a      	strb	r2, [r1, #0]
	module->rx_buffer_ptr += 1;
    2d9c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2d9e:	1c51      	adds	r1, r2, #1
    2da0:	62a1      	str	r1, [r4, #40]	; 0x28
	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2da2:	79a1      	ldrb	r1, [r4, #6]
    2da4:	2901      	cmp	r1, #1
    2da6:	d104      	bne.n	2db2 <_spi_interrupt_handler+0x166>
		*(module->rx_buffer_ptr) = (received_data >> 8);
    2da8:	0a1b      	lsrs	r3, r3, #8
    2daa:	7053      	strb	r3, [r2, #1]
		module->rx_buffer_ptr += 1;
    2dac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2dae:	3301      	adds	r3, #1
    2db0:	62a3      	str	r3, [r4, #40]	; 0x28
	module->remaining_rx_buffer_length--;
    2db2:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2db4:	3b01      	subs	r3, #1
    2db6:	b29b      	uxth	r3, r3
    2db8:	8623      	strh	r3, [r4, #48]	; 0x30
				if (module->remaining_rx_buffer_length == 0) {
    2dba:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2dbc:	b29b      	uxth	r3, r3
    2dbe:	2b00      	cmp	r3, #0
    2dc0:	d1a3      	bne.n	2d0a <_spi_interrupt_handler+0xbe>
					module->status = STATUS_OK;
    2dc2:	0022      	movs	r2, r4
    2dc4:	3238      	adds	r2, #56	; 0x38
    2dc6:	7013      	strb	r3, [r2, #0]
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    2dc8:	3304      	adds	r3, #4
    2dca:	752b      	strb	r3, [r5, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    2dcc:	7a62      	ldrb	r2, [r4, #9]
    2dce:	2a02      	cmp	r2, #2
    2dd0:	d104      	bne.n	2ddc <_spi_interrupt_handler+0x190>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    2dd2:	421e      	tst	r6, r3
    2dd4:	d099      	beq.n	2d0a <_spi_interrupt_handler+0xbe>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    2dd6:	0020      	movs	r0, r4
    2dd8:	6963      	ldr	r3, [r4, #20]
    2dda:	e7d8      	b.n	2d8e <_spi_interrupt_handler+0x142>
					} else if (module->dir == SPI_DIRECTION_READ) {
    2ddc:	7a63      	ldrb	r3, [r4, #9]
    2dde:	2b00      	cmp	r3, #0
    2de0:	d000      	beq.n	2de4 <_spi_interrupt_handler+0x198>
    2de2:	e792      	b.n	2d0a <_spi_interrupt_handler+0xbe>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    2de4:	07b3      	lsls	r3, r6, #30
    2de6:	d400      	bmi.n	2dea <_spi_interrupt_handler+0x19e>
    2de8:	e78f      	b.n	2d0a <_spi_interrupt_handler+0xbe>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    2dea:	0020      	movs	r0, r4
    2dec:	6923      	ldr	r3, [r4, #16]
    2dee:	e7ce      	b.n	2d8e <_spi_interrupt_handler+0x142>
    2df0:	20000368 	.word	0x20000368
    2df4:	20000364 	.word	0x20000364

00002df8 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    2df8:	4770      	bx	lr
	...

00002dfc <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    2dfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    2dfe:	4c09      	ldr	r4, [pc, #36]	; (2e24 <_sercom_set_handler+0x28>)
    2e00:	4a09      	ldr	r2, [pc, #36]	; (2e28 <_sercom_set_handler+0x2c>)
    2e02:	7823      	ldrb	r3, [r4, #0]
    2e04:	2b00      	cmp	r3, #0
    2e06:	d109      	bne.n	2e1c <_sercom_set_handler+0x20>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
			_sercom_instances[i] = NULL;
    2e08:	001e      	movs	r6, r3
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2e0a:	4f08      	ldr	r7, [pc, #32]	; (2e2c <_sercom_set_handler+0x30>)
			_sercom_instances[i] = NULL;
    2e0c:	4d08      	ldr	r5, [pc, #32]	; (2e30 <_sercom_set_handler+0x34>)
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    2e0e:	50d7      	str	r7, [r2, r3]
			_sercom_instances[i] = NULL;
    2e10:	50ee      	str	r6, [r5, r3]
    2e12:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    2e14:	2b18      	cmp	r3, #24
    2e16:	d1fa      	bne.n	2e0e <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2e18:	3b17      	subs	r3, #23
    2e1a:	7023      	strb	r3, [r4, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2e1c:	0080      	lsls	r0, r0, #2
    2e1e:	5011      	str	r1, [r2, r0]
}
    2e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2e22:	46c0      	nop			; (mov r8, r8)
    2e24:	2000025c 	.word	0x2000025c
    2e28:	20000260 	.word	0x20000260
    2e2c:	00002df9 	.word	0x00002df9
    2e30:	20000368 	.word	0x20000368

00002e34 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2e34:	b507      	push	{r0, r1, r2, lr}
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2e36:	2309      	movs	r3, #9
    2e38:	466a      	mov	r2, sp
    2e3a:	7013      	strb	r3, [r2, #0]
    2e3c:	3301      	adds	r3, #1
    2e3e:	7053      	strb	r3, [r2, #1]
    2e40:	3301      	adds	r3, #1
    2e42:	7093      	strb	r3, [r2, #2]
    2e44:	3301      	adds	r3, #1
    2e46:	70d3      	strb	r3, [r2, #3]
    2e48:	3301      	adds	r3, #1
    2e4a:	7113      	strb	r3, [r2, #4]
    2e4c:	3301      	adds	r3, #1
    2e4e:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    2e50:	4b02      	ldr	r3, [pc, #8]	; (2e5c <_sercom_get_interrupt_vector+0x28>)
    2e52:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2e54:	466b      	mov	r3, sp
    2e56:	5618      	ldrsb	r0, [r3, r0]
}
    2e58:	bd0e      	pop	{r1, r2, r3, pc}
    2e5a:	46c0      	nop			; (mov r8, r8)
    2e5c:	00002769 	.word	0x00002769

00002e60 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2e60:	b510      	push	{r4, lr}
    2e62:	4b02      	ldr	r3, [pc, #8]	; (2e6c <SERCOM0_Handler+0xc>)
    2e64:	2000      	movs	r0, #0
    2e66:	681b      	ldr	r3, [r3, #0]
    2e68:	4798      	blx	r3
    2e6a:	bd10      	pop	{r4, pc}
    2e6c:	20000260 	.word	0x20000260

00002e70 <SERCOM1_Handler>:
    2e70:	b510      	push	{r4, lr}
    2e72:	4b02      	ldr	r3, [pc, #8]	; (2e7c <SERCOM1_Handler+0xc>)
    2e74:	2001      	movs	r0, #1
    2e76:	685b      	ldr	r3, [r3, #4]
    2e78:	4798      	blx	r3
    2e7a:	bd10      	pop	{r4, pc}
    2e7c:	20000260 	.word	0x20000260

00002e80 <SERCOM2_Handler>:
    2e80:	b510      	push	{r4, lr}
    2e82:	4b02      	ldr	r3, [pc, #8]	; (2e8c <SERCOM2_Handler+0xc>)
    2e84:	2002      	movs	r0, #2
    2e86:	689b      	ldr	r3, [r3, #8]
    2e88:	4798      	blx	r3
    2e8a:	bd10      	pop	{r4, pc}
    2e8c:	20000260 	.word	0x20000260

00002e90 <SERCOM3_Handler>:
    2e90:	b510      	push	{r4, lr}
    2e92:	4b02      	ldr	r3, [pc, #8]	; (2e9c <SERCOM3_Handler+0xc>)
    2e94:	2003      	movs	r0, #3
    2e96:	68db      	ldr	r3, [r3, #12]
    2e98:	4798      	blx	r3
    2e9a:	bd10      	pop	{r4, pc}
    2e9c:	20000260 	.word	0x20000260

00002ea0 <SERCOM4_Handler>:
    2ea0:	b510      	push	{r4, lr}
    2ea2:	4b02      	ldr	r3, [pc, #8]	; (2eac <SERCOM4_Handler+0xc>)
    2ea4:	2004      	movs	r0, #4
    2ea6:	691b      	ldr	r3, [r3, #16]
    2ea8:	4798      	blx	r3
    2eaa:	bd10      	pop	{r4, pc}
    2eac:	20000260 	.word	0x20000260

00002eb0 <SERCOM5_Handler>:
    2eb0:	b510      	push	{r4, lr}
    2eb2:	4b02      	ldr	r3, [pc, #8]	; (2ebc <SERCOM5_Handler+0xc>)
    2eb4:	2005      	movs	r0, #5
    2eb6:	695b      	ldr	r3, [r3, #20]
    2eb8:	4798      	blx	r3
    2eba:	bd10      	pop	{r4, pc}
    2ebc:	20000260 	.word	0x20000260

00002ec0 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2ec0:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    2ec2:	2900      	cmp	r1, #0
    2ec4:	d106      	bne.n	2ed4 <extint_chan_enable_callback+0x14>
	if (eic_index < EIC_INST_NUM) {
    2ec6:	281f      	cmp	r0, #31
    2ec8:	d806      	bhi.n	2ed8 <extint_chan_enable_callback+0x18>
		eic->INTENSET.reg = (1UL << channel);
    2eca:	3b16      	subs	r3, #22
    2ecc:	4083      	lsls	r3, r0
    2ece:	4a03      	ldr	r2, [pc, #12]	; (2edc <extint_chan_enable_callback+0x1c>)
    2ed0:	60d3      	str	r3, [r2, #12]
	}

	return STATUS_OK;
    2ed2:	000b      	movs	r3, r1
}
    2ed4:	0018      	movs	r0, r3
    2ed6:	4770      	bx	lr
		eic->INTENSET.reg = (1UL << channel);
    2ed8:	60c9      	str	r1, [r1, #12]
    2eda:	deff      	udf	#255	; 0xff
    2edc:	40001800 	.word	0x40001800

00002ee0 <EIC_Handler>:

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2ee0:	2300      	movs	r3, #0
{
    2ee2:	b570      	push	{r4, r5, r6, lr}
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
    2ee4:	2501      	movs	r5, #1
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2ee6:	4c0b      	ldr	r4, [pc, #44]	; (2f14 <EIC_Handler+0x34>)
    2ee8:	7023      	strb	r3, [r4, #0]
    2eea:	7823      	ldrb	r3, [r4, #0]
    2eec:	2b0f      	cmp	r3, #15
    2eee:	d900      	bls.n	2ef2 <EIC_Handler+0x12>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
			}
		}
	}
}
    2ef0:	bd70      	pop	{r4, r5, r6, pc}
    2ef2:	0029      	movs	r1, r5
    2ef4:	4099      	lsls	r1, r3

	return (eic_module->INTFLAG.reg & eic_mask);
    2ef6:	4a08      	ldr	r2, [pc, #32]	; (2f18 <EIC_Handler+0x38>)
    2ef8:	6910      	ldr	r0, [r2, #16]
		if (extint_chan_is_detected(_current_channel)) {
    2efa:	4208      	tst	r0, r1
    2efc:	d006      	beq.n	2f0c <EIC_Handler+0x2c>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
    2efe:	6111      	str	r1, [r2, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    2f00:	4a06      	ldr	r2, [pc, #24]	; (2f1c <EIC_Handler+0x3c>)
    2f02:	009b      	lsls	r3, r3, #2
    2f04:	589b      	ldr	r3, [r3, r2]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d000      	beq.n	2f0c <EIC_Handler+0x2c>
				_extint_dev.callbacks[_current_channel]();
    2f0a:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    2f0c:	7823      	ldrb	r3, [r4, #0]
    2f0e:	3301      	adds	r3, #1
    2f10:	7023      	strb	r3, [r4, #0]
    2f12:	e7ea      	b.n	2eea <EIC_Handler+0xa>
    2f14:	20000380 	.word	0x20000380
    2f18:	40001800 	.word	0x40001800
    2f1c:	20000324 	.word	0x20000324

00002f20 <bod_set_config>:
	Assert(conf);

	uint32_t temp = 0;

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    2f20:	2202      	movs	r2, #2
{
    2f22:	b530      	push	{r4, r5, lr}
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    2f24:	4c18      	ldr	r4, [pc, #96]	; (2f88 <bod_set_config+0x68>)
    2f26:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f28:	4213      	tst	r3, r2
    2f2a:	d002      	beq.n	2f32 <bod_set_config+0x12>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    2f2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2f2e:	4393      	bics	r3, r2
    2f30:	6363      	str	r3, [r4, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    2f32:	790d      	ldrb	r5, [r1, #4]
    2f34:	880b      	ldrh	r3, [r1, #0]
			(uint32_t)conf->mode;
    2f36:	884a      	ldrh	r2, [r1, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    2f38:	432b      	orrs	r3, r5

	if (conf->mode == BOD_MODE_SAMPLED) {
    2f3a:	2580      	movs	r5, #128	; 0x80
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    2f3c:	4313      	orrs	r3, r2
	if (conf->mode == BOD_MODE_SAMPLED) {
    2f3e:	006d      	lsls	r5, r5, #1
    2f40:	42aa      	cmp	r2, r5
    2f42:	d102      	bne.n	2f4a <bod_set_config+0x2a>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
    2f44:	2280      	movs	r2, #128	; 0x80
    2f46:	0092      	lsls	r2, r2, #2
    2f48:	4313      	orrs	r3, r2
	}

	if (conf->hysteresis == true) {
    2f4a:	798a      	ldrb	r2, [r1, #6]
    2f4c:	2a00      	cmp	r2, #0
    2f4e:	d001      	beq.n	2f54 <bod_set_config+0x34>
		temp |= SYSCTRL_BOD33_HYST;
    2f50:	2204      	movs	r2, #4
    2f52:	4313      	orrs	r3, r2
	}

	if (conf->run_in_standby == true) {
    2f54:	79ca      	ldrb	r2, [r1, #7]
    2f56:	2a00      	cmp	r2, #0
    2f58:	d001      	beq.n	2f5e <bod_set_config+0x3e>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    2f5a:	2240      	movs	r2, #64	; 0x40
    2f5c:	4313      	orrs	r3, r2
	}

	switch (bod_id) {
    2f5e:	2800      	cmp	r0, #0
    2f60:	d110      	bne.n	2f84 <bod_set_config+0x64>
		case BOD_BOD33:
			if (conf->level > 0x3F) {
    2f62:	794a      	ldrb	r2, [r1, #5]
				return STATUS_ERR_INVALID_ARG;
    2f64:	3017      	adds	r0, #23
			if (conf->level > 0x3F) {
    2f66:	2a3f      	cmp	r2, #63	; 0x3f
    2f68:	d80b      	bhi.n	2f82 <bod_set_config+0x62>
			}

			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    2f6a:	21fc      	movs	r1, #252	; 0xfc
    2f6c:	0412      	lsls	r2, r2, #16
    2f6e:	0389      	lsls	r1, r1, #14
    2f70:	400a      	ands	r2, r1
    2f72:	4313      	orrs	r3, r2
    2f74:	6363      	str	r3, [r4, #52]	; 0x34

			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    2f76:	2380      	movs	r3, #128	; 0x80
    2f78:	011b      	lsls	r3, r3, #4
    2f7a:	68e2      	ldr	r2, [r4, #12]
    2f7c:	421a      	tst	r2, r3
    2f7e:	d0fc      	beq.n	2f7a <bod_set_config+0x5a>
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    2f80:	2000      	movs	r0, #0
}
    2f82:	bd30      	pop	{r4, r5, pc}
			return STATUS_ERR_INVALID_ARG;
    2f84:	2017      	movs	r0, #23
    2f86:	e7fc      	b.n	2f82 <bod_set_config+0x62>
    2f88:	40000800 	.word	0x40000800

00002f8c <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    2f8c:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2f8e:	4b09      	ldr	r3, [pc, #36]	; (2fb4 <delay_init+0x28>)
    2f90:	2000      	movs	r0, #0
    2f92:	4798      	blx	r3
	cycles_per_ms /= 1000;
    2f94:	21fa      	movs	r1, #250	; 0xfa
    2f96:	4c08      	ldr	r4, [pc, #32]	; (2fb8 <delay_init+0x2c>)
    2f98:	0089      	lsls	r1, r1, #2
	cycles_per_ms = system_gclk_gen_get_hz(0);
    2f9a:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    2f9c:	47a0      	blx	r4
    2f9e:	4b07      	ldr	r3, [pc, #28]	; (2fbc <delay_init+0x30>)
	cycles_per_us = cycles_per_ms / 1000;
    2fa0:	4907      	ldr	r1, [pc, #28]	; (2fc0 <delay_init+0x34>)
	cycles_per_ms /= 1000;
    2fa2:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    2fa4:	0028      	movs	r0, r5
    2fa6:	47a0      	blx	r4

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2fa8:	2205      	movs	r2, #5
	cycles_per_us = cycles_per_ms / 1000;
    2faa:	4b06      	ldr	r3, [pc, #24]	; (2fc4 <delay_init+0x38>)
    2fac:	6018      	str	r0, [r3, #0]
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    2fae:	4b06      	ldr	r3, [pc, #24]	; (2fc8 <delay_init+0x3c>)
    2fb0:	601a      	str	r2, [r3, #0]
}
    2fb2:	bd70      	pop	{r4, r5, r6, pc}
    2fb4:	000044dd 	.word	0x000044dd
    2fb8:	000047f1 	.word	0x000047f1
    2fbc:	20000000 	.word	0x20000000
    2fc0:	000f4240 	.word	0x000f4240
    2fc4:	20000004 	.word	0x20000004
    2fc8:	e000e010 	.word	0xe000e010

00002fcc <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    2fcc:	b530      	push	{r4, r5, lr}
{
	if (n > 0) {
		SysTick->LOAD = n;
		SysTick->VAL = 0;

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2fce:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
    2fd0:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    2fd2:	4b07      	ldr	r3, [pc, #28]	; (2ff0 <delay_cycles_us+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2fd4:	0264      	lsls	r4, r4, #9
    2fd6:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
    2fd8:	4b06      	ldr	r3, [pc, #24]	; (2ff4 <delay_cycles_us+0x28>)
	while (n--) {
    2fda:	3801      	subs	r0, #1
    2fdc:	d200      	bcs.n	2fe0 <delay_cycles_us+0x14>
	}
}
    2fde:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
    2fe0:	2a00      	cmp	r2, #0
    2fe2:	d0fa      	beq.n	2fda <delay_cycles_us+0xe>
		SysTick->LOAD = n;
    2fe4:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    2fe6:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    2fe8:	681d      	ldr	r5, [r3, #0]
    2fea:	4225      	tst	r5, r4
    2fec:	d0fc      	beq.n	2fe8 <delay_cycles_us+0x1c>
    2fee:	e7f4      	b.n	2fda <delay_cycles_us+0xe>
    2ff0:	20000004 	.word	0x20000004
    2ff4:	e000e010 	.word	0xe000e010

00002ff8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    2ff8:	b530      	push	{r4, r5, lr}
    2ffa:	2480      	movs	r4, #128	; 0x80
		SysTick->VAL = 0;
    2ffc:	2100      	movs	r1, #0
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    2ffe:	4b07      	ldr	r3, [pc, #28]	; (301c <delay_cycles_ms+0x24>)
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3000:	0264      	lsls	r4, r4, #9
    3002:	681a      	ldr	r2, [r3, #0]
		SysTick->LOAD = n;
    3004:	4b06      	ldr	r3, [pc, #24]	; (3020 <delay_cycles_ms+0x28>)
	while (n--) {
    3006:	3801      	subs	r0, #1
    3008:	d200      	bcs.n	300c <delay_cycles_ms+0x14>
	}
}
    300a:	bd30      	pop	{r4, r5, pc}
	if (n > 0) {
    300c:	2a00      	cmp	r2, #0
    300e:	d0fa      	beq.n	3006 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    3010:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    3012:	6099      	str	r1, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    3014:	681d      	ldr	r5, [r3, #0]
    3016:	4225      	tst	r5, r4
    3018:	d0fc      	beq.n	3014 <delay_cycles_ms+0x1c>
    301a:	e7f4      	b.n	3006 <delay_cycles_ms+0xe>
    301c:	20000000 	.word	0x20000000
    3020:	e000e010 	.word	0xe000e010

00003024 <sd_mmc_spi_start_write_block>:

/**
 * \brief Sends the correct TOKEN on the line to start a write block transfer
 */
static void sd_mmc_spi_start_write_block(void)
{
    3024:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t dummy = 0xFF;
    3026:	466b      	mov	r3, sp
    3028:	1d99      	adds	r1, r3, #6
    302a:	23ff      	movs	r3, #255	; 0xff
	Assert(!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size));
	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    302c:	4d09      	ldr	r5, [pc, #36]	; (3054 <sd_mmc_spi_start_write_block+0x30>)
    302e:	2201      	movs	r2, #1
    3030:	0028      	movs	r0, r5
    3032:	4c09      	ldr	r4, [pc, #36]	; (3058 <sd_mmc_spi_start_write_block+0x34>)
	uint8_t dummy = 0xFF;
    3034:	700b      	strb	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master,&dummy, 1);
    3036:	47a0      	blx	r4
    3038:	466a      	mov	r2, sp
	// Send start token
	uint8_t token;
	if (1 == sd_mmc_spi_nb_block) {
    303a:	4b08      	ldr	r3, [pc, #32]	; (305c <sd_mmc_spi_start_write_block+0x38>)
    303c:	1dd1      	adds	r1, r2, #7
    303e:	881b      	ldrh	r3, [r3, #0]
    3040:	2b01      	cmp	r3, #1
    3042:	d105      	bne.n	3050 <sd_mmc_spi_start_write_block+0x2c>
		token = SPI_TOKEN_SINGLE_WRITE;
    3044:	33fd      	adds	r3, #253	; 0xfd
	} else {
		token = SPI_TOKEN_MULTI_WRITE;
	}
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    3046:	0028      	movs	r0, r5
    3048:	2201      	movs	r2, #1
		token = SPI_TOKEN_MULTI_WRITE;
    304a:	700b      	strb	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master,&token, 1);
    304c:	47a0      	blx	r4
}
    304e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
		token = SPI_TOKEN_MULTI_WRITE;
    3050:	23fc      	movs	r3, #252	; 0xfc
    3052:	e7f8      	b.n	3046 <sd_mmc_spi_start_write_block+0x22>
    3054:	20000278 	.word	0x20000278
    3058:	00002bc1 	.word	0x00002bc1
    305c:	200002ba 	.word	0x200002ba

00003060 <sd_mmc_spi_wait_busy>:
{
    3060:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t line = 0xFF;
    3062:	466b      	mov	r3, sp
    3064:	24ff      	movs	r4, #255	; 0xff
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    3066:	4e0f      	ldr	r6, [pc, #60]	; (30a4 <sd_mmc_spi_wait_busy+0x44>)
	uint8_t line = 0xFF;
    3068:	1ddd      	adds	r5, r3, #7
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    306a:	2201      	movs	r2, #1
    306c:	0023      	movs	r3, r4
    306e:	0029      	movs	r1, r5
    3070:	4f0d      	ldr	r7, [pc, #52]	; (30a8 <sd_mmc_spi_wait_busy+0x48>)
    3072:	0030      	movs	r0, r6
	uint8_t line = 0xFF;
    3074:	702c      	strb	r4, [r5, #0]
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    3076:	47b8      	blx	r7
	spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    3078:	0023      	movs	r3, r4
    307a:	2201      	movs	r2, #1
    307c:	0029      	movs	r1, r5
    307e:	0030      	movs	r0, r6
    3080:	47b8      	blx	r7
    3082:	4c0a      	ldr	r4, [pc, #40]	; (30ac <sd_mmc_spi_wait_busy+0x4c>)
		spi_read_buffer_wait(&sd_mmc_master, &line, 1,
    3084:	23ff      	movs	r3, #255	; 0xff
    3086:	2201      	movs	r2, #1
    3088:	0029      	movs	r1, r5
    308a:	0030      	movs	r0, r6
    308c:	4f06      	ldr	r7, [pc, #24]	; (30a8 <sd_mmc_spi_wait_busy+0x48>)
    308e:	3c01      	subs	r4, #1
    3090:	47b8      	blx	r7
		if (!(nec_timeout--)) {
    3092:	2c00      	cmp	r4, #0
    3094:	d004      	beq.n	30a0 <sd_mmc_spi_wait_busy+0x40>
	} while (line != 0xFF);
    3096:	782b      	ldrb	r3, [r5, #0]
    3098:	2bff      	cmp	r3, #255	; 0xff
    309a:	d1f3      	bne.n	3084 <sd_mmc_spi_wait_busy+0x24>
	return true;
    309c:	2001      	movs	r0, #1
}
    309e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			return false;
    30a0:	0020      	movs	r0, r4
    30a2:	e7fc      	b.n	309e <sd_mmc_spi_wait_busy+0x3e>
    30a4:	20000278 	.word	0x20000278
    30a8:	00002ab5 	.word	0x00002ab5
    30ac:	00030d41 	.word	0x00030d41

000030b0 <sd_mmc_spi_start_read_block>:
{
    30b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	token = 0;
    30b2:	466b      	mov	r3, sp
    30b4:	1ddd      	adds	r5, r3, #7
    30b6:	2300      	movs	r3, #0
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    30b8:	260f      	movs	r6, #15
	token = 0;
    30ba:	4c11      	ldr	r4, [pc, #68]	; (3100 <sd_mmc_spi_start_read_block+0x50>)
    30bc:	702b      	strb	r3, [r5, #0]
    30be:	3c01      	subs	r4, #1
		if (i-- == 0) {
    30c0:	2c00      	cmp	r4, #0
    30c2:	d104      	bne.n	30ce <sd_mmc_spi_start_read_block+0x1e>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    30c4:	2204      	movs	r2, #4
			return false;
    30c6:	0020      	movs	r0, r4
			sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_TIMEOUT;
    30c8:	4b0e      	ldr	r3, [pc, #56]	; (3104 <sd_mmc_spi_start_read_block+0x54>)
    30ca:	701a      	strb	r2, [r3, #0]
}
    30cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		spi_read_buffer_wait(&sd_mmc_master, &token, 1,
    30ce:	2201      	movs	r2, #1
    30d0:	23ff      	movs	r3, #255	; 0xff
    30d2:	0029      	movs	r1, r5
    30d4:	480c      	ldr	r0, [pc, #48]	; (3108 <sd_mmc_spi_start_read_block+0x58>)
    30d6:	4f0d      	ldr	r7, [pc, #52]	; (310c <sd_mmc_spi_start_read_block+0x5c>)
    30d8:	47b8      	blx	r7
		if (SPI_TOKEN_DATA_ERROR_VALID(token)) {
    30da:	7828      	ldrb	r0, [r5, #0]
    30dc:	0002      	movs	r2, r0
    30de:	43b2      	bics	r2, r6
    30e0:	d109      	bne.n	30f6 <sd_mmc_spi_start_read_block+0x46>
			if (token & (SPI_TOKEN_DATA_ERROR_ERROR
    30e2:	2107      	movs	r1, #7
    30e4:	4b07      	ldr	r3, [pc, #28]	; (3104 <sd_mmc_spi_start_read_block+0x54>)
    30e6:	4008      	ands	r0, r1
    30e8:	d002      	beq.n	30f0 <sd_mmc_spi_start_read_block+0x40>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_READ_CRC;
    30ea:	7019      	strb	r1, [r3, #0]
			return false;
    30ec:	0010      	movs	r0, r2
    30ee:	e7ed      	b.n	30cc <sd_mmc_spi_start_read_block+0x1c>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_OUT_OF_RANGE;
    30f0:	220b      	movs	r2, #11
    30f2:	701a      	strb	r2, [r3, #0]
    30f4:	e7ea      	b.n	30cc <sd_mmc_spi_start_read_block+0x1c>
	} while (token != SPI_TOKEN_SINGLE_MULTI_READ);
    30f6:	28fe      	cmp	r0, #254	; 0xfe
    30f8:	d1e1      	bne.n	30be <sd_mmc_spi_start_read_block+0xe>
	return true;
    30fa:	38fd      	subs	r0, #253	; 0xfd
    30fc:	e7e6      	b.n	30cc <sd_mmc_spi_start_read_block+0x1c>
    30fe:	46c0      	nop			; (mov r8, r8)
    3100:	0007a121 	.word	0x0007a121
    3104:	200002b9 	.word	0x200002b9
    3108:	20000278 	.word	0x20000278
    310c:	00002ab5 	.word	0x00002ab5

00003110 <sd_mmc_spi_stop_write_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_write_block(void)
{
    3110:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t resp;
	uint16_t crc;
	uint16_t dummy = 0xFF;

	// Send CRC
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    3112:	466b      	mov	r3, sp
    3114:	1d99      	adds	r1, r3, #6
    3116:	2301      	movs	r3, #1
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    3118:	4d12      	ldr	r5, [pc, #72]	; (3164 <sd_mmc_spi_stop_write_block+0x54>)
	crc = 0xFFFF; /// CRC is disabled in SPI mode
    311a:	425b      	negs	r3, r3
    311c:	800b      	strh	r3, [r1, #0]
	spi_write_buffer_wait(&sd_mmc_master, (uint8_t *)&crc, 2);
    311e:	2202      	movs	r2, #2
    3120:	0028      	movs	r0, r5
    3122:	4b11      	ldr	r3, [pc, #68]	; (3168 <sd_mmc_spi_stop_write_block+0x58>)
    3124:	4798      	blx	r3
	// Receiv data response token
	spi_read_buffer_wait(&sd_mmc_master, &resp, 1,
    3126:	466b      	mov	r3, sp
    3128:	1d5c      	adds	r4, r3, #5
    312a:	0028      	movs	r0, r5
    312c:	23ff      	movs	r3, #255	; 0xff
    312e:	2201      	movs	r2, #1
    3130:	0021      	movs	r1, r4
    3132:	4d0e      	ldr	r5, [pc, #56]	; (316c <sd_mmc_spi_stop_write_block+0x5c>)
    3134:	47a8      	blx	r5
			dummy);
	if (!SPI_TOKEN_DATA_RESP_VALID(resp)) {
    3136:	2011      	movs	r0, #17
    3138:	7823      	ldrb	r3, [r4, #0]
    313a:	4018      	ands	r0, r3
    313c:	2801      	cmp	r0, #1
    313e:	d004      	beq.n	314a <sd_mmc_spi_stop_write_block+0x3a>
		sd_mmc_spi_err = SD_MMC_SPI_ERR;
    3140:	2201      	movs	r2, #1
    3142:	4b0b      	ldr	r3, [pc, #44]	; (3170 <sd_mmc_spi_stop_write_block+0x60>)
    3144:	701a      	strb	r2, [r3, #0]
	case SPI_TOKEN_DATA_RESP_WRITE_ERR:
	default:
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
		sd_mmc_spi_debug("%s: Write blocks SD_MMC_SPI_ERR_WR, resp 0x%x\n\r",
				__func__, resp);
		return false;
    3146:	2000      	movs	r0, #0
	}
	return true;
}
    3148:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	switch (SPI_TOKEN_DATA_RESP_CODE(resp)) {
    314a:	221e      	movs	r2, #30
    314c:	4013      	ands	r3, r2
    314e:	2b04      	cmp	r3, #4
    3150:	d0fa      	beq.n	3148 <sd_mmc_spi_stop_write_block+0x38>
    3152:	4a07      	ldr	r2, [pc, #28]	; (3170 <sd_mmc_spi_stop_write_block+0x60>)
    3154:	2b0a      	cmp	r3, #10
    3156:	d102      	bne.n	315e <sd_mmc_spi_stop_write_block+0x4e>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_CRC;
    3158:	3b02      	subs	r3, #2
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE;
    315a:	7013      	strb	r3, [r2, #0]
    315c:	e7f3      	b.n	3146 <sd_mmc_spi_stop_write_block+0x36>
    315e:	230a      	movs	r3, #10
    3160:	e7fb      	b.n	315a <sd_mmc_spi_stop_write_block+0x4a>
    3162:	46c0      	nop			; (mov r8, r8)
    3164:	20000278 	.word	0x20000278
    3168:	00002bc1 	.word	0x00002bc1
    316c:	00002ab5 	.word	0x00002ab5
    3170:	200002b9 	.word	0x200002b9

00003174 <sd_mmc_spi_stop_multiwrite_block>:
 *
 * \return true if success, otherwise false
 *         with a update of \ref sd_mmc_spi_err.
 */
static bool sd_mmc_spi_stop_multiwrite_block(void)
{
    3174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t value;

	if (1 == sd_mmc_spi_nb_block) {
    3176:	4b13      	ldr	r3, [pc, #76]	; (31c4 <sd_mmc_spi_stop_multiwrite_block+0x50>)
    3178:	881d      	ldrh	r5, [r3, #0]
		return true; // Single block write
    317a:	002c      	movs	r4, r5
	if (1 == sd_mmc_spi_nb_block) {
    317c:	2d01      	cmp	r5, #1
    317e:	d01f      	beq.n	31c0 <sd_mmc_spi_stop_multiwrite_block+0x4c>
	}
	if (sd_mmc_spi_nb_block >
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    3180:	4b11      	ldr	r3, [pc, #68]	; (31c8 <sd_mmc_spi_stop_multiwrite_block+0x54>)
		return true; // Single block write
    3182:	2401      	movs	r4, #1
		(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size)) {
    3184:	8819      	ldrh	r1, [r3, #0]
    3186:	4b11      	ldr	r3, [pc, #68]	; (31cc <sd_mmc_spi_stop_multiwrite_block+0x58>)
    3188:	6818      	ldr	r0, [r3, #0]
    318a:	4b11      	ldr	r3, [pc, #68]	; (31d0 <sd_mmc_spi_stop_multiwrite_block+0x5c>)
    318c:	4798      	blx	r3
	if (sd_mmc_spi_nb_block >
    318e:	4285      	cmp	r5, r0
    3190:	d816      	bhi.n	31c0 <sd_mmc_spi_stop_multiwrite_block+0x4c>
		return true; // It is not the End of multi write
	}

	// Delay before start write block:
	// Nwr timing minimum = 8 cylces
	value = 0xFF;
    3192:	466b      	mov	r3, sp
    3194:	1ddd      	adds	r5, r3, #7
    3196:	23ff      	movs	r3, #255	; 0xff
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    3198:	4f0e      	ldr	r7, [pc, #56]	; (31d4 <sd_mmc_spi_stop_multiwrite_block+0x60>)
    319a:	0022      	movs	r2, r4
    319c:	0029      	movs	r1, r5
    319e:	4e0e      	ldr	r6, [pc, #56]	; (31d8 <sd_mmc_spi_stop_multiwrite_block+0x64>)
    31a0:	0038      	movs	r0, r7
	value = 0xFF;
    31a2:	702b      	strb	r3, [r5, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    31a4:	47b0      	blx	r6
	// Send stop token
	value = SPI_TOKEN_STOP_TRAN;
    31a6:	23fd      	movs	r3, #253	; 0xfd
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    31a8:	0022      	movs	r2, r4
    31aa:	0029      	movs	r1, r5
    31ac:	0038      	movs	r0, r7
	value = SPI_TOKEN_STOP_TRAN;
    31ae:	702b      	strb	r3, [r5, #0]
	spi_write_buffer_wait(&sd_mmc_master, &value, 1);
    31b0:	47b0      	blx	r6
	// Wait busy
	if (!sd_mmc_spi_wait_busy()) {
    31b2:	4b0a      	ldr	r3, [pc, #40]	; (31dc <sd_mmc_spi_stop_multiwrite_block+0x68>)
    31b4:	4798      	blx	r3
    31b6:	1e04      	subs	r4, r0, #0
    31b8:	d102      	bne.n	31c0 <sd_mmc_spi_stop_multiwrite_block+0x4c>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    31ba:	2205      	movs	r2, #5
    31bc:	4b08      	ldr	r3, [pc, #32]	; (31e0 <sd_mmc_spi_stop_multiwrite_block+0x6c>)
    31be:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Stop write blocks timeout\n\r",
				__func__);
		return false;
	}
	return true;
}
    31c0:	0020      	movs	r0, r4
    31c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    31c4:	200002ba 	.word	0x200002ba
    31c8:	200002b4 	.word	0x200002b4
    31cc:	200002c0 	.word	0x200002c0
    31d0:	000047f1 	.word	0x000047f1
    31d4:	20000278 	.word	0x20000278
    31d8:	00002bc1 	.word	0x00002bc1
    31dc:	00003061 	.word	0x00003061
    31e0:	200002b9 	.word	0x200002b9

000031e4 <sd_mmc_spi_init>:
	return sd_mmc_spi_err;
}

void sd_mmc_spi_init(void)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    31e4:	2100      	movs	r1, #0
    31e6:	4b2c      	ldr	r3, [pc, #176]	; (3298 <sd_mmc_spi_init+0xb4>)
{
    31e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    31ea:	7019      	strb	r1, [r3, #0]
	config->generator_source = GCLK_GENERATOR_0;
    31ec:	230d      	movs	r3, #13
	config->mode             = SPI_MODE_MASTER;
    31ee:	2501      	movs	r5, #1
{
    31f0:	b091      	sub	sp, #68	; 0x44
	config->generator_source = GCLK_GENERATOR_0;
    31f2:	446b      	add	r3, sp
	config->mode             = SPI_MODE_MASTER;
    31f4:	ac02      	add	r4, sp, #8
	config->generator_source = GCLK_GENERATOR_0;
    31f6:	77d9      	strb	r1, [r3, #31]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    31f8:	220c      	movs	r2, #12
    31fa:	4b28      	ldr	r3, [pc, #160]	; (329c <sd_mmc_spi_init+0xb8>)
    31fc:	a808      	add	r0, sp, #32
	config->mode             = SPI_MODE_MASTER;
    31fe:	7025      	strb	r5, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    3200:	9103      	str	r1, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    3202:	9104      	str	r1, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    3204:	7421      	strb	r1, [r4, #16]
	config->run_in_standby   = false;
    3206:	7461      	strb	r1, [r4, #17]
	config->receiver_enable  = true;
    3208:	74a5      	strb	r5, [r4, #18]
	config->select_slave_low_detect_enable= true;
    320a:	74e5      	strb	r5, [r4, #19]
	config->master_slave_select_enable= false;
    320c:	7521      	strb	r1, [r4, #20]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    320e:	4798      	blx	r3
#endif
	// Initialize SPI interface and enable it
	struct spi_config config;
	spi_get_config_defaults(&config);

	config.mux_setting = SD_MMC_SPI_PINMUX_SETTING;
    3210:	2380      	movs	r3, #128	; 0x80
    3212:	029b      	lsls	r3, r3, #10
    3214:	60e3      	str	r3, [r4, #12]
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    3216:	4b22      	ldr	r3, [pc, #136]	; (32a0 <sd_mmc_spi_init+0xbc>)
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
	config.generator_source = SD_MMC_SPI_SOURCE_CLOCK;
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;

	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    3218:	4f22      	ldr	r7, [pc, #136]	; (32a4 <sd_mmc_spi_init+0xc0>)
	config.pinmux_pad0 = SD_MMC_SPI_PINMUX_PAD0;
    321a:	62a3      	str	r3, [r4, #40]	; 0x28
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    321c:	4b22      	ldr	r3, [pc, #136]	; (32a8 <sd_mmc_spi_init+0xc4>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    321e:	0022      	movs	r2, r4
	config.pinmux_pad1 = SD_MMC_SPI_PINMUX_PAD1;
    3220:	62e3      	str	r3, [r4, #44]	; 0x2c
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    3222:	4b22      	ldr	r3, [pc, #136]	; (32ac <sd_mmc_spi_init+0xc8>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    3224:	4922      	ldr	r1, [pc, #136]	; (32b0 <sd_mmc_spi_init+0xcc>)
	config.pinmux_pad2 = SD_MMC_SPI_PINMUX_PAD2;
    3226:	6323      	str	r3, [r4, #48]	; 0x30
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    3228:	4b22      	ldr	r3, [pc, #136]	; (32b4 <sd_mmc_spi_init+0xd0>)
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    322a:	0038      	movs	r0, r7
	config.pinmux_pad3 = SD_MMC_SPI_PINMUX_PAD3;
    322c:	6363      	str	r3, [r4, #52]	; 0x34
	config.mode_specific.master.baudrate = SDMMC_CLOCK_INIT;
    322e:	4b22      	ldr	r3, [pc, #136]	; (32b8 <sd_mmc_spi_init+0xd4>)
    3230:	61a3      	str	r3, [r4, #24]
	spi_init(&sd_mmc_master, SD_MMC_SPI, &config);
    3232:	4b22      	ldr	r3, [pc, #136]	; (32bc <sd_mmc_spi_init+0xd8>)
    3234:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    3236:	683e      	ldr	r6, [r7, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3238:	4b21      	ldr	r3, [pc, #132]	; (32c0 <sd_mmc_spi_init+0xdc>)
    323a:	0030      	movs	r0, r6
    323c:	4798      	blx	r3
    323e:	231f      	movs	r3, #31
    3240:	4018      	ands	r0, r3
    3242:	4085      	lsls	r5, r0
    3244:	4b1f      	ldr	r3, [pc, #124]	; (32c4 <sd_mmc_spi_init+0xe0>)
    3246:	601d      	str	r5, [r3, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    3248:	683b      	ldr	r3, [r7, #0]
	return (spi_module->SYNCBUSY.reg);
    324a:	69dc      	ldr	r4, [r3, #28]
	while (spi_is_syncing(module)) {
    324c:	2c00      	cmp	r4, #0
    324e:	d1fc      	bne.n	324a <sd_mmc_spi_init+0x66>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    3250:	2302      	movs	r3, #2
	config->input_pull = PORT_PIN_PULL_UP;
    3252:	2501      	movs	r5, #1
    3254:	6832      	ldr	r2, [r6, #0]
    3256:	a901      	add	r1, sp, #4
    3258:	4313      	orrs	r3, r2
	spi_enable(&sd_mmc_master);

	spi_slave_inst_get_config_defaults(&slave_configs[0]);
	slave_configs[0].ss_pin = ss_pins[0];
    325a:	4a1b      	ldr	r2, [pc, #108]	; (32c8 <sd_mmc_spi_init+0xe4>)
    325c:	6033      	str	r3, [r6, #0]
    325e:	7810      	ldrb	r0, [r2, #0]
	config->address_enabled = false;
    3260:	4b1a      	ldr	r3, [pc, #104]	; (32cc <sd_mmc_spi_init+0xe8>)
	slave->ss_pin          = config->ss_pin;
    3262:	4e1b      	ldr	r6, [pc, #108]	; (32d0 <sd_mmc_spi_init+0xec>)
	config->address_enabled = false;
    3264:	705c      	strb	r4, [r3, #1]
	config->address         = 0;
    3266:	709c      	strb	r4, [r3, #2]
    3268:	7018      	strb	r0, [r3, #0]
	slave->ss_pin          = config->ss_pin;
    326a:	7030      	strb	r0, [r6, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    326c:	4b19      	ldr	r3, [pc, #100]	; (32d4 <sd_mmc_spi_init+0xf0>)
	slave->address_enabled = config->address_enabled;
    326e:	7074      	strb	r4, [r6, #1]
	slave->address         = config->address;
    3270:	70b4      	strb	r4, [r6, #2]
    3272:	704d      	strb	r5, [r1, #1]
	config->powersave  = false;
    3274:	708c      	strb	r4, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    3276:	700d      	strb	r5, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    3278:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
    327a:	7832      	ldrb	r2, [r6, #0]
	uint8_t group_index = (gpio_pin / 32);
    327c:	0953      	lsrs	r3, r2, #5
	if (port_index < PORT_INST_NUM) {
    327e:	09d1      	lsrs	r1, r2, #7
    3280:	d108      	bne.n	3294 <sd_mmc_spi_init+0xb0>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3282:	311f      	adds	r1, #31
    3284:	400a      	ands	r2, r1
    3286:	4095      	lsls	r5, r2
		port_base->OUTSET.reg = pin_mask;
    3288:	4a13      	ldr	r2, [pc, #76]	; (32d8 <sd_mmc_spi_init+0xf4>)
    328a:	01db      	lsls	r3, r3, #7
    328c:	189b      	adds	r3, r3, r2
    328e:	619d      	str	r5, [r3, #24]
	spi_attach_slave(&sd_mmc_spi_devices[0], &slave_configs[0]);
}
    3290:	b011      	add	sp, #68	; 0x44
    3292:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3294:	61a4      	str	r4, [r4, #24]
    3296:	deff      	udf	#255	; 0xff
    3298:	200002b9 	.word	0x200002b9
    329c:	00004991 	.word	0x00004991
    32a0:	00100002 	.word	0x00100002
    32a4:	20000278 	.word	0x20000278
    32a8:	00110002 	.word	0x00110002
    32ac:	00120002 	.word	0x00120002
    32b0:	42000c00 	.word	0x42000c00
    32b4:	00130002 	.word	0x00130002
    32b8:	00061a80 	.word	0x00061a80
    32bc:	000028ed 	.word	0x000028ed
    32c0:	00002e35 	.word	0x00002e35
    32c4:	e000e100 	.word	0xe000e100
    32c8:	20000008 	.word	0x20000008
    32cc:	200002c4 	.word	0x200002c4
    32d0:	200002b6 	.word	0x200002b6
    32d4:	00003935 	.word	0x00003935
    32d8:	41004400 	.word	0x41004400

000032dc <sd_mmc_spi_select_device>:
void sd_mmc_spi_select_device(uint8_t slot, uint32_t clock, uint8_t bus_width,
		bool high_speed)
{
	UNUSED(bus_width);
	UNUSED(high_speed);
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    32dc:	2200      	movs	r2, #0
    32de:	4b0e      	ldr	r3, [pc, #56]	; (3318 <sd_mmc_spi_select_device+0x3c>)
{
    32e0:	b570      	push	{r4, r5, r6, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    32e2:	701a      	strb	r2, [r3, #0]
    32e4:	4b0d      	ldr	r3, [pc, #52]	; (331c <sd_mmc_spi_select_device+0x40>)
{
    32e6:	0006      	movs	r6, r0
    32e8:	000c      	movs	r4, r1
    32ea:	4299      	cmp	r1, r3
    32ec:	d900      	bls.n	32f0 <sd_mmc_spi_select_device+0x14>
    32ee:	001c      	movs	r4, r3
#ifdef SD_MMC_SPI_MAX_CLOCK
	if (clock > SD_MMC_SPI_MAX_CLOCK) {
		clock = SD_MMC_SPI_MAX_CLOCK;
	}
#endif
	while (STATUS_ERR_INVALID_ARG == spi_set_baudrate(&sd_mmc_master, clock)) {
    32f0:	4d0b      	ldr	r5, [pc, #44]	; (3320 <sd_mmc_spi_select_device+0x44>)
    32f2:	0021      	movs	r1, r4
    32f4:	0028      	movs	r0, r5
    32f6:	4b0b      	ldr	r3, [pc, #44]	; (3324 <sd_mmc_spi_select_device+0x48>)
    32f8:	4798      	blx	r3
    32fa:	2817      	cmp	r0, #23
    32fc:	d008      	beq.n	3310 <sd_mmc_spi_select_device+0x34>
		clock -= clock / 8;
	}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], true);
    32fe:	2103      	movs	r1, #3
    3300:	434e      	muls	r6, r1
    3302:	4909      	ldr	r1, [pc, #36]	; (3328 <sd_mmc_spi_select_device+0x4c>)
    3304:	0028      	movs	r0, r5
    3306:	1989      	adds	r1, r1, r6
    3308:	2201      	movs	r2, #1
    330a:	4b08      	ldr	r3, [pc, #32]	; (332c <sd_mmc_spi_select_device+0x50>)
    330c:	4798      	blx	r3
}
    330e:	bd70      	pop	{r4, r5, r6, pc}
		clock -= clock / 8;
    3310:	08e3      	lsrs	r3, r4, #3
    3312:	1ae4      	subs	r4, r4, r3
    3314:	e7ec      	b.n	32f0 <sd_mmc_spi_select_device+0x14>
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	200002b9 	.word	0x200002b9
    331c:	00b71b00 	.word	0x00b71b00
    3320:	20000278 	.word	0x20000278
    3324:	00002861 	.word	0x00002861
    3328:	200002b6 	.word	0x200002b6
    332c:	00002b45 	.word	0x00002b45

00003330 <sd_mmc_spi_deselect_device>:

void sd_mmc_spi_deselect_device(uint8_t slot)
{
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    3330:	2103      	movs	r1, #3
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3332:	2200      	movs	r2, #0
{
    3334:	b510      	push	{r4, lr}
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    3336:	4348      	muls	r0, r1
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3338:	4b03      	ldr	r3, [pc, #12]	; (3348 <sd_mmc_spi_deselect_device+0x18>)
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    333a:	4904      	ldr	r1, [pc, #16]	; (334c <sd_mmc_spi_deselect_device+0x1c>)
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    333c:	701a      	strb	r2, [r3, #0]
	spi_select_slave(&sd_mmc_master, &sd_mmc_spi_devices[slot], false);
    333e:	1809      	adds	r1, r1, r0
    3340:	4b03      	ldr	r3, [pc, #12]	; (3350 <sd_mmc_spi_deselect_device+0x20>)
    3342:	4804      	ldr	r0, [pc, #16]	; (3354 <sd_mmc_spi_deselect_device+0x24>)
    3344:	4798      	blx	r3
}
    3346:	bd10      	pop	{r4, pc}
    3348:	200002b9 	.word	0x200002b9
    334c:	200002b6 	.word	0x200002b6
    3350:	00002b45 	.word	0x00002b45
    3354:	20000278 	.word	0x20000278

00003358 <sd_mmc_spi_send_clock>:

void sd_mmc_spi_send_clock(void)
{
    3358:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint8_t i;
	uint8_t dummy = 0xFF;
    335a:	466b      	mov	r3, sp
    335c:	1ddd      	adds	r5, r3, #7
    335e:	23ff      	movs	r3, #255	; 0xff

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3360:	2200      	movs	r2, #0
    3362:	240a      	movs	r4, #10
	uint8_t dummy = 0xFF;
    3364:	702b      	strb	r3, [r5, #0]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3366:	4b06      	ldr	r3, [pc, #24]	; (3380 <sd_mmc_spi_send_clock+0x28>)
    3368:	701a      	strb	r2, [r3, #0]
    336a:	3c01      	subs	r4, #1
	//! Send 80 cycles
	for (i = 0; i < 10; i++) {
		spi_write_buffer_wait(&sd_mmc_master, &dummy, 1); // 8 cycles
    336c:	2201      	movs	r2, #1
    336e:	0029      	movs	r1, r5
    3370:	4804      	ldr	r0, [pc, #16]	; (3384 <sd_mmc_spi_send_clock+0x2c>)
    3372:	4b05      	ldr	r3, [pc, #20]	; (3388 <sd_mmc_spi_send_clock+0x30>)
    3374:	b2e4      	uxtb	r4, r4
    3376:	4798      	blx	r3
	for (i = 0; i < 10; i++) {
    3378:	2c00      	cmp	r4, #0
    337a:	d1f6      	bne.n	336a <sd_mmc_spi_send_clock+0x12>
	}
}
    337c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    337e:	46c0      	nop			; (mov r8, r8)
    3380:	200002b9 	.word	0x200002b9
    3384:	20000278 	.word	0x20000278
    3388:	00002bc1 	.word	0x00002bc1

0000338c <sd_mmc_spi_adtc_start>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
}

bool sd_mmc_spi_adtc_start(sdmmc_cmd_def_t cmd, uint32_t arg,
		uint16_t block_size, uint16_t nb_block, bool access_block)
{
    338c:	b5f0      	push	{r4, r5, r6, r7, lr}
    338e:	b089      	sub	sp, #36	; 0x24
    3390:	9202      	str	r2, [sp, #8]
	uint8_t dummy = 0xFF;
    3392:	22ff      	movs	r2, #255	; 0xff
{
    3394:	9303      	str	r3, [sp, #12]
	uint8_t dummy = 0xFF;
    3396:	ab04      	add	r3, sp, #16
    3398:	719a      	strb	r2, [r3, #6]
	uint8_t r1; //! R1 response
	uint16_t dummy2 = 0xFF;

	UNUSED(access_block);
	Assert(cmd & SDMMC_RESP_PRESENT); // Always a response in SPI mode
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    339a:	2200      	movs	r2, #0

	// Encode SPI command
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    339c:	243f      	movs	r4, #63	; 0x3f
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    339e:	4b49      	ldr	r3, [pc, #292]	; (34c4 <sd_mmc_spi_adtc_start+0x138>)
{
    33a0:	9001      	str	r0, [sp, #4]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    33a2:	701a      	strb	r2, [r3, #0]
	cmd_token[0] = SPI_CMD_ENCODE(SDMMC_CMD_GET_INDEX(cmd));
    33a4:	9b01      	ldr	r3, [sp, #4]
    33a6:	a806      	add	r0, sp, #24
    33a8:	401c      	ands	r4, r3
    33aa:	2340      	movs	r3, #64	; 0x40
    33ac:	4323      	orrs	r3, r4
    33ae:	7003      	strb	r3, [r0, #0]
	cmd_token[1] = arg >> 24;
    33b0:	0e0b      	lsrs	r3, r1, #24
    33b2:	7043      	strb	r3, [r0, #1]
	cmd_token[2] = arg >> 16;
    33b4:	0c0b      	lsrs	r3, r1, #16
    33b6:	7083      	strb	r3, [r0, #2]
	cmd_token[3] = arg >> 8;
    33b8:	0a0b      	lsrs	r3, r1, #8
    33ba:	70c3      	strb	r3, [r0, #3]
		value = *buf++;
    33bc:	2608      	movs	r6, #8
	crc = 0;
    33be:	0013      	movs	r3, r2
				crc ^= 0x09;
    33c0:	2709      	movs	r7, #9
	cmd_token[4] = arg;
    33c2:	7101      	strb	r1, [r0, #4]
		value = *buf++;
    33c4:	0031      	movs	r1, r6
    33c6:	5c84      	ldrb	r4, [r0, r2]
			crc <<= 1;
    33c8:	005b      	lsls	r3, r3, #1
    33ca:	b2db      	uxtb	r3, r3
			if ((value & 0x80) ^ (crc & 0x80)) {
    33cc:	001d      	movs	r5, r3
    33ce:	4065      	eors	r5, r4
    33d0:	062d      	lsls	r5, r5, #24
    33d2:	d500      	bpl.n	33d6 <sd_mmc_spi_adtc_start+0x4a>
				crc ^= 0x09;
    33d4:	407b      	eors	r3, r7
    33d6:	3901      	subs	r1, #1
			value <<= 1;
    33d8:	0064      	lsls	r4, r4, #1
    33da:	b2c9      	uxtb	r1, r1
    33dc:	b2e4      	uxtb	r4, r4
		for (i = 0; i < 8; i++) {
    33de:	2900      	cmp	r1, #0
    33e0:	d1f2      	bne.n	33c8 <sd_mmc_spi_adtc_start+0x3c>
    33e2:	3201      	adds	r2, #1
	while (size--) {
    33e4:	2a05      	cmp	r2, #5
    33e6:	d1ed      	bne.n	33c4 <sd_mmc_spi_adtc_start+0x38>
	crc = (crc << 1) | 1;
    33e8:	2401      	movs	r4, #1
    33ea:	005b      	lsls	r3, r3, #1
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);

	// 8 cycles to respect Ncs timing
	// Note: This byte does not include start bit "0",
	// thus it is ignored by card.
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    33ec:	4f36      	ldr	r7, [pc, #216]	; (34c8 <sd_mmc_spi_adtc_start+0x13c>)
	crc = (crc << 1) | 1;
    33ee:	4323      	orrs	r3, r4
	cmd_token[5] = sd_mmc_spi_crc7(cmd_token, 5);
    33f0:	ae06      	add	r6, sp, #24
    33f2:	7173      	strb	r3, [r6, #5]
	spi_write_buffer_wait(&sd_mmc_master, &dummy, 1);
    33f4:	ab04      	add	r3, sp, #16
    33f6:	1d99      	adds	r1, r3, #6
    33f8:	0022      	movs	r2, r4
    33fa:	4d34      	ldr	r5, [pc, #208]	; (34cc <sd_mmc_spi_adtc_start+0x140>)
    33fc:	0038      	movs	r0, r7
    33fe:	47a8      	blx	r5
	// Send command
	spi_write_buffer_wait(&sd_mmc_master, cmd_token, sizeof(cmd_token));
    3400:	0031      	movs	r1, r6
    3402:	2206      	movs	r2, #6
    3404:	0038      	movs	r0, r7
    3406:	47a8      	blx	r5

	// Wait for response
	// Two retry will be done to manage the Ncr timing between command and reponse
	// Ncr: Min. 1x8 clock  cycle, Max. 8x8 clock cycles
	// WORKAROUND for no compliance card (Atmel Internal ref. SD13):
	r1 = 0xFF;
    3408:	ab04      	add	r3, sp, #16
    340a:	1dd9      	adds	r1, r3, #7
    340c:	23ff      	movs	r3, #255	; 0xff
	// Ignore first byte because Ncr min. = 8 clock cylces
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    340e:	0022      	movs	r2, r4
    3410:	0038      	movs	r0, r7
    3412:	4c2f      	ldr	r4, [pc, #188]	; (34d0 <sd_mmc_spi_adtc_start+0x144>)
	r1 = 0xFF;
    3414:	700b      	strb	r3, [r1, #0]
	spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    3416:	47a0      	blx	r4
    3418:	2407      	movs	r4, #7
			dummy2);
	ncr_timeout = 7;
	while (1) {
		spi_read_buffer_wait(&sd_mmc_master, &r1, 1,
    341a:	ab04      	add	r3, sp, #16
    341c:	1dde      	adds	r6, r3, #7
    341e:	2201      	movs	r2, #1
    3420:	23ff      	movs	r3, #255	; 0xff
    3422:	0031      	movs	r1, r6
    3424:	4828      	ldr	r0, [pc, #160]	; (34c8 <sd_mmc_spi_adtc_start+0x13c>)
    3426:	4d2a      	ldr	r5, [pc, #168]	; (34d0 <sd_mmc_spi_adtc_start+0x144>)
    3428:	47a8      	blx	r5
			dummy2); // 8 cycles
		if ((r1 & R1_SPI_ERROR) == 0) {
    342a:	7833      	ldrb	r3, [r6, #0]
    342c:	b25a      	sxtb	r2, r3
    342e:	2a00      	cmp	r2, #0
    3430:	da09      	bge.n	3446 <sd_mmc_spi_adtc_start+0xba>
    3432:	3c01      	subs	r4, #1
    3434:	b2e4      	uxtb	r4, r4
			// Valid R1 response
			break;
		}
		if (--ncr_timeout == 0) {
    3436:	2c00      	cmp	r4, #0
    3438:	d1ef      	bne.n	341a <sd_mmc_spi_adtc_start+0x8e>
			// Here Valid R1 response received
			sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lX, R1 timeout\n\r",
					__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg);
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_TIMEOUT;
    343a:	2202      	movs	r2, #2
	// Manage error in R1
	if (r1 & R1_SPI_COM_CRC) {
		sd_mmc_spi_debug("%s: cmd %02d, arg 0x%08lx, r1 0x%02x, R1_SPI_COM_CRC\n\r",
				__func__, (int)SDMMC_CMD_GET_INDEX(cmd), arg, r1);
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
		return false;
    343c:	2000      	movs	r0, #0
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    343e:	4b21      	ldr	r3, [pc, #132]	; (34c4 <sd_mmc_spi_adtc_start+0x138>)
    3440:	701a      	strb	r2, [r3, #0]

	sd_mmc_spi_block_size = block_size;
	sd_mmc_spi_nb_block = nb_block;
	sd_mmc_spi_transfert_pos = 0;
	return true; // Command complete
}
    3442:	b009      	add	sp, #36	; 0x24
    3444:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (r1 & R1_SPI_COM_CRC) {
    3446:	2408      	movs	r4, #8
	sd_mmc_spi_response_32 = r1;
    3448:	4e22      	ldr	r6, [pc, #136]	; (34d4 <sd_mmc_spi_adtc_start+0x148>)
	if (r1 & R1_SPI_COM_CRC) {
    344a:	401c      	ands	r4, r3
	sd_mmc_spi_response_32 = r1;
    344c:	6033      	str	r3, [r6, #0]
	if (r1 & R1_SPI_COM_CRC) {
    344e:	d001      	beq.n	3454 <sd_mmc_spi_adtc_start+0xc8>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_CRC;
    3450:	2206      	movs	r2, #6
    3452:	e7f3      	b.n	343c <sd_mmc_spi_adtc_start+0xb0>
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    3454:	2004      	movs	r0, #4
		sd_mmc_spi_err = SD_MMC_SPI_ERR_ILLEGAL_COMMAND;
    3456:	2209      	movs	r2, #9
	if (r1 & R1_SPI_ILLEGAL_COMMAND) {
    3458:	4018      	ands	r0, r3
    345a:	d1ef      	bne.n	343c <sd_mmc_spi_adtc_start+0xb0>
	if (r1 & ~R1_SPI_IDLE) {
    345c:	2201      	movs	r2, #1
    345e:	4393      	bics	r3, r2
    3460:	d002      	beq.n	3468 <sd_mmc_spi_adtc_start+0xdc>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    3462:	4b18      	ldr	r3, [pc, #96]	; (34c4 <sd_mmc_spi_adtc_start+0x138>)
    3464:	701a      	strb	r2, [r3, #0]
			return false;
    3466:	e7ec      	b.n	3442 <sd_mmc_spi_adtc_start+0xb6>
	if (cmd & SDMMC_RESP_BUSY) {
    3468:	9b01      	ldr	r3, [sp, #4]
    346a:	049b      	lsls	r3, r3, #18
    346c:	d505      	bpl.n	347a <sd_mmc_spi_adtc_start+0xee>
		if (!sd_mmc_spi_wait_busy()) {
    346e:	4b1a      	ldr	r3, [pc, #104]	; (34d8 <sd_mmc_spi_adtc_start+0x14c>)
    3470:	4798      	blx	r3
    3472:	2800      	cmp	r0, #0
    3474:	d101      	bne.n	347a <sd_mmc_spi_adtc_start+0xee>
			sd_mmc_spi_err = SD_MMC_SPI_ERR_RESP_BUSY_TIMEOUT;
    3476:	2203      	movs	r2, #3
    3478:	e7f3      	b.n	3462 <sd_mmc_spi_adtc_start+0xd6>
	if (cmd & SDMMC_RESP_8) {
    347a:	9b01      	ldr	r3, [sp, #4]
    347c:	059b      	lsls	r3, r3, #22
    347e:	d507      	bpl.n	3490 <sd_mmc_spi_adtc_start+0x104>
		sd_mmc_spi_response_32 = 0;
    3480:	2300      	movs	r3, #0
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    3482:	2201      	movs	r2, #1
		sd_mmc_spi_response_32 = 0;
    3484:	6033      	str	r3, [r6, #0]
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 1,
    3486:	0031      	movs	r1, r6
    3488:	33ff      	adds	r3, #255	; 0xff
    348a:	480f      	ldr	r0, [pc, #60]	; (34c8 <sd_mmc_spi_adtc_start+0x13c>)
    348c:	4c10      	ldr	r4, [pc, #64]	; (34d0 <sd_mmc_spi_adtc_start+0x144>)
    348e:	47a0      	blx	r4
	if (cmd & SDMMC_RESP_32) {
    3490:	9b01      	ldr	r3, [sp, #4]
    3492:	055b      	lsls	r3, r3, #21
    3494:	d509      	bpl.n	34aa <sd_mmc_spi_adtc_start+0x11e>
		spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&sd_mmc_spi_response_32, 4,
    3496:	4c0f      	ldr	r4, [pc, #60]	; (34d4 <sd_mmc_spi_adtc_start+0x148>)
    3498:	23ff      	movs	r3, #255	; 0xff
    349a:	2204      	movs	r2, #4
    349c:	0021      	movs	r1, r4
    349e:	0038      	movs	r0, r7
    34a0:	4d0b      	ldr	r5, [pc, #44]	; (34d0 <sd_mmc_spi_adtc_start+0x144>)
    34a2:	47a8      	blx	r5
		sd_mmc_spi_response_32 = be32_to_cpu(sd_mmc_spi_response_32);
    34a4:	6823      	ldr	r3, [r4, #0]
    34a6:	ba1b      	rev	r3, r3
    34a8:	6023      	str	r3, [r4, #0]
	sd_mmc_spi_block_size = block_size;
    34aa:	466a      	mov	r2, sp
    34ac:	4b0b      	ldr	r3, [pc, #44]	; (34dc <sd_mmc_spi_adtc_start+0x150>)
    34ae:	8912      	ldrh	r2, [r2, #8]
	return true; // Command complete
    34b0:	2001      	movs	r0, #1
	sd_mmc_spi_block_size = block_size;
    34b2:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_nb_block = nb_block;
    34b4:	466a      	mov	r2, sp
    34b6:	4b0a      	ldr	r3, [pc, #40]	; (34e0 <sd_mmc_spi_adtc_start+0x154>)
    34b8:	8992      	ldrh	r2, [r2, #12]
    34ba:	801a      	strh	r2, [r3, #0]
	sd_mmc_spi_transfert_pos = 0;
    34bc:	2200      	movs	r2, #0
    34be:	4b09      	ldr	r3, [pc, #36]	; (34e4 <sd_mmc_spi_adtc_start+0x158>)
    34c0:	601a      	str	r2, [r3, #0]
	return true; // Command complete
    34c2:	e7be      	b.n	3442 <sd_mmc_spi_adtc_start+0xb6>
    34c4:	200002b9 	.word	0x200002b9
    34c8:	20000278 	.word	0x20000278
    34cc:	00002bc1 	.word	0x00002bc1
    34d0:	00002ab5 	.word	0x00002ab5
    34d4:	200002bc 	.word	0x200002bc
    34d8:	00003061 	.word	0x00003061
    34dc:	200002b4 	.word	0x200002b4
    34e0:	200002ba 	.word	0x200002ba
    34e4:	200002c0 	.word	0x200002c0

000034e8 <sd_mmc_spi_send_cmd>:
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    34e8:	2200      	movs	r2, #0
{
    34ea:	b513      	push	{r0, r1, r4, lr}
	return sd_mmc_spi_adtc_start(cmd, arg, 0, 0, false);
    34ec:	0013      	movs	r3, r2
    34ee:	9200      	str	r2, [sp, #0]
    34f0:	4c01      	ldr	r4, [pc, #4]	; (34f8 <sd_mmc_spi_send_cmd+0x10>)
    34f2:	47a0      	blx	r4
}
    34f4:	bd16      	pop	{r1, r2, r4, pc}
    34f6:	46c0      	nop			; (mov r8, r8)
    34f8:	0000338d 	.word	0x0000338d

000034fc <sd_mmc_spi_get_response>:

uint32_t sd_mmc_spi_get_response(void)
{
	return sd_mmc_spi_response_32;
    34fc:	4b01      	ldr	r3, [pc, #4]	; (3504 <sd_mmc_spi_get_response+0x8>)
    34fe:	6818      	ldr	r0, [r3, #0]
}
    3500:	4770      	bx	lr
    3502:	46c0      	nop			; (mov r8, r8)
    3504:	200002bc 	.word	0x200002bc

00003508 <sd_mmc_spi_read_word>:

bool sd_mmc_spi_read_word(uint32_t* value)
{
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3508:	2200      	movs	r2, #0
{
    350a:	b5f0      	push	{r4, r5, r6, r7, lr}
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    350c:	4b13      	ldr	r3, [pc, #76]	; (355c <sd_mmc_spi_read_word+0x54>)
	Assert(sd_mmc_spi_nb_block >
			(sd_mmc_spi_transfert_pos / sd_mmc_spi_block_size));

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    350e:	4c14      	ldr	r4, [pc, #80]	; (3560 <sd_mmc_spi_read_word+0x58>)
    3510:	4e14      	ldr	r6, [pc, #80]	; (3564 <sd_mmc_spi_read_word+0x5c>)
{
    3512:	b085      	sub	sp, #20
    3514:	9001      	str	r0, [sp, #4]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3516:	701a      	strb	r2, [r3, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3518:	8831      	ldrh	r1, [r6, #0]
    351a:	4f13      	ldr	r7, [pc, #76]	; (3568 <sd_mmc_spi_read_word+0x60>)
    351c:	6820      	ldr	r0, [r4, #0]
    351e:	47b8      	blx	r7
    3520:	2900      	cmp	r1, #0
    3522:	d00e      	beq.n	3542 <sd_mmc_spi_read_word+0x3a>
		if (!sd_mmc_spi_start_read_block()) {
			return false;
		}
	}
	// Read data
	spi_read_buffer_wait(&sd_mmc_master, (uint8_t *)&value, 4,
    3524:	23ff      	movs	r3, #255	; 0xff
    3526:	a901      	add	r1, sp, #4
    3528:	2204      	movs	r2, #4
    352a:	4810      	ldr	r0, [pc, #64]	; (356c <sd_mmc_spi_read_word+0x64>)
    352c:	4d10      	ldr	r5, [pc, #64]	; (3570 <sd_mmc_spi_read_word+0x68>)
    352e:	47a8      	blx	r5
			dummy);
	*value = le32_to_cpu(*value);
	sd_mmc_spi_transfert_pos += 4;
    3530:	6823      	ldr	r3, [r4, #0]

	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3532:	8831      	ldrh	r1, [r6, #0]
	sd_mmc_spi_transfert_pos += 4;
    3534:	1d18      	adds	r0, r3, #4
    3536:	6020      	str	r0, [r4, #0]
	if (!(sd_mmc_spi_transfert_pos % sd_mmc_spi_block_size)) {
    3538:	47b8      	blx	r7
    353a:	2900      	cmp	r1, #0
    353c:	d007      	beq.n	354e <sd_mmc_spi_read_word+0x46>
		// End of block
		sd_mmc_spi_stop_read_block();
	}
	return true;
    353e:	2001      	movs	r0, #1
    3540:	e003      	b.n	354a <sd_mmc_spi_read_word+0x42>
		if (!sd_mmc_spi_start_read_block()) {
    3542:	4b0c      	ldr	r3, [pc, #48]	; (3574 <sd_mmc_spi_read_word+0x6c>)
    3544:	4798      	blx	r3
    3546:	2800      	cmp	r0, #0
    3548:	d1ec      	bne.n	3524 <sd_mmc_spi_read_word+0x1c>
}
    354a:	b005      	add	sp, #20
    354c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    354e:	23ff      	movs	r3, #255	; 0xff
    3550:	2202      	movs	r2, #2
    3552:	a903      	add	r1, sp, #12
    3554:	4c06      	ldr	r4, [pc, #24]	; (3570 <sd_mmc_spi_read_word+0x68>)
    3556:	4805      	ldr	r0, [pc, #20]	; (356c <sd_mmc_spi_read_word+0x64>)
    3558:	47a0      	blx	r4
    355a:	e7f0      	b.n	353e <sd_mmc_spi_read_word+0x36>
    355c:	200002b9 	.word	0x200002b9
    3560:	200002c0 	.word	0x200002c0
    3564:	200002b4 	.word	0x200002b4
    3568:	000048fd 	.word	0x000048fd
    356c:	20000278 	.word	0x20000278
    3570:	00002ab5 	.word	0x00002ab5
    3574:	000030b1 	.word	0x000030b1

00003578 <sd_mmc_spi_start_read_blocks>:
	}
	return sd_mmc_spi_stop_multiwrite_block();
}

bool sd_mmc_spi_start_read_blocks(void *dest, uint16_t nb_block)
{
    3578:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t pos;
	uint16_t dummy = 0xFF;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    357a:	2400      	movs	r4, #0
{
    357c:	000d      	movs	r5, r1
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    357e:	4b12      	ldr	r3, [pc, #72]	; (35c8 <sd_mmc_spi_start_read_blocks+0x50>)
{
    3580:	b085      	sub	sp, #20
    3582:	9001      	str	r0, [sp, #4]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    3584:	701c      	strb	r4, [r3, #0]
	pos = 0;
	while (nb_block--) {
    3586:	2d00      	cmp	r5, #0
    3588:	d102      	bne.n	3590 <sd_mmc_spi_start_read_blocks+0x18>
		pos += sd_mmc_spi_block_size;
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;

		sd_mmc_spi_stop_read_block();
	}
	return true;
    358a:	2001      	movs	r0, #1
}
    358c:	b005      	add	sp, #20
    358e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!sd_mmc_spi_start_read_block()) {
    3590:	4b0e      	ldr	r3, [pc, #56]	; (35cc <sd_mmc_spi_start_read_blocks+0x54>)
    3592:	4798      	blx	r3
    3594:	3d01      	subs	r5, #1
    3596:	b2ad      	uxth	r5, r5
    3598:	2800      	cmp	r0, #0
    359a:	d0f7      	beq.n	358c <sd_mmc_spi_start_read_blocks+0x14>
		spi_read_buffer_wait(&sd_mmc_master, &((uint8_t*)dest)[pos],
    359c:	4f0c      	ldr	r7, [pc, #48]	; (35d0 <sd_mmc_spi_start_read_blocks+0x58>)
    359e:	9b01      	ldr	r3, [sp, #4]
    35a0:	883a      	ldrh	r2, [r7, #0]
    35a2:	1919      	adds	r1, r3, r4
    35a4:	4e0b      	ldr	r6, [pc, #44]	; (35d4 <sd_mmc_spi_start_read_blocks+0x5c>)
    35a6:	23ff      	movs	r3, #255	; 0xff
    35a8:	480b      	ldr	r0, [pc, #44]	; (35d8 <sd_mmc_spi_start_read_blocks+0x60>)
    35aa:	47b0      	blx	r6
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    35ac:	4a0b      	ldr	r2, [pc, #44]	; (35dc <sd_mmc_spi_start_read_blocks+0x64>)
		pos += sd_mmc_spi_block_size;
    35ae:	883b      	ldrh	r3, [r7, #0]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    35b0:	6811      	ldr	r1, [r2, #0]
		pos += sd_mmc_spi_block_size;
    35b2:	18e4      	adds	r4, r4, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    35b4:	18cb      	adds	r3, r1, r3
    35b6:	6013      	str	r3, [r2, #0]
	spi_read_buffer_wait(&sd_mmc_master, crc, 2,
    35b8:	a903      	add	r1, sp, #12
    35ba:	23ff      	movs	r3, #255	; 0xff
    35bc:	2202      	movs	r2, #2
    35be:	4e05      	ldr	r6, [pc, #20]	; (35d4 <sd_mmc_spi_start_read_blocks+0x5c>)
    35c0:	4805      	ldr	r0, [pc, #20]	; (35d8 <sd_mmc_spi_start_read_blocks+0x60>)
    35c2:	47b0      	blx	r6
    35c4:	e7df      	b.n	3586 <sd_mmc_spi_start_read_blocks+0xe>
    35c6:	46c0      	nop			; (mov r8, r8)
    35c8:	200002b9 	.word	0x200002b9
    35cc:	000030b1 	.word	0x000030b1
    35d0:	200002b4 	.word	0x200002b4
    35d4:	00002ab5 	.word	0x00002ab5
    35d8:	20000278 	.word	0x20000278
    35dc:	200002c0 	.word	0x200002c0

000035e0 <sd_mmc_spi_wait_end_of_read_blocks>:

bool sd_mmc_spi_wait_end_of_read_blocks(void)
{
	return true;
}
    35e0:	2001      	movs	r0, #1
    35e2:	4770      	bx	lr

000035e4 <sd_mmc_spi_start_write_blocks>:

bool sd_mmc_spi_start_write_blocks(const void *src, uint16_t nb_block)
{
    35e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t pos;

	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    35e6:	2400      	movs	r4, #0
    35e8:	4d13      	ldr	r5, [pc, #76]	; (3638 <sd_mmc_spi_start_write_blocks+0x54>)
{
    35ea:	9001      	str	r0, [sp, #4]
	sd_mmc_spi_err = SD_MMC_SPI_NO_ERR;
    35ec:	702c      	strb	r4, [r5, #0]
	pos = 0;
	while (nb_block--) {
    35ee:	1e4f      	subs	r7, r1, #1
    35f0:	b2bf      	uxth	r7, r7
    35f2:	2900      	cmp	r1, #0
    35f4:	d101      	bne.n	35fa <sd_mmc_spi_start_write_blocks+0x16>
				sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
				return false;
			}
		}
	}
	return true;
    35f6:	2001      	movs	r0, #1
    35f8:	e01a      	b.n	3630 <sd_mmc_spi_start_write_blocks+0x4c>
		sd_mmc_spi_start_write_block();
    35fa:	4b10      	ldr	r3, [pc, #64]	; (363c <sd_mmc_spi_start_write_blocks+0x58>)
    35fc:	4798      	blx	r3
		spi_write_buffer_wait(&sd_mmc_master, &((uint8_t*)src)[pos],
    35fe:	4e10      	ldr	r6, [pc, #64]	; (3640 <sd_mmc_spi_start_write_blocks+0x5c>)
    3600:	9b01      	ldr	r3, [sp, #4]
    3602:	8832      	ldrh	r2, [r6, #0]
    3604:	1919      	adds	r1, r3, r4
    3606:	480f      	ldr	r0, [pc, #60]	; (3644 <sd_mmc_spi_start_write_blocks+0x60>)
    3608:	4b0f      	ldr	r3, [pc, #60]	; (3648 <sd_mmc_spi_start_write_blocks+0x64>)
    360a:	4798      	blx	r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    360c:	4a0f      	ldr	r2, [pc, #60]	; (364c <sd_mmc_spi_start_write_blocks+0x68>)
		pos += sd_mmc_spi_block_size;
    360e:	8833      	ldrh	r3, [r6, #0]
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    3610:	6811      	ldr	r1, [r2, #0]
		pos += sd_mmc_spi_block_size;
    3612:	18e4      	adds	r4, r4, r3
		sd_mmc_spi_transfert_pos += sd_mmc_spi_block_size;
    3614:	18cb      	adds	r3, r1, r3
    3616:	6013      	str	r3, [r2, #0]
		if (!sd_mmc_spi_stop_write_block()) {
    3618:	4b0d      	ldr	r3, [pc, #52]	; (3650 <sd_mmc_spi_start_write_blocks+0x6c>)
    361a:	4798      	blx	r3
    361c:	2800      	cmp	r0, #0
    361e:	d007      	beq.n	3630 <sd_mmc_spi_start_write_blocks+0x4c>
		if (nb_block) {
    3620:	2f00      	cmp	r7, #0
    3622:	d006      	beq.n	3632 <sd_mmc_spi_start_write_blocks+0x4e>
			if (!sd_mmc_spi_wait_busy()) {
    3624:	4b0b      	ldr	r3, [pc, #44]	; (3654 <sd_mmc_spi_start_write_blocks+0x70>)
    3626:	4798      	blx	r3
    3628:	2800      	cmp	r0, #0
    362a:	d102      	bne.n	3632 <sd_mmc_spi_start_write_blocks+0x4e>
				sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    362c:	2305      	movs	r3, #5
    362e:	702b      	strb	r3, [r5, #0]
}
    3630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
{
    3632:	0039      	movs	r1, r7
    3634:	e7db      	b.n	35ee <sd_mmc_spi_start_write_blocks+0xa>
    3636:	46c0      	nop			; (mov r8, r8)
    3638:	200002b9 	.word	0x200002b9
    363c:	00003025 	.word	0x00003025
    3640:	200002b4 	.word	0x200002b4
    3644:	20000278 	.word	0x20000278
    3648:	00002bc1 	.word	0x00002bc1
    364c:	200002c0 	.word	0x200002c0
    3650:	00003111 	.word	0x00003111
    3654:	00003061 	.word	0x00003061

00003658 <sd_mmc_spi_wait_end_of_write_blocks>:

bool sd_mmc_spi_wait_end_of_write_blocks(void)
{
    3658:	b510      	push	{r4, lr}
	// Wait busy due to data programmation of last block writed
	if (!sd_mmc_spi_wait_busy()) {
    365a:	4b05      	ldr	r3, [pc, #20]	; (3670 <sd_mmc_spi_wait_end_of_write_blocks+0x18>)
    365c:	4798      	blx	r3
    365e:	2800      	cmp	r0, #0
    3660:	d103      	bne.n	366a <sd_mmc_spi_wait_end_of_write_blocks+0x12>
		sd_mmc_spi_err = SD_MMC_SPI_ERR_WRITE_TIMEOUT;
    3662:	2205      	movs	r2, #5
    3664:	4b03      	ldr	r3, [pc, #12]	; (3674 <sd_mmc_spi_wait_end_of_write_blocks+0x1c>)
    3666:	701a      	strb	r2, [r3, #0]
		sd_mmc_spi_debug("%s: Write blocks timeout\n\r", __func__);
		return false;
	}
	return sd_mmc_spi_stop_multiwrite_block();
}
    3668:	bd10      	pop	{r4, pc}
	return sd_mmc_spi_stop_multiwrite_block();
    366a:	4b03      	ldr	r3, [pc, #12]	; (3678 <sd_mmc_spi_wait_end_of_write_blocks+0x20>)
    366c:	4798      	blx	r3
    366e:	e7fb      	b.n	3668 <sd_mmc_spi_wait_end_of_write_blocks+0x10>
    3670:	00003061 	.word	0x00003061
    3674:	200002b9 	.word	0x200002b9
    3678:	00003175 	.word	0x00003175

0000367c <mem_test_unit_ready>:
  return LUN_ID_0;
}


Ctrl_status mem_test_unit_ready(U8 lun)
{
    367c:	0003      	movs	r3, r0
    367e:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    3680:	2001      	movs	r0, #1
    3682:	2b00      	cmp	r3, #0
    3684:	d101      	bne.n	368a <mem_test_unit_ready+0xe>
    3686:	4b01      	ldr	r3, [pc, #4]	; (368c <mem_test_unit_ready+0x10>)
    3688:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return status;
}
    368a:	bd10      	pop	{r4, pc}
    368c:	00000909 	.word	0x00000909

00003690 <mem_read_capacity>:


Ctrl_status mem_read_capacity(U8 lun, U32 *u32_nb_sector)
{
    3690:	b510      	push	{r4, lr}
  Ctrl_status status;

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  status =
    3692:	2301      	movs	r3, #1
    3694:	2800      	cmp	r0, #0
    3696:	d103      	bne.n	36a0 <mem_read_capacity+0x10>
    3698:	4b02      	ldr	r3, [pc, #8]	; (36a4 <mem_read_capacity+0x14>)
    369a:	0008      	movs	r0, r1
    369c:	4798      	blx	r3
    369e:	0003      	movs	r3, r0
#endif

  Ctrl_access_unlock();

  return status;
}
    36a0:	0018      	movs	r0, r3
    36a2:	bd10      	pop	{r4, pc}
    36a4:	00000939 	.word	0x00000939

000036a8 <mem_sector_size>:

  if (!Ctrl_access_lock()) return 0;

  sector_size =
#if MAX_LUN
              (lun < MAX_LUN) ? 1 :
    36a8:	4243      	negs	r3, r0
    36aa:	4158      	adcs	r0, r3
#endif

  Ctrl_access_unlock();

  return sector_size;
}
    36ac:	b2c0      	uxtb	r0, r0
    36ae:	4770      	bx	lr

000036b0 <mem_wr_protect>:

  return unloaded;
}

bool mem_wr_protect(U8 lun)
{
    36b0:	0003      	movs	r3, r0
    36b2:	b510      	push	{r4, lr}

  if (!Ctrl_access_lock()) return true;

  wr_protect =
#if MAX_LUN
             (lun < MAX_LUN) ? lun_desc[lun].wr_protect() :
    36b4:	2001      	movs	r0, #1
    36b6:	2b00      	cmp	r3, #0
    36b8:	d101      	bne.n	36be <mem_wr_protect+0xe>
    36ba:	4b01      	ldr	r3, [pc, #4]	; (36c0 <mem_wr_protect+0x10>)
    36bc:	4798      	blx	r3
#endif

  Ctrl_access_unlock();

  return wr_protect;
}
    36be:	bd10      	pop	{r4, pc}
    36c0:	00000949 	.word	0x00000949

000036c4 <memory_2_ram>:
 */
//! @{


Ctrl_status memory_2_ram(U8 lun, U32 addr, void *ram)
{
    36c4:	b510      	push	{r4, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_read_action(1);
  status =
    36c6:	2301      	movs	r3, #1
{
    36c8:	0004      	movs	r4, r0
    36ca:	0008      	movs	r0, r1
  status =
    36cc:	2c00      	cmp	r4, #0
    36ce:	d103      	bne.n	36d8 <memory_2_ram+0x14>
    36d0:	4b02      	ldr	r3, [pc, #8]	; (36dc <memory_2_ram+0x18>)
    36d2:	0011      	movs	r1, r2
    36d4:	4798      	blx	r3
    36d6:	0003      	movs	r3, r0
  memory_stop_read_action();

  Ctrl_access_unlock();

  return status;
}
    36d8:	0018      	movs	r0, r3
    36da:	bd10      	pop	{r4, pc}
    36dc:	00000999 	.word	0x00000999

000036e0 <ram_2_memory>:


Ctrl_status ram_2_memory(U8 lun, U32 addr, const void *ram)
{
    36e0:	b510      	push	{r4, lr}
#endif

  if (!Ctrl_access_lock()) return CTRL_FAIL;

  memory_start_write_action(1);
  status =
    36e2:	2301      	movs	r3, #1
{
    36e4:	0004      	movs	r4, r0
    36e6:	0008      	movs	r0, r1
  status =
    36e8:	2c00      	cmp	r4, #0
    36ea:	d103      	bne.n	36f4 <ram_2_memory+0x14>
    36ec:	4b02      	ldr	r3, [pc, #8]	; (36f8 <ram_2_memory+0x18>)
    36ee:	0011      	movs	r1, r2
    36f0:	4798      	blx	r3
    36f2:	0003      	movs	r3, r0
  memory_stop_write_action();

  Ctrl_access_unlock();

  return status;
}
    36f4:	0018      	movs	r0, r3
    36f6:	bd10      	pop	{r4, pc}
    36f8:	000009ed 	.word	0x000009ed

000036fc <nvm_is_ready>:
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
    36fc:	4b02      	ldr	r3, [pc, #8]	; (3708 <nvm_is_ready+0xc>)
    36fe:	7d18      	ldrb	r0, [r3, #20]
    3700:	2301      	movs	r3, #1
    3702:	4018      	ands	r0, r3
}
    3704:	4770      	bx	lr
    3706:	46c0      	nop			; (mov r8, r8)
    3708:	41004000 	.word	0x41004000

0000370c <nvm_set_config>:
			PM->APBBMASK.reg |= mask;
    370c:	2304      	movs	r3, #4
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
    370e:	b570      	push	{r4, r5, r6, lr}
    3710:	4a1c      	ldr	r2, [pc, #112]	; (3784 <nvm_set_config+0x78>)
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    3712:	4d1d      	ldr	r5, [pc, #116]	; (3788 <nvm_set_config+0x7c>)
    3714:	69d1      	ldr	r1, [r2, #28]
{
    3716:	0004      	movs	r4, r0
    3718:	430b      	orrs	r3, r1
    371a:	61d3      	str	r3, [r2, #28]
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    371c:	2320      	movs	r3, #32
    371e:	33ff      	adds	r3, #255	; 0xff
    3720:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    3722:	4b1a      	ldr	r3, [pc, #104]	; (378c <nvm_set_config+0x80>)
    3724:	4798      	blx	r3
    3726:	0003      	movs	r3, r0
		return STATUS_BUSY;
    3728:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    372a:	2b00      	cmp	r3, #0
    372c:	d028      	beq.n	3780 <nvm_set_config+0x74>
	}

#if (!SAMC20) && (!SAMC21)
	/* Writing configuration to the CTRLB register */
	nvm_module->CTRLB.reg =
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    372e:	22c0      	movs	r2, #192	; 0xc0
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    3730:	211e      	movs	r1, #30
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
    3732:	7823      	ldrb	r3, [r4, #0]
    3734:	0092      	lsls	r2, r2, #2
    3736:	021b      	lsls	r3, r3, #8
    3738:	4013      	ands	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    373a:	78a2      	ldrb	r2, [r4, #2]
    373c:	0052      	lsls	r2, r2, #1
    373e:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    3740:	2180      	movs	r1, #128	; 0x80
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    3742:	4313      	orrs	r3, r2
    3744:	7862      	ldrb	r2, [r4, #1]
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    3746:	02c9      	lsls	r1, r1, #11
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
    3748:	01d2      	lsls	r2, r2, #7
    374a:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    374c:	78e2      	ldrb	r2, [r4, #3]
    374e:	0492      	lsls	r2, r2, #18
    3750:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    3752:	21c0      	movs	r1, #192	; 0xc0
			NVMCTRL_CTRLB_RWS(config->wait_states) |
    3754:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
    3756:	7922      	ldrb	r2, [r4, #4]
    3758:	0289      	lsls	r1, r1, #10
    375a:	0412      	lsls	r2, r2, #16
    375c:	400a      	ands	r2, r1
			(cache_disable_value << NVMCTRL_CTRLB_CACHEDIS_Pos) |
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
#endif

	/* Initialize the internal device struct */
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    375e:	2108      	movs	r1, #8
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
    3760:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
    3762:	606b      	str	r3, [r5, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
    3764:	68ab      	ldr	r3, [r5, #8]
    3766:	4a0a      	ldr	r2, [pc, #40]	; (3790 <nvm_set_config+0x84>)
    3768:	035b      	lsls	r3, r3, #13
    376a:	0f5b      	lsrs	r3, r3, #29
    376c:	4099      	lsls	r1, r3
    376e:	8011      	strh	r1, [r2, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
    3770:	68ab      	ldr	r3, [r5, #8]
    3772:	8053      	strh	r3, [r2, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
    3774:	7863      	ldrb	r3, [r4, #1]
    3776:	7113      	strb	r3, [r2, #4]

	/* If the security bit is set, the auxiliary space cannot be written */
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    3778:	8b28      	ldrh	r0, [r5, #24]
    377a:	05c0      	lsls	r0, r0, #23
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
    377c:	0fc0      	lsrs	r0, r0, #31
    377e:	0100      	lsls	r0, r0, #4
}
    3780:	bd70      	pop	{r4, r5, r6, pc}
    3782:	46c0      	nop			; (mov r8, r8)
    3784:	40000400 	.word	0x40000400
    3788:	41004000 	.word	0x41004000
    378c:	000036fd 	.word	0x000036fd
    3790:	200002c8 	.word	0x200002c8

00003794 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
    3794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    3796:	4a24      	ldr	r2, [pc, #144]	; (3828 <nvm_execute_command+0x94>)
{
    3798:	9101      	str	r1, [sp, #4]
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    379a:	8853      	ldrh	r3, [r2, #2]
    379c:	8811      	ldrh	r1, [r2, #0]
    379e:	9a01      	ldr	r2, [sp, #4]
    37a0:	434b      	muls	r3, r1
{
    37a2:	0004      	movs	r4, r0
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
    37a4:	4293      	cmp	r3, r2
    37a6:	d207      	bcs.n	37b8 <nvm_execute_command+0x24>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    37a8:	2280      	movs	r2, #128	; 0x80
    37aa:	9b01      	ldr	r3, [sp, #4]
    37ac:	491f      	ldr	r1, [pc, #124]	; (382c <nvm_execute_command+0x98>)
    37ae:	0192      	lsls	r2, r2, #6
    37b0:	185b      	adds	r3, r3, r1
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
#else
		return STATUS_ERR_BAD_ADDRESS;
    37b2:	2018      	movs	r0, #24
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
    37b4:	4293      	cmp	r3, r2
    37b6:	d80f      	bhi.n	37d8 <nvm_execute_command+0x44>
	ctrlb_bak = nvm_module->CTRLB.reg;
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2)))) 
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    37b8:	2380      	movs	r3, #128	; 0x80
	ctrlb_bak = nvm_module->CTRLB.reg;
    37ba:	4d1d      	ldr	r5, [pc, #116]	; (3830 <nvm_execute_command+0x9c>)
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    37bc:	02db      	lsls	r3, r3, #11
	ctrlb_bak = nvm_module->CTRLB.reg;
    37be:	686f      	ldr	r7, [r5, #4]
    37c0:	002e      	movs	r6, r5
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
    37c2:	433b      	orrs	r3, r7
    37c4:	606b      	str	r3, [r5, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    37c6:	2320      	movs	r3, #32
    37c8:	33ff      	adds	r3, #255	; 0xff
    37ca:	832b      	strh	r3, [r5, #24]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    37cc:	4b19      	ldr	r3, [pc, #100]	; (3834 <nvm_execute_command+0xa0>)
    37ce:	4798      	blx	r3
    37d0:	2800      	cmp	r0, #0
    37d2:	d102      	bne.n	37da <nvm_execute_command+0x46>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
    37d4:	606f      	str	r7, [r5, #4]
		return STATUS_BUSY;
    37d6:	3005      	adds	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
    37d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	switch (command) {
    37da:	2c06      	cmp	r4, #6
    37dc:	d814      	bhi.n	3808 <nvm_execute_command+0x74>
    37de:	2c05      	cmp	r4, #5
    37e0:	d21b      	bcs.n	381a <nvm_execute_command+0x86>
    37e2:	2c02      	cmp	r4, #2
    37e4:	d001      	beq.n	37ea <nvm_execute_command+0x56>
    37e6:	2c04      	cmp	r4, #4
    37e8:	d114      	bne.n	3814 <nvm_execute_command+0x80>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
    37ea:	9b01      	ldr	r3, [sp, #4]
    37ec:	089b      	lsrs	r3, r3, #2
    37ee:	005b      	lsls	r3, r3, #1
    37f0:	61f3      	str	r3, [r6, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
    37f2:	23a5      	movs	r3, #165	; 0xa5
    37f4:	021b      	lsls	r3, r3, #8
    37f6:	431c      	orrs	r4, r3
    37f8:	8034      	strh	r4, [r6, #0]
	while (!nvm_is_ready()) {
    37fa:	4b0e      	ldr	r3, [pc, #56]	; (3834 <nvm_execute_command+0xa0>)
    37fc:	4798      	blx	r3
    37fe:	2800      	cmp	r0, #0
    3800:	d0fb      	beq.n	37fa <nvm_execute_command+0x66>
	nvm_module->CTRLB.reg = ctrlb_bak;
    3802:	6077      	str	r7, [r6, #4]
	return STATUS_OK;
    3804:	2000      	movs	r0, #0
    3806:	e7e7      	b.n	37d8 <nvm_execute_command+0x44>
	switch (command) {
    3808:	2c40      	cmp	r4, #64	; 0x40
    380a:	d303      	bcc.n	3814 <nvm_execute_command+0x80>
    380c:	2c41      	cmp	r4, #65	; 0x41
    380e:	d9ec      	bls.n	37ea <nvm_execute_command+0x56>
    3810:	2c45      	cmp	r4, #69	; 0x45
    3812:	d9ee      	bls.n	37f2 <nvm_execute_command+0x5e>
			nvm_module->CTRLB.reg = ctrlb_bak;
    3814:	6077      	str	r7, [r6, #4]
			return STATUS_ERR_INVALID_ARG;
    3816:	2017      	movs	r0, #23
    3818:	e7de      	b.n	37d8 <nvm_execute_command+0x44>
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
    381a:	8b2b      	ldrh	r3, [r5, #24]
    381c:	05db      	lsls	r3, r3, #23
    381e:	d5e4      	bpl.n	37ea <nvm_execute_command+0x56>
				nvm_module->CTRLB.reg = ctrlb_bak;
    3820:	606f      	str	r7, [r5, #4]
				return STATUS_ERR_IO;
    3822:	2010      	movs	r0, #16
    3824:	e7d8      	b.n	37d8 <nvm_execute_command+0x44>
    3826:	46c0      	nop			; (mov r8, r8)
    3828:	200002c8 	.word	0x200002c8
    382c:	ff7fc000 	.word	0xff7fc000
    3830:	41004000 	.word	0x41004000
    3834:	000036fd 	.word	0x000036fd

00003838 <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
    3838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    383a:	4e21      	ldr	r6, [pc, #132]	; (38c0 <nvm_write_buffer+0x88>)
{
    383c:	9100      	str	r1, [sp, #0]
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    383e:	8833      	ldrh	r3, [r6, #0]
    3840:	8871      	ldrh	r1, [r6, #2]
{
    3842:	0015      	movs	r5, r2
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    3844:	4359      	muls	r1, r3
{
    3846:	0004      	movs	r4, r0
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    3848:	2218      	movs	r2, #24
	if (destination_address >
    384a:	4281      	cmp	r1, r0
    384c:	d326      	bcc.n	389c <nvm_write_buffer+0x64>
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
    384e:	1e59      	subs	r1, r3, #1
    3850:	4208      	tst	r0, r1
    3852:	d123      	bne.n	389c <nvm_write_buffer+0x64>
		return STATUS_ERR_BAD_ADDRESS;
	}

	/* Check if the write length is longer than an NVM page */
	if (length > _nvm_dev.page_size) {
		return STATUS_ERR_INVALID_ARG;
    3854:	3a01      	subs	r2, #1
	if (length > _nvm_dev.page_size) {
    3856:	42ab      	cmp	r3, r5
    3858:	d320      	bcc.n	389c <nvm_write_buffer+0x64>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    385a:	4f1a      	ldr	r7, [pc, #104]	; (38c4 <nvm_write_buffer+0x8c>)
    385c:	47b8      	blx	r7
		return STATUS_BUSY;
    385e:	2205      	movs	r2, #5
	if (!nvm_is_ready()) {
    3860:	2800      	cmp	r0, #0
    3862:	d01b      	beq.n	389c <nvm_write_buffer+0x64>
	}

	/* Erase the page buffer before buffering new data */
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
    3864:	4b18      	ldr	r3, [pc, #96]	; (38c8 <nvm_write_buffer+0x90>)
    3866:	4a19      	ldr	r2, [pc, #100]	; (38cc <nvm_write_buffer+0x94>)
    3868:	801a      	strh	r2, [r3, #0]
    386a:	9301      	str	r3, [sp, #4]

	/* Check if the module is busy */
	while (!nvm_is_ready()) {
    386c:	47b8      	blx	r7
    386e:	2800      	cmp	r0, #0
    3870:	d0fc      	beq.n	386c <nvm_write_buffer+0x34>
		/* Force-wait for the buffer clear to complete */
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    3872:	2320      	movs	r3, #32
    3874:	9a01      	ldr	r2, [sp, #4]
    3876:	33ff      	adds	r3, #255	; 0xff
    3878:	8313      	strh	r3, [r2, #24]

	uint32_t nvm_address = destination_address / 2;

	/* NVM _must_ be accessed as a series of 16-bit words, perform manual copy
	 * to ensure alignment */
	for (uint16_t i = 0; i < length; i += 2) {
    387a:	2300      	movs	r3, #0
	uint32_t nvm_address = destination_address / 2;
    387c:	0862      	lsrs	r2, r4, #1
    387e:	0052      	lsls	r2, r2, #1
		/* Copy first byte of the 16-bit chunk to the temporary buffer */
		data = buffer[i];

		/* If we are not at the end of a write request with an odd byte count,
		 * store the next byte of data as well */
		if (i < (length - 1)) {
    3880:	1e68      	subs	r0, r5, #1
	for (uint16_t i = 0; i < length; i += 2) {
    3882:	429d      	cmp	r5, r3
    3884:	d80c      	bhi.n	38a0 <nvm_write_buffer+0x68>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
				destination_address, 0);
#endif
	}

	return STATUS_OK;
    3886:	2200      	movs	r2, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
    3888:	7933      	ldrb	r3, [r6, #4]
    388a:	4293      	cmp	r3, r2
    388c:	d106      	bne.n	389c <nvm_write_buffer+0x64>
    388e:	2d3f      	cmp	r5, #63	; 0x3f
    3890:	d804      	bhi.n	389c <nvm_write_buffer+0x64>
		return nvm_execute_command(NVM_COMMAND_WRITE_PAGE,
    3892:	0021      	movs	r1, r4
    3894:	2004      	movs	r0, #4
    3896:	4b0e      	ldr	r3, [pc, #56]	; (38d0 <nvm_write_buffer+0x98>)
    3898:	4798      	blx	r3
    389a:	0002      	movs	r2, r0
}
    389c:	0010      	movs	r0, r2
    389e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		data = buffer[i];
    38a0:	9900      	ldr	r1, [sp, #0]
    38a2:	5cc9      	ldrb	r1, [r1, r3]
		if (i < (length - 1)) {
    38a4:	4283      	cmp	r3, r0
    38a6:	db05      	blt.n	38b4 <nvm_write_buffer+0x7c>
		data = buffer[i];
    38a8:	b289      	uxth	r1, r1
	for (uint16_t i = 0; i < length; i += 2) {
    38aa:	3302      	adds	r3, #2
		NVM_MEMORY[nvm_address++] = data;
    38ac:	8011      	strh	r1, [r2, #0]
	for (uint16_t i = 0; i < length; i += 2) {
    38ae:	b29b      	uxth	r3, r3
    38b0:	3202      	adds	r2, #2
    38b2:	e7e6      	b.n	3882 <nvm_write_buffer+0x4a>
			data |= (buffer[i + 1] << 8);
    38b4:	9f00      	ldr	r7, [sp, #0]
    38b6:	18ff      	adds	r7, r7, r3
    38b8:	787f      	ldrb	r7, [r7, #1]
    38ba:	023f      	lsls	r7, r7, #8
    38bc:	4339      	orrs	r1, r7
    38be:	e7f4      	b.n	38aa <nvm_write_buffer+0x72>
    38c0:	200002c8 	.word	0x200002c8
    38c4:	000036fd 	.word	0x000036fd
    38c8:	41004000 	.word	0x41004000
    38cc:	ffffa544 	.word	0xffffa544
    38d0:	00003795 	.word	0x00003795

000038d4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
    38d4:	b570      	push	{r4, r5, r6, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    38d6:	4a13      	ldr	r2, [pc, #76]	; (3924 <nvm_erase_row+0x50>)
{
    38d8:	0004      	movs	r4, r0
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    38da:	8813      	ldrh	r3, [r2, #0]
    38dc:	8852      	ldrh	r2, [r2, #2]
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
		}
		is_rww_eeprom = true;
#else
		return STATUS_ERR_BAD_ADDRESS;
    38de:	2018      	movs	r0, #24
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
    38e0:	435a      	muls	r2, r3
	if (row_address >
    38e2:	42a2      	cmp	r2, r4
    38e4:	d31c      	bcc.n	3920 <nvm_erase_row+0x4c>
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
    38e6:	009b      	lsls	r3, r3, #2
    38e8:	3b01      	subs	r3, #1
    38ea:	421c      	tst	r4, r3
    38ec:	d118      	bne.n	3920 <nvm_erase_row+0x4c>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
    38ee:	4d0e      	ldr	r5, [pc, #56]	; (3928 <nvm_erase_row+0x54>)
    38f0:	47a8      	blx	r5
    38f2:	0003      	movs	r3, r0
		return STATUS_BUSY;
    38f4:	2005      	movs	r0, #5
	if (!nvm_is_ready()) {
    38f6:	2b00      	cmp	r3, #0
    38f8:	d012      	beq.n	3920 <nvm_erase_row+0x4c>
	}

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    38fa:	2220      	movs	r2, #32
    38fc:	4b0b      	ldr	r3, [pc, #44]	; (392c <nvm_erase_row+0x58>)

	/* Set address and command */
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    38fe:	08a4      	lsrs	r4, r4, #2
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    3900:	32ff      	adds	r2, #255	; 0xff
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    3902:	0064      	lsls	r4, r4, #1
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    3904:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
    3906:	61dc      	str	r4, [r3, #28]
    3908:	001c      	movs	r4, r3
#ifdef FEATURE_NVM_RWWEE
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
								(NVM_COMMAND_RWWEE_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY):
								(NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY));
#else
	nvm_module->CTRLA.reg = NVM_COMMAND_ERASE_ROW | NVMCTRL_CTRLA_CMDEX_KEY;
    390a:	4a09      	ldr	r2, [pc, #36]	; (3930 <nvm_erase_row+0x5c>)
    390c:	801a      	strh	r2, [r3, #0]
#endif

	while (!nvm_is_ready()) {
    390e:	47a8      	blx	r5
    3910:	2800      	cmp	r0, #0
    3912:	d0fc      	beq.n	390e <nvm_erase_row+0x3a>
	}

	/* There existed error in NVM erase operation */
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
    3914:	231c      	movs	r3, #28
    3916:	8b20      	ldrh	r0, [r4, #24]
    3918:	4018      	ands	r0, r3
		return STATUS_ABORTED;
	}

	return STATUS_OK;
    391a:	1e43      	subs	r3, r0, #1
    391c:	4198      	sbcs	r0, r3
    391e:	0080      	lsls	r0, r0, #2
}
    3920:	bd70      	pop	{r4, r5, r6, pc}
    3922:	46c0      	nop			; (mov r8, r8)
    3924:	200002c8 	.word	0x200002c8
    3928:	000036fd 	.word	0x000036fd
    392c:	41004000 	.word	0x41004000
    3930:	ffffa502 	.word	0xffffa502

00003934 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    3934:	b507      	push	{r0, r1, r2, lr}
	config->mux_position = SYSTEM_PINMUX_GPIO;
    3936:	2280      	movs	r2, #128	; 0x80
    3938:	ab01      	add	r3, sp, #4
    393a:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    393c:	780a      	ldrb	r2, [r1, #0]
    393e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    3940:	784a      	ldrb	r2, [r1, #1]
    3942:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    3944:	788a      	ldrb	r2, [r1, #2]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    3946:	0019      	movs	r1, r3
	pinmux_config.powersave    = config->powersave;
    3948:	70da      	strb	r2, [r3, #3]
	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    394a:	4b01      	ldr	r3, [pc, #4]	; (3950 <port_pin_set_config+0x1c>)
    394c:	4798      	blx	r3
}
    394e:	bd07      	pop	{r0, r1, r2, pc}
    3950:	000046c1 	.word	0x000046c1

00003954 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    3954:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    3956:	4cc5      	ldr	r4, [pc, #788]	; (3c6c <USB_Handler+0x318>)
{
    3958:	b085      	sub	sp, #20
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    395a:	6827      	ldr	r7, [r4, #0]
    395c:	683e      	ldr	r6, [r7, #0]
    395e:	7833      	ldrb	r3, [r6, #0]
    3960:	09db      	lsrs	r3, r3, #7
    3962:	d100      	bne.n	3966 <USB_Handler+0x12>
    3964:	e0ce      	b.n	3b04 <USB_Handler+0x1b0>
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3966:	8c33      	ldrh	r3, [r6, #32]
    3968:	2b00      	cmp	r3, #0
    396a:	d100      	bne.n	396e <USB_Handler+0x1a>
    396c:	e1d7      	b.n	3d1e <USB_Handler+0x3ca>
    396e:	8c30      	ldrh	r0, [r6, #32]
    3970:	4bbf      	ldr	r3, [pc, #764]	; (3c70 <USB_Handler+0x31c>)
    3972:	b280      	uxth	r0, r0
    3974:	4798      	blx	r3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    3976:	0003      	movs	r3, r0
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    3978:	0005      	movs	r5, r0
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    397a:	2003      	movs	r0, #3
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    397c:	3308      	adds	r3, #8
    397e:	015b      	lsls	r3, r3, #5
    3980:	18f6      	adds	r6, r6, r3
    3982:	79f6      	ldrb	r6, [r6, #7]
    3984:	b2f6      	uxtb	r6, r6
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    3986:	4206      	tst	r6, r0
    3988:	d031      	beq.n	39ee <USB_Handler+0x9a>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    398a:	4aba      	ldr	r2, [pc, #744]	; (3c74 <USB_Handler+0x320>)
    398c:	4694      	mov	ip, r2
    398e:	2201      	movs	r2, #1
    3990:	4661      	mov	r1, ip
    3992:	40aa      	lsls	r2, r5
    3994:	6809      	ldr	r1, [r1, #0]
    3996:	4391      	bics	r1, r2
    3998:	000a      	movs	r2, r1
    399a:	4661      	mov	r1, ip
    399c:	600a      	str	r2, [r1, #0]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    399e:	2101      	movs	r1, #1
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    39a0:	683a      	ldr	r2, [r7, #0]
    39a2:	18d2      	adds	r2, r2, r3
    39a4:	71d0      	strb	r0, [r2, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    39a6:	197a      	adds	r2, r7, r5
    39a8:	32ae      	adds	r2, #174	; 0xae
    39aa:	7812      	ldrb	r2, [r2, #0]
    39ac:	420a      	tst	r2, r1
    39ae:	d01e      	beq.n	39ee <USB_Handler+0x9a>
				pipe_callback_para.pipe_num = pipe_int;
    39b0:	4ab1      	ldr	r2, [pc, #708]	; (3c78 <USB_Handler+0x324>)
    39b2:	0168      	lsls	r0, r5, #5
    39b4:	7015      	strb	r5, [r2, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    39b6:	6839      	ldr	r1, [r7, #0]
    39b8:	5c59      	ldrb	r1, [r3, r1]
    39ba:	4bb0      	ldr	r3, [pc, #704]	; (3c7c <USB_Handler+0x328>)
    39bc:	0789      	lsls	r1, r1, #30
    39be:	0f89      	lsrs	r1, r1, #30
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    39c0:	181b      	adds	r3, r3, r0
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    39c2:	2901      	cmp	r1, #1
    39c4:	d000      	beq.n	39c8 <USB_Handler+0x74>
    39c6:	e085      	b.n	3ad4 <USB_Handler+0x180>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    39c8:	6859      	ldr	r1, [r3, #4]
    39ca:	0489      	lsls	r1, r1, #18
    39cc:	0c89      	lsrs	r1, r1, #18
    39ce:	8051      	strh	r1, [r2, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    39d0:	6859      	ldr	r1, [r3, #4]
    39d2:	0109      	lsls	r1, r1, #4
    39d4:	0c89      	lsrs	r1, r1, #18
    39d6:	8091      	strh	r1, [r2, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    39d8:	685a      	ldr	r2, [r3, #4]
    39da:	0b92      	lsrs	r2, r2, #14
    39dc:	0392      	lsls	r2, r2, #14
    39de:	605a      	str	r2, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    39e0:	1cab      	adds	r3, r5, #2
    39e2:	011b      	lsls	r3, r3, #4
    39e4:	18fb      	adds	r3, r7, r3
    39e6:	685b      	ldr	r3, [r3, #4]
    39e8:	49a3      	ldr	r1, [pc, #652]	; (3c78 <USB_Handler+0x324>)
    39ea:	0038      	movs	r0, r7
    39ec:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    39ee:	2104      	movs	r1, #4
    39f0:	420e      	tst	r6, r1
    39f2:	d00d      	beq.n	3a10 <USB_Handler+0xbc>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    39f4:	2301      	movs	r3, #1
    39f6:	40ab      	lsls	r3, r5
    39f8:	4a9e      	ldr	r2, [pc, #632]	; (3c74 <USB_Handler+0x320>)
    39fa:	6810      	ldr	r0, [r2, #0]
    39fc:	4398      	bics	r0, r3
    39fe:	6010      	str	r0, [r2, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a00:	002a      	movs	r2, r5
    3a02:	4b9a      	ldr	r3, [pc, #616]	; (3c6c <USB_Handler+0x318>)
    3a04:	3208      	adds	r2, #8
    3a06:	681b      	ldr	r3, [r3, #0]
    3a08:	0152      	lsls	r2, r2, #5
    3a0a:	681b      	ldr	r3, [r3, #0]
    3a0c:	189b      	adds	r3, r3, r2
    3a0e:	71d9      	strb	r1, [r3, #7]
		if (flags & USB_HOST_PINTFLAG_PERR) {
    3a10:	2208      	movs	r2, #8
    3a12:	4216      	tst	r6, r2
    3a14:	d01d      	beq.n	3a52 <USB_Handler+0xfe>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a16:	2301      	movs	r3, #1
    3a18:	40ab      	lsls	r3, r5
    3a1a:	4996      	ldr	r1, [pc, #600]	; (3c74 <USB_Handler+0x320>)
    3a1c:	6808      	ldr	r0, [r1, #0]
    3a1e:	4398      	bics	r0, r3
    3a20:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a22:	6820      	ldr	r0, [r4, #0]
    3a24:	18ab      	adds	r3, r5, r2
    3a26:	6801      	ldr	r1, [r0, #0]
    3a28:	015b      	lsls	r3, r3, #5
    3a2a:	18cb      	adds	r3, r1, r3
    3a2c:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a2e:	1943      	adds	r3, r0, r5
    3a30:	33ae      	adds	r3, #174	; 0xae
    3a32:	781b      	ldrb	r3, [r3, #0]
    3a34:	079b      	lsls	r3, r3, #30
    3a36:	d50c      	bpl.n	3a52 <USB_Handler+0xfe>
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3a38:	4b90      	ldr	r3, [pc, #576]	; (3c7c <USB_Handler+0x328>)
    3a3a:	016a      	lsls	r2, r5, #5
    3a3c:	189b      	adds	r3, r3, r2
    3a3e:	221f      	movs	r2, #31
    3a40:	89db      	ldrh	r3, [r3, #14]
				pipe_callback_para.pipe_num = pipe_int;
    3a42:	498d      	ldr	r1, [pc, #564]	; (3c78 <USB_Handler+0x324>)
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    3a44:	4013      	ands	r3, r2
				pipe_callback_para.pipe_error_status =
    3a46:	704b      	strb	r3, [r1, #1]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3a48:	012b      	lsls	r3, r5, #4
    3a4a:	18c3      	adds	r3, r0, r3
				pipe_callback_para.pipe_num = pipe_int;
    3a4c:	700d      	strb	r5, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    3a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3a50:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    3a52:	2210      	movs	r2, #16
    3a54:	4216      	tst	r6, r2
    3a56:	d01f      	beq.n	3a98 <USB_Handler+0x144>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a58:	2301      	movs	r3, #1
    3a5a:	40ab      	lsls	r3, r5
    3a5c:	4985      	ldr	r1, [pc, #532]	; (3c74 <USB_Handler+0x320>)
    3a5e:	6808      	ldr	r0, [r1, #0]
    3a60:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a62:	002b      	movs	r3, r5
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3a64:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3a66:	6820      	ldr	r0, [r4, #0]
    3a68:	3308      	adds	r3, #8
    3a6a:	6801      	ldr	r1, [r0, #0]
    3a6c:	015b      	lsls	r3, r3, #5
    3a6e:	18cb      	adds	r3, r1, r3
    3a70:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3a72:	1943      	adds	r3, r0, r5
    3a74:	33ae      	adds	r3, #174	; 0xae
    3a76:	781b      	ldrb	r3, [r3, #0]
    3a78:	075b      	lsls	r3, r3, #29
    3a7a:	d50d      	bpl.n	3a98 <USB_Handler+0x144>
				pipe_callback_para.pipe_num = pipe_int;
    3a7c:	4a7e      	ldr	r2, [pc, #504]	; (3c78 <USB_Handler+0x324>)
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3a7e:	4b7f      	ldr	r3, [pc, #508]	; (3c7c <USB_Handler+0x328>)
    3a80:	0169      	lsls	r1, r5, #5
    3a82:	185b      	adds	r3, r3, r1
				pipe_callback_para.pipe_num = pipe_int;
    3a84:	7015      	strb	r5, [r2, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3a86:	685b      	ldr	r3, [r3, #4]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3a88:	2100      	movs	r1, #0
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3a8a:	011b      	lsls	r3, r3, #4
    3a8c:	0c9b      	lsrs	r3, r3, #18
    3a8e:	8053      	strh	r3, [r2, #2]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    3a90:	012b      	lsls	r3, r5, #4
    3a92:	18c3      	adds	r3, r0, r3
    3a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3a96:	4798      	blx	r3
		if (flags & USB_HOST_PINTFLAG_STALL) {
    3a98:	2220      	movs	r2, #32
    3a9a:	4216      	tst	r6, r2
    3a9c:	d100      	bne.n	3aa0 <USB_Handler+0x14c>
    3a9e:	e1b5      	b.n	3e0c <USB_Handler+0x4b8>
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3aa0:	2301      	movs	r3, #1
    3aa2:	40ab      	lsls	r3, r5
    3aa4:	4973      	ldr	r1, [pc, #460]	; (3c74 <USB_Handler+0x320>)
    3aa6:	6808      	ldr	r0, [r1, #0]
    3aa8:	4398      	bics	r0, r3
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3aaa:	002b      	movs	r3, r5
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    3aac:	6008      	str	r0, [r1, #0]
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    3aae:	6820      	ldr	r0, [r4, #0]
    3ab0:	3308      	adds	r3, #8
    3ab2:	6801      	ldr	r1, [r0, #0]
    3ab4:	015b      	lsls	r3, r3, #5
    3ab6:	18cb      	adds	r3, r1, r3
    3ab8:	71da      	strb	r2, [r3, #7]
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    3aba:	1943      	adds	r3, r0, r5
    3abc:	33ae      	adds	r3, #174	; 0xae
    3abe:	781b      	ldrb	r3, [r3, #0]
    3ac0:	071b      	lsls	r3, r3, #28
    3ac2:	d400      	bmi.n	3ac6 <USB_Handler+0x172>
    3ac4:	e1a2      	b.n	3e0c <USB_Handler+0x4b8>
				pipe_callback_para.pipe_num = pipe_int;
    3ac6:	496c      	ldr	r1, [pc, #432]	; (3c78 <USB_Handler+0x324>)
    3ac8:	700d      	strb	r5, [r1, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    3aca:	012d      	lsls	r5, r5, #4
    3acc:	1945      	adds	r5, r0, r5
    3ace:	6b2b      	ldr	r3, [r5, #48]	; 0x30
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3ad0:	4798      	blx	r3
    3ad2:	e19b      	b.n	3e0c <USB_Handler+0x4b8>
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    3ad4:	6859      	ldr	r1, [r3, #4]
    3ad6:	0109      	lsls	r1, r1, #4
    3ad8:	0c89      	lsrs	r1, r1, #18
    3ada:	b288      	uxth	r0, r1
    3adc:	9001      	str	r0, [sp, #4]
    3ade:	8051      	strh	r1, [r2, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3ae0:	6859      	ldr	r1, [r3, #4]
    3ae2:	0489      	lsls	r1, r1, #18
    3ae4:	0c89      	lsrs	r1, r1, #18
    3ae6:	8091      	strh	r1, [r2, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    3ae8:	6859      	ldr	r1, [r3, #4]
    3aea:	0008      	movs	r0, r1
    3aec:	4964      	ldr	r1, [pc, #400]	; (3c80 <USB_Handler+0x32c>)
    3aee:	4008      	ands	r0, r1
    3af0:	6058      	str	r0, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    3af2:	9901      	ldr	r1, [sp, #4]
    3af4:	2900      	cmp	r1, #0
    3af6:	d000      	beq.n	3afa <USB_Handler+0x1a6>
    3af8:	e772      	b.n	39e0 <USB_Handler+0x8c>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    3afa:	685b      	ldr	r3, [r3, #4]
    3afc:	049b      	lsls	r3, r3, #18
    3afe:	0c9b      	lsrs	r3, r3, #18
    3b00:	8053      	strh	r3, [r2, #2]
    3b02:	e76d      	b.n	39e0 <USB_Handler+0x8c>
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    3b04:	8c35      	ldrh	r5, [r6, #32]
    3b06:	b2aa      	uxth	r2, r5
    3b08:	9201      	str	r2, [sp, #4]
	if (0 == ep_inst) {
    3b0a:	2a00      	cmp	r2, #0
    3b0c:	d12a      	bne.n	3b64 <USB_Handler+0x210>
				_usb_instances->device_enabled_callback_mask &
    3b0e:	23ab      	movs	r3, #171	; 0xab
    3b10:	005b      	lsls	r3, r3, #1
		flags_run = flags &
    3b12:	5afa      	ldrh	r2, [r7, r3]
    3b14:	3b02      	subs	r3, #2
    3b16:	5afb      	ldrh	r3, [r7, r3]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3b18:	2780      	movs	r7, #128	; 0x80
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3b1a:	8bb6      	ldrh	r6, [r6, #28]
		flags_run = flags &
    3b1c:	4013      	ands	r3, r2
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    3b1e:	b2b6      	uxth	r6, r6
		flags_run = flags &
    3b20:	4033      	ands	r3, r6
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3b22:	9d01      	ldr	r5, [sp, #4]
		flags_run = flags &
    3b24:	9302      	str	r3, [sp, #8]
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3b26:	007f      	lsls	r7, r7, #1
			if (flags & _usb_device_irq_bits[i]) {
    3b28:	4b56      	ldr	r3, [pc, #344]	; (3c84 <USB_Handler+0x330>)
    3b2a:	006a      	lsls	r2, r5, #1
    3b2c:	5ad3      	ldrh	r3, [r2, r3]
    3b2e:	4233      	tst	r3, r6
    3b30:	d002      	beq.n	3b38 <USB_Handler+0x1e4>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    3b32:	6822      	ldr	r2, [r4, #0]
    3b34:	6812      	ldr	r2, [r2, #0]
    3b36:	8393      	strh	r3, [r2, #28]
			if (flags_run & _usb_device_irq_bits[i]) {
    3b38:	9a02      	ldr	r2, [sp, #8]
    3b3a:	4213      	tst	r3, r2
    3b3c:	d00e      	beq.n	3b5c <USB_Handler+0x208>
    3b3e:	4952      	ldr	r1, [pc, #328]	; (3c88 <USB_Handler+0x334>)
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    3b40:	2d06      	cmp	r5, #6
    3b42:	d104      	bne.n	3b4e <USB_Handler+0x1fa>
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    3b44:	4b4d      	ldr	r3, [pc, #308]	; (3c7c <USB_Handler+0x328>)
    3b46:	891b      	ldrh	r3, [r3, #8]
    3b48:	091b      	lsrs	r3, r3, #4
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    3b4a:	403b      	ands	r3, r7
    3b4c:	600b      	str	r3, [r1, #0]
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    3b4e:	002b      	movs	r3, r5
    3b50:	6822      	ldr	r2, [r4, #0]
    3b52:	332e      	adds	r3, #46	; 0x2e
    3b54:	009b      	lsls	r3, r3, #2
    3b56:	589b      	ldr	r3, [r3, r2]
    3b58:	0010      	movs	r0, r2
    3b5a:	4798      	blx	r3
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    3b5c:	3501      	adds	r5, #1
    3b5e:	2d07      	cmp	r5, #7
    3b60:	d1e2      	bne.n	3b28 <USB_Handler+0x1d4>
    3b62:	e153      	b.n	3e0c <USB_Handler+0x4b8>
    3b64:	003d      	movs	r5, r7
    3b66:	3559      	adds	r5, #89	; 0x59
    3b68:	35ff      	adds	r5, #255	; 0xff
			if (ep_inst & (1 << i)) {
    3b6a:	9a01      	ldr	r2, [sp, #4]
    3b6c:	2101      	movs	r1, #1
    3b6e:	411a      	asrs	r2, r3
    3b70:	b2dc      	uxtb	r4, r3
    3b72:	420a      	tst	r2, r1
    3b74:	d100      	bne.n	3b78 <USB_Handler+0x224>
    3b76:	e0cc      	b.n	3d12 <USB_Handler+0x3be>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    3b78:	001a      	movs	r2, r3
    3b7a:	3208      	adds	r2, #8
    3b7c:	0151      	lsls	r1, r2, #5
    3b7e:	1871      	adds	r1, r6, r1
    3b80:	1dc8      	adds	r0, r1, #7
    3b82:	9003      	str	r0, [sp, #12]
    3b84:	79c8      	ldrb	r0, [r1, #7]
    3b86:	7a29      	ldrb	r1, [r5, #8]
    3b88:	9202      	str	r2, [sp, #8]
    3b8a:	b2c0      	uxtb	r0, r0
    3b8c:	782a      	ldrb	r2, [r5, #0]
    3b8e:	4001      	ands	r1, r0
    3b90:	4011      	ands	r1, r2
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3b92:	2260      	movs	r2, #96	; 0x60
    3b94:	4210      	tst	r0, r2
    3b96:	d01a      	beq.n	3bce <USB_Handler+0x27a>
    3b98:	015a      	lsls	r2, r3, #5
    3b9a:	18b6      	adds	r6, r6, r2
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    3b9c:	2240      	movs	r2, #64	; 0x40
    3b9e:	36ff      	adds	r6, #255	; 0xff
    3ba0:	7a30      	ldrb	r0, [r6, #8]
    3ba2:	4210      	tst	r0, r2
    3ba4:	d00d      	beq.n	3bc2 <USB_Handler+0x26e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    3ba6:	7232      	strb	r2, [r6, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3ba8:	3ac0      	subs	r2, #192	; 0xc0
    3baa:	4314      	orrs	r4, r2
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3bac:	4a37      	ldr	r2, [pc, #220]	; (3c8c <USB_Handler+0x338>)
    3bae:	7194      	strb	r4, [r2, #6]
					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    3bb0:	2260      	movs	r2, #96	; 0x60
    3bb2:	4211      	tst	r1, r2
    3bb4:	d100      	bne.n	3bb8 <USB_Handler+0x264>
    3bb6:	e129      	b.n	3e0c <USB_Handler+0x4b8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    3bb8:	011b      	lsls	r3, r3, #4
    3bba:	18fb      	adds	r3, r7, r3
    3bbc:	33e0      	adds	r3, #224	; 0xe0
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	e03f      	b.n	3c42 <USB_Handler+0x2ee>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    3bc2:	2220      	movs	r2, #32
    3bc4:	7a30      	ldrb	r0, [r6, #8]
    3bc6:	4210      	tst	r0, r2
    3bc8:	d0f2      	beq.n	3bb0 <USB_Handler+0x25c>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    3bca:	7232      	strb	r2, [r6, #8]
    3bcc:	e7ee      	b.n	3bac <USB_Handler+0x258>
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    3bce:	2210      	movs	r2, #16
    3bd0:	4210      	tst	r0, r2
    3bd2:	d018      	beq.n	3c06 <USB_Handler+0x2b2>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    3bd4:	2110      	movs	r1, #16
    3bd6:	9a03      	ldr	r2, [sp, #12]
    3bd8:	7011      	strb	r1, [r2, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    3bda:	2110      	movs	r1, #16
    3bdc:	18fa      	adds	r2, r7, r3
    3bde:	3261      	adds	r2, #97	; 0x61
    3be0:	32ff      	adds	r2, #255	; 0xff
    3be2:	7812      	ldrb	r2, [r2, #0]
    3be4:	420a      	tst	r2, r1
    3be6:	d100      	bne.n	3bea <USB_Handler+0x296>
    3be8:	e110      	b.n	3e0c <USB_Handler+0x4b8>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3bea:	4a24      	ldr	r2, [pc, #144]	; (3c7c <USB_Handler+0x328>)
    3bec:	0159      	lsls	r1, r3, #5
    3bee:	1852      	adds	r2, r2, r1
    3bf0:	6852      	ldr	r2, [r2, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3bf2:	011b      	lsls	r3, r3, #4
    3bf4:	18fb      	adds	r3, r7, r3
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3bf6:	0492      	lsls	r2, r2, #18
    3bf8:	4924      	ldr	r1, [pc, #144]	; (3c8c <USB_Handler+0x338>)
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3bfa:	33dc      	adds	r3, #220	; 0xdc
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3bfc:	0c92      	lsrs	r2, r2, #18
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    3bfe:	681b      	ldr	r3, [r3, #0]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3c00:	800a      	strh	r2, [r1, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3c02:	0038      	movs	r0, r7
    3c04:	e764      	b.n	3ad0 <USB_Handler+0x17c>
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3c06:	2203      	movs	r2, #3
    3c08:	4210      	tst	r0, r2
    3c0a:	d041      	beq.n	3c90 <USB_Handler+0x33c>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3c0c:	2002      	movs	r0, #2
    3c0e:	015a      	lsls	r2, r3, #5
    3c10:	18b6      	adds	r6, r6, r2
    3c12:	36ff      	adds	r6, #255	; 0xff
    3c14:	7a35      	ldrb	r5, [r6, #8]
    3c16:	4205      	tst	r5, r0
    3c18:	d015      	beq.n	3c46 <USB_Handler+0x2f2>
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3c1a:	2580      	movs	r5, #128	; 0x80
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    3c1c:	7230      	strb	r0, [r6, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3c1e:	426d      	negs	r5, r5
    3c20:	481a      	ldr	r0, [pc, #104]	; (3c8c <USB_Handler+0x338>)
    3c22:	432c      	orrs	r4, r5
    3c24:	7184      	strb	r4, [r0, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    3c26:	4c15      	ldr	r4, [pc, #84]	; (3c7c <USB_Handler+0x328>)
    3c28:	18a2      	adds	r2, r4, r2
    3c2a:	3210      	adds	r2, #16
    3c2c:	6852      	ldr	r2, [r2, #4]
    3c2e:	0492      	lsls	r2, r2, #18
    3c30:	0c92      	lsrs	r2, r2, #18
    3c32:	8042      	strh	r2, [r0, #2]
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    3c34:	078a      	lsls	r2, r1, #30
    3c36:	d100      	bne.n	3c3a <USB_Handler+0x2e6>
    3c38:	e0e8      	b.n	3e0c <USB_Handler+0x4b8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    3c3a:	330d      	adds	r3, #13
    3c3c:	011b      	lsls	r3, r3, #4
    3c3e:	18fb      	adds	r3, r7, r3
    3c40:	685b      	ldr	r3, [r3, #4]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3c42:	4912      	ldr	r1, [pc, #72]	; (3c8c <USB_Handler+0x338>)
    3c44:	e7dd      	b.n	3c02 <USB_Handler+0x2ae>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3c46:	2501      	movs	r5, #1
    3c48:	7a30      	ldrb	r0, [r6, #8]
    3c4a:	4228      	tst	r0, r5
    3c4c:	d0f2      	beq.n	3c34 <USB_Handler+0x2e0>
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3c4e:	480f      	ldr	r0, [pc, #60]	; (3c8c <USB_Handler+0x338>)
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    3c50:	7235      	strb	r5, [r6, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3c52:	7184      	strb	r4, [r0, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    3c54:	4c09      	ldr	r4, [pc, #36]	; (3c7c <USB_Handler+0x328>)
    3c56:	18a4      	adds	r4, r4, r2
    3c58:	6862      	ldr	r2, [r4, #4]
    3c5a:	0492      	lsls	r2, r2, #18
    3c5c:	0c92      	lsrs	r2, r2, #18
    3c5e:	8002      	strh	r2, [r0, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    3c60:	6862      	ldr	r2, [r4, #4]
    3c62:	0112      	lsls	r2, r2, #4
    3c64:	0c92      	lsrs	r2, r2, #18
    3c66:	8082      	strh	r2, [r0, #4]
    3c68:	e7e4      	b.n	3c34 <USB_Handler+0x2e0>
    3c6a:	46c0      	nop			; (mov r8, r8)
    3c6c:	200002d0 	.word	0x200002d0
    3c70:	00004909 	.word	0x00004909
    3c74:	200002e0 	.word	0x200002e0
    3c78:	200002e4 	.word	0x200002e4
    3c7c:	20000384 	.word	0x20000384
    3c80:	f0003fff 	.word	0xf0003fff
    3c84:	00004b7c 	.word	0x00004b7c
    3c88:	200002d4 	.word	0x200002d4
    3c8c:	200002d8 	.word	0x200002d8
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3c90:	220c      	movs	r2, #12
    3c92:	4210      	tst	r0, r2
    3c94:	d03d      	beq.n	3d12 <USB_Handler+0x3be>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    3c96:	2008      	movs	r0, #8
    3c98:	015d      	lsls	r5, r3, #5
    3c9a:	1976      	adds	r6, r6, r5
    3c9c:	36ff      	adds	r6, #255	; 0xff
    3c9e:	7a32      	ldrb	r2, [r6, #8]
    3ca0:	4202      	tst	r2, r0
    3ca2:	d01e      	beq.n	3ce2 <USB_Handler+0x38e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    3ca4:	7230      	strb	r0, [r6, #8]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3ca6:	2602      	movs	r6, #2
    3ca8:	4859      	ldr	r0, [pc, #356]	; (3e10 <USB_Handler+0x4bc>)
    3caa:	1940      	adds	r0, r0, r5
    3cac:	7e85      	ldrb	r5, [r0, #26]
    3cae:	4235      	tst	r5, r6
    3cb0:	d002      	beq.n	3cb8 <USB_Handler+0x364>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3cb2:	7e85      	ldrb	r5, [r0, #26]
    3cb4:	43b5      	bics	r5, r6
    3cb6:	7685      	strb	r5, [r0, #26]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3cb8:	2080      	movs	r0, #128	; 0x80
    3cba:	4240      	negs	r0, r0
    3cbc:	4304      	orrs	r4, r0
    3cbe:	4855      	ldr	r0, [pc, #340]	; (3e14 <USB_Handler+0x4c0>)
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3cc0:	9a02      	ldr	r2, [sp, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    3cc2:	7184      	strb	r4, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    3cc4:	6838      	ldr	r0, [r7, #0]
    3cc6:	0152      	lsls	r2, r2, #5
    3cc8:	1882      	adds	r2, r0, r2
    3cca:	79d2      	ldrb	r2, [r2, #7]
    3ccc:	0792      	lsls	r2, r2, #30
    3cce:	d500      	bpl.n	3cd2 <USB_Handler+0x37e>
    3cd0:	e09c      	b.n	3e0c <USB_Handler+0x4b8>
					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    3cd2:	220c      	movs	r2, #12
    3cd4:	4211      	tst	r1, r2
    3cd6:	d100      	bne.n	3cda <USB_Handler+0x386>
    3cd8:	e098      	b.n	3e0c <USB_Handler+0x4b8>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    3cda:	011b      	lsls	r3, r3, #4
    3cdc:	18fb      	adds	r3, r7, r3
    3cde:	33d8      	adds	r3, #216	; 0xd8
    3ce0:	e76d      	b.n	3bbe <USB_Handler+0x26a>
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    3ce2:	2004      	movs	r0, #4
    3ce4:	7a32      	ldrb	r2, [r6, #8]
    3ce6:	4202      	tst	r2, r0
    3ce8:	d0f3      	beq.n	3cd2 <USB_Handler+0x37e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    3cea:	7230      	strb	r0, [r6, #8]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    3cec:	2602      	movs	r6, #2
    3cee:	4848      	ldr	r0, [pc, #288]	; (3e10 <USB_Handler+0x4bc>)
    3cf0:	1940      	adds	r0, r0, r5
    3cf2:	7a85      	ldrb	r5, [r0, #10]
    3cf4:	4235      	tst	r5, r6
    3cf6:	d002      	beq.n	3cfe <USB_Handler+0x3aa>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    3cf8:	7a85      	ldrb	r5, [r0, #10]
    3cfa:	43b5      	bics	r5, r6
    3cfc:	7285      	strb	r5, [r0, #10]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3cfe:	4845      	ldr	r0, [pc, #276]	; (3e14 <USB_Handler+0x4c0>)
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3d00:	9a02      	ldr	r2, [sp, #8]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    3d02:	7184      	strb	r4, [r0, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    3d04:	6838      	ldr	r0, [r7, #0]
    3d06:	0152      	lsls	r2, r2, #5
    3d08:	1882      	adds	r2, r0, r2
    3d0a:	79d2      	ldrb	r2, [r2, #7]
    3d0c:	07d2      	lsls	r2, r2, #31
    3d0e:	d5e0      	bpl.n	3cd2 <USB_Handler+0x37e>
    3d10:	e07c      	b.n	3e0c <USB_Handler+0x4b8>
    3d12:	3301      	adds	r3, #1
    3d14:	3501      	adds	r5, #1
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    3d16:	2b08      	cmp	r3, #8
    3d18:	d000      	beq.n	3d1c <USB_Handler+0x3c8>
    3d1a:	e726      	b.n	3b6a <USB_Handler+0x216>
    3d1c:	e076      	b.n	3e0c <USB_Handler+0x4b8>
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3d1e:	2304      	movs	r3, #4
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    3d20:	8bb5      	ldrh	r5, [r6, #28]
    3d22:	b2ad      	uxth	r5, r5
		if (flags & USB_HOST_INTFLAG_HSOF) {
    3d24:	421d      	tst	r5, r3
    3d26:	d008      	beq.n	3d3a <USB_Handler+0x3e6>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    3d28:	83b3      	strh	r3, [r6, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    3d2a:	003b      	movs	r3, r7
    3d2c:	33a5      	adds	r3, #165	; 0xa5
    3d2e:	781b      	ldrb	r3, [r3, #0]
    3d30:	07db      	lsls	r3, r3, #31
    3d32:	d502      	bpl.n	3d3a <USB_Handler+0x3e6>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    3d34:	687b      	ldr	r3, [r7, #4]
    3d36:	0038      	movs	r0, r7
    3d38:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_RST) {
    3d3a:	2308      	movs	r3, #8
    3d3c:	421d      	tst	r5, r3
    3d3e:	d00c      	beq.n	3d5a <USB_Handler+0x406>
			host_pipe_job_busy_status = 0;
    3d40:	2100      	movs	r1, #0
    3d42:	4a35      	ldr	r2, [pc, #212]	; (3e18 <USB_Handler+0x4c4>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3d44:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3d46:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    3d48:	6802      	ldr	r2, [r0, #0]
    3d4a:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    3d4c:	0003      	movs	r3, r0
    3d4e:	33a5      	adds	r3, #165	; 0xa5
    3d50:	781b      	ldrb	r3, [r3, #0]
    3d52:	079b      	lsls	r3, r3, #30
    3d54:	d501      	bpl.n	3d5a <USB_Handler+0x406>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    3d56:	6883      	ldr	r3, [r0, #8]
    3d58:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    3d5a:	2340      	movs	r3, #64	; 0x40
    3d5c:	421d      	tst	r5, r3
    3d5e:	d009      	beq.n	3d74 <USB_Handler+0x420>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    3d60:	6820      	ldr	r0, [r4, #0]
    3d62:	6802      	ldr	r2, [r0, #0]
    3d64:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    3d66:	0003      	movs	r3, r0
    3d68:	33a5      	adds	r3, #165	; 0xa5
    3d6a:	781b      	ldrb	r3, [r3, #0]
    3d6c:	06db      	lsls	r3, r3, #27
    3d6e:	d501      	bpl.n	3d74 <USB_Handler+0x420>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    3d70:	6943      	ldr	r3, [r0, #20]
    3d72:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    3d74:	2320      	movs	r3, #32
    3d76:	421d      	tst	r5, r3
    3d78:	d009      	beq.n	3d8e <USB_Handler+0x43a>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    3d7a:	6820      	ldr	r0, [r4, #0]
    3d7c:	6802      	ldr	r2, [r0, #0]
    3d7e:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    3d80:	0003      	movs	r3, r0
    3d82:	33a5      	adds	r3, #165	; 0xa5
    3d84:	781b      	ldrb	r3, [r3, #0]
    3d86:	071b      	lsls	r3, r3, #28
    3d88:	d501      	bpl.n	3d8e <USB_Handler+0x43a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    3d8a:	6903      	ldr	r3, [r0, #16]
    3d8c:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    3d8e:	2310      	movs	r3, #16
    3d90:	421d      	tst	r5, r3
    3d92:	d009      	beq.n	3da8 <USB_Handler+0x454>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    3d94:	6820      	ldr	r0, [r4, #0]
    3d96:	6802      	ldr	r2, [r0, #0]
    3d98:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    3d9a:	0003      	movs	r3, r0
    3d9c:	33a5      	adds	r3, #165	; 0xa5
    3d9e:	781b      	ldrb	r3, [r3, #0]
    3da0:	075b      	lsls	r3, r3, #29
    3da2:	d501      	bpl.n	3da8 <USB_Handler+0x454>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    3da4:	68c3      	ldr	r3, [r0, #12]
    3da6:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    3da8:	2380      	movs	r3, #128	; 0x80
    3daa:	421d      	tst	r5, r3
    3dac:	d00c      	beq.n	3dc8 <USB_Handler+0x474>
			host_pipe_job_busy_status = 0;
    3dae:	2100      	movs	r1, #0
    3db0:	4a19      	ldr	r2, [pc, #100]	; (3e18 <USB_Handler+0x4c4>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3db2:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3db4:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    3db6:	6802      	ldr	r2, [r0, #0]
    3db8:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    3dba:	0003      	movs	r3, r0
    3dbc:	33a5      	adds	r3, #165	; 0xa5
    3dbe:	781b      	ldrb	r3, [r3, #0]
    3dc0:	069b      	lsls	r3, r3, #26
    3dc2:	d501      	bpl.n	3dc8 <USB_Handler+0x474>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    3dc4:	6983      	ldr	r3, [r0, #24]
    3dc6:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DCONN) {
    3dc8:	2380      	movs	r3, #128	; 0x80
    3dca:	005b      	lsls	r3, r3, #1
    3dcc:	421d      	tst	r5, r3
    3dce:	d00c      	beq.n	3dea <USB_Handler+0x496>
			host_pipe_job_busy_status = 0;
    3dd0:	2100      	movs	r1, #0
    3dd2:	4a11      	ldr	r2, [pc, #68]	; (3e18 <USB_Handler+0x4c4>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3dd4:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3dd6:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    3dd8:	6802      	ldr	r2, [r0, #0]
    3dda:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    3ddc:	0003      	movs	r3, r0
    3dde:	33a5      	adds	r3, #165	; 0xa5
    3de0:	781b      	ldrb	r3, [r3, #0]
    3de2:	065b      	lsls	r3, r3, #25
    3de4:	d501      	bpl.n	3dea <USB_Handler+0x496>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    3de6:	69c3      	ldr	r3, [r0, #28]
    3de8:	4798      	blx	r3
		if (flags & USB_HOST_INTFLAG_DDISC) {
    3dea:	2380      	movs	r3, #128	; 0x80
    3dec:	009b      	lsls	r3, r3, #2
    3dee:	421d      	tst	r5, r3
    3df0:	d00c      	beq.n	3e0c <USB_Handler+0x4b8>
			host_pipe_job_busy_status = 0;
    3df2:	2100      	movs	r1, #0
    3df4:	4a08      	ldr	r2, [pc, #32]	; (3e18 <USB_Handler+0x4c4>)
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3df6:	6820      	ldr	r0, [r4, #0]
			host_pipe_job_busy_status = 0;
    3df8:	6011      	str	r1, [r2, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    3dfa:	6802      	ldr	r2, [r0, #0]
    3dfc:	8393      	strh	r3, [r2, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    3dfe:	0003      	movs	r3, r0
    3e00:	33a5      	adds	r3, #165	; 0xa5
    3e02:	781b      	ldrb	r3, [r3, #0]
    3e04:	2b7f      	cmp	r3, #127	; 0x7f
    3e06:	d901      	bls.n	3e0c <USB_Handler+0x4b8>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    3e08:	6a03      	ldr	r3, [r0, #32]
    3e0a:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    3e0c:	b005      	add	sp, #20
    3e0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3e10:	20000384 	.word	0x20000384
    3e14:	200002d8 	.word	0x200002d8
    3e18:	200002e0 	.word	0x200002e0

00003e1c <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    3e1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	config->direction  = PORT_PIN_DIR_INPUT;
    3e1e:	2600      	movs	r6, #0
	config->input_pull = PORT_PIN_PULL_UP;
    3e20:	2701      	movs	r7, #1
	config->direction  = PORT_PIN_DIR_INPUT;
    3e22:	ac01      	add	r4, sp, #4

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    3e24:	4d4b      	ldr	r5, [pc, #300]	; (3f54 <system_board_init+0x138>)
    3e26:	0021      	movs	r1, r4
    3e28:	2013      	movs	r0, #19
    3e2a:	7026      	strb	r6, [r4, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3e2c:	7067      	strb	r7, [r4, #1]
	config->powersave  = false;
    3e2e:	70a6      	strb	r6, [r4, #2]
    3e30:	47a8      	blx	r5
    3e32:	0021      	movs	r1, r4
    3e34:	2010      	movs	r0, #16
    3e36:	47a8      	blx	r5
    3e38:	0021      	movs	r1, r4
    3e3a:	2011      	movs	r0, #17
    3e3c:	47a8      	blx	r5
    3e3e:	0021      	movs	r1, r4
    3e40:	2012      	movs	r0, #18
    3e42:	47a8      	blx	r5
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    3e44:	0021      	movs	r1, r4
    3e46:	2014      	movs	r0, #20
	config.direction	= PORT_PIN_DIR_INPUT;
    3e48:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    3e4a:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    3e4c:	70a7      	strb	r7, [r4, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    3e4e:	47a8      	blx	r5
    3e50:	0021      	movs	r1, r4
    3e52:	2015      	movs	r0, #21
    3e54:	47a8      	blx	r5

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 1;
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    3e56:	0021      	movs	r1, r4
    3e58:	2018      	movs	r0, #24
	config.direction	= PORT_PIN_DIR_INPUT;
    3e5a:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    3e5c:	7067      	strb	r7, [r4, #1]
	config.powersave	= 1;
    3e5e:	70a7      	strb	r7, [r4, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    3e60:	47a8      	blx	r5
    3e62:	0021      	movs	r1, r4
    3e64:	2019      	movs	r0, #25
    3e66:	47a8      	blx	r5

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3e68:	2302      	movs	r3, #2
	config.powersave	= 1;
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    3e6a:	0021      	movs	r1, r4
    3e6c:	2036      	movs	r0, #54	; 0x36
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3e6e:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    3e70:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    3e72:	70a7      	strb	r7, [r4, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    3e74:	47a8      	blx	r5
    3e76:	0021      	movs	r1, r4
    3e78:	2022      	movs	r0, #34	; 0x22
    3e7a:	47a8      	blx	r5
    3e7c:	0021      	movs	r1, r4
    3e7e:	2037      	movs	r0, #55	; 0x37
    3e80:	47a8      	blx	r5
    3e82:	0021      	movs	r1, r4
    3e84:	2023      	movs	r0, #35	; 0x23
    3e86:	47a8      	blx	r5
    3e88:	0021      	movs	r1, r4
    3e8a:	202a      	movs	r0, #42	; 0x2a
    3e8c:	47a8      	blx	r5

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_UP;
	config.powersave	= 0;
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    3e8e:	0021      	movs	r1, r4
    3e90:	2003      	movs	r0, #3
	config.direction	= PORT_PIN_DIR_INPUT;
    3e92:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    3e94:	7067      	strb	r7, [r4, #1]
	config.powersave	= 0;
    3e96:	70a6      	strb	r6, [r4, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    3e98:	47a8      	blx	r5
    3e9a:	0021      	movs	r1, r4
    3e9c:	201f      	movs	r0, #31
    3e9e:	47a8      	blx	r5

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(BATSENSE_ADC_PIN);
    3ea0:	0021      	movs	r1, r4
    3ea2:	2002      	movs	r0, #2
	config.direction	= PORT_PIN_DIR_INPUT;
    3ea4:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    3ea6:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    3ea8:	70a7      	strb	r7, [r4, #2]
	CFG(BATSENSE_ADC_PIN);
    3eaa:	47a8      	blx	r5

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_NONE;
	config.powersave	= 1;
	CFG(LED_OUT_PIN);
    3eac:	0021      	movs	r1, r4
    3eae:	202b      	movs	r0, #43	; 0x2b
	config.direction	= PORT_PIN_DIR_INPUT;
    3eb0:	7026      	strb	r6, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    3eb2:	7066      	strb	r6, [r4, #1]
	config.powersave	= 1;
    3eb4:	70a7      	strb	r7, [r4, #2]
	CFG(LED_OUT_PIN);
    3eb6:	47a8      	blx	r5
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3eb8:	2302      	movs	r3, #2
	config.powersave	= 1;
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    3eba:	0021      	movs	r1, r4
    3ebc:	2004      	movs	r0, #4
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3ebe:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    3ec0:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    3ec2:	70a7      	strb	r7, [r4, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    3ec4:	47a8      	blx	r5
    3ec6:	0021      	movs	r1, r4
    3ec8:	2005      	movs	r0, #5
    3eca:	47a8      	blx	r5
    3ecc:	0021      	movs	r1, r4
    3ece:	2006      	movs	r0, #6
    3ed0:	47a8      	blx	r5
    3ed2:	0021      	movs	r1, r4
    3ed4:	2007      	movs	r0, #7
    3ed6:	47a8      	blx	r5
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    3ed8:	0021      	movs	r1, r4
    3eda:	2008      	movs	r0, #8
    3edc:	47a8      	blx	r5
    3ede:	0021      	movs	r1, r4
    3ee0:	2009      	movs	r0, #9
    3ee2:	47a8      	blx	r5
    3ee4:	0021      	movs	r1, r4
    3ee6:	200a      	movs	r0, #10
    3ee8:	47a8      	blx	r5
    3eea:	0021      	movs	r1, r4
    3eec:	200b      	movs	r0, #11
    3eee:	47a8      	blx	r5
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3ef0:	2302      	movs	r3, #2
	config.powersave	= 1;
	CFG(ACCYEN_GP_OUT_PIN);
    3ef2:	0021      	movs	r1, r4
    3ef4:	2017      	movs	r0, #23
	config.direction	= PORT_PIN_DIR_INPUT;
    3ef6:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    3ef8:	70a7      	strb	r7, [r4, #2]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3efa:	7063      	strb	r3, [r4, #1]
	CFG(ACCYEN_GP_OUT_PIN);
    3efc:	47a8      	blx	r5

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3efe:	2302      	movs	r3, #2
	config.powersave	= 1;
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    3f00:	0021      	movs	r1, r4
    3f02:	200e      	movs	r0, #14
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3f04:	7063      	strb	r3, [r4, #1]
	config.direction	= PORT_PIN_DIR_INPUT;
    3f06:	7026      	strb	r6, [r4, #0]
	config.powersave	= 1;
    3f08:	70a7      	strb	r7, [r4, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    3f0a:	47a8      	blx	r5
    3f0c:	0021      	movs	r1, r4
    3f0e:	200f      	movs	r0, #15
    3f10:	47a8      	blx	r5
    3f12:	0021      	movs	r1, r4
    3f14:	200c      	movs	r0, #12
    3f16:	47a8      	blx	r5
    3f18:	0021      	movs	r1, r4
    3f1a:	200d      	movs	r0, #13
    3f1c:	47a8      	blx	r5
    3f1e:	0021      	movs	r1, r4
    3f20:	2029      	movs	r0, #41	; 0x29
    3f22:	47a8      	blx	r5
    3f24:	0021      	movs	r1, r4
    3f26:	2016      	movs	r0, #22
    3f28:	47a8      	blx	r5
    3f2a:	0021      	movs	r1, r4
    3f2c:	2028      	movs	r0, #40	; 0x28
    3f2e:	47a8      	blx	r5
		port_base->OUTCLR.reg = pin_mask;
    3f30:	2280      	movs	r2, #128	; 0x80
    3f32:	4b09      	ldr	r3, [pc, #36]	; (3f58 <system_board_init+0x13c>)
    3f34:	0512      	lsls	r2, r2, #20
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    3f36:	7027      	strb	r7, [r4, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    3f38:	7066      	strb	r6, [r4, #1]
	config.powersave	= 0;
    3f3a:	70a6      	strb	r6, [r4, #2]
    3f3c:	615a      	str	r2, [r3, #20]
    3f3e:	2280      	movs	r2, #128	; 0x80
    3f40:	0552      	lsls	r2, r2, #21
    3f42:	615a      	str	r2, [r3, #20]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    3f44:	0021      	movs	r1, r4
    3f46:	201b      	movs	r0, #27
    3f48:	47a8      	blx	r5
    3f4a:	0021      	movs	r1, r4
    3f4c:	201c      	movs	r0, #28
    3f4e:	47a8      	blx	r5
	
    3f50:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    3f52:	46c0      	nop			; (mov r8, r8)
    3f54:	00003935 	.word	0x00003935
    3f58:	41004400 	.word	0x41004400

00003f5c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    3f5c:	4b09      	ldr	r3, [pc, #36]	; (3f84 <cpu_irq_enter_critical+0x28>)
    3f5e:	6819      	ldr	r1, [r3, #0]
    3f60:	2900      	cmp	r1, #0
    3f62:	d10b      	bne.n	3f7c <cpu_irq_enter_critical+0x20>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    3f64:	f3ef 8010 	mrs	r0, PRIMASK
    3f68:	4a07      	ldr	r2, [pc, #28]	; (3f88 <cpu_irq_enter_critical+0x2c>)
		if (cpu_irq_is_enabled()) {
    3f6a:	2800      	cmp	r0, #0
    3f6c:	d105      	bne.n	3f7a <cpu_irq_enter_critical+0x1e>
  __ASM volatile ("cpsid i" : : : "memory");
    3f6e:	b672      	cpsid	i
  __ASM volatile ("dmb");
    3f70:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    3f74:	4905      	ldr	r1, [pc, #20]	; (3f8c <cpu_irq_enter_critical+0x30>)
    3f76:	7008      	strb	r0, [r1, #0]
			cpu_irq_prev_interrupt_state = true;
    3f78:	2101      	movs	r1, #1
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    3f7a:	7011      	strb	r1, [r2, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    3f7c:	681a      	ldr	r2, [r3, #0]
    3f7e:	3201      	adds	r2, #1
    3f80:	601a      	str	r2, [r3, #0]
}
    3f82:	4770      	bx	lr
    3f84:	200002ec 	.word	0x200002ec
    3f88:	200002f0 	.word	0x200002f0
    3f8c:	20000009 	.word	0x20000009

00003f90 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    3f90:	4b08      	ldr	r3, [pc, #32]	; (3fb4 <cpu_irq_leave_critical+0x24>)
    3f92:	681a      	ldr	r2, [r3, #0]
    3f94:	3a01      	subs	r2, #1
    3f96:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    3f98:	681b      	ldr	r3, [r3, #0]
    3f9a:	2b00      	cmp	r3, #0
    3f9c:	d109      	bne.n	3fb2 <cpu_irq_leave_critical+0x22>
    3f9e:	4b06      	ldr	r3, [pc, #24]	; (3fb8 <cpu_irq_leave_critical+0x28>)
    3fa0:	781b      	ldrb	r3, [r3, #0]
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	d005      	beq.n	3fb2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    3fa6:	2201      	movs	r2, #1
    3fa8:	4b04      	ldr	r3, [pc, #16]	; (3fbc <cpu_irq_leave_critical+0x2c>)
    3faa:	701a      	strb	r2, [r3, #0]
    3fac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3fb0:	b662      	cpsie	i
	}
}
    3fb2:	4770      	bx	lr
    3fb4:	200002ec 	.word	0x200002ec
    3fb8:	200002f0 	.word	0x200002f0
    3fbc:	20000009 	.word	0x20000009

00003fc0 <_system_dfll_wait_for_sync>:
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    3fc0:	2310      	movs	r3, #16
    3fc2:	4902      	ldr	r1, [pc, #8]	; (3fcc <_system_dfll_wait_for_sync+0xc>)
    3fc4:	68ca      	ldr	r2, [r1, #12]
    3fc6:	421a      	tst	r2, r3
    3fc8:	d0fc      	beq.n	3fc4 <_system_dfll_wait_for_sync+0x4>
		/* Wait for DFLL sync */
	}
}
    3fca:	4770      	bx	lr
    3fcc:	40000800 	.word	0x40000800

00003fd0 <system_clock_source_enable.part.0>:
	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3fd0:	2202      	movs	r2, #2
enum status_code system_clock_source_enable(
    3fd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYSCTRL->DFLLCTRL.reg = 0;
    3fd4:	2600      	movs	r6, #0
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3fd6:	4d09      	ldr	r5, [pc, #36]	; (3ffc <system_clock_source_enable.part.0+0x2c>)
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3fd8:	4c09      	ldr	r4, [pc, #36]	; (4000 <system_clock_source_enable.part.0+0x30>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3fda:	682b      	ldr	r3, [r5, #0]
	_system_dfll_wait_for_sync();
    3fdc:	4f09      	ldr	r7, [pc, #36]	; (4004 <system_clock_source_enable.part.0+0x34>)
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    3fde:	4313      	orrs	r3, r2
    3fe0:	602b      	str	r3, [r5, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    3fe2:	84a2      	strh	r2, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3fe4:	47b8      	blx	r7
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    3fe6:	68ab      	ldr	r3, [r5, #8]
    3fe8:	62e3      	str	r3, [r4, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    3fea:	686b      	ldr	r3, [r5, #4]
    3fec:	62a3      	str	r3, [r4, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    3fee:	84a6      	strh	r6, [r4, #36]	; 0x24
	_system_dfll_wait_for_sync();
    3ff0:	47b8      	blx	r7
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3ff2:	682b      	ldr	r3, [r5, #0]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
}
    3ff4:	0030      	movs	r0, r6
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    3ff6:	b29b      	uxth	r3, r3
    3ff8:	84a3      	strh	r3, [r4, #36]	; 0x24
}
    3ffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3ffc:	200002f4 	.word	0x200002f4
    4000:	40000800 	.word	0x40000800
    4004:	00003fc1 	.word	0x00003fc1

00004008 <system_clock_source_get_hz>:
{
    4008:	b570      	push	{r4, r5, r6, lr}
	switch (clock_source) {
    400a:	2808      	cmp	r0, #8
    400c:	d806      	bhi.n	401c <system_clock_source_get_hz+0x14>
    400e:	f000 fbe5 	bl	47dc <__gnu_thumb1_case_uqi>
    4012:	0508      	.short	0x0508
    4014:	122e2e05 	.word	0x122e2e05
    4018:	150b      	.short	0x150b
    401a:	26          	.byte	0x26
    401b:	00          	.byte	0x00
		return 0;
    401c:	2400      	movs	r4, #0
}
    401e:	0020      	movs	r0, r4
    4020:	bd70      	pop	{r4, r5, r6, pc}
		return _system_clock_inst.xosc.frequency;
    4022:	4b15      	ldr	r3, [pc, #84]	; (4078 <system_clock_source_get_hz+0x70>)
    4024:	691c      	ldr	r4, [r3, #16]
    4026:	e7fa      	b.n	401e <system_clock_source_get_hz+0x16>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    4028:	4b14      	ldr	r3, [pc, #80]	; (407c <system_clock_source_get_hz+0x74>)
    402a:	4c15      	ldr	r4, [pc, #84]	; (4080 <system_clock_source_get_hz+0x78>)
    402c:	6a1b      	ldr	r3, [r3, #32]
    402e:	059b      	lsls	r3, r3, #22
    4030:	0f9b      	lsrs	r3, r3, #30
    4032:	40dc      	lsrs	r4, r3
    4034:	e7f3      	b.n	401e <system_clock_source_get_hz+0x16>
		return _system_clock_inst.xosc32k.frequency;
    4036:	4b10      	ldr	r3, [pc, #64]	; (4078 <system_clock_source_get_hz+0x70>)
    4038:	695c      	ldr	r4, [r3, #20]
    403a:	e7f0      	b.n	401e <system_clock_source_get_hz+0x16>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    403c:	4d0e      	ldr	r5, [pc, #56]	; (4078 <system_clock_source_get_hz+0x70>)
			return 0;
    403e:	2400      	movs	r4, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    4040:	682b      	ldr	r3, [r5, #0]
    4042:	079b      	lsls	r3, r3, #30
    4044:	d5eb      	bpl.n	401e <system_clock_source_get_hz+0x16>
		_system_dfll_wait_for_sync();
    4046:	4b0f      	ldr	r3, [pc, #60]	; (4084 <system_clock_source_get_hz+0x7c>)
    4048:	4798      	blx	r3
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    404a:	682b      	ldr	r3, [r5, #0]
    404c:	075b      	lsls	r3, r3, #29
    404e:	d511      	bpl.n	4074 <system_clock_source_get_hz+0x6c>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    4050:	0020      	movs	r0, r4
    4052:	4b0d      	ldr	r3, [pc, #52]	; (4088 <system_clock_source_get_hz+0x80>)
    4054:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    4056:	68ac      	ldr	r4, [r5, #8]
    4058:	b2a4      	uxth	r4, r4
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    405a:	4344      	muls	r4, r0
    405c:	e7df      	b.n	401e <system_clock_source_get_hz+0x16>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    405e:	4b0b      	ldr	r3, [pc, #44]	; (408c <system_clock_source_get_hz+0x84>)
			return 0;
    4060:	2400      	movs	r4, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    4062:	781b      	ldrb	r3, [r3, #0]
    4064:	075b      	lsls	r3, r3, #29
    4066:	d5da      	bpl.n	401e <system_clock_source_get_hz+0x16>
		return _system_clock_inst.dpll.frequency;
    4068:	4b03      	ldr	r3, [pc, #12]	; (4078 <system_clock_source_get_hz+0x70>)
    406a:	68dc      	ldr	r4, [r3, #12]
    406c:	e7d7      	b.n	401e <system_clock_source_get_hz+0x16>
		return 32768UL;
    406e:	2480      	movs	r4, #128	; 0x80
    4070:	0224      	lsls	r4, r4, #8
    4072:	e7d4      	b.n	401e <system_clock_source_get_hz+0x16>
		return 48000000UL;
    4074:	4c06      	ldr	r4, [pc, #24]	; (4090 <system_clock_source_get_hz+0x88>)
    4076:	e7d2      	b.n	401e <system_clock_source_get_hz+0x16>
    4078:	200002f4 	.word	0x200002f4
    407c:	40000800 	.word	0x40000800
    4080:	007a1200 	.word	0x007a1200
    4084:	00003fc1 	.word	0x00003fc1
    4088:	00004609 	.word	0x00004609
    408c:	40000850 	.word	0x40000850
    4090:	02dc6c00 	.word	0x02dc6c00

00004094 <system_clock_source_osc8m_set_config>:
{
    4094:	b570      	push	{r4, r5, r6, lr}
	temp.bit.ONDEMAND = config->on_demand;
    4096:	7884      	ldrb	r4, [r0, #2]
	temp.bit.PRESC    = config->prescaler;
    4098:	7802      	ldrb	r2, [r0, #0]
	SYSCTRL->OSC8M = temp;
    409a:	7845      	ldrb	r5, [r0, #1]
    409c:	2001      	movs	r0, #1
    409e:	2640      	movs	r6, #64	; 0x40
    40a0:	4005      	ands	r5, r0
    40a2:	4020      	ands	r0, r4
    40a4:	2480      	movs	r4, #128	; 0x80
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    40a6:	4908      	ldr	r1, [pc, #32]	; (40c8 <system_clock_source_osc8m_set_config+0x34>)
	SYSCTRL->OSC8M = temp;
    40a8:	01ad      	lsls	r5, r5, #6
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    40aa:	6a0b      	ldr	r3, [r1, #32]
	SYSCTRL->OSC8M = temp;
    40ac:	01c0      	lsls	r0, r0, #7
    40ae:	43b3      	bics	r3, r6
    40b0:	432b      	orrs	r3, r5
    40b2:	43a3      	bics	r3, r4
    40b4:	4303      	orrs	r3, r0
    40b6:	2003      	movs	r0, #3
    40b8:	4002      	ands	r2, r0
    40ba:	4804      	ldr	r0, [pc, #16]	; (40cc <system_clock_source_osc8m_set_config+0x38>)
    40bc:	0212      	lsls	r2, r2, #8
    40be:	4003      	ands	r3, r0
    40c0:	4313      	orrs	r3, r2
    40c2:	620b      	str	r3, [r1, #32]
}
    40c4:	bd70      	pop	{r4, r5, r6, pc}
    40c6:	46c0      	nop			; (mov r8, r8)
    40c8:	40000800 	.word	0x40000800
    40cc:	fffffcff 	.word	0xfffffcff

000040d0 <system_clock_source_xosc32k_set_config>:
{
    40d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    40d2:	4b22      	ldr	r3, [pc, #136]	; (415c <system_clock_source_xosc32k_set_config+0x8c>)
	temp.bit.STARTUP = config->startup_time;
    40d4:	7842      	ldrb	r2, [r0, #1]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    40d6:	7807      	ldrb	r7, [r0, #0]
{
    40d8:	b085      	sub	sp, #20
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    40da:	469c      	mov	ip, r3
    40dc:	8a9b      	ldrh	r3, [r3, #20]
	temp.bit.STARTUP = config->startup_time;
    40de:	9203      	str	r2, [sp, #12]
	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    40e0:	427a      	negs	r2, r7
    40e2:	4157      	adcs	r7, r2
	temp.bit.ONDEMAND = config->on_demand;
    40e4:	7b42      	ldrb	r2, [r0, #13]
	temp.bit.AAMPEN = config->auto_gain_control;
    40e6:	7884      	ldrb	r4, [r0, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    40e8:	78c5      	ldrb	r5, [r0, #3]
	temp.bit.EN32K = config->enable_32khz_output;
    40ea:	7906      	ldrb	r6, [r0, #4]
	temp.bit.ONDEMAND = config->on_demand;
    40ec:	9201      	str	r2, [sp, #4]
	temp.bit.RUNSTDBY = config->run_in_standby;
    40ee:	7b02      	ldrb	r2, [r0, #12]
    40f0:	9202      	str	r2, [sp, #8]
	temp.bit.WRTLOCK  = config->write_once;
    40f2:	7b81      	ldrb	r1, [r0, #14]
	_system_clock_inst.xosc32k.frequency = config->frequency;
    40f4:	4a1a      	ldr	r2, [pc, #104]	; (4160 <system_clock_source_xosc32k_set_config+0x90>)
    40f6:	6880      	ldr	r0, [r0, #8]
    40f8:	6150      	str	r0, [r2, #20]
	SYSCTRL->XOSC32K = temp;
    40fa:	00b8      	lsls	r0, r7, #2
    40fc:	2704      	movs	r7, #4
    40fe:	2201      	movs	r2, #1
    4100:	43bb      	bics	r3, r7
    4102:	4318      	orrs	r0, r3
    4104:	2308      	movs	r3, #8
    4106:	4015      	ands	r5, r2
    4108:	40bd      	lsls	r5, r7
    410a:	4016      	ands	r6, r2
    410c:	4398      	bics	r0, r3
    410e:	00f6      	lsls	r6, r6, #3
    4110:	4306      	orrs	r6, r0
    4112:	18db      	adds	r3, r3, r3
    4114:	439e      	bics	r6, r3
    4116:	4335      	orrs	r5, r6
    4118:	3310      	adds	r3, #16
    411a:	439d      	bics	r5, r3
    411c:	002b      	movs	r3, r5
    411e:	2040      	movs	r0, #64	; 0x40
    4120:	4014      	ands	r4, r2
    4122:	0164      	lsls	r4, r4, #5
    4124:	4323      	orrs	r3, r4
    4126:	9c02      	ldr	r4, [sp, #8]
    4128:	4383      	bics	r3, r0
    412a:	4014      	ands	r4, r2
    412c:	01a4      	lsls	r4, r4, #6
    412e:	4323      	orrs	r3, r4
    4130:	2480      	movs	r4, #128	; 0x80
    4132:	9801      	ldr	r0, [sp, #4]
    4134:	43a3      	bics	r3, r4
    4136:	4010      	ands	r0, r2
    4138:	01c0      	lsls	r0, r0, #7
    413a:	4303      	orrs	r3, r0
    413c:	2007      	movs	r0, #7
    413e:	9c03      	ldr	r4, [sp, #12]
    4140:	4011      	ands	r1, r2
    4142:	4020      	ands	r0, r4
    4144:	4c07      	ldr	r4, [pc, #28]	; (4164 <system_clock_source_xosc32k_set_config+0x94>)
    4146:	0200      	lsls	r0, r0, #8
    4148:	4023      	ands	r3, r4
    414a:	4a07      	ldr	r2, [pc, #28]	; (4168 <system_clock_source_xosc32k_set_config+0x98>)
    414c:	4303      	orrs	r3, r0
    414e:	401a      	ands	r2, r3
    4150:	4663      	mov	r3, ip
    4152:	0309      	lsls	r1, r1, #12
    4154:	430a      	orrs	r2, r1
    4156:	829a      	strh	r2, [r3, #20]
}
    4158:	b005      	add	sp, #20
    415a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    415c:	40000800 	.word	0x40000800
    4160:	200002f4 	.word	0x200002f4
    4164:	fffff8ff 	.word	0xfffff8ff
    4168:	ffffefff 	.word	0xffffefff

0000416c <system_clock_source_dfll_set_config>:
{
    416c:	b510      	push	{r4, lr}
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    416e:	7a02      	ldrb	r2, [r0, #8]
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4170:	8943      	ldrh	r3, [r0, #10]
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4172:	0692      	lsls	r2, r2, #26
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    4174:	059b      	lsls	r3, r3, #22
    4176:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    4178:	0c12      	lsrs	r2, r2, #16
    417a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    417c:	4b17      	ldr	r3, [pc, #92]	; (41dc <system_clock_source_dfll_set_config+0x70>)
    417e:	605a      	str	r2, [r3, #4]
			(uint32_t)config->wakeup_lock     |
    4180:	79c1      	ldrb	r1, [r0, #7]
    4182:	7982      	ldrb	r2, [r0, #6]
			(uint32_t)config->quick_lock      |
    4184:	8884      	ldrh	r4, [r0, #4]
			(uint32_t)config->wakeup_lock     |
    4186:	430a      	orrs	r2, r1
			(uint32_t)config->quick_lock      |
    4188:	8841      	ldrh	r1, [r0, #2]
    418a:	4321      	orrs	r1, r4
    418c:	430a      	orrs	r2, r1
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    418e:	7841      	ldrb	r1, [r0, #1]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4190:	7804      	ldrb	r4, [r0, #0]
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    4192:	01c9      	lsls	r1, r1, #7
			(uint32_t)config->chill_cycle     |
    4194:	430a      	orrs	r2, r1
	_system_clock_inst.dfll.control =
    4196:	601a      	str	r2, [r3, #0]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    4198:	2c04      	cmp	r4, #4
    419a:	d10d      	bne.n	41b8 <system_clock_source_dfll_set_config+0x4c>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    419c:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    419e:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    41a0:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    41a2:	430a      	orrs	r2, r1
    41a4:	89c1      	ldrh	r1, [r0, #14]
    41a6:	480e      	ldr	r0, [pc, #56]	; (41e0 <system_clock_source_dfll_set_config+0x74>)
    41a8:	0409      	lsls	r1, r1, #16
    41aa:	4001      	ands	r1, r0
    41ac:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    41ae:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    41b0:	681a      	ldr	r2, [r3, #0]
    41b2:	4314      	orrs	r4, r2
    41b4:	601c      	str	r4, [r3, #0]
}
    41b6:	bd10      	pop	{r4, pc}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    41b8:	2c20      	cmp	r4, #32
    41ba:	d1fc      	bne.n	41b6 <system_clock_source_dfll_set_config+0x4a>
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    41bc:	7b02      	ldrb	r2, [r0, #12]
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    41be:	8a01      	ldrh	r1, [r0, #16]
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    41c0:	0692      	lsls	r2, r2, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    41c2:	430a      	orrs	r2, r1
    41c4:	89c1      	ldrh	r1, [r0, #14]
    41c6:	4806      	ldr	r0, [pc, #24]	; (41e0 <system_clock_source_dfll_set_config+0x74>)
    41c8:	0409      	lsls	r1, r1, #16
    41ca:	4001      	ands	r1, r0
    41cc:	430a      	orrs	r2, r1
		_system_clock_inst.dfll.mul =
    41ce:	609a      	str	r2, [r3, #8]
		_system_clock_inst.dfll.control |= config->loop_mode |
    41d0:	6819      	ldr	r1, [r3, #0]
    41d2:	4a04      	ldr	r2, [pc, #16]	; (41e4 <system_clock_source_dfll_set_config+0x78>)
    41d4:	430a      	orrs	r2, r1
    41d6:	601a      	str	r2, [r3, #0]
}
    41d8:	e7ed      	b.n	41b6 <system_clock_source_dfll_set_config+0x4a>
    41da:	46c0      	nop			; (mov r8, r8)
    41dc:	200002f4 	.word	0x200002f4
    41e0:	03ff0000 	.word	0x03ff0000
    41e4:	00000424 	.word	0x00000424

000041e8 <system_clock_source_enable>:
{
    41e8:	b510      	push	{r4, lr}
	switch (clock_source) {
    41ea:	2808      	cmp	r0, #8
    41ec:	d806      	bhi.n	41fc <system_clock_source_enable+0x14>
    41ee:	f000 faf5 	bl	47dc <__gnu_thumb1_case_uqi>
    41f2:	0514      	.short	0x0514
    41f4:	1a0e0c05 	.word	0x1a0e0c05
    41f8:	2007      	.short	0x2007
    41fa:	23          	.byte	0x23
    41fb:	00          	.byte	0x00
		return STATUS_ERR_INVALID_ARG;
    41fc:	2017      	movs	r0, #23
}
    41fe:	bd10      	pop	{r4, pc}
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    4200:	2302      	movs	r3, #2
    4202:	4a10      	ldr	r2, [pc, #64]	; (4244 <system_clock_source_enable+0x5c>)
    4204:	6a11      	ldr	r1, [r2, #32]
    4206:	430b      	orrs	r3, r1
    4208:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    420a:	2000      	movs	r0, #0
    420c:	e7f7      	b.n	41fe <system_clock_source_enable+0x16>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    420e:	2302      	movs	r3, #2
    4210:	4a0c      	ldr	r2, [pc, #48]	; (4244 <system_clock_source_enable+0x5c>)
    4212:	6991      	ldr	r1, [r2, #24]
    4214:	430b      	orrs	r3, r1
    4216:	6193      	str	r3, [r2, #24]
    4218:	e7f7      	b.n	420a <system_clock_source_enable+0x22>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    421a:	2302      	movs	r3, #2
    421c:	4a09      	ldr	r2, [pc, #36]	; (4244 <system_clock_source_enable+0x5c>)
    421e:	8a11      	ldrh	r1, [r2, #16]
    4220:	430b      	orrs	r3, r1
    4222:	8213      	strh	r3, [r2, #16]
    4224:	e7f1      	b.n	420a <system_clock_source_enable+0x22>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    4226:	2302      	movs	r3, #2
    4228:	4a06      	ldr	r2, [pc, #24]	; (4244 <system_clock_source_enable+0x5c>)
    422a:	8a91      	ldrh	r1, [r2, #20]
    422c:	430b      	orrs	r3, r1
    422e:	8293      	strh	r3, [r2, #20]
    4230:	e7eb      	b.n	420a <system_clock_source_enable+0x22>
    4232:	4b05      	ldr	r3, [pc, #20]	; (4248 <system_clock_source_enable+0x60>)
    4234:	4798      	blx	r3
    4236:	e7e2      	b.n	41fe <system_clock_source_enable+0x16>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    4238:	2302      	movs	r3, #2
    423a:	4a04      	ldr	r2, [pc, #16]	; (424c <system_clock_source_enable+0x64>)
    423c:	7811      	ldrb	r1, [r2, #0]
    423e:	430b      	orrs	r3, r1
    4240:	7013      	strb	r3, [r2, #0]
    4242:	e7e2      	b.n	420a <system_clock_source_enable+0x22>
    4244:	40000800 	.word	0x40000800
    4248:	00003fd1 	.word	0x00003fd1
    424c:	40000844 	.word	0x40000844

00004250 <system_clock_init>:
 */
void system_clock_init(void)
{
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4250:	23c2      	movs	r3, #194	; 0xc2
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    4252:	221e      	movs	r2, #30
{
    4254:	b5f0      	push	{r4, r5, r6, r7, lr}
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    4256:	4d4e      	ldr	r5, [pc, #312]	; (4390 <system_clock_init+0x140>)
    4258:	00db      	lsls	r3, r3, #3
    425a:	494e      	ldr	r1, [pc, #312]	; (4394 <system_clock_init+0x144>)
    425c:	60ab      	str	r3, [r5, #8]
    425e:	684b      	ldr	r3, [r1, #4]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    4260:	2600      	movs	r6, #0
    4262:	4393      	bics	r3, r2
    4264:	001a      	movs	r2, r3
    4266:	2302      	movs	r3, #2
    4268:	4313      	orrs	r3, r2
    426a:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    426c:	2303      	movs	r3, #3
{
    426e:	b08f      	sub	sp, #60	; 0x3c
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    4270:	ac09      	add	r4, sp, #36	; 0x24
    4272:	7023      	strb	r3, [r4, #0]
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    4274:	b2f0      	uxtb	r0, r6
    4276:	0021      	movs	r1, r4
    4278:	4b47      	ldr	r3, [pc, #284]	; (4398 <system_clock_init+0x148>)
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    427a:	3601      	adds	r6, #1
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    427c:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    427e:	2e25      	cmp	r6, #37	; 0x25
    4280:	d1f8      	bne.n	4274 <system_clock_init+0x24>
	config->frequency           = 32768UL;
    4282:	2280      	movs	r2, #128	; 0x80
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    4284:	a805      	add	r0, sp, #20
    4286:	2300      	movs	r3, #0
	config->frequency           = 32768UL;
    4288:	0212      	lsls	r2, r2, #8
    428a:	6082      	str	r2, [r0, #8]
	config->enable_32khz_output = true;
    428c:	2201      	movs	r2, #1
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    428e:	7003      	strb	r3, [r0, #0]
	config->enable_1khz_output  = false;
    4290:	70c3      	strb	r3, [r0, #3]
	config->write_once          = false;
    4292:	7383      	strb	r3, [r0, #14]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    4294:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    4296:	3e23      	subs	r6, #35	; 0x23
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    4298:	4b40      	ldr	r3, [pc, #256]	; (439c <system_clock_init+0x14c>)
	config->enable_32khz_output = true;
    429a:	7102      	strb	r2, [r0, #4]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    429c:	7046      	strb	r6, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    429e:	7082      	strb	r2, [r0, #2]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    42a0:	7302      	strb	r2, [r0, #12]
	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    42a2:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    42a4:	2005      	movs	r0, #5
    42a6:	4b3e      	ldr	r3, [pc, #248]	; (43a0 <system_clock_init+0x150>)
    42a8:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    42aa:	68eb      	ldr	r3, [r5, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    42ac:	4233      	tst	r3, r6
    42ae:	d0fc      	beq.n	42aa <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    42b0:	2380      	movs	r3, #128	; 0x80
    42b2:	8aaa      	ldrh	r2, [r5, #20]
    42b4:	4313      	orrs	r3, r2
    42b6:	82ab      	strh	r3, [r5, #20]
	config->fine_value      = 0xff / 4; /* Midpoint */
    42b8:	223f      	movs	r2, #63	; 0x3f
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    42ba:	2300      	movs	r3, #0
	config->fine_value      = 0xff / 4; /* Midpoint */
    42bc:	8162      	strh	r2, [r4, #10]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    42be:	8063      	strh	r3, [r4, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    42c0:	80a3      	strh	r3, [r4, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    42c2:	71a3      	strb	r3, [r4, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    42c4:	71e3      	strb	r3, [r4, #7]
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
	dfll_conf.on_demand      = false;
    42c6:	7063      	strb	r3, [r4, #1]
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    42c8:	3a3b      	subs	r2, #59	; 0x3b
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    42ca:	4b36      	ldr	r3, [pc, #216]	; (43a4 <system_clock_init+0x154>)
	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    42cc:	7022      	strb	r2, [r4, #0]
	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    42ce:	681b      	ldr	r3, [r3, #0]
    42d0:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    42d2:	2b3f      	cmp	r3, #63	; 0x3f
    42d4:	d100      	bne.n	42d8 <system_clock_init+0x88>
		coarse = 0x1f;
    42d6:	3b20      	subs	r3, #32
	}
	dfll_conf.coarse_value = coarse;
    42d8:	7223      	strb	r3, [r4, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    42da:	4b33      	ldr	r3, [pc, #204]	; (43a8 <system_clock_init+0x158>)
	config->run_in_standby  = false;
    42dc:	2600      	movs	r6, #0
    42de:	8223      	strh	r3, [r4, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    42e0:	2307      	movs	r3, #7
	config->on_demand       = true;
    42e2:	2701      	movs	r7, #1
    42e4:	7323      	strb	r3, [r4, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    42e6:	3338      	adds	r3, #56	; 0x38
    42e8:	81e3      	strh	r3, [r4, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    42ea:	0020      	movs	r0, r4
    42ec:	4b2f      	ldr	r3, [pc, #188]	; (43ac <system_clock_init+0x15c>)
    42ee:	4798      	blx	r3
	config->run_in_standby  = false;
    42f0:	a801      	add	r0, sp, #4

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    42f2:	4b2f      	ldr	r3, [pc, #188]	; (43b0 <system_clock_init+0x160>)
    42f4:	7046      	strb	r6, [r0, #1]
	config->on_demand       = true;
    42f6:	7087      	strb	r7, [r0, #2]
	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    42f8:	7006      	strb	r6, [r0, #0]
	system_clock_source_osc8m_set_config(&osc8m_conf);
    42fa:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    42fc:	4b28      	ldr	r3, [pc, #160]	; (43a0 <system_clock_init+0x150>)
    42fe:	2006      	movs	r0, #6
    4300:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    4302:	4b2c      	ldr	r3, [pc, #176]	; (43b4 <system_clock_init+0x164>)
    4304:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    4306:	2305      	movs	r3, #5
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    4308:	ac02      	add	r4, sp, #8
    430a:	0021      	movs	r1, r4
    430c:	7023      	strb	r3, [r4, #0]
    430e:	0038      	movs	r0, r7
    4310:	4b29      	ldr	r3, [pc, #164]	; (43b8 <system_clock_init+0x168>)
    4312:	6067      	str	r7, [r4, #4]
	config->high_when_disabled = false;
    4314:	7066      	strb	r6, [r4, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    4316:	7226      	strb	r6, [r4, #8]
	config->output_enable      = false;
    4318:	7266      	strb	r6, [r4, #9]
    431a:	4798      	blx	r3
    431c:	0038      	movs	r0, r7
    431e:	4b27      	ldr	r3, [pc, #156]	; (43bc <system_clock_init+0x16c>)
    4320:	4798      	blx	r3
    4322:	2305      	movs	r3, #5
    4324:	7023      	strb	r3, [r4, #0]
    4326:	2320      	movs	r3, #32
    4328:	0021      	movs	r1, r4
    432a:	6063      	str	r3, [r4, #4]
    432c:	2002      	movs	r0, #2
    432e:	4b22      	ldr	r3, [pc, #136]	; (43b8 <system_clock_init+0x168>)
	config->high_when_disabled = false;
    4330:	7066      	strb	r6, [r4, #1]
	config->output_enable      = false;
    4332:	7266      	strb	r6, [r4, #9]
    4334:	7227      	strb	r7, [r4, #8]
    4336:	4798      	blx	r3
    4338:	2002      	movs	r0, #2
    433a:	4b20      	ldr	r3, [pc, #128]	; (43bc <system_clock_init+0x16c>)
    433c:	4798      	blx	r3
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    433e:	0021      	movs	r1, r4
    4340:	0030      	movs	r0, r6
    4342:	4b15      	ldr	r3, [pc, #84]	; (4398 <system_clock_init+0x148>)
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    4344:	7027      	strb	r7, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    4346:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    4348:	0030      	movs	r0, r6
    434a:	4b1d      	ldr	r3, [pc, #116]	; (43c0 <system_clock_init+0x170>)
    434c:	4798      	blx	r3
    434e:	4b1d      	ldr	r3, [pc, #116]	; (43c4 <system_clock_init+0x174>)
    4350:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    4352:	22d0      	movs	r2, #208	; 0xd0
    4354:	68eb      	ldr	r3, [r5, #12]
    4356:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    4358:	2bd0      	cmp	r3, #208	; 0xd0
    435a:	d1fb      	bne.n	4354 <system_clock_init+0x104>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    435c:	8caa      	ldrh	r2, [r5, #36]	; 0x24
    435e:	3b50      	subs	r3, #80	; 0x50
    4360:	4313      	orrs	r3, r2
    4362:	84ab      	strh	r3, [r5, #36]	; 0x24
	PM->CPUSEL.reg = (uint32_t)divider;
    4364:	2500      	movs	r5, #0
    4366:	4b18      	ldr	r3, [pc, #96]	; (43c8 <system_clock_init+0x178>)
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    4368:	0021      	movs	r1, r4
    436a:	721d      	strb	r5, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    436c:	725d      	strb	r5, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    436e:	729d      	strb	r5, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    4370:	72dd      	strb	r5, [r3, #11]
	config->division_factor    = 1;
    4372:	2301      	movs	r3, #1
    4374:	6063      	str	r3, [r4, #4]
    4376:	3306      	adds	r3, #6
    4378:	7023      	strb	r3, [r4, #0]
    437a:	0028      	movs	r0, r5
    437c:	4b0e      	ldr	r3, [pc, #56]	; (43b8 <system_clock_init+0x168>)
	config->high_when_disabled = false;
    437e:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    4380:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    4382:	7265      	strb	r5, [r4, #9]
    4384:	4798      	blx	r3
    4386:	0028      	movs	r0, r5
    4388:	4b0c      	ldr	r3, [pc, #48]	; (43bc <system_clock_init+0x16c>)
    438a:	4798      	blx	r3
#endif
}
    438c:	b00f      	add	sp, #60	; 0x3c
    438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4390:	40000800 	.word	0x40000800
    4394:	41004000 	.word	0x41004000
    4398:	000045ed 	.word	0x000045ed
    439c:	000040d1 	.word	0x000040d1
    43a0:	000041e9 	.word	0x000041e9
    43a4:	00806024 	.word	0x00806024
    43a8:	000005dc 	.word	0x000005dc
    43ac:	0000416d 	.word	0x0000416d
    43b0:	00004095 	.word	0x00004095
    43b4:	000043d9 	.word	0x000043d9
    43b8:	000043f9 	.word	0x000043f9
    43bc:	0000449d 	.word	0x0000449d
    43c0:	00004565 	.word	0x00004565
    43c4:	00003fd1 	.word	0x00003fd1
    43c8:	40000400 	.word	0x40000400

000043cc <system_gclk_is_syncing>:
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    43cc:	4b01      	ldr	r3, [pc, #4]	; (43d4 <system_gclk_is_syncing+0x8>)
    43ce:	7858      	ldrb	r0, [r3, #1]
    43d0:	09c0      	lsrs	r0, r0, #7
		return true;
	}

	return false;
}
    43d2:	4770      	bx	lr
    43d4:	40000c00 	.word	0x40000c00

000043d8 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    43d8:	2308      	movs	r3, #8
    43da:	4a05      	ldr	r2, [pc, #20]	; (43f0 <system_gclk_init+0x18>)
    43dc:	6991      	ldr	r1, [r2, #24]
    43de:	430b      	orrs	r3, r1
    43e0:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    43e2:	2301      	movs	r3, #1
    43e4:	4a03      	ldr	r2, [pc, #12]	; (43f4 <system_gclk_init+0x1c>)
    43e6:	7013      	strb	r3, [r2, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    43e8:	7811      	ldrb	r1, [r2, #0]
    43ea:	4219      	tst	r1, r3
    43ec:	d1fc      	bne.n	43e8 <system_gclk_init+0x10>
		/* Wait for reset to complete */
	}
}
    43ee:	4770      	bx	lr
    43f0:	40000400 	.word	0x40000400
    43f4:	40000c00 	.word	0x40000c00

000043f8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    43f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    43fa:	780c      	ldrb	r4, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    43fc:	784b      	ldrb	r3, [r1, #1]
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    43fe:	0224      	lsls	r4, r4, #8
{
    4400:	0006      	movs	r6, r0
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    4402:	0005      	movs	r5, r0
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    4404:	4304      	orrs	r4, r0
	if (config->high_when_disabled) {
    4406:	2b00      	cmp	r3, #0
    4408:	d002      	beq.n	4410 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    440a:	2380      	movs	r3, #128	; 0x80
    440c:	02db      	lsls	r3, r3, #11
    440e:	431c      	orrs	r4, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    4410:	7a4b      	ldrb	r3, [r1, #9]
    4412:	2b00      	cmp	r3, #0
    4414:	d002      	beq.n	441c <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    4416:	2380      	movs	r3, #128	; 0x80
    4418:	031b      	lsls	r3, r3, #12
    441a:	431c      	orrs	r4, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    441c:	684b      	ldr	r3, [r1, #4]
    441e:	2b01      	cmp	r3, #1
    4420:	d912      	bls.n	4448 <system_gclk_gen_set_config+0x50>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    4422:	1e5d      	subs	r5, r3, #1
    4424:	401d      	ands	r5, r3
    4426:	2202      	movs	r2, #2
    4428:	2d00      	cmp	r5, #0
    442a:	d006      	beq.n	443a <system_gclk_gen_set_config+0x42>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    442c:	021d      	lsls	r5, r3, #8

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    442e:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |=
    4430:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4432:	029b      	lsls	r3, r3, #10
    4434:	e007      	b.n	4446 <system_gclk_gen_set_config+0x4e>
				div2_count++;
    4436:	3501      	adds	r5, #1
						mask <<= 1) {
    4438:	0052      	lsls	r2, r2, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    443a:	429a      	cmp	r2, r3
    443c:	d3fb      	bcc.n	4436 <system_gclk_gen_set_config+0x3e>
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    443e:	2380      	movs	r3, #128	; 0x80
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    4440:	022d      	lsls	r5, r5, #8
    4442:	4335      	orrs	r5, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    4444:	035b      	lsls	r3, r3, #13
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    4446:	431c      	orrs	r4, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    4448:	7a0b      	ldrb	r3, [r1, #8]
    444a:	2b00      	cmp	r3, #0
    444c:	d002      	beq.n	4454 <system_gclk_gen_set_config+0x5c>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    444e:	2380      	movs	r3, #128	; 0x80
    4450:	039b      	lsls	r3, r3, #14
    4452:	431c      	orrs	r4, r3
	}

	while (system_gclk_is_syncing()) {
    4454:	4f0c      	ldr	r7, [pc, #48]	; (4488 <system_gclk_gen_set_config+0x90>)
    4456:	47b8      	blx	r7
    4458:	2800      	cmp	r0, #0
    445a:	d1fb      	bne.n	4454 <system_gclk_gen_set_config+0x5c>
	cpu_irq_enter_critical();
    445c:	4b0b      	ldr	r3, [pc, #44]	; (448c <system_gclk_gen_set_config+0x94>)
    445e:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4460:	4b0b      	ldr	r3, [pc, #44]	; (4490 <system_gclk_gen_set_config+0x98>)
    4462:	701e      	strb	r6, [r3, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    4464:	47b8      	blx	r7
    4466:	2800      	cmp	r0, #0
    4468:	d1fc      	bne.n	4464 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    446a:	4b0a      	ldr	r3, [pc, #40]	; (4494 <system_gclk_gen_set_config+0x9c>)
    446c:	609d      	str	r5, [r3, #8]
    446e:	001d      	movs	r5, r3

	while (system_gclk_is_syncing()) {
    4470:	47b8      	blx	r7
    4472:	2800      	cmp	r0, #0
    4474:	d1fc      	bne.n	4470 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    4476:	2280      	movs	r2, #128	; 0x80
    4478:	686b      	ldr	r3, [r5, #4]
    447a:	0252      	lsls	r2, r2, #9
    447c:	4013      	ands	r3, r2
    447e:	431c      	orrs	r4, r3
    4480:	606c      	str	r4, [r5, #4]
	cpu_irq_leave_critical();
    4482:	4b05      	ldr	r3, [pc, #20]	; (4498 <system_gclk_gen_set_config+0xa0>)
    4484:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4488:	000043cd 	.word	0x000043cd
    448c:	00003f5d 	.word	0x00003f5d
    4490:	40000c08 	.word	0x40000c08
    4494:	40000c00 	.word	0x40000c00
    4498:	00003f91 	.word	0x00003f91

0000449c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    449c:	b570      	push	{r4, r5, r6, lr}
    449e:	0005      	movs	r5, r0
	while (system_gclk_is_syncing()) {
    44a0:	4c09      	ldr	r4, [pc, #36]	; (44c8 <system_gclk_gen_enable+0x2c>)
    44a2:	47a0      	blx	r4
    44a4:	2800      	cmp	r0, #0
    44a6:	d1fb      	bne.n	44a0 <system_gclk_gen_enable+0x4>
	cpu_irq_enter_critical();
    44a8:	4b08      	ldr	r3, [pc, #32]	; (44cc <system_gclk_gen_enable+0x30>)
    44aa:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    44ac:	4b08      	ldr	r3, [pc, #32]	; (44d0 <system_gclk_gen_enable+0x34>)
    44ae:	701d      	strb	r5, [r3, #0]
	while (system_gclk_is_syncing()) {
    44b0:	47a0      	blx	r4
    44b2:	2800      	cmp	r0, #0
    44b4:	d1fc      	bne.n	44b0 <system_gclk_gen_enable+0x14>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    44b6:	2380      	movs	r3, #128	; 0x80
    44b8:	4a06      	ldr	r2, [pc, #24]	; (44d4 <system_gclk_gen_enable+0x38>)
    44ba:	025b      	lsls	r3, r3, #9
    44bc:	6851      	ldr	r1, [r2, #4]
    44be:	430b      	orrs	r3, r1
    44c0:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    44c2:	4b05      	ldr	r3, [pc, #20]	; (44d8 <system_gclk_gen_enable+0x3c>)
    44c4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    44c6:	bd70      	pop	{r4, r5, r6, pc}
    44c8:	000043cd 	.word	0x000043cd
    44cc:	00003f5d 	.word	0x00003f5d
    44d0:	40000c04 	.word	0x40000c04
    44d4:	40000c00 	.word	0x40000c00
    44d8:	00003f91 	.word	0x00003f91

000044dc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    44dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    44de:	0007      	movs	r7, r0
	while (system_gclk_is_syncing()) {
    44e0:	4e18      	ldr	r6, [pc, #96]	; (4544 <system_gclk_gen_get_hz+0x68>)
    44e2:	47b0      	blx	r6
    44e4:	2800      	cmp	r0, #0
    44e6:	d1fb      	bne.n	44e0 <system_gclk_gen_get_hz+0x4>
	cpu_irq_enter_critical();
    44e8:	4b17      	ldr	r3, [pc, #92]	; (4548 <system_gclk_gen_get_hz+0x6c>)
    44ea:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    44ec:	4b17      	ldr	r3, [pc, #92]	; (454c <system_gclk_gen_get_hz+0x70>)
    44ee:	701f      	strb	r7, [r3, #0]
    44f0:	9301      	str	r3, [sp, #4]
	while (system_gclk_is_syncing()) {
    44f2:	47b0      	blx	r6
    44f4:	2800      	cmp	r0, #0
    44f6:	d1fc      	bne.n	44f2 <system_gclk_gen_get_hz+0x16>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    44f8:	4d15      	ldr	r5, [pc, #84]	; (4550 <system_gclk_gen_get_hz+0x74>)
	uint32_t gen_input_hz = system_clock_source_get_hz(
    44fa:	4b16      	ldr	r3, [pc, #88]	; (4554 <system_gclk_gen_get_hz+0x78>)
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    44fc:	6868      	ldr	r0, [r5, #4]
    44fe:	04c0      	lsls	r0, r0, #19
    4500:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    4502:	4798      	blx	r3
    4504:	0004      	movs	r4, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    4506:	9b01      	ldr	r3, [sp, #4]
    4508:	701f      	strb	r7, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    450a:	686b      	ldr	r3, [r5, #4]
    450c:	02db      	lsls	r3, r3, #11
    450e:	0fdb      	lsrs	r3, r3, #31
    4510:	9301      	str	r3, [sp, #4]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    4512:	4b11      	ldr	r3, [pc, #68]	; (4558 <system_gclk_gen_get_hz+0x7c>)
    4514:	701f      	strb	r7, [r3, #0]
	while (system_gclk_is_syncing()) {
    4516:	47b0      	blx	r6
    4518:	2800      	cmp	r0, #0
    451a:	d1fc      	bne.n	4516 <system_gclk_gen_get_hz+0x3a>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    451c:	68ad      	ldr	r5, [r5, #8]
	cpu_irq_leave_critical();
    451e:	4b0f      	ldr	r3, [pc, #60]	; (455c <system_gclk_gen_get_hz+0x80>)
    4520:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    4522:	9b01      	ldr	r3, [sp, #4]
	uint32_t divider = GCLK->GENDIV.bit.DIV;
    4524:	022d      	lsls	r5, r5, #8
    4526:	0c2d      	lsrs	r5, r5, #16
	if (!divsel && divider > 1) {
    4528:	2b00      	cmp	r3, #0
    452a:	d108      	bne.n	453e <system_gclk_gen_get_hz+0x62>
    452c:	2d01      	cmp	r5, #1
    452e:	d904      	bls.n	453a <system_gclk_gen_get_hz+0x5e>
		gen_input_hz /= divider;
    4530:	0020      	movs	r0, r4
    4532:	0029      	movs	r1, r5
    4534:	4b0a      	ldr	r3, [pc, #40]	; (4560 <system_gclk_gen_get_hz+0x84>)
    4536:	4798      	blx	r3
    4538:	0004      	movs	r4, r0
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
	}

	return gen_input_hz;
}
    453a:	0020      	movs	r0, r4
    453c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		gen_input_hz >>= (divider+1);
    453e:	3501      	adds	r5, #1
    4540:	40ec      	lsrs	r4, r5
	return gen_input_hz;
    4542:	e7fa      	b.n	453a <system_gclk_gen_get_hz+0x5e>
    4544:	000043cd 	.word	0x000043cd
    4548:	00003f5d 	.word	0x00003f5d
    454c:	40000c04 	.word	0x40000c04
    4550:	40000c00 	.word	0x40000c00
    4554:	00004009 	.word	0x00004009
    4558:	40000c08 	.word	0x40000c08
    455c:	00003f91 	.word	0x00003f91
    4560:	000047f1 	.word	0x000047f1

00004564 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    4564:	b510      	push	{r4, lr}
    4566:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4568:	4b06      	ldr	r3, [pc, #24]	; (4584 <system_gclk_chan_enable+0x20>)
    456a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    456c:	4b06      	ldr	r3, [pc, #24]	; (4588 <system_gclk_chan_enable+0x24>)

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    456e:	4a07      	ldr	r2, [pc, #28]	; (458c <system_gclk_chan_enable+0x28>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4570:	701c      	strb	r4, [r3, #0]
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    4572:	2380      	movs	r3, #128	; 0x80
    4574:	8851      	ldrh	r1, [r2, #2]
    4576:	01db      	lsls	r3, r3, #7
    4578:	430b      	orrs	r3, r1
    457a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    457c:	4b04      	ldr	r3, [pc, #16]	; (4590 <system_gclk_chan_enable+0x2c>)
    457e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    4580:	bd10      	pop	{r4, pc}
    4582:	46c0      	nop			; (mov r8, r8)
    4584:	00003f5d 	.word	0x00003f5d
    4588:	40000c02 	.word	0x40000c02
    458c:	40000c00 	.word	0x40000c00
    4590:	00003f91 	.word	0x00003f91

00004594 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    4594:	b510      	push	{r4, lr}
    4596:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    4598:	4b0e      	ldr	r3, [pc, #56]	; (45d4 <system_gclk_chan_disable+0x40>)
    459a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    459c:	4b0e      	ldr	r3, [pc, #56]	; (45d8 <system_gclk_chan_disable+0x44>)
	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
	GCLK->CLKCTRL.bit.GEN = 0;
    459e:	4a0f      	ldr	r2, [pc, #60]	; (45dc <system_gclk_chan_disable+0x48>)
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    45a0:	701c      	strb	r4, [r3, #0]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    45a2:	4b0f      	ldr	r3, [pc, #60]	; (45e0 <system_gclk_chan_disable+0x4c>)

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    45a4:	4c0f      	ldr	r4, [pc, #60]	; (45e4 <system_gclk_chan_disable+0x50>)
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    45a6:	8858      	ldrh	r0, [r3, #2]
	GCLK->CLKCTRL.bit.GEN = 0;
    45a8:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    45aa:	0500      	lsls	r0, r0, #20
	GCLK->CLKCTRL.bit.GEN = 0;
    45ac:	4011      	ands	r1, r2
    45ae:	8059      	strh	r1, [r3, #2]
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    45b0:	8859      	ldrh	r1, [r3, #2]
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    45b2:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    45b4:	4021      	ands	r1, r4
    45b6:	8059      	strh	r1, [r3, #2]
    45b8:	0011      	movs	r1, r2
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    45ba:	2280      	movs	r2, #128	; 0x80
    45bc:	01d2      	lsls	r2, r2, #7
    45be:	885c      	ldrh	r4, [r3, #2]
    45c0:	4214      	tst	r4, r2
    45c2:	d1fc      	bne.n	45be <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    45c4:	885a      	ldrh	r2, [r3, #2]
    45c6:	0200      	lsls	r0, r0, #8
    45c8:	400a      	ands	r2, r1
    45ca:	4302      	orrs	r2, r0
    45cc:	805a      	strh	r2, [r3, #2]
	cpu_irq_leave_critical();
    45ce:	4b06      	ldr	r3, [pc, #24]	; (45e8 <system_gclk_chan_disable+0x54>)
    45d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    45d2:	bd10      	pop	{r4, pc}
    45d4:	00003f5d 	.word	0x00003f5d
    45d8:	40000c02 	.word	0x40000c02
    45dc:	fffff0ff 	.word	0xfffff0ff
    45e0:	40000c00 	.word	0x40000c00
    45e4:	ffffbfff 	.word	0xffffbfff
    45e8:	00003f91 	.word	0x00003f91

000045ec <system_gclk_chan_set_config>:
{
    45ec:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    45ee:	780c      	ldrb	r4, [r1, #0]
	system_gclk_chan_disable(channel);
    45f0:	4b03      	ldr	r3, [pc, #12]	; (4600 <system_gclk_chan_set_config+0x14>)
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    45f2:	0224      	lsls	r4, r4, #8
    45f4:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    45f6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    45f8:	4b02      	ldr	r3, [pc, #8]	; (4604 <system_gclk_chan_set_config+0x18>)
    45fa:	b2a4      	uxth	r4, r4
    45fc:	805c      	strh	r4, [r3, #2]
}
    45fe:	bd10      	pop	{r4, pc}
    4600:	00004595 	.word	0x00004595
    4604:	40000c00 	.word	0x40000c00

00004608 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    4608:	b510      	push	{r4, lr}
    460a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    460c:	4b06      	ldr	r3, [pc, #24]	; (4628 <system_gclk_chan_get_hz+0x20>)
    460e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    4610:	4b06      	ldr	r3, [pc, #24]	; (462c <system_gclk_chan_get_hz+0x24>)
    4612:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    4614:	4b06      	ldr	r3, [pc, #24]	; (4630 <system_gclk_chan_get_hz+0x28>)
    4616:	885c      	ldrh	r4, [r3, #2]
	cpu_irq_leave_critical();
    4618:	4b06      	ldr	r3, [pc, #24]	; (4634 <system_gclk_chan_get_hz+0x2c>)
    461a:	0524      	lsls	r4, r4, #20
    461c:	0f24      	lsrs	r4, r4, #28
    461e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    4620:	0020      	movs	r0, r4
    4622:	4b05      	ldr	r3, [pc, #20]	; (4638 <system_gclk_chan_get_hz+0x30>)
    4624:	4798      	blx	r3
}
    4626:	bd10      	pop	{r4, pc}
    4628:	00003f5d 	.word	0x00003f5d
    462c:	40000c02 	.word	0x40000c02
    4630:	40000c00 	.word	0x40000c00
    4634:	00003f91 	.word	0x00003f91
    4638:	000044dd 	.word	0x000044dd

0000463c <_system_pinmux_config>:

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    463c:	78d3      	ldrb	r3, [r2, #3]
{
    463e:	b530      	push	{r4, r5, lr}
	if (!config->powersave) {
    4640:	2b00      	cmp	r3, #0
    4642:	d135      	bne.n	46b0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    4644:	7814      	ldrb	r4, [r2, #0]
    4646:	2c80      	cmp	r4, #128	; 0x80
    4648:	d003      	beq.n	4652 <_system_pinmux_config+0x16>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    464a:	2380      	movs	r3, #128	; 0x80
    464c:	0624      	lsls	r4, r4, #24
    464e:	025b      	lsls	r3, r3, #9
    4650:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    4652:	2502      	movs	r5, #2
    4654:	7854      	ldrb	r4, [r2, #1]
    4656:	43ac      	bics	r4, r5
    4658:	d106      	bne.n	4668 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    465a:	7894      	ldrb	r4, [r2, #2]
    465c:	2c00      	cmp	r4, #0
    465e:	d124      	bne.n	46aa <_system_pinmux_config+0x6e>
			pin_cfg |= PORT_WRCONFIG_INEN;
    4660:	2480      	movs	r4, #128	; 0x80
    4662:	02a4      	lsls	r4, r4, #10
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    4664:	4323      	orrs	r3, r4
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    4666:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    4668:	7854      	ldrb	r4, [r2, #1]
    466a:	3c01      	subs	r4, #1
    466c:	2c01      	cmp	r4, #1
    466e:	d801      	bhi.n	4674 <_system_pinmux_config+0x38>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    4670:	4c12      	ldr	r4, [pc, #72]	; (46bc <_system_pinmux_config+0x80>)
    4672:	4023      	ands	r3, r4

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4674:	24a0      	movs	r4, #160	; 0xa0
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    4676:	b28d      	uxth	r5, r1
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    4678:	05e4      	lsls	r4, r4, #23
    467a:	432c      	orrs	r4, r5
    467c:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    467e:	6284      	str	r4, [r0, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4680:	24d0      	movs	r4, #208	; 0xd0
	uint32_t upper_pin_mask = (pin_mask >> 16);
    4682:	0c0d      	lsrs	r5, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    4684:	0624      	lsls	r4, r4, #24
    4686:	432c      	orrs	r4, r5
    4688:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    468a:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    468c:	78d4      	ldrb	r4, [r2, #3]
    468e:	2c00      	cmp	r4, #0
    4690:	d10a      	bne.n	46a8 <_system_pinmux_config+0x6c>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    4692:	035b      	lsls	r3, r3, #13
    4694:	d503      	bpl.n	469e <_system_pinmux_config+0x62>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    4696:	7893      	ldrb	r3, [r2, #2]
    4698:	2b01      	cmp	r3, #1
    469a:	d10c      	bne.n	46b6 <_system_pinmux_config+0x7a>
				port->OUTSET.reg = pin_mask;
    469c:	6181      	str	r1, [r0, #24]
				port->OUTCLR.reg = pin_mask;
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    469e:	7853      	ldrb	r3, [r2, #1]
    46a0:	3b01      	subs	r3, #1
    46a2:	2b01      	cmp	r3, #1
    46a4:	d800      	bhi.n	46a8 <_system_pinmux_config+0x6c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    46a6:	6081      	str	r1, [r0, #8]
		}
	}
}
    46a8:	bd30      	pop	{r4, r5, pc}
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    46aa:	24c0      	movs	r4, #192	; 0xc0
    46ac:	02e4      	lsls	r4, r4, #11
    46ae:	e7d9      	b.n	4664 <_system_pinmux_config+0x28>
		port->DIRCLR.reg = pin_mask;
    46b0:	6041      	str	r1, [r0, #4]
	uint32_t pin_cfg = 0;
    46b2:	2300      	movs	r3, #0
    46b4:	e7de      	b.n	4674 <_system_pinmux_config+0x38>
				port->OUTCLR.reg = pin_mask;
    46b6:	6141      	str	r1, [r0, #20]
    46b8:	e7f1      	b.n	469e <_system_pinmux_config+0x62>
    46ba:	46c0      	nop			; (mov r8, r8)
    46bc:	fffbffff 	.word	0xfffbffff

000046c0 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    46c0:	b510      	push	{r4, lr}
    46c2:	0003      	movs	r3, r0
    46c4:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);
    46c6:	0944      	lsrs	r4, r0, #5
	if (port_index < PORT_INST_NUM) {
    46c8:	09c1      	lsrs	r1, r0, #7
		return NULL;
    46ca:	2000      	movs	r0, #0
	if (port_index < PORT_INST_NUM) {
    46cc:	4281      	cmp	r1, r0
    46ce:	d102      	bne.n	46d6 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    46d0:	4904      	ldr	r1, [pc, #16]	; (46e4 <system_pinmux_pin_set_config+0x24>)
    46d2:	01e0      	lsls	r0, r4, #7
    46d4:	1840      	adds	r0, r0, r1
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    46d6:	211f      	movs	r1, #31
    46d8:	400b      	ands	r3, r1
    46da:	391e      	subs	r1, #30
    46dc:	4099      	lsls	r1, r3

	_system_pinmux_config(port, pin_mask, config);
    46de:	4b02      	ldr	r3, [pc, #8]	; (46e8 <system_pinmux_pin_set_config+0x28>)
    46e0:	4798      	blx	r3
}
    46e2:	bd10      	pop	{r4, pc}
    46e4:	41004400 	.word	0x41004400
    46e8:	0000463d 	.word	0x0000463d

000046ec <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    46ec:	4770      	bx	lr
	...

000046f0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    46f0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    46f2:	4b05      	ldr	r3, [pc, #20]	; (4708 <system_init+0x18>)
    46f4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    46f6:	4b05      	ldr	r3, [pc, #20]	; (470c <system_init+0x1c>)
    46f8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    46fa:	4b05      	ldr	r3, [pc, #20]	; (4710 <system_init+0x20>)
    46fc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    46fe:	4b05      	ldr	r3, [pc, #20]	; (4714 <system_init+0x24>)
    4700:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    4702:	4b05      	ldr	r3, [pc, #20]	; (4718 <system_init+0x28>)
    4704:	4798      	blx	r3
}
    4706:	bd10      	pop	{r4, pc}
    4708:	00004251 	.word	0x00004251
    470c:	00003e1d 	.word	0x00003e1d
    4710:	000046ed 	.word	0x000046ed
    4714:	000024b5 	.word	0x000024b5
    4718:	000046ed 	.word	0x000046ed

0000471c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    471c:	e7fe      	b.n	471c <Dummy_Handler>
	...

00004720 <Reset_Handler>:
        if (pSrc != pDest) {
    4720:	4821      	ldr	r0, [pc, #132]	; (47a8 <Reset_Handler+0x88>)
    4722:	4922      	ldr	r1, [pc, #136]	; (47ac <Reset_Handler+0x8c>)
{
    4724:	b570      	push	{r4, r5, r6, lr}
        if (pSrc != pDest) {
    4726:	4288      	cmp	r0, r1
    4728:	d004      	beq.n	4734 <Reset_Handler+0x14>
    472a:	2300      	movs	r3, #0
                for (; pDest < &_erelocate;) {
    472c:	4c20      	ldr	r4, [pc, #128]	; (47b0 <Reset_Handler+0x90>)
    472e:	18ca      	adds	r2, r1, r3
    4730:	42a2      	cmp	r2, r4
    4732:	d332      	bcc.n	479a <Reset_Handler+0x7a>
                *pDest++ = 0;
    4734:	2100      	movs	r1, #0
    4736:	4b1f      	ldr	r3, [pc, #124]	; (47b4 <Reset_Handler+0x94>)
        for (pDest = &_szero; pDest < &_ezero;) {
    4738:	4a1f      	ldr	r2, [pc, #124]	; (47b8 <Reset_Handler+0x98>)
    473a:	4293      	cmp	r3, r2
    473c:	d331      	bcc.n	47a2 <Reset_Handler+0x82>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    473e:	21ff      	movs	r1, #255	; 0xff
    4740:	4b1e      	ldr	r3, [pc, #120]	; (47bc <Reset_Handler+0x9c>)
    4742:	4a1f      	ldr	r2, [pc, #124]	; (47c0 <Reset_Handler+0xa0>)
    4744:	438b      	bics	r3, r1
    4746:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4748:	2202      	movs	r2, #2
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    474a:	250c      	movs	r5, #12
    474c:	2408      	movs	r4, #8
        DMAC->QOSCTRL.bit.DQOS = 2;
    474e:	2630      	movs	r6, #48	; 0x30
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4750:	4b1c      	ldr	r3, [pc, #112]	; (47c4 <Reset_Handler+0xa4>)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4752:	481d      	ldr	r0, [pc, #116]	; (47c8 <Reset_Handler+0xa8>)
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    4754:	625a      	str	r2, [r3, #36]	; 0x24
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    4756:	78c3      	ldrb	r3, [r0, #3]
    4758:	39fc      	subs	r1, #252	; 0xfc
    475a:	438b      	bics	r3, r1
    475c:	4313      	orrs	r3, r2
    475e:	70c3      	strb	r3, [r0, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    4760:	78c3      	ldrb	r3, [r0, #3]
    4762:	43ab      	bics	r3, r5
    4764:	4323      	orrs	r3, r4
    4766:	70c3      	strb	r3, [r0, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    4768:	4b18      	ldr	r3, [pc, #96]	; (47cc <Reset_Handler+0xac>)
    476a:	7b98      	ldrb	r0, [r3, #14]
    476c:	43b0      	bics	r0, r6
    476e:	0006      	movs	r6, r0
    4770:	2020      	movs	r0, #32
    4772:	4330      	orrs	r0, r6
    4774:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    4776:	7b98      	ldrb	r0, [r3, #14]
    4778:	43a8      	bics	r0, r5
    477a:	4304      	orrs	r4, r0
    477c:	739c      	strb	r4, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    477e:	7b98      	ldrb	r0, [r3, #14]
    4780:	4388      	bics	r0, r1
    4782:	4302      	orrs	r2, r0
    4784:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    4786:	2380      	movs	r3, #128	; 0x80
    4788:	4a11      	ldr	r2, [pc, #68]	; (47d0 <Reset_Handler+0xb0>)
    478a:	6851      	ldr	r1, [r2, #4]
    478c:	430b      	orrs	r3, r1
    478e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    4790:	4b10      	ldr	r3, [pc, #64]	; (47d4 <Reset_Handler+0xb4>)
    4792:	4798      	blx	r3
        main();
    4794:	4b10      	ldr	r3, [pc, #64]	; (47d8 <Reset_Handler+0xb8>)
    4796:	4798      	blx	r3
    4798:	e7fe      	b.n	4798 <Reset_Handler+0x78>
                        *pDest++ = *pSrc++;
    479a:	58c5      	ldr	r5, [r0, r3]
    479c:	3304      	adds	r3, #4
    479e:	6015      	str	r5, [r2, #0]
    47a0:	e7c5      	b.n	472e <Reset_Handler+0xe>
                *pDest++ = 0;
    47a2:	c302      	stmia	r3!, {r1}
    47a4:	e7c9      	b.n	473a <Reset_Handler+0x1a>
    47a6:	46c0      	nop			; (mov r8, r8)
    47a8:	00004bac 	.word	0x00004bac
    47ac:	20000000 	.word	0x20000000
    47b0:	2000000c 	.word	0x2000000c
    47b4:	2000000c 	.word	0x2000000c
    47b8:	20000484 	.word	0x20000484
    47bc:	00000000 	.word	0x00000000
    47c0:	e000ed00 	.word	0xe000ed00
    47c4:	410070fc 	.word	0x410070fc
    47c8:	41005000 	.word	0x41005000
    47cc:	41004800 	.word	0x41004800
    47d0:	41004000 	.word	0x41004000
    47d4:	00004949 	.word	0x00004949
    47d8:	00001fd1 	.word	0x00001fd1

000047dc <__gnu_thumb1_case_uqi>:
    47dc:	b402      	push	{r1}
    47de:	4671      	mov	r1, lr
    47e0:	0849      	lsrs	r1, r1, #1
    47e2:	0049      	lsls	r1, r1, #1
    47e4:	5c09      	ldrb	r1, [r1, r0]
    47e6:	0049      	lsls	r1, r1, #1
    47e8:	448e      	add	lr, r1
    47ea:	bc02      	pop	{r1}
    47ec:	4770      	bx	lr
    47ee:	46c0      	nop			; (mov r8, r8)

000047f0 <__udivsi3>:
    47f0:	2200      	movs	r2, #0
    47f2:	0843      	lsrs	r3, r0, #1
    47f4:	428b      	cmp	r3, r1
    47f6:	d374      	bcc.n	48e2 <__udivsi3+0xf2>
    47f8:	0903      	lsrs	r3, r0, #4
    47fa:	428b      	cmp	r3, r1
    47fc:	d35f      	bcc.n	48be <__udivsi3+0xce>
    47fe:	0a03      	lsrs	r3, r0, #8
    4800:	428b      	cmp	r3, r1
    4802:	d344      	bcc.n	488e <__udivsi3+0x9e>
    4804:	0b03      	lsrs	r3, r0, #12
    4806:	428b      	cmp	r3, r1
    4808:	d328      	bcc.n	485c <__udivsi3+0x6c>
    480a:	0c03      	lsrs	r3, r0, #16
    480c:	428b      	cmp	r3, r1
    480e:	d30d      	bcc.n	482c <__udivsi3+0x3c>
    4810:	22ff      	movs	r2, #255	; 0xff
    4812:	0209      	lsls	r1, r1, #8
    4814:	ba12      	rev	r2, r2
    4816:	0c03      	lsrs	r3, r0, #16
    4818:	428b      	cmp	r3, r1
    481a:	d302      	bcc.n	4822 <__udivsi3+0x32>
    481c:	1212      	asrs	r2, r2, #8
    481e:	0209      	lsls	r1, r1, #8
    4820:	d065      	beq.n	48ee <__udivsi3+0xfe>
    4822:	0b03      	lsrs	r3, r0, #12
    4824:	428b      	cmp	r3, r1
    4826:	d319      	bcc.n	485c <__udivsi3+0x6c>
    4828:	e000      	b.n	482c <__udivsi3+0x3c>
    482a:	0a09      	lsrs	r1, r1, #8
    482c:	0bc3      	lsrs	r3, r0, #15
    482e:	428b      	cmp	r3, r1
    4830:	d301      	bcc.n	4836 <__udivsi3+0x46>
    4832:	03cb      	lsls	r3, r1, #15
    4834:	1ac0      	subs	r0, r0, r3
    4836:	4152      	adcs	r2, r2
    4838:	0b83      	lsrs	r3, r0, #14
    483a:	428b      	cmp	r3, r1
    483c:	d301      	bcc.n	4842 <__udivsi3+0x52>
    483e:	038b      	lsls	r3, r1, #14
    4840:	1ac0      	subs	r0, r0, r3
    4842:	4152      	adcs	r2, r2
    4844:	0b43      	lsrs	r3, r0, #13
    4846:	428b      	cmp	r3, r1
    4848:	d301      	bcc.n	484e <__udivsi3+0x5e>
    484a:	034b      	lsls	r3, r1, #13
    484c:	1ac0      	subs	r0, r0, r3
    484e:	4152      	adcs	r2, r2
    4850:	0b03      	lsrs	r3, r0, #12
    4852:	428b      	cmp	r3, r1
    4854:	d301      	bcc.n	485a <__udivsi3+0x6a>
    4856:	030b      	lsls	r3, r1, #12
    4858:	1ac0      	subs	r0, r0, r3
    485a:	4152      	adcs	r2, r2
    485c:	0ac3      	lsrs	r3, r0, #11
    485e:	428b      	cmp	r3, r1
    4860:	d301      	bcc.n	4866 <__udivsi3+0x76>
    4862:	02cb      	lsls	r3, r1, #11
    4864:	1ac0      	subs	r0, r0, r3
    4866:	4152      	adcs	r2, r2
    4868:	0a83      	lsrs	r3, r0, #10
    486a:	428b      	cmp	r3, r1
    486c:	d301      	bcc.n	4872 <__udivsi3+0x82>
    486e:	028b      	lsls	r3, r1, #10
    4870:	1ac0      	subs	r0, r0, r3
    4872:	4152      	adcs	r2, r2
    4874:	0a43      	lsrs	r3, r0, #9
    4876:	428b      	cmp	r3, r1
    4878:	d301      	bcc.n	487e <__udivsi3+0x8e>
    487a:	024b      	lsls	r3, r1, #9
    487c:	1ac0      	subs	r0, r0, r3
    487e:	4152      	adcs	r2, r2
    4880:	0a03      	lsrs	r3, r0, #8
    4882:	428b      	cmp	r3, r1
    4884:	d301      	bcc.n	488a <__udivsi3+0x9a>
    4886:	020b      	lsls	r3, r1, #8
    4888:	1ac0      	subs	r0, r0, r3
    488a:	4152      	adcs	r2, r2
    488c:	d2cd      	bcs.n	482a <__udivsi3+0x3a>
    488e:	09c3      	lsrs	r3, r0, #7
    4890:	428b      	cmp	r3, r1
    4892:	d301      	bcc.n	4898 <__udivsi3+0xa8>
    4894:	01cb      	lsls	r3, r1, #7
    4896:	1ac0      	subs	r0, r0, r3
    4898:	4152      	adcs	r2, r2
    489a:	0983      	lsrs	r3, r0, #6
    489c:	428b      	cmp	r3, r1
    489e:	d301      	bcc.n	48a4 <__udivsi3+0xb4>
    48a0:	018b      	lsls	r3, r1, #6
    48a2:	1ac0      	subs	r0, r0, r3
    48a4:	4152      	adcs	r2, r2
    48a6:	0943      	lsrs	r3, r0, #5
    48a8:	428b      	cmp	r3, r1
    48aa:	d301      	bcc.n	48b0 <__udivsi3+0xc0>
    48ac:	014b      	lsls	r3, r1, #5
    48ae:	1ac0      	subs	r0, r0, r3
    48b0:	4152      	adcs	r2, r2
    48b2:	0903      	lsrs	r3, r0, #4
    48b4:	428b      	cmp	r3, r1
    48b6:	d301      	bcc.n	48bc <__udivsi3+0xcc>
    48b8:	010b      	lsls	r3, r1, #4
    48ba:	1ac0      	subs	r0, r0, r3
    48bc:	4152      	adcs	r2, r2
    48be:	08c3      	lsrs	r3, r0, #3
    48c0:	428b      	cmp	r3, r1
    48c2:	d301      	bcc.n	48c8 <__udivsi3+0xd8>
    48c4:	00cb      	lsls	r3, r1, #3
    48c6:	1ac0      	subs	r0, r0, r3
    48c8:	4152      	adcs	r2, r2
    48ca:	0883      	lsrs	r3, r0, #2
    48cc:	428b      	cmp	r3, r1
    48ce:	d301      	bcc.n	48d4 <__udivsi3+0xe4>
    48d0:	008b      	lsls	r3, r1, #2
    48d2:	1ac0      	subs	r0, r0, r3
    48d4:	4152      	adcs	r2, r2
    48d6:	0843      	lsrs	r3, r0, #1
    48d8:	428b      	cmp	r3, r1
    48da:	d301      	bcc.n	48e0 <__udivsi3+0xf0>
    48dc:	004b      	lsls	r3, r1, #1
    48de:	1ac0      	subs	r0, r0, r3
    48e0:	4152      	adcs	r2, r2
    48e2:	1a41      	subs	r1, r0, r1
    48e4:	d200      	bcs.n	48e8 <__udivsi3+0xf8>
    48e6:	4601      	mov	r1, r0
    48e8:	4152      	adcs	r2, r2
    48ea:	4610      	mov	r0, r2
    48ec:	4770      	bx	lr
    48ee:	e7ff      	b.n	48f0 <__udivsi3+0x100>
    48f0:	b501      	push	{r0, lr}
    48f2:	2000      	movs	r0, #0
    48f4:	f000 f806 	bl	4904 <__aeabi_idiv0>
    48f8:	bd02      	pop	{r1, pc}
    48fa:	46c0      	nop			; (mov r8, r8)

000048fc <__aeabi_uidivmod>:
    48fc:	2900      	cmp	r1, #0
    48fe:	d0f7      	beq.n	48f0 <__udivsi3+0x100>
    4900:	e776      	b.n	47f0 <__udivsi3>
    4902:	4770      	bx	lr

00004904 <__aeabi_idiv0>:
    4904:	4770      	bx	lr
    4906:	46c0      	nop			; (mov r8, r8)

00004908 <__ctzsi2>:
    4908:	4241      	negs	r1, r0
    490a:	4008      	ands	r0, r1
    490c:	211c      	movs	r1, #28
    490e:	2301      	movs	r3, #1
    4910:	041b      	lsls	r3, r3, #16
    4912:	4298      	cmp	r0, r3
    4914:	d301      	bcc.n	491a <__ctzsi2+0x12>
    4916:	0c00      	lsrs	r0, r0, #16
    4918:	3910      	subs	r1, #16
    491a:	0a1b      	lsrs	r3, r3, #8
    491c:	4298      	cmp	r0, r3
    491e:	d301      	bcc.n	4924 <__ctzsi2+0x1c>
    4920:	0a00      	lsrs	r0, r0, #8
    4922:	3908      	subs	r1, #8
    4924:	091b      	lsrs	r3, r3, #4
    4926:	4298      	cmp	r0, r3
    4928:	d301      	bcc.n	492e <__ctzsi2+0x26>
    492a:	0900      	lsrs	r0, r0, #4
    492c:	3904      	subs	r1, #4
    492e:	a202      	add	r2, pc, #8	; (adr r2, 4938 <__ctzsi2+0x30>)
    4930:	5c10      	ldrb	r0, [r2, r0]
    4932:	1a40      	subs	r0, r0, r1
    4934:	4770      	bx	lr
    4936:	46c0      	nop			; (mov r8, r8)
    4938:	1d1d1c1b 	.word	0x1d1d1c1b
    493c:	1e1e1e1e 	.word	0x1e1e1e1e
    4940:	1f1f1f1f 	.word	0x1f1f1f1f
    4944:	1f1f1f1f 	.word	0x1f1f1f1f

00004948 <__libc_init_array>:
    4948:	b570      	push	{r4, r5, r6, lr}
    494a:	2600      	movs	r6, #0
    494c:	4d0c      	ldr	r5, [pc, #48]	; (4980 <__libc_init_array+0x38>)
    494e:	4c0d      	ldr	r4, [pc, #52]	; (4984 <__libc_init_array+0x3c>)
    4950:	1b64      	subs	r4, r4, r5
    4952:	10a4      	asrs	r4, r4, #2
    4954:	42a6      	cmp	r6, r4
    4956:	d109      	bne.n	496c <__libc_init_array+0x24>
    4958:	2600      	movs	r6, #0
    495a:	f000 f917 	bl	4b8c <_init>
    495e:	4d0a      	ldr	r5, [pc, #40]	; (4988 <__libc_init_array+0x40>)
    4960:	4c0a      	ldr	r4, [pc, #40]	; (498c <__libc_init_array+0x44>)
    4962:	1b64      	subs	r4, r4, r5
    4964:	10a4      	asrs	r4, r4, #2
    4966:	42a6      	cmp	r6, r4
    4968:	d105      	bne.n	4976 <__libc_init_array+0x2e>
    496a:	bd70      	pop	{r4, r5, r6, pc}
    496c:	00b3      	lsls	r3, r6, #2
    496e:	58eb      	ldr	r3, [r5, r3]
    4970:	4798      	blx	r3
    4972:	3601      	adds	r6, #1
    4974:	e7ee      	b.n	4954 <__libc_init_array+0xc>
    4976:	00b3      	lsls	r3, r6, #2
    4978:	58eb      	ldr	r3, [r5, r3]
    497a:	4798      	blx	r3
    497c:	3601      	adds	r6, #1
    497e:	e7f2      	b.n	4966 <__libc_init_array+0x1e>
    4980:	00004b98 	.word	0x00004b98
    4984:	00004b98 	.word	0x00004b98
    4988:	00004b98 	.word	0x00004b98
    498c:	00004b9c 	.word	0x00004b9c

00004990 <memset>:
    4990:	0003      	movs	r3, r0
    4992:	1882      	adds	r2, r0, r2
    4994:	4293      	cmp	r3, r2
    4996:	d100      	bne.n	499a <memset+0xa>
    4998:	4770      	bx	lr
    499a:	7019      	strb	r1, [r3, #0]
    499c:	3301      	adds	r3, #1
    499e:	e7f9      	b.n	4994 <memset+0x4>

000049a0 <mmc_trans_multipliers>:
    49a0:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    49b0:	000f 0000 0014 0000 001a 0000 001e 0000     ................
    49c0:	0023 0000 0028 0000 002d 0000 0034 0000     #...(...-...4...
    49d0:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...

000049e0 <sd_mmc_trans_units>:
    49e0:	000a 0000 0064 0000 03e8 0000 2710 0000     ....d........'..
	...

000049fc <sd_trans_multipliers>:
    49fc:	0000 0000 000a 0000 000c 0000 000d 0000     ................
    4a0c:	000f 0000 0014 0000 0019 0000 001e 0000     ................
    4a1c:	0023 0000 0028 0000 002d 0000 0032 0000     #...(...-...2...
    4a2c:	0037 0000 003c 0000 0046 0000 0050 0000     7...<...F...P...
    4a3c:	2a22 2c2b 3b3a 3d3c 3f3e 5d5b 7f7c 5300     "*+,:;<=>?[]|..S
    4a4c:	5f44 4d49 4741 2e45 4942 004e 422e 4341     D_IMAGE.BIN..BAC
    4a5c:	554b 5f50 4d49 4741 2e45 4942 004e 564e     KUP_IMAGE.BIN.NV
    4a6c:	204d 6f6d 7564 656c 6920 696e 2074 6166     M module init fa
    4a7c:	6c69 6465 0a2e 4600 6c69 2065 706f 6e65     iled...File open
    4a8c:	6620 6961 656c 2e64 000a 6946 656c 6520      failed...File e
    4a9c:	6378 6565 7364 6d20 7861 7320 7a69 2065     xceeds max size 
    4aac:	666f 2520 2064 7962 6574 2e73 000a 6946     of %d bytes...Fi
    4abc:	656c 7220 6165 2064 7265 6f72 2072 6661     le read error af
    4acc:	6574 2072 6425 6220 7479 7365 000a 564e     ter %d bytes..NV
    4adc:	204d 7265 7361 2065 6f72 2077 7265 6f72     M erase row erro
    4aec:	0a72 4e00 4d56 7720 6972 6574 6220 6675     r..NVM write buf
    4afc:	6566 2072 7265 6f72 0a72 5400 6f6f 6d20     fer error..Too m
    4b0c:	6e61 2079 7962 6574 0a73 5500 616e 6c62     any bytes..Unabl
    4b1c:	2065 6f74 6420 6c65 7465 2065 6966 656c     e to delete file
    4b2c:	0a2e 4200 444f 6d20 646f 6c75 2065 6e69     ...BOD module in
    4b3c:	7469 6620 6961 656c 2e64 000a 5845 4954     it failed...EXTI
    4b4c:	544e 6d20 646f 6c75 2065 6e69 7469 6620     NT module init f
    4b5c:	6961 656c 2e64 000a 0800 4200 0c00 4200     ailed......B...B
    4b6c:	1000 4200 1400 4200 1800 4200 1c00 4200     ...B...B...B...B

00004b7c <_usb_device_irq_bits>:
    4b7c:	0004 0008 0070 0080 0001 0100 0200 0000     ....p...........

00004b8c <_init>:
    4b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b8e:	46c0      	nop			; (mov r8, r8)
    4b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4b92:	bc08      	pop	{r3}
    4b94:	469e      	mov	lr, r3
    4b96:	4770      	bx	lr

00004b98 <__init_array_start>:
    4b98:	000000dd 	.word	0x000000dd

00004b9c <_fini>:
    4b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b9e:	46c0      	nop			; (mov r8, r8)
    4ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4ba2:	bc08      	pop	{r3}
    4ba4:	469e      	mov	lr, r3
    4ba6:	4770      	bx	lr

00004ba8 <__fini_array_start>:
    4ba8:	000000b5 	.word	0x000000b5
