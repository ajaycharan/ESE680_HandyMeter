
Application_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f434  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          00000328  0000f434  0000f434  0001f434  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  0000f75c  0000f75c  0001f75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000184  20000000  0000f768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          000029e4  20000190  0000f900  00020190  2**4
                  ALLOC
  5 .stack        00002004  20002b74  000122e4  00020190  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000201ae  2**0
                  CONTENTS, READONLY
  8 .debug_info   0006251d  00000000  00000000  00020207  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000071ae  00000000  00000000  00082724  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00007a40  00000000  00000000  000898d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000015a0  00000000  00000000  00091312  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001348  00000000  00000000  000928b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022ec7  00000000  00000000  00093bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001d6a6  00000000  00000000  000b6ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009910a  00000000  00000000  000d4167  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00005228  00000000  00000000  0016d274  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	78 4b 00 20 55 d6 00 00 65 d7 00 00 65 d7 00 00     xK. U...e...e...
	...
      2c:	65 d7 00 00 00 00 00 00 00 00 00 00 65 d7 00 00     e...........e...
      3c:	65 d7 00 00 65 d7 00 00 81 33 00 00 65 d7 00 00     e...e....3..e...
      4c:	ed 75 00 00 a5 6b 00 00 65 d7 00 00 69 65 00 00     .u...k..e...ie..
      5c:	75 d2 00 00 3d 1c 00 00 71 7a 00 00 89 7a 00 00     u...=...qz...z..
      6c:	a1 7a 00 00 b9 7a 00 00 d1 7a 00 00 e9 7a 00 00     .z...z...z...z..
      7c:	a1 1f 00 00 c1 1f 00 00 e1 1f 00 00 01 21 00 00     .............!..
      8c:	21 21 00 00 41 21 00 00 00 00 00 00 00 00 00 00     !!..A!..........
      9c:	65 d7 00 00 65 d7 00 00 65 d7 00 00 65 d7 00 00     e...e...e...e...
      ac:	65 d7 00 00 00 00 00 00                             e.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000190 	.word	0x20000190
      d4:	00000000 	.word	0x00000000
      d8:	0000f434 	.word	0x0000f434

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000194 	.word	0x20000194
     108:	0000f434 	.word	0x0000f434
     10c:	0000f434 	.word	0x0000f434
     110:	00000000 	.word	0x00000000

00000114 <system_pinmux_get_group_from_gpio_pin>:
 *
 * \return Base address of the associated PORT module.
 */
static inline PortGroup* system_pinmux_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     114:	b580      	push	{r7, lr}
     116:	b084      	sub	sp, #16
     118:	af00      	add	r7, sp, #0
     11a:	0002      	movs	r2, r0
     11c:	1dfb      	adds	r3, r7, #7
     11e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     120:	230f      	movs	r3, #15
     122:	18fb      	adds	r3, r7, r3
     124:	1dfa      	adds	r2, r7, #7
     126:	7812      	ldrb	r2, [r2, #0]
     128:	09d2      	lsrs	r2, r2, #7
     12a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     12c:	230e      	movs	r3, #14
     12e:	18fb      	adds	r3, r7, r3
     130:	1dfa      	adds	r2, r7, #7
     132:	7812      	ldrb	r2, [r2, #0]
     134:	0952      	lsrs	r2, r2, #5
     136:	701a      	strb	r2, [r3, #0]

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     138:	4b0d      	ldr	r3, [pc, #52]	; (170 <system_pinmux_get_group_from_gpio_pin+0x5c>)
     13a:	60bb      	str	r3, [r7, #8]

	if (port_index < PORT_INST_NUM) {
     13c:	230f      	movs	r3, #15
     13e:	18fb      	adds	r3, r7, r3
     140:	781b      	ldrb	r3, [r3, #0]
     142:	2b00      	cmp	r3, #0
     144:	d10f      	bne.n	166 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     146:	230f      	movs	r3, #15
     148:	18fb      	adds	r3, r7, r3
     14a:	781b      	ldrb	r3, [r3, #0]
     14c:	009b      	lsls	r3, r3, #2
     14e:	2210      	movs	r2, #16
     150:	4694      	mov	ip, r2
     152:	44bc      	add	ip, r7
     154:	4463      	add	r3, ip
     156:	3b08      	subs	r3, #8
     158:	681a      	ldr	r2, [r3, #0]
     15a:	230e      	movs	r3, #14
     15c:	18fb      	adds	r3, r7, r3
     15e:	781b      	ldrb	r3, [r3, #0]
     160:	01db      	lsls	r3, r3, #7
     162:	18d3      	adds	r3, r2, r3
     164:	e000      	b.n	168 <system_pinmux_get_group_from_gpio_pin+0x54>
	} else {
		Assert(false);
		return NULL;
     166:	2300      	movs	r3, #0
	}
}
     168:	0018      	movs	r0, r3
     16a:	46bd      	mov	sp, r7
     16c:	b004      	add	sp, #16
     16e:	bd80      	pop	{r7, pc}
     170:	41004400 	.word	0x41004400

00000174 <port_get_group_from_gpio_pin>:
 *
 *  \return Base address of the associated PORT module.
 */
static inline PortGroup* port_get_group_from_gpio_pin(
		const uint8_t gpio_pin)
{
     174:	b580      	push	{r7, lr}
     176:	b082      	sub	sp, #8
     178:	af00      	add	r7, sp, #0
     17a:	0002      	movs	r2, r0
     17c:	1dfb      	adds	r3, r7, #7
     17e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     180:	1dfb      	adds	r3, r7, #7
     182:	781b      	ldrb	r3, [r3, #0]
     184:	0018      	movs	r0, r3
     186:	4b04      	ldr	r3, [pc, #16]	; (198 <port_get_group_from_gpio_pin+0x24>)
     188:	447b      	add	r3, pc
     18a:	4798      	blx	r3
     18c:	0003      	movs	r3, r0
}
     18e:	0018      	movs	r0, r3
     190:	46bd      	mov	sp, r7
     192:	b002      	add	sp, #8
     194:	bd80      	pop	{r7, pc}
     196:	46c0      	nop			; (mov r8, r8)
     198:	ffffff89 	.word	0xffffff89

0000019c <port_get_config_defaults>:
 *
 *  \param[out] config  Configuration structure to initialize to default values
 */
static inline void port_get_config_defaults(
		struct port_config *const config)
{
     19c:	b580      	push	{r7, lr}
     19e:	b082      	sub	sp, #8
     1a0:	af00      	add	r7, sp, #0
     1a2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
     1a4:	687b      	ldr	r3, [r7, #4]
     1a6:	2200      	movs	r2, #0
     1a8:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
     1aa:	687b      	ldr	r3, [r7, #4]
     1ac:	2201      	movs	r2, #1
     1ae:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
     1b0:	687b      	ldr	r3, [r7, #4]
     1b2:	2200      	movs	r2, #0
     1b4:	709a      	strb	r2, [r3, #2]
}
     1b6:	46c0      	nop			; (mov r8, r8)
     1b8:	46bd      	mov	sp, r7
     1ba:	b002      	add	sp, #8
     1bc:	bd80      	pop	{r7, pc}
	...

000001c0 <port_pin_set_output_level>:
 *  \param[in] level     Logical level to set the given pin to
 */
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
     1c0:	b580      	push	{r7, lr}
     1c2:	b084      	sub	sp, #16
     1c4:	af00      	add	r7, sp, #0
     1c6:	0002      	movs	r2, r0
     1c8:	1dfb      	adds	r3, r7, #7
     1ca:	701a      	strb	r2, [r3, #0]
     1cc:	1dbb      	adds	r3, r7, #6
     1ce:	1c0a      	adds	r2, r1, #0
     1d0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     1d2:	1dfb      	adds	r3, r7, #7
     1d4:	781b      	ldrb	r3, [r3, #0]
     1d6:	0018      	movs	r0, r3
     1d8:	4b0d      	ldr	r3, [pc, #52]	; (210 <port_pin_set_output_level+0x50>)
     1da:	447b      	add	r3, pc
     1dc:	4798      	blx	r3
     1de:	0003      	movs	r3, r0
     1e0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     1e2:	1dfb      	adds	r3, r7, #7
     1e4:	781b      	ldrb	r3, [r3, #0]
     1e6:	221f      	movs	r2, #31
     1e8:	4013      	ands	r3, r2
     1ea:	2201      	movs	r2, #1
     1ec:	409a      	lsls	r2, r3
     1ee:	0013      	movs	r3, r2
     1f0:	60bb      	str	r3, [r7, #8]

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
     1f2:	1dbb      	adds	r3, r7, #6
     1f4:	781b      	ldrb	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d003      	beq.n	202 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
     1fa:	68fb      	ldr	r3, [r7, #12]
     1fc:	68ba      	ldr	r2, [r7, #8]
     1fe:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
	}
}
     200:	e002      	b.n	208 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
     202:	68fb      	ldr	r3, [r7, #12]
     204:	68ba      	ldr	r2, [r7, #8]
     206:	615a      	str	r2, [r3, #20]
}
     208:	46c0      	nop			; (mov r8, r8)
     20a:	46bd      	mov	sp, r7
     20c:	b004      	add	sp, #16
     20e:	bd80      	pop	{r7, pc}
     210:	ffffff97 	.word	0xffffff97

00000214 <accy_powerUp>:
#include "adc.h"

extern void fatal_error(int numBlinks, const char* fmt, ...);
extern void debug_print(const char* fmt, ...);

void accy_powerUp() {
     214:	b590      	push	{r4, r7, lr}
     216:	b083      	sub	sp, #12
     218:	af00      	add	r7, sp, #0
     21a:	4c48      	ldr	r4, [pc, #288]	; (33c <accy_powerUp+0x128>)
     21c:	447c      	add	r4, pc

	// Power enable
	struct port_config cfg;
	port_get_config_defaults(&cfg);
     21e:	1d3b      	adds	r3, r7, #4
     220:	0018      	movs	r0, r3
     222:	4b47      	ldr	r3, [pc, #284]	; (340 <accy_powerUp+0x12c>)
     224:	447b      	add	r3, pc
     226:	4798      	blx	r3
	cfg.direction = PORT_PIN_DIR_OUTPUT;
     228:	1d3b      	adds	r3, r7, #4
     22a:	2201      	movs	r2, #1
     22c:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(ACCYEN_GP_OUT_PIN, 1);
     22e:	2101      	movs	r1, #1
     230:	2017      	movs	r0, #23
     232:	4b44      	ldr	r3, [pc, #272]	; (344 <accy_powerUp+0x130>)
     234:	447b      	add	r3, pc
     236:	4798      	blx	r3
	port_pin_set_output_level(ADC_SPI_CS_PIN, 1);
     238:	2101      	movs	r1, #1
     23a:	2036      	movs	r0, #54	; 0x36
     23c:	4b42      	ldr	r3, [pc, #264]	; (348 <accy_powerUp+0x134>)
     23e:	447b      	add	r3, pc
     240:	4798      	blx	r3
	port_pin_set_config(ACCYEN_GP_OUT_PIN, &cfg);
     242:	1d3b      	adds	r3, r7, #4
     244:	0019      	movs	r1, r3
     246:	2017      	movs	r0, #23
     248:	4b40      	ldr	r3, [pc, #256]	; (34c <accy_powerUp+0x138>)
     24a:	58e3      	ldr	r3, [r4, r3]
     24c:	4798      	blx	r3
	port_pin_set_config(ADC_SPI_CS_PIN, &cfg);
     24e:	1d3b      	adds	r3, r7, #4
     250:	0019      	movs	r1, r3
     252:	2036      	movs	r0, #54	; 0x36
     254:	4b3d      	ldr	r3, [pc, #244]	; (34c <accy_powerUp+0x138>)
     256:	58e3      	ldr	r3, [r4, r3]
     258:	4798      	blx	r3

	// Range switches
	port_pin_set_config(SW1A_GP_OUT_PIN, &cfg);
     25a:	1d3b      	adds	r3, r7, #4
     25c:	0019      	movs	r1, r3
     25e:	2004      	movs	r0, #4
     260:	4b3a      	ldr	r3, [pc, #232]	; (34c <accy_powerUp+0x138>)
     262:	58e3      	ldr	r3, [r4, r3]
     264:	4798      	blx	r3
	port_pin_set_config(SW2A_GP_OUT_PIN, &cfg);
     266:	1d3b      	adds	r3, r7, #4
     268:	0019      	movs	r1, r3
     26a:	2005      	movs	r0, #5
     26c:	4b37      	ldr	r3, [pc, #220]	; (34c <accy_powerUp+0x138>)
     26e:	58e3      	ldr	r3, [r4, r3]
     270:	4798      	blx	r3
	port_pin_set_config(SW3A_GP_OUT_PIN, &cfg);
     272:	1d3b      	adds	r3, r7, #4
     274:	0019      	movs	r1, r3
     276:	2006      	movs	r0, #6
     278:	4b34      	ldr	r3, [pc, #208]	; (34c <accy_powerUp+0x138>)
     27a:	58e3      	ldr	r3, [r4, r3]
     27c:	4798      	blx	r3
	port_pin_set_config(SW4A_GP_OUT_PIN, &cfg);
     27e:	1d3b      	adds	r3, r7, #4
     280:	0019      	movs	r1, r3
     282:	2007      	movs	r0, #7
     284:	4b31      	ldr	r3, [pc, #196]	; (34c <accy_powerUp+0x138>)
     286:	58e3      	ldr	r3, [r4, r3]
     288:	4798      	blx	r3
	port_pin_set_config(SW1B_GP_OUT_PIN, &cfg);
     28a:	1d3b      	adds	r3, r7, #4
     28c:	0019      	movs	r1, r3
     28e:	2008      	movs	r0, #8
     290:	4b2e      	ldr	r3, [pc, #184]	; (34c <accy_powerUp+0x138>)
     292:	58e3      	ldr	r3, [r4, r3]
     294:	4798      	blx	r3
	port_pin_set_config(SW2B_GP_OUT_PIN, &cfg);
     296:	1d3b      	adds	r3, r7, #4
     298:	0019      	movs	r1, r3
     29a:	2009      	movs	r0, #9
     29c:	4b2b      	ldr	r3, [pc, #172]	; (34c <accy_powerUp+0x138>)
     29e:	58e3      	ldr	r3, [r4, r3]
     2a0:	4798      	blx	r3
	port_pin_set_config(SW3B_GP_OUT_PIN, &cfg);
     2a2:	1d3b      	adds	r3, r7, #4
     2a4:	0019      	movs	r1, r3
     2a6:	200a      	movs	r0, #10
     2a8:	4b28      	ldr	r3, [pc, #160]	; (34c <accy_powerUp+0x138>)
     2aa:	58e3      	ldr	r3, [r4, r3]
     2ac:	4798      	blx	r3
	port_pin_set_config(SW4B_GP_OUT_PIN, &cfg);
     2ae:	1d3b      	adds	r3, r7, #4
     2b0:	0019      	movs	r1, r3
     2b2:	200b      	movs	r0, #11
     2b4:	4b25      	ldr	r3, [pc, #148]	; (34c <accy_powerUp+0x138>)
     2b6:	58e3      	ldr	r3, [r4, r3]
     2b8:	4798      	blx	r3
	port_pin_set_output_level(SW1A_GP_OUT_PIN, 1);
     2ba:	2101      	movs	r1, #1
     2bc:	2004      	movs	r0, #4
     2be:	4b24      	ldr	r3, [pc, #144]	; (350 <accy_powerUp+0x13c>)
     2c0:	447b      	add	r3, pc
     2c2:	4798      	blx	r3
	port_pin_set_output_level(SW2A_GP_OUT_PIN, 1);
     2c4:	2101      	movs	r1, #1
     2c6:	2005      	movs	r0, #5
     2c8:	4b22      	ldr	r3, [pc, #136]	; (354 <accy_powerUp+0x140>)
     2ca:	447b      	add	r3, pc
     2cc:	4798      	blx	r3
	port_pin_set_output_level(SW3A_GP_OUT_PIN, 1);
     2ce:	2101      	movs	r1, #1
     2d0:	2006      	movs	r0, #6
     2d2:	4b21      	ldr	r3, [pc, #132]	; (358 <accy_powerUp+0x144>)
     2d4:	447b      	add	r3, pc
     2d6:	4798      	blx	r3
	port_pin_set_output_level(SW4A_GP_OUT_PIN, 1);
     2d8:	2101      	movs	r1, #1
     2da:	2007      	movs	r0, #7
     2dc:	4b1f      	ldr	r3, [pc, #124]	; (35c <accy_powerUp+0x148>)
     2de:	447b      	add	r3, pc
     2e0:	4798      	blx	r3
	port_pin_set_output_level(SW1B_GP_OUT_PIN, 1);
     2e2:	2101      	movs	r1, #1
     2e4:	2008      	movs	r0, #8
     2e6:	4b1e      	ldr	r3, [pc, #120]	; (360 <accy_powerUp+0x14c>)
     2e8:	447b      	add	r3, pc
     2ea:	4798      	blx	r3
	port_pin_set_output_level(SW2B_GP_OUT_PIN, 1);
     2ec:	2101      	movs	r1, #1
     2ee:	2009      	movs	r0, #9
     2f0:	4b1c      	ldr	r3, [pc, #112]	; (364 <accy_powerUp+0x150>)
     2f2:	447b      	add	r3, pc
     2f4:	4798      	blx	r3
	port_pin_set_output_level(SW3B_GP_OUT_PIN, 1);
     2f6:	2101      	movs	r1, #1
     2f8:	200a      	movs	r0, #10
     2fa:	4b1b      	ldr	r3, [pc, #108]	; (368 <accy_powerUp+0x154>)
     2fc:	447b      	add	r3, pc
     2fe:	4798      	blx	r3
	port_pin_set_output_level(SW4B_GP_OUT_PIN, 1);
     300:	2101      	movs	r1, #1
     302:	200b      	movs	r0, #11
     304:	4b19      	ldr	r3, [pc, #100]	; (36c <accy_powerUp+0x158>)
     306:	447b      	add	r3, pc
     308:	4798      	blx	r3

	// Logic channels
	cfg.direction = PORT_PIN_DIR_INPUT;
     30a:	1d3b      	adds	r3, r7, #4
     30c:	2200      	movs	r2, #0
     30e:	701a      	strb	r2, [r3, #0]
	port_pin_set_config(LOGIC1_TC_CAP_PIN, &cfg);
     310:	1d3b      	adds	r3, r7, #4
     312:	0019      	movs	r1, r3
     314:	2014      	movs	r0, #20
     316:	4b0d      	ldr	r3, [pc, #52]	; (34c <accy_powerUp+0x138>)
     318:	58e3      	ldr	r3, [r4, r3]
     31a:	4798      	blx	r3
	port_pin_set_config(LOGIC2_TC_CAP_PIN, &cfg);
     31c:	1d3b      	adds	r3, r7, #4
     31e:	0019      	movs	r1, r3
     320:	2015      	movs	r0, #21
     322:	4b0a      	ldr	r3, [pc, #40]	; (34c <accy_powerUp+0x138>)
     324:	58e3      	ldr	r3, [r4, r3]
     326:	4798      	blx	r3

	adc_init(8192000);
     328:	23fa      	movs	r3, #250	; 0xfa
     32a:	03db      	lsls	r3, r3, #15
     32c:	0018      	movs	r0, r3
     32e:	4b10      	ldr	r3, [pc, #64]	; (370 <accy_powerUp+0x15c>)
     330:	58e3      	ldr	r3, [r4, r3]
     332:	4798      	blx	r3
}
     334:	46c0      	nop			; (mov r8, r8)
     336:	46bd      	mov	sp, r7
     338:	b003      	add	sp, #12
     33a:	bd90      	pop	{r4, r7, pc}
     33c:	0000f214 	.word	0x0000f214
     340:	ffffff75 	.word	0xffffff75
     344:	ffffff89 	.word	0xffffff89
     348:	ffffff7f 	.word	0xffffff7f
     34c:	00000264 	.word	0x00000264
     350:	fffffefd 	.word	0xfffffefd
     354:	fffffef3 	.word	0xfffffef3
     358:	fffffee9 	.word	0xfffffee9
     35c:	fffffedf 	.word	0xfffffedf
     360:	fffffed5 	.word	0xfffffed5
     364:	fffffecb 	.word	0xfffffecb
     368:	fffffec1 	.word	0xfffffec1
     36c:	fffffeb7 	.word	0xfffffeb7
     370:	00000274 	.word	0x00000274

00000374 <dma_enable_callback>:
 * \param[in] type Callback function type
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
     374:	b590      	push	{r4, r7, lr}
     376:	b083      	sub	sp, #12
     378:	af00      	add	r7, sp, #0
     37a:	6078      	str	r0, [r7, #4]
     37c:	000a      	movs	r2, r1
     37e:	1cfb      	adds	r3, r7, #3
     380:	701a      	strb	r2, [r3, #0]
     382:	4b14      	ldr	r3, [pc, #80]	; (3d4 <dma_enable_callback+0x60>)
     384:	447b      	add	r3, pc
	Assert(resource);

	resource->callback_enable |= 1 << type;
     386:	687a      	ldr	r2, [r7, #4]
     388:	7c12      	ldrb	r2, [r2, #16]
     38a:	b251      	sxtb	r1, r2
     38c:	1cfa      	adds	r2, r7, #3
     38e:	7812      	ldrb	r2, [r2, #0]
     390:	2001      	movs	r0, #1
     392:	4090      	lsls	r0, r2
     394:	0002      	movs	r2, r0
     396:	b252      	sxtb	r2, r2
     398:	430a      	orrs	r2, r1
     39a:	b252      	sxtb	r2, r2
     39c:	b2d1      	uxtb	r1, r2
     39e:	687a      	ldr	r2, [r7, #4]
     3a0:	7411      	strb	r1, [r2, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
     3a2:	687a      	ldr	r2, [r7, #4]
     3a4:	7812      	ldrb	r2, [r2, #0]
     3a6:	0014      	movs	r4, r2
     3a8:	687a      	ldr	r2, [r7, #4]
     3aa:	7812      	ldrb	r2, [r2, #0]
     3ac:	0011      	movs	r1, r2
     3ae:	4a0a      	ldr	r2, [pc, #40]	; (3d8 <dma_enable_callback+0x64>)
     3b0:	589a      	ldr	r2, [r3, r2]
     3b2:	5c51      	ldrb	r1, [r2, r1]
     3b4:	1cfa      	adds	r2, r7, #3
     3b6:	7812      	ldrb	r2, [r2, #0]
     3b8:	2001      	movs	r0, #1
     3ba:	4090      	lsls	r0, r2
     3bc:	0002      	movs	r2, r0
     3be:	b2d2      	uxtb	r2, r2
     3c0:	430a      	orrs	r2, r1
     3c2:	b2d1      	uxtb	r1, r2
     3c4:	4a04      	ldr	r2, [pc, #16]	; (3d8 <dma_enable_callback+0x64>)
     3c6:	589b      	ldr	r3, [r3, r2]
     3c8:	1c0a      	adds	r2, r1, #0
     3ca:	551a      	strb	r2, [r3, r4]
}
     3cc:	46c0      	nop			; (mov r8, r8)
     3ce:	46bd      	mov	sp, r7
     3d0:	b003      	add	sp, #12
     3d2:	bd90      	pop	{r4, r7, pc}
     3d4:	0000f0ac 	.word	0x0000f0ac
     3d8:	00000074 	.word	0x00000074

000003dc <dma_register_callback>:
 * \param[in] type Callback function type
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
     3dc:	b580      	push	{r7, lr}
     3de:	b084      	sub	sp, #16
     3e0:	af00      	add	r7, sp, #0
     3e2:	60f8      	str	r0, [r7, #12]
     3e4:	60b9      	str	r1, [r7, #8]
     3e6:	1dfb      	adds	r3, r7, #7
     3e8:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	resource->callback[type] = callback;
     3ea:	1dfb      	adds	r3, r7, #7
     3ec:	781b      	ldrb	r3, [r3, #0]
     3ee:	68fa      	ldr	r2, [r7, #12]
     3f0:	009b      	lsls	r3, r3, #2
     3f2:	18d3      	adds	r3, r2, r3
     3f4:	3304      	adds	r3, #4
     3f6:	68ba      	ldr	r2, [r7, #8]
     3f8:	601a      	str	r2, [r3, #0]
}
     3fa:	46c0      	nop			; (mov r8, r8)
     3fc:	46bd      	mov	sp, r7
     3fe:	b004      	add	sp, #16
     400:	bd80      	pop	{r7, pc}

00000402 <dma_descriptor_get_config_defaults>:
 *  \li Default next descriptor not available
 * \param[out] config Pointer to the configuration
 *
 */
static inline void dma_descriptor_get_config_defaults(struct dma_descriptor_config *config)
{
     402:	b580      	push	{r7, lr}
     404:	b082      	sub	sp, #8
     406:	af00      	add	r7, sp, #0
     408:	6078      	str	r0, [r7, #4]
	Assert(config);

	/* Set descriptor as valid */
	config->descriptor_valid = true;
     40a:	687b      	ldr	r3, [r7, #4]
     40c:	2201      	movs	r2, #1
     40e:	701a      	strb	r2, [r3, #0]
	/* Disable event output */
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
     410:	687b      	ldr	r3, [r7, #4]
     412:	2200      	movs	r2, #0
     414:	705a      	strb	r2, [r3, #1]
	/* No block action */
	config->block_action = DMA_BLOCK_ACTION_NOACT;
     416:	687b      	ldr	r3, [r7, #4]
     418:	2200      	movs	r2, #0
     41a:	709a      	strb	r2, [r3, #2]
	/* Set beat size to one byte */
	config->beat_size = DMA_BEAT_SIZE_BYTE;
     41c:	687b      	ldr	r3, [r7, #4]
     41e:	2200      	movs	r2, #0
     420:	70da      	strb	r2, [r3, #3]
	/* Enable source increment */
	config->src_increment_enable = true;
     422:	687b      	ldr	r3, [r7, #4]
     424:	2201      	movs	r2, #1
     426:	711a      	strb	r2, [r3, #4]
	/* Enable destination increment */
	config->dst_increment_enable = true;
     428:	687b      	ldr	r3, [r7, #4]
     42a:	2201      	movs	r2, #1
     42c:	715a      	strb	r2, [r3, #5]
	/* Step size is applied to the destination address */
	config->step_selection = DMA_STEPSEL_DST;
     42e:	687b      	ldr	r3, [r7, #4]
     430:	2200      	movs	r2, #0
     432:	719a      	strb	r2, [r3, #6]
	/* Address increment is beat size multiplied by 1*/
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
     434:	687b      	ldr	r3, [r7, #4]
     436:	2200      	movs	r2, #0
     438:	71da      	strb	r2, [r3, #7]
	/* Default transfer size is set to 0 */
	config->block_transfer_count = 0;
     43a:	687b      	ldr	r3, [r7, #4]
     43c:	2200      	movs	r2, #0
     43e:	811a      	strh	r2, [r3, #8]
	/* Default source address is set to NULL */
	config->source_address = (uint32_t)NULL;
     440:	687b      	ldr	r3, [r7, #4]
     442:	2200      	movs	r2, #0
     444:	60da      	str	r2, [r3, #12]
	/* Default destination address is set to NULL */
	config->destination_address = (uint32_t)NULL;
     446:	687b      	ldr	r3, [r7, #4]
     448:	2200      	movs	r2, #0
     44a:	611a      	str	r2, [r3, #16]
	/** Next descriptor address set to 0 */
	config->next_descriptor_address = 0;
     44c:	687b      	ldr	r3, [r7, #4]
     44e:	2200      	movs	r2, #0
     450:	615a      	str	r2, [r3, #20]
}
     452:	46c0      	nop			; (mov r8, r8)
     454:	46bd      	mov	sp, r7
     456:	b002      	add	sp, #8
     458:	bd80      	pop	{r7, pc}

0000045a <system_gclk_gen_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_gen_get_config_defaults(
		struct system_gclk_gen_config *const config)
{
     45a:	b580      	push	{r7, lr}
     45c:	b082      	sub	sp, #8
     45e:	af00      	add	r7, sp, #0
     460:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     462:	687b      	ldr	r3, [r7, #4]
     464:	2201      	movs	r2, #1
     466:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
     468:	687b      	ldr	r3, [r7, #4]
     46a:	2200      	movs	r2, #0
     46c:	705a      	strb	r2, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	2206      	movs	r2, #6
     472:	701a      	strb	r2, [r3, #0]
#endif
	config->run_in_standby     = false;
     474:	687b      	ldr	r3, [r7, #4]
     476:	2200      	movs	r2, #0
     478:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
     47a:	687b      	ldr	r3, [r7, #4]
     47c:	2200      	movs	r2, #0
     47e:	725a      	strb	r2, [r3, #9]
}
     480:	46c0      	nop			; (mov r8, r8)
     482:	46bd      	mov	sp, r7
     484:	b002      	add	sp, #8
     486:	bd80      	pop	{r7, pc}

00000488 <system_pinmux_get_config_defaults>:
{
     488:	b580      	push	{r7, lr}
     48a:	b082      	sub	sp, #8
     48c:	af00      	add	r7, sp, #0
     48e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     490:	687b      	ldr	r3, [r7, #4]
     492:	2280      	movs	r2, #128	; 0x80
     494:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     496:	687b      	ldr	r3, [r7, #4]
     498:	2200      	movs	r2, #0
     49a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     49c:	687b      	ldr	r3, [r7, #4]
     49e:	2201      	movs	r2, #1
     4a0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     4a2:	687b      	ldr	r3, [r7, #4]
     4a4:	2200      	movs	r2, #0
     4a6:	70da      	strb	r2, [r3, #3]
}
     4a8:	46c0      	nop			; (mov r8, r8)
     4aa:	46bd      	mov	sp, r7
     4ac:	b002      	add	sp, #8
     4ae:	bd80      	pop	{r7, pc}

000004b0 <system_pinmux_get_group_from_gpio_pin>:
{
     4b0:	b580      	push	{r7, lr}
     4b2:	b084      	sub	sp, #16
     4b4:	af00      	add	r7, sp, #0
     4b6:	0002      	movs	r2, r0
     4b8:	1dfb      	adds	r3, r7, #7
     4ba:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
     4bc:	230f      	movs	r3, #15
     4be:	18fb      	adds	r3, r7, r3
     4c0:	1dfa      	adds	r2, r7, #7
     4c2:	7812      	ldrb	r2, [r2, #0]
     4c4:	09d2      	lsrs	r2, r2, #7
     4c6:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
     4c8:	230e      	movs	r3, #14
     4ca:	18fb      	adds	r3, r7, r3
     4cc:	1dfa      	adds	r2, r7, #7
     4ce:	7812      	ldrb	r2, [r2, #0]
     4d0:	0952      	lsrs	r2, r2, #5
     4d2:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
     4d4:	4b0d      	ldr	r3, [pc, #52]	; (50c <system_pinmux_get_group_from_gpio_pin+0x5c>)
     4d6:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
     4d8:	230f      	movs	r3, #15
     4da:	18fb      	adds	r3, r7, r3
     4dc:	781b      	ldrb	r3, [r3, #0]
     4de:	2b00      	cmp	r3, #0
     4e0:	d10f      	bne.n	502 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
     4e2:	230f      	movs	r3, #15
     4e4:	18fb      	adds	r3, r7, r3
     4e6:	781b      	ldrb	r3, [r3, #0]
     4e8:	009b      	lsls	r3, r3, #2
     4ea:	2210      	movs	r2, #16
     4ec:	4694      	mov	ip, r2
     4ee:	44bc      	add	ip, r7
     4f0:	4463      	add	r3, ip
     4f2:	3b08      	subs	r3, #8
     4f4:	681a      	ldr	r2, [r3, #0]
     4f6:	230e      	movs	r3, #14
     4f8:	18fb      	adds	r3, r7, r3
     4fa:	781b      	ldrb	r3, [r3, #0]
     4fc:	01db      	lsls	r3, r3, #7
     4fe:	18d3      	adds	r3, r2, r3
     500:	e000      	b.n	504 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
     502:	2300      	movs	r3, #0
}
     504:	0018      	movs	r0, r3
     506:	46bd      	mov	sp, r7
     508:	b004      	add	sp, #16
     50a:	bd80      	pop	{r7, pc}
     50c:	41004400 	.word	0x41004400

00000510 <system_pinmux_pin_set_output_strength>:
 * \param[in] mode      New output driver strength mode to configure
 */
static inline void system_pinmux_pin_set_output_strength(
    const uint8_t gpio_pin,
    const enum system_pinmux_pin_strength mode)
{
     510:	b580      	push	{r7, lr}
     512:	b084      	sub	sp, #16
     514:	af00      	add	r7, sp, #0
     516:	0002      	movs	r2, r0
     518:	1dfb      	adds	r3, r7, #7
     51a:	701a      	strb	r2, [r3, #0]
     51c:	1dbb      	adds	r3, r7, #6
     51e:	1c0a      	adds	r2, r1, #0
     520:	701a      	strb	r2, [r3, #0]
  PortGroup* const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
     522:	1dfb      	adds	r3, r7, #7
     524:	781b      	ldrb	r3, [r3, #0]
     526:	0018      	movs	r0, r3
     528:	4b1a      	ldr	r3, [pc, #104]	; (594 <system_pinmux_pin_set_output_strength+0x84>)
     52a:	447b      	add	r3, pc
     52c:	4798      	blx	r3
     52e:	0003      	movs	r3, r0
     530:	60fb      	str	r3, [r7, #12]
  uint32_t pin_index = (gpio_pin % 32);
     532:	1dfb      	adds	r3, r7, #7
     534:	781b      	ldrb	r3, [r3, #0]
     536:	221f      	movs	r2, #31
     538:	4013      	ands	r3, r2
     53a:	60bb      	str	r3, [r7, #8]

  if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
     53c:	1dbb      	adds	r3, r7, #6
     53e:	781b      	ldrb	r3, [r3, #0]
     540:	2b01      	cmp	r3, #1
     542:	d111      	bne.n	568 <system_pinmux_pin_set_output_strength+0x58>
    port->PINCFG[pin_index].reg |=  PORT_PINCFG_DRVSTR;
     544:	68fa      	ldr	r2, [r7, #12]
     546:	2140      	movs	r1, #64	; 0x40
     548:	68bb      	ldr	r3, [r7, #8]
     54a:	18d3      	adds	r3, r2, r3
     54c:	185b      	adds	r3, r3, r1
     54e:	781b      	ldrb	r3, [r3, #0]
     550:	b2db      	uxtb	r3, r3
     552:	2240      	movs	r2, #64	; 0x40
     554:	4313      	orrs	r3, r2
     556:	b2d8      	uxtb	r0, r3
     558:	68fa      	ldr	r2, [r7, #12]
     55a:	2140      	movs	r1, #64	; 0x40
     55c:	68bb      	ldr	r3, [r7, #8]
     55e:	18d3      	adds	r3, r2, r3
     560:	185b      	adds	r3, r3, r1
     562:	1c02      	adds	r2, r0, #0
     564:	701a      	strb	r2, [r3, #0]
  }
 else {
    port->PINCFG[pin_index].reg &= ~PORT_PINCFG_DRVSTR;
 }
}
     566:	e010      	b.n	58a <system_pinmux_pin_set_output_strength+0x7a>
    port->PINCFG[pin_index].reg &= ~PORT_PINCFG_DRVSTR;
     568:	68fa      	ldr	r2, [r7, #12]
     56a:	2140      	movs	r1, #64	; 0x40
     56c:	68bb      	ldr	r3, [r7, #8]
     56e:	18d3      	adds	r3, r2, r3
     570:	185b      	adds	r3, r3, r1
     572:	781b      	ldrb	r3, [r3, #0]
     574:	b2db      	uxtb	r3, r3
     576:	2240      	movs	r2, #64	; 0x40
     578:	4393      	bics	r3, r2
     57a:	b2d8      	uxtb	r0, r3
     57c:	68fa      	ldr	r2, [r7, #12]
     57e:	2140      	movs	r1, #64	; 0x40
     580:	68bb      	ldr	r3, [r7, #8]
     582:	18d3      	adds	r3, r2, r3
     584:	185b      	adds	r3, r3, r1
     586:	1c02      	adds	r2, r0, #0
     588:	701a      	strb	r2, [r3, #0]
}
     58a:	46c0      	nop			; (mov r8, r8)
     58c:	46bd      	mov	sp, r7
     58e:	b004      	add	sp, #16
     590:	bd80      	pop	{r7, pc}
     592:	46c0      	nop			; (mov r8, r8)
     594:	ffffff83 	.word	0xffffff83

00000598 <port_get_group_from_gpio_pin>:
{
     598:	b580      	push	{r7, lr}
     59a:	b082      	sub	sp, #8
     59c:	af00      	add	r7, sp, #0
     59e:	0002      	movs	r2, r0
     5a0:	1dfb      	adds	r3, r7, #7
     5a2:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
     5a4:	1dfb      	adds	r3, r7, #7
     5a6:	781b      	ldrb	r3, [r3, #0]
     5a8:	0018      	movs	r0, r3
     5aa:	4b04      	ldr	r3, [pc, #16]	; (5bc <port_get_group_from_gpio_pin+0x24>)
     5ac:	447b      	add	r3, pc
     5ae:	4798      	blx	r3
     5b0:	0003      	movs	r3, r0
}
     5b2:	0018      	movs	r0, r3
     5b4:	46bd      	mov	sp, r7
     5b6:	b002      	add	sp, #8
     5b8:	bd80      	pop	{r7, pc}
     5ba:	46c0      	nop			; (mov r8, r8)
     5bc:	ffffff01 	.word	0xffffff01

000005c0 <port_pin_set_output_level>:
{
     5c0:	b580      	push	{r7, lr}
     5c2:	b084      	sub	sp, #16
     5c4:	af00      	add	r7, sp, #0
     5c6:	0002      	movs	r2, r0
     5c8:	1dfb      	adds	r3, r7, #7
     5ca:	701a      	strb	r2, [r3, #0]
     5cc:	1dbb      	adds	r3, r7, #6
     5ce:	1c0a      	adds	r2, r1, #0
     5d0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
     5d2:	1dfb      	adds	r3, r7, #7
     5d4:	781b      	ldrb	r3, [r3, #0]
     5d6:	0018      	movs	r0, r3
     5d8:	4b0d      	ldr	r3, [pc, #52]	; (610 <port_pin_set_output_level+0x50>)
     5da:	447b      	add	r3, pc
     5dc:	4798      	blx	r3
     5de:	0003      	movs	r3, r0
     5e0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     5e2:	1dfb      	adds	r3, r7, #7
     5e4:	781b      	ldrb	r3, [r3, #0]
     5e6:	221f      	movs	r2, #31
     5e8:	4013      	ands	r3, r2
     5ea:	2201      	movs	r2, #1
     5ec:	409a      	lsls	r2, r3
     5ee:	0013      	movs	r3, r2
     5f0:	60bb      	str	r3, [r7, #8]
	if (level) {
     5f2:	1dbb      	adds	r3, r7, #6
     5f4:	781b      	ldrb	r3, [r3, #0]
     5f6:	2b00      	cmp	r3, #0
     5f8:	d003      	beq.n	602 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
     5fa:	68fb      	ldr	r3, [r7, #12]
     5fc:	68ba      	ldr	r2, [r7, #8]
     5fe:	619a      	str	r2, [r3, #24]
}
     600:	e002      	b.n	608 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
     602:	68fb      	ldr	r3, [r7, #12]
     604:	68ba      	ldr	r2, [r7, #8]
     606:	615a      	str	r2, [r3, #20]
}
     608:	46c0      	nop			; (mov r8, r8)
     60a:	46bd      	mov	sp, r7
     60c:	b004      	add	sp, #16
     60e:	bd80      	pop	{r7, pc}
     610:	ffffffbb 	.word	0xffffffbb

00000614 <system_interrupt_enable>:
 *
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
     614:	b580      	push	{r7, lr}
     616:	b082      	sub	sp, #8
     618:	af00      	add	r7, sp, #0
     61a:	0002      	movs	r2, r0
     61c:	1dfb      	adds	r3, r7, #7
     61e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     620:	4b06      	ldr	r3, [pc, #24]	; (63c <system_interrupt_enable+0x28>)
     622:	1dfa      	adds	r2, r7, #7
     624:	7812      	ldrb	r2, [r2, #0]
     626:	0011      	movs	r1, r2
     628:	221f      	movs	r2, #31
     62a:	400a      	ands	r2, r1
     62c:	2101      	movs	r1, #1
     62e:	4091      	lsls	r1, r2
     630:	000a      	movs	r2, r1
     632:	601a      	str	r2, [r3, #0]
}
     634:	46c0      	nop			; (mov r8, r8)
     636:	46bd      	mov	sp, r7
     638:	b002      	add	sp, #8
     63a:	bd80      	pop	{r7, pc}
     63c:	e000e100 	.word	0xe000e100

00000640 <spi_is_syncing>:
 * \retval false  Module synchronization is not ongoing
 *
 */
static inline bool spi_is_syncing(
		struct spi_module *const module)
{
     640:	b580      	push	{r7, lr}
     642:	b084      	sub	sp, #16
     644:	af00      	add	r7, sp, #0
     646:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     648:	687b      	ldr	r3, [r7, #4]
     64a:	681b      	ldr	r3, [r3, #0]
     64c:	60fb      	str	r3, [r7, #12]

#  ifdef FEATURE_SPI_SYNC_SCHEME_VERSION_2
	/* Return synchronization status */
	return (spi_module->SYNCBUSY.reg);
     64e:	68fb      	ldr	r3, [r7, #12]
     650:	69db      	ldr	r3, [r3, #28]
     652:	1e5a      	subs	r2, r3, #1
     654:	4193      	sbcs	r3, r2
     656:	b2db      	uxtb	r3, r3
#  else
	/* Return synchronization status */
	return (spi_module->STATUS.reg & SERCOM_SPI_STATUS_SYNCBUSY);
#  endif
}
     658:	0018      	movs	r0, r3
     65a:	46bd      	mov	sp, r7
     65c:	b004      	add	sp, #16
     65e:	bd80      	pop	{r7, pc}

00000660 <spi_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void spi_get_config_defaults(
		struct spi_config *const config)
{
     660:	b590      	push	{r4, r7, lr}
     662:	b083      	sub	sp, #12
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
     668:	4c1e      	ldr	r4, [pc, #120]	; (6e4 <spi_get_config_defaults+0x84>)
     66a:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mode             = SPI_MODE_MASTER;
     66c:	687b      	ldr	r3, [r7, #4]
     66e:	2201      	movs	r2, #1
     670:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     672:	687b      	ldr	r3, [r7, #4]
     674:	2200      	movs	r2, #0
     676:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     678:	687b      	ldr	r3, [r7, #4]
     67a:	2200      	movs	r2, #0
     67c:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
     67e:	687b      	ldr	r3, [r7, #4]
     680:	22c0      	movs	r2, #192	; 0xc0
     682:	0392      	lsls	r2, r2, #14
     684:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     686:	687b      	ldr	r3, [r7, #4]
     688:	2200      	movs	r2, #0
     68a:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
     68c:	687b      	ldr	r3, [r7, #4]
     68e:	2200      	movs	r2, #0
     690:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
     692:	687b      	ldr	r3, [r7, #4]
     694:	2201      	movs	r2, #1
     696:	749a      	strb	r2, [r3, #18]
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	config->select_slave_low_detect_enable= true;
     698:	687b      	ldr	r3, [r7, #4]
     69a:	2201      	movs	r2, #1
     69c:	74da      	strb	r2, [r3, #19]
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	config->master_slave_select_enable= false;
     69e:	687b      	ldr	r3, [r7, #4]
     6a0:	2200      	movs	r2, #0
     6a2:	751a      	strb	r2, [r3, #20]
#  endif
	config->generator_source = GCLK_GENERATOR_0;
     6a4:	687b      	ldr	r3, [r7, #4]
     6a6:	2224      	movs	r2, #36	; 0x24
     6a8:	2100      	movs	r1, #0
     6aa:	5499      	strb	r1, [r3, r2]

	/* Clear mode specific config */
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     6ac:	687b      	ldr	r3, [r7, #4]
     6ae:	3318      	adds	r3, #24
     6b0:	220c      	movs	r2, #12
     6b2:	2100      	movs	r1, #0
     6b4:	0018      	movs	r0, r3
     6b6:	4b0c      	ldr	r3, [pc, #48]	; (6e8 <spi_get_config_defaults+0x88>)
     6b8:	58e3      	ldr	r3, [r4, r3]
     6ba:	4798      	blx	r3

	/* Master config defaults */
	config->mode_specific.master.baudrate = 100000;
     6bc:	687b      	ldr	r3, [r7, #4]
     6be:	4a0b      	ldr	r2, [pc, #44]	; (6ec <spi_get_config_defaults+0x8c>)
     6c0:	619a      	str	r2, [r3, #24]

	/* pinmux config defaults */
	config->pinmux_pad0 = PINMUX_DEFAULT;
     6c2:	687b      	ldr	r3, [r7, #4]
     6c4:	2200      	movs	r2, #0
     6c6:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	2200      	movs	r2, #0
     6cc:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
     6ce:	687b      	ldr	r3, [r7, #4]
     6d0:	2200      	movs	r2, #0
     6d2:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
     6d4:	687b      	ldr	r3, [r7, #4]
     6d6:	2200      	movs	r2, #0
     6d8:	635a      	str	r2, [r3, #52]	; 0x34

};
     6da:	46c0      	nop			; (mov r8, r8)
     6dc:	46bd      	mov	sp, r7
     6de:	b003      	add	sp, #12
     6e0:	bd90      	pop	{r4, r7, pc}
     6e2:	46c0      	nop			; (mov r8, r8)
     6e4:	0000edc6 	.word	0x0000edc6
     6e8:	00000220 	.word	0x00000220
     6ec:	000186a0 	.word	0x000186a0

000006f0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
static inline void spi_enable(
		struct spi_module *const module)
{
     6f0:	b580      	push	{r7, lr}
     6f2:	b084      	sub	sp, #16
     6f4:	af00      	add	r7, sp, #0
     6f6:	6078      	str	r0, [r7, #4]
     6f8:	4a10      	ldr	r2, [pc, #64]	; (73c <spi_enable+0x4c>)
     6fa:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     6fc:	687b      	ldr	r3, [r7, #4]
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	60fb      	str	r3, [r7, #12]

#  if SPI_CALLBACK_MODE == true
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     702:	687b      	ldr	r3, [r7, #4]
     704:	681b      	ldr	r3, [r3, #0]
     706:	0018      	movs	r0, r3
     708:	4b0d      	ldr	r3, [pc, #52]	; (740 <spi_enable+0x50>)
     70a:	58d3      	ldr	r3, [r2, r3]
     70c:	4798      	blx	r3
     70e:	0003      	movs	r3, r0
     710:	0018      	movs	r0, r3
     712:	4b0c      	ldr	r3, [pc, #48]	; (744 <spi_enable+0x54>)
     714:	447b      	add	r3, pc
     716:	4798      	blx	r3
#  endif

	while (spi_is_syncing(module)) {
     718:	46c0      	nop			; (mov r8, r8)
     71a:	687b      	ldr	r3, [r7, #4]
     71c:	0018      	movs	r0, r3
     71e:	4b0a      	ldr	r3, [pc, #40]	; (748 <spi_enable+0x58>)
     720:	447b      	add	r3, pc
     722:	4798      	blx	r3
     724:	1e03      	subs	r3, r0, #0
     726:	d1f8      	bne.n	71a <spi_enable+0x2a>
		/* Wait until the synchronization is complete */
	}

	/* Enable SPI */
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     728:	68fb      	ldr	r3, [r7, #12]
     72a:	681b      	ldr	r3, [r3, #0]
     72c:	2202      	movs	r2, #2
     72e:	431a      	orrs	r2, r3
     730:	68fb      	ldr	r3, [r7, #12]
     732:	601a      	str	r2, [r3, #0]
}
     734:	46c0      	nop			; (mov r8, r8)
     736:	46bd      	mov	sp, r7
     738:	b004      	add	sp, #16
     73a:	bd80      	pop	{r7, pc}
     73c:	0000ed36 	.word	0x0000ed36
     740:	000000cc 	.word	0x000000cc
     744:	fffffefd 	.word	0xfffffefd
     748:	ffffff1d 	.word	0xffffff1d

0000074c <tc_is_syncing>:
 * \retval false If the module has completed synchronization
 * \retval true  If the module synchronization is ongoing
 */
static inline bool tc_is_syncing(
		const struct tc_module *const module_inst)
{
     74c:	b580      	push	{r7, lr}
     74e:	b084      	sub	sp, #16
     750:	af00      	add	r7, sp, #0
     752:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     754:	687b      	ldr	r3, [r7, #4]
     756:	681b      	ldr	r3, [r3, #0]
     758:	60fb      	str	r3, [r7, #12]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (tc_module->SYNCBUSY.reg);
#else
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
     75a:	68fb      	ldr	r3, [r7, #12]
     75c:	7bdb      	ldrb	r3, [r3, #15]
     75e:	b2db      	uxtb	r3, r3
     760:	001a      	movs	r2, r3
     762:	2380      	movs	r3, #128	; 0x80
     764:	4013      	ands	r3, r2
     766:	1e5a      	subs	r2, r3, #1
     768:	4193      	sbcs	r3, r2
     76a:	b2db      	uxtb	r3, r3
#endif
}
     76c:	0018      	movs	r0, r3
     76e:	46bd      	mov	sp, r7
     770:	b004      	add	sp, #16
     772:	bd80      	pop	{r7, pc}

00000774 <tc_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a TC module configuration structure to set
 */
static inline void tc_get_config_defaults(
		struct tc_config *const config)
{
     774:	b580      	push	{r7, lr}
     776:	b082      	sub	sp, #8
     778:	af00      	add	r7, sp, #0
     77a:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Write default config to config struct */
	config->clock_source               = GCLK_GENERATOR_0;
     77c:	687b      	ldr	r3, [r7, #4]
     77e:	2200      	movs	r2, #0
     780:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
     782:	687b      	ldr	r3, [r7, #4]
     784:	2200      	movs	r2, #0
     786:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
     788:	687b      	ldr	r3, [r7, #4]
     78a:	2200      	movs	r2, #0
     78c:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
     78e:	687b      	ldr	r3, [r7, #4]
     790:	2200      	movs	r2, #0
     792:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
     794:	687b      	ldr	r3, [r7, #4]
     796:	2200      	movs	r2, #0
     798:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
     79a:	687b      	ldr	r3, [r7, #4]
     79c:	2200      	movs	r2, #0
     79e:	705a      	strb	r2, [r3, #1]
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->on_demand                  = false;
#endif
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
     7a0:	687b      	ldr	r3, [r7, #4]
     7a2:	2200      	movs	r2, #0
     7a4:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
     7a6:	687b      	ldr	r3, [r7, #4]
     7a8:	2200      	movs	r2, #0
     7aa:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
     7ac:	687b      	ldr	r3, [r7, #4]
     7ae:	2200      	movs	r2, #0
     7b0:	731a      	strb	r2, [r3, #12]
#ifdef 	FEATURE_TC_IO_CAPTURE
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
#endif

	config->count_direction            = TC_COUNT_DIRECTION_UP;
     7b2:	687b      	ldr	r3, [r7, #4]
     7b4:	2200      	movs	r2, #0
     7b6:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
     7b8:	687b      	ldr	r3, [r7, #4]
     7ba:	2200      	movs	r2, #0
     7bc:	735a      	strb	r2, [r3, #13]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
     7be:	687b      	ldr	r3, [r7, #4]
     7c0:	2200      	movs	r2, #0
     7c2:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
     7c4:	687b      	ldr	r3, [r7, #4]
     7c6:	2200      	movs	r2, #0
     7c8:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
     7ca:	687b      	ldr	r3, [r7, #4]
     7cc:	2200      	movs	r2, #0
     7ce:	619a      	str	r2, [r3, #24]

	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
     7d0:	687b      	ldr	r3, [r7, #4]
     7d2:	2200      	movs	r2, #0
     7d4:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
     7d6:	687b      	ldr	r3, [r7, #4]
     7d8:	2200      	movs	r2, #0
     7da:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	2200      	movs	r2, #0
     7e0:	625a      	str	r2, [r3, #36]	; 0x24

	config->counter_16_bit.value                   = 0x0000;
     7e2:	687b      	ldr	r3, [r7, #4]
     7e4:	2200      	movs	r2, #0
     7e6:	851a      	strh	r2, [r3, #40]	; 0x28
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	2200      	movs	r2, #0
     7ec:	855a      	strh	r2, [r3, #42]	; 0x2a
	config->counter_16_bit.compare_capture_channel\
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
     7ee:	687b      	ldr	r3, [r7, #4]
     7f0:	2200      	movs	r2, #0
     7f2:	859a      	strh	r2, [r3, #44]	; 0x2c
#ifdef FEATURE_TC_DOUBLE_BUFFERED
	config->double_buffering_enabled = false;
#endif

}
     7f4:	46c0      	nop			; (mov r8, r8)
     7f6:	46bd      	mov	sp, r7
     7f8:	b002      	add	sp, #8
     7fa:	bd80      	pop	{r7, pc}

000007fc <tc_enable_events>:
 * \param[in]  events       Struct containing flags of events to enable
 */
static inline void tc_enable_events(
		struct tc_module *const module_inst,
		struct tc_events *const events)
{
     7fc:	b580      	push	{r7, lr}
     7fe:	b086      	sub	sp, #24
     800:	af00      	add	r7, sp, #0
     802:	6078      	str	r0, [r7, #4]
     804:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(events);

	Tc *const tc_module = module_inst->hw;
     806:	687b      	ldr	r3, [r7, #4]
     808:	681b      	ldr	r3, [r3, #0]
     80a:	60fb      	str	r3, [r7, #12]

	uint32_t event_mask = 0;
     80c:	2300      	movs	r3, #0
     80e:	617b      	str	r3, [r7, #20]

	if (events->invert_event_input == true) {
     810:	683b      	ldr	r3, [r7, #0]
     812:	791b      	ldrb	r3, [r3, #4]
     814:	2b00      	cmp	r3, #0
     816:	d003      	beq.n	820 <tc_enable_events+0x24>
		event_mask |= TC_EVCTRL_TCINV;
     818:	697b      	ldr	r3, [r7, #20]
     81a:	2210      	movs	r2, #16
     81c:	4313      	orrs	r3, r2
     81e:	617b      	str	r3, [r7, #20]
	}

	if (events->on_event_perform_action == true) {
     820:	683b      	ldr	r3, [r7, #0]
     822:	78db      	ldrb	r3, [r3, #3]
     824:	2b00      	cmp	r3, #0
     826:	d003      	beq.n	830 <tc_enable_events+0x34>
		event_mask |= TC_EVCTRL_TCEI;
     828:	697b      	ldr	r3, [r7, #20]
     82a:	2220      	movs	r2, #32
     82c:	4313      	orrs	r3, r2
     82e:	617b      	str	r3, [r7, #20]
	}

	if (events->generate_event_on_overflow == true) {
     830:	683b      	ldr	r3, [r7, #0]
     832:	789b      	ldrb	r3, [r3, #2]
     834:	2b00      	cmp	r3, #0
     836:	d004      	beq.n	842 <tc_enable_events+0x46>
		event_mask |= TC_EVCTRL_OVFEO;
     838:	697b      	ldr	r3, [r7, #20]
     83a:	2280      	movs	r2, #128	; 0x80
     83c:	0052      	lsls	r2, r2, #1
     83e:	4313      	orrs	r3, r2
     840:	617b      	str	r3, [r7, #20]
	}

	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     842:	2313      	movs	r3, #19
     844:	18fb      	adds	r3, r7, r3
     846:	2200      	movs	r2, #0
     848:	701a      	strb	r2, [r3, #0]
     84a:	e017      	b.n	87c <tc_enable_events+0x80>
		if (events->generate_event_on_compare_channel[i] == true) {
     84c:	2313      	movs	r3, #19
     84e:	18fb      	adds	r3, r7, r3
     850:	781b      	ldrb	r3, [r3, #0]
     852:	683a      	ldr	r2, [r7, #0]
     854:	5cd3      	ldrb	r3, [r2, r3]
     856:	2b00      	cmp	r3, #0
     858:	d009      	beq.n	86e <tc_enable_events+0x72>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
     85a:	2313      	movs	r3, #19
     85c:	18fb      	adds	r3, r7, r3
     85e:	781b      	ldrb	r3, [r3, #0]
     860:	2280      	movs	r2, #128	; 0x80
     862:	0152      	lsls	r2, r2, #5
     864:	409a      	lsls	r2, r3
     866:	0013      	movs	r3, r2
     868:	697a      	ldr	r2, [r7, #20]
     86a:	4313      	orrs	r3, r2
     86c:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
     86e:	2313      	movs	r3, #19
     870:	18fb      	adds	r3, r7, r3
     872:	781a      	ldrb	r2, [r3, #0]
     874:	2313      	movs	r3, #19
     876:	18fb      	adds	r3, r7, r3
     878:	3201      	adds	r2, #1
     87a:	701a      	strb	r2, [r3, #0]
     87c:	2313      	movs	r3, #19
     87e:	18fb      	adds	r3, r7, r3
     880:	781b      	ldrb	r3, [r3, #0]
     882:	2b01      	cmp	r3, #1
     884:	d9e2      	bls.n	84c <tc_enable_events+0x50>
		}
	}

	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
     886:	68fb      	ldr	r3, [r7, #12]
     888:	895b      	ldrh	r3, [r3, #10]
     88a:	b29a      	uxth	r2, r3
     88c:	683b      	ldr	r3, [r7, #0]
     88e:	795b      	ldrb	r3, [r3, #5]
     890:	b299      	uxth	r1, r3
     892:	697b      	ldr	r3, [r7, #20]
     894:	b29b      	uxth	r3, r3
     896:	430b      	orrs	r3, r1
     898:	b29b      	uxth	r3, r3
     89a:	4313      	orrs	r3, r2
     89c:	b29a      	uxth	r2, r3
     89e:	68fb      	ldr	r3, [r7, #12]
     8a0:	815a      	strh	r2, [r3, #10]
}
     8a2:	46c0      	nop			; (mov r8, r8)
     8a4:	46bd      	mov	sp, r7
     8a6:	b006      	add	sp, #24
     8a8:	bd80      	pop	{r7, pc}
	...

000008ac <tc_enable>:
 *
 * \param[in]  module_inst   Pointer to the software module instance struct
 */
static inline void tc_enable(
		const struct tc_module *const module_inst)
{
     8ac:	b580      	push	{r7, lr}
     8ae:	b084      	sub	sp, #16
     8b0:	af00      	add	r7, sp, #0
     8b2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	681b      	ldr	r3, [r3, #0]
     8b8:	60fb      	str	r3, [r7, #12]

	while (tc_is_syncing(module_inst)) {
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	687b      	ldr	r3, [r7, #4]
     8be:	0018      	movs	r0, r3
     8c0:	4b08      	ldr	r3, [pc, #32]	; (8e4 <tc_enable+0x38>)
     8c2:	447b      	add	r3, pc
     8c4:	4798      	blx	r3
     8c6:	1e03      	subs	r3, r0, #0
     8c8:	d1f8      	bne.n	8bc <tc_enable+0x10>
		/* Wait for sync */
	}

	/* Enable TC module */
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
     8ca:	68fb      	ldr	r3, [r7, #12]
     8cc:	881b      	ldrh	r3, [r3, #0]
     8ce:	b29b      	uxth	r3, r3
     8d0:	2202      	movs	r2, #2
     8d2:	4313      	orrs	r3, r2
     8d4:	b29a      	uxth	r2, r3
     8d6:	68fb      	ldr	r3, [r7, #12]
     8d8:	801a      	strh	r2, [r3, #0]
}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	46bd      	mov	sp, r7
     8de:	b004      	add	sp, #16
     8e0:	bd80      	pop	{r7, pc}
     8e2:	46c0      	nop			; (mov r8, r8)
     8e4:	fffffe87 	.word	0xfffffe87

000008e8 <_tc_interrupt_get_interrupt_vector>:
 *
 * \return Interrupt vector for of the given TC module instance.
 */
static enum system_interrupt_vector _tc_interrupt_get_interrupt_vector(
		uint32_t inst_num)
{
     8e8:	b580      	push	{r7, lr}
     8ea:	b082      	sub	sp, #8
     8ec:	af00      	add	r7, sp, #0
     8ee:	6078      	str	r0, [r7, #4]
#else
			MRECURSION(TC_INST_NUM, _TC_INTERRUPT_VECT_NUM, TC_INST_MAX_ID)
#endif
		};

	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
     8f0:	4a04      	ldr	r2, [pc, #16]	; (904 <_tc_interrupt_get_interrupt_vector+0x1c>)
     8f2:	447a      	add	r2, pc
     8f4:	687b      	ldr	r3, [r7, #4]
     8f6:	18d3      	adds	r3, r2, r3
     8f8:	781b      	ldrb	r3, [r3, #0]
     8fa:	b25b      	sxtb	r3, r3
}
     8fc:	0018      	movs	r0, r3
     8fe:	46bd      	mov	sp, r7
     900:	b002      	add	sp, #8
     902:	bd80      	pop	{r7, pc}
     904:	1ffff70a 	.word	0x1ffff70a

00000908 <tc_enable_callback>:
 * \param[in]     callback_type Callback type given by an enum
 */
static inline void tc_enable_callback(
		struct tc_module *const module,
		const enum tc_callback callback_type)
{
     908:	b580      	push	{r7, lr}
     90a:	b082      	sub	sp, #8
     90c:	af00      	add	r7, sp, #0
     90e:	6078      	str	r0, [r7, #4]
     910:	000a      	movs	r2, r1
     912:	1cfb      	adds	r3, r7, #3
     914:	701a      	strb	r2, [r3, #0]
     916:	4a26      	ldr	r2, [pc, #152]	; (9b0 <tc_enable_callback+0xa8>)
     918:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);


	/* Enable interrupts for this TC module */
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
     91a:	687b      	ldr	r3, [r7, #4]
     91c:	681b      	ldr	r3, [r3, #0]
     91e:	0018      	movs	r0, r3
     920:	4b24      	ldr	r3, [pc, #144]	; (9b4 <tc_enable_callback+0xac>)
     922:	58d3      	ldr	r3, [r2, r3]
     924:	4798      	blx	r3
     926:	0003      	movs	r3, r0
     928:	0018      	movs	r0, r3
     92a:	4b23      	ldr	r3, [pc, #140]	; (9b8 <tc_enable_callback+0xb0>)
     92c:	447b      	add	r3, pc
     92e:	4798      	blx	r3
     930:	0003      	movs	r3, r0
     932:	0018      	movs	r0, r3
     934:	4b21      	ldr	r3, [pc, #132]	; (9bc <tc_enable_callback+0xb4>)
     936:	447b      	add	r3, pc
     938:	4798      	blx	r3

	/* Enable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
     93a:	1cfb      	adds	r3, r7, #3
     93c:	781b      	ldrb	r3, [r3, #0]
     93e:	2b02      	cmp	r3, #2
     940:	d10b      	bne.n	95a <tc_enable_callback+0x52>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
     942:	687b      	ldr	r3, [r7, #4]
     944:	7e5b      	ldrb	r3, [r3, #25]
     946:	2210      	movs	r2, #16
     948:	4313      	orrs	r3, r2
     94a:	b2da      	uxtb	r2, r3
     94c:	687b      	ldr	r3, [r7, #4]
     94e:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
     950:	687b      	ldr	r3, [r7, #4]
     952:	681b      	ldr	r3, [r3, #0]
     954:	2210      	movs	r2, #16
     956:	735a      	strb	r2, [r3, #13]
	}
	else {
		module->enable_callback_mask |= (1 << callback_type);
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
	}
}
     958:	e026      	b.n	9a8 <tc_enable_callback+0xa0>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
     95a:	1cfb      	adds	r3, r7, #3
     95c:	781b      	ldrb	r3, [r3, #0]
     95e:	2b03      	cmp	r3, #3
     960:	d10b      	bne.n	97a <tc_enable_callback+0x72>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
     962:	687b      	ldr	r3, [r7, #4]
     964:	7e5b      	ldrb	r3, [r3, #25]
     966:	2220      	movs	r2, #32
     968:	4313      	orrs	r3, r2
     96a:	b2da      	uxtb	r2, r3
     96c:	687b      	ldr	r3, [r7, #4]
     96e:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
     970:	687b      	ldr	r3, [r7, #4]
     972:	681b      	ldr	r3, [r3, #0]
     974:	2220      	movs	r2, #32
     976:	735a      	strb	r2, [r3, #13]
}
     978:	e016      	b.n	9a8 <tc_enable_callback+0xa0>
		module->enable_callback_mask |= (1 << callback_type);
     97a:	687b      	ldr	r3, [r7, #4]
     97c:	7e5b      	ldrb	r3, [r3, #25]
     97e:	b25a      	sxtb	r2, r3
     980:	1cfb      	adds	r3, r7, #3
     982:	781b      	ldrb	r3, [r3, #0]
     984:	2101      	movs	r1, #1
     986:	4099      	lsls	r1, r3
     988:	000b      	movs	r3, r1
     98a:	b25b      	sxtb	r3, r3
     98c:	4313      	orrs	r3, r2
     98e:	b25b      	sxtb	r3, r3
     990:	b2da      	uxtb	r2, r3
     992:	687b      	ldr	r3, [r7, #4]
     994:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
     996:	687b      	ldr	r3, [r7, #4]
     998:	681b      	ldr	r3, [r3, #0]
     99a:	1cfa      	adds	r2, r7, #3
     99c:	7812      	ldrb	r2, [r2, #0]
     99e:	2101      	movs	r1, #1
     9a0:	4091      	lsls	r1, r2
     9a2:	000a      	movs	r2, r1
     9a4:	b2d2      	uxtb	r2, r2
     9a6:	735a      	strb	r2, [r3, #13]
}
     9a8:	46c0      	nop			; (mov r8, r8)
     9aa:	46bd      	mov	sp, r7
     9ac:	b002      	add	sp, #8
     9ae:	bd80      	pop	{r7, pc}
     9b0:	0000eb18 	.word	0x0000eb18
     9b4:	0000013c 	.word	0x0000013c
     9b8:	ffffffb9 	.word	0xffffffb9
     9bc:	fffffcdb 	.word	0xfffffcdb

000009c0 <fifo_init>:
	int32_t data[FIFO_LENGTH][2];
	int first;
	int last;
	int count;
};
void fifo_init(struct FifoBuffer* bf) {
     9c0:	b580      	push	{r7, lr}
     9c2:	b082      	sub	sp, #8
     9c4:	af00      	add	r7, sp, #0
     9c6:	6078      	str	r0, [r7, #4]
	bf->first = 0;
     9c8:	687a      	ldr	r2, [r7, #4]
     9ca:	2380      	movs	r3, #128	; 0x80
     9cc:	019b      	lsls	r3, r3, #6
     9ce:	2100      	movs	r1, #0
     9d0:	50d1      	str	r1, [r2, r3]
	bf->last = FIFO_LENGTH-1;
     9d2:	687b      	ldr	r3, [r7, #4]
     9d4:	4a05      	ldr	r2, [pc, #20]	; (9ec <fifo_init+0x2c>)
     9d6:	4906      	ldr	r1, [pc, #24]	; (9f0 <fifo_init+0x30>)
     9d8:	5099      	str	r1, [r3, r2]
	bf->count = 0;
     9da:	687b      	ldr	r3, [r7, #4]
     9dc:	4a05      	ldr	r2, [pc, #20]	; (9f4 <fifo_init+0x34>)
     9de:	2100      	movs	r1, #0
     9e0:	5099      	str	r1, [r3, r2]
}
     9e2:	46c0      	nop			; (mov r8, r8)
     9e4:	46bd      	mov	sp, r7
     9e6:	b002      	add	sp, #8
     9e8:	bd80      	pop	{r7, pc}
     9ea:	46c0      	nop			; (mov r8, r8)
     9ec:	00002004 	.word	0x00002004
     9f0:	000003ff 	.word	0x000003ff
     9f4:	00002008 	.word	0x00002008

000009f8 <fifo_isFull>:
	return bf->count;
}
bool fifo_isEmpty(struct FifoBuffer* bf) {
	return (bf->count <= 0);	
}
bool fifo_isFull(struct FifoBuffer* bf) {
     9f8:	b580      	push	{r7, lr}
     9fa:	b082      	sub	sp, #8
     9fc:	af00      	add	r7, sp, #0
     9fe:	6078      	str	r0, [r7, #4]
	return (bf->count >= FIFO_LENGTH);
     a00:	687b      	ldr	r3, [r7, #4]
     a02:	4a07      	ldr	r2, [pc, #28]	; (a20 <fifo_isFull+0x28>)
     a04:	589b      	ldr	r3, [r3, r2]
     a06:	2201      	movs	r2, #1
     a08:	1c11      	adds	r1, r2, #0
     a0a:	4a06      	ldr	r2, [pc, #24]	; (a24 <fifo_isFull+0x2c>)
     a0c:	4293      	cmp	r3, r2
     a0e:	dc01      	bgt.n	a14 <fifo_isFull+0x1c>
     a10:	2300      	movs	r3, #0
     a12:	1c19      	adds	r1, r3, #0
     a14:	b2cb      	uxtb	r3, r1
}
     a16:	0018      	movs	r0, r3
     a18:	46bd      	mov	sp, r7
     a1a:	b002      	add	sp, #8
     a1c:	bd80      	pop	{r7, pc}
     a1e:	46c0      	nop			; (mov r8, r8)
     a20:	00002008 	.word	0x00002008
     a24:	000003ff 	.word	0x000003ff

00000a28 <fifo_push>:
bool fifo_push(struct FifoBuffer* bf, int32_t s1, int32_t s2) {
     a28:	b580      	push	{r7, lr}
     a2a:	b084      	sub	sp, #16
     a2c:	af00      	add	r7, sp, #0
     a2e:	60f8      	str	r0, [r7, #12]
     a30:	60b9      	str	r1, [r7, #8]
     a32:	607a      	str	r2, [r7, #4]
     a34:	4a1a      	ldr	r2, [pc, #104]	; (aa0 <fifo_push+0x78>)
     a36:	447a      	add	r2, pc
	if (fifo_isFull(bf)) return false;
     a38:	68fb      	ldr	r3, [r7, #12]
     a3a:	0018      	movs	r0, r3
     a3c:	4b19      	ldr	r3, [pc, #100]	; (aa4 <fifo_push+0x7c>)
     a3e:	58d3      	ldr	r3, [r2, r3]
     a40:	4798      	blx	r3
     a42:	1e03      	subs	r3, r0, #0
     a44:	d001      	beq.n	a4a <fifo_push+0x22>
     a46:	2300      	movs	r3, #0
     a48:	e026      	b.n	a98 <fifo_push+0x70>
	bf->last = (bf->last + 1) % FIFO_LENGTH;
     a4a:	68fb      	ldr	r3, [r7, #12]
     a4c:	4a16      	ldr	r2, [pc, #88]	; (aa8 <fifo_push+0x80>)
     a4e:	589b      	ldr	r3, [r3, r2]
     a50:	3301      	adds	r3, #1
     a52:	4a16      	ldr	r2, [pc, #88]	; (aac <fifo_push+0x84>)
     a54:	4013      	ands	r3, r2
     a56:	d503      	bpl.n	a60 <fifo_push+0x38>
     a58:	3b01      	subs	r3, #1
     a5a:	4a15      	ldr	r2, [pc, #84]	; (ab0 <fifo_push+0x88>)
     a5c:	4313      	orrs	r3, r2
     a5e:	3301      	adds	r3, #1
     a60:	0019      	movs	r1, r3
     a62:	68fb      	ldr	r3, [r7, #12]
     a64:	4a10      	ldr	r2, [pc, #64]	; (aa8 <fifo_push+0x80>)
     a66:	5099      	str	r1, [r3, r2]
	bf->data[bf->last][0] = s1;
     a68:	68fb      	ldr	r3, [r7, #12]
     a6a:	4a0f      	ldr	r2, [pc, #60]	; (aa8 <fifo_push+0x80>)
     a6c:	589a      	ldr	r2, [r3, r2]
     a6e:	68fb      	ldr	r3, [r7, #12]
     a70:	00d2      	lsls	r2, r2, #3
     a72:	68b9      	ldr	r1, [r7, #8]
     a74:	50d1      	str	r1, [r2, r3]
	bf->data[bf->last][1] = s2;
     a76:	68fb      	ldr	r3, [r7, #12]
     a78:	4a0b      	ldr	r2, [pc, #44]	; (aa8 <fifo_push+0x80>)
     a7a:	589b      	ldr	r3, [r3, r2]
     a7c:	68fa      	ldr	r2, [r7, #12]
     a7e:	00db      	lsls	r3, r3, #3
     a80:	18d3      	adds	r3, r2, r3
     a82:	3304      	adds	r3, #4
     a84:	687a      	ldr	r2, [r7, #4]
     a86:	601a      	str	r2, [r3, #0]
	bf->count = bf->count + 1;
     a88:	68fb      	ldr	r3, [r7, #12]
     a8a:	4a0a      	ldr	r2, [pc, #40]	; (ab4 <fifo_push+0x8c>)
     a8c:	589b      	ldr	r3, [r3, r2]
     a8e:	1c5a      	adds	r2, r3, #1
     a90:	68fb      	ldr	r3, [r7, #12]
     a92:	4908      	ldr	r1, [pc, #32]	; (ab4 <fifo_push+0x8c>)
     a94:	505a      	str	r2, [r3, r1]
	return true;
     a96:	2301      	movs	r3, #1
}
     a98:	0018      	movs	r0, r3
     a9a:	46bd      	mov	sp, r7
     a9c:	b004      	add	sp, #16
     a9e:	bd80      	pop	{r7, pc}
     aa0:	0000e9fa 	.word	0x0000e9fa
     aa4:	00000114 	.word	0x00000114
     aa8:	00002004 	.word	0x00002004
     aac:	800003ff 	.word	0x800003ff
     ab0:	fffffc00 	.word	0xfffffc00
     ab4:	00002008 	.word	0x00002008

00000ab8 <adc_fifo_storeSample>:
	return fifo_pop(&adc_sampleBuffer, s1, s2);
}
bool adc_fifo_peekSample(int offset, int32_t* s1, int32_t* s2) {
	return fifo_peek(&adc_sampleBuffer, offset, s1, s2);
}
bool adc_fifo_storeSample(int32_t s1, int32_t s2) {
     ab8:	b590      	push	{r4, r7, lr}
     aba:	b083      	sub	sp, #12
     abc:	af00      	add	r7, sp, #0
     abe:	6078      	str	r0, [r7, #4]
     ac0:	6039      	str	r1, [r7, #0]
     ac2:	4b08      	ldr	r3, [pc, #32]	; (ae4 <adc_fifo_storeSample+0x2c>)
     ac4:	447b      	add	r3, pc
	return fifo_push(&adc_sampleBuffer, s1, s2);
     ac6:	6838      	ldr	r0, [r7, #0]
     ac8:	6879      	ldr	r1, [r7, #4]
     aca:	4a07      	ldr	r2, [pc, #28]	; (ae8 <adc_fifo_storeSample+0x30>)
     acc:	589a      	ldr	r2, [r3, r2]
     ace:	0014      	movs	r4, r2
     ad0:	0002      	movs	r2, r0
     ad2:	0020      	movs	r0, r4
     ad4:	4c05      	ldr	r4, [pc, #20]	; (aec <adc_fifo_storeSample+0x34>)
     ad6:	591b      	ldr	r3, [r3, r4]
     ad8:	4798      	blx	r3
     ada:	0003      	movs	r3, r0
}
     adc:	0018      	movs	r0, r3
     ade:	46bd      	mov	sp, r7
     ae0:	b003      	add	sp, #12
     ae2:	bd90      	pop	{r4, r7, pc}
     ae4:	0000e96c 	.word	0x0000e96c
     ae8:	000000b8 	.word	0x000000b8
     aec:	00000030 	.word	0x00000030

00000af0 <adc_fifo_init>:
int adc_fifo_getCount() {
	return fifo_numItems(&adc_sampleBuffer);
}
void adc_fifo_init() {
     af0:	b580      	push	{r7, lr}
     af2:	af00      	add	r7, sp, #0
     af4:	4b05      	ldr	r3, [pc, #20]	; (b0c <adc_fifo_init+0x1c>)
     af6:	447b      	add	r3, pc
	fifo_init(&adc_sampleBuffer);
     af8:	4a05      	ldr	r2, [pc, #20]	; (b10 <adc_fifo_init+0x20>)
     afa:	589a      	ldr	r2, [r3, r2]
     afc:	0010      	movs	r0, r2
     afe:	4a05      	ldr	r2, [pc, #20]	; (b14 <adc_fifo_init+0x24>)
     b00:	589b      	ldr	r3, [r3, r2]
     b02:	4798      	blx	r3
}
     b04:	46c0      	nop			; (mov r8, r8)
     b06:	46bd      	mov	sp, r7
     b08:	bd80      	pop	{r7, pc}
     b0a:	46c0      	nop			; (mov r8, r8)
     b0c:	0000e93a 	.word	0x0000e93a
     b10:	000000b8 	.word	0x000000b8
     b14:	000000e4 	.word	0x000000e4

00000b18 <adc_gclk_config>:
int  adc_synchronous_stop();
void adc_transfer_start_callback(struct tc_module* module);
void adc_transfer_complete_callback(struct dma_resource* resource);

// Setup GCLK generator for ADC master clock to frequency
void adc_gclk_config(int hz) {
     b18:	b590      	push	{r4, r7, lr}
     b1a:	b089      	sub	sp, #36	; 0x24
     b1c:	af00      	add	r7, sp, #0
     b1e:	6078      	str	r0, [r7, #4]
     b20:	4c19      	ldr	r4, [pc, #100]	; (b88 <adc_gclk_config+0x70>)
     b22:	447c      	add	r4, pc
	int main_clock = system_gclk_gen_get_hz(GCLK_GENERATOR_0);
     b24:	2000      	movs	r0, #0
     b26:	4b19      	ldr	r3, [pc, #100]	; (b8c <adc_gclk_config+0x74>)
     b28:	58e3      	ldr	r3, [r4, r3]
     b2a:	4798      	blx	r3
     b2c:	0003      	movs	r3, r0
     b2e:	61fb      	str	r3, [r7, #28]
	int divider = main_clock / hz;
     b30:	4b17      	ldr	r3, [pc, #92]	; (b90 <adc_gclk_config+0x78>)
     b32:	58e3      	ldr	r3, [r4, r3]
     b34:	6879      	ldr	r1, [r7, #4]
     b36:	69f8      	ldr	r0, [r7, #28]
     b38:	4798      	blx	r3
     b3a:	0003      	movs	r3, r0
     b3c:	61bb      	str	r3, [r7, #24]
	struct system_gclk_gen_config gclk_conf;
	system_gclk_gen_get_config_defaults(&gclk_conf);
     b3e:	230c      	movs	r3, #12
     b40:	18fb      	adds	r3, r7, r3
     b42:	0018      	movs	r0, r3
     b44:	4b13      	ldr	r3, [pc, #76]	; (b94 <adc_gclk_config+0x7c>)
     b46:	447b      	add	r3, pc
     b48:	4798      	blx	r3
	gclk_conf.source_clock    = SYSTEM_CLOCK_SOURCE_DFLL;
     b4a:	230c      	movs	r3, #12
     b4c:	18fb      	adds	r3, r7, r3
     b4e:	2207      	movs	r2, #7
     b50:	701a      	strb	r2, [r3, #0]
	gclk_conf.division_factor = divider;
     b52:	69ba      	ldr	r2, [r7, #24]
     b54:	230c      	movs	r3, #12
     b56:	18fb      	adds	r3, r7, r3
     b58:	605a      	str	r2, [r3, #4]
	gclk_conf.run_in_standby  = false;
     b5a:	230c      	movs	r3, #12
     b5c:	18fb      	adds	r3, r7, r3
     b5e:	2200      	movs	r2, #0
     b60:	721a      	strb	r2, [r3, #8]
	gclk_conf.output_enable   = true;
     b62:	230c      	movs	r3, #12
     b64:	18fb      	adds	r3, r7, r3
     b66:	2201      	movs	r2, #1
     b68:	725a      	strb	r2, [r3, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_4, &gclk_conf);
     b6a:	230c      	movs	r3, #12
     b6c:	18fb      	adds	r3, r7, r3
     b6e:	0019      	movs	r1, r3
     b70:	2004      	movs	r0, #4
     b72:	4b09      	ldr	r3, [pc, #36]	; (b98 <adc_gclk_config+0x80>)
     b74:	58e3      	ldr	r3, [r4, r3]
     b76:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_4);
     b78:	2004      	movs	r0, #4
     b7a:	4b08      	ldr	r3, [pc, #32]	; (b9c <adc_gclk_config+0x84>)
     b7c:	58e3      	ldr	r3, [r4, r3]
     b7e:	4798      	blx	r3
}
     b80:	46c0      	nop			; (mov r8, r8)
     b82:	46bd      	mov	sp, r7
     b84:	b009      	add	sp, #36	; 0x24
     b86:	bd90      	pop	{r4, r7, pc}
     b88:	0000e90e 	.word	0x0000e90e
     b8c:	0000010c 	.word	0x0000010c
     b90:	00000194 	.word	0x00000194
     b94:	fffff911 	.word	0xfffff911
     b98:	00000120 	.word	0x00000120
     b9c:	000001f0 	.word	0x000001f0

00000ba0 <adc_gclk_output_start>:

// Enable output of the GCLK4 on the ADC clock pin
void adc_gclk_output_start() {
     ba0:	b590      	push	{r4, r7, lr}
     ba2:	b083      	sub	sp, #12
     ba4:	af00      	add	r7, sp, #0
     ba6:	4c0f      	ldr	r4, [pc, #60]	; (be4 <adc_gclk_output_start+0x44>)
     ba8:	447c      	add	r4, pc
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
     baa:	1d3b      	adds	r3, r7, #4
     bac:	0018      	movs	r0, r3
     bae:	4b0e      	ldr	r3, [pc, #56]	; (be8 <adc_gclk_output_start+0x48>)
     bb0:	447b      	add	r3, pc
     bb2:	4798      	blx	r3
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     bb4:	1d3b      	adds	r3, r7, #4
     bb6:	2201      	movs	r2, #1
     bb8:	705a      	strb	r2, [r3, #1]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     bba:	1d3b      	adds	r3, r7, #4
     bbc:	2200      	movs	r2, #0
     bbe:	709a      	strb	r2, [r3, #2]
	mcfg.mux_position = MUX_PB10H_GCLK_IO4;
     bc0:	1d3b      	adds	r3, r7, #4
     bc2:	2207      	movs	r2, #7
     bc4:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(ADC_GCLK_MCK_PIN, &mcfg);
     bc6:	1d3b      	adds	r3, r7, #4
     bc8:	0019      	movs	r1, r3
     bca:	202a      	movs	r0, #42	; 0x2a
     bcc:	4b07      	ldr	r3, [pc, #28]	; (bec <adc_gclk_output_start+0x4c>)
     bce:	58e3      	ldr	r3, [r4, r3]
     bd0:	4798      	blx	r3
	system_pinmux_pin_set_output_strength(ADC_GCLK_MCK_PIN, SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
     bd2:	2101      	movs	r1, #1
     bd4:	202a      	movs	r0, #42	; 0x2a
     bd6:	4b06      	ldr	r3, [pc, #24]	; (bf0 <adc_gclk_output_start+0x50>)
     bd8:	447b      	add	r3, pc
     bda:	4798      	blx	r3
}
     bdc:	46c0      	nop			; (mov r8, r8)
     bde:	46bd      	mov	sp, r7
     be0:	b003      	add	sp, #12
     be2:	bd90      	pop	{r4, r7, pc}
     be4:	0000e888 	.word	0x0000e888
     be8:	fffff8d5 	.word	0xfffff8d5
     bec:	000002dc 	.word	0x000002dc
     bf0:	fffff935 	.word	0xfffff935

00000bf4 <adc_cs_pin_takeover>:
	mcfg.mux_position = SYSTEM_PINMUX_GPIO;
	system_pinmux_pin_set_config(ADC_GCLK_MCK_PIN, &mcfg);
}

// Take control of CS pin from SPI port, set to level
void adc_cs_pin_takeover(bool level) {
     bf4:	b590      	push	{r4, r7, lr}
     bf6:	b085      	sub	sp, #20
     bf8:	af00      	add	r7, sp, #0
     bfa:	0002      	movs	r2, r0
     bfc:	1dfb      	adds	r3, r7, #7
     bfe:	701a      	strb	r2, [r3, #0]
     c00:	4c15      	ldr	r4, [pc, #84]	; (c58 <adc_cs_pin_takeover+0x64>)
     c02:	447c      	add	r4, pc
	port_pin_set_output_level(ADC_SPI_CS_PIN, level);
     c04:	1dfb      	adds	r3, r7, #7
     c06:	781b      	ldrb	r3, [r3, #0]
     c08:	0019      	movs	r1, r3
     c0a:	2036      	movs	r0, #54	; 0x36
     c0c:	4b13      	ldr	r3, [pc, #76]	; (c5c <adc_cs_pin_takeover+0x68>)
     c0e:	447b      	add	r3, pc
     c10:	4798      	blx	r3
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
     c12:	230c      	movs	r3, #12
     c14:	18fb      	adds	r3, r7, r3
     c16:	0018      	movs	r0, r3
     c18:	4b11      	ldr	r3, [pc, #68]	; (c60 <adc_cs_pin_takeover+0x6c>)
     c1a:	447b      	add	r3, pc
     c1c:	4798      	blx	r3
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     c1e:	230c      	movs	r3, #12
     c20:	18fb      	adds	r3, r7, r3
     c22:	2201      	movs	r2, #1
     c24:	705a      	strb	r2, [r3, #1]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c26:	230c      	movs	r3, #12
     c28:	18fb      	adds	r3, r7, r3
     c2a:	2200      	movs	r2, #0
     c2c:	709a      	strb	r2, [r3, #2]
	mcfg.mux_position = SYSTEM_PINMUX_GPIO;
     c2e:	230c      	movs	r3, #12
     c30:	18fb      	adds	r3, r7, r3
     c32:	2280      	movs	r2, #128	; 0x80
     c34:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
     c36:	230c      	movs	r3, #12
     c38:	18fb      	adds	r3, r7, r3
     c3a:	0019      	movs	r1, r3
     c3c:	2036      	movs	r0, #54	; 0x36
     c3e:	4b09      	ldr	r3, [pc, #36]	; (c64 <adc_cs_pin_takeover+0x70>)
     c40:	58e3      	ldr	r3, [r4, r3]
     c42:	4798      	blx	r3
	system_pinmux_pin_set_output_strength(ADC_SPI_CS_PIN, SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
     c44:	2101      	movs	r1, #1
     c46:	2036      	movs	r0, #54	; 0x36
     c48:	4b07      	ldr	r3, [pc, #28]	; (c68 <adc_cs_pin_takeover+0x74>)
     c4a:	447b      	add	r3, pc
     c4c:	4798      	blx	r3
}
     c4e:	46c0      	nop			; (mov r8, r8)
     c50:	46bd      	mov	sp, r7
     c52:	b005      	add	sp, #20
     c54:	bd90      	pop	{r4, r7, pc}
     c56:	46c0      	nop			; (mov r8, r8)
     c58:	0000e82e 	.word	0x0000e82e
     c5c:	fffff9af 	.word	0xfffff9af
     c60:	fffff86b 	.word	0xfffff86b
     c64:	000002dc 	.word	0x000002dc
     c68:	fffff8c3 	.word	0xfffff8c3

00000c6c <adc_cs_pin_release>:

// Give control of CS pin back to SPI port, set to level
void adc_cs_pin_release(bool level) {
     c6c:	b590      	push	{r4, r7, lr}
     c6e:	b085      	sub	sp, #20
     c70:	af00      	add	r7, sp, #0
     c72:	0002      	movs	r2, r0
     c74:	1dfb      	adds	r3, r7, #7
     c76:	701a      	strb	r2, [r3, #0]
     c78:	4c12      	ldr	r4, [pc, #72]	; (cc4 <adc_cs_pin_release+0x58>)
     c7a:	447c      	add	r4, pc
	port_pin_set_output_level(ADC_SPI_CS_PIN, level);
     c7c:	1dfb      	adds	r3, r7, #7
     c7e:	781b      	ldrb	r3, [r3, #0]
     c80:	0019      	movs	r1, r3
     c82:	2036      	movs	r0, #54	; 0x36
     c84:	4b10      	ldr	r3, [pc, #64]	; (cc8 <adc_cs_pin_release+0x5c>)
     c86:	447b      	add	r3, pc
     c88:	4798      	blx	r3
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
     c8a:	230c      	movs	r3, #12
     c8c:	18fb      	adds	r3, r7, r3
     c8e:	0018      	movs	r0, r3
     c90:	4b0e      	ldr	r3, [pc, #56]	; (ccc <adc_cs_pin_release+0x60>)
     c92:	447b      	add	r3, pc
     c94:	4798      	blx	r3
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
     c96:	230c      	movs	r3, #12
     c98:	18fb      	adds	r3, r7, r3
     c9a:	2201      	movs	r2, #1
     c9c:	705a      	strb	r2, [r3, #1]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     c9e:	230c      	movs	r3, #12
     ca0:	18fb      	adds	r3, r7, r3
     ca2:	2200      	movs	r2, #0
     ca4:	709a      	strb	r2, [r3, #2]
	mcfg.mux_position = MUX_PB22D_SERCOM5_PAD2;
     ca6:	230c      	movs	r3, #12
     ca8:	18fb      	adds	r3, r7, r3
     caa:	2203      	movs	r2, #3
     cac:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
     cae:	230c      	movs	r3, #12
     cb0:	18fb      	adds	r3, r7, r3
     cb2:	0019      	movs	r1, r3
     cb4:	2036      	movs	r0, #54	; 0x36
     cb6:	4b06      	ldr	r3, [pc, #24]	; (cd0 <adc_cs_pin_release+0x64>)
     cb8:	58e3      	ldr	r3, [r4, r3]
     cba:	4798      	blx	r3
}
     cbc:	46c0      	nop			; (mov r8, r8)
     cbe:	46bd      	mov	sp, r7
     cc0:	b005      	add	sp, #20
     cc2:	bd90      	pop	{r4, r7, pc}
     cc4:	0000e7b6 	.word	0x0000e7b6
     cc8:	fffff937 	.word	0xfffff937
     ccc:	fffff7f3 	.word	0xfffff7f3
     cd0:	000002dc 	.word	0x000002dc

00000cd4 <adc_spi_config>:

// ADC SPI port
int adc_spi_config(int baud) {
     cd4:	b590      	push	{r4, r7, lr}
     cd6:	b093      	sub	sp, #76	; 0x4c
     cd8:	af00      	add	r7, sp, #0
     cda:	6078      	str	r0, [r7, #4]
     cdc:	4c22      	ldr	r4, [pc, #136]	; (d68 <adc_spi_config+0x94>)
     cde:	447c      	add	r4, pc
	int r = 0;
     ce0:	2300      	movs	r3, #0
     ce2:	647b      	str	r3, [r7, #68]	; 0x44
	struct spi_config adc_cfg;
	spi_get_config_defaults(&adc_cfg);
     ce4:	230c      	movs	r3, #12
     ce6:	18fb      	adds	r3, r7, r3
     ce8:	0018      	movs	r0, r3
     cea:	4b20      	ldr	r3, [pc, #128]	; (d6c <adc_spi_config+0x98>)
     cec:	447b      	add	r3, pc
     cee:	4798      	blx	r3
	adc_cfg.transfer_mode = SPI_TRANSFER_MODE_1;
     cf0:	230c      	movs	r3, #12
     cf2:	18fb      	adds	r3, r7, r3
     cf4:	2280      	movs	r2, #128	; 0x80
     cf6:	0552      	lsls	r2, r2, #21
     cf8:	609a      	str	r2, [r3, #8]
	adc_cfg.master_slave_select_enable = 1;
     cfa:	230c      	movs	r3, #12
     cfc:	18fb      	adds	r3, r7, r3
     cfe:	2201      	movs	r2, #1
     d00:	751a      	strb	r2, [r3, #20]
	adc_cfg.mode_specific.master.baudrate = baud;
     d02:	687a      	ldr	r2, [r7, #4]
     d04:	230c      	movs	r3, #12
     d06:	18fb      	adds	r3, r7, r3
     d08:	619a      	str	r2, [r3, #24]
	adc_cfg.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
     d0a:	230c      	movs	r3, #12
     d0c:	18fb      	adds	r3, r7, r3
     d0e:	2280      	movs	r2, #128	; 0x80
     d10:	0292      	lsls	r2, r2, #10
     d12:	60da      	str	r2, [r3, #12]
	adc_cfg.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;	// MISO
     d14:	230c      	movs	r3, #12
     d16:	18fb      	adds	r3, r7, r3
     d18:	4a15      	ldr	r2, [pc, #84]	; (d70 <adc_spi_config+0x9c>)
     d1a:	629a      	str	r2, [r3, #40]	; 0x28
	adc_cfg.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;	// SCK
     d1c:	230c      	movs	r3, #12
     d1e:	18fb      	adds	r3, r7, r3
     d20:	4a14      	ldr	r2, [pc, #80]	; (d74 <adc_spi_config+0xa0>)
     d22:	62da      	str	r2, [r3, #44]	; 0x2c
	adc_cfg.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// nCS
     d24:	230c      	movs	r3, #12
     d26:	18fb      	adds	r3, r7, r3
     d28:	4a13      	ldr	r2, [pc, #76]	; (d78 <adc_spi_config+0xa4>)
     d2a:	631a      	str	r2, [r3, #48]	; 0x30
	adc_cfg.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;	// MOSI
     d2c:	230c      	movs	r3, #12
     d2e:	18fb      	adds	r3, r7, r3
     d30:	4a12      	ldr	r2, [pc, #72]	; (d7c <adc_spi_config+0xa8>)
     d32:	635a      	str	r2, [r3, #52]	; 0x34
	r |= spi_init(&adc_spi, SERCOM5, &adc_cfg);
     d34:	230c      	movs	r3, #12
     d36:	18fa      	adds	r2, r7, r3
     d38:	4911      	ldr	r1, [pc, #68]	; (d80 <adc_spi_config+0xac>)
     d3a:	4b12      	ldr	r3, [pc, #72]	; (d84 <adc_spi_config+0xb0>)
     d3c:	58e3      	ldr	r3, [r4, r3]
     d3e:	0018      	movs	r0, r3
     d40:	4b11      	ldr	r3, [pc, #68]	; (d88 <adc_spi_config+0xb4>)
     d42:	58e3      	ldr	r3, [r4, r3]
     d44:	4798      	blx	r3
     d46:	0003      	movs	r3, r0
     d48:	001a      	movs	r2, r3
     d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
     d4c:	4313      	orrs	r3, r2
     d4e:	647b      	str	r3, [r7, #68]	; 0x44
	spi_enable(&adc_spi);
     d50:	4b0c      	ldr	r3, [pc, #48]	; (d84 <adc_spi_config+0xb0>)
     d52:	58e3      	ldr	r3, [r4, r3]
     d54:	0018      	movs	r0, r3
     d56:	4b0d      	ldr	r3, [pc, #52]	; (d8c <adc_spi_config+0xb8>)
     d58:	447b      	add	r3, pc
     d5a:	4798      	blx	r3
	return r;
     d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     d5e:	0018      	movs	r0, r3
     d60:	46bd      	mov	sp, r7
     d62:	b013      	add	sp, #76	; 0x4c
     d64:	bd90      	pop	{r4, r7, pc}
     d66:	46c0      	nop			; (mov r8, r8)
     d68:	0000e752 	.word	0x0000e752
     d6c:	fffff971 	.word	0xfffff971
     d70:	00220003 	.word	0x00220003
     d74:	00230003 	.word	0x00230003
     d78:	00360003 	.word	0x00360003
     d7c:	00370003 	.word	0x00370003
     d80:	42001c00 	.word	0x42001c00
     d84:	00000240 	.word	0x00000240
     d88:	000000dc 	.word	0x000000dc
     d8c:	fffff995 	.word	0xfffff995

00000d90 <adc_timer_config>:
	tc_set_compare_value(&clock_tc, TC_COMPARE_CAPTURE_CHANNEL_0, pulses);
	tc_set_compare_value(&clock_tc, TC_COMPARE_CAPTURE_CHANNEL_0, pulses - pretrigger);
}

// ADC timer and event system config to count GCLK pulses and route event to DMA
int adc_timer_config(int pulses, int pretrigger) {
     d90:	b590      	push	{r4, r7, lr}
     d92:	b095      	sub	sp, #84	; 0x54
     d94:	af00      	add	r7, sp, #0
     d96:	6078      	str	r0, [r7, #4]
     d98:	6039      	str	r1, [r7, #0]
     d9a:	4c52      	ldr	r4, [pc, #328]	; (ee4 <adc_timer_config+0x154>)
     d9c:	447c      	add	r4, pc
	int r = 0;
     d9e:	2300      	movs	r3, #0
     da0:	64fb      	str	r3, [r7, #76]	; 0x4c

	// Timer setup
	struct tc_config tcfg;
	tc_get_config_defaults(&tcfg);
     da2:	2318      	movs	r3, #24
     da4:	18fb      	adds	r3, r7, r3
     da6:	0018      	movs	r0, r3
     da8:	4b4f      	ldr	r3, [pc, #316]	; (ee8 <adc_timer_config+0x158>)
     daa:	447b      	add	r3, pc
     dac:	4798      	blx	r3
	tcfg.clock_source = GCLK_GENERATOR_4;
     dae:	2318      	movs	r3, #24
     db0:	18fb      	adds	r3, r7, r3
     db2:	2204      	movs	r2, #4
     db4:	701a      	strb	r2, [r3, #0]
	tcfg.counter_size = TC_COUNTER_SIZE_16BIT;
     db6:	2318      	movs	r3, #24
     db8:	18fb      	adds	r3, r7, r3
     dba:	2200      	movs	r2, #0
     dbc:	709a      	strb	r2, [r3, #2]
	tcfg.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
     dbe:	2318      	movs	r3, #24
     dc0:	18fb      	adds	r3, r7, r3
     dc2:	2220      	movs	r2, #32
     dc4:	719a      	strb	r2, [r3, #6]
	tcfg.counter_16_bit.value = 0;
     dc6:	2318      	movs	r3, #24
     dc8:	18fb      	adds	r3, r7, r3
     dca:	2200      	movs	r2, #0
     dcc:	851a      	strh	r2, [r3, #40]	; 0x28
	tcfg.counter_16_bit.compare_capture_channel[0] = pulses;
     dce:	687b      	ldr	r3, [r7, #4]
     dd0:	b29a      	uxth	r2, r3
     dd2:	2318      	movs	r3, #24
     dd4:	18fb      	adds	r3, r7, r3
     dd6:	855a      	strh	r2, [r3, #42]	; 0x2a
	tcfg.counter_16_bit.compare_capture_channel[1] = pulses - pretrigger;
     dd8:	687b      	ldr	r3, [r7, #4]
     dda:	b29a      	uxth	r2, r3
     ddc:	683b      	ldr	r3, [r7, #0]
     dde:	b29b      	uxth	r3, r3
     de0:	1ad3      	subs	r3, r2, r3
     de2:	b29a      	uxth	r2, r3
     de4:	2318      	movs	r3, #24
     de6:	18fb      	adds	r3, r7, r3
     de8:	859a      	strh	r2, [r3, #44]	; 0x2c
	r |= tc_init(&clock_tc, TC3, &tcfg);
     dea:	2318      	movs	r3, #24
     dec:	18fa      	adds	r2, r7, r3
     dee:	493f      	ldr	r1, [pc, #252]	; (eec <adc_timer_config+0x15c>)
     df0:	4b3f      	ldr	r3, [pc, #252]	; (ef0 <adc_timer_config+0x160>)
     df2:	58e3      	ldr	r3, [r4, r3]
     df4:	0018      	movs	r0, r3
     df6:	4b3f      	ldr	r3, [pc, #252]	; (ef4 <adc_timer_config+0x164>)
     df8:	58e3      	ldr	r3, [r4, r3]
     dfa:	4798      	blx	r3
     dfc:	0003      	movs	r3, r0
     dfe:	001a      	movs	r2, r3
     e00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e02:	4313      	orrs	r3, r2
     e04:	64fb      	str	r3, [r7, #76]	; 0x4c
	r |= tc_register_callback(&clock_tc, adc_transfer_start_callback, TC_CALLBACK_CC_CHANNEL1);
     e06:	4b3c      	ldr	r3, [pc, #240]	; (ef8 <adc_timer_config+0x168>)
     e08:	58e3      	ldr	r3, [r4, r3]
     e0a:	0019      	movs	r1, r3
     e0c:	4b38      	ldr	r3, [pc, #224]	; (ef0 <adc_timer_config+0x160>)
     e0e:	58e3      	ldr	r3, [r4, r3]
     e10:	2203      	movs	r2, #3
     e12:	0018      	movs	r0, r3
     e14:	4b39      	ldr	r3, [pc, #228]	; (efc <adc_timer_config+0x16c>)
     e16:	58e3      	ldr	r3, [r4, r3]
     e18:	4798      	blx	r3
     e1a:	0003      	movs	r3, r0
     e1c:	001a      	movs	r2, r3
     e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e20:	4313      	orrs	r3, r2
     e22:	64fb      	str	r3, [r7, #76]	; 0x4c
	tc_enable_callback(&clock_tc, TC_CALLBACK_CC_CHANNEL1);
     e24:	4b32      	ldr	r3, [pc, #200]	; (ef0 <adc_timer_config+0x160>)
     e26:	58e3      	ldr	r3, [r4, r3]
     e28:	2103      	movs	r1, #3
     e2a:	0018      	movs	r0, r3
     e2c:	4b34      	ldr	r3, [pc, #208]	; (f00 <adc_timer_config+0x170>)
     e2e:	447b      	add	r3, pc
     e30:	4798      	blx	r3
	r |= system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_TC3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
     e32:	2100      	movs	r1, #0
     e34:	2012      	movs	r0, #18
     e36:	4b33      	ldr	r3, [pc, #204]	; (f04 <adc_timer_config+0x174>)
     e38:	58e3      	ldr	r3, [r4, r3]
     e3a:	4798      	blx	r3
     e3c:	0003      	movs	r3, r0
     e3e:	001a      	movs	r2, r3
     e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     e42:	4313      	orrs	r3, r2
     e44:	64fb      	str	r3, [r7, #76]	; 0x4c

	// Make event on compare
	struct tc_events tev;
	tev.event_action = TC_EVENT_ACTION_OFF;
     e46:	2310      	movs	r3, #16
     e48:	18fb      	adds	r3, r7, r3
     e4a:	2200      	movs	r2, #0
     e4c:	715a      	strb	r2, [r3, #5]
	tev.on_event_perform_action = 0;
     e4e:	2310      	movs	r3, #16
     e50:	18fb      	adds	r3, r7, r3
     e52:	2200      	movs	r2, #0
     e54:	70da      	strb	r2, [r3, #3]
	tev.invert_event_input = 0;
     e56:	2310      	movs	r3, #16
     e58:	18fb      	adds	r3, r7, r3
     e5a:	2200      	movs	r2, #0
     e5c:	711a      	strb	r2, [r3, #4]
	tev.generate_event_on_overflow = 0;
     e5e:	2310      	movs	r3, #16
     e60:	18fb      	adds	r3, r7, r3
     e62:	2200      	movs	r2, #0
     e64:	709a      	strb	r2, [r3, #2]
	tev.generate_event_on_compare_channel[0] = 1;
     e66:	2310      	movs	r3, #16
     e68:	18fb      	adds	r3, r7, r3
     e6a:	2201      	movs	r2, #1
     e6c:	701a      	strb	r2, [r3, #0]
	tev.generate_event_on_compare_channel[1] = 0;
     e6e:	2310      	movs	r3, #16
     e70:	18fb      	adds	r3, r7, r3
     e72:	2200      	movs	r2, #0
     e74:	705a      	strb	r2, [r3, #1]
	tc_enable_events(&clock_tc, &tev);
     e76:	2310      	movs	r3, #16
     e78:	18fa      	adds	r2, r7, r3
     e7a:	4b1d      	ldr	r3, [pc, #116]	; (ef0 <adc_timer_config+0x160>)
     e7c:	58e3      	ldr	r3, [r4, r3]
     e7e:	0011      	movs	r1, r2
     e80:	0018      	movs	r0, r3
     e82:	4b21      	ldr	r3, [pc, #132]	; (f08 <adc_timer_config+0x178>)
     e84:	447b      	add	r3, pc
     e86:	4798      	blx	r3

	// Pipe event to DMA
	struct events_config ecfg;
	events_get_config_defaults(&ecfg);
     e88:	230c      	movs	r3, #12
     e8a:	18fb      	adds	r3, r7, r3
     e8c:	0018      	movs	r0, r3
     e8e:	4b1f      	ldr	r3, [pc, #124]	; (f0c <adc_timer_config+0x17c>)
     e90:	58e3      	ldr	r3, [r4, r3]
     e92:	4798      	blx	r3
	ecfg.generator = EVSYS_ID_GEN_TC3_MCX_0;
     e94:	230c      	movs	r3, #12
     e96:	18fb      	adds	r3, r7, r3
     e98:	2234      	movs	r2, #52	; 0x34
     e9a:	709a      	strb	r2, [r3, #2]
	ecfg.path = EVENTS_PATH_RESYNCHRONIZED;
     e9c:	230c      	movs	r3, #12
     e9e:	18fb      	adds	r3, r7, r3
     ea0:	2201      	movs	r2, #1
     ea2:	705a      	strb	r2, [r3, #1]
	r |= events_allocate(&events, &ecfg);
     ea4:	230c      	movs	r3, #12
     ea6:	18fa      	adds	r2, r7, r3
     ea8:	4b19      	ldr	r3, [pc, #100]	; (f10 <adc_timer_config+0x180>)
     eaa:	58e3      	ldr	r3, [r4, r3]
     eac:	0011      	movs	r1, r2
     eae:	0018      	movs	r0, r3
     eb0:	4b18      	ldr	r3, [pc, #96]	; (f14 <adc_timer_config+0x184>)
     eb2:	58e3      	ldr	r3, [r4, r3]
     eb4:	4798      	blx	r3
     eb6:	0003      	movs	r3, r0
     eb8:	001a      	movs	r2, r3
     eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ebc:	4313      	orrs	r3, r2
     ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
	r |= events_attach_user(&events, EVSYS_ID_USER_DMAC_CH_0);
     ec0:	4b13      	ldr	r3, [pc, #76]	; (f10 <adc_timer_config+0x180>)
     ec2:	58e3      	ldr	r3, [r4, r3]
     ec4:	2100      	movs	r1, #0
     ec6:	0018      	movs	r0, r3
     ec8:	4b13      	ldr	r3, [pc, #76]	; (f18 <adc_timer_config+0x188>)
     eca:	58e3      	ldr	r3, [r4, r3]
     ecc:	4798      	blx	r3
     ece:	0003      	movs	r3, r0
     ed0:	001a      	movs	r2, r3
     ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
     ed4:	4313      	orrs	r3, r2
     ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
	return r;
     ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
     eda:	0018      	movs	r0, r3
     edc:	46bd      	mov	sp, r7
     ede:	b015      	add	sp, #84	; 0x54
     ee0:	bd90      	pop	{r4, r7, pc}
     ee2:	46c0      	nop			; (mov r8, r8)
     ee4:	0000e694 	.word	0x0000e694
     ee8:	fffff9c7 	.word	0xfffff9c7
     eec:	42002c00 	.word	0x42002c00
     ef0:	00000090 	.word	0x00000090
     ef4:	00000320 	.word	0x00000320
     ef8:	00000058 	.word	0x00000058
     efc:	00000170 	.word	0x00000170
     f00:	fffffad7 	.word	0xfffffad7
     f04:	00000204 	.word	0x00000204
     f08:	fffff975 	.word	0xfffff975
     f0c:	0000027c 	.word	0x0000027c
     f10:	00000288 	.word	0x00000288
     f14:	00000084 	.word	0x00000084
     f18:	00000244 	.word	0x00000244

00000f1c <adc_dma_config>:

// Configure the DMA structures
int adc_dma_config() {
     f1c:	b590      	push	{r4, r7, lr}
     f1e:	b083      	sub	sp, #12
     f20:	af00      	add	r7, sp, #0
     f22:	4c7f      	ldr	r4, [pc, #508]	; (1120 <adc_dma_config+0x204>)
     f24:	447c      	add	r4, pc
	int r = 0;
     f26:	2300      	movs	r3, #0
     f28:	603b      	str	r3, [r7, #0]
	dma_get_config_defaults(&tx_spi_config);
     f2a:	4b7e      	ldr	r3, [pc, #504]	; (1124 <adc_dma_config+0x208>)
     f2c:	58e3      	ldr	r3, [r4, r3]
     f2e:	0018      	movs	r0, r3
     f30:	4b7d      	ldr	r3, [pc, #500]	; (1128 <adc_dma_config+0x20c>)
     f32:	58e3      	ldr	r3, [r4, r3]
     f34:	4798      	blx	r3
	dma_get_config_defaults(&rx_spi_config);
     f36:	4b7d      	ldr	r3, [pc, #500]	; (112c <adc_dma_config+0x210>)
     f38:	58e3      	ldr	r3, [r4, r3]
     f3a:	0018      	movs	r0, r3
     f3c:	4b7a      	ldr	r3, [pc, #488]	; (1128 <adc_dma_config+0x20c>)
     f3e:	58e3      	ldr	r3, [r4, r3]
     f40:	4798      	blx	r3
	tx_spi_config.peripheral_trigger = SERCOM5_DMAC_ID_TX;
     f42:	4b78      	ldr	r3, [pc, #480]	; (1124 <adc_dma_config+0x208>)
     f44:	58e3      	ldr	r3, [r4, r3]
     f46:	220c      	movs	r2, #12
     f48:	705a      	strb	r2, [r3, #1]
	tx_spi_config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
     f4a:	4b76      	ldr	r3, [pc, #472]	; (1124 <adc_dma_config+0x208>)
     f4c:	58e3      	ldr	r3, [r4, r3]
     f4e:	2202      	movs	r2, #2
     f50:	709a      	strb	r2, [r3, #2]
	tx_spi_config.priority = DMA_PRIORITY_LEVEL_3;
     f52:	4b74      	ldr	r3, [pc, #464]	; (1124 <adc_dma_config+0x208>)
     f54:	58e3      	ldr	r3, [r4, r3]
     f56:	2203      	movs	r2, #3
     f58:	701a      	strb	r2, [r3, #0]
	tx_spi_config.event_config.input_action = DMA_EVENT_INPUT_CBLOCK;
     f5a:	4b72      	ldr	r3, [pc, #456]	; (1124 <adc_dma_config+0x208>)
     f5c:	58e3      	ldr	r3, [r4, r3]
     f5e:	2203      	movs	r2, #3
     f60:	70da      	strb	r2, [r3, #3]
	rx_spi_config.peripheral_trigger = SERCOM5_DMAC_ID_RX;
     f62:	4b72      	ldr	r3, [pc, #456]	; (112c <adc_dma_config+0x210>)
     f64:	58e3      	ldr	r3, [r4, r3]
     f66:	220b      	movs	r2, #11
     f68:	705a      	strb	r2, [r3, #1]
	rx_spi_config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
     f6a:	4b70      	ldr	r3, [pc, #448]	; (112c <adc_dma_config+0x210>)
     f6c:	58e3      	ldr	r3, [r4, r3]
     f6e:	2202      	movs	r2, #2
     f70:	709a      	strb	r2, [r3, #2]
	rx_spi_config.priority = DMA_PRIORITY_LEVEL_3;
     f72:	4b6e      	ldr	r3, [pc, #440]	; (112c <adc_dma_config+0x210>)
     f74:	58e3      	ldr	r3, [r4, r3]
     f76:	2203      	movs	r2, #3
     f78:	701a      	strb	r2, [r3, #0]
	rx_spi_config.event_config.input_action = DMA_EVENT_INPUT_NOACT;
     f7a:	4b6c      	ldr	r3, [pc, #432]	; (112c <adc_dma_config+0x210>)
     f7c:	58e3      	ldr	r3, [r4, r3]
     f7e:	2200      	movs	r2, #0
     f80:	70da      	strb	r2, [r3, #3]
	
	dma_descriptor_get_config_defaults(&tx_spi_desc_config);
     f82:	4b6b      	ldr	r3, [pc, #428]	; (1130 <adc_dma_config+0x214>)
     f84:	58e3      	ldr	r3, [r4, r3]
     f86:	0018      	movs	r0, r3
     f88:	4b6a      	ldr	r3, [pc, #424]	; (1134 <adc_dma_config+0x218>)
     f8a:	447b      	add	r3, pc
     f8c:	4798      	blx	r3
	dma_descriptor_get_config_defaults(&rx_spi_desc_config);
     f8e:	4b6a      	ldr	r3, [pc, #424]	; (1138 <adc_dma_config+0x21c>)
     f90:	58e3      	ldr	r3, [r4, r3]
     f92:	0018      	movs	r0, r3
     f94:	4b69      	ldr	r3, [pc, #420]	; (113c <adc_dma_config+0x220>)
     f96:	447b      	add	r3, pc
     f98:	4798      	blx	r3
	tx_spi_desc_config.beat_size = DMA_BEAT_SIZE_BYTE;
     f9a:	4b65      	ldr	r3, [pc, #404]	; (1130 <adc_dma_config+0x214>)
     f9c:	58e3      	ldr	r3, [r4, r3]
     f9e:	2200      	movs	r2, #0
     fa0:	70da      	strb	r2, [r3, #3]
	tx_spi_desc_config.block_transfer_count = 12;
     fa2:	4b63      	ldr	r3, [pc, #396]	; (1130 <adc_dma_config+0x214>)
     fa4:	58e3      	ldr	r3, [r4, r3]
     fa6:	220c      	movs	r2, #12
     fa8:	811a      	strh	r2, [r3, #8]
	tx_spi_desc_config.source_address = (uint32_t)tx_buffer + sizeof(tx_buffer);
     faa:	4b65      	ldr	r3, [pc, #404]	; (1140 <adc_dma_config+0x224>)
     fac:	58e3      	ldr	r3, [r4, r3]
     fae:	3318      	adds	r3, #24
     fb0:	001a      	movs	r2, r3
     fb2:	4b5f      	ldr	r3, [pc, #380]	; (1130 <adc_dma_config+0x214>)
     fb4:	58e3      	ldr	r3, [r4, r3]
     fb6:	60da      	str	r2, [r3, #12]
	tx_spi_desc_config.destination_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
     fb8:	4b5d      	ldr	r3, [pc, #372]	; (1130 <adc_dma_config+0x214>)
     fba:	58e3      	ldr	r3, [r4, r3]
     fbc:	4a61      	ldr	r2, [pc, #388]	; (1144 <adc_dma_config+0x228>)
     fbe:	611a      	str	r2, [r3, #16]
	tx_spi_desc_config.src_increment_enable = 1;
     fc0:	4b5b      	ldr	r3, [pc, #364]	; (1130 <adc_dma_config+0x214>)
     fc2:	58e3      	ldr	r3, [r4, r3]
     fc4:	2201      	movs	r2, #1
     fc6:	711a      	strb	r2, [r3, #4]
	tx_spi_desc_config.dst_increment_enable = 0;
     fc8:	4b59      	ldr	r3, [pc, #356]	; (1130 <adc_dma_config+0x214>)
     fca:	58e3      	ldr	r3, [r4, r3]
     fcc:	2200      	movs	r2, #0
     fce:	715a      	strb	r2, [r3, #5]
	rx_spi_desc_config.beat_size = DMA_BEAT_SIZE_BYTE;
     fd0:	4b59      	ldr	r3, [pc, #356]	; (1138 <adc_dma_config+0x21c>)
     fd2:	58e3      	ldr	r3, [r4, r3]
     fd4:	2200      	movs	r2, #0
     fd6:	70da      	strb	r2, [r3, #3]
	rx_spi_desc_config.block_transfer_count = 12;
     fd8:	4b57      	ldr	r3, [pc, #348]	; (1138 <adc_dma_config+0x21c>)
     fda:	58e3      	ldr	r3, [r4, r3]
     fdc:	220c      	movs	r2, #12
     fde:	811a      	strh	r2, [r3, #8]
	rx_spi_desc_config.source_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
     fe0:	4b55      	ldr	r3, [pc, #340]	; (1138 <adc_dma_config+0x21c>)
     fe2:	58e3      	ldr	r3, [r4, r3]
     fe4:	4a57      	ldr	r2, [pc, #348]	; (1144 <adc_dma_config+0x228>)
     fe6:	60da      	str	r2, [r3, #12]
	rx_spi_desc_config.destination_address = (uint32_t)rx_buffer + sizeof(rx_buffer);
     fe8:	4b57      	ldr	r3, [pc, #348]	; (1148 <adc_dma_config+0x22c>)
     fea:	58e3      	ldr	r3, [r4, r3]
     fec:	3318      	adds	r3, #24
     fee:	001a      	movs	r2, r3
     ff0:	4b51      	ldr	r3, [pc, #324]	; (1138 <adc_dma_config+0x21c>)
     ff2:	58e3      	ldr	r3, [r4, r3]
     ff4:	611a      	str	r2, [r3, #16]
	rx_spi_desc_config.src_increment_enable = 0;
     ff6:	4b50      	ldr	r3, [pc, #320]	; (1138 <adc_dma_config+0x21c>)
     ff8:	58e3      	ldr	r3, [r4, r3]
     ffa:	2200      	movs	r2, #0
     ffc:	711a      	strb	r2, [r3, #4]
	rx_spi_desc_config.dst_increment_enable = 1;
     ffe:	4b4e      	ldr	r3, [pc, #312]	; (1138 <adc_dma_config+0x21c>)
    1000:	58e3      	ldr	r3, [r4, r3]
    1002:	2201      	movs	r2, #1
    1004:	715a      	strb	r2, [r3, #5]
	
	r |= dma_allocate(&tx_spi_dma, &tx_spi_config);
    1006:	4b47      	ldr	r3, [pc, #284]	; (1124 <adc_dma_config+0x208>)
    1008:	58e3      	ldr	r3, [r4, r3]
    100a:	001a      	movs	r2, r3
    100c:	4b4f      	ldr	r3, [pc, #316]	; (114c <adc_dma_config+0x230>)
    100e:	58e3      	ldr	r3, [r4, r3]
    1010:	0011      	movs	r1, r2
    1012:	0018      	movs	r0, r3
    1014:	4b4e      	ldr	r3, [pc, #312]	; (1150 <adc_dma_config+0x234>)
    1016:	58e3      	ldr	r3, [r4, r3]
    1018:	4798      	blx	r3
    101a:	0003      	movs	r3, r0
    101c:	001a      	movs	r2, r3
    101e:	683b      	ldr	r3, [r7, #0]
    1020:	4313      	orrs	r3, r2
    1022:	603b      	str	r3, [r7, #0]
	r |= dma_allocate(&rx_spi_dma, &rx_spi_config);
    1024:	4b41      	ldr	r3, [pc, #260]	; (112c <adc_dma_config+0x210>)
    1026:	58e3      	ldr	r3, [r4, r3]
    1028:	001a      	movs	r2, r3
    102a:	4b4a      	ldr	r3, [pc, #296]	; (1154 <adc_dma_config+0x238>)
    102c:	58e3      	ldr	r3, [r4, r3]
    102e:	0011      	movs	r1, r2
    1030:	0018      	movs	r0, r3
    1032:	4b47      	ldr	r3, [pc, #284]	; (1150 <adc_dma_config+0x234>)
    1034:	58e3      	ldr	r3, [r4, r3]
    1036:	4798      	blx	r3
    1038:	0003      	movs	r3, r0
    103a:	001a      	movs	r2, r3
    103c:	683b      	ldr	r3, [r7, #0]
    103e:	4313      	orrs	r3, r2
    1040:	603b      	str	r3, [r7, #0]
	dma_descriptor_create(&tx_spi_desc, &tx_spi_desc_config);
    1042:	4b3b      	ldr	r3, [pc, #236]	; (1130 <adc_dma_config+0x214>)
    1044:	58e3      	ldr	r3, [r4, r3]
    1046:	001a      	movs	r2, r3
    1048:	4b43      	ldr	r3, [pc, #268]	; (1158 <adc_dma_config+0x23c>)
    104a:	58e3      	ldr	r3, [r4, r3]
    104c:	0011      	movs	r1, r2
    104e:	0018      	movs	r0, r3
    1050:	4b42      	ldr	r3, [pc, #264]	; (115c <adc_dma_config+0x240>)
    1052:	58e3      	ldr	r3, [r4, r3]
    1054:	4798      	blx	r3
	dma_descriptor_create(&rx_spi_desc, &rx_spi_desc_config);
    1056:	4b38      	ldr	r3, [pc, #224]	; (1138 <adc_dma_config+0x21c>)
    1058:	58e3      	ldr	r3, [r4, r3]
    105a:	001a      	movs	r2, r3
    105c:	4b40      	ldr	r3, [pc, #256]	; (1160 <adc_dma_config+0x244>)
    105e:	58e3      	ldr	r3, [r4, r3]
    1060:	0011      	movs	r1, r2
    1062:	0018      	movs	r0, r3
    1064:	4b3d      	ldr	r3, [pc, #244]	; (115c <adc_dma_config+0x240>)
    1066:	58e3      	ldr	r3, [r4, r3]
    1068:	4798      	blx	r3
	r |= dma_add_descriptor(&tx_spi_dma, &tx_spi_desc);
    106a:	4b3b      	ldr	r3, [pc, #236]	; (1158 <adc_dma_config+0x23c>)
    106c:	58e3      	ldr	r3, [r4, r3]
    106e:	001a      	movs	r2, r3
    1070:	4b36      	ldr	r3, [pc, #216]	; (114c <adc_dma_config+0x230>)
    1072:	58e3      	ldr	r3, [r4, r3]
    1074:	0011      	movs	r1, r2
    1076:	0018      	movs	r0, r3
    1078:	4b3a      	ldr	r3, [pc, #232]	; (1164 <adc_dma_config+0x248>)
    107a:	58e3      	ldr	r3, [r4, r3]
    107c:	4798      	blx	r3
    107e:	0003      	movs	r3, r0
    1080:	001a      	movs	r2, r3
    1082:	683b      	ldr	r3, [r7, #0]
    1084:	4313      	orrs	r3, r2
    1086:	603b      	str	r3, [r7, #0]
	r |= dma_add_descriptor(&rx_spi_dma, &rx_spi_desc);
    1088:	4b35      	ldr	r3, [pc, #212]	; (1160 <adc_dma_config+0x244>)
    108a:	58e3      	ldr	r3, [r4, r3]
    108c:	001a      	movs	r2, r3
    108e:	4b31      	ldr	r3, [pc, #196]	; (1154 <adc_dma_config+0x238>)
    1090:	58e3      	ldr	r3, [r4, r3]
    1092:	0011      	movs	r1, r2
    1094:	0018      	movs	r0, r3
    1096:	4b33      	ldr	r3, [pc, #204]	; (1164 <adc_dma_config+0x248>)
    1098:	58e3      	ldr	r3, [r4, r3]
    109a:	4798      	blx	r3
    109c:	0003      	movs	r3, r0
    109e:	001a      	movs	r2, r3
    10a0:	683b      	ldr	r3, [r7, #0]
    10a2:	4313      	orrs	r3, r2
    10a4:	603b      	str	r3, [r7, #0]
	dma_register_callback(&tx_spi_dma, adc_transfer_complete_callback, DMA_CALLBACK_TRANSFER_DONE);
    10a6:	4b30      	ldr	r3, [pc, #192]	; (1168 <adc_dma_config+0x24c>)
    10a8:	58e3      	ldr	r3, [r4, r3]
    10aa:	0019      	movs	r1, r3
    10ac:	4b27      	ldr	r3, [pc, #156]	; (114c <adc_dma_config+0x230>)
    10ae:	58e3      	ldr	r3, [r4, r3]
    10b0:	2201      	movs	r2, #1
    10b2:	0018      	movs	r0, r3
    10b4:	4b2d      	ldr	r3, [pc, #180]	; (116c <adc_dma_config+0x250>)
    10b6:	447b      	add	r3, pc
    10b8:	4798      	blx	r3
	dma_enable_callback(&rx_spi_dma, DMA_CALLBACK_TRANSFER_DONE);
    10ba:	4b26      	ldr	r3, [pc, #152]	; (1154 <adc_dma_config+0x238>)
    10bc:	58e3      	ldr	r3, [r4, r3]
    10be:	2101      	movs	r1, #1
    10c0:	0018      	movs	r0, r3
    10c2:	4b2b      	ldr	r3, [pc, #172]	; (1170 <adc_dma_config+0x254>)
    10c4:	447b      	add	r3, pc
    10c6:	4798      	blx	r3
	dma_enable_callback(&tx_spi_dma, DMA_CALLBACK_TRANSFER_DONE);
    10c8:	4b20      	ldr	r3, [pc, #128]	; (114c <adc_dma_config+0x230>)
    10ca:	58e3      	ldr	r3, [r4, r3]
    10cc:	2101      	movs	r1, #1
    10ce:	0018      	movs	r0, r3
    10d0:	4b28      	ldr	r3, [pc, #160]	; (1174 <adc_dma_config+0x258>)
    10d2:	447b      	add	r3, pc
    10d4:	4798      	blx	r3
	r |= system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_DMA, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    10d6:	2100      	movs	r1, #0
    10d8:	2006      	movs	r0, #6
    10da:	4b27      	ldr	r3, [pc, #156]	; (1178 <adc_dma_config+0x25c>)
    10dc:	58e3      	ldr	r3, [r4, r3]
    10de:	4798      	blx	r3
    10e0:	0003      	movs	r3, r0
    10e2:	001a      	movs	r2, r3
    10e4:	683b      	ldr	r3, [r7, #0]
    10e6:	4313      	orrs	r3, r2
    10e8:	603b      	str	r3, [r7, #0]

	for(int i=0; i<sizeof(rx_buffer)/sizeof(rx_buffer[0]); i++) {
    10ea:	2300      	movs	r3, #0
    10ec:	607b      	str	r3, [r7, #4]
    10ee:	e00e      	b.n	110e <adc_dma_config+0x1f2>
		rx_buffer[i] = 0;
    10f0:	4b15      	ldr	r3, [pc, #84]	; (1148 <adc_dma_config+0x22c>)
    10f2:	58e3      	ldr	r3, [r4, r3]
    10f4:	687a      	ldr	r2, [r7, #4]
    10f6:	0052      	lsls	r2, r2, #1
    10f8:	2100      	movs	r1, #0
    10fa:	52d1      	strh	r1, [r2, r3]
		tx_buffer[i] = 0;
    10fc:	4b10      	ldr	r3, [pc, #64]	; (1140 <adc_dma_config+0x224>)
    10fe:	58e3      	ldr	r3, [r4, r3]
    1100:	687a      	ldr	r2, [r7, #4]
    1102:	0052      	lsls	r2, r2, #1
    1104:	2100      	movs	r1, #0
    1106:	52d1      	strh	r1, [r2, r3]
	for(int i=0; i<sizeof(rx_buffer)/sizeof(rx_buffer[0]); i++) {
    1108:	687b      	ldr	r3, [r7, #4]
    110a:	3301      	adds	r3, #1
    110c:	607b      	str	r3, [r7, #4]
    110e:	687b      	ldr	r3, [r7, #4]
    1110:	2b0b      	cmp	r3, #11
    1112:	d9ed      	bls.n	10f0 <adc_dma_config+0x1d4>
	}
	return r;
    1114:	683b      	ldr	r3, [r7, #0]
}
    1116:	0018      	movs	r0, r3
    1118:	46bd      	mov	sp, r7
    111a:	b003      	add	sp, #12
    111c:	bd90      	pop	{r4, r7, pc}
    111e:	46c0      	nop			; (mov r8, r8)
    1120:	0000e50c 	.word	0x0000e50c
    1124:	00000280 	.word	0x00000280
    1128:	000002d0 	.word	0x000002d0
    112c:	00000038 	.word	0x00000038
    1130:	000001f8 	.word	0x000001f8
    1134:	fffff475 	.word	0xfffff475
    1138:	00000160 	.word	0x00000160
    113c:	fffff469 	.word	0xfffff469
    1140:	00000174 	.word	0x00000174
    1144:	42001c28 	.word	0x42001c28
    1148:	00000158 	.word	0x00000158
    114c:	000001f4 	.word	0x000001f4
    1150:	0000031c 	.word	0x0000031c
    1154:	000002ec 	.word	0x000002ec
    1158:	00000044 	.word	0x00000044
    115c:	000000b4 	.word	0x000000b4
    1160:	00000098 	.word	0x00000098
    1164:	00000140 	.word	0x00000140
    1168:	00000110 	.word	0x00000110
    116c:	fffff323 	.word	0xfffff323
    1170:	fffff2ad 	.word	0xfffff2ad
    1174:	fffff29f 	.word	0xfffff29f
    1178:	00000204 	.word	0x00000204

0000117c <adc_synchronous_start>:

// Start the synchronous ADC peripherals (clocks, timer, dma's)
int adc_synchronous_start() {
    117c:	b590      	push	{r4, r7, lr}
    117e:	b083      	sub	sp, #12
    1180:	af00      	add	r7, sp, #0
    1182:	4c16      	ldr	r4, [pc, #88]	; (11dc <adc_synchronous_start+0x60>)
    1184:	447c      	add	r4, pc
	int r = 0;
    1186:	2300      	movs	r3, #0
    1188:	607b      	str	r3, [r7, #4]
	adc_cs_pin_release(1);
    118a:	2001      	movs	r0, #1
    118c:	4b14      	ldr	r3, [pc, #80]	; (11e0 <adc_synchronous_start+0x64>)
    118e:	58e3      	ldr	r3, [r4, r3]
    1190:	4798      	blx	r3
	adc_gclk_output_start();
    1192:	4b14      	ldr	r3, [pc, #80]	; (11e4 <adc_synchronous_start+0x68>)
    1194:	58e3      	ldr	r3, [r4, r3]
    1196:	4798      	blx	r3
	r |= dma_start_transfer_job(&tx_spi_dma);
    1198:	4b13      	ldr	r3, [pc, #76]	; (11e8 <adc_synchronous_start+0x6c>)
    119a:	58e3      	ldr	r3, [r4, r3]
    119c:	0018      	movs	r0, r3
    119e:	4b13      	ldr	r3, [pc, #76]	; (11ec <adc_synchronous_start+0x70>)
    11a0:	58e3      	ldr	r3, [r4, r3]
    11a2:	4798      	blx	r3
    11a4:	0003      	movs	r3, r0
    11a6:	001a      	movs	r2, r3
    11a8:	687b      	ldr	r3, [r7, #4]
    11aa:	4313      	orrs	r3, r2
    11ac:	607b      	str	r3, [r7, #4]
	r |= dma_start_transfer_job(&rx_spi_dma);
    11ae:	4b10      	ldr	r3, [pc, #64]	; (11f0 <adc_synchronous_start+0x74>)
    11b0:	58e3      	ldr	r3, [r4, r3]
    11b2:	0018      	movs	r0, r3
    11b4:	4b0d      	ldr	r3, [pc, #52]	; (11ec <adc_synchronous_start+0x70>)
    11b6:	58e3      	ldr	r3, [r4, r3]
    11b8:	4798      	blx	r3
    11ba:	0003      	movs	r3, r0
    11bc:	001a      	movs	r2, r3
    11be:	687b      	ldr	r3, [r7, #4]
    11c0:	4313      	orrs	r3, r2
    11c2:	607b      	str	r3, [r7, #4]
	tc_enable(&clock_tc);
    11c4:	4b0b      	ldr	r3, [pc, #44]	; (11f4 <adc_synchronous_start+0x78>)
    11c6:	58e3      	ldr	r3, [r4, r3]
    11c8:	0018      	movs	r0, r3
    11ca:	4b0b      	ldr	r3, [pc, #44]	; (11f8 <adc_synchronous_start+0x7c>)
    11cc:	447b      	add	r3, pc
    11ce:	4798      	blx	r3
	return r;
    11d0:	687b      	ldr	r3, [r7, #4]
}
    11d2:	0018      	movs	r0, r3
    11d4:	46bd      	mov	sp, r7
    11d6:	b003      	add	sp, #12
    11d8:	bd90      	pop	{r4, r7, pc}
    11da:	46c0      	nop			; (mov r8, r8)
    11dc:	0000e2ac 	.word	0x0000e2ac
    11e0:	0000019c 	.word	0x0000019c
    11e4:	000000fc 	.word	0x000000fc
    11e8:	000001f4 	.word	0x000001f4
    11ec:	000000a8 	.word	0x000000a8
    11f0:	000002ec 	.word	0x000002ec
    11f4:	00000090 	.word	0x00000090
    11f8:	fffff6dd 	.word	0xfffff6dd

000011fc <adc_transfer_start_callback>:
	adc_cs_pin_takeover(1);
	return r;
}

// Called by the timer at start of SPI frame
void adc_transfer_start_callback(struct tc_module* module) {
    11fc:	b580      	push	{r7, lr}
    11fe:	b082      	sub	sp, #8
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
    1204:	4a04      	ldr	r2, [pc, #16]	; (1218 <adc_transfer_start_callback+0x1c>)
    1206:	447a      	add	r2, pc
	adc_cs_pin_takeover(0);
    1208:	2000      	movs	r0, #0
    120a:	4b04      	ldr	r3, [pc, #16]	; (121c <adc_transfer_start_callback+0x20>)
    120c:	58d3      	ldr	r3, [r2, r3]
    120e:	4798      	blx	r3
}
    1210:	46c0      	nop			; (mov r8, r8)
    1212:	46bd      	mov	sp, r7
    1214:	b002      	add	sp, #8
    1216:	bd80      	pop	{r7, pc}
    1218:	0000e22a 	.word	0x0000e22a
    121c:	00000230 	.word	0x00000230

00001220 <adc_transfer_complete_callback>:
void adc_dma_refresh() {
	
}

// Called by DMA at the end of SPI frame, load results into buffer
void adc_transfer_complete_callback(struct dma_resource* resource) {
    1220:	b590      	push	{r4, r7, lr}
    1222:	b087      	sub	sp, #28
    1224:	af00      	add	r7, sp, #0
    1226:	6078      	str	r0, [r7, #4]
    1228:	4c25      	ldr	r4, [pc, #148]	; (12c0 <adc_transfer_complete_callback+0xa0>)
    122a:	447c      	add	r4, pc
	adc_cs_pin_release(1);
    122c:	2001      	movs	r0, #1
    122e:	4b25      	ldr	r3, [pc, #148]	; (12c4 <adc_transfer_complete_callback+0xa4>)
    1230:	58e3      	ldr	r3, [r4, r3]
    1232:	4798      	blx	r3

	int32_t s1=0;
    1234:	2300      	movs	r3, #0
    1236:	617b      	str	r3, [r7, #20]
	int32_t s2=0;
    1238:	2300      	movs	r3, #0
    123a:	613b      	str	r3, [r7, #16]
	for (int i=0; i<3; i++) {
    123c:	2300      	movs	r3, #0
    123e:	60fb      	str	r3, [r7, #12]
    1240:	e024      	b.n	128c <adc_transfer_complete_callback+0x6c>
		s1 |= rx_buffer[i+3] << ((3-i-1) * 8);
    1242:	68fb      	ldr	r3, [r7, #12]
    1244:	1cda      	adds	r2, r3, #3
    1246:	4b20      	ldr	r3, [pc, #128]	; (12c8 <adc_transfer_complete_callback+0xa8>)
    1248:	58e3      	ldr	r3, [r4, r3]
    124a:	0052      	lsls	r2, r2, #1
    124c:	5ad3      	ldrh	r3, [r2, r3]
    124e:	b29b      	uxth	r3, r3
    1250:	0019      	movs	r1, r3
    1252:	68fb      	ldr	r3, [r7, #12]
    1254:	2202      	movs	r2, #2
    1256:	1ad3      	subs	r3, r2, r3
    1258:	00db      	lsls	r3, r3, #3
    125a:	4099      	lsls	r1, r3
    125c:	000b      	movs	r3, r1
    125e:	697a      	ldr	r2, [r7, #20]
    1260:	4313      	orrs	r3, r2
    1262:	617b      	str	r3, [r7, #20]
		s2 |= rx_buffer[i+6] << ((3-i-1) * 8);
    1264:	68fb      	ldr	r3, [r7, #12]
    1266:	1d9a      	adds	r2, r3, #6
    1268:	4b17      	ldr	r3, [pc, #92]	; (12c8 <adc_transfer_complete_callback+0xa8>)
    126a:	58e3      	ldr	r3, [r4, r3]
    126c:	0052      	lsls	r2, r2, #1
    126e:	5ad3      	ldrh	r3, [r2, r3]
    1270:	b29b      	uxth	r3, r3
    1272:	0019      	movs	r1, r3
    1274:	68fb      	ldr	r3, [r7, #12]
    1276:	2202      	movs	r2, #2
    1278:	1ad3      	subs	r3, r2, r3
    127a:	00db      	lsls	r3, r3, #3
    127c:	4099      	lsls	r1, r3
    127e:	000b      	movs	r3, r1
    1280:	693a      	ldr	r2, [r7, #16]
    1282:	4313      	orrs	r3, r2
    1284:	613b      	str	r3, [r7, #16]
	for (int i=0; i<3; i++) {
    1286:	68fb      	ldr	r3, [r7, #12]
    1288:	3301      	adds	r3, #1
    128a:	60fb      	str	r3, [r7, #12]
    128c:	68fb      	ldr	r3, [r7, #12]
    128e:	2b02      	cmp	r3, #2
    1290:	ddd7      	ble.n	1242 <adc_transfer_complete_callback+0x22>
	}
	adc_fifo_storeSample(s1, s2);
    1292:	693a      	ldr	r2, [r7, #16]
    1294:	697b      	ldr	r3, [r7, #20]
    1296:	0011      	movs	r1, r2
    1298:	0018      	movs	r0, r3
    129a:	4b0c      	ldr	r3, [pc, #48]	; (12cc <adc_transfer_complete_callback+0xac>)
    129c:	58e3      	ldr	r3, [r4, r3]
    129e:	4798      	blx	r3
//	dma_abort_job(&tx_spi_dma);
//	dma_abort_job(&rx_spi_dma);
//	dma_suspend_job(&tx_spi_dma);
//	dma_suspend_job(&rx_spi_dma);

	dma_start_transfer_job(&tx_spi_dma);
    12a0:	4b0b      	ldr	r3, [pc, #44]	; (12d0 <adc_transfer_complete_callback+0xb0>)
    12a2:	58e3      	ldr	r3, [r4, r3]
    12a4:	0018      	movs	r0, r3
    12a6:	4b0b      	ldr	r3, [pc, #44]	; (12d4 <adc_transfer_complete_callback+0xb4>)
    12a8:	58e3      	ldr	r3, [r4, r3]
    12aa:	4798      	blx	r3
	dma_start_transfer_job(&rx_spi_dma);
    12ac:	4b0a      	ldr	r3, [pc, #40]	; (12d8 <adc_transfer_complete_callback+0xb8>)
    12ae:	58e3      	ldr	r3, [r4, r3]
    12b0:	0018      	movs	r0, r3
    12b2:	4b08      	ldr	r3, [pc, #32]	; (12d4 <adc_transfer_complete_callback+0xb4>)
    12b4:	58e3      	ldr	r3, [r4, r3]
    12b6:	4798      	blx	r3
}
    12b8:	46c0      	nop			; (mov r8, r8)
    12ba:	46bd      	mov	sp, r7
    12bc:	b007      	add	sp, #28
    12be:	bd90      	pop	{r4, r7, pc}
    12c0:	0000e206 	.word	0x0000e206
    12c4:	0000019c 	.word	0x0000019c
    12c8:	00000158 	.word	0x00000158
    12cc:	000002c0 	.word	0x000002c0
    12d0:	000001f4 	.word	0x000001f4
    12d4:	000000a8 	.word	0x000000a8
    12d8:	000002ec 	.word	0x000002ec

000012dc <adc_peripheralConfig>:
	port_pin_set_output_level(ADC_SPI_CS_PIN, 0);
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
}

// Configure the hardware peripherals used by ADC sampling process
int adc_peripheralConfig(int gclk_hz) {
    12dc:	b590      	push	{r4, r7, lr}
    12de:	b085      	sub	sp, #20
    12e0:	af00      	add	r7, sp, #0
    12e2:	6078      	str	r0, [r7, #4]
    12e4:	4c1b      	ldr	r4, [pc, #108]	; (1354 <adc_peripheralConfig+0x78>)
    12e6:	447c      	add	r4, pc
	
	int r = 0;
    12e8:	2300      	movs	r3, #0
    12ea:	60fb      	str	r3, [r7, #12]
	r |= adc_spi_config(gclk_hz/2);
    12ec:	687b      	ldr	r3, [r7, #4]
    12ee:	2b00      	cmp	r3, #0
    12f0:	da00      	bge.n	12f4 <adc_peripheralConfig+0x18>
    12f2:	3301      	adds	r3, #1
    12f4:	105b      	asrs	r3, r3, #1
    12f6:	0018      	movs	r0, r3
    12f8:	4b17      	ldr	r3, [pc, #92]	; (1358 <adc_peripheralConfig+0x7c>)
    12fa:	58e3      	ldr	r3, [r4, r3]
    12fc:	4798      	blx	r3
    12fe:	0002      	movs	r2, r0
    1300:	68fb      	ldr	r3, [r7, #12]
    1302:	4313      	orrs	r3, r2
    1304:	60fb      	str	r3, [r7, #12]
	adc_gclk_config(gclk_hz);
    1306:	687b      	ldr	r3, [r7, #4]
    1308:	0018      	movs	r0, r3
    130a:	4b14      	ldr	r3, [pc, #80]	; (135c <adc_peripheralConfig+0x80>)
    130c:	58e3      	ldr	r3, [r4, r3]
    130e:	4798      	blx	r3
	r |= adc_timer_config(gclk_hz/1000, 23);
    1310:	6878      	ldr	r0, [r7, #4]
    1312:	4b13      	ldr	r3, [pc, #76]	; (1360 <adc_peripheralConfig+0x84>)
    1314:	58e3      	ldr	r3, [r4, r3]
    1316:	001a      	movs	r2, r3
    1318:	23fa      	movs	r3, #250	; 0xfa
    131a:	0099      	lsls	r1, r3, #2
    131c:	4790      	blx	r2
    131e:	0003      	movs	r3, r0
    1320:	2117      	movs	r1, #23
    1322:	0018      	movs	r0, r3
    1324:	4b0f      	ldr	r3, [pc, #60]	; (1364 <adc_peripheralConfig+0x88>)
    1326:	58e3      	ldr	r3, [r4, r3]
    1328:	4798      	blx	r3
    132a:	0002      	movs	r2, r0
    132c:	68fb      	ldr	r3, [r7, #12]
    132e:	4313      	orrs	r3, r2
    1330:	60fb      	str	r3, [r7, #12]
	r |= adc_dma_config();
    1332:	4b0d      	ldr	r3, [pc, #52]	; (1368 <adc_peripheralConfig+0x8c>)
    1334:	58e3      	ldr	r3, [r4, r3]
    1336:	4798      	blx	r3
    1338:	0002      	movs	r2, r0
    133a:	68fb      	ldr	r3, [r7, #12]
    133c:	4313      	orrs	r3, r2
    133e:	60fb      	str	r3, [r7, #12]
	adc_cs_pin_takeover(1);
    1340:	2001      	movs	r0, #1
    1342:	4b0a      	ldr	r3, [pc, #40]	; (136c <adc_peripheralConfig+0x90>)
    1344:	58e3      	ldr	r3, [r4, r3]
    1346:	4798      	blx	r3

	return r;
    1348:	68fb      	ldr	r3, [r7, #12]
}
    134a:	0018      	movs	r0, r3
    134c:	46bd      	mov	sp, r7
    134e:	b005      	add	sp, #20
    1350:	bd90      	pop	{r4, r7, pc}
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	0000e14a 	.word	0x0000e14a
    1358:	000002b4 	.word	0x000002b4
    135c:	00000010 	.word	0x00000010
    1360:	00000194 	.word	0x00000194
    1364:	000000f0 	.word	0x000000f0
    1368:	0000006c 	.word	0x0000006c
    136c:	00000230 	.word	0x00000230

00001370 <adc_spi_command_response>:

#include "adc_helpers.h"

int adc_spi_command_response(uint16_t command) {
    1370:	b5b0      	push	{r4, r5, r7, lr}
    1372:	b086      	sub	sp, #24
    1374:	af00      	add	r7, sp, #0
    1376:	0002      	movs	r2, r0
    1378:	1dbb      	adds	r3, r7, #6
    137a:	801a      	strh	r2, [r3, #0]
    137c:	4c31      	ldr	r4, [pc, #196]	; (1444 <adc_spi_command_response+0xd4>)
    137e:	447c      	add	r4, pc
	if (adc_started) return -1;
    1380:	4b31      	ldr	r3, [pc, #196]	; (1448 <adc_spi_command_response+0xd8>)
    1382:	58e3      	ldr	r3, [r4, r3]
    1384:	781b      	ldrb	r3, [r3, #0]
    1386:	2b00      	cmp	r3, #0
    1388:	d002      	beq.n	1390 <adc_spi_command_response+0x20>
    138a:	2301      	movs	r3, #1
    138c:	425b      	negs	r3, r3
    138e:	e054      	b.n	143a <adc_spi_command_response+0xca>

	uint8_t tx[3] = {0};
    1390:	2310      	movs	r3, #16
    1392:	18fb      	adds	r3, r7, r3
    1394:	0018      	movs	r0, r3
    1396:	2303      	movs	r3, #3
    1398:	001a      	movs	r2, r3
    139a:	2100      	movs	r1, #0
    139c:	4b2b      	ldr	r3, [pc, #172]	; (144c <adc_spi_command_response+0xdc>)
    139e:	58e3      	ldr	r3, [r4, r3]
    13a0:	4798      	blx	r3
	uint8_t rx[3] = {0};
    13a2:	230c      	movs	r3, #12
    13a4:	18fb      	adds	r3, r7, r3
    13a6:	0018      	movs	r0, r3
    13a8:	2303      	movs	r3, #3
    13aa:	001a      	movs	r2, r3
    13ac:	2100      	movs	r1, #0
    13ae:	4b27      	ldr	r3, [pc, #156]	; (144c <adc_spi_command_response+0xdc>)
    13b0:	58e3      	ldr	r3, [r4, r3]
    13b2:	4798      	blx	r3
	tx[0] = command >> 8;
    13b4:	1dbb      	adds	r3, r7, #6
    13b6:	881b      	ldrh	r3, [r3, #0]
    13b8:	0a1b      	lsrs	r3, r3, #8
    13ba:	b29b      	uxth	r3, r3
    13bc:	b2da      	uxtb	r2, r3
    13be:	2310      	movs	r3, #16
    13c0:	18fb      	adds	r3, r7, r3
    13c2:	701a      	strb	r2, [r3, #0]
	tx[1] = command >> 0;
    13c4:	1dbb      	adds	r3, r7, #6
    13c6:	881b      	ldrh	r3, [r3, #0]
    13c8:	b2da      	uxtb	r2, r3
    13ca:	2310      	movs	r3, #16
    13cc:	18fb      	adds	r3, r7, r3
    13ce:	705a      	strb	r2, [r3, #1]
	tx[2] = 0;
    13d0:	2310      	movs	r3, #16
    13d2:	18fb      	adds	r3, r7, r3
    13d4:	2200      	movs	r2, #0
    13d6:	709a      	strb	r2, [r3, #2]
	port_pin_set_output_level(ADC_SPI_CS_PIN, 0);
    13d8:	2100      	movs	r1, #0
    13da:	2036      	movs	r0, #54	; 0x36
    13dc:	4b1c      	ldr	r3, [pc, #112]	; (1450 <adc_spi_command_response+0xe0>)
    13de:	447b      	add	r3, pc
    13e0:	4798      	blx	r3
	spi_write_buffer_wait(&adc_spi, tx, 3);
    13e2:	2310      	movs	r3, #16
    13e4:	18f9      	adds	r1, r7, r3
    13e6:	4b1b      	ldr	r3, [pc, #108]	; (1454 <adc_spi_command_response+0xe4>)
    13e8:	58e3      	ldr	r3, [r4, r3]
    13ea:	2203      	movs	r2, #3
    13ec:	0018      	movs	r0, r3
    13ee:	4b1a      	ldr	r3, [pc, #104]	; (1458 <adc_spi_command_response+0xe8>)
    13f0:	58e3      	ldr	r3, [r4, r3]
    13f2:	4798      	blx	r3
	port_pin_set_output_level(ADC_SPI_CS_PIN, 1);
    13f4:	2101      	movs	r1, #1
    13f6:	2036      	movs	r0, #54	; 0x36
    13f8:	4b18      	ldr	r3, [pc, #96]	; (145c <adc_spi_command_response+0xec>)
    13fa:	447b      	add	r3, pc
    13fc:	4798      	blx	r3
	port_pin_set_output_level(ADC_SPI_CS_PIN, 0);
    13fe:	2100      	movs	r1, #0
    1400:	2036      	movs	r0, #54	; 0x36
    1402:	4b17      	ldr	r3, [pc, #92]	; (1460 <adc_spi_command_response+0xf0>)
    1404:	447b      	add	r3, pc
    1406:	4798      	blx	r3
	spi_read_buffer_wait(&adc_spi, rx, 3, 0);
    1408:	230c      	movs	r3, #12
    140a:	18f9      	adds	r1, r7, r3
    140c:	4b11      	ldr	r3, [pc, #68]	; (1454 <adc_spi_command_response+0xe4>)
    140e:	58e3      	ldr	r3, [r4, r3]
    1410:	0018      	movs	r0, r3
    1412:	2300      	movs	r3, #0
    1414:	2203      	movs	r2, #3
    1416:	4d13      	ldr	r5, [pc, #76]	; (1464 <adc_spi_command_response+0xf4>)
    1418:	5964      	ldr	r4, [r4, r5]
    141a:	47a0      	blx	r4
	port_pin_set_output_level(ADC_SPI_CS_PIN, 1);
    141c:	2101      	movs	r1, #1
    141e:	2036      	movs	r0, #54	; 0x36
    1420:	4b11      	ldr	r3, [pc, #68]	; (1468 <adc_spi_command_response+0xf8>)
    1422:	447b      	add	r3, pc
    1424:	4798      	blx	r3
	uint32_t ret = (rx[0] << 8) | (rx[1] << 0);
    1426:	230c      	movs	r3, #12
    1428:	18fb      	adds	r3, r7, r3
    142a:	781b      	ldrb	r3, [r3, #0]
    142c:	021b      	lsls	r3, r3, #8
    142e:	220c      	movs	r2, #12
    1430:	18ba      	adds	r2, r7, r2
    1432:	7852      	ldrb	r2, [r2, #1]
    1434:	4313      	orrs	r3, r2
    1436:	617b      	str	r3, [r7, #20]
	return (int)(ret);
    1438:	697b      	ldr	r3, [r7, #20]
}
    143a:	0018      	movs	r0, r3
    143c:	46bd      	mov	sp, r7
    143e:	b006      	add	sp, #24
    1440:	bdb0      	pop	{r4, r5, r7, pc}
    1442:	46c0      	nop			; (mov r8, r8)
    1444:	0000e0b2 	.word	0x0000e0b2
    1448:	00000318 	.word	0x00000318
    144c:	00000220 	.word	0x00000220
    1450:	fffff1df 	.word	0xfffff1df
    1454:	00000240 	.word	0x00000240
    1458:	00000300 	.word	0x00000300
    145c:	fffff1c3 	.word	0xfffff1c3
    1460:	fffff1b9 	.word	0xfffff1b9
    1464:	00000210 	.word	0x00000210
    1468:	fffff19b 	.word	0xfffff19b

0000146c <adc_spi_readReg>:

int adc_spi_readReg(uint8_t addr) {
    146c:	b580      	push	{r7, lr}
    146e:	b084      	sub	sp, #16
    1470:	af00      	add	r7, sp, #0
    1472:	0002      	movs	r2, r0
    1474:	1dfb      	adds	r3, r7, #7
    1476:	701a      	strb	r2, [r3, #0]
    1478:	4b18      	ldr	r3, [pc, #96]	; (14dc <adc_spi_readReg+0x70>)
    147a:	447b      	add	r3, pc
	if (adc_started) return -1;
    147c:	4a18      	ldr	r2, [pc, #96]	; (14e0 <adc_spi_readReg+0x74>)
    147e:	589a      	ldr	r2, [r3, r2]
    1480:	7812      	ldrb	r2, [r2, #0]
    1482:	2a00      	cmp	r2, #0
    1484:	d002      	beq.n	148c <adc_spi_readReg+0x20>
    1486:	2301      	movs	r3, #1
    1488:	425b      	negs	r3, r3
    148a:	e023      	b.n	14d4 <adc_spi_readReg+0x68>

	uint16_t comm = RREG | (addr << 8);
    148c:	1dfa      	adds	r2, r7, #7
    148e:	7812      	ldrb	r2, [r2, #0]
    1490:	0212      	lsls	r2, r2, #8
    1492:	b211      	sxth	r1, r2
    1494:	2280      	movs	r2, #128	; 0x80
    1496:	0192      	lsls	r2, r2, #6
    1498:	b212      	sxth	r2, r2
    149a:	430a      	orrs	r2, r1
    149c:	b211      	sxth	r1, r2
    149e:	220e      	movs	r2, #14
    14a0:	18ba      	adds	r2, r7, r2
    14a2:	8011      	strh	r1, [r2, #0]
	int resp;
	resp = adc_spi_command_response(comm);
    14a4:	220e      	movs	r2, #14
    14a6:	18ba      	adds	r2, r7, r2
    14a8:	8812      	ldrh	r2, [r2, #0]
    14aa:	0010      	movs	r0, r2
    14ac:	4a0d      	ldr	r2, [pc, #52]	; (14e4 <adc_spi_readReg+0x78>)
    14ae:	589b      	ldr	r3, [r3, r2]
    14b0:	4798      	blx	r3
    14b2:	0003      	movs	r3, r0
    14b4:	60bb      	str	r3, [r7, #8]
	if ((resp & ~0xff) != comm) return -1;
    14b6:	68bb      	ldr	r3, [r7, #8]
    14b8:	22ff      	movs	r2, #255	; 0xff
    14ba:	4393      	bics	r3, r2
    14bc:	001a      	movs	r2, r3
    14be:	230e      	movs	r3, #14
    14c0:	18fb      	adds	r3, r7, r3
    14c2:	881b      	ldrh	r3, [r3, #0]
    14c4:	429a      	cmp	r2, r3
    14c6:	d002      	beq.n	14ce <adc_spi_readReg+0x62>
    14c8:	2301      	movs	r3, #1
    14ca:	425b      	negs	r3, r3
    14cc:	e002      	b.n	14d4 <adc_spi_readReg+0x68>
	return resp & 0xff;
    14ce:	68bb      	ldr	r3, [r7, #8]
    14d0:	22ff      	movs	r2, #255	; 0xff
    14d2:	4013      	ands	r3, r2
}
    14d4:	0018      	movs	r0, r3
    14d6:	46bd      	mov	sp, r7
    14d8:	b004      	add	sp, #16
    14da:	bd80      	pop	{r7, pc}
    14dc:	0000dfb6 	.word	0x0000dfb6
    14e0:	00000318 	.word	0x00000318
    14e4:	00000104 	.word	0x00000104

000014e8 <adc_spi_writeReg>:

int adc_spi_writeReg(uint8_t addr, uint8_t data) {
    14e8:	b580      	push	{r7, lr}
    14ea:	b084      	sub	sp, #16
    14ec:	af00      	add	r7, sp, #0
    14ee:	0002      	movs	r2, r0
    14f0:	1dfb      	adds	r3, r7, #7
    14f2:	701a      	strb	r2, [r3, #0]
    14f4:	1dbb      	adds	r3, r7, #6
    14f6:	1c0a      	adds	r2, r1, #0
    14f8:	701a      	strb	r2, [r3, #0]
    14fa:	4b21      	ldr	r3, [pc, #132]	; (1580 <adc_spi_writeReg+0x98>)
    14fc:	447b      	add	r3, pc
	if (adc_started) return -1;
    14fe:	4a21      	ldr	r2, [pc, #132]	; (1584 <adc_spi_writeReg+0x9c>)
    1500:	589a      	ldr	r2, [r3, r2]
    1502:	7812      	ldrb	r2, [r2, #0]
    1504:	2a00      	cmp	r2, #0
    1506:	d002      	beq.n	150e <adc_spi_writeReg+0x26>
    1508:	2301      	movs	r3, #1
    150a:	425b      	negs	r3, r3
    150c:	e034      	b.n	1578 <adc_spi_writeReg+0x90>

	uint16_t comm = WREG | (addr << 8) | (data << 0);
    150e:	1dfa      	adds	r2, r7, #7
    1510:	7812      	ldrb	r2, [r2, #0]
    1512:	0212      	lsls	r2, r2, #8
    1514:	b211      	sxth	r1, r2
    1516:	2280      	movs	r2, #128	; 0x80
    1518:	01d2      	lsls	r2, r2, #7
    151a:	b212      	sxth	r2, r2
    151c:	430a      	orrs	r2, r1
    151e:	b211      	sxth	r1, r2
    1520:	1dba      	adds	r2, r7, #6
    1522:	7812      	ldrb	r2, [r2, #0]
    1524:	b212      	sxth	r2, r2
    1526:	430a      	orrs	r2, r1
    1528:	b211      	sxth	r1, r2
    152a:	220e      	movs	r2, #14
    152c:	18ba      	adds	r2, r7, r2
    152e:	8011      	strh	r1, [r2, #0]
	int resp;
	resp = adc_spi_command_response(comm);
    1530:	220e      	movs	r2, #14
    1532:	18ba      	adds	r2, r7, r2
    1534:	8812      	ldrh	r2, [r2, #0]
    1536:	0010      	movs	r0, r2
    1538:	4a13      	ldr	r2, [pc, #76]	; (1588 <adc_spi_writeReg+0xa0>)
    153a:	589b      	ldr	r3, [r3, r2]
    153c:	4798      	blx	r3
    153e:	0003      	movs	r3, r0
    1540:	60bb      	str	r3, [r7, #8]
	if ((resp & 0xff) != data) return -1;
    1542:	68bb      	ldr	r3, [r7, #8]
    1544:	22ff      	movs	r2, #255	; 0xff
    1546:	401a      	ands	r2, r3
    1548:	1dbb      	adds	r3, r7, #6
    154a:	781b      	ldrb	r3, [r3, #0]
    154c:	429a      	cmp	r2, r3
    154e:	d002      	beq.n	1556 <adc_spi_writeReg+0x6e>
    1550:	2301      	movs	r3, #1
    1552:	425b      	negs	r3, r3
    1554:	e010      	b.n	1578 <adc_spi_writeReg+0x90>
	if ((resp & ~0xff) != (RREG | (addr << 8))) return -1;
    1556:	68bb      	ldr	r3, [r7, #8]
    1558:	22ff      	movs	r2, #255	; 0xff
    155a:	4393      	bics	r3, r2
    155c:	001a      	movs	r2, r3
    155e:	2380      	movs	r3, #128	; 0x80
    1560:	019b      	lsls	r3, r3, #6
    1562:	0019      	movs	r1, r3
    1564:	1dfb      	adds	r3, r7, #7
    1566:	781b      	ldrb	r3, [r3, #0]
    1568:	021b      	lsls	r3, r3, #8
    156a:	430b      	orrs	r3, r1
    156c:	429a      	cmp	r2, r3
    156e:	d002      	beq.n	1576 <adc_spi_writeReg+0x8e>
    1570:	2301      	movs	r3, #1
    1572:	425b      	negs	r3, r3
    1574:	e000      	b.n	1578 <adc_spi_writeReg+0x90>
	return 0;
    1576:	2300      	movs	r3, #0
}
    1578:	0018      	movs	r0, r3
    157a:	46bd      	mov	sp, r7
    157c:	b004      	add	sp, #16
    157e:	bd80      	pop	{r7, pc}
    1580:	0000df34 	.word	0x0000df34
    1584:	00000318 	.word	0x00000318
    1588:	00000104 	.word	0x00000104

0000158c <adc_command>:

int adc_command(uint16_t command) {
    158c:	b580      	push	{r7, lr}
    158e:	b084      	sub	sp, #16
    1590:	af00      	add	r7, sp, #0
    1592:	0002      	movs	r2, r0
    1594:	1dbb      	adds	r3, r7, #6
    1596:	801a      	strh	r2, [r3, #0]
    1598:	4b0f      	ldr	r3, [pc, #60]	; (15d8 <adc_command+0x4c>)
    159a:	447b      	add	r3, pc
	if (adc_started) return -1;
    159c:	4a0f      	ldr	r2, [pc, #60]	; (15dc <adc_command+0x50>)
    159e:	589a      	ldr	r2, [r3, r2]
    15a0:	7812      	ldrb	r2, [r2, #0]
    15a2:	2a00      	cmp	r2, #0
    15a4:	d002      	beq.n	15ac <adc_command+0x20>
    15a6:	2301      	movs	r3, #1
    15a8:	425b      	negs	r3, r3
    15aa:	e010      	b.n	15ce <adc_command+0x42>

	int resp;
	resp = adc_spi_command_response(command);
    15ac:	1dba      	adds	r2, r7, #6
    15ae:	8812      	ldrh	r2, [r2, #0]
    15b0:	0010      	movs	r0, r2
    15b2:	4a0b      	ldr	r2, [pc, #44]	; (15e0 <adc_command+0x54>)
    15b4:	589b      	ldr	r3, [r3, r2]
    15b6:	4798      	blx	r3
    15b8:	0003      	movs	r3, r0
    15ba:	60fb      	str	r3, [r7, #12]
	if (resp != command) return -1;
    15bc:	1dbb      	adds	r3, r7, #6
    15be:	881a      	ldrh	r2, [r3, #0]
    15c0:	68fb      	ldr	r3, [r7, #12]
    15c2:	429a      	cmp	r2, r3
    15c4:	d002      	beq.n	15cc <adc_command+0x40>
    15c6:	2301      	movs	r3, #1
    15c8:	425b      	negs	r3, r3
    15ca:	e000      	b.n	15ce <adc_command+0x42>
	return 0;
    15cc:	2300      	movs	r3, #0
}
    15ce:	0018      	movs	r0, r3
    15d0:	46bd      	mov	sp, r7
    15d2:	b004      	add	sp, #16
    15d4:	bd80      	pop	{r7, pc}
    15d6:	46c0      	nop			; (mov r8, r8)
    15d8:	0000de96 	.word	0x0000de96
    15dc:	00000318 	.word	0x00000318
    15e0:	00000104 	.word	0x00000104

000015e4 <adc_reset>:

int adc_reset() {
    15e4:	b590      	push	{r4, r7, lr}
    15e6:	b083      	sub	sp, #12
    15e8:	af00      	add	r7, sp, #0
    15ea:	4c17      	ldr	r4, [pc, #92]	; (1648 <adc_reset+0x64>)
    15ec:	447c      	add	r4, pc
	if (adc_started) return -1;
    15ee:	4b17      	ldr	r3, [pc, #92]	; (164c <adc_reset+0x68>)
    15f0:	58e3      	ldr	r3, [r4, r3]
    15f2:	781b      	ldrb	r3, [r3, #0]
    15f4:	2b00      	cmp	r3, #0
    15f6:	d002      	beq.n	15fe <adc_reset+0x1a>
    15f8:	2301      	movs	r3, #1
    15fa:	425b      	negs	r3, r3
    15fc:	e020      	b.n	1640 <adc_reset+0x5c>

	int cnt=0;
    15fe:	2300      	movs	r3, #0
    1600:	607b      	str	r3, [r7, #4]
	int resp;
	resp = adc_spi_command_response(COMMAND_RESET);
    1602:	2311      	movs	r3, #17
    1604:	0018      	movs	r0, r3
    1606:	4b12      	ldr	r3, [pc, #72]	; (1650 <adc_reset+0x6c>)
    1608:	58e3      	ldr	r3, [r4, r3]
    160a:	4798      	blx	r3
    160c:	0003      	movs	r3, r0
    160e:	603b      	str	r3, [r7, #0]

	// Reset takes 5ms, poll for ready word
	while(resp != 0xff02) {
    1610:	e011      	b.n	1636 <adc_reset+0x52>
		cnt++;
    1612:	687b      	ldr	r3, [r7, #4]
    1614:	3301      	adds	r3, #1
    1616:	607b      	str	r3, [r7, #4]
		if (cnt > 500) return -1;
    1618:	687a      	ldr	r2, [r7, #4]
    161a:	23fa      	movs	r3, #250	; 0xfa
    161c:	005b      	lsls	r3, r3, #1
    161e:	429a      	cmp	r2, r3
    1620:	dd02      	ble.n	1628 <adc_reset+0x44>
    1622:	2301      	movs	r3, #1
    1624:	425b      	negs	r3, r3
    1626:	e00b      	b.n	1640 <adc_reset+0x5c>
		resp = adc_spi_command_response(COMMAND_NULL);
    1628:	2300      	movs	r3, #0
    162a:	0018      	movs	r0, r3
    162c:	4b08      	ldr	r3, [pc, #32]	; (1650 <adc_reset+0x6c>)
    162e:	58e3      	ldr	r3, [r4, r3]
    1630:	4798      	blx	r3
    1632:	0003      	movs	r3, r0
    1634:	603b      	str	r3, [r7, #0]
	while(resp != 0xff02) {
    1636:	683b      	ldr	r3, [r7, #0]
    1638:	4a06      	ldr	r2, [pc, #24]	; (1654 <adc_reset+0x70>)
    163a:	4293      	cmp	r3, r2
    163c:	d1e9      	bne.n	1612 <adc_reset+0x2e>
	}
	return 0;
    163e:	2300      	movs	r3, #0
}
    1640:	0018      	movs	r0, r3
    1642:	46bd      	mov	sp, r7
    1644:	b003      	add	sp, #12
    1646:	bd90      	pop	{r4, r7, pc}
    1648:	0000de44 	.word	0x0000de44
    164c:	00000318 	.word	0x00000318
    1650:	00000104 	.word	0x00000104
    1654:	0000ff02 	.word	0x0000ff02

00001658 <adc_fault>:

int adc_fault(union AdcFaultCode* code) {
    1658:	b590      	push	{r4, r7, lr}
    165a:	b085      	sub	sp, #20
    165c:	af00      	add	r7, sp, #0
    165e:	6078      	str	r0, [r7, #4]
    1660:	4c98      	ldr	r4, [pc, #608]	; (18c4 <adc_fault+0x26c>)
    1662:	447c      	add	r4, pc
	if (adc_started) return -1;
    1664:	4b98      	ldr	r3, [pc, #608]	; (18c8 <adc_fault+0x270>)
    1666:	58e3      	ldr	r3, [r4, r3]
    1668:	781b      	ldrb	r3, [r3, #0]
    166a:	2b00      	cmp	r3, #0
    166c:	d002      	beq.n	1674 <adc_fault+0x1c>
    166e:	2301      	movs	r3, #1
    1670:	425b      	negs	r3, r3
    1672:	e123      	b.n	18bc <adc_fault+0x264>

	int resp;
	code->all = 0;
    1674:	687b      	ldr	r3, [r7, #4]
    1676:	2200      	movs	r2, #0
    1678:	601a      	str	r2, [r3, #0]
	resp = adc_spi_readReg(ADDR_STAT_1);
    167a:	2302      	movs	r3, #2
    167c:	0018      	movs	r0, r3
    167e:	4b93      	ldr	r3, [pc, #588]	; (18cc <adc_fault+0x274>)
    1680:	58e3      	ldr	r3, [r4, r3]
    1682:	4798      	blx	r3
    1684:	0003      	movs	r3, r0
    1686:	60fb      	str	r3, [r7, #12]
	if (resp == -1) return -1;
    1688:	68fb      	ldr	r3, [r7, #12]
    168a:	3301      	adds	r3, #1
    168c:	d102      	bne.n	1694 <adc_fault+0x3c>
    168e:	2301      	movs	r3, #1
    1690:	425b      	negs	r3, r3
    1692:	e113      	b.n	18bc <adc_fault+0x264>
	code->b.OPC		= resp & (1 << 6);
    1694:	68fb      	ldr	r3, [r7, #12]
    1696:	2240      	movs	r2, #64	; 0x40
    1698:	4013      	ands	r3, r2
    169a:	1e5a      	subs	r2, r3, #1
    169c:	4193      	sbcs	r3, r2
    169e:	b2da      	uxtb	r2, r3
    16a0:	687b      	ldr	r3, [r7, #4]
    16a2:	2101      	movs	r1, #1
    16a4:	400a      	ands	r2, r1
    16a6:	0010      	movs	r0, r2
    16a8:	781a      	ldrb	r2, [r3, #0]
    16aa:	2101      	movs	r1, #1
    16ac:	438a      	bics	r2, r1
    16ae:	1c11      	adds	r1, r2, #0
    16b0:	1c02      	adds	r2, r0, #0
    16b2:	430a      	orrs	r2, r1
    16b4:	701a      	strb	r2, [r3, #0]
	code->b.SPI		= resp & (1 << 5);
    16b6:	68fb      	ldr	r3, [r7, #12]
    16b8:	2220      	movs	r2, #32
    16ba:	4013      	ands	r3, r2
    16bc:	1e5a      	subs	r2, r3, #1
    16be:	4193      	sbcs	r3, r2
    16c0:	b2da      	uxtb	r2, r3
    16c2:	687b      	ldr	r3, [r7, #4]
    16c4:	2101      	movs	r1, #1
    16c6:	400a      	ands	r2, r1
    16c8:	1890      	adds	r0, r2, r2
    16ca:	781a      	ldrb	r2, [r3, #0]
    16cc:	2102      	movs	r1, #2
    16ce:	438a      	bics	r2, r1
    16d0:	1c11      	adds	r1, r2, #0
    16d2:	1c02      	adds	r2, r0, #0
    16d4:	430a      	orrs	r2, r1
    16d6:	701a      	strb	r2, [r3, #0]
	code->b.ADCIN	= resp & (1 << 4);
    16d8:	68fb      	ldr	r3, [r7, #12]
    16da:	2210      	movs	r2, #16
    16dc:	4013      	ands	r3, r2
    16de:	1e5a      	subs	r2, r3, #1
    16e0:	4193      	sbcs	r3, r2
    16e2:	b2da      	uxtb	r2, r3
    16e4:	687b      	ldr	r3, [r7, #4]
    16e6:	2101      	movs	r1, #1
    16e8:	400a      	ands	r2, r1
    16ea:	0090      	lsls	r0, r2, #2
    16ec:	781a      	ldrb	r2, [r3, #0]
    16ee:	2104      	movs	r1, #4
    16f0:	438a      	bics	r2, r1
    16f2:	1c11      	adds	r1, r2, #0
    16f4:	1c02      	adds	r2, r0, #0
    16f6:	430a      	orrs	r2, r1
    16f8:	701a      	strb	r2, [r3, #0]
	code->b.WDTR	= resp & (1 << 3);
    16fa:	68fb      	ldr	r3, [r7, #12]
    16fc:	2208      	movs	r2, #8
    16fe:	4013      	ands	r3, r2
    1700:	1e5a      	subs	r2, r3, #1
    1702:	4193      	sbcs	r3, r2
    1704:	b2da      	uxtb	r2, r3
    1706:	687b      	ldr	r3, [r7, #4]
    1708:	2101      	movs	r1, #1
    170a:	400a      	ands	r2, r1
    170c:	00d0      	lsls	r0, r2, #3
    170e:	781a      	ldrb	r2, [r3, #0]
    1710:	2108      	movs	r1, #8
    1712:	438a      	bics	r2, r1
    1714:	1c11      	adds	r1, r2, #0
    1716:	1c02      	adds	r2, r0, #0
    1718:	430a      	orrs	r2, r1
    171a:	701a      	strb	r2, [r3, #0]
	code->b.RESYNC	= resp & (1 << 2);
    171c:	68fb      	ldr	r3, [r7, #12]
    171e:	2204      	movs	r2, #4
    1720:	4013      	ands	r3, r2
    1722:	1e5a      	subs	r2, r3, #1
    1724:	4193      	sbcs	r3, r2
    1726:	b2da      	uxtb	r2, r3
    1728:	687b      	ldr	r3, [r7, #4]
    172a:	2101      	movs	r1, #1
    172c:	400a      	ands	r2, r1
    172e:	0110      	lsls	r0, r2, #4
    1730:	781a      	ldrb	r2, [r3, #0]
    1732:	2110      	movs	r1, #16
    1734:	438a      	bics	r2, r1
    1736:	1c11      	adds	r1, r2, #0
    1738:	1c02      	adds	r2, r0, #0
    173a:	430a      	orrs	r2, r1
    173c:	701a      	strb	r2, [r3, #0]
	code->b.DRDY	= resp & (1 << 1);
    173e:	68fb      	ldr	r3, [r7, #12]
    1740:	2202      	movs	r2, #2
    1742:	4013      	ands	r3, r2
    1744:	1e5a      	subs	r2, r3, #1
    1746:	4193      	sbcs	r3, r2
    1748:	b2da      	uxtb	r2, r3
    174a:	687b      	ldr	r3, [r7, #4]
    174c:	2101      	movs	r1, #1
    174e:	400a      	ands	r2, r1
    1750:	0150      	lsls	r0, r2, #5
    1752:	781a      	ldrb	r2, [r3, #0]
    1754:	2120      	movs	r1, #32
    1756:	438a      	bics	r2, r1
    1758:	1c11      	adds	r1, r2, #0
    175a:	1c02      	adds	r2, r0, #0
    175c:	430a      	orrs	r2, r1
    175e:	701a      	strb	r2, [r3, #0]
	code->b.CHECK	= resp & (1 << 0);
    1760:	68fb      	ldr	r3, [r7, #12]
    1762:	2201      	movs	r2, #1
    1764:	4013      	ands	r3, r2
    1766:	1e5a      	subs	r2, r3, #1
    1768:	4193      	sbcs	r3, r2
    176a:	b2da      	uxtb	r2, r3
    176c:	687b      	ldr	r3, [r7, #4]
    176e:	2101      	movs	r1, #1
    1770:	400a      	ands	r2, r1
    1772:	0190      	lsls	r0, r2, #6
    1774:	781a      	ldrb	r2, [r3, #0]
    1776:	2140      	movs	r1, #64	; 0x40
    1778:	438a      	bics	r2, r1
    177a:	1c11      	adds	r1, r2, #0
    177c:	1c02      	adds	r2, r0, #0
    177e:	430a      	orrs	r2, r1
    1780:	701a      	strb	r2, [r3, #0]
	resp = adc_spi_readReg(ADDR_STAT_P);
    1782:	2303      	movs	r3, #3
    1784:	0018      	movs	r0, r3
    1786:	4b51      	ldr	r3, [pc, #324]	; (18cc <adc_fault+0x274>)
    1788:	58e3      	ldr	r3, [r4, r3]
    178a:	4798      	blx	r3
    178c:	0003      	movs	r3, r0
    178e:	60fb      	str	r3, [r7, #12]
	if (resp == -1) return -1;
    1790:	68fb      	ldr	r3, [r7, #12]
    1792:	3301      	adds	r3, #1
    1794:	d102      	bne.n	179c <adc_fault+0x144>
    1796:	2301      	movs	r3, #1
    1798:	425b      	negs	r3, r3
    179a:	e08f      	b.n	18bc <adc_fault+0x264>
	code->b.IN2P	=  resp & (1 << 1);
    179c:	68fb      	ldr	r3, [r7, #12]
    179e:	2202      	movs	r2, #2
    17a0:	4013      	ands	r3, r2
    17a2:	1e5a      	subs	r2, r3, #1
    17a4:	4193      	sbcs	r3, r2
    17a6:	b2da      	uxtb	r2, r3
    17a8:	687b      	ldr	r3, [r7, #4]
    17aa:	01d0      	lsls	r0, r2, #7
    17ac:	781a      	ldrb	r2, [r3, #0]
    17ae:	217f      	movs	r1, #127	; 0x7f
    17b0:	400a      	ands	r2, r1
    17b2:	1c11      	adds	r1, r2, #0
    17b4:	1c02      	adds	r2, r0, #0
    17b6:	430a      	orrs	r2, r1
    17b8:	701a      	strb	r2, [r3, #0]
	code->b.IN1P	=  resp & (1 << 0);
    17ba:	68fb      	ldr	r3, [r7, #12]
    17bc:	2201      	movs	r2, #1
    17be:	4013      	ands	r3, r2
    17c0:	1e5a      	subs	r2, r3, #1
    17c2:	4193      	sbcs	r3, r2
    17c4:	b2da      	uxtb	r2, r3
    17c6:	687b      	ldr	r3, [r7, #4]
    17c8:	2101      	movs	r1, #1
    17ca:	400a      	ands	r2, r1
    17cc:	0010      	movs	r0, r2
    17ce:	785a      	ldrb	r2, [r3, #1]
    17d0:	2101      	movs	r1, #1
    17d2:	438a      	bics	r2, r1
    17d4:	1c11      	adds	r1, r2, #0
    17d6:	1c02      	adds	r2, r0, #0
    17d8:	430a      	orrs	r2, r1
    17da:	705a      	strb	r2, [r3, #1]
	resp = adc_spi_readReg(ADDR_STAT_N);
    17dc:	2304      	movs	r3, #4
    17de:	0018      	movs	r0, r3
    17e0:	4b3a      	ldr	r3, [pc, #232]	; (18cc <adc_fault+0x274>)
    17e2:	58e3      	ldr	r3, [r4, r3]
    17e4:	4798      	blx	r3
    17e6:	0003      	movs	r3, r0
    17e8:	60fb      	str	r3, [r7, #12]
	if (resp == -1) return -1;
    17ea:	68fb      	ldr	r3, [r7, #12]
    17ec:	3301      	adds	r3, #1
    17ee:	d102      	bne.n	17f6 <adc_fault+0x19e>
    17f0:	2301      	movs	r3, #1
    17f2:	425b      	negs	r3, r3
    17f4:	e062      	b.n	18bc <adc_fault+0x264>
	code->b.IN2N	=  resp & (1 << 1);
    17f6:	68fb      	ldr	r3, [r7, #12]
    17f8:	2202      	movs	r2, #2
    17fa:	4013      	ands	r3, r2
    17fc:	1e5a      	subs	r2, r3, #1
    17fe:	4193      	sbcs	r3, r2
    1800:	b2da      	uxtb	r2, r3
    1802:	687b      	ldr	r3, [r7, #4]
    1804:	2101      	movs	r1, #1
    1806:	400a      	ands	r2, r1
    1808:	1890      	adds	r0, r2, r2
    180a:	785a      	ldrb	r2, [r3, #1]
    180c:	2102      	movs	r1, #2
    180e:	438a      	bics	r2, r1
    1810:	1c11      	adds	r1, r2, #0
    1812:	1c02      	adds	r2, r0, #0
    1814:	430a      	orrs	r2, r1
    1816:	705a      	strb	r2, [r3, #1]
	code->b.IN1N	=  resp & (1 << 0);
    1818:	68fb      	ldr	r3, [r7, #12]
    181a:	2201      	movs	r2, #1
    181c:	4013      	ands	r3, r2
    181e:	1e5a      	subs	r2, r3, #1
    1820:	4193      	sbcs	r3, r2
    1822:	b2da      	uxtb	r2, r3
    1824:	687b      	ldr	r3, [r7, #4]
    1826:	2101      	movs	r1, #1
    1828:	400a      	ands	r2, r1
    182a:	0090      	lsls	r0, r2, #2
    182c:	785a      	ldrb	r2, [r3, #1]
    182e:	2104      	movs	r1, #4
    1830:	438a      	bics	r2, r1
    1832:	1c11      	adds	r1, r2, #0
    1834:	1c02      	adds	r2, r0, #0
    1836:	430a      	orrs	r2, r1
    1838:	705a      	strb	r2, [r3, #1]
	resp = adc_spi_readReg(ADDR_STAT_S);
    183a:	2305      	movs	r3, #5
    183c:	0018      	movs	r0, r3
    183e:	4b23      	ldr	r3, [pc, #140]	; (18cc <adc_fault+0x274>)
    1840:	58e3      	ldr	r3, [r4, r3]
    1842:	4798      	blx	r3
    1844:	0003      	movs	r3, r0
    1846:	60fb      	str	r3, [r7, #12]
	if (resp == -1) return -1;
    1848:	68fb      	ldr	r3, [r7, #12]
    184a:	3301      	adds	r3, #1
    184c:	d102      	bne.n	1854 <adc_fault+0x1fc>
    184e:	2301      	movs	r3, #1
    1850:	425b      	negs	r3, r3
    1852:	e033      	b.n	18bc <adc_fault+0x264>
	code->b.STARTUP	=  resp & (1 << 2);
    1854:	68fb      	ldr	r3, [r7, #12]
    1856:	2204      	movs	r2, #4
    1858:	4013      	ands	r3, r2
    185a:	1e5a      	subs	r2, r3, #1
    185c:	4193      	sbcs	r3, r2
    185e:	b2da      	uxtb	r2, r3
    1860:	687b      	ldr	r3, [r7, #4]
    1862:	2101      	movs	r1, #1
    1864:	400a      	ands	r2, r1
    1866:	00d0      	lsls	r0, r2, #3
    1868:	785a      	ldrb	r2, [r3, #1]
    186a:	2108      	movs	r1, #8
    186c:	438a      	bics	r2, r1
    186e:	1c11      	adds	r1, r2, #0
    1870:	1c02      	adds	r2, r0, #0
    1872:	430a      	orrs	r2, r1
    1874:	705a      	strb	r2, [r3, #1]
	code->b.CS		=  resp & (1 << 1);
    1876:	68fb      	ldr	r3, [r7, #12]
    1878:	2202      	movs	r2, #2
    187a:	4013      	ands	r3, r2
    187c:	1e5a      	subs	r2, r3, #1
    187e:	4193      	sbcs	r3, r2
    1880:	b2da      	uxtb	r2, r3
    1882:	687b      	ldr	r3, [r7, #4]
    1884:	2101      	movs	r1, #1
    1886:	400a      	ands	r2, r1
    1888:	0110      	lsls	r0, r2, #4
    188a:	785a      	ldrb	r2, [r3, #1]
    188c:	2110      	movs	r1, #16
    188e:	438a      	bics	r2, r1
    1890:	1c11      	adds	r1, r2, #0
    1892:	1c02      	adds	r2, r0, #0
    1894:	430a      	orrs	r2, r1
    1896:	705a      	strb	r2, [r3, #1]
	code->b.FRAME	=  resp & (1 << 0);
    1898:	68fb      	ldr	r3, [r7, #12]
    189a:	2201      	movs	r2, #1
    189c:	4013      	ands	r3, r2
    189e:	1e5a      	subs	r2, r3, #1
    18a0:	4193      	sbcs	r3, r2
    18a2:	b2da      	uxtb	r2, r3
    18a4:	687b      	ldr	r3, [r7, #4]
    18a6:	2101      	movs	r1, #1
    18a8:	400a      	ands	r2, r1
    18aa:	0150      	lsls	r0, r2, #5
    18ac:	785a      	ldrb	r2, [r3, #1]
    18ae:	2120      	movs	r1, #32
    18b0:	438a      	bics	r2, r1
    18b2:	1c11      	adds	r1, r2, #0
    18b4:	1c02      	adds	r2, r0, #0
    18b6:	430a      	orrs	r2, r1
    18b8:	705a      	strb	r2, [r3, #1]
	return 0;
    18ba:	2300      	movs	r3, #0
}
    18bc:	0018      	movs	r0, r3
    18be:	46bd      	mov	sp, r7
    18c0:	b005      	add	sp, #20
    18c2:	bd90      	pop	{r4, r7, pc}
    18c4:	0000ddce 	.word	0x0000ddce
    18c8:	00000318 	.word	0x00000318
    18cc:	00000000 	.word	0x00000000

000018d0 <adc_configure>:

int adc_configure() {
    18d0:	b5b0      	push	{r4, r5, r7, lr}
    18d2:	af00      	add	r7, sp, #0
    18d4:	4c2d      	ldr	r4, [pc, #180]	; (198c <adc_configure+0xbc>)
    18d6:	447c      	add	r4, pc
	if (adc_started) return -1;
    18d8:	4b2d      	ldr	r3, [pc, #180]	; (1990 <adc_configure+0xc0>)
    18da:	58e3      	ldr	r3, [r4, r3]
    18dc:	781b      	ldrb	r3, [r3, #0]
    18de:	2b00      	cmp	r3, #0
    18e0:	d002      	beq.n	18e8 <adc_configure+0x18>
    18e2:	2301      	movs	r3, #1
    18e4:	425b      	negs	r3, r3
    18e6:	e04e      	b.n	1986 <adc_configure+0xb6>

	if (adc_spi_writeReg(ADDR_A_SYS_CFG, a_sys_cfg) == -1) return -1;
    18e8:	230b      	movs	r3, #11
    18ea:	22e8      	movs	r2, #232	; 0xe8
    18ec:	0011      	movs	r1, r2
    18ee:	0018      	movs	r0, r3
    18f0:	4b28      	ldr	r3, [pc, #160]	; (1994 <adc_configure+0xc4>)
    18f2:	58e3      	ldr	r3, [r4, r3]
    18f4:	4798      	blx	r3
    18f6:	0003      	movs	r3, r0
    18f8:	3301      	adds	r3, #1
    18fa:	d102      	bne.n	1902 <adc_configure+0x32>
    18fc:	2301      	movs	r3, #1
    18fe:	425b      	negs	r3, r3
    1900:	e041      	b.n	1986 <adc_configure+0xb6>
	if (adc_spi_writeReg(ADDR_D_SYS_CFG, d_sys_cfg) == -1) return -1;
    1902:	230c      	movs	r3, #12
    1904:	223c      	movs	r2, #60	; 0x3c
    1906:	0011      	movs	r1, r2
    1908:	0018      	movs	r0, r3
    190a:	4b22      	ldr	r3, [pc, #136]	; (1994 <adc_configure+0xc4>)
    190c:	58e3      	ldr	r3, [r4, r3]
    190e:	4798      	blx	r3
    1910:	0003      	movs	r3, r0
    1912:	3301      	adds	r3, #1
    1914:	d102      	bne.n	191c <adc_configure+0x4c>
    1916:	2301      	movs	r3, #1
    1918:	425b      	negs	r3, r3
    191a:	e034      	b.n	1986 <adc_configure+0xb6>
	if (adc_spi_writeReg(ADDR_CLK1, clk1) == -1) return -1;
    191c:	230d      	movs	r3, #13
    191e:	2202      	movs	r2, #2
    1920:	0011      	movs	r1, r2
    1922:	0018      	movs	r0, r3
    1924:	4b1b      	ldr	r3, [pc, #108]	; (1994 <adc_configure+0xc4>)
    1926:	58e3      	ldr	r3, [r4, r3]
    1928:	4798      	blx	r3
    192a:	0003      	movs	r3, r0
    192c:	3301      	adds	r3, #1
    192e:	d102      	bne.n	1936 <adc_configure+0x66>
    1930:	2301      	movs	r3, #1
    1932:	425b      	negs	r3, r3
    1934:	e027      	b.n	1986 <adc_configure+0xb6>
	if (adc_spi_writeReg(ADDR_CLK2, clk2) == -1) return -1;
    1936:	230e      	movs	r3, #14
    1938:	2220      	movs	r2, #32
    193a:	0011      	movs	r1, r2
    193c:	0018      	movs	r0, r3
    193e:	4b15      	ldr	r3, [pc, #84]	; (1994 <adc_configure+0xc4>)
    1940:	58e3      	ldr	r3, [r4, r3]
    1942:	4798      	blx	r3
    1944:	0003      	movs	r3, r0
    1946:	3301      	adds	r3, #1
    1948:	d102      	bne.n	1950 <adc_configure+0x80>
    194a:	2301      	movs	r3, #1
    194c:	425b      	negs	r3, r3
    194e:	e01a      	b.n	1986 <adc_configure+0xb6>
	if (adc_spi_writeReg(ADDR_ADC1, adc1) == -1) return -1;
    1950:	2311      	movs	r3, #17
    1952:	2201      	movs	r2, #1
    1954:	0011      	movs	r1, r2
    1956:	0018      	movs	r0, r3
    1958:	4b0e      	ldr	r3, [pc, #56]	; (1994 <adc_configure+0xc4>)
    195a:	58e3      	ldr	r3, [r4, r3]
    195c:	4798      	blx	r3
    195e:	0003      	movs	r3, r0
    1960:	3301      	adds	r3, #1
    1962:	d102      	bne.n	196a <adc_configure+0x9a>
    1964:	2301      	movs	r3, #1
    1966:	425b      	negs	r3, r3
    1968:	e00d      	b.n	1986 <adc_configure+0xb6>
	if (adc_spi_writeReg(ADDR_ADC2, adc2) == -1) return -1;
    196a:	2312      	movs	r3, #18
    196c:	2201      	movs	r2, #1
    196e:	0011      	movs	r1, r2
    1970:	0018      	movs	r0, r3
    1972:	4b08      	ldr	r3, [pc, #32]	; (1994 <adc_configure+0xc4>)
    1974:	58e3      	ldr	r3, [r4, r3]
    1976:	4798      	blx	r3
    1978:	0003      	movs	r3, r0
    197a:	3301      	adds	r3, #1
    197c:	d102      	bne.n	1984 <adc_configure+0xb4>
    197e:	2301      	movs	r3, #1
    1980:	425b      	negs	r3, r3
    1982:	e000      	b.n	1986 <adc_configure+0xb6>
	return 0;
    1984:	2300      	movs	r3, #0
}
    1986:	0018      	movs	r0, r3
    1988:	46bd      	mov	sp, r7
    198a:	bdb0      	pop	{r4, r5, r7, pc}
    198c:	0000db5a 	.word	0x0000db5a
    1990:	00000318 	.word	0x00000318
    1994:	00000214 	.word	0x00000214

00001998 <adc_start>:

int adc_start() {
    1998:	b5b0      	push	{r4, r5, r7, lr}
    199a:	af00      	add	r7, sp, #0
    199c:	4c1b      	ldr	r4, [pc, #108]	; (1a0c <adc_start+0x74>)
    199e:	447c      	add	r4, pc
	if (adc_started) return -1;
    19a0:	4b1b      	ldr	r3, [pc, #108]	; (1a10 <adc_start+0x78>)
    19a2:	58e3      	ldr	r3, [r4, r3]
    19a4:	781b      	ldrb	r3, [r3, #0]
    19a6:	2b00      	cmp	r3, #0
    19a8:	d002      	beq.n	19b0 <adc_start+0x18>
    19aa:	2301      	movs	r3, #1
    19ac:	425b      	negs	r3, r3
    19ae:	e029      	b.n	1a04 <adc_start+0x6c>

	if (adc_command(COMMAND_UNLOCK) == -1) return -1;
    19b0:	4b18      	ldr	r3, [pc, #96]	; (1a14 <adc_start+0x7c>)
    19b2:	0018      	movs	r0, r3
    19b4:	4b18      	ldr	r3, [pc, #96]	; (1a18 <adc_start+0x80>)
    19b6:	58e3      	ldr	r3, [r4, r3]
    19b8:	4798      	blx	r3
    19ba:	0003      	movs	r3, r0
    19bc:	3301      	adds	r3, #1
    19be:	d102      	bne.n	19c6 <adc_start+0x2e>
    19c0:	2301      	movs	r3, #1
    19c2:	425b      	negs	r3, r3
    19c4:	e01e      	b.n	1a04 <adc_start+0x6c>
	if (adc_spi_writeReg(ADDR_ADC_ENA, 0x3) == -1) return -1;
    19c6:	230f      	movs	r3, #15
    19c8:	2103      	movs	r1, #3
    19ca:	0018      	movs	r0, r3
    19cc:	4b13      	ldr	r3, [pc, #76]	; (1a1c <adc_start+0x84>)
    19ce:	58e3      	ldr	r3, [r4, r3]
    19d0:	4798      	blx	r3
    19d2:	0003      	movs	r3, r0
    19d4:	3301      	adds	r3, #1
    19d6:	d102      	bne.n	19de <adc_start+0x46>
    19d8:	2301      	movs	r3, #1
    19da:	425b      	negs	r3, r3
    19dc:	e012      	b.n	1a04 <adc_start+0x6c>
	if (adc_command(COMMAND_LOCK) == -1) return -1;
    19de:	4b10      	ldr	r3, [pc, #64]	; (1a20 <adc_start+0x88>)
    19e0:	0018      	movs	r0, r3
    19e2:	4b0d      	ldr	r3, [pc, #52]	; (1a18 <adc_start+0x80>)
    19e4:	58e3      	ldr	r3, [r4, r3]
    19e6:	4798      	blx	r3
    19e8:	0003      	movs	r3, r0
    19ea:	3301      	adds	r3, #1
    19ec:	d102      	bne.n	19f4 <adc_start+0x5c>
    19ee:	2301      	movs	r3, #1
    19f0:	425b      	negs	r3, r3
    19f2:	e007      	b.n	1a04 <adc_start+0x6c>
	adc_synchronous_start();
    19f4:	4b0b      	ldr	r3, [pc, #44]	; (1a24 <adc_start+0x8c>)
    19f6:	58e3      	ldr	r3, [r4, r3]
    19f8:	4798      	blx	r3
	adc_started=1;
    19fa:	4b05      	ldr	r3, [pc, #20]	; (1a10 <adc_start+0x78>)
    19fc:	58e3      	ldr	r3, [r4, r3]
    19fe:	2201      	movs	r2, #1
    1a00:	701a      	strb	r2, [r3, #0]
	return 0;
    1a02:	2300      	movs	r3, #0
}
    1a04:	0018      	movs	r0, r3
    1a06:	46bd      	mov	sp, r7
    1a08:	bdb0      	pop	{r4, r5, r7, pc}
    1a0a:	46c0      	nop			; (mov r8, r8)
    1a0c:	0000da92 	.word	0x0000da92
    1a10:	00000318 	.word	0x00000318
    1a14:	00000655 	.word	0x00000655
    1a18:	000000a4 	.word	0x000000a4
    1a1c:	00000214 	.word	0x00000214
    1a20:	00000555 	.word	0x00000555
    1a24:	000001e0 	.word	0x000001e0

00001a28 <adc_setSampleRate>:
	if (adc_command(COMMAND_LOCK) == -1) return -1;
	adc_started=0;
	return 0;
}

int adc_setSampleRate(enum AdcSampleRate rate) {
    1a28:	b590      	push	{r4, r7, lr}
    1a2a:	b085      	sub	sp, #20
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	0002      	movs	r2, r0
    1a30:	1dfb      	adds	r3, r7, #7
    1a32:	701a      	strb	r2, [r3, #0]
    1a34:	4c17      	ldr	r4, [pc, #92]	; (1a94 <adc_setSampleRate+0x6c>)
    1a36:	447c      	add	r4, pc
	if (adc_started) return -1;
    1a38:	4b17      	ldr	r3, [pc, #92]	; (1a98 <adc_setSampleRate+0x70>)
    1a3a:	58e3      	ldr	r3, [r4, r3]
    1a3c:	781b      	ldrb	r3, [r3, #0]
    1a3e:	2b00      	cmp	r3, #0
    1a40:	d002      	beq.n	1a48 <adc_setSampleRate+0x20>
    1a42:	2301      	movs	r3, #1
    1a44:	425b      	negs	r3, r3
    1a46:	e021      	b.n	1a8c <adc_setSampleRate+0x64>

	uint8_t data = clk2;
    1a48:	230f      	movs	r3, #15
    1a4a:	18fb      	adds	r3, r7, r3
    1a4c:	2220      	movs	r2, #32
    1a4e:	701a      	strb	r2, [r3, #0]
	data |= rate;
    1a50:	230f      	movs	r3, #15
    1a52:	18fb      	adds	r3, r7, r3
    1a54:	220f      	movs	r2, #15
    1a56:	18b9      	adds	r1, r7, r2
    1a58:	1dfa      	adds	r2, r7, #7
    1a5a:	7809      	ldrb	r1, [r1, #0]
    1a5c:	7812      	ldrb	r2, [r2, #0]
    1a5e:	430a      	orrs	r2, r1
    1a60:	701a      	strb	r2, [r3, #0]
	if (adc_spi_writeReg(ADDR_CLK2, data) == -1) return -1;
    1a62:	220e      	movs	r2, #14
    1a64:	230f      	movs	r3, #15
    1a66:	18fb      	adds	r3, r7, r3
    1a68:	781b      	ldrb	r3, [r3, #0]
    1a6a:	0019      	movs	r1, r3
    1a6c:	0010      	movs	r0, r2
    1a6e:	4b0b      	ldr	r3, [pc, #44]	; (1a9c <adc_setSampleRate+0x74>)
    1a70:	58e3      	ldr	r3, [r4, r3]
    1a72:	4798      	blx	r3
    1a74:	0003      	movs	r3, r0
    1a76:	3301      	adds	r3, #1
    1a78:	d102      	bne.n	1a80 <adc_setSampleRate+0x58>
    1a7a:	2301      	movs	r3, #1
    1a7c:	425b      	negs	r3, r3
    1a7e:	e005      	b.n	1a8c <adc_setSampleRate+0x64>
	adc_sampleRate = rate;
    1a80:	4b07      	ldr	r3, [pc, #28]	; (1aa0 <adc_setSampleRate+0x78>)
    1a82:	58e3      	ldr	r3, [r4, r3]
    1a84:	1dfa      	adds	r2, r7, #7
    1a86:	7812      	ldrb	r2, [r2, #0]
    1a88:	701a      	strb	r2, [r3, #0]
	
	return 0;
    1a8a:	2300      	movs	r3, #0
}
    1a8c:	0018      	movs	r0, r3
    1a8e:	46bd      	mov	sp, r7
    1a90:	b005      	add	sp, #20
    1a92:	bd90      	pop	{r4, r7, pc}
    1a94:	0000d9fa 	.word	0x0000d9fa
    1a98:	00000318 	.word	0x00000318
    1a9c:	00000214 	.word	0x00000214
    1aa0:	000002fc 	.word	0x000002fc

00001aa4 <adc_init>:
	return adc_sampleRate;
};


// startup and configure the adc
int adc_init(int gclk_hz) {
    1aa4:	b590      	push	{r4, r7, lr}
    1aa6:	b085      	sub	sp, #20
    1aa8:	af00      	add	r7, sp, #0
    1aaa:	6078      	str	r0, [r7, #4]
    1aac:	4c4b      	ldr	r4, [pc, #300]	; (1bdc <adc_init+0x138>)
    1aae:	447c      	add	r4, pc

	adc_fifo_init();
    1ab0:	4b4b      	ldr	r3, [pc, #300]	; (1be0 <adc_init+0x13c>)
    1ab2:	58e3      	ldr	r3, [r4, r3]
    1ab4:	4798      	blx	r3
	if (adc_peripheralConfig(gclk_hz))	fatal_error(2,"ADC peripheral config failed.\n");
    1ab6:	687b      	ldr	r3, [r7, #4]
    1ab8:	0018      	movs	r0, r3
    1aba:	4b4a      	ldr	r3, [pc, #296]	; (1be4 <adc_init+0x140>)
    1abc:	58e3      	ldr	r3, [r4, r3]
    1abe:	4798      	blx	r3
    1ac0:	1e03      	subs	r3, r0, #0
    1ac2:	d006      	beq.n	1ad2 <adc_init+0x2e>
    1ac4:	4b48      	ldr	r3, [pc, #288]	; (1be8 <adc_init+0x144>)
    1ac6:	447b      	add	r3, pc
    1ac8:	0019      	movs	r1, r3
    1aca:	2002      	movs	r0, #2
    1acc:	4b47      	ldr	r3, [pc, #284]	; (1bec <adc_init+0x148>)
    1ace:	58e3      	ldr	r3, [r4, r3]
    1ad0:	4798      	blx	r3

	// Setup procedure
	if (adc_reset())					fatal_error(2,"ADC init reset failed.\n");
    1ad2:	4b47      	ldr	r3, [pc, #284]	; (1bf0 <adc_init+0x14c>)
    1ad4:	58e3      	ldr	r3, [r4, r3]
    1ad6:	4798      	blx	r3
    1ad8:	1e03      	subs	r3, r0, #0
    1ada:	d006      	beq.n	1aea <adc_init+0x46>
    1adc:	4b45      	ldr	r3, [pc, #276]	; (1bf4 <adc_init+0x150>)
    1ade:	447b      	add	r3, pc
    1ae0:	0019      	movs	r1, r3
    1ae2:	2002      	movs	r0, #2
    1ae4:	4b41      	ldr	r3, [pc, #260]	; (1bec <adc_init+0x148>)
    1ae6:	58e3      	ldr	r3, [r4, r3]
    1ae8:	4798      	blx	r3
	if (adc_command(COMMAND_UNLOCK))	fatal_error(2,"ADC init unlock failed.\n");
    1aea:	4b43      	ldr	r3, [pc, #268]	; (1bf8 <adc_init+0x154>)
    1aec:	0018      	movs	r0, r3
    1aee:	4b43      	ldr	r3, [pc, #268]	; (1bfc <adc_init+0x158>)
    1af0:	58e3      	ldr	r3, [r4, r3]
    1af2:	4798      	blx	r3
    1af4:	1e03      	subs	r3, r0, #0
    1af6:	d006      	beq.n	1b06 <adc_init+0x62>
    1af8:	4b41      	ldr	r3, [pc, #260]	; (1c00 <adc_init+0x15c>)
    1afa:	447b      	add	r3, pc
    1afc:	0019      	movs	r1, r3
    1afe:	2002      	movs	r0, #2
    1b00:	4b3a      	ldr	r3, [pc, #232]	; (1bec <adc_init+0x148>)
    1b02:	58e3      	ldr	r3, [r4, r3]
    1b04:	4798      	blx	r3
	if (adc_configure())				fatal_error(2,"ADC init config failed.\n");
    1b06:	4b3f      	ldr	r3, [pc, #252]	; (1c04 <adc_init+0x160>)
    1b08:	58e3      	ldr	r3, [r4, r3]
    1b0a:	4798      	blx	r3
    1b0c:	1e03      	subs	r3, r0, #0
    1b0e:	d006      	beq.n	1b1e <adc_init+0x7a>
    1b10:	4b3d      	ldr	r3, [pc, #244]	; (1c08 <adc_init+0x164>)
    1b12:	447b      	add	r3, pc
    1b14:	0019      	movs	r1, r3
    1b16:	2002      	movs	r0, #2
    1b18:	4b34      	ldr	r3, [pc, #208]	; (1bec <adc_init+0x148>)
    1b1a:	58e3      	ldr	r3, [r4, r3]
    1b1c:	4798      	blx	r3
	if (adc_setSampleRate(RATE_2000))	fatal_error(2,"ADC init sample rate failed.\n");
    1b1e:	2001      	movs	r0, #1
    1b20:	4b3a      	ldr	r3, [pc, #232]	; (1c0c <adc_init+0x168>)
    1b22:	58e3      	ldr	r3, [r4, r3]
    1b24:	4798      	blx	r3
    1b26:	1e03      	subs	r3, r0, #0
    1b28:	d006      	beq.n	1b38 <adc_init+0x94>
    1b2a:	4b39      	ldr	r3, [pc, #228]	; (1c10 <adc_init+0x16c>)
    1b2c:	447b      	add	r3, pc
    1b2e:	0019      	movs	r1, r3
    1b30:	2002      	movs	r0, #2
    1b32:	4b2e      	ldr	r3, [pc, #184]	; (1bec <adc_init+0x148>)
    1b34:	58e3      	ldr	r3, [r4, r3]
    1b36:	4798      	blx	r3
	if (adc_command(COMMAND_WAKEUP))	fatal_error(2,"ADC init wakeup failed.\n");
    1b38:	2333      	movs	r3, #51	; 0x33
    1b3a:	0018      	movs	r0, r3
    1b3c:	4b2f      	ldr	r3, [pc, #188]	; (1bfc <adc_init+0x158>)
    1b3e:	58e3      	ldr	r3, [r4, r3]
    1b40:	4798      	blx	r3
    1b42:	1e03      	subs	r3, r0, #0
    1b44:	d006      	beq.n	1b54 <adc_init+0xb0>
    1b46:	4b33      	ldr	r3, [pc, #204]	; (1c14 <adc_init+0x170>)
    1b48:	447b      	add	r3, pc
    1b4a:	0019      	movs	r1, r3
    1b4c:	2002      	movs	r0, #2
    1b4e:	4b27      	ldr	r3, [pc, #156]	; (1bec <adc_init+0x148>)
    1b50:	58e3      	ldr	r3, [r4, r3]
    1b52:	4798      	blx	r3
	if (adc_command(COMMAND_LOCK))		fatal_error(2,"ADC init lock failed.\n");
    1b54:	4b30      	ldr	r3, [pc, #192]	; (1c18 <adc_init+0x174>)
    1b56:	0018      	movs	r0, r3
    1b58:	4b28      	ldr	r3, [pc, #160]	; (1bfc <adc_init+0x158>)
    1b5a:	58e3      	ldr	r3, [r4, r3]
    1b5c:	4798      	blx	r3
    1b5e:	1e03      	subs	r3, r0, #0
    1b60:	d006      	beq.n	1b70 <adc_init+0xcc>
    1b62:	4b2e      	ldr	r3, [pc, #184]	; (1c1c <adc_init+0x178>)
    1b64:	447b      	add	r3, pc
    1b66:	0019      	movs	r1, r3
    1b68:	2002      	movs	r0, #2
    1b6a:	4b20      	ldr	r3, [pc, #128]	; (1bec <adc_init+0x148>)
    1b6c:	58e3      	ldr	r3, [r4, r3]
    1b6e:	4798      	blx	r3
	
	// clear and check faults
	union AdcFaultCode fcode;
	fcode.all = 0;
    1b70:	2300      	movs	r3, #0
    1b72:	60fb      	str	r3, [r7, #12]
	if (adc_fault(&fcode))				fatal_error(2,"ADC init fault check failed.\n");
    1b74:	230c      	movs	r3, #12
    1b76:	18fb      	adds	r3, r7, r3
    1b78:	0018      	movs	r0, r3
    1b7a:	4b29      	ldr	r3, [pc, #164]	; (1c20 <adc_init+0x17c>)
    1b7c:	58e3      	ldr	r3, [r4, r3]
    1b7e:	4798      	blx	r3
    1b80:	1e03      	subs	r3, r0, #0
    1b82:	d006      	beq.n	1b92 <adc_init+0xee>
    1b84:	4b27      	ldr	r3, [pc, #156]	; (1c24 <adc_init+0x180>)
    1b86:	447b      	add	r3, pc
    1b88:	0019      	movs	r1, r3
    1b8a:	2002      	movs	r0, #2
    1b8c:	4b17      	ldr	r3, [pc, #92]	; (1bec <adc_init+0x148>)
    1b8e:	58e3      	ldr	r3, [r4, r3]
    1b90:	4798      	blx	r3
	if (adc_fault(&fcode))				fatal_error(2,"ADC init fault check failed.\n");
    1b92:	230c      	movs	r3, #12
    1b94:	18fb      	adds	r3, r7, r3
    1b96:	0018      	movs	r0, r3
    1b98:	4b21      	ldr	r3, [pc, #132]	; (1c20 <adc_init+0x17c>)
    1b9a:	58e3      	ldr	r3, [r4, r3]
    1b9c:	4798      	blx	r3
    1b9e:	1e03      	subs	r3, r0, #0
    1ba0:	d006      	beq.n	1bb0 <adc_init+0x10c>
    1ba2:	4b21      	ldr	r3, [pc, #132]	; (1c28 <adc_init+0x184>)
    1ba4:	447b      	add	r3, pc
    1ba6:	0019      	movs	r1, r3
    1ba8:	2002      	movs	r0, #2
    1baa:	4b10      	ldr	r3, [pc, #64]	; (1bec <adc_init+0x148>)
    1bac:	58e3      	ldr	r3, [r4, r3]
    1bae:	4798      	blx	r3
	if (fcode.all) {
    1bb0:	68fb      	ldr	r3, [r7, #12]
    1bb2:	2b00      	cmp	r3, #0
    1bb4:	d008      	beq.n	1bc8 <adc_init+0x124>
		fatal_error(1,"ADC has faults after init: 0x%04x\n", fcode.all);
    1bb6:	68fb      	ldr	r3, [r7, #12]
    1bb8:	4a1c      	ldr	r2, [pc, #112]	; (1c2c <adc_init+0x188>)
    1bba:	447a      	add	r2, pc
    1bbc:	0011      	movs	r1, r2
    1bbe:	001a      	movs	r2, r3
    1bc0:	2001      	movs	r0, #1
    1bc2:	4b0a      	ldr	r3, [pc, #40]	; (1bec <adc_init+0x148>)
    1bc4:	58e3      	ldr	r3, [r4, r3]
    1bc6:	4798      	blx	r3
	}
	debug_print("ADC init success.\n");
    1bc8:	4b19      	ldr	r3, [pc, #100]	; (1c30 <adc_init+0x18c>)
    1bca:	447b      	add	r3, pc
    1bcc:	0018      	movs	r0, r3
    1bce:	4b19      	ldr	r3, [pc, #100]	; (1c34 <adc_init+0x190>)
    1bd0:	58e3      	ldr	r3, [r4, r3]
    1bd2:	4798      	blx	r3
	
	adc_start();
    1bd4:	4b18      	ldr	r3, [pc, #96]	; (1c38 <adc_init+0x194>)
    1bd6:	58e3      	ldr	r3, [r4, r3]
    1bd8:	4798      	blx	r3

	while(1) {
    1bda:	e7fe      	b.n	1bda <adc_init+0x136>
    1bdc:	0000d982 	.word	0x0000d982
    1be0:	0000021c 	.word	0x0000021c
    1be4:	00000004 	.word	0x00000004
    1be8:	0000d1e6 	.word	0x0000d1e6
    1bec:	000002e0 	.word	0x000002e0
    1bf0:	00000294 	.word	0x00000294
    1bf4:	0000d1ee 	.word	0x0000d1ee
    1bf8:	00000655 	.word	0x00000655
    1bfc:	000000a4 	.word	0x000000a4
    1c00:	0000d1ea 	.word	0x0000d1ea
    1c04:	00000190 	.word	0x00000190
    1c08:	0000d1ee 	.word	0x0000d1ee
    1c0c:	00000040 	.word	0x00000040
    1c10:	0000d1f0 	.word	0x0000d1f0
    1c14:	0000d1f4 	.word	0x0000d1f4
    1c18:	00000555 	.word	0x00000555
    1c1c:	0000d1f4 	.word	0x0000d1f4
    1c20:	000001e4 	.word	0x000001e4
    1c24:	0000d1ea 	.word	0x0000d1ea
    1c28:	0000d1cc 	.word	0x0000d1cc
    1c2c:	0000d1d6 	.word	0x0000d1d6
    1c30:	0000d1ea 	.word	0x0000d1ea
    1c34:	00000200 	.word	0x00000200
    1c38:	0000017c 	.word	0x0000017c

00001c3c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
    1c3c:	b590      	push	{r4, r7, lr}
    1c3e:	b083      	sub	sp, #12
    1c40:	af00      	add	r7, sp, #0
    1c42:	4c19      	ldr	r4, [pc, #100]	; (1ca8 <EVSYS_Handler+0x6c>)
    1c44:	447c      	add	r4, pc
	struct events_hook *current_hook = _events_inst.hook_list;
    1c46:	4b19      	ldr	r3, [pc, #100]	; (1cac <EVSYS_Handler+0x70>)
    1c48:	58e3      	ldr	r3, [r4, r3]
    1c4a:	691b      	ldr	r3, [r3, #16]
    1c4c:	607b      	str	r3, [r7, #4]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
    1c4e:	4b18      	ldr	r3, [pc, #96]	; (1cb0 <EVSYS_Handler+0x74>)
    1c50:	699b      	ldr	r3, [r3, #24]
    1c52:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer |= flag;
    1c54:	4b15      	ldr	r3, [pc, #84]	; (1cac <EVSYS_Handler+0x70>)
    1c56:	58e3      	ldr	r3, [r4, r3]
    1c58:	689a      	ldr	r2, [r3, #8]
    1c5a:	683b      	ldr	r3, [r7, #0]
    1c5c:	431a      	orrs	r2, r3
    1c5e:	4b13      	ldr	r3, [pc, #76]	; (1cac <EVSYS_Handler+0x70>)
    1c60:	58e3      	ldr	r3, [r4, r3]
    1c62:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
    1c64:	4b12      	ldr	r3, [pc, #72]	; (1cb0 <EVSYS_Handler+0x74>)
    1c66:	4a13      	ldr	r2, [pc, #76]	; (1cb4 <EVSYS_Handler+0x78>)
    1c68:	619a      	str	r2, [r3, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
    1c6a:	e008      	b.n	1c7e <EVSYS_Handler+0x42>
		current_hook->hook_func(current_hook->resource);
    1c6c:	687b      	ldr	r3, [r7, #4]
    1c6e:	685a      	ldr	r2, [r3, #4]
    1c70:	687b      	ldr	r3, [r7, #4]
    1c72:	681b      	ldr	r3, [r3, #0]
    1c74:	0018      	movs	r0, r3
    1c76:	4790      	blx	r2
		current_hook = current_hook->next;
    1c78:	687b      	ldr	r3, [r7, #4]
    1c7a:	689b      	ldr	r3, [r3, #8]
    1c7c:	607b      	str	r3, [r7, #4]
	while (current_hook != NULL) {
    1c7e:	687b      	ldr	r3, [r7, #4]
    1c80:	2b00      	cmp	r3, #0
    1c82:	d1f3      	bne.n	1c6c <EVSYS_Handler+0x30>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
    1c84:	4b09      	ldr	r3, [pc, #36]	; (1cac <EVSYS_Handler+0x70>)
    1c86:	58e3      	ldr	r3, [r4, r3]
    1c88:	68db      	ldr	r3, [r3, #12]
    1c8a:	603b      	str	r3, [r7, #0]
	_events_inst.interrupt_flag_buffer &= ~flag;
    1c8c:	4b07      	ldr	r3, [pc, #28]	; (1cac <EVSYS_Handler+0x70>)
    1c8e:	58e3      	ldr	r3, [r4, r3]
    1c90:	689b      	ldr	r3, [r3, #8]
    1c92:	683a      	ldr	r2, [r7, #0]
    1c94:	43d2      	mvns	r2, r2
    1c96:	401a      	ands	r2, r3
    1c98:	4b04      	ldr	r3, [pc, #16]	; (1cac <EVSYS_Handler+0x70>)
    1c9a:	58e3      	ldr	r3, [r4, r3]
    1c9c:	609a      	str	r2, [r3, #8]
}
    1c9e:	46c0      	nop			; (mov r8, r8)
    1ca0:	46bd      	mov	sp, r7
    1ca2:	b003      	add	sp, #12
    1ca4:	bd90      	pop	{r4, r7, pc}
    1ca6:	46c0      	nop			; (mov r8, r8)
    1ca8:	0000d7ec 	.word	0x0000d7ec
    1cac:	00000048 	.word	0x00000048
    1cb0:	42000400 	.word	0x42000400
    1cb4:	0f0fffff 	.word	0x0f0fffff

00001cb8 <system_gclk_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
static inline void system_gclk_chan_get_config_defaults(
		struct system_gclk_chan_config *const config)
{
    1cb8:	b580      	push	{r7, lr}
    1cba:	b082      	sub	sp, #8
    1cbc:	af00      	add	r7, sp, #0
    1cbe:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
    1cc0:	687b      	ldr	r3, [r7, #4]
    1cc2:	2200      	movs	r2, #0
    1cc4:	701a      	strb	r2, [r3, #0]
}
    1cc6:	46c0      	nop			; (mov r8, r8)
    1cc8:	46bd      	mov	sp, r7
    1cca:	b002      	add	sp, #8
    1ccc:	bd80      	pop	{r7, pc}
	...

00001cd0 <system_apb_clock_set_mask>:
 * \retval STATUS_OK               The clock mask was set successfully
 */
static inline enum status_code system_apb_clock_set_mask(
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
    1cd0:	b580      	push	{r7, lr}
    1cd2:	b082      	sub	sp, #8
    1cd4:	af00      	add	r7, sp, #0
    1cd6:	0002      	movs	r2, r0
    1cd8:	6039      	str	r1, [r7, #0]
    1cda:	1dfb      	adds	r3, r7, #7
    1cdc:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    1cde:	1dfb      	adds	r3, r7, #7
    1ce0:	781b      	ldrb	r3, [r3, #0]
    1ce2:	2b01      	cmp	r3, #1
    1ce4:	d00a      	beq.n	1cfc <system_apb_clock_set_mask+0x2c>
    1ce6:	2b02      	cmp	r3, #2
    1ce8:	d00f      	beq.n	1d0a <system_apb_clock_set_mask+0x3a>
    1cea:	2b00      	cmp	r3, #0
    1cec:	d114      	bne.n	1d18 <system_apb_clock_set_mask+0x48>
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
    1cee:	4b0e      	ldr	r3, [pc, #56]	; (1d28 <system_apb_clock_set_mask+0x58>)
    1cf0:	4a0d      	ldr	r2, [pc, #52]	; (1d28 <system_apb_clock_set_mask+0x58>)
    1cf2:	6991      	ldr	r1, [r2, #24]
    1cf4:	683a      	ldr	r2, [r7, #0]
    1cf6:	430a      	orrs	r2, r1
    1cf8:	619a      	str	r2, [r3, #24]
			break;
    1cfa:	e00f      	b.n	1d1c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
    1cfc:	4b0a      	ldr	r3, [pc, #40]	; (1d28 <system_apb_clock_set_mask+0x58>)
    1cfe:	4a0a      	ldr	r2, [pc, #40]	; (1d28 <system_apb_clock_set_mask+0x58>)
    1d00:	69d1      	ldr	r1, [r2, #28]
    1d02:	683a      	ldr	r2, [r7, #0]
    1d04:	430a      	orrs	r2, r1
    1d06:	61da      	str	r2, [r3, #28]
			break;
    1d08:	e008      	b.n	1d1c <system_apb_clock_set_mask+0x4c>

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
    1d0a:	4b07      	ldr	r3, [pc, #28]	; (1d28 <system_apb_clock_set_mask+0x58>)
    1d0c:	4a06      	ldr	r2, [pc, #24]	; (1d28 <system_apb_clock_set_mask+0x58>)
    1d0e:	6a11      	ldr	r1, [r2, #32]
    1d10:	683a      	ldr	r2, [r7, #0]
    1d12:	430a      	orrs	r2, r1
    1d14:	621a      	str	r2, [r3, #32]
			break;
    1d16:	e001      	b.n	1d1c <system_apb_clock_set_mask+0x4c>

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1d18:	2317      	movs	r3, #23
    1d1a:	e000      	b.n	1d1e <system_apb_clock_set_mask+0x4e>

	}

	return STATUS_OK;
    1d1c:	2300      	movs	r3, #0
}
    1d1e:	0018      	movs	r0, r3
    1d20:	46bd      	mov	sp, r7
    1d22:	b002      	add	sp, #8
    1d24:	bd80      	pop	{r7, pc}
    1d26:	46c0      	nop			; (mov r8, r8)
    1d28:	40000400 	.word	0x40000400

00001d2c <system_interrupt_enter_critical_section>:
{
    1d2c:	b580      	push	{r7, lr}
    1d2e:	af00      	add	r7, sp, #0
    1d30:	4a03      	ldr	r2, [pc, #12]	; (1d40 <system_interrupt_enter_critical_section+0x14>)
    1d32:	447a      	add	r2, pc
	cpu_irq_enter_critical();
    1d34:	4b03      	ldr	r3, [pc, #12]	; (1d44 <system_interrupt_enter_critical_section+0x18>)
    1d36:	58d3      	ldr	r3, [r2, r3]
    1d38:	4798      	blx	r3
}
    1d3a:	46c0      	nop			; (mov r8, r8)
    1d3c:	46bd      	mov	sp, r7
    1d3e:	bd80      	pop	{r7, pc}
    1d40:	0000d6fe 	.word	0x0000d6fe
    1d44:	00000108 	.word	0x00000108

00001d48 <system_interrupt_leave_critical_section>:
{
    1d48:	b580      	push	{r7, lr}
    1d4a:	af00      	add	r7, sp, #0
    1d4c:	4a03      	ldr	r2, [pc, #12]	; (1d5c <system_interrupt_leave_critical_section+0x14>)
    1d4e:	447a      	add	r2, pc
	cpu_irq_leave_critical();
    1d50:	4b03      	ldr	r3, [pc, #12]	; (1d60 <system_interrupt_leave_critical_section+0x18>)
    1d52:	58d3      	ldr	r3, [r2, r3]
    1d54:	4798      	blx	r3
}
    1d56:	46c0      	nop			; (mov r8, r8)
    1d58:	46bd      	mov	sp, r7
    1d5a:	bd80      	pop	{r7, pc}
    1d5c:	0000d6e2 	.word	0x0000d6e2
    1d60:	00000014 	.word	0x00000014

00001d64 <_events_find_first_free_channel_and_allocate>:

	return pos;
}

static uint8_t _events_find_first_free_channel_and_allocate(void)
{
    1d64:	b590      	push	{r4, r7, lr}
    1d66:	b085      	sub	sp, #20
    1d68:	af00      	add	r7, sp, #0
    1d6a:	4c28      	ldr	r4, [pc, #160]	; (1e0c <_events_find_first_free_channel_and_allocate+0xa8>)
    1d6c:	447c      	add	r4, pc
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
    1d6e:	1dfb      	adds	r3, r7, #7
    1d70:	2200      	movs	r2, #0
    1d72:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
    1d74:	4b26      	ldr	r3, [pc, #152]	; (1e10 <_events_find_first_free_channel_and_allocate+0xac>)
    1d76:	447b      	add	r3, pc
    1d78:	4798      	blx	r3

	tmp = _events_inst.allocated_channels;
    1d7a:	4b26      	ldr	r3, [pc, #152]	; (1e14 <_events_find_first_free_channel_and_allocate+0xb0>)
    1d7c:	58e3      	ldr	r3, [r4, r3]
    1d7e:	681b      	ldr	r3, [r3, #0]
    1d80:	60bb      	str	r3, [r7, #8]

	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    1d82:	230f      	movs	r3, #15
    1d84:	18fb      	adds	r3, r7, r3
    1d86:	2200      	movs	r2, #0
    1d88:	701a      	strb	r2, [r3, #0]
    1d8a:	e026      	b.n	1dda <_events_find_first_free_channel_and_allocate+0x76>

		if(!(tmp & 0x00000001)) {
    1d8c:	68bb      	ldr	r3, [r7, #8]
    1d8e:	2201      	movs	r2, #1
    1d90:	4013      	ands	r3, r2
    1d92:	d118      	bne.n	1dc6 <_events_find_first_free_channel_and_allocate+0x62>
			/* If free channel found, set as allocated and return number */

			_events_inst.allocated_channels |= 1 << count;
    1d94:	4b1f      	ldr	r3, [pc, #124]	; (1e14 <_events_find_first_free_channel_and_allocate+0xb0>)
    1d96:	58e3      	ldr	r3, [r4, r3]
    1d98:	681b      	ldr	r3, [r3, #0]
    1d9a:	220f      	movs	r2, #15
    1d9c:	18ba      	adds	r2, r7, r2
    1d9e:	7812      	ldrb	r2, [r2, #0]
    1da0:	2101      	movs	r1, #1
    1da2:	4091      	lsls	r1, r2
    1da4:	000a      	movs	r2, r1
    1da6:	431a      	orrs	r2, r3
    1da8:	4b1a      	ldr	r3, [pc, #104]	; (1e14 <_events_find_first_free_channel_and_allocate+0xb0>)
    1daa:	58e3      	ldr	r3, [r4, r3]
    1dac:	601a      	str	r2, [r3, #0]
			_events_inst.free_channels--;
    1dae:	4b19      	ldr	r3, [pc, #100]	; (1e14 <_events_find_first_free_channel_and_allocate+0xb0>)
    1db0:	58e3      	ldr	r3, [r4, r3]
    1db2:	791b      	ldrb	r3, [r3, #4]
    1db4:	3b01      	subs	r3, #1
    1db6:	b2da      	uxtb	r2, r3
    1db8:	4b16      	ldr	r3, [pc, #88]	; (1e14 <_events_find_first_free_channel_and_allocate+0xb0>)
    1dba:	58e3      	ldr	r3, [r4, r3]
    1dbc:	711a      	strb	r2, [r3, #4]
			allocated = true;
    1dbe:	1dfb      	adds	r3, r7, #7
    1dc0:	2201      	movs	r2, #1
    1dc2:	701a      	strb	r2, [r3, #0]

			break;
    1dc4:	e00e      	b.n	1de4 <_events_find_first_free_channel_and_allocate+0x80>

		}

		tmp = tmp >> 1;
    1dc6:	68bb      	ldr	r3, [r7, #8]
    1dc8:	085b      	lsrs	r3, r3, #1
    1dca:	60bb      	str	r3, [r7, #8]
	for(count = 0; count < EVSYS_CHANNELS; ++count) {
    1dcc:	230f      	movs	r3, #15
    1dce:	18fb      	adds	r3, r7, r3
    1dd0:	220f      	movs	r2, #15
    1dd2:	18ba      	adds	r2, r7, r2
    1dd4:	7812      	ldrb	r2, [r2, #0]
    1dd6:	3201      	adds	r2, #1
    1dd8:	701a      	strb	r2, [r3, #0]
    1dda:	230f      	movs	r3, #15
    1ddc:	18fb      	adds	r3, r7, r3
    1dde:	781b      	ldrb	r3, [r3, #0]
    1de0:	2b0b      	cmp	r3, #11
    1de2:	d9d3      	bls.n	1d8c <_events_find_first_free_channel_and_allocate+0x28>
	}

	system_interrupt_leave_critical_section();
    1de4:	4b0c      	ldr	r3, [pc, #48]	; (1e18 <_events_find_first_free_channel_and_allocate+0xb4>)
    1de6:	447b      	add	r3, pc
    1de8:	4798      	blx	r3

	if(!allocated) {
    1dea:	1dfb      	adds	r3, r7, #7
    1dec:	781b      	ldrb	r3, [r3, #0]
    1dee:	2201      	movs	r2, #1
    1df0:	4053      	eors	r3, r2
    1df2:	b2db      	uxtb	r3, r3
    1df4:	2b00      	cmp	r3, #0
    1df6:	d001      	beq.n	1dfc <_events_find_first_free_channel_and_allocate+0x98>
		return EVENTS_INVALID_CHANNEL;
    1df8:	23ff      	movs	r3, #255	; 0xff
    1dfa:	e002      	b.n	1e02 <_events_find_first_free_channel_and_allocate+0x9e>
	} else {
		return count;
    1dfc:	230f      	movs	r3, #15
    1dfe:	18fb      	adds	r3, r7, r3
    1e00:	781b      	ldrb	r3, [r3, #0]
	}
}
    1e02:	0018      	movs	r0, r3
    1e04:	46bd      	mov	sp, r7
    1e06:	b005      	add	sp, #20
    1e08:	bd90      	pop	{r4, r7, pc}
    1e0a:	46c0      	nop			; (mov r8, r8)
    1e0c:	0000d6c4 	.word	0x0000d6c4
    1e10:	ffffffb3 	.word	0xffffffb3
    1e14:	00000048 	.word	0x00000048
    1e18:	ffffff5f 	.word	0xffffff5f

00001e1c <_system_events_init>:
#if defined(__GNUC__)
#  pragma GCC diagnostic push
#  pragma GCC diagnostic ignored "-Wmissing-prototypes"
#endif
void _system_events_init(void)
{
    1e1c:	b580      	push	{r7, lr}
    1e1e:	af00      	add	r7, sp, #0
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);
    1e20:	2102      	movs	r1, #2
    1e22:	2002      	movs	r0, #2
    1e24:	4b08      	ldr	r3, [pc, #32]	; (1e48 <_system_events_init+0x2c>)
    1e26:	447b      	add	r3, pc
    1e28:	4798      	blx	r3

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
    1e2a:	4b08      	ldr	r3, [pc, #32]	; (1e4c <_system_events_init+0x30>)
    1e2c:	2201      	movs	r2, #1
    1e2e:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
    1e30:	46c0      	nop			; (mov r8, r8)
    1e32:	4b06      	ldr	r3, [pc, #24]	; (1e4c <_system_events_init+0x30>)
    1e34:	781b      	ldrb	r3, [r3, #0]
    1e36:	b2db      	uxtb	r3, r3
    1e38:	001a      	movs	r2, r3
    1e3a:	2301      	movs	r3, #1
    1e3c:	4013      	ands	r3, r2
    1e3e:	d1f8      	bne.n	1e32 <_system_events_init+0x16>
	}
}
    1e40:	46c0      	nop			; (mov r8, r8)
    1e42:	46bd      	mov	sp, r7
    1e44:	bd80      	pop	{r7, pc}
    1e46:	46c0      	nop			; (mov r8, r8)
    1e48:	fffffea7 	.word	0xfffffea7
    1e4c:	42000400 	.word	0x42000400

00001e50 <events_get_config_defaults>:
#if defined(__GNUC__)
#  pragma GCC diagnostic pop
#endif

void events_get_config_defaults(struct events_config *config)
{
    1e50:	b580      	push	{r7, lr}
    1e52:	b082      	sub	sp, #8
    1e54:	af00      	add	r7, sp, #0
    1e56:	6078      	str	r0, [r7, #4]
	/* Check that config is something other than NULL */
	Assert(config);

	config->edge_detect  = EVENTS_EDGE_DETECT_RISING;
    1e58:	687b      	ldr	r3, [r7, #4]
    1e5a:	2201      	movs	r2, #1
    1e5c:	701a      	strb	r2, [r3, #0]
	config->path         = EVENTS_PATH_SYNCHRONOUS;
    1e5e:	687b      	ldr	r3, [r7, #4]
    1e60:	2200      	movs	r2, #0
    1e62:	705a      	strb	r2, [r3, #1]
	config->generator    = EVSYS_ID_GEN_NONE;
    1e64:	687b      	ldr	r3, [r7, #4]
    1e66:	2200      	movs	r2, #0
    1e68:	709a      	strb	r2, [r3, #2]
	config->clock_source = GCLK_GENERATOR_0;
    1e6a:	687b      	ldr	r3, [r7, #4]
    1e6c:	2200      	movs	r2, #0
    1e6e:	70da      	strb	r2, [r3, #3]
}
    1e70:	46c0      	nop			; (mov r8, r8)
    1e72:	46bd      	mov	sp, r7
    1e74:	b002      	add	sp, #8
    1e76:	bd80      	pop	{r7, pc}

00001e78 <events_allocate>:

enum status_code events_allocate(
		struct events_resource *resource,
		struct events_config *config)
{
    1e78:	b5b0      	push	{r4, r5, r7, lr}
    1e7a:	b084      	sub	sp, #16
    1e7c:	af00      	add	r7, sp, #0
    1e7e:	6078      	str	r0, [r7, #4]
    1e80:	6039      	str	r1, [r7, #0]
    1e82:	4c2e      	ldr	r4, [pc, #184]	; (1f3c <events_allocate+0xc4>)
    1e84:	447c      	add	r4, pc
	uint8_t new_channel;

	Assert(resource);

	new_channel = _events_find_first_free_channel_and_allocate();
    1e86:	230f      	movs	r3, #15
    1e88:	18fd      	adds	r5, r7, r3
    1e8a:	4b2d      	ldr	r3, [pc, #180]	; (1f40 <events_allocate+0xc8>)
    1e8c:	447b      	add	r3, pc
    1e8e:	4798      	blx	r3
    1e90:	0003      	movs	r3, r0
    1e92:	702b      	strb	r3, [r5, #0]

	if(new_channel == EVENTS_INVALID_CHANNEL) {
    1e94:	230f      	movs	r3, #15
    1e96:	18fb      	adds	r3, r7, r3
    1e98:	781b      	ldrb	r3, [r3, #0]
    1e9a:	2bff      	cmp	r3, #255	; 0xff
    1e9c:	d101      	bne.n	1ea2 <events_allocate+0x2a>
		return STATUS_ERR_NOT_FOUND;
    1e9e:	2314      	movs	r3, #20
    1ea0:	e048      	b.n	1f34 <events_allocate+0xbc>
	}

	resource->channel = new_channel;
    1ea2:	687b      	ldr	r3, [r7, #4]
    1ea4:	220f      	movs	r2, #15
    1ea6:	18ba      	adds	r2, r7, r2
    1ea8:	7812      	ldrb	r2, [r2, #0]
    1eaa:	701a      	strb	r2, [r3, #0]

	if (config->path != EVENTS_PATH_ASYNCHRONOUS) {
    1eac:	683b      	ldr	r3, [r7, #0]
    1eae:	785b      	ldrb	r3, [r3, #1]
    1eb0:	2b02      	cmp	r3, #2
    1eb2:	d01f      	beq.n	1ef4 <events_allocate+0x7c>
		/* Set up a GLCK channel to use with the specific channel */
		struct system_gclk_chan_config gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    1eb4:	230c      	movs	r3, #12
    1eb6:	18fb      	adds	r3, r7, r3
    1eb8:	0018      	movs	r0, r3
    1eba:	4b22      	ldr	r3, [pc, #136]	; (1f44 <events_allocate+0xcc>)
    1ebc:	447b      	add	r3, pc
    1ebe:	4798      	blx	r3
		gclk_chan_conf.source_generator =
				(enum gclk_generator)config->clock_source;
    1ec0:	683b      	ldr	r3, [r7, #0]
    1ec2:	78da      	ldrb	r2, [r3, #3]
		gclk_chan_conf.source_generator =
    1ec4:	230c      	movs	r3, #12
    1ec6:	18fb      	adds	r3, r7, r3
    1ec8:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(EVSYS_GCLK_ID_0 + new_channel, &gclk_chan_conf);
    1eca:	230f      	movs	r3, #15
    1ecc:	18fb      	adds	r3, r7, r3
    1ece:	781b      	ldrb	r3, [r3, #0]
    1ed0:	3307      	adds	r3, #7
    1ed2:	b2db      	uxtb	r3, r3
    1ed4:	220c      	movs	r2, #12
    1ed6:	18ba      	adds	r2, r7, r2
    1ed8:	0011      	movs	r1, r2
    1eda:	0018      	movs	r0, r3
    1edc:	4b1a      	ldr	r3, [pc, #104]	; (1f48 <events_allocate+0xd0>)
    1ede:	58e3      	ldr	r3, [r4, r3]
    1ee0:	4798      	blx	r3
		system_gclk_chan_enable(EVSYS_GCLK_ID_0 + new_channel);
    1ee2:	230f      	movs	r3, #15
    1ee4:	18fb      	adds	r3, r7, r3
    1ee6:	781b      	ldrb	r3, [r3, #0]
    1ee8:	3307      	adds	r3, #7
    1eea:	b2db      	uxtb	r3, r3
    1eec:	0018      	movs	r0, r3
    1eee:	4b17      	ldr	r3, [pc, #92]	; (1f4c <events_allocate+0xd4>)
    1ef0:	58e3      	ldr	r3, [r4, r3]
    1ef2:	4798      	blx	r3
	}

	/* Save channel setting and configure it after user multiplexer */
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    1ef4:	230f      	movs	r3, #15
    1ef6:	18fb      	adds	r3, r7, r3
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	220f      	movs	r2, #15
    1efc:	401a      	ands	r2, r3
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    1efe:	683b      	ldr	r3, [r7, #0]
    1f00:	789b      	ldrb	r3, [r3, #2]
    1f02:	041b      	lsls	r3, r3, #16
    1f04:	0019      	movs	r1, r3
    1f06:	23fe      	movs	r3, #254	; 0xfe
    1f08:	03db      	lsls	r3, r3, #15
    1f0a:	400b      	ands	r3, r1
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    1f0c:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_PATH(config->path)         |
    1f0e:	683b      	ldr	r3, [r7, #0]
    1f10:	785b      	ldrb	r3, [r3, #1]
    1f12:	061b      	lsls	r3, r3, #24
    1f14:	0019      	movs	r1, r3
    1f16:	23c0      	movs	r3, #192	; 0xc0
    1f18:	049b      	lsls	r3, r3, #18
    1f1a:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_EVGEN(config->generator)   |
    1f1c:	431a      	orrs	r2, r3
			     EVSYS_CHANNEL_EDGSEL(config->edge_detect);
    1f1e:	683b      	ldr	r3, [r7, #0]
    1f20:	781b      	ldrb	r3, [r3, #0]
    1f22:	069b      	lsls	r3, r3, #26
    1f24:	0019      	movs	r1, r3
    1f26:	23c0      	movs	r3, #192	; 0xc0
    1f28:	051b      	lsls	r3, r3, #20
    1f2a:	400b      	ands	r3, r1
			     EVSYS_CHANNEL_PATH(config->path)         |
    1f2c:	431a      	orrs	r2, r3
	resource->channel_reg = EVSYS_CHANNEL_CHANNEL(new_channel)       |
    1f2e:	687b      	ldr	r3, [r7, #4]
    1f30:	605a      	str	r2, [r3, #4]


	return STATUS_OK;
    1f32:	2300      	movs	r3, #0
}
    1f34:	0018      	movs	r0, r3
    1f36:	46bd      	mov	sp, r7
    1f38:	b004      	add	sp, #16
    1f3a:	bdb0      	pop	{r4, r5, r7, pc}
    1f3c:	0000d5ac 	.word	0x0000d5ac
    1f40:	fffffed5 	.word	0xfffffed5
    1f44:	fffffdf9 	.word	0xfffffdf9
    1f48:	000000d4 	.word	0x000000d4
    1f4c:	00000260 	.word	0x00000260

00001f50 <events_attach_user>:

	return false;
}

enum status_code events_attach_user(struct events_resource *resource, uint8_t user_id)
{
    1f50:	b580      	push	{r7, lr}
    1f52:	b082      	sub	sp, #8
    1f54:	af00      	add	r7, sp, #0
    1f56:	6078      	str	r0, [r7, #4]
    1f58:	000a      	movs	r2, r1
    1f5a:	1cfb      	adds	r3, r7, #3
    1f5c:	701a      	strb	r2, [r3, #0]
	Assert(resource);

	/* First configure user multiplexer: channel number is n + 1 */
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    1f5e:	490f      	ldr	r1, [pc, #60]	; (1f9c <events_attach_user+0x4c>)
    1f60:	687b      	ldr	r3, [r7, #4]
    1f62:	781b      	ldrb	r3, [r3, #0]
    1f64:	b29b      	uxth	r3, r3
    1f66:	3301      	adds	r3, #1
    1f68:	b29b      	uxth	r3, r3
    1f6a:	021b      	lsls	r3, r3, #8
    1f6c:	b29a      	uxth	r2, r3
    1f6e:	23f8      	movs	r3, #248	; 0xf8
    1f70:	015b      	lsls	r3, r3, #5
    1f72:	4013      	ands	r3, r2
    1f74:	b29a      	uxth	r2, r3
			  EVSYS_USER_USER(user_id);
    1f76:	1cfb      	adds	r3, r7, #3
    1f78:	781b      	ldrb	r3, [r3, #0]
    1f7a:	b29b      	uxth	r3, r3
    1f7c:	201f      	movs	r0, #31
    1f7e:	4003      	ands	r3, r0
    1f80:	b29b      	uxth	r3, r3
	EVSYS->USER.reg = EVSYS_USER_CHANNEL(resource->channel + 1) |
    1f82:	4313      	orrs	r3, r2
    1f84:	b29b      	uxth	r3, r3
    1f86:	810b      	strh	r3, [r1, #8]

	/* Then configure the channel */
	EVSYS->CHANNEL.reg = resource->channel_reg;
    1f88:	4a04      	ldr	r2, [pc, #16]	; (1f9c <events_attach_user+0x4c>)
    1f8a:	687b      	ldr	r3, [r7, #4]
    1f8c:	685b      	ldr	r3, [r3, #4]
    1f8e:	6053      	str	r3, [r2, #4]

	return STATUS_OK;
    1f90:	2300      	movs	r3, #0
}
    1f92:	0018      	movs	r0, r3
    1f94:	46bd      	mov	sp, r7
    1f96:	b002      	add	sp, #8
    1f98:	bd80      	pop	{r7, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)
    1f9c:	42000400 	.word	0x42000400

00001fa0 <TCC0_Handler>:
		void TCC##n##_Handler(void) \
		{ \
			_tcc_interrupt_handler(n); \
		}

MREPEAT(TCC_INST_NUM, _TCC_INTERRUPT_HANDLER, 0)
    1fa0:	b580      	push	{r7, lr}
    1fa2:	af00      	add	r7, sp, #0
    1fa4:	4a04      	ldr	r2, [pc, #16]	; (1fb8 <TCC0_Handler+0x18>)
    1fa6:	447a      	add	r2, pc
    1fa8:	2000      	movs	r0, #0
    1faa:	4b04      	ldr	r3, [pc, #16]	; (1fbc <TCC0_Handler+0x1c>)
    1fac:	58d3      	ldr	r3, [r2, r3]
    1fae:	4798      	blx	r3
    1fb0:	46c0      	nop			; (mov r8, r8)
    1fb2:	46bd      	mov	sp, r7
    1fb4:	bd80      	pop	{r7, pc}
    1fb6:	46c0      	nop			; (mov r8, r8)
    1fb8:	0000d48a 	.word	0x0000d48a
    1fbc:	00000064 	.word	0x00000064

00001fc0 <TCC1_Handler>:
    1fc0:	b580      	push	{r7, lr}
    1fc2:	af00      	add	r7, sp, #0
    1fc4:	4a04      	ldr	r2, [pc, #16]	; (1fd8 <TCC1_Handler+0x18>)
    1fc6:	447a      	add	r2, pc
    1fc8:	2001      	movs	r0, #1
    1fca:	4b04      	ldr	r3, [pc, #16]	; (1fdc <TCC1_Handler+0x1c>)
    1fcc:	58d3      	ldr	r3, [r2, r3]
    1fce:	4798      	blx	r3
    1fd0:	46c0      	nop			; (mov r8, r8)
    1fd2:	46bd      	mov	sp, r7
    1fd4:	bd80      	pop	{r7, pc}
    1fd6:	46c0      	nop			; (mov r8, r8)
    1fd8:	0000d46a 	.word	0x0000d46a
    1fdc:	00000064 	.word	0x00000064

00001fe0 <TCC2_Handler>:
    1fe0:	b580      	push	{r7, lr}
    1fe2:	af00      	add	r7, sp, #0
    1fe4:	4a04      	ldr	r2, [pc, #16]	; (1ff8 <TCC2_Handler+0x18>)
    1fe6:	447a      	add	r2, pc
    1fe8:	2002      	movs	r0, #2
    1fea:	4b04      	ldr	r3, [pc, #16]	; (1ffc <TCC2_Handler+0x1c>)
    1fec:	58d3      	ldr	r3, [r2, r3]
    1fee:	4798      	blx	r3
    1ff0:	46c0      	nop			; (mov r8, r8)
    1ff2:	46bd      	mov	sp, r7
    1ff4:	bd80      	pop	{r7, pc}
    1ff6:	46c0      	nop			; (mov r8, r8)
    1ff8:	0000d44a 	.word	0x0000d44a
    1ffc:	00000064 	.word	0x00000064

00002000 <_tcc_interrupt_handler>:
 * \param[in]  module_index  ID of the TCC instance calling the interrupt
 *                           handler
 */
void _tcc_interrupt_handler(
		uint8_t module_index)
{
    2000:	b590      	push	{r4, r7, lr}
    2002:	b087      	sub	sp, #28
    2004:	af00      	add	r7, sp, #0
    2006:	0002      	movs	r2, r0
    2008:	1dfb      	adds	r3, r7, #7
    200a:	701a      	strb	r2, [r3, #0]
    200c:	4c1c      	ldr	r4, [pc, #112]	; (2080 <STACK_SIZE+0x80>)
    200e:	447c      	add	r4, pc
	int i;

	uint32_t interrupt_and_callback_status_mask;

	struct tcc_module *module =
			(struct tcc_module *)_tcc_instances[module_index];
    2010:	1dfb      	adds	r3, r7, #7
    2012:	781a      	ldrb	r2, [r3, #0]
	struct tcc_module *module =
    2014:	4b1b      	ldr	r3, [pc, #108]	; (2084 <STACK_SIZE+0x84>)
    2016:	58e3      	ldr	r3, [r4, r3]
    2018:	0092      	lsls	r2, r2, #2
    201a:	58d3      	ldr	r3, [r2, r3]
    201c:	613b      	str	r3, [r7, #16]

	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    201e:	693b      	ldr	r3, [r7, #16]
    2020:	681b      	ldr	r3, [r3, #0]
    2022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			module->register_callback_mask &
    2024:	693b      	ldr	r3, [r7, #16]
    2026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    2028:	401a      	ands	r2, r3
			module->enable_callback_mask);
    202a:	693b      	ldr	r3, [r7, #16]
    202c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
	interrupt_and_callback_status_mask = (module->hw->INTFLAG.reg &
    202e:	4013      	ands	r3, r2
    2030:	60fb      	str	r3, [r7, #12]

	/* Check if callback interrupt has occured */
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    2032:	2300      	movs	r3, #0
    2034:	617b      	str	r3, [r7, #20]
    2036:	e01b      	b.n	2070 <_tcc_interrupt_handler+0x70>
		if (interrupt_and_callback_status_mask & _tcc_intflag[i]) {
    2038:	4b13      	ldr	r3, [pc, #76]	; (2088 <STACK_SIZE+0x88>)
    203a:	58e3      	ldr	r3, [r4, r3]
    203c:	697a      	ldr	r2, [r7, #20]
    203e:	0092      	lsls	r2, r2, #2
    2040:	58d3      	ldr	r3, [r2, r3]
    2042:	68fa      	ldr	r2, [r7, #12]
    2044:	4013      	ands	r3, r2
    2046:	d010      	beq.n	206a <_tcc_interrupt_handler+0x6a>
			/* Invoke the registered and enabled callback function */
			(module->callback[i])(module);
    2048:	693a      	ldr	r2, [r7, #16]
    204a:	697b      	ldr	r3, [r7, #20]
    204c:	009b      	lsls	r3, r3, #2
    204e:	18d3      	adds	r3, r2, r3
    2050:	3304      	adds	r3, #4
    2052:	681b      	ldr	r3, [r3, #0]
    2054:	693a      	ldr	r2, [r7, #16]
    2056:	0010      	movs	r0, r2
    2058:	4798      	blx	r3
			/* Clear interrupt flag */
			module->hw->INTFLAG.reg = _tcc_intflag[i];
    205a:	693b      	ldr	r3, [r7, #16]
    205c:	681b      	ldr	r3, [r3, #0]
    205e:	4a0a      	ldr	r2, [pc, #40]	; (2088 <STACK_SIZE+0x88>)
    2060:	58a2      	ldr	r2, [r4, r2]
    2062:	6979      	ldr	r1, [r7, #20]
    2064:	0089      	lsls	r1, r1, #2
    2066:	588a      	ldr	r2, [r1, r2]
    2068:	62da      	str	r2, [r3, #44]	; 0x2c
	for (i = 0; i < TCC_CALLBACK_N; i ++) {
    206a:	697b      	ldr	r3, [r7, #20]
    206c:	3301      	adds	r3, #1
    206e:	617b      	str	r3, [r7, #20]
    2070:	697b      	ldr	r3, [r7, #20]
    2072:	2b0b      	cmp	r3, #11
    2074:	dde0      	ble.n	2038 <_tcc_interrupt_handler+0x38>
		}
	}
}
    2076:	46c0      	nop			; (mov r8, r8)
    2078:	46bd      	mov	sp, r7
    207a:	b007      	add	sp, #28
    207c:	bd90      	pop	{r4, r7, pc}
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	0000d422 	.word	0x0000d422
    2084:	0000000c 	.word	0x0000000c
    2088:	00000050 	.word	0x00000050

0000208c <tc_register_callback>:
 */
enum status_code tc_register_callback(
		struct tc_module *const module,
		tc_callback_t callback_func,
		const enum tc_callback callback_type)
{
    208c:	b580      	push	{r7, lr}
    208e:	b084      	sub	sp, #16
    2090:	af00      	add	r7, sp, #0
    2092:	60f8      	str	r0, [r7, #12]
    2094:	60b9      	str	r1, [r7, #8]
    2096:	1dfb      	adds	r3, r7, #7
    2098:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    209a:	1dfb      	adds	r3, r7, #7
    209c:	781a      	ldrb	r2, [r3, #0]
    209e:	68fb      	ldr	r3, [r7, #12]
    20a0:	3202      	adds	r2, #2
    20a2:	0092      	lsls	r2, r2, #2
    20a4:	68b9      	ldr	r1, [r7, #8]
    20a6:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    20a8:	1dfb      	adds	r3, r7, #7
    20aa:	781b      	ldrb	r3, [r3, #0]
    20ac:	2b02      	cmp	r3, #2
    20ae:	d107      	bne.n	20c0 <tc_register_callback+0x34>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    20b0:	68fb      	ldr	r3, [r7, #12]
    20b2:	7e1b      	ldrb	r3, [r3, #24]
    20b4:	2210      	movs	r2, #16
    20b6:	4313      	orrs	r3, r2
    20b8:	b2da      	uxtb	r2, r3
    20ba:	68fb      	ldr	r3, [r7, #12]
    20bc:	761a      	strb	r2, [r3, #24]
    20be:	e019      	b.n	20f4 <tc_register_callback+0x68>
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    20c0:	1dfb      	adds	r3, r7, #7
    20c2:	781b      	ldrb	r3, [r3, #0]
    20c4:	2b03      	cmp	r3, #3
    20c6:	d107      	bne.n	20d8 <tc_register_callback+0x4c>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    20c8:	68fb      	ldr	r3, [r7, #12]
    20ca:	7e1b      	ldrb	r3, [r3, #24]
    20cc:	2220      	movs	r2, #32
    20ce:	4313      	orrs	r3, r2
    20d0:	b2da      	uxtb	r2, r3
    20d2:	68fb      	ldr	r3, [r7, #12]
    20d4:	761a      	strb	r2, [r3, #24]
    20d6:	e00d      	b.n	20f4 <tc_register_callback+0x68>
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    20d8:	68fb      	ldr	r3, [r7, #12]
    20da:	7e1b      	ldrb	r3, [r3, #24]
    20dc:	b25a      	sxtb	r2, r3
    20de:	1dfb      	adds	r3, r7, #7
    20e0:	781b      	ldrb	r3, [r3, #0]
    20e2:	2101      	movs	r1, #1
    20e4:	4099      	lsls	r1, r3
    20e6:	000b      	movs	r3, r1
    20e8:	b25b      	sxtb	r3, r3
    20ea:	4313      	orrs	r3, r2
    20ec:	b25b      	sxtb	r3, r3
    20ee:	b2da      	uxtb	r2, r3
    20f0:	68fb      	ldr	r3, [r7, #12]
    20f2:	761a      	strb	r2, [r3, #24]
	}
	return STATUS_OK;
    20f4:	2300      	movs	r3, #0
}
    20f6:	0018      	movs	r0, r3
    20f8:	46bd      	mov	sp, r7
    20fa:	b004      	add	sp, #16
    20fc:	bd80      	pop	{r7, pc}
	...

00002100 <TC3_Handler>:
#if (SAML21E) || (SAML21G) || (SAMR30E) || (SAMR30G)
	_TC_INTERRUPT_HANDLER(0,0)
	_TC_INTERRUPT_HANDLER(1,1)
	_TC_INTERRUPT_HANDLER(4,2)
#else
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    2100:	b580      	push	{r7, lr}
    2102:	af00      	add	r7, sp, #0
    2104:	4a04      	ldr	r2, [pc, #16]	; (2118 <TC3_Handler+0x18>)
    2106:	447a      	add	r2, pc
    2108:	2000      	movs	r0, #0
    210a:	4b04      	ldr	r3, [pc, #16]	; (211c <TC3_Handler+0x1c>)
    210c:	58d3      	ldr	r3, [r2, r3]
    210e:	4798      	blx	r3
    2110:	46c0      	nop			; (mov r8, r8)
    2112:	46bd      	mov	sp, r7
    2114:	bd80      	pop	{r7, pc}
    2116:	46c0      	nop			; (mov r8, r8)
    2118:	0000d32a 	.word	0x0000d32a
    211c:	000000a0 	.word	0x000000a0

00002120 <TC4_Handler>:
    2120:	b580      	push	{r7, lr}
    2122:	af00      	add	r7, sp, #0
    2124:	4a04      	ldr	r2, [pc, #16]	; (2138 <TC4_Handler+0x18>)
    2126:	447a      	add	r2, pc
    2128:	2001      	movs	r0, #1
    212a:	4b04      	ldr	r3, [pc, #16]	; (213c <TC4_Handler+0x1c>)
    212c:	58d3      	ldr	r3, [r2, r3]
    212e:	4798      	blx	r3
    2130:	46c0      	nop			; (mov r8, r8)
    2132:	46bd      	mov	sp, r7
    2134:	bd80      	pop	{r7, pc}
    2136:	46c0      	nop			; (mov r8, r8)
    2138:	0000d30a 	.word	0x0000d30a
    213c:	000000a0 	.word	0x000000a0

00002140 <TC5_Handler>:
    2140:	b580      	push	{r7, lr}
    2142:	af00      	add	r7, sp, #0
    2144:	4a04      	ldr	r2, [pc, #16]	; (2158 <TC5_Handler+0x18>)
    2146:	447a      	add	r2, pc
    2148:	2002      	movs	r0, #2
    214a:	4b04      	ldr	r3, [pc, #16]	; (215c <TC5_Handler+0x1c>)
    214c:	58d3      	ldr	r3, [r2, r3]
    214e:	4798      	blx	r3
    2150:	46c0      	nop			; (mov r8, r8)
    2152:	46bd      	mov	sp, r7
    2154:	bd80      	pop	{r7, pc}
    2156:	46c0      	nop			; (mov r8, r8)
    2158:	0000d2ea 	.word	0x0000d2ea
    215c:	000000a0 	.word	0x000000a0

00002160 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    2160:	b580      	push	{r7, lr}
    2162:	b084      	sub	sp, #16
    2164:	af00      	add	r7, sp, #0
    2166:	0002      	movs	r2, r0
    2168:	1dfb      	adds	r3, r7, #7
    216a:	701a      	strb	r2, [r3, #0]
    216c:	492b      	ldr	r1, [pc, #172]	; (221c <_tc_interrupt_handler+0xbc>)
    216e:	4479      	add	r1, pc
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
			= (struct tc_module *)_tc_instances[instance];
    2170:	1dfb      	adds	r3, r7, #7
    2172:	781a      	ldrb	r2, [r3, #0]
	struct tc_module *module
    2174:	4b2a      	ldr	r3, [pc, #168]	; (2220 <_tc_interrupt_handler+0xc0>)
    2176:	58cb      	ldr	r3, [r1, r3]
    2178:	0092      	lsls	r2, r2, #2
    217a:	58d3      	ldr	r3, [r2, r3]
    217c:	60fb      	str	r3, [r7, #12]

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    217e:	68fb      	ldr	r3, [r7, #12]
    2180:	681b      	ldr	r3, [r3, #0]
    2182:	7b9b      	ldrb	r3, [r3, #14]
    2184:	b2db      	uxtb	r3, r3
			module->register_callback_mask &
    2186:	68fa      	ldr	r2, [r7, #12]
    2188:	7e12      	ldrb	r2, [r2, #24]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    218a:	4013      	ands	r3, r2
    218c:	b2da      	uxtb	r2, r3
			module->enable_callback_mask;
    218e:	68fb      	ldr	r3, [r7, #12]
    2190:	7e59      	ldrb	r1, [r3, #25]
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    2192:	230b      	movs	r3, #11
    2194:	18fb      	adds	r3, r7, r3
    2196:	400a      	ands	r2, r1
    2198:	701a      	strb	r2, [r3, #0]

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    219a:	230b      	movs	r3, #11
    219c:	18fb      	adds	r3, r7, r3
    219e:	781b      	ldrb	r3, [r3, #0]
    21a0:	2201      	movs	r2, #1
    21a2:	4013      	ands	r3, r2
    21a4:	d008      	beq.n	21b8 <_tc_interrupt_handler+0x58>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    21a6:	68fb      	ldr	r3, [r7, #12]
    21a8:	689b      	ldr	r3, [r3, #8]
    21aa:	68fa      	ldr	r2, [r7, #12]
    21ac:	0010      	movs	r0, r2
    21ae:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    21b0:	68fb      	ldr	r3, [r7, #12]
    21b2:	681b      	ldr	r3, [r3, #0]
    21b4:	2201      	movs	r2, #1
    21b6:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    21b8:	230b      	movs	r3, #11
    21ba:	18fb      	adds	r3, r7, r3
    21bc:	781b      	ldrb	r3, [r3, #0]
    21be:	2202      	movs	r2, #2
    21c0:	4013      	ands	r3, r2
    21c2:	d008      	beq.n	21d6 <_tc_interrupt_handler+0x76>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_ERROR])(module);
    21c4:	68fb      	ldr	r3, [r7, #12]
    21c6:	68db      	ldr	r3, [r3, #12]
    21c8:	68fa      	ldr	r2, [r7, #12]
    21ca:	0010      	movs	r0, r2
    21cc:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    21ce:	68fb      	ldr	r3, [r7, #12]
    21d0:	681b      	ldr	r3, [r3, #0]
    21d2:	2202      	movs	r2, #2
    21d4:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    21d6:	230b      	movs	r3, #11
    21d8:	18fb      	adds	r3, r7, r3
    21da:	781b      	ldrb	r3, [r3, #0]
    21dc:	2210      	movs	r2, #16
    21de:	4013      	ands	r3, r2
    21e0:	d008      	beq.n	21f4 <_tc_interrupt_handler+0x94>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    21e2:	68fb      	ldr	r3, [r7, #12]
    21e4:	691b      	ldr	r3, [r3, #16]
    21e6:	68fa      	ldr	r2, [r7, #12]
    21e8:	0010      	movs	r0, r2
    21ea:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    21ec:	68fb      	ldr	r3, [r7, #12]
    21ee:	681b      	ldr	r3, [r3, #0]
    21f0:	2210      	movs	r2, #16
    21f2:	739a      	strb	r2, [r3, #14]
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    21f4:	230b      	movs	r3, #11
    21f6:	18fb      	adds	r3, r7, r3
    21f8:	781b      	ldrb	r3, [r3, #0]
    21fa:	2220      	movs	r2, #32
    21fc:	4013      	ands	r3, r2
    21fe:	d008      	beq.n	2212 <_tc_interrupt_handler+0xb2>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    2200:	68fb      	ldr	r3, [r7, #12]
    2202:	695b      	ldr	r3, [r3, #20]
    2204:	68fa      	ldr	r2, [r7, #12]
    2206:	0010      	movs	r0, r2
    2208:	4798      	blx	r3
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    220a:	68fb      	ldr	r3, [r7, #12]
    220c:	681b      	ldr	r3, [r3, #0]
    220e:	2220      	movs	r2, #32
    2210:	739a      	strb	r2, [r3, #14]
	}
}
    2212:	46c0      	nop			; (mov r8, r8)
    2214:	46bd      	mov	sp, r7
    2216:	b004      	add	sp, #16
    2218:	bd80      	pop	{r7, pc}
    221a:	46c0      	nop			; (mov r8, r8)
    221c:	0000d2c2 	.word	0x0000d2c2
    2220:	0000016c 	.word	0x0000016c

00002224 <system_gclk_chan_get_config_defaults>:
{
    2224:	b580      	push	{r7, lr}
    2226:	b082      	sub	sp, #8
    2228:	af00      	add	r7, sp, #0
    222a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    222c:	687b      	ldr	r3, [r7, #4]
    222e:	2200      	movs	r2, #0
    2230:	701a      	strb	r2, [r3, #0]
}
    2232:	46c0      	nop			; (mov r8, r8)
    2234:	46bd      	mov	sp, r7
    2236:	b002      	add	sp, #8
    2238:	bd80      	pop	{r7, pc}
	...

0000223c <system_apb_clock_set_mask>:
{
    223c:	b580      	push	{r7, lr}
    223e:	b082      	sub	sp, #8
    2240:	af00      	add	r7, sp, #0
    2242:	0002      	movs	r2, r0
    2244:	6039      	str	r1, [r7, #0]
    2246:	1dfb      	adds	r3, r7, #7
    2248:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    224a:	1dfb      	adds	r3, r7, #7
    224c:	781b      	ldrb	r3, [r3, #0]
    224e:	2b01      	cmp	r3, #1
    2250:	d00a      	beq.n	2268 <system_apb_clock_set_mask+0x2c>
    2252:	2b02      	cmp	r3, #2
    2254:	d00f      	beq.n	2276 <system_apb_clock_set_mask+0x3a>
    2256:	2b00      	cmp	r3, #0
    2258:	d114      	bne.n	2284 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    225a:	4b0e      	ldr	r3, [pc, #56]	; (2294 <system_apb_clock_set_mask+0x58>)
    225c:	4a0d      	ldr	r2, [pc, #52]	; (2294 <system_apb_clock_set_mask+0x58>)
    225e:	6991      	ldr	r1, [r2, #24]
    2260:	683a      	ldr	r2, [r7, #0]
    2262:	430a      	orrs	r2, r1
    2264:	619a      	str	r2, [r3, #24]
			break;
    2266:	e00f      	b.n	2288 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    2268:	4b0a      	ldr	r3, [pc, #40]	; (2294 <system_apb_clock_set_mask+0x58>)
    226a:	4a0a      	ldr	r2, [pc, #40]	; (2294 <system_apb_clock_set_mask+0x58>)
    226c:	69d1      	ldr	r1, [r2, #28]
    226e:	683a      	ldr	r2, [r7, #0]
    2270:	430a      	orrs	r2, r1
    2272:	61da      	str	r2, [r3, #28]
			break;
    2274:	e008      	b.n	2288 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    2276:	4b07      	ldr	r3, [pc, #28]	; (2294 <system_apb_clock_set_mask+0x58>)
    2278:	4a06      	ldr	r2, [pc, #24]	; (2294 <system_apb_clock_set_mask+0x58>)
    227a:	6a11      	ldr	r1, [r2, #32]
    227c:	683a      	ldr	r2, [r7, #0]
    227e:	430a      	orrs	r2, r1
    2280:	621a      	str	r2, [r3, #32]
			break;
    2282:	e001      	b.n	2288 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    2284:	2317      	movs	r3, #23
    2286:	e000      	b.n	228a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    2288:	2300      	movs	r3, #0
}
    228a:	0018      	movs	r0, r3
    228c:	46bd      	mov	sp, r7
    228e:	b002      	add	sp, #8
    2290:	bd80      	pop	{r7, pc}
    2292:	46c0      	nop			; (mov r8, r8)
    2294:	40000400 	.word	0x40000400

00002298 <system_pinmux_get_config_defaults>:
{
    2298:	b580      	push	{r7, lr}
    229a:	b082      	sub	sp, #8
    229c:	af00      	add	r7, sp, #0
    229e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    22a0:	687b      	ldr	r3, [r7, #4]
    22a2:	2280      	movs	r2, #128	; 0x80
    22a4:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    22a6:	687b      	ldr	r3, [r7, #4]
    22a8:	2200      	movs	r2, #0
    22aa:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    22ac:	687b      	ldr	r3, [r7, #4]
    22ae:	2201      	movs	r2, #1
    22b0:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    22b2:	687b      	ldr	r3, [r7, #4]
    22b4:	2200      	movs	r2, #0
    22b6:	70da      	strb	r2, [r3, #3]
}
    22b8:	46c0      	nop			; (mov r8, r8)
    22ba:	46bd      	mov	sp, r7
    22bc:	b002      	add	sp, #8
    22be:	bd80      	pop	{r7, pc}

000022c0 <tc_is_syncing>:
{
    22c0:	b580      	push	{r7, lr}
    22c2:	b084      	sub	sp, #16
    22c4:	af00      	add	r7, sp, #0
    22c6:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    22c8:	687b      	ldr	r3, [r7, #4]
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    22ce:	68fb      	ldr	r3, [r7, #12]
    22d0:	7bdb      	ldrb	r3, [r3, #15]
    22d2:	b2db      	uxtb	r3, r3
    22d4:	001a      	movs	r2, r3
    22d6:	2380      	movs	r3, #128	; 0x80
    22d8:	4013      	ands	r3, r2
    22da:	1e5a      	subs	r2, r3, #1
    22dc:	4193      	sbcs	r3, r2
    22de:	b2db      	uxtb	r3, r3
}
    22e0:	0018      	movs	r0, r3
    22e2:	46bd      	mov	sp, r7
    22e4:	b004      	add	sp, #16
    22e6:	bd80      	pop	{r7, pc}

000022e8 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    22e8:	b590      	push	{r4, r7, lr}
    22ea:	b087      	sub	sp, #28
    22ec:	af00      	add	r7, sp, #0
    22ee:	6078      	str	r0, [r7, #4]
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    22f0:	2308      	movs	r3, #8
    22f2:	18fb      	adds	r3, r7, r3
    22f4:	4a0e      	ldr	r2, [pc, #56]	; (2330 <_tc_get_inst_index+0x48>)
    22f6:	447a      	add	r2, pc
    22f8:	ca13      	ldmia	r2!, {r0, r1, r4}
    22fa:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    22fc:	2300      	movs	r3, #0
    22fe:	617b      	str	r3, [r7, #20]
    2300:	e00d      	b.n	231e <_tc_get_inst_index+0x36>
		if (hw == tc_modules[i]) {
    2302:	2308      	movs	r3, #8
    2304:	18fb      	adds	r3, r7, r3
    2306:	697a      	ldr	r2, [r7, #20]
    2308:	0092      	lsls	r2, r2, #2
    230a:	58d2      	ldr	r2, [r2, r3]
    230c:	687b      	ldr	r3, [r7, #4]
    230e:	429a      	cmp	r2, r3
    2310:	d102      	bne.n	2318 <_tc_get_inst_index+0x30>
			return i;
    2312:	697b      	ldr	r3, [r7, #20]
    2314:	b2db      	uxtb	r3, r3
    2316:	e006      	b.n	2326 <_tc_get_inst_index+0x3e>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    2318:	697b      	ldr	r3, [r7, #20]
    231a:	3301      	adds	r3, #1
    231c:	617b      	str	r3, [r7, #20]
    231e:	697b      	ldr	r3, [r7, #20]
    2320:	2b02      	cmp	r3, #2
    2322:	d9ee      	bls.n	2302 <_tc_get_inst_index+0x1a>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    2324:	2300      	movs	r3, #0
}
    2326:	0018      	movs	r0, r3
    2328:	46bd      	mov	sp, r7
    232a:	b007      	add	sp, #28
    232c:	bd90      	pop	{r4, r7, pc}
    232e:	46c0      	nop			; (mov r8, r8)
    2330:	0000cb02 	.word	0x0000cb02

00002334 <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    2334:	b5b0      	push	{r4, r5, r7, lr}
    2336:	b08c      	sub	sp, #48	; 0x30
    2338:	af00      	add	r7, sp, #0
    233a:	60f8      	str	r0, [r7, #12]
    233c:	60b9      	str	r1, [r7, #8]
    233e:	607a      	str	r2, [r7, #4]
    2340:	4cb1      	ldr	r4, [pc, #708]	; (2608 <tc_init+0x2d4>)
    2342:	447c      	add	r4, pc
	Assert(module_inst);
	Assert(config);

	/* Temporary variable to hold all updates to the CTRLA
	 * register before they are written to it */
	uint16_t ctrla_tmp = 0;
    2344:	232e      	movs	r3, #46	; 0x2e
    2346:	18fb      	adds	r3, r7, r3
    2348:	2200      	movs	r2, #0
    234a:	801a      	strh	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
    234c:	232d      	movs	r3, #45	; 0x2d
    234e:	18fb      	adds	r3, r7, r3
    2350:	2200      	movs	r2, #0
    2352:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold all updates to the CTRLC
	 * register before they are written to it */
	uint8_t ctrlc_tmp = 0;
    2354:	232c      	movs	r3, #44	; 0x2c
    2356:	18fb      	adds	r3, r7, r3
    2358:	2200      	movs	r2, #0
    235a:	701a      	strb	r2, [r3, #0]
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    235c:	2329      	movs	r3, #41	; 0x29
    235e:	18fd      	adds	r5, r7, r3
    2360:	68bb      	ldr	r3, [r7, #8]
    2362:	0018      	movs	r0, r3
    2364:	4ba9      	ldr	r3, [pc, #676]	; (260c <tc_init+0x2d8>)
    2366:	58e3      	ldr	r3, [r4, r3]
    2368:	4798      	blx	r3
    236a:	0003      	movs	r3, r0
    236c:	702b      	strb	r3, [r5, #0]

	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = TC_INST_GCLK_ID;
    236e:	2324      	movs	r3, #36	; 0x24
    2370:	18fa      	adds	r2, r7, r3
    2372:	4ba7      	ldr	r3, [pc, #668]	; (2610 <tc_init+0x2dc>)
    2374:	447b      	add	r3, pc
    2376:	0010      	movs	r0, r2
    2378:	0019      	movs	r1, r3
    237a:	2303      	movs	r3, #3
    237c:	001a      	movs	r2, r3
    237e:	4ba5      	ldr	r3, [pc, #660]	; (2614 <tc_init+0x2e0>)
    2380:	58e3      	ldr	r3, [r4, r3]
    2382:	4798      	blx	r3
	/* Array of PM APBC mask bit position for different TC instances */
	uint16_t inst_pm_apbmask[] = TC_INST_PM_APBCMASK;
    2384:	231c      	movs	r3, #28
    2386:	18fa      	adds	r2, r7, r3
    2388:	4ba3      	ldr	r3, [pc, #652]	; (2618 <tc_init+0x2e4>)
    238a:	447b      	add	r3, pc
    238c:	0010      	movs	r0, r2
    238e:	0019      	movs	r1, r3
    2390:	2306      	movs	r3, #6
    2392:	001a      	movs	r2, r3
    2394:	4b9f      	ldr	r3, [pc, #636]	; (2614 <tc_init+0x2e0>)
    2396:	58e3      	ldr	r3, [r4, r3]
    2398:	4798      	blx	r3
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    239a:	232b      	movs	r3, #43	; 0x2b
    239c:	18fb      	adds	r3, r7, r3
    239e:	2200      	movs	r2, #0
    23a0:	701a      	strb	r2, [r3, #0]
    23a2:	e00e      	b.n	23c2 <tc_init+0x8e>
		module_inst->callback[i]        = NULL;
    23a4:	232b      	movs	r3, #43	; 0x2b
    23a6:	18fb      	adds	r3, r7, r3
    23a8:	781a      	ldrb	r2, [r3, #0]
    23aa:	68fb      	ldr	r3, [r7, #12]
    23ac:	3202      	adds	r2, #2
    23ae:	0092      	lsls	r2, r2, #2
    23b0:	2100      	movs	r1, #0
    23b2:	50d1      	str	r1, [r2, r3]
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
    23b4:	232b      	movs	r3, #43	; 0x2b
    23b6:	18fb      	adds	r3, r7, r3
    23b8:	781a      	ldrb	r2, [r3, #0]
    23ba:	232b      	movs	r3, #43	; 0x2b
    23bc:	18fb      	adds	r3, r7, r3
    23be:	3201      	adds	r2, #1
    23c0:	701a      	strb	r2, [r3, #0]
    23c2:	232b      	movs	r3, #43	; 0x2b
    23c4:	18fb      	adds	r3, r7, r3
    23c6:	781b      	ldrb	r3, [r3, #0]
    23c8:	2b03      	cmp	r3, #3
    23ca:	d9eb      	bls.n	23a4 <tc_init+0x70>
	}
	module_inst->register_callback_mask     = 0x00;
    23cc:	68fb      	ldr	r3, [r7, #12]
    23ce:	2200      	movs	r2, #0
    23d0:	761a      	strb	r2, [r3, #24]
	module_inst->enable_callback_mask       = 0x00;
    23d2:	68fb      	ldr	r3, [r7, #12]
    23d4:	2200      	movs	r2, #0
    23d6:	765a      	strb	r2, [r3, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    23d8:	2329      	movs	r3, #41	; 0x29
    23da:	18fb      	adds	r3, r7, r3
    23dc:	781a      	ldrb	r2, [r3, #0]
    23de:	4b8f      	ldr	r3, [pc, #572]	; (261c <tc_init+0x2e8>)
    23e0:	58e3      	ldr	r3, [r4, r3]
    23e2:	0092      	lsls	r2, r2, #2
    23e4:	68f9      	ldr	r1, [r7, #12]
    23e6:	50d1      	str	r1, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    23e8:	68fb      	ldr	r3, [r7, #12]
    23ea:	68ba      	ldr	r2, [r7, #8]
    23ec:	601a      	str	r2, [r3, #0]
#else
	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    23ee:	687b      	ldr	r3, [r7, #4]
    23f0:	789b      	ldrb	r3, [r3, #2]
    23f2:	2b08      	cmp	r3, #8
    23f4:	d108      	bne.n	2408 <tc_init+0xd4>
			((instance + TC_INSTANCE_OFFSET) & 0x01)) {
    23f6:	2329      	movs	r3, #41	; 0x29
    23f8:	18fb      	adds	r3, r7, r3
    23fa:	781b      	ldrb	r3, [r3, #0]
    23fc:	3303      	adds	r3, #3
    23fe:	2201      	movs	r2, #1
    2400:	4013      	ands	r3, r2
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    2402:	d001      	beq.n	2408 <tc_init+0xd4>
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2404:	2317      	movs	r3, #23
    2406:	e1e5      	b.n	27d4 <tc_init+0x4a0>
#endif

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    2408:	687b      	ldr	r3, [r7, #4]
    240a:	789a      	ldrb	r2, [r3, #2]
    240c:	68fb      	ldr	r3, [r7, #12]
    240e:	711a      	strb	r2, [r3, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    2410:	68bb      	ldr	r3, [r7, #8]
    2412:	881b      	ldrh	r3, [r3, #0]
    2414:	b29b      	uxth	r3, r3
    2416:	001a      	movs	r2, r3
    2418:	2301      	movs	r3, #1
    241a:	4013      	ands	r3, r2
    241c:	d001      	beq.n	2422 <tc_init+0xee>
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    241e:	2305      	movs	r3, #5
    2420:	e1d8      	b.n	27d4 <tc_init+0x4a0>
	}

	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    2422:	68bb      	ldr	r3, [r7, #8]
    2424:	7bdb      	ldrb	r3, [r3, #15]
    2426:	b2db      	uxtb	r3, r3
    2428:	001a      	movs	r2, r3
    242a:	2310      	movs	r3, #16
    242c:	4013      	ands	r3, r2
    242e:	d001      	beq.n	2434 <tc_init+0x100>
		/* Module is used as a slave */
		return STATUS_ERR_DENIED;
    2430:	231c      	movs	r3, #28
    2432:	e1cf      	b.n	27d4 <tc_init+0x4a0>
	}

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    2434:	68bb      	ldr	r3, [r7, #8]
    2436:	881b      	ldrh	r3, [r3, #0]
    2438:	b29b      	uxth	r3, r3
    243a:	001a      	movs	r2, r3
    243c:	2302      	movs	r3, #2
    243e:	4013      	ands	r3, r2
    2440:	d001      	beq.n	2446 <tc_init+0x112>
		/* Module must be disabled before initialization. Abort. */
		return STATUS_ERR_DENIED;
    2442:	231c      	movs	r3, #28
    2444:	e1c6      	b.n	27d4 <tc_init+0x4a0>
	}

	/* Set up the TC PWM out pin for channel 0 */
	if (config->pwm_channel[0].enabled) {
    2446:	687b      	ldr	r3, [r7, #4]
    2448:	7c1b      	ldrb	r3, [r3, #16]
    244a:	2b00      	cmp	r3, #0
    244c:	d019      	beq.n	2482 <tc_init+0x14e>
		system_pinmux_get_config_defaults(&pin_config);
    244e:	2318      	movs	r3, #24
    2450:	18fb      	adds	r3, r7, r3
    2452:	0018      	movs	r0, r3
    2454:	4b72      	ldr	r3, [pc, #456]	; (2620 <tc_init+0x2ec>)
    2456:	447b      	add	r3, pc
    2458:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    245a:	687b      	ldr	r3, [r7, #4]
    245c:	699b      	ldr	r3, [r3, #24]
    245e:	b2da      	uxtb	r2, r3
    2460:	2318      	movs	r3, #24
    2462:	18fb      	adds	r3, r7, r3
    2464:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    2466:	2318      	movs	r3, #24
    2468:	18fb      	adds	r3, r7, r3
    246a:	2201      	movs	r2, #1
    246c:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[0].pin_out, &pin_config);
    246e:	687b      	ldr	r3, [r7, #4]
    2470:	695b      	ldr	r3, [r3, #20]
		system_pinmux_pin_set_config(
    2472:	b2db      	uxtb	r3, r3
    2474:	2218      	movs	r2, #24
    2476:	18ba      	adds	r2, r7, r2
    2478:	0011      	movs	r1, r2
    247a:	0018      	movs	r0, r3
    247c:	4b69      	ldr	r3, [pc, #420]	; (2624 <tc_init+0x2f0>)
    247e:	58e3      	ldr	r3, [r4, r3]
    2480:	4798      	blx	r3
	}

	/* Set up the TC PWM out pin for channel 1 */
	if (config->pwm_channel[1].enabled) {
    2482:	687b      	ldr	r3, [r7, #4]
    2484:	7f1b      	ldrb	r3, [r3, #28]
    2486:	2b00      	cmp	r3, #0
    2488:	d019      	beq.n	24be <tc_init+0x18a>
		system_pinmux_get_config_defaults(&pin_config);
    248a:	2318      	movs	r3, #24
    248c:	18fb      	adds	r3, r7, r3
    248e:	0018      	movs	r0, r3
    2490:	4b65      	ldr	r3, [pc, #404]	; (2628 <tc_init+0x2f4>)
    2492:	447b      	add	r3, pc
    2494:	4798      	blx	r3
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    2496:	687b      	ldr	r3, [r7, #4]
    2498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    249a:	b2da      	uxtb	r2, r3
    249c:	2318      	movs	r3, #24
    249e:	18fb      	adds	r3, r7, r3
    24a0:	701a      	strb	r2, [r3, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    24a2:	2318      	movs	r3, #24
    24a4:	18fb      	adds	r3, r7, r3
    24a6:	2201      	movs	r2, #1
    24a8:	705a      	strb	r2, [r3, #1]
		system_pinmux_pin_set_config(
				config->pwm_channel[1].pin_out, &pin_config);
    24aa:	687b      	ldr	r3, [r7, #4]
    24ac:	6a1b      	ldr	r3, [r3, #32]
		system_pinmux_pin_set_config(
    24ae:	b2db      	uxtb	r3, r3
    24b0:	2218      	movs	r2, #24
    24b2:	18ba      	adds	r2, r7, r2
    24b4:	0011      	movs	r1, r2
    24b6:	0018      	movs	r0, r3
    24b8:	4b5a      	ldr	r3, [pc, #360]	; (2624 <tc_init+0x2f0>)
    24ba:	58e3      	ldr	r3, [r4, r3]
    24bc:	4798      	blx	r3
	}

	/* Enable the user interface clock in the PM */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
			inst_pm_apbmask[instance]);
    24be:	2329      	movs	r3, #41	; 0x29
    24c0:	18fb      	adds	r3, r7, r3
    24c2:	781a      	ldrb	r2, [r3, #0]
    24c4:	231c      	movs	r3, #28
    24c6:	18fb      	adds	r3, r7, r3
    24c8:	0052      	lsls	r2, r2, #1
    24ca:	5ad3      	ldrh	r3, [r2, r3]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    24cc:	0019      	movs	r1, r3
    24ce:	2002      	movs	r0, #2
    24d0:	4b56      	ldr	r3, [pc, #344]	; (262c <tc_init+0x2f8>)
    24d2:	447b      	add	r3, pc
    24d4:	4798      	blx	r3

	/* Enable the slave counter if counter_size is 32-bit */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT))
    24d6:	687b      	ldr	r3, [r7, #4]
    24d8:	789b      	ldrb	r3, [r3, #2]
    24da:	2b08      	cmp	r3, #8
    24dc:	d10c      	bne.n	24f8 <tc_init+0x1c4>
	{
		/* Enable the user interface clock in the PM */
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
				inst_pm_apbmask[instance + 1]);
    24de:	2329      	movs	r3, #41	; 0x29
    24e0:	18fb      	adds	r3, r7, r3
    24e2:	781b      	ldrb	r3, [r3, #0]
    24e4:	1c5a      	adds	r2, r3, #1
    24e6:	231c      	movs	r3, #28
    24e8:	18fb      	adds	r3, r7, r3
    24ea:	0052      	lsls	r2, r2, #1
    24ec:	5ad3      	ldrh	r3, [r2, r3]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC,
    24ee:	0019      	movs	r1, r3
    24f0:	2002      	movs	r0, #2
    24f2:	4b4f      	ldr	r3, [pc, #316]	; (2630 <tc_init+0x2fc>)
    24f4:	447b      	add	r3, pc
    24f6:	4798      	blx	r3
	}

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    24f8:	2314      	movs	r3, #20
    24fa:	18fb      	adds	r3, r7, r3
    24fc:	0018      	movs	r0, r3
    24fe:	4b4d      	ldr	r3, [pc, #308]	; (2634 <tc_init+0x300>)
    2500:	447b      	add	r3, pc
    2502:	4798      	blx	r3
	gclk_chan_config.source_generator = config->clock_source;
    2504:	687b      	ldr	r3, [r7, #4]
    2506:	781a      	ldrb	r2, [r3, #0]
    2508:	2314      	movs	r3, #20
    250a:	18fb      	adds	r3, r7, r3
    250c:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    250e:	2329      	movs	r3, #41	; 0x29
    2510:	18fb      	adds	r3, r7, r3
    2512:	781b      	ldrb	r3, [r3, #0]
    2514:	2224      	movs	r2, #36	; 0x24
    2516:	18ba      	adds	r2, r7, r2
    2518:	5cd3      	ldrb	r3, [r2, r3]
    251a:	2214      	movs	r2, #20
    251c:	18ba      	adds	r2, r7, r2
    251e:	0011      	movs	r1, r2
    2520:	0018      	movs	r0, r3
    2522:	4b45      	ldr	r3, [pc, #276]	; (2638 <tc_init+0x304>)
    2524:	58e3      	ldr	r3, [r4, r3]
    2526:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    2528:	2329      	movs	r3, #41	; 0x29
    252a:	18fb      	adds	r3, r7, r3
    252c:	781b      	ldrb	r3, [r3, #0]
    252e:	2224      	movs	r2, #36	; 0x24
    2530:	18ba      	adds	r2, r7, r2
    2532:	5cd3      	ldrb	r3, [r2, r3]
    2534:	0018      	movs	r0, r3
    2536:	4b41      	ldr	r3, [pc, #260]	; (263c <tc_init+0x308>)
    2538:	58e3      	ldr	r3, [r4, r3]
    253a:	4798      	blx	r3

	/* Set ctrla register */
	ctrla_tmp =
			(uint32_t)config->counter_size |
    253c:	687b      	ldr	r3, [r7, #4]
    253e:	789a      	ldrb	r2, [r3, #2]
			(uint32_t)config->wave_generation |
    2540:	687b      	ldr	r3, [r7, #4]
    2542:	799b      	ldrb	r3, [r3, #6]
    2544:	4313      	orrs	r3, r2
    2546:	b2db      	uxtb	r3, r3
    2548:	b29a      	uxth	r2, r3
			(uint32_t)config->reload_action |
    254a:	687b      	ldr	r3, [r7, #4]
    254c:	891b      	ldrh	r3, [r3, #8]
			(uint32_t)config->wave_generation |
    254e:	4313      	orrs	r3, r2
    2550:	b299      	uxth	r1, r3
			(uint32_t)config->clock_prescaler;
    2552:	687b      	ldr	r3, [r7, #4]
    2554:	889a      	ldrh	r2, [r3, #4]
	ctrla_tmp =
    2556:	232e      	movs	r3, #46	; 0x2e
    2558:	18fb      	adds	r3, r7, r3
    255a:	430a      	orrs	r2, r1
    255c:	801a      	strh	r2, [r3, #0]

	if (config->run_in_standby) {
    255e:	687b      	ldr	r3, [r7, #4]
    2560:	785b      	ldrb	r3, [r3, #1]
    2562:	2b00      	cmp	r3, #0
    2564:	d008      	beq.n	2578 <tc_init+0x244>
		ctrla_tmp |= TC_CTRLA_RUNSTDBY;
    2566:	232e      	movs	r3, #46	; 0x2e
    2568:	18fb      	adds	r3, r7, r3
    256a:	222e      	movs	r2, #46	; 0x2e
    256c:	18ba      	adds	r2, r7, r2
    256e:	8812      	ldrh	r2, [r2, #0]
    2570:	2180      	movs	r1, #128	; 0x80
    2572:	0109      	lsls	r1, r1, #4
    2574:	430a      	orrs	r2, r1
    2576:	801a      	strh	r2, [r3, #0]
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2578:	46c0      	nop			; (mov r8, r8)
    257a:	68fb      	ldr	r3, [r7, #12]
    257c:	0018      	movs	r0, r3
    257e:	4b30      	ldr	r3, [pc, #192]	; (2640 <tc_init+0x30c>)
    2580:	447b      	add	r3, pc
    2582:	4798      	blx	r3
    2584:	1e03      	subs	r3, r0, #0
    2586:	d1f8      	bne.n	257a <tc_init+0x246>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    2588:	68bb      	ldr	r3, [r7, #8]
    258a:	222e      	movs	r2, #46	; 0x2e
    258c:	18ba      	adds	r2, r7, r2
    258e:	8812      	ldrh	r2, [r2, #0]
    2590:	801a      	strh	r2, [r3, #0]

	/* Set ctrlb register */
	if (config->oneshot) {
    2592:	687b      	ldr	r3, [r7, #4]
    2594:	7b5b      	ldrb	r3, [r3, #13]
    2596:	2b00      	cmp	r3, #0
    2598:	d003      	beq.n	25a2 <tc_init+0x26e>
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    259a:	232d      	movs	r3, #45	; 0x2d
    259c:	18fb      	adds	r3, r7, r3
    259e:	2204      	movs	r2, #4
    25a0:	701a      	strb	r2, [r3, #0]
	}

	if (config->count_direction) {
    25a2:	687b      	ldr	r3, [r7, #4]
    25a4:	7b9b      	ldrb	r3, [r3, #14]
    25a6:	2b00      	cmp	r3, #0
    25a8:	d007      	beq.n	25ba <tc_init+0x286>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    25aa:	232d      	movs	r3, #45	; 0x2d
    25ac:	18fb      	adds	r3, r7, r3
    25ae:	222d      	movs	r2, #45	; 0x2d
    25b0:	18ba      	adds	r2, r7, r2
    25b2:	7812      	ldrb	r2, [r2, #0]
    25b4:	2101      	movs	r1, #1
    25b6:	430a      	orrs	r2, r1
    25b8:	701a      	strb	r2, [r3, #0]
	}

	/* Clear old ctrlb configuration */
	while (tc_is_syncing(module_inst)) {
    25ba:	46c0      	nop			; (mov r8, r8)
    25bc:	68fb      	ldr	r3, [r7, #12]
    25be:	0018      	movs	r0, r3
    25c0:	4b20      	ldr	r3, [pc, #128]	; (2644 <tc_init+0x310>)
    25c2:	447b      	add	r3, pc
    25c4:	4798      	blx	r3
    25c6:	1e03      	subs	r3, r0, #0
    25c8:	d1f8      	bne.n	25bc <tc_init+0x288>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    25ca:	68bb      	ldr	r3, [r7, #8]
    25cc:	22ff      	movs	r2, #255	; 0xff
    25ce:	711a      	strb	r2, [r3, #4]

	/* Check if we actually need to go into a wait state. */
	if (ctrlbset_tmp) {
    25d0:	232d      	movs	r3, #45	; 0x2d
    25d2:	18fb      	adds	r3, r7, r3
    25d4:	781b      	ldrb	r3, [r3, #0]
    25d6:	2b00      	cmp	r3, #0
    25d8:	d00c      	beq.n	25f4 <tc_init+0x2c0>
		while (tc_is_syncing(module_inst)) {
    25da:	46c0      	nop			; (mov r8, r8)
    25dc:	68fb      	ldr	r3, [r7, #12]
    25de:	0018      	movs	r0, r3
    25e0:	4b19      	ldr	r3, [pc, #100]	; (2648 <tc_init+0x314>)
    25e2:	447b      	add	r3, pc
    25e4:	4798      	blx	r3
    25e6:	1e03      	subs	r3, r0, #0
    25e8:	d1f8      	bne.n	25dc <tc_init+0x2a8>
			/* Wait for sync */
		}
		/* Write configuration to register */
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    25ea:	68bb      	ldr	r3, [r7, #8]
    25ec:	222d      	movs	r2, #45	; 0x2d
    25ee:	18ba      	adds	r2, r7, r2
    25f0:	7812      	ldrb	r2, [r2, #0]
    25f2:	715a      	strb	r2, [r3, #5]
	}

	/* Set ctrlc register*/
	ctrlc_tmp = config->waveform_invert_output;
    25f4:	232c      	movs	r3, #44	; 0x2c
    25f6:	18fb      	adds	r3, r7, r3
    25f8:	687a      	ldr	r2, [r7, #4]
    25fa:	7a92      	ldrb	r2, [r2, #10]
    25fc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    25fe:	232a      	movs	r3, #42	; 0x2a
    2600:	18fb      	adds	r3, r7, r3
    2602:	2200      	movs	r2, #0
    2604:	701a      	strb	r2, [r3, #0]
    2606:	e03e      	b.n	2686 <tc_init+0x352>
    2608:	0000d0ee 	.word	0x0000d0ee
    260c:	0000013c 	.word	0x0000013c
    2610:	0000ca90 	.word	0x0000ca90
    2614:	000000bc 	.word	0x000000bc
    2618:	0000ca7e 	.word	0x0000ca7e
    261c:	0000016c 	.word	0x0000016c
    2620:	fffffe3f 	.word	0xfffffe3f
    2624:	000002dc 	.word	0x000002dc
    2628:	fffffe03 	.word	0xfffffe03
    262c:	fffffd67 	.word	0xfffffd67
    2630:	fffffd45 	.word	0xfffffd45
    2634:	fffffd21 	.word	0xfffffd21
    2638:	000000d4 	.word	0x000000d4
    263c:	00000260 	.word	0x00000260
    2640:	fffffd3d 	.word	0xfffffd3d
    2644:	fffffcfb 	.word	0xfffffcfb
    2648:	fffffcdb 	.word	0xfffffcdb
		if (config->enable_capture_on_channel[i] == true) {
    264c:	232a      	movs	r3, #42	; 0x2a
    264e:	18fb      	adds	r3, r7, r3
    2650:	781b      	ldrb	r3, [r3, #0]
    2652:	687a      	ldr	r2, [r7, #4]
    2654:	18d3      	adds	r3, r2, r3
    2656:	7adb      	ldrb	r3, [r3, #11]
    2658:	2b00      	cmp	r3, #0
    265a:	d00d      	beq.n	2678 <tc_init+0x344>
			ctrlc_tmp |= (TC_CTRLC_CPTEN(1) << i);
    265c:	232a      	movs	r3, #42	; 0x2a
    265e:	18fb      	adds	r3, r7, r3
    2660:	781b      	ldrb	r3, [r3, #0]
    2662:	2210      	movs	r2, #16
    2664:	409a      	lsls	r2, r3
    2666:	0013      	movs	r3, r2
    2668:	b2d9      	uxtb	r1, r3
    266a:	232c      	movs	r3, #44	; 0x2c
    266c:	18fb      	adds	r3, r7, r3
    266e:	222c      	movs	r2, #44	; 0x2c
    2670:	18ba      	adds	r2, r7, r2
    2672:	7812      	ldrb	r2, [r2, #0]
    2674:	430a      	orrs	r2, r1
    2676:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2678:	232a      	movs	r3, #42	; 0x2a
    267a:	18fb      	adds	r3, r7, r3
    267c:	781a      	ldrb	r2, [r3, #0]
    267e:	232a      	movs	r3, #42	; 0x2a
    2680:	18fb      	adds	r3, r7, r3
    2682:	3201      	adds	r2, #1
    2684:	701a      	strb	r2, [r3, #0]
    2686:	232a      	movs	r3, #42	; 0x2a
    2688:	18fb      	adds	r3, r7, r3
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	2b01      	cmp	r3, #1
    268e:	d9dd      	bls.n	264c <tc_init+0x318>
		}
	}

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    2690:	46c0      	nop			; (mov r8, r8)
    2692:	68fb      	ldr	r3, [r7, #12]
    2694:	0018      	movs	r0, r3
    2696:	4b51      	ldr	r3, [pc, #324]	; (27dc <tc_init+0x4a8>)
    2698:	447b      	add	r3, pc
    269a:	4798      	blx	r3
    269c:	1e03      	subs	r3, r0, #0
    269e:	d1f8      	bne.n	2692 <tc_init+0x35e>
		/* Wait for sync */
	}
	hw->COUNT8.CTRLC.reg = ctrlc_tmp;
    26a0:	68bb      	ldr	r3, [r7, #8]
    26a2:	222c      	movs	r2, #44	; 0x2c
    26a4:	18ba      	adds	r2, r7, r2
    26a6:	7812      	ldrb	r2, [r2, #0]
    26a8:	719a      	strb	r2, [r3, #6]

	/* Write configuration to register */
	while (tc_is_syncing(module_inst)) {
    26aa:	46c0      	nop			; (mov r8, r8)
    26ac:	68fb      	ldr	r3, [r7, #12]
    26ae:	0018      	movs	r0, r3
    26b0:	4b4b      	ldr	r3, [pc, #300]	; (27e0 <tc_init+0x4ac>)
    26b2:	447b      	add	r3, pc
    26b4:	4798      	blx	r3
    26b6:	1e03      	subs	r3, r0, #0
    26b8:	d1f8      	bne.n	26ac <tc_init+0x378>
		/* Wait for sync */
	}

	/* Switch for TC counter size  */
	switch (module_inst->counter_size) {
    26ba:	68fb      	ldr	r3, [r7, #12]
    26bc:	791b      	ldrb	r3, [r3, #4]
    26be:	2b04      	cmp	r3, #4
    26c0:	d005      	beq.n	26ce <tc_init+0x39a>
    26c2:	2b08      	cmp	r3, #8
    26c4:	d100      	bne.n	26c8 <tc_init+0x394>
    26c6:	e05e      	b.n	2786 <tc_init+0x452>
    26c8:	2b00      	cmp	r3, #0
    26ca:	d036      	beq.n	273a <tc_init+0x406>
    26cc:	e081      	b.n	27d2 <tc_init+0x49e>
		case TC_COUNTER_SIZE_8BIT:
			while (tc_is_syncing(module_inst)) {
    26ce:	46c0      	nop			; (mov r8, r8)
    26d0:	68fb      	ldr	r3, [r7, #12]
    26d2:	0018      	movs	r0, r3
    26d4:	4b43      	ldr	r3, [pc, #268]	; (27e4 <tc_init+0x4b0>)
    26d6:	447b      	add	r3, pc
    26d8:	4798      	blx	r3
    26da:	1e03      	subs	r3, r0, #0
    26dc:	d1f8      	bne.n	26d0 <tc_init+0x39c>
				/* Wait for sync */
			}

			hw->COUNT8.COUNT.reg =
					config->counter_8_bit.value;
    26de:	687b      	ldr	r3, [r7, #4]
    26e0:	2228      	movs	r2, #40	; 0x28
    26e2:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.COUNT.reg =
    26e4:	68bb      	ldr	r3, [r7, #8]
    26e6:	741a      	strb	r2, [r3, #16]


			while (tc_is_syncing(module_inst)) {
    26e8:	46c0      	nop			; (mov r8, r8)
    26ea:	68fb      	ldr	r3, [r7, #12]
    26ec:	0018      	movs	r0, r3
    26ee:	4b3e      	ldr	r3, [pc, #248]	; (27e8 <tc_init+0x4b4>)
    26f0:	447b      	add	r3, pc
    26f2:	4798      	blx	r3
    26f4:	1e03      	subs	r3, r0, #0
    26f6:	d1f8      	bne.n	26ea <tc_init+0x3b6>
				/* Wait for sync */
			}

			hw->COUNT8.PER.reg =
					config->counter_8_bit.period;
    26f8:	687b      	ldr	r3, [r7, #4]
    26fa:	2229      	movs	r2, #41	; 0x29
    26fc:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.PER.reg =
    26fe:	68bb      	ldr	r3, [r7, #8]
    2700:	751a      	strb	r2, [r3, #20]

			while (tc_is_syncing(module_inst)) {
    2702:	46c0      	nop			; (mov r8, r8)
    2704:	68fb      	ldr	r3, [r7, #12]
    2706:	0018      	movs	r0, r3
    2708:	4b38      	ldr	r3, [pc, #224]	; (27ec <tc_init+0x4b8>)
    270a:	447b      	add	r3, pc
    270c:	4798      	blx	r3
    270e:	1e03      	subs	r3, r0, #0
    2710:	d1f8      	bne.n	2704 <tc_init+0x3d0>
				/* Wait for sync */
			}

			hw->COUNT8.CC[0].reg =
					config->counter_8_bit.compare_capture_channel[0];
    2712:	687b      	ldr	r3, [r7, #4]
    2714:	222a      	movs	r2, #42	; 0x2a
    2716:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[0].reg =
    2718:	68bb      	ldr	r3, [r7, #8]
    271a:	761a      	strb	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    271c:	46c0      	nop			; (mov r8, r8)
    271e:	68fb      	ldr	r3, [r7, #12]
    2720:	0018      	movs	r0, r3
    2722:	4b33      	ldr	r3, [pc, #204]	; (27f0 <tc_init+0x4bc>)
    2724:	447b      	add	r3, pc
    2726:	4798      	blx	r3
    2728:	1e03      	subs	r3, r0, #0
    272a:	d1f8      	bne.n	271e <tc_init+0x3ea>
				/* Wait for sync */
			}

			hw->COUNT8.CC[1].reg =
					config->counter_8_bit.compare_capture_channel[1];
    272c:	687b      	ldr	r3, [r7, #4]
    272e:	222b      	movs	r2, #43	; 0x2b
    2730:	5c9a      	ldrb	r2, [r3, r2]
			hw->COUNT8.CC[1].reg =
    2732:	68bb      	ldr	r3, [r7, #8]
    2734:	765a      	strb	r2, [r3, #25]

			return STATUS_OK;
    2736:	2300      	movs	r3, #0
    2738:	e04c      	b.n	27d4 <tc_init+0x4a0>

		case TC_COUNTER_SIZE_16BIT:
			while (tc_is_syncing(module_inst)) {
    273a:	46c0      	nop			; (mov r8, r8)
    273c:	68fb      	ldr	r3, [r7, #12]
    273e:	0018      	movs	r0, r3
    2740:	4b2c      	ldr	r3, [pc, #176]	; (27f4 <tc_init+0x4c0>)
    2742:	447b      	add	r3, pc
    2744:	4798      	blx	r3
    2746:	1e03      	subs	r3, r0, #0
    2748:	d1f8      	bne.n	273c <tc_init+0x408>
				/* Wait for sync */
			}

			hw->COUNT16.COUNT.reg
				= config->counter_16_bit.value;
    274a:	687b      	ldr	r3, [r7, #4]
    274c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
    274e:	68bb      	ldr	r3, [r7, #8]
    2750:	821a      	strh	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    2752:	46c0      	nop			; (mov r8, r8)
    2754:	68fb      	ldr	r3, [r7, #12]
    2756:	0018      	movs	r0, r3
    2758:	4b27      	ldr	r3, [pc, #156]	; (27f8 <tc_init+0x4c4>)
    275a:	447b      	add	r3, pc
    275c:	4798      	blx	r3
    275e:	1e03      	subs	r3, r0, #0
    2760:	d1f8      	bne.n	2754 <tc_init+0x420>
				/* Wait for sync */
			}

			hw->COUNT16.CC[0].reg =
					config->counter_16_bit.compare_capture_channel[0];
    2762:	687b      	ldr	r3, [r7, #4]
    2764:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    2766:	68bb      	ldr	r3, [r7, #8]
    2768:	831a      	strh	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    276a:	46c0      	nop			; (mov r8, r8)
    276c:	68fb      	ldr	r3, [r7, #12]
    276e:	0018      	movs	r0, r3
    2770:	4b22      	ldr	r3, [pc, #136]	; (27fc <tc_init+0x4c8>)
    2772:	447b      	add	r3, pc
    2774:	4798      	blx	r3
    2776:	1e03      	subs	r3, r0, #0
    2778:	d1f8      	bne.n	276c <tc_init+0x438>
				/* Wait for sync */
			}

			hw->COUNT16.CC[1].reg =
					config->counter_16_bit.compare_capture_channel[1];
    277a:	687b      	ldr	r3, [r7, #4]
    277c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    277e:	68bb      	ldr	r3, [r7, #8]
    2780:	835a      	strh	r2, [r3, #26]

			return STATUS_OK;
    2782:	2300      	movs	r3, #0
    2784:	e026      	b.n	27d4 <tc_init+0x4a0>

		case TC_COUNTER_SIZE_32BIT:
			while (tc_is_syncing(module_inst)) {
    2786:	46c0      	nop			; (mov r8, r8)
    2788:	68fb      	ldr	r3, [r7, #12]
    278a:	0018      	movs	r0, r3
    278c:	4b1c      	ldr	r3, [pc, #112]	; (2800 <tc_init+0x4cc>)
    278e:	447b      	add	r3, pc
    2790:	4798      	blx	r3
    2792:	1e03      	subs	r3, r0, #0
    2794:	d1f8      	bne.n	2788 <tc_init+0x454>
				/* Wait for sync */
			}

			hw->COUNT32.COUNT.reg
				= config->counter_32_bit.value;
    2796:	687b      	ldr	r3, [r7, #4]
    2798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    279a:	68bb      	ldr	r3, [r7, #8]
    279c:	611a      	str	r2, [r3, #16]

			while (tc_is_syncing(module_inst)) {
    279e:	46c0      	nop			; (mov r8, r8)
    27a0:	68fb      	ldr	r3, [r7, #12]
    27a2:	0018      	movs	r0, r3
    27a4:	4b17      	ldr	r3, [pc, #92]	; (2804 <tc_init+0x4d0>)
    27a6:	447b      	add	r3, pc
    27a8:	4798      	blx	r3
    27aa:	1e03      	subs	r3, r0, #0
    27ac:	d1f8      	bne.n	27a0 <tc_init+0x46c>
				/* Wait for sync */
			}

			hw->COUNT32.CC[0].reg =
					config->counter_32_bit.compare_capture_channel[0];
    27ae:	687b      	ldr	r3, [r7, #4]
    27b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			hw->COUNT32.CC[0].reg =
    27b2:	68bb      	ldr	r3, [r7, #8]
    27b4:	619a      	str	r2, [r3, #24]

			while (tc_is_syncing(module_inst)) {
    27b6:	46c0      	nop			; (mov r8, r8)
    27b8:	68fb      	ldr	r3, [r7, #12]
    27ba:	0018      	movs	r0, r3
    27bc:	4b12      	ldr	r3, [pc, #72]	; (2808 <tc_init+0x4d4>)
    27be:	447b      	add	r3, pc
    27c0:	4798      	blx	r3
    27c2:	1e03      	subs	r3, r0, #0
    27c4:	d1f8      	bne.n	27b8 <tc_init+0x484>
				/* Wait for sync */
			}

			hw->COUNT32.CC[1].reg =
					config->counter_32_bit.compare_capture_channel[1];
    27c6:	687b      	ldr	r3, [r7, #4]
    27c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    27ca:	68bb      	ldr	r3, [r7, #8]
    27cc:	61da      	str	r2, [r3, #28]

			return STATUS_OK;
    27ce:	2300      	movs	r3, #0
    27d0:	e000      	b.n	27d4 <tc_init+0x4a0>
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
    27d2:	2317      	movs	r3, #23
}
    27d4:	0018      	movs	r0, r3
    27d6:	46bd      	mov	sp, r7
    27d8:	b00c      	add	sp, #48	; 0x30
    27da:	bdb0      	pop	{r4, r5, r7, pc}
    27dc:	fffffc25 	.word	0xfffffc25
    27e0:	fffffc0b 	.word	0xfffffc0b
    27e4:	fffffbe7 	.word	0xfffffbe7
    27e8:	fffffbcd 	.word	0xfffffbcd
    27ec:	fffffbb3 	.word	0xfffffbb3
    27f0:	fffffb99 	.word	0xfffffb99
    27f4:	fffffb7b 	.word	0xfffffb7b
    27f8:	fffffb63 	.word	0xfffffb63
    27fc:	fffffb4b 	.word	0xfffffb4b
    2800:	fffffb2f 	.word	0xfffffb2f
    2804:	fffffb17 	.word	0xfffffb17
    2808:	fffffaff 	.word	0xfffffaff

0000280c <NVIC_SystemReset>:
/** \brief  System Reset

    The function initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
    280c:	b580      	push	{r7, lr}
    280e:	af00      	add	r7, sp, #0
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
    2810:	f3bf 8f4f 	dsb	sy
  __DSB();                                                     /* Ensure all outstanding memory accesses included
                                                                  buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
    2814:	4b02      	ldr	r3, [pc, #8]	; (2820 <NVIC_SystemReset+0x14>)
    2816:	4a03      	ldr	r2, [pc, #12]	; (2824 <NVIC_SystemReset+0x18>)
    2818:	60da      	str	r2, [r3, #12]
    281a:	f3bf 8f4f 	dsb	sy
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                     /* Ensure completion of memory access */
  while(1);                                                    /* wait until reset */
    281e:	e7fe      	b.n	281e <NVIC_SystemReset+0x12>
    2820:	e000ed00 	.word	0xe000ed00
    2824:	05fa0004 	.word	0x05fa0004

00002828 <bod_get_config_defaults>:
 *
 * \param[out] conf  BOD configuration struct to set to default settings
 */
static inline void bod_get_config_defaults(
		struct bod_config *const conf)
{
    2828:	b580      	push	{r7, lr}
    282a:	b082      	sub	sp, #8
    282c:	af00      	add	r7, sp, #0
    282e:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
    2830:	687b      	ldr	r3, [r7, #4]
    2832:	2200      	movs	r2, #0
    2834:	801a      	strh	r2, [r3, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
    2836:	687b      	ldr	r3, [r7, #4]
    2838:	2200      	movs	r2, #0
    283a:	805a      	strh	r2, [r3, #2]
	conf->action         = BOD_ACTION_RESET;
    283c:	687b      	ldr	r3, [r7, #4]
    283e:	2208      	movs	r2, #8
    2840:	711a      	strb	r2, [r3, #4]
	conf->level          = 0x27;
    2842:	687b      	ldr	r3, [r7, #4]
    2844:	2227      	movs	r2, #39	; 0x27
    2846:	715a      	strb	r2, [r3, #5]
	conf->hysteresis     = true;
    2848:	687b      	ldr	r3, [r7, #4]
    284a:	2201      	movs	r2, #1
    284c:	719a      	strb	r2, [r3, #6]
	conf->run_in_standby = true;
    284e:	687b      	ldr	r3, [r7, #4]
    2850:	2201      	movs	r2, #1
    2852:	71da      	strb	r2, [r3, #7]
}
    2854:	46c0      	nop			; (mov r8, r8)
    2856:	46bd      	mov	sp, r7
    2858:	b002      	add	sp, #8
    285a:	bd80      	pop	{r7, pc}

0000285c <bod_enable>:
 * \retval STATUS_OK               If the BOD was successfully enabled
 * \retval STATUS_ERR_INVALID_ARG  An invalid BOD was supplied
 */
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
    285c:	b580      	push	{r7, lr}
    285e:	b082      	sub	sp, #8
    2860:	af00      	add	r7, sp, #0
    2862:	0002      	movs	r2, r0
    2864:	1dfb      	adds	r3, r7, #7
    2866:	701a      	strb	r2, [r3, #0]
	switch (bod_id) {
    2868:	1dfb      	adds	r3, r7, #7
    286a:	781b      	ldrb	r3, [r3, #0]
    286c:	2b00      	cmp	r3, #0
    286e:	d108      	bne.n	2882 <bod_enable+0x26>
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
    2870:	4b06      	ldr	r3, [pc, #24]	; (288c <bod_enable+0x30>)
    2872:	4a06      	ldr	r2, [pc, #24]	; (288c <bod_enable+0x30>)
    2874:	6b52      	ldr	r2, [r2, #52]	; 0x34
    2876:	2102      	movs	r1, #2
    2878:	430a      	orrs	r2, r1
    287a:	635a      	str	r2, [r3, #52]	; 0x34
			break;
    287c:	46c0      	nop			; (mov r8, r8)
		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    287e:	2300      	movs	r3, #0
    2880:	e000      	b.n	2884 <bod_enable+0x28>
			return STATUS_ERR_INVALID_ARG;
    2882:	2317      	movs	r3, #23
}
    2884:	0018      	movs	r0, r3
    2886:	46bd      	mov	sp, r7
    2888:	b002      	add	sp, #8
    288a:	bd80      	pop	{r7, pc}
    288c:	40000800 	.word	0x40000800

00002890 <dma_enable_callback>:
{
    2890:	b590      	push	{r4, r7, lr}
    2892:	b083      	sub	sp, #12
    2894:	af00      	add	r7, sp, #0
    2896:	6078      	str	r0, [r7, #4]
    2898:	000a      	movs	r2, r1
    289a:	1cfb      	adds	r3, r7, #3
    289c:	701a      	strb	r2, [r3, #0]
    289e:	4b14      	ldr	r3, [pc, #80]	; (28f0 <dma_enable_callback+0x60>)
    28a0:	447b      	add	r3, pc
	resource->callback_enable |= 1 << type;
    28a2:	687a      	ldr	r2, [r7, #4]
    28a4:	7c12      	ldrb	r2, [r2, #16]
    28a6:	b251      	sxtb	r1, r2
    28a8:	1cfa      	adds	r2, r7, #3
    28aa:	7812      	ldrb	r2, [r2, #0]
    28ac:	2001      	movs	r0, #1
    28ae:	4090      	lsls	r0, r2
    28b0:	0002      	movs	r2, r0
    28b2:	b252      	sxtb	r2, r2
    28b4:	430a      	orrs	r2, r1
    28b6:	b252      	sxtb	r2, r2
    28b8:	b2d1      	uxtb	r1, r2
    28ba:	687a      	ldr	r2, [r7, #4]
    28bc:	7411      	strb	r1, [r2, #16]
	g_chan_interrupt_flag[resource->channel_id] |= (1UL << type);
    28be:	687a      	ldr	r2, [r7, #4]
    28c0:	7812      	ldrb	r2, [r2, #0]
    28c2:	0014      	movs	r4, r2
    28c4:	687a      	ldr	r2, [r7, #4]
    28c6:	7812      	ldrb	r2, [r2, #0]
    28c8:	0011      	movs	r1, r2
    28ca:	4a0a      	ldr	r2, [pc, #40]	; (28f4 <dma_enable_callback+0x64>)
    28cc:	589a      	ldr	r2, [r3, r2]
    28ce:	5c51      	ldrb	r1, [r2, r1]
    28d0:	1cfa      	adds	r2, r7, #3
    28d2:	7812      	ldrb	r2, [r2, #0]
    28d4:	2001      	movs	r0, #1
    28d6:	4090      	lsls	r0, r2
    28d8:	0002      	movs	r2, r0
    28da:	b2d2      	uxtb	r2, r2
    28dc:	430a      	orrs	r2, r1
    28de:	b2d1      	uxtb	r1, r2
    28e0:	4a04      	ldr	r2, [pc, #16]	; (28f4 <dma_enable_callback+0x64>)
    28e2:	589b      	ldr	r3, [r3, r2]
    28e4:	1c0a      	adds	r2, r1, #0
    28e6:	551a      	strb	r2, [r3, r4]
}
    28e8:	46c0      	nop			; (mov r8, r8)
    28ea:	46bd      	mov	sp, r7
    28ec:	b003      	add	sp, #12
    28ee:	bd90      	pop	{r4, r7, pc}
    28f0:	0000cb90 	.word	0x0000cb90
    28f4:	00000074 	.word	0x00000074

000028f8 <dma_register_callback>:
{
    28f8:	b580      	push	{r7, lr}
    28fa:	b084      	sub	sp, #16
    28fc:	af00      	add	r7, sp, #0
    28fe:	60f8      	str	r0, [r7, #12]
    2900:	60b9      	str	r1, [r7, #8]
    2902:	1dfb      	adds	r3, r7, #7
    2904:	701a      	strb	r2, [r3, #0]
	resource->callback[type] = callback;
    2906:	1dfb      	adds	r3, r7, #7
    2908:	781b      	ldrb	r3, [r3, #0]
    290a:	68fa      	ldr	r2, [r7, #12]
    290c:	009b      	lsls	r3, r3, #2
    290e:	18d3      	adds	r3, r2, r3
    2910:	3304      	adds	r3, #4
    2912:	68ba      	ldr	r2, [r7, #8]
    2914:	601a      	str	r2, [r3, #0]
}
    2916:	46c0      	nop			; (mov r8, r8)
    2918:	46bd      	mov	sp, r7
    291a:	b004      	add	sp, #16
    291c:	bd80      	pop	{r7, pc}

0000291e <dma_descriptor_get_config_defaults>:
{
    291e:	b580      	push	{r7, lr}
    2920:	b082      	sub	sp, #8
    2922:	af00      	add	r7, sp, #0
    2924:	6078      	str	r0, [r7, #4]
	config->descriptor_valid = true;
    2926:	687b      	ldr	r3, [r7, #4]
    2928:	2201      	movs	r2, #1
    292a:	701a      	strb	r2, [r3, #0]
	config->event_output_selection = DMA_EVENT_OUTPUT_DISABLE;
    292c:	687b      	ldr	r3, [r7, #4]
    292e:	2200      	movs	r2, #0
    2930:	705a      	strb	r2, [r3, #1]
	config->block_action = DMA_BLOCK_ACTION_NOACT;
    2932:	687b      	ldr	r3, [r7, #4]
    2934:	2200      	movs	r2, #0
    2936:	709a      	strb	r2, [r3, #2]
	config->beat_size = DMA_BEAT_SIZE_BYTE;
    2938:	687b      	ldr	r3, [r7, #4]
    293a:	2200      	movs	r2, #0
    293c:	70da      	strb	r2, [r3, #3]
	config->src_increment_enable = true;
    293e:	687b      	ldr	r3, [r7, #4]
    2940:	2201      	movs	r2, #1
    2942:	711a      	strb	r2, [r3, #4]
	config->dst_increment_enable = true;
    2944:	687b      	ldr	r3, [r7, #4]
    2946:	2201      	movs	r2, #1
    2948:	715a      	strb	r2, [r3, #5]
	config->step_selection = DMA_STEPSEL_DST;
    294a:	687b      	ldr	r3, [r7, #4]
    294c:	2200      	movs	r2, #0
    294e:	719a      	strb	r2, [r3, #6]
	config->step_size = DMA_ADDRESS_INCREMENT_STEP_SIZE_1;
    2950:	687b      	ldr	r3, [r7, #4]
    2952:	2200      	movs	r2, #0
    2954:	71da      	strb	r2, [r3, #7]
	config->block_transfer_count = 0;
    2956:	687b      	ldr	r3, [r7, #4]
    2958:	2200      	movs	r2, #0
    295a:	811a      	strh	r2, [r3, #8]
	config->source_address = (uint32_t)NULL;
    295c:	687b      	ldr	r3, [r7, #4]
    295e:	2200      	movs	r2, #0
    2960:	60da      	str	r2, [r3, #12]
	config->destination_address = (uint32_t)NULL;
    2962:	687b      	ldr	r3, [r7, #4]
    2964:	2200      	movs	r2, #0
    2966:	611a      	str	r2, [r3, #16]
	config->next_descriptor_address = 0;
    2968:	687b      	ldr	r3, [r7, #4]
    296a:	2200      	movs	r2, #0
    296c:	615a      	str	r2, [r3, #20]
}
    296e:	46c0      	nop			; (mov r8, r8)
    2970:	46bd      	mov	sp, r7
    2972:	b002      	add	sp, #8
    2974:	bd80      	pop	{r7, pc}

00002976 <system_gclk_chan_get_config_defaults>:
{
    2976:	b580      	push	{r7, lr}
    2978:	b082      	sub	sp, #8
    297a:	af00      	add	r7, sp, #0
    297c:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    297e:	687b      	ldr	r3, [r7, #4]
    2980:	2200      	movs	r2, #0
    2982:	701a      	strb	r2, [r3, #0]
}
    2984:	46c0      	nop			; (mov r8, r8)
    2986:	46bd      	mov	sp, r7
    2988:	b002      	add	sp, #8
    298a:	bd80      	pop	{r7, pc}

0000298c <system_pinmux_get_config_defaults>:
{
    298c:	b580      	push	{r7, lr}
    298e:	b082      	sub	sp, #8
    2990:	af00      	add	r7, sp, #0
    2992:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    2994:	687b      	ldr	r3, [r7, #4]
    2996:	2280      	movs	r2, #128	; 0x80
    2998:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    299a:	687b      	ldr	r3, [r7, #4]
    299c:	2200      	movs	r2, #0
    299e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    29a0:	687b      	ldr	r3, [r7, #4]
    29a2:	2201      	movs	r2, #1
    29a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    29a6:	687b      	ldr	r3, [r7, #4]
    29a8:	2200      	movs	r2, #0
    29aa:	70da      	strb	r2, [r3, #3]
}
    29ac:	46c0      	nop			; (mov r8, r8)
    29ae:	46bd      	mov	sp, r7
    29b0:	b002      	add	sp, #8
    29b2:	bd80      	pop	{r7, pc}

000029b4 <system_pinmux_get_group_from_gpio_pin>:
{
    29b4:	b580      	push	{r7, lr}
    29b6:	b084      	sub	sp, #16
    29b8:	af00      	add	r7, sp, #0
    29ba:	0002      	movs	r2, r0
    29bc:	1dfb      	adds	r3, r7, #7
    29be:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    29c0:	230f      	movs	r3, #15
    29c2:	18fb      	adds	r3, r7, r3
    29c4:	1dfa      	adds	r2, r7, #7
    29c6:	7812      	ldrb	r2, [r2, #0]
    29c8:	09d2      	lsrs	r2, r2, #7
    29ca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    29cc:	230e      	movs	r3, #14
    29ce:	18fb      	adds	r3, r7, r3
    29d0:	1dfa      	adds	r2, r7, #7
    29d2:	7812      	ldrb	r2, [r2, #0]
    29d4:	0952      	lsrs	r2, r2, #5
    29d6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    29d8:	4b0d      	ldr	r3, [pc, #52]	; (2a10 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    29da:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    29dc:	230f      	movs	r3, #15
    29de:	18fb      	adds	r3, r7, r3
    29e0:	781b      	ldrb	r3, [r3, #0]
    29e2:	2b00      	cmp	r3, #0
    29e4:	d10f      	bne.n	2a06 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    29e6:	230f      	movs	r3, #15
    29e8:	18fb      	adds	r3, r7, r3
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	009b      	lsls	r3, r3, #2
    29ee:	2210      	movs	r2, #16
    29f0:	4694      	mov	ip, r2
    29f2:	44bc      	add	ip, r7
    29f4:	4463      	add	r3, ip
    29f6:	3b08      	subs	r3, #8
    29f8:	681a      	ldr	r2, [r3, #0]
    29fa:	230e      	movs	r3, #14
    29fc:	18fb      	adds	r3, r7, r3
    29fe:	781b      	ldrb	r3, [r3, #0]
    2a00:	01db      	lsls	r3, r3, #7
    2a02:	18d3      	adds	r3, r2, r3
    2a04:	e000      	b.n	2a08 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    2a06:	2300      	movs	r3, #0
}
    2a08:	0018      	movs	r0, r3
    2a0a:	46bd      	mov	sp, r7
    2a0c:	b004      	add	sp, #16
    2a0e:	bd80      	pop	{r7, pc}
    2a10:	41004400 	.word	0x41004400

00002a14 <system_pinmux_pin_set_output_strength>:
{
    2a14:	b580      	push	{r7, lr}
    2a16:	b084      	sub	sp, #16
    2a18:	af00      	add	r7, sp, #0
    2a1a:	0002      	movs	r2, r0
    2a1c:	1dfb      	adds	r3, r7, #7
    2a1e:	701a      	strb	r2, [r3, #0]
    2a20:	1dbb      	adds	r3, r7, #6
    2a22:	1c0a      	adds	r2, r1, #0
    2a24:	701a      	strb	r2, [r3, #0]
  PortGroup* const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2a26:	1dfb      	adds	r3, r7, #7
    2a28:	781b      	ldrb	r3, [r3, #0]
    2a2a:	0018      	movs	r0, r3
    2a2c:	4b1a      	ldr	r3, [pc, #104]	; (2a98 <system_pinmux_pin_set_output_strength+0x84>)
    2a2e:	447b      	add	r3, pc
    2a30:	4798      	blx	r3
    2a32:	0003      	movs	r3, r0
    2a34:	60fb      	str	r3, [r7, #12]
  uint32_t pin_index = (gpio_pin % 32);
    2a36:	1dfb      	adds	r3, r7, #7
    2a38:	781b      	ldrb	r3, [r3, #0]
    2a3a:	221f      	movs	r2, #31
    2a3c:	4013      	ands	r3, r2
    2a3e:	60bb      	str	r3, [r7, #8]
  if (mode == SYSTEM_PINMUX_PIN_STRENGTH_HIGH) {
    2a40:	1dbb      	adds	r3, r7, #6
    2a42:	781b      	ldrb	r3, [r3, #0]
    2a44:	2b01      	cmp	r3, #1
    2a46:	d111      	bne.n	2a6c <system_pinmux_pin_set_output_strength+0x58>
    port->PINCFG[pin_index].reg |=  PORT_PINCFG_DRVSTR;
    2a48:	68fa      	ldr	r2, [r7, #12]
    2a4a:	2140      	movs	r1, #64	; 0x40
    2a4c:	68bb      	ldr	r3, [r7, #8]
    2a4e:	18d3      	adds	r3, r2, r3
    2a50:	185b      	adds	r3, r3, r1
    2a52:	781b      	ldrb	r3, [r3, #0]
    2a54:	b2db      	uxtb	r3, r3
    2a56:	2240      	movs	r2, #64	; 0x40
    2a58:	4313      	orrs	r3, r2
    2a5a:	b2d8      	uxtb	r0, r3
    2a5c:	68fa      	ldr	r2, [r7, #12]
    2a5e:	2140      	movs	r1, #64	; 0x40
    2a60:	68bb      	ldr	r3, [r7, #8]
    2a62:	18d3      	adds	r3, r2, r3
    2a64:	185b      	adds	r3, r3, r1
    2a66:	1c02      	adds	r2, r0, #0
    2a68:	701a      	strb	r2, [r3, #0]
}
    2a6a:	e010      	b.n	2a8e <system_pinmux_pin_set_output_strength+0x7a>
    port->PINCFG[pin_index].reg &= ~PORT_PINCFG_DRVSTR;
    2a6c:	68fa      	ldr	r2, [r7, #12]
    2a6e:	2140      	movs	r1, #64	; 0x40
    2a70:	68bb      	ldr	r3, [r7, #8]
    2a72:	18d3      	adds	r3, r2, r3
    2a74:	185b      	adds	r3, r3, r1
    2a76:	781b      	ldrb	r3, [r3, #0]
    2a78:	b2db      	uxtb	r3, r3
    2a7a:	2240      	movs	r2, #64	; 0x40
    2a7c:	4393      	bics	r3, r2
    2a7e:	b2d8      	uxtb	r0, r3
    2a80:	68fa      	ldr	r2, [r7, #12]
    2a82:	2140      	movs	r1, #64	; 0x40
    2a84:	68bb      	ldr	r3, [r7, #8]
    2a86:	18d3      	adds	r3, r2, r3
    2a88:	185b      	adds	r3, r3, r1
    2a8a:	1c02      	adds	r2, r0, #0
    2a8c:	701a      	strb	r2, [r3, #0]
}
    2a8e:	46c0      	nop			; (mov r8, r8)
    2a90:	46bd      	mov	sp, r7
    2a92:	b004      	add	sp, #16
    2a94:	bd80      	pop	{r7, pc}
    2a96:	46c0      	nop			; (mov r8, r8)
    2a98:	ffffff83 	.word	0xffffff83

00002a9c <port_get_group_from_gpio_pin>:
{
    2a9c:	b580      	push	{r7, lr}
    2a9e:	b082      	sub	sp, #8
    2aa0:	af00      	add	r7, sp, #0
    2aa2:	0002      	movs	r2, r0
    2aa4:	1dfb      	adds	r3, r7, #7
    2aa6:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    2aa8:	1dfb      	adds	r3, r7, #7
    2aaa:	781b      	ldrb	r3, [r3, #0]
    2aac:	0018      	movs	r0, r3
    2aae:	4b04      	ldr	r3, [pc, #16]	; (2ac0 <port_get_group_from_gpio_pin+0x24>)
    2ab0:	447b      	add	r3, pc
    2ab2:	4798      	blx	r3
    2ab4:	0003      	movs	r3, r0
}
    2ab6:	0018      	movs	r0, r3
    2ab8:	46bd      	mov	sp, r7
    2aba:	b002      	add	sp, #8
    2abc:	bd80      	pop	{r7, pc}
    2abe:	46c0      	nop			; (mov r8, r8)
    2ac0:	ffffff01 	.word	0xffffff01

00002ac4 <port_get_config_defaults>:
{
    2ac4:	b580      	push	{r7, lr}
    2ac6:	b082      	sub	sp, #8
    2ac8:	af00      	add	r7, sp, #0
    2aca:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    2acc:	687b      	ldr	r3, [r7, #4]
    2ace:	2200      	movs	r2, #0
    2ad0:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    2ad2:	687b      	ldr	r3, [r7, #4]
    2ad4:	2201      	movs	r2, #1
    2ad6:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    2ad8:	687b      	ldr	r3, [r7, #4]
    2ada:	2200      	movs	r2, #0
    2adc:	709a      	strb	r2, [r3, #2]
}
    2ade:	46c0      	nop			; (mov r8, r8)
    2ae0:	46bd      	mov	sp, r7
    2ae2:	b002      	add	sp, #8
    2ae4:	bd80      	pop	{r7, pc}
	...

00002ae8 <port_pin_set_output_level>:
{
    2ae8:	b580      	push	{r7, lr}
    2aea:	b084      	sub	sp, #16
    2aec:	af00      	add	r7, sp, #0
    2aee:	0002      	movs	r2, r0
    2af0:	1dfb      	adds	r3, r7, #7
    2af2:	701a      	strb	r2, [r3, #0]
    2af4:	1dbb      	adds	r3, r7, #6
    2af6:	1c0a      	adds	r2, r1, #0
    2af8:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    2afa:	1dfb      	adds	r3, r7, #7
    2afc:	781b      	ldrb	r3, [r3, #0]
    2afe:	0018      	movs	r0, r3
    2b00:	4b0d      	ldr	r3, [pc, #52]	; (2b38 <port_pin_set_output_level+0x50>)
    2b02:	447b      	add	r3, pc
    2b04:	4798      	blx	r3
    2b06:	0003      	movs	r3, r0
    2b08:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    2b0a:	1dfb      	adds	r3, r7, #7
    2b0c:	781b      	ldrb	r3, [r3, #0]
    2b0e:	221f      	movs	r2, #31
    2b10:	4013      	ands	r3, r2
    2b12:	2201      	movs	r2, #1
    2b14:	409a      	lsls	r2, r3
    2b16:	0013      	movs	r3, r2
    2b18:	60bb      	str	r3, [r7, #8]
	if (level) {
    2b1a:	1dbb      	adds	r3, r7, #6
    2b1c:	781b      	ldrb	r3, [r3, #0]
    2b1e:	2b00      	cmp	r3, #0
    2b20:	d003      	beq.n	2b2a <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    2b22:	68fb      	ldr	r3, [r7, #12]
    2b24:	68ba      	ldr	r2, [r7, #8]
    2b26:	619a      	str	r2, [r3, #24]
}
    2b28:	e002      	b.n	2b30 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    2b2a:	68fb      	ldr	r3, [r7, #12]
    2b2c:	68ba      	ldr	r2, [r7, #8]
    2b2e:	615a      	str	r2, [r3, #20]
}
    2b30:	46c0      	nop			; (mov r8, r8)
    2b32:	46bd      	mov	sp, r7
    2b34:	b004      	add	sp, #16
    2b36:	bd80      	pop	{r7, pc}
    2b38:	ffffff97 	.word	0xffffff97

00002b3c <system_interrupt_enable_global>:
{
    2b3c:	b580      	push	{r7, lr}
    2b3e:	af00      	add	r7, sp, #0
    2b40:	4a05      	ldr	r2, [pc, #20]	; (2b58 <system_interrupt_enable_global+0x1c>)
    2b42:	447a      	add	r2, pc
	cpu_irq_enable();
    2b44:	4b05      	ldr	r3, [pc, #20]	; (2b5c <system_interrupt_enable_global+0x20>)
    2b46:	58d3      	ldr	r3, [r2, r3]
    2b48:	2201      	movs	r2, #1
    2b4a:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    2b4c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    2b50:	b662      	cpsie	i
}
    2b52:	46c0      	nop			; (mov r8, r8)
    2b54:	46bd      	mov	sp, r7
    2b56:	bd80      	pop	{r7, pc}
    2b58:	0000c8ee 	.word	0x0000c8ee
    2b5c:	00000118 	.word	0x00000118

00002b60 <system_interrupt_disable_global>:
{
    2b60:	b580      	push	{r7, lr}
    2b62:	af00      	add	r7, sp, #0
    2b64:	4a05      	ldr	r2, [pc, #20]	; (2b7c <system_interrupt_disable_global+0x1c>)
    2b66:	447a      	add	r2, pc
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
    2b68:	b672      	cpsid	i
    2b6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    2b6e:	4b04      	ldr	r3, [pc, #16]	; (2b80 <system_interrupt_disable_global+0x20>)
    2b70:	58d3      	ldr	r3, [r2, r3]
    2b72:	2200      	movs	r2, #0
    2b74:	701a      	strb	r2, [r3, #0]
}
    2b76:	46c0      	nop			; (mov r8, r8)
    2b78:	46bd      	mov	sp, r7
    2b7a:	bd80      	pop	{r7, pc}
    2b7c:	0000c8ca 	.word	0x0000c8ca
    2b80:	00000118 	.word	0x00000118

00002b84 <system_interrupt_enable>:
{
    2b84:	b580      	push	{r7, lr}
    2b86:	b082      	sub	sp, #8
    2b88:	af00      	add	r7, sp, #0
    2b8a:	0002      	movs	r2, r0
    2b8c:	1dfb      	adds	r3, r7, #7
    2b8e:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    2b90:	4b06      	ldr	r3, [pc, #24]	; (2bac <system_interrupt_enable+0x28>)
    2b92:	1dfa      	adds	r2, r7, #7
    2b94:	7812      	ldrb	r2, [r2, #0]
    2b96:	0011      	movs	r1, r2
    2b98:	221f      	movs	r2, #31
    2b9a:	400a      	ands	r2, r1
    2b9c:	2101      	movs	r1, #1
    2b9e:	4091      	lsls	r1, r2
    2ba0:	000a      	movs	r2, r1
    2ba2:	601a      	str	r2, [r3, #0]
}
    2ba4:	46c0      	nop			; (mov r8, r8)
    2ba6:	46bd      	mov	sp, r7
    2ba8:	b002      	add	sp, #8
    2baa:	bd80      	pop	{r7, pc}
    2bac:	e000e100 	.word	0xe000e100

00002bb0 <rtc_calendar_get_time_defaults>:
 *
 * \param[out] time  Time structure to initialize
 */
static inline void rtc_calendar_get_time_defaults(
		struct rtc_calendar_time *const time)
{
    2bb0:	b580      	push	{r7, lr}
    2bb2:	b082      	sub	sp, #8
    2bb4:	af00      	add	r7, sp, #0
    2bb6:	6078      	str	r0, [r7, #4]
	time->second = 0;
    2bb8:	687b      	ldr	r3, [r7, #4]
    2bba:	2200      	movs	r2, #0
    2bbc:	701a      	strb	r2, [r3, #0]
	time->minute = 0;
    2bbe:	687b      	ldr	r3, [r7, #4]
    2bc0:	2200      	movs	r2, #0
    2bc2:	705a      	strb	r2, [r3, #1]
	time->hour   = 0;
    2bc4:	687b      	ldr	r3, [r7, #4]
    2bc6:	2200      	movs	r2, #0
    2bc8:	709a      	strb	r2, [r3, #2]
	time->pm     = 0;
    2bca:	687b      	ldr	r3, [r7, #4]
    2bcc:	2200      	movs	r2, #0
    2bce:	70da      	strb	r2, [r3, #3]
	time->day    = 1;
    2bd0:	687b      	ldr	r3, [r7, #4]
    2bd2:	2201      	movs	r2, #1
    2bd4:	711a      	strb	r2, [r3, #4]
	time->month  = 1;
    2bd6:	687b      	ldr	r3, [r7, #4]
    2bd8:	2201      	movs	r2, #1
    2bda:	715a      	strb	r2, [r3, #5]
	time->year   = 2000;
    2bdc:	687b      	ldr	r3, [r7, #4]
    2bde:	22fa      	movs	r2, #250	; 0xfa
    2be0:	00d2      	lsls	r2, r2, #3
    2be2:	80da      	strh	r2, [r3, #6]
}
    2be4:	46c0      	nop			; (mov r8, r8)
    2be6:	46bd      	mov	sp, r7
    2be8:	b002      	add	sp, #8
    2bea:	bd80      	pop	{r7, pc}

00002bec <rtc_calendar_get_config_defaults>:
 *  \param[out] config  Configuration structure to be initialized to default
 *                      values
 */
static inline void rtc_calendar_get_config_defaults(
		struct rtc_calendar_config *const config)
{
    2bec:	b590      	push	{r4, r7, lr}
    2bee:	b087      	sub	sp, #28
    2bf0:	af00      	add	r7, sp, #0
    2bf2:	6078      	str	r0, [r7, #4]
    2bf4:	4c26      	ldr	r4, [pc, #152]	; (2c90 <rtc_calendar_get_config_defaults+0xa4>)
    2bf6:	447c      	add	r4, pc
	/* Sanity check argument */
	Assert(config);

	/* Initialize and set time structure to default */
	struct rtc_calendar_time time;
	rtc_calendar_get_time_defaults(&time);
    2bf8:	230c      	movs	r3, #12
    2bfa:	18fb      	adds	r3, r7, r3
    2bfc:	0018      	movs	r0, r3
    2bfe:	4b25      	ldr	r3, [pc, #148]	; (2c94 <rtc_calendar_get_config_defaults+0xa8>)
    2c00:	447b      	add	r3, pc
    2c02:	4798      	blx	r3

	/* Set defaults into configuration structure */
	config->prescaler           = RTC_CALENDAR_PRESCALER_DIV_1024;
    2c04:	687b      	ldr	r3, [r7, #4]
    2c06:	22a0      	movs	r2, #160	; 0xa0
    2c08:	0112      	lsls	r2, r2, #4
    2c0a:	801a      	strh	r2, [r3, #0]
	config->clear_on_match      = false;
    2c0c:	687b      	ldr	r3, [r7, #4]
    2c0e:	2200      	movs	r2, #0
    2c10:	709a      	strb	r2, [r3, #2]
#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
    2c12:	687b      	ldr	r3, [r7, #4]
    2c14:	2200      	movs	r2, #0
    2c16:	70da      	strb	r2, [r3, #3]
#endif
	config->clock_24h           = false;
    2c18:	687b      	ldr	r3, [r7, #4]
    2c1a:	2200      	movs	r2, #0
    2c1c:	711a      	strb	r2, [r3, #4]
	config->year_init_value     = 2000;
    2c1e:	687b      	ldr	r3, [r7, #4]
    2c20:	22fa      	movs	r2, #250	; 0xfa
    2c22:	00d2      	lsls	r2, r2, #3
    2c24:	80da      	strh	r2, [r3, #6]
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	config->enable_read_sync    = true;
#endif
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2c26:	2317      	movs	r3, #23
    2c28:	18fb      	adds	r3, r7, r3
    2c2a:	2200      	movs	r2, #0
    2c2c:	701a      	strb	r2, [r3, #0]
    2c2e:	e026      	b.n	2c7e <rtc_calendar_get_config_defaults+0x92>
		config->alarm[i].time = time;
    2c30:	2317      	movs	r3, #23
    2c32:	18fb      	adds	r3, r7, r3
    2c34:	781a      	ldrb	r2, [r3, #0]
    2c36:	6879      	ldr	r1, [r7, #4]
    2c38:	2008      	movs	r0, #8
    2c3a:	0013      	movs	r3, r2
    2c3c:	009b      	lsls	r3, r3, #2
    2c3e:	189b      	adds	r3, r3, r2
    2c40:	005b      	lsls	r3, r3, #1
    2c42:	18cb      	adds	r3, r1, r3
    2c44:	181a      	adds	r2, r3, r0
    2c46:	230c      	movs	r3, #12
    2c48:	18fb      	adds	r3, r7, r3
    2c4a:	0010      	movs	r0, r2
    2c4c:	0019      	movs	r1, r3
    2c4e:	2308      	movs	r3, #8
    2c50:	001a      	movs	r2, r3
    2c52:	4b11      	ldr	r3, [pc, #68]	; (2c98 <rtc_calendar_get_config_defaults+0xac>)
    2c54:	58e3      	ldr	r3, [r4, r3]
    2c56:	4798      	blx	r3
		config->alarm[i].mask = RTC_CALENDAR_ALARM_MASK_YEAR;
    2c58:	2317      	movs	r3, #23
    2c5a:	18fb      	adds	r3, r7, r3
    2c5c:	781a      	ldrb	r2, [r3, #0]
    2c5e:	6879      	ldr	r1, [r7, #4]
    2c60:	0013      	movs	r3, r2
    2c62:	009b      	lsls	r3, r3, #2
    2c64:	189b      	adds	r3, r3, r2
    2c66:	005b      	lsls	r3, r3, #1
    2c68:	18cb      	adds	r3, r1, r3
    2c6a:	3310      	adds	r3, #16
    2c6c:	2206      	movs	r2, #6
    2c6e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    2c70:	2317      	movs	r3, #23
    2c72:	18fb      	adds	r3, r7, r3
    2c74:	781a      	ldrb	r2, [r3, #0]
    2c76:	2317      	movs	r3, #23
    2c78:	18fb      	adds	r3, r7, r3
    2c7a:	3201      	adds	r2, #1
    2c7c:	701a      	strb	r2, [r3, #0]
    2c7e:	2317      	movs	r3, #23
    2c80:	18fb      	adds	r3, r7, r3
    2c82:	781b      	ldrb	r3, [r3, #0]
    2c84:	2b00      	cmp	r3, #0
    2c86:	d0d3      	beq.n	2c30 <rtc_calendar_get_config_defaults+0x44>
	}
}
    2c88:	46c0      	nop			; (mov r8, r8)
    2c8a:	46bd      	mov	sp, r7
    2c8c:	b007      	add	sp, #28
    2c8e:	bd90      	pop	{r4, r7, pc}
    2c90:	0000c83a 	.word	0x0000c83a
    2c94:	ffffffad 	.word	0xffffffad
    2c98:	000000bc 	.word	0x000000bc

00002c9c <system_set_sleepmode>:
 * \retval STATUS_ERR_INVALID_ARG  The requested sleep mode was invalid or not
 *                                 available
 */
static inline enum status_code system_set_sleepmode(
	const enum system_sleepmode sleep_mode)
{
    2c9c:	b580      	push	{r7, lr}
    2c9e:	b084      	sub	sp, #16
    2ca0:	af00      	add	r7, sp, #0
    2ca2:	0002      	movs	r2, r0
    2ca4:	1dfb      	adds	r3, r7, #7
    2ca6:	701a      	strb	r2, [r3, #0]

#if (SAMD20 || SAMD21 || SAMR21)

	/* Get MCU revision */
	uint32_t rev = DSU->DID.reg;
    2ca8:	4b1a      	ldr	r3, [pc, #104]	; (2d14 <system_set_sleepmode+0x78>)
    2caa:	699b      	ldr	r3, [r3, #24]
    2cac:	60fb      	str	r3, [r7, #12]

	rev &= DSU_DID_REVISION_Msk;
    2cae:	68fa      	ldr	r2, [r7, #12]
    2cb0:	23f0      	movs	r3, #240	; 0xf0
    2cb2:	011b      	lsls	r3, r3, #4
    2cb4:	4013      	ands	r3, r2
    2cb6:	60fb      	str	r3, [r7, #12]
	rev = rev >> DSU_DID_REVISION_Pos;
    2cb8:	68fb      	ldr	r3, [r7, #12]
    2cba:	0a1b      	lsrs	r3, r3, #8
    2cbc:	60fb      	str	r3, [r7, #12]
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
	}
#endif

#if (SAMD21 || SAMR21)
	if (rev < _SYSTEM_MCU_REVISION_D) {
    2cbe:	68fb      	ldr	r3, [r7, #12]
    2cc0:	2b02      	cmp	r3, #2
    2cc2:	d805      	bhi.n	2cd0 <system_set_sleepmode+0x34>
		/* Errata 13140: Make sure that the Flash does not power all the way down
		 * when in sleep mode. */
		NVMCTRL->CTRLB.bit.SLEEPPRM = NVMCTRL_CTRLB_SLEEPPRM_DISABLED_Val;
    2cc4:	4a14      	ldr	r2, [pc, #80]	; (2d18 <system_set_sleepmode+0x7c>)
    2cc6:	6853      	ldr	r3, [r2, #4]
    2cc8:	21c0      	movs	r1, #192	; 0xc0
    2cca:	0089      	lsls	r1, r1, #2
    2ccc:	430b      	orrs	r3, r1
    2cce:	6053      	str	r3, [r2, #4]
	}
#endif

#endif

	switch (sleep_mode) {
    2cd0:	1dfb      	adds	r3, r7, #7
    2cd2:	781b      	ldrb	r3, [r3, #0]
    2cd4:	2b00      	cmp	r3, #0
    2cd6:	db16      	blt.n	2d06 <system_set_sleepmode+0x6a>
    2cd8:	2b02      	cmp	r3, #2
    2cda:	dd02      	ble.n	2ce2 <system_set_sleepmode+0x46>
    2cdc:	2b03      	cmp	r3, #3
    2cde:	d00b      	beq.n	2cf8 <system_set_sleepmode+0x5c>
    2ce0:	e011      	b.n	2d06 <system_set_sleepmode+0x6a>
		case SYSTEM_SLEEPMODE_IDLE_0:
		case SYSTEM_SLEEPMODE_IDLE_1:
		case SYSTEM_SLEEPMODE_IDLE_2:
			SCB->SCR &= ~SCB_SCR_SLEEPDEEP_Msk;
    2ce2:	4b0e      	ldr	r3, [pc, #56]	; (2d1c <system_set_sleepmode+0x80>)
    2ce4:	4a0d      	ldr	r2, [pc, #52]	; (2d1c <system_set_sleepmode+0x80>)
    2ce6:	6912      	ldr	r2, [r2, #16]
    2ce8:	2104      	movs	r1, #4
    2cea:	438a      	bics	r2, r1
    2cec:	611a      	str	r2, [r3, #16]
			PM->SLEEP.reg = sleep_mode;
    2cee:	4a0c      	ldr	r2, [pc, #48]	; (2d20 <system_set_sleepmode+0x84>)
    2cf0:	1dfb      	adds	r3, r7, #7
    2cf2:	781b      	ldrb	r3, [r3, #0]
    2cf4:	7053      	strb	r3, [r2, #1]
			break;
    2cf6:	e008      	b.n	2d0a <system_set_sleepmode+0x6e>

		case SYSTEM_SLEEPMODE_STANDBY:
			SCB->SCR |=  SCB_SCR_SLEEPDEEP_Msk;
    2cf8:	4b08      	ldr	r3, [pc, #32]	; (2d1c <system_set_sleepmode+0x80>)
    2cfa:	4a08      	ldr	r2, [pc, #32]	; (2d1c <system_set_sleepmode+0x80>)
    2cfc:	6912      	ldr	r2, [r2, #16]
    2cfe:	2104      	movs	r1, #4
    2d00:	430a      	orrs	r2, r1
    2d02:	611a      	str	r2, [r3, #16]
			break;
    2d04:	e001      	b.n	2d0a <system_set_sleepmode+0x6e>

		default:
			return STATUS_ERR_INVALID_ARG;
    2d06:	2317      	movs	r3, #23
    2d08:	e000      	b.n	2d0c <system_set_sleepmode+0x70>
	}

	return STATUS_OK;
    2d0a:	2300      	movs	r3, #0
}
    2d0c:	0018      	movs	r0, r3
    2d0e:	46bd      	mov	sp, r7
    2d10:	b004      	add	sp, #16
    2d12:	bd80      	pop	{r7, pc}
    2d14:	41002000 	.word	0x41002000
    2d18:	41004000 	.word	0x41004000
    2d1c:	e000ed00 	.word	0xe000ed00
    2d20:	40000400 	.word	0x40000400

00002d24 <system_sleep>:
 * all ongoing memory accesses have completed, then a WFI (Wait For Interrupt)
 * instruction to place the device into the sleep mode specified by
 * \ref system_set_sleepmode until woken by an interrupt.
 */
static inline void system_sleep(void)
{
    2d24:	b580      	push	{r7, lr}
    2d26:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb");
    2d28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    2d2c:	bf30      	wfi
	__DSB();
	__WFI();
}
    2d2e:	46c0      	nop			; (mov r8, r8)
    2d30:	46bd      	mov	sp, r7
    2d32:	bd80      	pop	{r7, pc}

00002d34 <system_reset>:
 * Resets the MCU and all associated peripherals and registers, except RTC, all 32KHz sources,
 * WDT (if ALWAYSON is set) and GCLK (if WRTLOCK is set).
 *
 */
static inline void system_reset(void)
{
    2d34:	b580      	push	{r7, lr}
    2d36:	af00      	add	r7, sp, #0
	NVIC_SystemReset();
    2d38:	4b02      	ldr	r3, [pc, #8]	; (2d44 <system_reset+0x10>)
    2d3a:	447b      	add	r3, pc
    2d3c:	4798      	blx	r3
}
    2d3e:	46c0      	nop			; (mov r8, r8)
    2d40:	46bd      	mov	sp, r7
    2d42:	bd80      	pop	{r7, pc}
    2d44:	fffffacf 	.word	0xfffffacf

00002d48 <spi_is_syncing>:
{
    2d48:	b580      	push	{r7, lr}
    2d4a:	b084      	sub	sp, #16
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
	SercomSpi *const spi_module = &(module->hw->SPI);
    2d50:	687b      	ldr	r3, [r7, #4]
    2d52:	681b      	ldr	r3, [r3, #0]
    2d54:	60fb      	str	r3, [r7, #12]
	return (spi_module->SYNCBUSY.reg);
    2d56:	68fb      	ldr	r3, [r7, #12]
    2d58:	69db      	ldr	r3, [r3, #28]
    2d5a:	1e5a      	subs	r2, r3, #1
    2d5c:	4193      	sbcs	r3, r2
    2d5e:	b2db      	uxtb	r3, r3
}
    2d60:	0018      	movs	r0, r3
    2d62:	46bd      	mov	sp, r7
    2d64:	b004      	add	sp, #16
    2d66:	bd80      	pop	{r7, pc}

00002d68 <spi_get_config_defaults>:
{
    2d68:	b590      	push	{r4, r7, lr}
    2d6a:	b083      	sub	sp, #12
    2d6c:	af00      	add	r7, sp, #0
    2d6e:	6078      	str	r0, [r7, #4]
    2d70:	4c1e      	ldr	r4, [pc, #120]	; (2dec <spi_get_config_defaults+0x84>)
    2d72:	447c      	add	r4, pc
	config->mode             = SPI_MODE_MASTER;
    2d74:	687b      	ldr	r3, [r7, #4]
    2d76:	2201      	movs	r2, #1
    2d78:	701a      	strb	r2, [r3, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    2d7a:	687b      	ldr	r3, [r7, #4]
    2d7c:	2200      	movs	r2, #0
    2d7e:	605a      	str	r2, [r3, #4]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	2200      	movs	r2, #0
    2d84:	609a      	str	r2, [r3, #8]
	config->mux_setting      = SPI_SIGNAL_MUX_SETTING_D;
    2d86:	687b      	ldr	r3, [r7, #4]
    2d88:	22c0      	movs	r2, #192	; 0xc0
    2d8a:	0392      	lsls	r2, r2, #14
    2d8c:	60da      	str	r2, [r3, #12]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    2d8e:	687b      	ldr	r3, [r7, #4]
    2d90:	2200      	movs	r2, #0
    2d92:	741a      	strb	r2, [r3, #16]
	config->run_in_standby   = false;
    2d94:	687b      	ldr	r3, [r7, #4]
    2d96:	2200      	movs	r2, #0
    2d98:	745a      	strb	r2, [r3, #17]
	config->receiver_enable  = true;
    2d9a:	687b      	ldr	r3, [r7, #4]
    2d9c:	2201      	movs	r2, #1
    2d9e:	749a      	strb	r2, [r3, #18]
	config->select_slave_low_detect_enable= true;
    2da0:	687b      	ldr	r3, [r7, #4]
    2da2:	2201      	movs	r2, #1
    2da4:	74da      	strb	r2, [r3, #19]
	config->master_slave_select_enable= false;
    2da6:	687b      	ldr	r3, [r7, #4]
    2da8:	2200      	movs	r2, #0
    2daa:	751a      	strb	r2, [r3, #20]
	config->generator_source = GCLK_GENERATOR_0;
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	2224      	movs	r2, #36	; 0x24
    2db0:	2100      	movs	r1, #0
    2db2:	5499      	strb	r1, [r3, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    2db4:	687b      	ldr	r3, [r7, #4]
    2db6:	3318      	adds	r3, #24
    2db8:	220c      	movs	r2, #12
    2dba:	2100      	movs	r1, #0
    2dbc:	0018      	movs	r0, r3
    2dbe:	4b0c      	ldr	r3, [pc, #48]	; (2df0 <spi_get_config_defaults+0x88>)
    2dc0:	58e3      	ldr	r3, [r4, r3]
    2dc2:	4798      	blx	r3
	config->mode_specific.master.baudrate = 100000;
    2dc4:	687b      	ldr	r3, [r7, #4]
    2dc6:	4a0b      	ldr	r2, [pc, #44]	; (2df4 <spi_get_config_defaults+0x8c>)
    2dc8:	619a      	str	r2, [r3, #24]
	config->pinmux_pad0 = PINMUX_DEFAULT;
    2dca:	687b      	ldr	r3, [r7, #4]
    2dcc:	2200      	movs	r2, #0
    2dce:	629a      	str	r2, [r3, #40]	; 0x28
	config->pinmux_pad1 = PINMUX_DEFAULT;
    2dd0:	687b      	ldr	r3, [r7, #4]
    2dd2:	2200      	movs	r2, #0
    2dd4:	62da      	str	r2, [r3, #44]	; 0x2c
	config->pinmux_pad2 = PINMUX_DEFAULT;
    2dd6:	687b      	ldr	r3, [r7, #4]
    2dd8:	2200      	movs	r2, #0
    2dda:	631a      	str	r2, [r3, #48]	; 0x30
	config->pinmux_pad3 = PINMUX_DEFAULT;
    2ddc:	687b      	ldr	r3, [r7, #4]
    2dde:	2200      	movs	r2, #0
    2de0:	635a      	str	r2, [r3, #52]	; 0x34
};
    2de2:	46c0      	nop			; (mov r8, r8)
    2de4:	46bd      	mov	sp, r7
    2de6:	b003      	add	sp, #12
    2de8:	bd90      	pop	{r4, r7, pc}
    2dea:	46c0      	nop			; (mov r8, r8)
    2dec:	0000c6be 	.word	0x0000c6be
    2df0:	00000220 	.word	0x00000220
    2df4:	000186a0 	.word	0x000186a0

00002df8 <spi_enable>:
{
    2df8:	b580      	push	{r7, lr}
    2dfa:	b084      	sub	sp, #16
    2dfc:	af00      	add	r7, sp, #0
    2dfe:	6078      	str	r0, [r7, #4]
    2e00:	4a10      	ldr	r2, [pc, #64]	; (2e44 <spi_enable+0x4c>)
    2e02:	447a      	add	r2, pc
	SercomSpi *const spi_module = &(module->hw->SPI);
    2e04:	687b      	ldr	r3, [r7, #4]
    2e06:	681b      	ldr	r3, [r3, #0]
    2e08:	60fb      	str	r3, [r7, #12]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    2e0a:	687b      	ldr	r3, [r7, #4]
    2e0c:	681b      	ldr	r3, [r3, #0]
    2e0e:	0018      	movs	r0, r3
    2e10:	4b0d      	ldr	r3, [pc, #52]	; (2e48 <spi_enable+0x50>)
    2e12:	58d3      	ldr	r3, [r2, r3]
    2e14:	4798      	blx	r3
    2e16:	0003      	movs	r3, r0
    2e18:	0018      	movs	r0, r3
    2e1a:	4b0c      	ldr	r3, [pc, #48]	; (2e4c <spi_enable+0x54>)
    2e1c:	447b      	add	r3, pc
    2e1e:	4798      	blx	r3
	while (spi_is_syncing(module)) {
    2e20:	46c0      	nop			; (mov r8, r8)
    2e22:	687b      	ldr	r3, [r7, #4]
    2e24:	0018      	movs	r0, r3
    2e26:	4b0a      	ldr	r3, [pc, #40]	; (2e50 <spi_enable+0x58>)
    2e28:	447b      	add	r3, pc
    2e2a:	4798      	blx	r3
    2e2c:	1e03      	subs	r3, r0, #0
    2e2e:	d1f8      	bne.n	2e22 <spi_enable+0x2a>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    2e30:	68fb      	ldr	r3, [r7, #12]
    2e32:	681b      	ldr	r3, [r3, #0]
    2e34:	2202      	movs	r2, #2
    2e36:	431a      	orrs	r2, r3
    2e38:	68fb      	ldr	r3, [r7, #12]
    2e3a:	601a      	str	r2, [r3, #0]
}
    2e3c:	46c0      	nop			; (mov r8, r8)
    2e3e:	46bd      	mov	sp, r7
    2e40:	b004      	add	sp, #16
    2e42:	bd80      	pop	{r7, pc}
    2e44:	0000c62e 	.word	0x0000c62e
    2e48:	000000cc 	.word	0x000000cc
    2e4c:	fffffd65 	.word	0xfffffd65
    2e50:	ffffff1d 	.word	0xffffff1d

00002e54 <sleepmgr_sleep>:
extern uint8_t sleepmgr_locks[];
#endif /* CONFIG_SLEEPMGR_ENABLE */
/** @} */

static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
    2e54:	b590      	push	{r4, r7, lr}
    2e56:	b083      	sub	sp, #12
    2e58:	af00      	add	r7, sp, #0
    2e5a:	0002      	movs	r2, r0
    2e5c:	1dfb      	adds	r3, r7, #7
    2e5e:	701a      	strb	r2, [r3, #0]
    2e60:	4c0f      	ldr	r4, [pc, #60]	; (2ea0 <sleepmgr_sleep+0x4c>)
    2e62:	447c      	add	r4, pc
    2e64:	b672      	cpsid	i
  __ASM volatile ("dmb");
    2e66:	f3bf 8f5f 	dmb	sy
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
    2e6a:	4b0e      	ldr	r3, [pc, #56]	; (2ea4 <sleepmgr_sleep+0x50>)
    2e6c:	58e3      	ldr	r3, [r4, r3]
    2e6e:	2200      	movs	r2, #0
    2e70:	701a      	strb	r2, [r3, #0]

	/* Enter the sleep mode. */
	system_set_sleepmode((enum system_sleepmode)(sleep_mode - 1));
    2e72:	1dfb      	adds	r3, r7, #7
    2e74:	781b      	ldrb	r3, [r3, #0]
    2e76:	3b01      	subs	r3, #1
    2e78:	b2db      	uxtb	r3, r3
    2e7a:	0018      	movs	r0, r3
    2e7c:	4b0a      	ldr	r3, [pc, #40]	; (2ea8 <sleepmgr_sleep+0x54>)
    2e7e:	447b      	add	r3, pc
    2e80:	4798      	blx	r3
	cpu_irq_enable();
    2e82:	4b08      	ldr	r3, [pc, #32]	; (2ea4 <sleepmgr_sleep+0x50>)
    2e84:	58e3      	ldr	r3, [r4, r3]
    2e86:	2201      	movs	r2, #1
    2e88:	701a      	strb	r2, [r3, #0]
    2e8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    2e8e:	b662      	cpsie	i
	system_sleep();
    2e90:	4b06      	ldr	r3, [pc, #24]	; (2eac <sleepmgr_sleep+0x58>)
    2e92:	447b      	add	r3, pc
    2e94:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    2e96:	46c0      	nop			; (mov r8, r8)
    2e98:	46bd      	mov	sp, r7
    2e9a:	b003      	add	sp, #12
    2e9c:	bd90      	pop	{r4, r7, pc}
    2e9e:	46c0      	nop			; (mov r8, r8)
    2ea0:	0000c5ce 	.word	0x0000c5ce
    2ea4:	00000118 	.word	0x00000118
    2ea8:	fffffe1b 	.word	0xfffffe1b
    2eac:	fffffe8f 	.word	0xfffffe8f

00002eb0 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
    2eb0:	b580      	push	{r7, lr}
    2eb2:	b082      	sub	sp, #8
    2eb4:	af00      	add	r7, sp, #0
    2eb6:	4b0e      	ldr	r3, [pc, #56]	; (2ef0 <sleepmgr_init+0x40>)
    2eb8:	447b      	add	r3, pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    2eba:	1dfa      	adds	r2, r7, #7
    2ebc:	2100      	movs	r1, #0
    2ebe:	7011      	strb	r1, [r2, #0]
    2ec0:	e00a      	b.n	2ed8 <sleepmgr_init+0x28>
		sleepmgr_locks[i] = 0;
    2ec2:	1dfa      	adds	r2, r7, #7
    2ec4:	7812      	ldrb	r2, [r2, #0]
    2ec6:	490b      	ldr	r1, [pc, #44]	; (2ef4 <sleepmgr_init+0x44>)
    2ec8:	5859      	ldr	r1, [r3, r1]
    2eca:	2000      	movs	r0, #0
    2ecc:	5488      	strb	r0, [r1, r2]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
    2ece:	1dfa      	adds	r2, r7, #7
    2ed0:	7811      	ldrb	r1, [r2, #0]
    2ed2:	1dfa      	adds	r2, r7, #7
    2ed4:	3101      	adds	r1, #1
    2ed6:	7011      	strb	r1, [r2, #0]
    2ed8:	1dfa      	adds	r2, r7, #7
    2eda:	7812      	ldrb	r2, [r2, #0]
    2edc:	2a03      	cmp	r2, #3
    2ede:	d9f0      	bls.n	2ec2 <sleepmgr_init+0x12>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
    2ee0:	4a04      	ldr	r2, [pc, #16]	; (2ef4 <sleepmgr_init+0x44>)
    2ee2:	589b      	ldr	r3, [r3, r2]
    2ee4:	2201      	movs	r2, #1
    2ee6:	711a      	strb	r2, [r3, #4]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    2ee8:	46c0      	nop			; (mov r8, r8)
    2eea:	46bd      	mov	sp, r7
    2eec:	b002      	add	sp, #8
    2eee:	bd80      	pop	{r7, pc}
    2ef0:	0000c578 	.word	0x0000c578
    2ef4:	00000248 	.word	0x00000248

00002ef8 <tc_is_syncing>:
{
    2ef8:	b580      	push	{r7, lr}
    2efa:	b084      	sub	sp, #16
    2efc:	af00      	add	r7, sp, #0
    2efe:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    2f00:	687b      	ldr	r3, [r7, #4]
    2f02:	681b      	ldr	r3, [r3, #0]
    2f04:	60fb      	str	r3, [r7, #12]
	return (tc_module->STATUS.reg & TC_STATUS_SYNCBUSY);
    2f06:	68fb      	ldr	r3, [r7, #12]
    2f08:	7bdb      	ldrb	r3, [r3, #15]
    2f0a:	b2db      	uxtb	r3, r3
    2f0c:	001a      	movs	r2, r3
    2f0e:	2380      	movs	r3, #128	; 0x80
    2f10:	4013      	ands	r3, r2
    2f12:	1e5a      	subs	r2, r3, #1
    2f14:	4193      	sbcs	r3, r2
    2f16:	b2db      	uxtb	r3, r3
}
    2f18:	0018      	movs	r0, r3
    2f1a:	46bd      	mov	sp, r7
    2f1c:	b004      	add	sp, #16
    2f1e:	bd80      	pop	{r7, pc}

00002f20 <tc_get_config_defaults>:
{
    2f20:	b580      	push	{r7, lr}
    2f22:	b082      	sub	sp, #8
    2f24:	af00      	add	r7, sp, #0
    2f26:	6078      	str	r0, [r7, #4]
	config->clock_source               = GCLK_GENERATOR_0;
    2f28:	687b      	ldr	r3, [r7, #4]
    2f2a:	2200      	movs	r2, #0
    2f2c:	701a      	strb	r2, [r3, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    2f2e:	687b      	ldr	r3, [r7, #4]
    2f30:	2200      	movs	r2, #0
    2f32:	709a      	strb	r2, [r3, #2]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    2f34:	687b      	ldr	r3, [r7, #4]
    2f36:	2200      	movs	r2, #0
    2f38:	809a      	strh	r2, [r3, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	2200      	movs	r2, #0
    2f3e:	719a      	strb	r2, [r3, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    2f40:	687b      	ldr	r3, [r7, #4]
    2f42:	2200      	movs	r2, #0
    2f44:	811a      	strh	r2, [r3, #8]
	config->run_in_standby             = false;
    2f46:	687b      	ldr	r3, [r7, #4]
    2f48:	2200      	movs	r2, #0
    2f4a:	705a      	strb	r2, [r3, #1]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    2f4c:	687b      	ldr	r3, [r7, #4]
    2f4e:	2200      	movs	r2, #0
    2f50:	729a      	strb	r2, [r3, #10]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    2f52:	687b      	ldr	r3, [r7, #4]
    2f54:	2200      	movs	r2, #0
    2f56:	72da      	strb	r2, [r3, #11]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    2f58:	687b      	ldr	r3, [r7, #4]
    2f5a:	2200      	movs	r2, #0
    2f5c:	731a      	strb	r2, [r3, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    2f5e:	687b      	ldr	r3, [r7, #4]
    2f60:	2200      	movs	r2, #0
    2f62:	739a      	strb	r2, [r3, #14]
	config->oneshot                    = false;
    2f64:	687b      	ldr	r3, [r7, #4]
    2f66:	2200      	movs	r2, #0
    2f68:	735a      	strb	r2, [r3, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    2f6a:	687b      	ldr	r3, [r7, #4]
    2f6c:	2200      	movs	r2, #0
    2f6e:	741a      	strb	r2, [r3, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    2f70:	687b      	ldr	r3, [r7, #4]
    2f72:	2200      	movs	r2, #0
    2f74:	615a      	str	r2, [r3, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    2f76:	687b      	ldr	r3, [r7, #4]
    2f78:	2200      	movs	r2, #0
    2f7a:	619a      	str	r2, [r3, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    2f7c:	687b      	ldr	r3, [r7, #4]
    2f7e:	2200      	movs	r2, #0
    2f80:	771a      	strb	r2, [r3, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    2f82:	687b      	ldr	r3, [r7, #4]
    2f84:	2200      	movs	r2, #0
    2f86:	621a      	str	r2, [r3, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    2f88:	687b      	ldr	r3, [r7, #4]
    2f8a:	2200      	movs	r2, #0
    2f8c:	625a      	str	r2, [r3, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    2f8e:	687b      	ldr	r3, [r7, #4]
    2f90:	2200      	movs	r2, #0
    2f92:	851a      	strh	r2, [r3, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_0]                        = 0x0000;
    2f94:	687b      	ldr	r3, [r7, #4]
    2f96:	2200      	movs	r2, #0
    2f98:	855a      	strh	r2, [r3, #42]	; 0x2a
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    2f9a:	687b      	ldr	r3, [r7, #4]
    2f9c:	2200      	movs	r2, #0
    2f9e:	859a      	strh	r2, [r3, #44]	; 0x2c
}
    2fa0:	46c0      	nop			; (mov r8, r8)
    2fa2:	46bd      	mov	sp, r7
    2fa4:	b002      	add	sp, #8
    2fa6:	bd80      	pop	{r7, pc}

00002fa8 <tc_enable_events>:
{
    2fa8:	b580      	push	{r7, lr}
    2faa:	b086      	sub	sp, #24
    2fac:	af00      	add	r7, sp, #0
    2fae:	6078      	str	r0, [r7, #4]
    2fb0:	6039      	str	r1, [r7, #0]
	Tc *const tc_module = module_inst->hw;
    2fb2:	687b      	ldr	r3, [r7, #4]
    2fb4:	681b      	ldr	r3, [r3, #0]
    2fb6:	60fb      	str	r3, [r7, #12]
	uint32_t event_mask = 0;
    2fb8:	2300      	movs	r3, #0
    2fba:	617b      	str	r3, [r7, #20]
	if (events->invert_event_input == true) {
    2fbc:	683b      	ldr	r3, [r7, #0]
    2fbe:	791b      	ldrb	r3, [r3, #4]
    2fc0:	2b00      	cmp	r3, #0
    2fc2:	d003      	beq.n	2fcc <tc_enable_events+0x24>
		event_mask |= TC_EVCTRL_TCINV;
    2fc4:	697b      	ldr	r3, [r7, #20]
    2fc6:	2210      	movs	r2, #16
    2fc8:	4313      	orrs	r3, r2
    2fca:	617b      	str	r3, [r7, #20]
	if (events->on_event_perform_action == true) {
    2fcc:	683b      	ldr	r3, [r7, #0]
    2fce:	78db      	ldrb	r3, [r3, #3]
    2fd0:	2b00      	cmp	r3, #0
    2fd2:	d003      	beq.n	2fdc <tc_enable_events+0x34>
		event_mask |= TC_EVCTRL_TCEI;
    2fd4:	697b      	ldr	r3, [r7, #20]
    2fd6:	2220      	movs	r2, #32
    2fd8:	4313      	orrs	r3, r2
    2fda:	617b      	str	r3, [r7, #20]
	if (events->generate_event_on_overflow == true) {
    2fdc:	683b      	ldr	r3, [r7, #0]
    2fde:	789b      	ldrb	r3, [r3, #2]
    2fe0:	2b00      	cmp	r3, #0
    2fe2:	d004      	beq.n	2fee <tc_enable_events+0x46>
		event_mask |= TC_EVCTRL_OVFEO;
    2fe4:	697b      	ldr	r3, [r7, #20]
    2fe6:	2280      	movs	r2, #128	; 0x80
    2fe8:	0052      	lsls	r2, r2, #1
    2fea:	4313      	orrs	r3, r2
    2fec:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    2fee:	2313      	movs	r3, #19
    2ff0:	18fb      	adds	r3, r7, r3
    2ff2:	2200      	movs	r2, #0
    2ff4:	701a      	strb	r2, [r3, #0]
    2ff6:	e017      	b.n	3028 <tc_enable_events+0x80>
		if (events->generate_event_on_compare_channel[i] == true) {
    2ff8:	2313      	movs	r3, #19
    2ffa:	18fb      	adds	r3, r7, r3
    2ffc:	781b      	ldrb	r3, [r3, #0]
    2ffe:	683a      	ldr	r2, [r7, #0]
    3000:	5cd3      	ldrb	r3, [r2, r3]
    3002:	2b00      	cmp	r3, #0
    3004:	d009      	beq.n	301a <tc_enable_events+0x72>
			event_mask |= (TC_EVCTRL_MCEO(1) << i);
    3006:	2313      	movs	r3, #19
    3008:	18fb      	adds	r3, r7, r3
    300a:	781b      	ldrb	r3, [r3, #0]
    300c:	2280      	movs	r2, #128	; 0x80
    300e:	0152      	lsls	r2, r2, #5
    3010:	409a      	lsls	r2, r3
    3012:	0013      	movs	r3, r2
    3014:	697a      	ldr	r2, [r7, #20]
    3016:	4313      	orrs	r3, r2
    3018:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < NUMBER_OF_COMPARE_CAPTURE_CHANNELS; i++) {
    301a:	2313      	movs	r3, #19
    301c:	18fb      	adds	r3, r7, r3
    301e:	781a      	ldrb	r2, [r3, #0]
    3020:	2313      	movs	r3, #19
    3022:	18fb      	adds	r3, r7, r3
    3024:	3201      	adds	r2, #1
    3026:	701a      	strb	r2, [r3, #0]
    3028:	2313      	movs	r3, #19
    302a:	18fb      	adds	r3, r7, r3
    302c:	781b      	ldrb	r3, [r3, #0]
    302e:	2b01      	cmp	r3, #1
    3030:	d9e2      	bls.n	2ff8 <tc_enable_events+0x50>
	tc_module->COUNT8.EVCTRL.reg |= event_mask | events->event_action;
    3032:	68fb      	ldr	r3, [r7, #12]
    3034:	895b      	ldrh	r3, [r3, #10]
    3036:	b29a      	uxth	r2, r3
    3038:	683b      	ldr	r3, [r7, #0]
    303a:	795b      	ldrb	r3, [r3, #5]
    303c:	b299      	uxth	r1, r3
    303e:	697b      	ldr	r3, [r7, #20]
    3040:	b29b      	uxth	r3, r3
    3042:	430b      	orrs	r3, r1
    3044:	b29b      	uxth	r3, r3
    3046:	4313      	orrs	r3, r2
    3048:	b29a      	uxth	r2, r3
    304a:	68fb      	ldr	r3, [r7, #12]
    304c:	815a      	strh	r2, [r3, #10]
}
    304e:	46c0      	nop			; (mov r8, r8)
    3050:	46bd      	mov	sp, r7
    3052:	b006      	add	sp, #24
    3054:	bd80      	pop	{r7, pc}
	...

00003058 <tc_enable>:
{
    3058:	b580      	push	{r7, lr}
    305a:	b084      	sub	sp, #16
    305c:	af00      	add	r7, sp, #0
    305e:	6078      	str	r0, [r7, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3060:	687b      	ldr	r3, [r7, #4]
    3062:	681b      	ldr	r3, [r3, #0]
    3064:	60fb      	str	r3, [r7, #12]
	while (tc_is_syncing(module_inst)) {
    3066:	46c0      	nop			; (mov r8, r8)
    3068:	687b      	ldr	r3, [r7, #4]
    306a:	0018      	movs	r0, r3
    306c:	4b08      	ldr	r3, [pc, #32]	; (3090 <tc_enable+0x38>)
    306e:	447b      	add	r3, pc
    3070:	4798      	blx	r3
    3072:	1e03      	subs	r3, r0, #0
    3074:	d1f8      	bne.n	3068 <tc_enable+0x10>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    3076:	68fb      	ldr	r3, [r7, #12]
    3078:	881b      	ldrh	r3, [r3, #0]
    307a:	b29b      	uxth	r3, r3
    307c:	2202      	movs	r2, #2
    307e:	4313      	orrs	r3, r2
    3080:	b29a      	uxth	r2, r3
    3082:	68fb      	ldr	r3, [r7, #12]
    3084:	801a      	strh	r2, [r3, #0]
}
    3086:	46c0      	nop			; (mov r8, r8)
    3088:	46bd      	mov	sp, r7
    308a:	b004      	add	sp, #16
    308c:	bd80      	pop	{r7, pc}
    308e:	46c0      	nop			; (mov r8, r8)
    3090:	fffffe87 	.word	0xfffffe87

00003094 <_tc_interrupt_get_interrupt_vector>:
{
    3094:	b580      	push	{r7, lr}
    3096:	b082      	sub	sp, #8
    3098:	af00      	add	r7, sp, #0
    309a:	6078      	str	r0, [r7, #4]
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    309c:	4a04      	ldr	r2, [pc, #16]	; (30b0 <_tc_interrupt_get_interrupt_vector+0x1c>)
    309e:	447a      	add	r2, pc
    30a0:	687b      	ldr	r3, [r7, #4]
    30a2:	18d3      	adds	r3, r2, r3
    30a4:	781b      	ldrb	r3, [r3, #0]
    30a6:	b25b      	sxtb	r3, r3
}
    30a8:	0018      	movs	r0, r3
    30aa:	46bd      	mov	sp, r7
    30ac:	b002      	add	sp, #8
    30ae:	bd80      	pop	{r7, pc}
    30b0:	1fffcf76 	.word	0x1fffcf76

000030b4 <tc_enable_callback>:
{
    30b4:	b580      	push	{r7, lr}
    30b6:	b082      	sub	sp, #8
    30b8:	af00      	add	r7, sp, #0
    30ba:	6078      	str	r0, [r7, #4]
    30bc:	000a      	movs	r2, r1
    30be:	1cfb      	adds	r3, r7, #3
    30c0:	701a      	strb	r2, [r3, #0]
    30c2:	4a26      	ldr	r2, [pc, #152]	; (315c <tc_enable_callback+0xa8>)
    30c4:	447a      	add	r2, pc
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    30c6:	687b      	ldr	r3, [r7, #4]
    30c8:	681b      	ldr	r3, [r3, #0]
    30ca:	0018      	movs	r0, r3
    30cc:	4b24      	ldr	r3, [pc, #144]	; (3160 <tc_enable_callback+0xac>)
    30ce:	58d3      	ldr	r3, [r2, r3]
    30d0:	4798      	blx	r3
    30d2:	0003      	movs	r3, r0
    30d4:	0018      	movs	r0, r3
    30d6:	4b23      	ldr	r3, [pc, #140]	; (3164 <tc_enable_callback+0xb0>)
    30d8:	447b      	add	r3, pc
    30da:	4798      	blx	r3
    30dc:	0003      	movs	r3, r0
    30de:	0018      	movs	r0, r3
    30e0:	4b21      	ldr	r3, [pc, #132]	; (3168 <tc_enable_callback+0xb4>)
    30e2:	447b      	add	r3, pc
    30e4:	4798      	blx	r3
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    30e6:	1cfb      	adds	r3, r7, #3
    30e8:	781b      	ldrb	r3, [r3, #0]
    30ea:	2b02      	cmp	r3, #2
    30ec:	d10b      	bne.n	3106 <tc_enable_callback+0x52>
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    30ee:	687b      	ldr	r3, [r7, #4]
    30f0:	7e5b      	ldrb	r3, [r3, #25]
    30f2:	2210      	movs	r2, #16
    30f4:	4313      	orrs	r3, r2
    30f6:	b2da      	uxtb	r2, r3
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	681b      	ldr	r3, [r3, #0]
    3100:	2210      	movs	r2, #16
    3102:	735a      	strb	r2, [r3, #13]
}
    3104:	e026      	b.n	3154 <tc_enable_callback+0xa0>
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    3106:	1cfb      	adds	r3, r7, #3
    3108:	781b      	ldrb	r3, [r3, #0]
    310a:	2b03      	cmp	r3, #3
    310c:	d10b      	bne.n	3126 <tc_enable_callback+0x72>
		module->enable_callback_mask |= TC_INTFLAG_MC(2);
    310e:	687b      	ldr	r3, [r7, #4]
    3110:	7e5b      	ldrb	r3, [r3, #25]
    3112:	2220      	movs	r2, #32
    3114:	4313      	orrs	r3, r2
    3116:	b2da      	uxtb	r2, r3
    3118:	687b      	ldr	r3, [r7, #4]
    311a:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(2);
    311c:	687b      	ldr	r3, [r7, #4]
    311e:	681b      	ldr	r3, [r3, #0]
    3120:	2220      	movs	r2, #32
    3122:	735a      	strb	r2, [r3, #13]
}
    3124:	e016      	b.n	3154 <tc_enable_callback+0xa0>
		module->enable_callback_mask |= (1 << callback_type);
    3126:	687b      	ldr	r3, [r7, #4]
    3128:	7e5b      	ldrb	r3, [r3, #25]
    312a:	b25a      	sxtb	r2, r3
    312c:	1cfb      	adds	r3, r7, #3
    312e:	781b      	ldrb	r3, [r3, #0]
    3130:	2101      	movs	r1, #1
    3132:	4099      	lsls	r1, r3
    3134:	000b      	movs	r3, r1
    3136:	b25b      	sxtb	r3, r3
    3138:	4313      	orrs	r3, r2
    313a:	b25b      	sxtb	r3, r3
    313c:	b2da      	uxtb	r2, r3
    313e:	687b      	ldr	r3, [r7, #4]
    3140:	765a      	strb	r2, [r3, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    3142:	687b      	ldr	r3, [r7, #4]
    3144:	681b      	ldr	r3, [r3, #0]
    3146:	1cfa      	adds	r2, r7, #3
    3148:	7812      	ldrb	r2, [r2, #0]
    314a:	2101      	movs	r1, #1
    314c:	4091      	lsls	r1, r2
    314e:	000a      	movs	r2, r1
    3150:	b2d2      	uxtb	r2, r2
    3152:	735a      	strb	r2, [r3, #13]
}
    3154:	46c0      	nop			; (mov r8, r8)
    3156:	46bd      	mov	sp, r7
    3158:	b002      	add	sp, #8
    315a:	bd80      	pop	{r7, pc}
    315c:	0000c36c 	.word	0x0000c36c
    3160:	0000013c 	.word	0x0000013c
    3164:	ffffffb9 	.word	0xffffffb9
    3168:	fffffa9f 	.word	0xfffffa9f

0000316c <configure_wakeup>:
static char save_file_name[MAIN_MAX_FILE_NAME_LENGTH + 1] = "0:";
struct sw_timer_module swt_module_inst;
struct http_client_module http_client_module_inst;
struct rtc_module rtc_instance;

static enum status_code configure_wakeup(void) {
    316c:	b5b0      	push	{r4, r5, r7, lr}
    316e:	b084      	sub	sp, #16
    3170:	af00      	add	r7, sp, #0
    3172:	4c2a      	ldr	r4, [pc, #168]	; (321c <configure_wakeup+0xb0>)
    3174:	447c      	add	r4, pc
	struct extint_chan_conf ext_conf;
	extint_chan_get_config_defaults(&ext_conf);
    3176:	003b      	movs	r3, r7
    3178:	0018      	movs	r0, r3
    317a:	4b29      	ldr	r3, [pc, #164]	; (3220 <configure_wakeup+0xb4>)
    317c:	58e3      	ldr	r3, [r4, r3]
    317e:	4798      	blx	r3
	ext_conf.detection_criteria = EXTINT_DETECT_FALLING;
    3180:	003b      	movs	r3, r7
    3182:	2202      	movs	r2, #2
    3184:	72da      	strb	r2, [r3, #11]
	ext_conf.filter_input_signal = true;
    3186:	003b      	movs	r3, r7
    3188:	2201      	movs	r2, #1
    318a:	729a      	strb	r2, [r3, #10]
	ext_conf.wake_if_sleeping = true;
    318c:	003b      	movs	r3, r7
    318e:	2201      	movs	r2, #1
    3190:	725a      	strb	r2, [r3, #9]
	ext_conf.gpio_pin = BUT1_IRQ_IN_PIN;
    3192:	003b      	movs	r3, r7
    3194:	2203      	movs	r2, #3
    3196:	601a      	str	r2, [r3, #0]
	ext_conf.gpio_pin_mux = MUX_PA03A_EIC_EXTINT3;
    3198:	003b      	movs	r3, r7
    319a:	2200      	movs	r2, #0
    319c:	605a      	str	r2, [r3, #4]
	ext_conf.gpio_pin_pull = EXTINT_PULL_UP;
    319e:	003b      	movs	r3, r7
    31a0:	2201      	movs	r2, #1
    31a2:	721a      	strb	r2, [r3, #8]
	extint_chan_set_config(3, &ext_conf);
    31a4:	003b      	movs	r3, r7
    31a6:	0019      	movs	r1, r3
    31a8:	2003      	movs	r0, #3
    31aa:	4b1e      	ldr	r3, [pc, #120]	; (3224 <configure_wakeup+0xb8>)
    31ac:	58e3      	ldr	r3, [r4, r3]
    31ae:	4798      	blx	r3
	enum status_code code1 = extint_chan_enable_callback(3, EXTINT_CALLBACK_TYPE_DETECT);
    31b0:	230f      	movs	r3, #15
    31b2:	18fd      	adds	r5, r7, r3
    31b4:	2100      	movs	r1, #0
    31b6:	2003      	movs	r0, #3
    31b8:	4b1b      	ldr	r3, [pc, #108]	; (3228 <configure_wakeup+0xbc>)
    31ba:	58e3      	ldr	r3, [r4, r3]
    31bc:	4798      	blx	r3
    31be:	0003      	movs	r3, r0
    31c0:	702b      	strb	r3, [r5, #0]
	ext_conf.gpio_pin = BUT2_IRQ_IN_PIN;
    31c2:	003b      	movs	r3, r7
    31c4:	221f      	movs	r2, #31
    31c6:	601a      	str	r2, [r3, #0]
	ext_conf.gpio_pin_mux = MUX_PA31A_EIC_EXTINT11;
    31c8:	003b      	movs	r3, r7
    31ca:	2200      	movs	r2, #0
    31cc:	605a      	str	r2, [r3, #4]
	extint_chan_set_config(11, &ext_conf);
    31ce:	003b      	movs	r3, r7
    31d0:	0019      	movs	r1, r3
    31d2:	200b      	movs	r0, #11
    31d4:	4b13      	ldr	r3, [pc, #76]	; (3224 <configure_wakeup+0xb8>)
    31d6:	58e3      	ldr	r3, [r4, r3]
    31d8:	4798      	blx	r3
	enum status_code code2 = extint_chan_enable_callback(11, EXTINT_CALLBACK_TYPE_DETECT);
    31da:	230e      	movs	r3, #14
    31dc:	18fd      	adds	r5, r7, r3
    31de:	2100      	movs	r1, #0
    31e0:	200b      	movs	r0, #11
    31e2:	4b11      	ldr	r3, [pc, #68]	; (3228 <configure_wakeup+0xbc>)
    31e4:	58e3      	ldr	r3, [r4, r3]
    31e6:	4798      	blx	r3
    31e8:	0003      	movs	r3, r0
    31ea:	702b      	strb	r3, [r5, #0]
	if (code1 != STATUS_OK) return code1;
    31ec:	230f      	movs	r3, #15
    31ee:	18fb      	adds	r3, r7, r3
    31f0:	781b      	ldrb	r3, [r3, #0]
    31f2:	2b00      	cmp	r3, #0
    31f4:	d003      	beq.n	31fe <configure_wakeup+0x92>
    31f6:	230f      	movs	r3, #15
    31f8:	18fb      	adds	r3, r7, r3
    31fa:	781b      	ldrb	r3, [r3, #0]
    31fc:	e009      	b.n	3212 <configure_wakeup+0xa6>
	else if (code2 != STATUS_OK) return code2;
    31fe:	230e      	movs	r3, #14
    3200:	18fb      	adds	r3, r7, r3
    3202:	781b      	ldrb	r3, [r3, #0]
    3204:	2b00      	cmp	r3, #0
    3206:	d003      	beq.n	3210 <configure_wakeup+0xa4>
    3208:	230e      	movs	r3, #14
    320a:	18fb      	adds	r3, r7, r3
    320c:	781b      	ldrb	r3, [r3, #0]
    320e:	e000      	b.n	3212 <configure_wakeup+0xa6>
	else return STATUS_OK;
    3210:	2300      	movs	r3, #0
}
    3212:	0018      	movs	r0, r3
    3214:	46bd      	mov	sp, r7
    3216:	b004      	add	sp, #16
    3218:	bdb0      	pop	{r4, r5, r7, pc}
    321a:	46c0      	nop			; (mov r8, r8)
    321c:	0000c2bc 	.word	0x0000c2bc
    3220:	0000002c 	.word	0x0000002c
    3224:	00000148 	.word	0x00000148
    3228:	000001d0 	.word	0x000001d0

0000322c <configure_rtc>:

static enum status_code configure_rtc(void)
{
    322c:	b590      	push	{r4, r7, lr}
    322e:	b087      	sub	sp, #28
    3230:	af00      	add	r7, sp, #0
    3232:	4c1e      	ldr	r4, [pc, #120]	; (32ac <configure_rtc+0x80>)
    3234:	447c      	add	r4, pc
	// config base structs
	rtc_instance.hw = RTC;
    3236:	4b1e      	ldr	r3, [pc, #120]	; (32b0 <configure_rtc+0x84>)
    3238:	58e3      	ldr	r3, [r4, r3]
    323a:	4a1e      	ldr	r2, [pc, #120]	; (32b4 <configure_rtc+0x88>)
    323c:	601a      	str	r2, [r3, #0]
	rtc_instance.clock_24h = 1;
    323e:	4b1c      	ldr	r3, [pc, #112]	; (32b0 <configure_rtc+0x84>)
    3240:	58e3      	ldr	r3, [r4, r3]
    3242:	2201      	movs	r2, #1
    3244:	711a      	strb	r2, [r3, #4]
	rtc_instance.year_init_value = 2000;
    3246:	4b1a      	ldr	r3, [pc, #104]	; (32b0 <configure_rtc+0x84>)
    3248:	58e3      	ldr	r3, [r4, r3]
    324a:	22fa      	movs	r2, #250	; 0xfa
    324c:	00d2      	lsls	r2, r2, #3
    324e:	80da      	strh	r2, [r3, #6]
	struct rtc_calendar_config config_rtc_calendar;
	rtc_calendar_get_config_defaults(&config_rtc_calendar);
    3250:	1d3b      	adds	r3, r7, #4
    3252:	0018      	movs	r0, r3
    3254:	4b18      	ldr	r3, [pc, #96]	; (32b8 <configure_rtc+0x8c>)
    3256:	447b      	add	r3, pc
    3258:	4798      	blx	r3
	config_rtc_calendar.clock_24h = true;
    325a:	1d3b      	adds	r3, r7, #4
    325c:	2201      	movs	r2, #1
    325e:	711a      	strb	r2, [r3, #4]
	
	// enable the GCLK to RTC to read out the initial time before enabling
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    3260:	003b      	movs	r3, r7
    3262:	0018      	movs	r0, r3
    3264:	4b15      	ldr	r3, [pc, #84]	; (32bc <configure_rtc+0x90>)
    3266:	447b      	add	r3, pc
    3268:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    326a:	003b      	movs	r3, r7
    326c:	2202      	movs	r2, #2
    326e:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    3270:	003b      	movs	r3, r7
    3272:	0019      	movs	r1, r3
    3274:	2004      	movs	r0, #4
    3276:	4b12      	ldr	r3, [pc, #72]	; (32c0 <configure_rtc+0x94>)
    3278:	58e3      	ldr	r3, [r4, r3]
    327a:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    327c:	2004      	movs	r0, #4
    327e:	4b11      	ldr	r3, [pc, #68]	; (32c4 <configure_rtc+0x98>)
    3280:	58e3      	ldr	r3, [r4, r3]
    3282:	4798      	blx	r3

	// enable the RTC and set the initial time
	rtc_calendar_init(&rtc_instance, RTC, &config_rtc_calendar);
    3284:	1d3a      	adds	r2, r7, #4
    3286:	490b      	ldr	r1, [pc, #44]	; (32b4 <configure_rtc+0x88>)
    3288:	4b09      	ldr	r3, [pc, #36]	; (32b0 <configure_rtc+0x84>)
    328a:	58e3      	ldr	r3, [r4, r3]
    328c:	0018      	movs	r0, r3
    328e:	4b0e      	ldr	r3, [pc, #56]	; (32c8 <configure_rtc+0x9c>)
    3290:	58e3      	ldr	r3, [r4, r3]
    3292:	4798      	blx	r3
	rtc_calendar_enable(&rtc_instance);
    3294:	4b06      	ldr	r3, [pc, #24]	; (32b0 <configure_rtc+0x84>)
    3296:	58e3      	ldr	r3, [r4, r3]
    3298:	0018      	movs	r0, r3
    329a:	4b0c      	ldr	r3, [pc, #48]	; (32cc <configure_rtc+0xa0>)
    329c:	58e3      	ldr	r3, [r4, r3]
    329e:	4798      	blx	r3
	return STATUS_OK;
    32a0:	2300      	movs	r3, #0
}
    32a2:	0018      	movs	r0, r3
    32a4:	46bd      	mov	sp, r7
    32a6:	b007      	add	sp, #28
    32a8:	bd90      	pop	{r4, r7, pc}
    32aa:	46c0      	nop			; (mov r8, r8)
    32ac:	0000c1fc 	.word	0x0000c1fc
    32b0:	0000003c 	.word	0x0000003c
    32b4:	40001400 	.word	0x40001400
    32b8:	fffff993 	.word	0xfffff993
    32bc:	fffff70d 	.word	0xfffff70d
    32c0:	000000d4 	.word	0x000000d4
    32c4:	00000260 	.word	0x00000260
    32c8:	000000f8 	.word	0x000000f8
    32cc:	0000007c 	.word	0x0000007c

000032d0 <configure_bod>:

static enum status_code configure_bod(void)
{
    32d0:	b5b0      	push	{r4, r5, r7, lr}
    32d2:	b084      	sub	sp, #16
    32d4:	af00      	add	r7, sp, #0
    32d6:	4d24      	ldr	r5, [pc, #144]	; (3368 <configure_bod+0x98>)
    32d8:	447d      	add	r5, pc
	struct bod_config config_bod33;
	bod_get_config_defaults(&config_bod33);
    32da:	1d3b      	adds	r3, r7, #4
    32dc:	0018      	movs	r0, r3
    32de:	4b23      	ldr	r3, [pc, #140]	; (336c <configure_bod+0x9c>)
    32e0:	447b      	add	r3, pc
    32e2:	4798      	blx	r3
	config_bod33.action = BOD_ACTION_INTERRUPT;
    32e4:	1d3b      	adds	r3, r7, #4
    32e6:	2210      	movs	r2, #16
    32e8:	711a      	strb	r2, [r3, #4]
	config_bod33.hysteresis = 1;
    32ea:	1d3b      	adds	r3, r7, #4
    32ec:	2201      	movs	r2, #1
    32ee:	719a      	strb	r2, [r3, #6]
	config_bod33.run_in_standby = 0;
    32f0:	1d3b      	adds	r3, r7, #4
    32f2:	2200      	movs	r2, #0
    32f4:	71da      	strb	r2, [r3, #7]
	config_bod33.mode = BOD_MODE_SAMPLED;
    32f6:	1d3b      	adds	r3, r7, #4
    32f8:	2280      	movs	r2, #128	; 0x80
    32fa:	0052      	lsls	r2, r2, #1
    32fc:	805a      	strh	r2, [r3, #2]
	config_bod33.level = 40;						// Set to 2.8V
    32fe:	1d3b      	adds	r3, r7, #4
    3300:	2228      	movs	r2, #40	; 0x28
    3302:	715a      	strb	r2, [r3, #5]
	enum status_code code1 = bod_set_config(BOD_BOD33, &config_bod33);
    3304:	230f      	movs	r3, #15
    3306:	18fc      	adds	r4, r7, r3
    3308:	1d3b      	adds	r3, r7, #4
    330a:	0019      	movs	r1, r3
    330c:	2000      	movs	r0, #0
    330e:	4b18      	ldr	r3, [pc, #96]	; (3370 <configure_bod+0xa0>)
    3310:	58eb      	ldr	r3, [r5, r3]
    3312:	4798      	blx	r3
    3314:	0003      	movs	r3, r0
    3316:	7023      	strb	r3, [r4, #0]
	enum status_code code2 = bod_enable(BOD_BOD33);
    3318:	230e      	movs	r3, #14
    331a:	18fc      	adds	r4, r7, r3
    331c:	2000      	movs	r0, #0
    331e:	4b15      	ldr	r3, [pc, #84]	; (3374 <configure_bod+0xa4>)
    3320:	447b      	add	r3, pc
    3322:	4798      	blx	r3
    3324:	0003      	movs	r3, r0
    3326:	7023      	strb	r3, [r4, #0]
	SYSCTRL->INTENSET.reg = SYSCTRL_INTENCLR_BOD33DET;
    3328:	4b13      	ldr	r3, [pc, #76]	; (3378 <configure_bod+0xa8>)
    332a:	2280      	movs	r2, #128	; 0x80
    332c:	00d2      	lsls	r2, r2, #3
    332e:	605a      	str	r2, [r3, #4]
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_SYSCTRL);
    3330:	2001      	movs	r0, #1
    3332:	4b12      	ldr	r3, [pc, #72]	; (337c <configure_bod+0xac>)
    3334:	447b      	add	r3, pc
    3336:	4798      	blx	r3
	if (code1 != STATUS_OK) return code1;
    3338:	230f      	movs	r3, #15
    333a:	18fb      	adds	r3, r7, r3
    333c:	781b      	ldrb	r3, [r3, #0]
    333e:	2b00      	cmp	r3, #0
    3340:	d003      	beq.n	334a <configure_bod+0x7a>
    3342:	230f      	movs	r3, #15
    3344:	18fb      	adds	r3, r7, r3
    3346:	781b      	ldrb	r3, [r3, #0]
    3348:	e009      	b.n	335e <configure_bod+0x8e>
	else if (code2 != STATUS_OK) return code2;
    334a:	230e      	movs	r3, #14
    334c:	18fb      	adds	r3, r7, r3
    334e:	781b      	ldrb	r3, [r3, #0]
    3350:	2b00      	cmp	r3, #0
    3352:	d003      	beq.n	335c <configure_bod+0x8c>
    3354:	230e      	movs	r3, #14
    3356:	18fb      	adds	r3, r7, r3
    3358:	781b      	ldrb	r3, [r3, #0]
    335a:	e000      	b.n	335e <configure_bod+0x8e>
	else return STATUS_OK;
    335c:	2300      	movs	r3, #0
}
    335e:	0018      	movs	r0, r3
    3360:	46bd      	mov	sp, r7
    3362:	b004      	add	sp, #16
    3364:	bdb0      	pop	{r4, r5, r7, pc}
    3366:	46c0      	nop			; (mov r8, r8)
    3368:	0000c158 	.word	0x0000c158
    336c:	fffff545 	.word	0xfffff545
    3370:	0000024c 	.word	0x0000024c
    3374:	fffff539 	.word	0xfffff539
    3378:	40000800 	.word	0x40000800
    337c:	fffff84d 	.word	0xfffff84d

00003380 <SYSCTRL_Handler>:

// Brown-out action, when supply-voltage < 2.8V ...
void SYSCTRL_Handler(void) {
    3380:	b580      	push	{r7, lr}
    3382:	af00      	add	r7, sp, #0
	if (SYSCTRL->INTFLAG.reg & SYSCTRL_INTFLAG_BOD33DET) {
    3384:	4b07      	ldr	r3, [pc, #28]	; (33a4 <SYSCTRL_Handler+0x24>)
    3386:	689a      	ldr	r2, [r3, #8]
    3388:	2380      	movs	r3, #128	; 0x80
    338a:	00db      	lsls	r3, r3, #3
    338c:	4013      	ands	r3, r2
    338e:	d006      	beq.n	339e <SYSCTRL_Handler+0x1e>
		SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33DET;
    3390:	4b04      	ldr	r3, [pc, #16]	; (33a4 <SYSCTRL_Handler+0x24>)
    3392:	2280      	movs	r2, #128	; 0x80
    3394:	00d2      	lsls	r2, r2, #3
    3396:	609a      	str	r2, [r3, #8]
		system_sleep();
    3398:	4b03      	ldr	r3, [pc, #12]	; (33a8 <SYSCTRL_Handler+0x28>)
    339a:	447b      	add	r3, pc
    339c:	4798      	blx	r3
	}
}
    339e:	46c0      	nop			; (mov r8, r8)
    33a0:	46bd      	mov	sp, r7
    33a2:	bd80      	pop	{r7, pc}
    33a4:	40000800 	.word	0x40000800
    33a8:	fffff987 	.word	0xfffff987

000033ac <transfer_done>:
struct spi_module adc_spi;
struct events_resource events;
volatile bool transfer_is_done = 0;

static void transfer_done(struct dma_resource* const resource )
{
    33ac:	b590      	push	{r4, r7, lr}
    33ae:	b085      	sub	sp, #20
    33b0:	af00      	add	r7, sp, #0
    33b2:	6078      	str	r0, [r7, #4]
    33b4:	4c13      	ldr	r4, [pc, #76]	; (3404 <transfer_done+0x58>)
    33b6:	447c      	add	r4, pc
	transfer_is_done = true;
    33b8:	4b13      	ldr	r3, [pc, #76]	; (3408 <transfer_done+0x5c>)
    33ba:	58e3      	ldr	r3, [r4, r3]
    33bc:	2201      	movs	r2, #1
    33be:	701a      	strb	r2, [r3, #0]

	// Raise the CS pin and release it back to hardware SPI
	port_pin_set_output_level(ADC_SPI_CS_PIN, 1);
    33c0:	2101      	movs	r1, #1
    33c2:	2036      	movs	r0, #54	; 0x36
    33c4:	4b11      	ldr	r3, [pc, #68]	; (340c <transfer_done+0x60>)
    33c6:	447b      	add	r3, pc
    33c8:	4798      	blx	r3
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
    33ca:	230c      	movs	r3, #12
    33cc:	18fb      	adds	r3, r7, r3
    33ce:	0018      	movs	r0, r3
    33d0:	4b0f      	ldr	r3, [pc, #60]	; (3410 <transfer_done+0x64>)
    33d2:	447b      	add	r3, pc
    33d4:	4798      	blx	r3
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    33d6:	230c      	movs	r3, #12
    33d8:	18fb      	adds	r3, r7, r3
    33da:	2201      	movs	r2, #1
    33dc:	705a      	strb	r2, [r3, #1]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    33de:	230c      	movs	r3, #12
    33e0:	18fb      	adds	r3, r7, r3
    33e2:	2200      	movs	r2, #0
    33e4:	709a      	strb	r2, [r3, #2]
	mcfg.mux_position = MUX_PB22D_SERCOM5_PAD2;
    33e6:	230c      	movs	r3, #12
    33e8:	18fb      	adds	r3, r7, r3
    33ea:	2203      	movs	r2, #3
    33ec:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
    33ee:	230c      	movs	r3, #12
    33f0:	18fb      	adds	r3, r7, r3
    33f2:	0019      	movs	r1, r3
    33f4:	2036      	movs	r0, #54	; 0x36
    33f6:	4b07      	ldr	r3, [pc, #28]	; (3414 <transfer_done+0x68>)
    33f8:	58e3      	ldr	r3, [r4, r3]
    33fa:	4798      	blx	r3
}
    33fc:	46c0      	nop			; (mov r8, r8)
    33fe:	46bd      	mov	sp, r7
    3400:	b005      	add	sp, #20
    3402:	bd90      	pop	{r4, r7, pc}
    3404:	0000c07a 	.word	0x0000c07a
    3408:	000001cc 	.word	0x000001cc
    340c:	fffff71f 	.word	0xfffff71f
    3410:	fffff5b7 	.word	0xfffff5b7
    3414:	000002dc 	.word	0x000002dc

00003418 <transfer_start>:
static void transfer_start(struct tc_module* const resource )
{
    3418:	b590      	push	{r4, r7, lr}
    341a:	b085      	sub	sp, #20
    341c:	af00      	add	r7, sp, #0
    341e:	6078      	str	r0, [r7, #4]
    3420:	4c11      	ldr	r4, [pc, #68]	; (3468 <transfer_start+0x50>)
    3422:	447c      	add	r4, pc
	// Take over the CS pin and hold it low
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
    3424:	230c      	movs	r3, #12
    3426:	18fb      	adds	r3, r7, r3
    3428:	0018      	movs	r0, r3
    342a:	4b10      	ldr	r3, [pc, #64]	; (346c <transfer_start+0x54>)
    342c:	447b      	add	r3, pc
    342e:	4798      	blx	r3
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3430:	230c      	movs	r3, #12
    3432:	18fb      	adds	r3, r7, r3
    3434:	2201      	movs	r2, #1
    3436:	705a      	strb	r2, [r3, #1]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3438:	230c      	movs	r3, #12
    343a:	18fb      	adds	r3, r7, r3
    343c:	2200      	movs	r2, #0
    343e:	709a      	strb	r2, [r3, #2]
	mcfg.mux_position = MUX_PB22A_EIC_EXTINT6;
    3440:	230c      	movs	r3, #12
    3442:	18fb      	adds	r3, r7, r3
    3444:	2200      	movs	r2, #0
    3446:	701a      	strb	r2, [r3, #0]
	port_pin_set_output_level(ADC_SPI_CS_PIN, 0);
    3448:	2100      	movs	r1, #0
    344a:	2036      	movs	r0, #54	; 0x36
    344c:	4b08      	ldr	r3, [pc, #32]	; (3470 <transfer_start+0x58>)
    344e:	447b      	add	r3, pc
    3450:	4798      	blx	r3
	system_pinmux_pin_set_config(ADC_SPI_CS_PIN, &mcfg);
    3452:	230c      	movs	r3, #12
    3454:	18fb      	adds	r3, r7, r3
    3456:	0019      	movs	r1, r3
    3458:	2036      	movs	r0, #54	; 0x36
    345a:	4b06      	ldr	r3, [pc, #24]	; (3474 <transfer_start+0x5c>)
    345c:	58e3      	ldr	r3, [r4, r3]
    345e:	4798      	blx	r3
}
    3460:	46c0      	nop			; (mov r8, r8)
    3462:	46bd      	mov	sp, r7
    3464:	b005      	add	sp, #20
    3466:	bd90      	pop	{r4, r7, pc}
    3468:	0000c00e 	.word	0x0000c00e
    346c:	fffff55d 	.word	0xfffff55d
    3470:	fffff697 	.word	0xfffff697
    3474:	000002dc 	.word	0x000002dc

00003478 <configure_dma_resources>:
static void configure_dma_resources()
{
    3478:	b590      	push	{r4, r7, lr}
    347a:	b083      	sub	sp, #12
    347c:	af00      	add	r7, sp, #0
    347e:	4c18      	ldr	r4, [pc, #96]	; (34e0 <configure_dma_resources+0x68>)
    3480:	447c      	add	r4, pc
	struct dma_resource_config config;
	dma_get_config_defaults(&config);
    3482:	003b      	movs	r3, r7
    3484:	0018      	movs	r0, r3
    3486:	4b17      	ldr	r3, [pc, #92]	; (34e4 <configure_dma_resources+0x6c>)
    3488:	58e3      	ldr	r3, [r4, r3]
    348a:	4798      	blx	r3
	config.peripheral_trigger = SERCOM5_DMAC_ID_TX;
    348c:	003b      	movs	r3, r7
    348e:	220c      	movs	r2, #12
    3490:	705a      	strb	r2, [r3, #1]
	config.trigger_action = DMA_TRIGGER_ACTION_BEAT;
    3492:	003b      	movs	r3, r7
    3494:	2202      	movs	r2, #2
    3496:	709a      	strb	r2, [r3, #2]
	config.priority = DMA_PRIORITY_LEVEL_3;
    3498:	003b      	movs	r3, r7
    349a:	2203      	movs	r2, #3
    349c:	701a      	strb	r2, [r3, #0]
	config.event_config.input_action = DMA_EVENT_INPUT_CBLOCK;
    349e:	003b      	movs	r3, r7
    34a0:	2203      	movs	r2, #3
    34a2:	70da      	strb	r2, [r3, #3]
	dma_allocate(&tx_spi_dma, &config);
    34a4:	003a      	movs	r2, r7
    34a6:	4b10      	ldr	r3, [pc, #64]	; (34e8 <configure_dma_resources+0x70>)
    34a8:	58e3      	ldr	r3, [r4, r3]
    34aa:	0011      	movs	r1, r2
    34ac:	0018      	movs	r0, r3
    34ae:	4b0f      	ldr	r3, [pc, #60]	; (34ec <configure_dma_resources+0x74>)
    34b0:	58e3      	ldr	r3, [r4, r3]
    34b2:	4798      	blx	r3
	config.priority = DMA_PRIORITY_LEVEL_3;
    34b4:	003b      	movs	r3, r7
    34b6:	2203      	movs	r2, #3
    34b8:	701a      	strb	r2, [r3, #0]
	config.peripheral_trigger = SERCOM5_DMAC_ID_RX;
    34ba:	003b      	movs	r3, r7
    34bc:	220b      	movs	r2, #11
    34be:	705a      	strb	r2, [r3, #1]
	config.event_config.input_action = DMA_EVENT_INPUT_NOACT;
    34c0:	003b      	movs	r3, r7
    34c2:	2200      	movs	r2, #0
    34c4:	70da      	strb	r2, [r3, #3]
	dma_allocate(&rx_spi_dma, &config);
    34c6:	003a      	movs	r2, r7
    34c8:	4b09      	ldr	r3, [pc, #36]	; (34f0 <configure_dma_resources+0x78>)
    34ca:	58e3      	ldr	r3, [r4, r3]
    34cc:	0011      	movs	r1, r2
    34ce:	0018      	movs	r0, r3
    34d0:	4b06      	ldr	r3, [pc, #24]	; (34ec <configure_dma_resources+0x74>)
    34d2:	58e3      	ldr	r3, [r4, r3]
    34d4:	4798      	blx	r3
}
    34d6:	46c0      	nop			; (mov r8, r8)
    34d8:	46bd      	mov	sp, r7
    34da:	b003      	add	sp, #12
    34dc:	bd90      	pop	{r4, r7, pc}
    34de:	46c0      	nop			; (mov r8, r8)
    34e0:	0000bfb0 	.word	0x0000bfb0
    34e4:	000002d0 	.word	0x000002d0
    34e8:	000001f4 	.word	0x000001f4
    34ec:	0000031c 	.word	0x0000031c
    34f0:	000002ec 	.word	0x000002ec

000034f4 <setup_transfer_descriptor>:
uint8_t tx_buffer[9];
uint8_t rx_buffer[9];
static void setup_transfer_descriptor()
{
    34f4:	b590      	push	{r4, r7, lr}
    34f6:	b087      	sub	sp, #28
    34f8:	af00      	add	r7, sp, #0
    34fa:	4c1f      	ldr	r4, [pc, #124]	; (3578 <setup_transfer_descriptor+0x84>)
    34fc:	447c      	add	r4, pc
	struct dma_descriptor_config descriptor_config;
	dma_descriptor_get_config_defaults(&descriptor_config);
    34fe:	003b      	movs	r3, r7
    3500:	0018      	movs	r0, r3
    3502:	4b1e      	ldr	r3, [pc, #120]	; (357c <setup_transfer_descriptor+0x88>)
    3504:	447b      	add	r3, pc
    3506:	4798      	blx	r3
	descriptor_config.beat_size = DMA_BEAT_SIZE_BYTE;
    3508:	003b      	movs	r3, r7
    350a:	2200      	movs	r2, #0
    350c:	70da      	strb	r2, [r3, #3]
	descriptor_config.block_transfer_count = 9;
    350e:	003b      	movs	r3, r7
    3510:	2209      	movs	r2, #9
    3512:	811a      	strh	r2, [r3, #8]
	descriptor_config.source_address = (uint32_t)tx_buffer + sizeof(tx_buffer);
    3514:	4b1a      	ldr	r3, [pc, #104]	; (3580 <setup_transfer_descriptor+0x8c>)
    3516:	58e3      	ldr	r3, [r4, r3]
    3518:	3309      	adds	r3, #9
    351a:	001a      	movs	r2, r3
    351c:	003b      	movs	r3, r7
    351e:	60da      	str	r2, [r3, #12]
	descriptor_config.destination_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
    3520:	003b      	movs	r3, r7
    3522:	4a18      	ldr	r2, [pc, #96]	; (3584 <setup_transfer_descriptor+0x90>)
    3524:	611a      	str	r2, [r3, #16]
	descriptor_config.dst_increment_enable = 0;
    3526:	003b      	movs	r3, r7
    3528:	2200      	movs	r2, #0
    352a:	715a      	strb	r2, [r3, #5]
	descriptor_config.src_increment_enable = 1;
    352c:	003b      	movs	r3, r7
    352e:	2201      	movs	r2, #1
    3530:	711a      	strb	r2, [r3, #4]
	dma_descriptor_create(&tx_spi_desc, &descriptor_config);
    3532:	003a      	movs	r2, r7
    3534:	4b14      	ldr	r3, [pc, #80]	; (3588 <setup_transfer_descriptor+0x94>)
    3536:	58e3      	ldr	r3, [r4, r3]
    3538:	0011      	movs	r1, r2
    353a:	0018      	movs	r0, r3
    353c:	4b13      	ldr	r3, [pc, #76]	; (358c <setup_transfer_descriptor+0x98>)
    353e:	58e3      	ldr	r3, [r4, r3]
    3540:	4798      	blx	r3

	descriptor_config.source_address = (uint32_t)(&SERCOM5->SPI.DATA.reg);
    3542:	003b      	movs	r3, r7
    3544:	4a0f      	ldr	r2, [pc, #60]	; (3584 <setup_transfer_descriptor+0x90>)
    3546:	60da      	str	r2, [r3, #12]
	descriptor_config.destination_address = (uint32_t)rx_buffer + sizeof(rx_buffer);
    3548:	4b11      	ldr	r3, [pc, #68]	; (3590 <setup_transfer_descriptor+0x9c>)
    354a:	58e3      	ldr	r3, [r4, r3]
    354c:	3309      	adds	r3, #9
    354e:	001a      	movs	r2, r3
    3550:	003b      	movs	r3, r7
    3552:	611a      	str	r2, [r3, #16]
	descriptor_config.src_increment_enable = 0;
    3554:	003b      	movs	r3, r7
    3556:	2200      	movs	r2, #0
    3558:	711a      	strb	r2, [r3, #4]
	descriptor_config.dst_increment_enable = 1;
    355a:	003b      	movs	r3, r7
    355c:	2201      	movs	r2, #1
    355e:	715a      	strb	r2, [r3, #5]
	dma_descriptor_create(&rx_spi_desc, &descriptor_config);
    3560:	003a      	movs	r2, r7
    3562:	4b0c      	ldr	r3, [pc, #48]	; (3594 <setup_transfer_descriptor+0xa0>)
    3564:	58e3      	ldr	r3, [r4, r3]
    3566:	0011      	movs	r1, r2
    3568:	0018      	movs	r0, r3
    356a:	4b08      	ldr	r3, [pc, #32]	; (358c <setup_transfer_descriptor+0x98>)
    356c:	58e3      	ldr	r3, [r4, r3]
    356e:	4798      	blx	r3
}
    3570:	46c0      	nop			; (mov r8, r8)
    3572:	46bd      	mov	sp, r7
    3574:	b007      	add	sp, #28
    3576:	bd90      	pop	{r4, r7, pc}
    3578:	0000bf34 	.word	0x0000bf34
    357c:	fffff417 	.word	0xfffff417
    3580:	00000174 	.word	0x00000174
    3584:	42001c28 	.word	0x42001c28
    3588:	00000044 	.word	0x00000044
    358c:	000000b4 	.word	0x000000b4
    3590:	00000158 	.word	0x00000158
    3594:	00000098 	.word	0x00000098

00003598 <main>:

int main(void)
{
    3598:	b5b0      	push	{r4, r5, r7, lr}
    359a:	b0a4      	sub	sp, #144	; 0x90
    359c:	af00      	add	r7, sp, #0
    359e:	4cac      	ldr	r4, [pc, #688]	; (3850 <main+0x2b8>)
    35a0:	447c      	add	r4, pc
	system_init();
    35a2:	4bac      	ldr	r3, [pc, #688]	; (3854 <main+0x2bc>)
    35a4:	58e3      	ldr	r3, [r4, r3]
    35a6:	4798      	blx	r3
	delay_init();
    35a8:	4bab      	ldr	r3, [pc, #684]	; (3858 <main+0x2c0>)
    35aa:	58e3      	ldr	r3, [r4, r3]
    35ac:	4798      	blx	r3
	configure_bod();
    35ae:	4bab      	ldr	r3, [pc, #684]	; (385c <main+0x2c4>)
    35b0:	447b      	add	r3, pc
    35b2:	4798      	blx	r3
	configure_rtc();
    35b4:	4baa      	ldr	r3, [pc, #680]	; (3860 <main+0x2c8>)
    35b6:	447b      	add	r3, pc
    35b8:	4798      	blx	r3
	configure_wakeup();
    35ba:	4baa      	ldr	r3, [pc, #680]	; (3864 <main+0x2cc>)
    35bc:	447b      	add	r3, pc
    35be:	4798      	blx	r3
	sleepmgr_init();
    35c0:	4ba9      	ldr	r3, [pc, #676]	; (3868 <main+0x2d0>)
    35c2:	447b      	add	r3, pc
    35c4:	4798      	blx	r3
	stdio_usb_init();
    35c6:	4ba9      	ldr	r3, [pc, #676]	; (386c <main+0x2d4>)
    35c8:	58e3      	ldr	r3, [r4, r3]
    35ca:	4798      	blx	r3
	stdio_usb_enable();
    35cc:	4ba8      	ldr	r3, [pc, #672]	; (3870 <main+0x2d8>)
    35ce:	58e3      	ldr	r3, [r4, r3]
    35d0:	4798      	blx	r3
	system_interrupt_disable_global();
    35d2:	4ba8      	ldr	r3, [pc, #672]	; (3874 <main+0x2dc>)
    35d4:	447b      	add	r3, pc
    35d6:	4798      	blx	r3
	for (int i=0; i<PERIPH_COUNT_IRQn-1; i++) {
    35d8:	2300      	movs	r3, #0
    35da:	228c      	movs	r2, #140	; 0x8c
    35dc:	18ba      	adds	r2, r7, r2
    35de:	6013      	str	r3, [r2, #0]
    35e0:	e00f      	b.n	3602 <main+0x6a>
		system_interrupt_set_priority(i, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    35e2:	238c      	movs	r3, #140	; 0x8c
    35e4:	18fb      	adds	r3, r7, r3
    35e6:	681b      	ldr	r3, [r3, #0]
    35e8:	b25b      	sxtb	r3, r3
    35ea:	2103      	movs	r1, #3
    35ec:	0018      	movs	r0, r3
    35ee:	4ba2      	ldr	r3, [pc, #648]	; (3878 <main+0x2e0>)
    35f0:	58e3      	ldr	r3, [r4, r3]
    35f2:	4798      	blx	r3
	for (int i=0; i<PERIPH_COUNT_IRQn-1; i++) {
    35f4:	238c      	movs	r3, #140	; 0x8c
    35f6:	18fb      	adds	r3, r7, r3
    35f8:	681b      	ldr	r3, [r3, #0]
    35fa:	3301      	adds	r3, #1
    35fc:	228c      	movs	r2, #140	; 0x8c
    35fe:	18ba      	adds	r2, r7, r2
    3600:	6013      	str	r3, [r2, #0]
    3602:	238c      	movs	r3, #140	; 0x8c
    3604:	18fb      	adds	r3, r7, r3
    3606:	681b      	ldr	r3, [r3, #0]
    3608:	2b1a      	cmp	r3, #26
    360a:	ddea      	ble.n	35e2 <main+0x4a>
	}
	system_interrupt_set_priority(SysTick_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    360c:	2301      	movs	r3, #1
    360e:	425b      	negs	r3, r3
    3610:	2103      	movs	r1, #3
    3612:	0018      	movs	r0, r3
    3614:	4b98      	ldr	r3, [pc, #608]	; (3878 <main+0x2e0>)
    3616:	58e3      	ldr	r3, [r4, r3]
    3618:	4798      	blx	r3
	system_interrupt_set_priority(PendSV_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    361a:	2302      	movs	r3, #2
    361c:	425b      	negs	r3, r3
    361e:	2103      	movs	r1, #3
    3620:	0018      	movs	r0, r3
    3622:	4b95      	ldr	r3, [pc, #596]	; (3878 <main+0x2e0>)
    3624:	58e3      	ldr	r3, [r4, r3]
    3626:	4798      	blx	r3
	system_interrupt_set_priority(SVCall_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    3628:	2305      	movs	r3, #5
    362a:	425b      	negs	r3, r3
    362c:	2103      	movs	r1, #3
    362e:	0018      	movs	r0, r3
    3630:	4b91      	ldr	r3, [pc, #580]	; (3878 <main+0x2e0>)
    3632:	58e3      	ldr	r3, [r4, r3]
    3634:	4798      	blx	r3
	system_interrupt_set_priority(HardFault_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    3636:	230d      	movs	r3, #13
    3638:	425b      	negs	r3, r3
    363a:	2103      	movs	r1, #3
    363c:	0018      	movs	r0, r3
    363e:	4b8e      	ldr	r3, [pc, #568]	; (3878 <main+0x2e0>)
    3640:	58e3      	ldr	r3, [r4, r3]
    3642:	4798      	blx	r3
	system_interrupt_set_priority(NonMaskableInt_IRQn, SYSTEM_INTERRUPT_PRIORITY_LEVEL_3);
    3644:	230e      	movs	r3, #14
    3646:	425b      	negs	r3, r3
    3648:	2103      	movs	r1, #3
    364a:	0018      	movs	r0, r3
    364c:	4b8a      	ldr	r3, [pc, #552]	; (3878 <main+0x2e0>)
    364e:	58e3      	ldr	r3, [r4, r3]
    3650:	4798      	blx	r3
	system_interrupt_enable_global();
    3652:	4b8a      	ldr	r3, [pc, #552]	; (387c <main+0x2e4>)
    3654:	447b      	add	r3, pc
    3656:	4798      	blx	r3
	delay_ms(500);
    3658:	23fa      	movs	r3, #250	; 0xfa
    365a:	005b      	lsls	r3, r3, #1
    365c:	0018      	movs	r0, r3
    365e:	4b88      	ldr	r3, [pc, #544]	; (3880 <main+0x2e8>)
    3660:	58e3      	ldr	r3, [r4, r3]
    3662:	4798      	blx	r3
	
	accy_powerUp();
    3664:	4b87      	ldr	r3, [pc, #540]	; (3884 <main+0x2ec>)
    3666:	58e3      	ldr	r3, [r4, r3]
    3668:	4798      	blx	r3
	
	// CS pin setup
	struct port_config pcfg;
	port_get_config_defaults(&pcfg);
    366a:	2380      	movs	r3, #128	; 0x80
    366c:	18fb      	adds	r3, r7, r3
    366e:	0018      	movs	r0, r3
    3670:	4b85      	ldr	r3, [pc, #532]	; (3888 <main+0x2f0>)
    3672:	447b      	add	r3, pc
    3674:	4798      	blx	r3
	pcfg.direction = PORT_PIN_DIR_OUTPUT;
    3676:	2380      	movs	r3, #128	; 0x80
    3678:	18fb      	adds	r3, r7, r3
    367a:	2201      	movs	r2, #1
    367c:	701a      	strb	r2, [r3, #0]
	pcfg.input_pull = PORT_PIN_PULL_NONE;
    367e:	2380      	movs	r3, #128	; 0x80
    3680:	18fb      	adds	r3, r7, r3
    3682:	2200      	movs	r2, #0
    3684:	705a      	strb	r2, [r3, #1]
	port_pin_set_config(ADC_SPI_CS_PIN, &pcfg);
    3686:	2380      	movs	r3, #128	; 0x80
    3688:	18fb      	adds	r3, r7, r3
    368a:	0019      	movs	r1, r3
    368c:	2036      	movs	r0, #54	; 0x36
    368e:	4b7f      	ldr	r3, [pc, #508]	; (388c <main+0x2f4>)
    3690:	58e3      	ldr	r3, [r4, r3]
    3692:	4798      	blx	r3
	port_pin_set_output_level(ADC_SPI_CS_PIN, 1);
    3694:	2101      	movs	r1, #1
    3696:	2036      	movs	r0, #54	; 0x36
    3698:	4b7d      	ldr	r3, [pc, #500]	; (3890 <main+0x2f8>)
    369a:	447b      	add	r3, pc
    369c:	4798      	blx	r3

	// SPI port setup
	struct spi_config adc_cfg;
	spi_get_config_defaults(&adc_cfg);
    369e:	2348      	movs	r3, #72	; 0x48
    36a0:	18fb      	adds	r3, r7, r3
    36a2:	0018      	movs	r0, r3
    36a4:	4b7b      	ldr	r3, [pc, #492]	; (3894 <main+0x2fc>)
    36a6:	447b      	add	r3, pc
    36a8:	4798      	blx	r3
	adc_cfg.transfer_mode = SPI_TRANSFER_MODE_1;
    36aa:	2348      	movs	r3, #72	; 0x48
    36ac:	18fb      	adds	r3, r7, r3
    36ae:	2280      	movs	r2, #128	; 0x80
    36b0:	0552      	lsls	r2, r2, #21
    36b2:	609a      	str	r2, [r3, #8]
	adc_cfg.master_slave_select_enable = 1;
    36b4:	2348      	movs	r3, #72	; 0x48
    36b6:	18fb      	adds	r3, r7, r3
    36b8:	2201      	movs	r2, #1
    36ba:	751a      	strb	r2, [r3, #20]
	adc_cfg.mode_specific.master.baudrate = 4096000;
    36bc:	2348      	movs	r3, #72	; 0x48
    36be:	18fb      	adds	r3, r7, r3
    36c0:	22fa      	movs	r2, #250	; 0xfa
    36c2:	0392      	lsls	r2, r2, #14
    36c4:	619a      	str	r2, [r3, #24]
	adc_cfg.mux_setting = SPI_SIGNAL_MUX_SETTING_I;
    36c6:	2348      	movs	r3, #72	; 0x48
    36c8:	18fb      	adds	r3, r7, r3
    36ca:	2280      	movs	r2, #128	; 0x80
    36cc:	0292      	lsls	r2, r2, #10
    36ce:	60da      	str	r2, [r3, #12]
	adc_cfg.pinmux_pad0 = PINMUX_PB02D_SERCOM5_PAD0;	// MISO
    36d0:	2348      	movs	r3, #72	; 0x48
    36d2:	18fb      	adds	r3, r7, r3
    36d4:	4a70      	ldr	r2, [pc, #448]	; (3898 <main+0x300>)
    36d6:	629a      	str	r2, [r3, #40]	; 0x28
	adc_cfg.pinmux_pad1 = PINMUX_PB03D_SERCOM5_PAD1;	// SCK
    36d8:	2348      	movs	r3, #72	; 0x48
    36da:	18fb      	adds	r3, r7, r3
    36dc:	4a6f      	ldr	r2, [pc, #444]	; (389c <main+0x304>)
    36de:	62da      	str	r2, [r3, #44]	; 0x2c
	adc_cfg.pinmux_pad2 = PINMUX_PB22D_SERCOM5_PAD2;	// nCS
    36e0:	2348      	movs	r3, #72	; 0x48
    36e2:	18fb      	adds	r3, r7, r3
    36e4:	4a6e      	ldr	r2, [pc, #440]	; (38a0 <main+0x308>)
    36e6:	631a      	str	r2, [r3, #48]	; 0x30
	adc_cfg.pinmux_pad3 = PINMUX_PB23D_SERCOM5_PAD3;	// MOSI
    36e8:	2348      	movs	r3, #72	; 0x48
    36ea:	18fb      	adds	r3, r7, r3
    36ec:	4a6d      	ldr	r2, [pc, #436]	; (38a4 <main+0x30c>)
    36ee:	635a      	str	r2, [r3, #52]	; 0x34
	enum status_code code = spi_init(&adc_spi, SERCOM5, &adc_cfg);
    36f0:	2383      	movs	r3, #131	; 0x83
    36f2:	18fd      	adds	r5, r7, r3
    36f4:	2348      	movs	r3, #72	; 0x48
    36f6:	18fa      	adds	r2, r7, r3
    36f8:	496b      	ldr	r1, [pc, #428]	; (38a8 <main+0x310>)
    36fa:	4b6c      	ldr	r3, [pc, #432]	; (38ac <main+0x314>)
    36fc:	58e3      	ldr	r3, [r4, r3]
    36fe:	0018      	movs	r0, r3
    3700:	4b6b      	ldr	r3, [pc, #428]	; (38b0 <main+0x318>)
    3702:	58e3      	ldr	r3, [r4, r3]
    3704:	4798      	blx	r3
    3706:	0003      	movs	r3, r0
    3708:	702b      	strb	r3, [r5, #0]
	if (code != STATUS_OK) fatal_error(0,"ADC spi init failed\n");
    370a:	2383      	movs	r3, #131	; 0x83
    370c:	18fb      	adds	r3, r7, r3
    370e:	781b      	ldrb	r3, [r3, #0]
    3710:	2b00      	cmp	r3, #0
    3712:	d006      	beq.n	3722 <main+0x18a>
    3714:	4b67      	ldr	r3, [pc, #412]	; (38b4 <main+0x31c>)
    3716:	447b      	add	r3, pc
    3718:	0019      	movs	r1, r3
    371a:	2000      	movs	r0, #0
    371c:	4b66      	ldr	r3, [pc, #408]	; (38b8 <main+0x320>)
    371e:	58e3      	ldr	r3, [r4, r3]
    3720:	4798      	blx	r3
	spi_enable(&adc_spi);
    3722:	4b62      	ldr	r3, [pc, #392]	; (38ac <main+0x314>)
    3724:	58e3      	ldr	r3, [r4, r3]
    3726:	0018      	movs	r0, r3
    3728:	4b64      	ldr	r3, [pc, #400]	; (38bc <main+0x324>)
    372a:	447b      	add	r3, pc
    372c:	4798      	blx	r3

	// Timer setup to count pulses
	struct tc_config tcfg;
	tc_get_config_defaults(&tcfg);
    372e:	2314      	movs	r3, #20
    3730:	18fb      	adds	r3, r7, r3
    3732:	0018      	movs	r0, r3
    3734:	4b62      	ldr	r3, [pc, #392]	; (38c0 <main+0x328>)
    3736:	447b      	add	r3, pc
    3738:	4798      	blx	r3
	tcfg.clock_source = GCLK_GENERATOR_4;
    373a:	2314      	movs	r3, #20
    373c:	18fb      	adds	r3, r7, r3
    373e:	2204      	movs	r2, #4
    3740:	701a      	strb	r2, [r3, #0]
	tcfg.counter_size = TC_COUNTER_SIZE_16BIT;
    3742:	2314      	movs	r3, #20
    3744:	18fb      	adds	r3, r7, r3
    3746:	2200      	movs	r2, #0
    3748:	709a      	strb	r2, [r3, #2]
	tcfg.wave_generation = TC_WAVE_GENERATION_MATCH_FREQ;
    374a:	2314      	movs	r3, #20
    374c:	18fb      	adds	r3, r7, r3
    374e:	2220      	movs	r2, #32
    3750:	719a      	strb	r2, [r3, #6]
	tcfg.counter_16_bit.value = 0;
    3752:	2314      	movs	r3, #20
    3754:	18fb      	adds	r3, r7, r3
    3756:	2200      	movs	r2, #0
    3758:	851a      	strh	r2, [r3, #40]	; 0x28
	tcfg.counter_16_bit.compare_capture_channel[0] = 8192;
    375a:	2314      	movs	r3, #20
    375c:	18fb      	adds	r3, r7, r3
    375e:	2280      	movs	r2, #128	; 0x80
    3760:	0192      	lsls	r2, r2, #6
    3762:	855a      	strh	r2, [r3, #42]	; 0x2a
	tcfg.counter_16_bit.compare_capture_channel[1] = 8192-23;
    3764:	2314      	movs	r3, #20
    3766:	18fb      	adds	r3, r7, r3
    3768:	4a56      	ldr	r2, [pc, #344]	; (38c4 <main+0x32c>)
    376a:	859a      	strh	r2, [r3, #44]	; 0x2c
	tc_init(&clock_tc, TC3, &tcfg);
    376c:	2314      	movs	r3, #20
    376e:	18fa      	adds	r2, r7, r3
    3770:	4955      	ldr	r1, [pc, #340]	; (38c8 <main+0x330>)
    3772:	4b56      	ldr	r3, [pc, #344]	; (38cc <main+0x334>)
    3774:	58e3      	ldr	r3, [r4, r3]
    3776:	0018      	movs	r0, r3
    3778:	4b55      	ldr	r3, [pc, #340]	; (38d0 <main+0x338>)
    377a:	58e3      	ldr	r3, [r4, r3]
    377c:	4798      	blx	r3
	tc_register_callback(&clock_tc, transfer_start, TC_CALLBACK_CC_CHANNEL1);
    377e:	4b55      	ldr	r3, [pc, #340]	; (38d4 <main+0x33c>)
    3780:	447b      	add	r3, pc
    3782:	0019      	movs	r1, r3
    3784:	4b51      	ldr	r3, [pc, #324]	; (38cc <main+0x334>)
    3786:	58e3      	ldr	r3, [r4, r3]
    3788:	2203      	movs	r2, #3
    378a:	0018      	movs	r0, r3
    378c:	4b52      	ldr	r3, [pc, #328]	; (38d8 <main+0x340>)
    378e:	58e3      	ldr	r3, [r4, r3]
    3790:	4798      	blx	r3
	tc_enable_callback(&clock_tc, TC_CALLBACK_CC_CHANNEL1);
    3792:	4b4e      	ldr	r3, [pc, #312]	; (38cc <main+0x334>)
    3794:	58e3      	ldr	r3, [r4, r3]
    3796:	2103      	movs	r1, #3
    3798:	0018      	movs	r0, r3
    379a:	4b50      	ldr	r3, [pc, #320]	; (38dc <main+0x344>)
    379c:	447b      	add	r3, pc
    379e:	4798      	blx	r3
	system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_TC3, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    37a0:	2100      	movs	r1, #0
    37a2:	2012      	movs	r0, #18
    37a4:	4b34      	ldr	r3, [pc, #208]	; (3878 <main+0x2e0>)
    37a6:	58e3      	ldr	r3, [r4, r3]
    37a8:	4798      	blx	r3

	// Make event on compare
	struct tc_events tev;
	tev.event_action = TC_EVENT_ACTION_OFF;
    37aa:	230c      	movs	r3, #12
    37ac:	18fb      	adds	r3, r7, r3
    37ae:	2200      	movs	r2, #0
    37b0:	715a      	strb	r2, [r3, #5]
	tev.on_event_perform_action = 0;
    37b2:	230c      	movs	r3, #12
    37b4:	18fb      	adds	r3, r7, r3
    37b6:	2200      	movs	r2, #0
    37b8:	70da      	strb	r2, [r3, #3]
	tev.invert_event_input = 0;
    37ba:	230c      	movs	r3, #12
    37bc:	18fb      	adds	r3, r7, r3
    37be:	2200      	movs	r2, #0
    37c0:	711a      	strb	r2, [r3, #4]
	tev.generate_event_on_overflow = 0;
    37c2:	230c      	movs	r3, #12
    37c4:	18fb      	adds	r3, r7, r3
    37c6:	2200      	movs	r2, #0
    37c8:	709a      	strb	r2, [r3, #2]
	tev.generate_event_on_compare_channel[0] = 1;
    37ca:	230c      	movs	r3, #12
    37cc:	18fb      	adds	r3, r7, r3
    37ce:	2201      	movs	r2, #1
    37d0:	701a      	strb	r2, [r3, #0]
	tev.generate_event_on_compare_channel[1] = 0;
    37d2:	230c      	movs	r3, #12
    37d4:	18fb      	adds	r3, r7, r3
    37d6:	2200      	movs	r2, #0
    37d8:	705a      	strb	r2, [r3, #1]
	tc_enable_events(&clock_tc, &tev);
    37da:	230c      	movs	r3, #12
    37dc:	18fa      	adds	r2, r7, r3
    37de:	4b3b      	ldr	r3, [pc, #236]	; (38cc <main+0x334>)
    37e0:	58e3      	ldr	r3, [r4, r3]
    37e2:	0011      	movs	r1, r2
    37e4:	0018      	movs	r0, r3
    37e6:	4b3e      	ldr	r3, [pc, #248]	; (38e0 <main+0x348>)
    37e8:	447b      	add	r3, pc
    37ea:	4798      	blx	r3
	
	// Pipe event to DMA
	struct events_config ecfg;
	events_get_config_defaults(&ecfg);
    37ec:	2308      	movs	r3, #8
    37ee:	18fb      	adds	r3, r7, r3
    37f0:	0018      	movs	r0, r3
    37f2:	4b3c      	ldr	r3, [pc, #240]	; (38e4 <main+0x34c>)
    37f4:	58e3      	ldr	r3, [r4, r3]
    37f6:	4798      	blx	r3
	ecfg.generator = EVSYS_ID_GEN_TC3_MCX_0;
    37f8:	2308      	movs	r3, #8
    37fa:	18fb      	adds	r3, r7, r3
    37fc:	2234      	movs	r2, #52	; 0x34
    37fe:	709a      	strb	r2, [r3, #2]
	ecfg.path = EVENTS_PATH_RESYNCHRONIZED;
    3800:	2308      	movs	r3, #8
    3802:	18fb      	adds	r3, r7, r3
    3804:	2201      	movs	r2, #1
    3806:	705a      	strb	r2, [r3, #1]
	events_allocate(&events, &ecfg);
    3808:	2308      	movs	r3, #8
    380a:	18fa      	adds	r2, r7, r3
    380c:	4b36      	ldr	r3, [pc, #216]	; (38e8 <main+0x350>)
    380e:	58e3      	ldr	r3, [r4, r3]
    3810:	0011      	movs	r1, r2
    3812:	0018      	movs	r0, r3
    3814:	4b35      	ldr	r3, [pc, #212]	; (38ec <main+0x354>)
    3816:	58e3      	ldr	r3, [r4, r3]
    3818:	4798      	blx	r3
	events_attach_user(&events, EVSYS_ID_USER_DMAC_CH_0);
    381a:	4b33      	ldr	r3, [pc, #204]	; (38e8 <main+0x350>)
    381c:	58e3      	ldr	r3, [r4, r3]
    381e:	2100      	movs	r1, #0
    3820:	0018      	movs	r0, r3
    3822:	4b33      	ldr	r3, [pc, #204]	; (38f0 <main+0x358>)
    3824:	58e3      	ldr	r3, [r4, r3]
    3826:	4798      	blx	r3

	for (int i=0; i<9;i++) {
    3828:	2300      	movs	r3, #0
    382a:	2288      	movs	r2, #136	; 0x88
    382c:	18ba      	adds	r2, r7, r2
    382e:	6013      	str	r3, [r2, #0]
    3830:	e079      	b.n	3926 <main+0x38e>
		if (i % 2 == 0)
    3832:	2388      	movs	r3, #136	; 0x88
    3834:	18fb      	adds	r3, r7, r3
    3836:	681b      	ldr	r3, [r3, #0]
    3838:	2201      	movs	r2, #1
    383a:	4013      	ands	r3, r2
    383c:	d15c      	bne.n	38f8 <main+0x360>
			tx_buffer[i] = 0x3c;
    383e:	4b2d      	ldr	r3, [pc, #180]	; (38f4 <main+0x35c>)
    3840:	58e2      	ldr	r2, [r4, r3]
    3842:	2388      	movs	r3, #136	; 0x88
    3844:	18fb      	adds	r3, r7, r3
    3846:	681b      	ldr	r3, [r3, #0]
    3848:	18d3      	adds	r3, r2, r3
    384a:	223c      	movs	r2, #60	; 0x3c
    384c:	701a      	strb	r2, [r3, #0]
    384e:	e05b      	b.n	3908 <main+0x370>
    3850:	0000be90 	.word	0x0000be90
    3854:	00000068 	.word	0x00000068
    3858:	000001a8 	.word	0x000001a8
    385c:	fffffd1d 	.word	0xfffffd1d
    3860:	fffffc73 	.word	0xfffffc73
    3864:	fffffbad 	.word	0xfffffbad
    3868:	fffff8eb 	.word	0xfffff8eb
    386c:	000002f8 	.word	0x000002f8
    3870:	0000023c 	.word	0x0000023c
    3874:	fffff589 	.word	0xfffff589
    3878:	00000204 	.word	0x00000204
    387c:	fffff4e5 	.word	0xfffff4e5
    3880:	000002bc 	.word	0x000002bc
    3884:	0000001c 	.word	0x0000001c
    3888:	fffff44f 	.word	0xfffff44f
    388c:	00000264 	.word	0x00000264
    3890:	fffff44b 	.word	0xfffff44b
    3894:	fffff6bf 	.word	0xfffff6bf
    3898:	00220003 	.word	0x00220003
    389c:	00230003 	.word	0x00230003
    38a0:	00360003 	.word	0x00360003
    38a4:	00370003 	.word	0x00370003
    38a8:	42001c00 	.word	0x42001c00
    38ac:	00000240 	.word	0x00000240
    38b0:	000000dc 	.word	0x000000dc
    38b4:	0000bc02 	.word	0x0000bc02
    38b8:	000002e0 	.word	0x000002e0
    38bc:	fffff6cb 	.word	0xfffff6cb
    38c0:	fffff7e7 	.word	0xfffff7e7
    38c4:	00001fe9 	.word	0x00001fe9
    38c8:	42002c00 	.word	0x42002c00
    38cc:	00000090 	.word	0x00000090
    38d0:	00000320 	.word	0x00000320
    38d4:	fffffc95 	.word	0xfffffc95
    38d8:	00000170 	.word	0x00000170
    38dc:	fffff915 	.word	0xfffff915
    38e0:	fffff7bd 	.word	0xfffff7bd
    38e4:	0000027c 	.word	0x0000027c
    38e8:	00000288 	.word	0x00000288
    38ec:	00000084 	.word	0x00000084
    38f0:	00000244 	.word	0x00000244
    38f4:	00000174 	.word	0x00000174
		else
			tx_buffer[i] = 0xc3;
    38f8:	4b5c      	ldr	r3, [pc, #368]	; (3a6c <main+0x4d4>)
    38fa:	58e2      	ldr	r2, [r4, r3]
    38fc:	2388      	movs	r3, #136	; 0x88
    38fe:	18fb      	adds	r3, r7, r3
    3900:	681b      	ldr	r3, [r3, #0]
    3902:	18d3      	adds	r3, r2, r3
    3904:	22c3      	movs	r2, #195	; 0xc3
    3906:	701a      	strb	r2, [r3, #0]

		rx_buffer[i] = 0x55;
    3908:	4b59      	ldr	r3, [pc, #356]	; (3a70 <main+0x4d8>)
    390a:	58e2      	ldr	r2, [r4, r3]
    390c:	2388      	movs	r3, #136	; 0x88
    390e:	18fb      	adds	r3, r7, r3
    3910:	681b      	ldr	r3, [r3, #0]
    3912:	18d3      	adds	r3, r2, r3
    3914:	2255      	movs	r2, #85	; 0x55
    3916:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<9;i++) {
    3918:	2388      	movs	r3, #136	; 0x88
    391a:	18fb      	adds	r3, r7, r3
    391c:	681b      	ldr	r3, [r3, #0]
    391e:	3301      	adds	r3, #1
    3920:	2288      	movs	r2, #136	; 0x88
    3922:	18ba      	adds	r2, r7, r2
    3924:	6013      	str	r3, [r2, #0]
    3926:	2388      	movs	r3, #136	; 0x88
    3928:	18fb      	adds	r3, r7, r3
    392a:	681b      	ldr	r3, [r3, #0]
    392c:	2b08      	cmp	r3, #8
    392e:	dc00      	bgt.n	3932 <main+0x39a>
    3930:	e77f      	b.n	3832 <main+0x29a>
	}

	// Enable GCLK output
	struct system_pinmux_config mcfg;
	system_pinmux_get_config_defaults(&mcfg);
    3932:	1d3b      	adds	r3, r7, #4
    3934:	0018      	movs	r0, r3
    3936:	4b4f      	ldr	r3, [pc, #316]	; (3a74 <main+0x4dc>)
    3938:	447b      	add	r3, pc
    393a:	4798      	blx	r3
	mcfg.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    393c:	1d3b      	adds	r3, r7, #4
    393e:	2201      	movs	r2, #1
    3940:	705a      	strb	r2, [r3, #1]
	mcfg.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    3942:	1d3b      	adds	r3, r7, #4
    3944:	2200      	movs	r2, #0
    3946:	709a      	strb	r2, [r3, #2]
	mcfg.mux_position = MUX_PB10H_GCLK_IO4;
    3948:	1d3b      	adds	r3, r7, #4
    394a:	2207      	movs	r2, #7
    394c:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(ADC_GCLK_MCK_PIN, &mcfg);
    394e:	1d3b      	adds	r3, r7, #4
    3950:	0019      	movs	r1, r3
    3952:	202a      	movs	r0, #42	; 0x2a
    3954:	4b48      	ldr	r3, [pc, #288]	; (3a78 <main+0x4e0>)
    3956:	58e3      	ldr	r3, [r4, r3]
    3958:	4798      	blx	r3
	system_pinmux_pin_set_output_strength(ADC_GCLK_MCK_PIN, SYSTEM_PINMUX_PIN_STRENGTH_HIGH);
    395a:	2101      	movs	r1, #1
    395c:	202a      	movs	r0, #42	; 0x2a
    395e:	4b47      	ldr	r3, [pc, #284]	; (3a7c <main+0x4e4>)
    3960:	447b      	add	r3, pc
    3962:	4798      	blx	r3

	tc_enable(&clock_tc);
    3964:	4b46      	ldr	r3, [pc, #280]	; (3a80 <main+0x4e8>)
    3966:	58e3      	ldr	r3, [r4, r3]
    3968:	0018      	movs	r0, r3
    396a:	4b46      	ldr	r3, [pc, #280]	; (3a84 <main+0x4ec>)
    396c:	447b      	add	r3, pc
    396e:	4798      	blx	r3
	int cnt = 0;
    3970:	2300      	movs	r3, #0
    3972:	2284      	movs	r2, #132	; 0x84
    3974:	18ba      	adds	r2, r7, r2
    3976:	6013      	str	r3, [r2, #0]

	// Configure tx DMA to transfer 9 bytes
	configure_dma_resources();
    3978:	4b43      	ldr	r3, [pc, #268]	; (3a88 <main+0x4f0>)
    397a:	447b      	add	r3, pc
    397c:	4798      	blx	r3
	setup_transfer_descriptor();
    397e:	4b43      	ldr	r3, [pc, #268]	; (3a8c <main+0x4f4>)
    3980:	447b      	add	r3, pc
    3982:	4798      	blx	r3
	dma_add_descriptor(&tx_spi_dma, &tx_spi_desc);
    3984:	4b42      	ldr	r3, [pc, #264]	; (3a90 <main+0x4f8>)
    3986:	58e3      	ldr	r3, [r4, r3]
    3988:	001a      	movs	r2, r3
    398a:	4b42      	ldr	r3, [pc, #264]	; (3a94 <main+0x4fc>)
    398c:	58e3      	ldr	r3, [r4, r3]
    398e:	0011      	movs	r1, r2
    3990:	0018      	movs	r0, r3
    3992:	4b41      	ldr	r3, [pc, #260]	; (3a98 <main+0x500>)
    3994:	58e3      	ldr	r3, [r4, r3]
    3996:	4798      	blx	r3
	dma_add_descriptor(&rx_spi_dma, &rx_spi_desc);
    3998:	4b40      	ldr	r3, [pc, #256]	; (3a9c <main+0x504>)
    399a:	58e3      	ldr	r3, [r4, r3]
    399c:	001a      	movs	r2, r3
    399e:	4b40      	ldr	r3, [pc, #256]	; (3aa0 <main+0x508>)
    39a0:	58e3      	ldr	r3, [r4, r3]
    39a2:	0011      	movs	r1, r2
    39a4:	0018      	movs	r0, r3
    39a6:	4b3c      	ldr	r3, [pc, #240]	; (3a98 <main+0x500>)
    39a8:	58e3      	ldr	r3, [r4, r3]
    39aa:	4798      	blx	r3
	dma_register_callback(&tx_spi_dma, transfer_done, DMA_CALLBACK_TRANSFER_DONE);
    39ac:	4b3d      	ldr	r3, [pc, #244]	; (3aa4 <main+0x50c>)
    39ae:	447b      	add	r3, pc
    39b0:	0019      	movs	r1, r3
    39b2:	4b38      	ldr	r3, [pc, #224]	; (3a94 <main+0x4fc>)
    39b4:	58e3      	ldr	r3, [r4, r3]
    39b6:	2201      	movs	r2, #1
    39b8:	0018      	movs	r0, r3
    39ba:	4b3b      	ldr	r3, [pc, #236]	; (3aa8 <main+0x510>)
    39bc:	447b      	add	r3, pc
    39be:	4798      	blx	r3
	dma_enable_callback(&tx_spi_dma, DMA_CALLBACK_TRANSFER_DONE);
    39c0:	4b34      	ldr	r3, [pc, #208]	; (3a94 <main+0x4fc>)
    39c2:	58e3      	ldr	r3, [r4, r3]
    39c4:	2101      	movs	r1, #1
    39c6:	0018      	movs	r0, r3
    39c8:	4b38      	ldr	r3, [pc, #224]	; (3aac <main+0x514>)
    39ca:	447b      	add	r3, pc
    39cc:	4798      	blx	r3
	dma_enable_callback(&rx_spi_dma, DMA_CALLBACK_TRANSFER_DONE);
    39ce:	4b34      	ldr	r3, [pc, #208]	; (3aa0 <main+0x508>)
    39d0:	58e3      	ldr	r3, [r4, r3]
    39d2:	2101      	movs	r1, #1
    39d4:	0018      	movs	r0, r3
    39d6:	4b36      	ldr	r3, [pc, #216]	; (3ab0 <main+0x518>)
    39d8:	447b      	add	r3, pc
    39da:	4798      	blx	r3
	system_interrupt_set_priority(SYSTEM_INTERRUPT_MODULE_DMA, SYSTEM_INTERRUPT_PRIORITY_LEVEL_0);
    39dc:	2100      	movs	r1, #0
    39de:	2006      	movs	r0, #6
    39e0:	4b34      	ldr	r3, [pc, #208]	; (3ab4 <main+0x51c>)
    39e2:	58e3      	ldr	r3, [r4, r3]
    39e4:	4798      	blx	r3
	dma_start_transfer_job(&tx_spi_dma);
    39e6:	4b2b      	ldr	r3, [pc, #172]	; (3a94 <main+0x4fc>)
    39e8:	58e3      	ldr	r3, [r4, r3]
    39ea:	0018      	movs	r0, r3
    39ec:	4b32      	ldr	r3, [pc, #200]	; (3ab8 <main+0x520>)
    39ee:	58e3      	ldr	r3, [r4, r3]
    39f0:	4798      	blx	r3
	dma_start_transfer_job(&rx_spi_dma);
    39f2:	4b2b      	ldr	r3, [pc, #172]	; (3aa0 <main+0x508>)
    39f4:	58e3      	ldr	r3, [r4, r3]
    39f6:	0018      	movs	r0, r3
    39f8:	4b2f      	ldr	r3, [pc, #188]	; (3ab8 <main+0x520>)
    39fa:	58e3      	ldr	r3, [r4, r3]
    39fc:	4798      	blx	r3

	while(1) {


		transfer_is_done = 0;
    39fe:	4b2f      	ldr	r3, [pc, #188]	; (3abc <main+0x524>)
    3a00:	58e3      	ldr	r3, [r4, r3]
    3a02:	2200      	movs	r2, #0
    3a04:	701a      	strb	r2, [r3, #0]

		while (!transfer_is_done) {
    3a06:	46c0      	nop			; (mov r8, r8)
    3a08:	4b2c      	ldr	r3, [pc, #176]	; (3abc <main+0x524>)
    3a0a:	58e3      	ldr	r3, [r4, r3]
    3a0c:	781b      	ldrb	r3, [r3, #0]
    3a0e:	b2db      	uxtb	r3, r3
    3a10:	2201      	movs	r2, #1
    3a12:	4053      	eors	r3, r2
    3a14:	b2db      	uxtb	r3, r3
    3a16:	2b00      	cmp	r3, #0
    3a18:	d1f6      	bne.n	3a08 <main+0x470>
		}

//		dma_free(&rx_spi_dma);
//		dma_free(&tx_spi_dma);
		cnt++;
    3a1a:	2384      	movs	r3, #132	; 0x84
    3a1c:	18fb      	adds	r3, r7, r3
    3a1e:	681b      	ldr	r3, [r3, #0]
    3a20:	3301      	adds	r3, #1
    3a22:	2284      	movs	r2, #132	; 0x84
    3a24:	18ba      	adds	r2, r7, r2
    3a26:	6013      	str	r3, [r2, #0]
		dma_start_transfer_job(&tx_spi_dma);
    3a28:	4b1a      	ldr	r3, [pc, #104]	; (3a94 <main+0x4fc>)
    3a2a:	58e3      	ldr	r3, [r4, r3]
    3a2c:	0018      	movs	r0, r3
    3a2e:	4b22      	ldr	r3, [pc, #136]	; (3ab8 <main+0x520>)
    3a30:	58e3      	ldr	r3, [r4, r3]
    3a32:	4798      	blx	r3
		dma_start_transfer_job(&rx_spi_dma);
    3a34:	4b1a      	ldr	r3, [pc, #104]	; (3aa0 <main+0x508>)
    3a36:	58e3      	ldr	r3, [r4, r3]
    3a38:	0018      	movs	r0, r3
    3a3a:	4b1f      	ldr	r3, [pc, #124]	; (3ab8 <main+0x520>)
    3a3c:	58e3      	ldr	r3, [r4, r3]
    3a3e:	4798      	blx	r3

		if (cnt % 100 == 0)
    3a40:	2384      	movs	r3, #132	; 0x84
    3a42:	18fb      	adds	r3, r7, r3
    3a44:	681a      	ldr	r2, [r3, #0]
    3a46:	4b1e      	ldr	r3, [pc, #120]	; (3ac0 <main+0x528>)
    3a48:	58e3      	ldr	r3, [r4, r3]
    3a4a:	2164      	movs	r1, #100	; 0x64
    3a4c:	0010      	movs	r0, r2
    3a4e:	4798      	blx	r3
    3a50:	1e0b      	subs	r3, r1, #0
    3a52:	d1d4      	bne.n	39fe <main+0x466>
			printf("C: %d\n", cnt);
    3a54:	2384      	movs	r3, #132	; 0x84
    3a56:	18fb      	adds	r3, r7, r3
    3a58:	681b      	ldr	r3, [r3, #0]
    3a5a:	4a1a      	ldr	r2, [pc, #104]	; (3ac4 <main+0x52c>)
    3a5c:	447a      	add	r2, pc
    3a5e:	0019      	movs	r1, r3
    3a60:	0010      	movs	r0, r2
    3a62:	4b19      	ldr	r3, [pc, #100]	; (3ac8 <main+0x530>)
    3a64:	58e3      	ldr	r3, [r4, r3]
    3a66:	4798      	blx	r3
		transfer_is_done = 0;
    3a68:	e7c9      	b.n	39fe <main+0x466>
    3a6a:	46c0      	nop			; (mov r8, r8)
    3a6c:	00000174 	.word	0x00000174
    3a70:	00000158 	.word	0x00000158
    3a74:	fffff051 	.word	0xfffff051
    3a78:	000002dc 	.word	0x000002dc
    3a7c:	fffff0b1 	.word	0xfffff0b1
    3a80:	00000090 	.word	0x00000090
    3a84:	fffff6e9 	.word	0xfffff6e9
    3a88:	fffffafb 	.word	0xfffffafb
    3a8c:	fffffb71 	.word	0xfffffb71
    3a90:	00000044 	.word	0x00000044
    3a94:	000001f4 	.word	0x000001f4
    3a98:	00000140 	.word	0x00000140
    3a9c:	00000098 	.word	0x00000098
    3aa0:	000002ec 	.word	0x000002ec
    3aa4:	fffff9fb 	.word	0xfffff9fb
    3aa8:	ffffef39 	.word	0xffffef39
    3aac:	ffffeec3 	.word	0xffffeec3
    3ab0:	ffffeeb5 	.word	0xffffeeb5
    3ab4:	00000204 	.word	0x00000204
    3ab8:	000000a8 	.word	0x000000a8
    3abc:	000001cc 	.word	0x000001cc
    3ac0:	00000314 	.word	0x00000314
    3ac4:	0000b8d4 	.word	0x0000b8d4
    3ac8:	00000028 	.word	0x00000028

00003acc <led_blink>:
	return 0;
}


// Toggle LED for blink codes
static void led_blink(int num_blinks, int blink_period_ms, bool green) {
    3acc:	b590      	push	{r4, r7, lr}
    3ace:	b087      	sub	sp, #28
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	60f8      	str	r0, [r7, #12]
    3ad4:	60b9      	str	r1, [r7, #8]
    3ad6:	1dfb      	adds	r3, r7, #7
    3ad8:	701a      	strb	r2, [r3, #0]
    3ada:	4c45      	ldr	r4, [pc, #276]	; (3bf0 <led_blink+0x124>)
    3adc:	447c      	add	r4, pc
	bool state = 0;
    3ade:	2317      	movs	r3, #23
    3ae0:	18fb      	adds	r3, r7, r3
    3ae2:	2200      	movs	r2, #0
    3ae4:	701a      	strb	r2, [r3, #0]
	struct port_config cfg;
	port_get_config_defaults(&cfg);
    3ae6:	2314      	movs	r3, #20
    3ae8:	18fb      	adds	r3, r7, r3
    3aea:	0018      	movs	r0, r3
    3aec:	4b41      	ldr	r3, [pc, #260]	; (3bf4 <led_blink+0x128>)
    3aee:	447b      	add	r3, pc
    3af0:	4798      	blx	r3
	num_blinks = num_blinks * 2;
    3af2:	68fb      	ldr	r3, [r7, #12]
    3af4:	005b      	lsls	r3, r3, #1
    3af6:	60fb      	str	r3, [r7, #12]
	while(num_blinks > 0) {
    3af8:	e05f      	b.n	3bba <led_blink+0xee>
		state = !state;
    3afa:	2317      	movs	r3, #23
    3afc:	18fb      	adds	r3, r7, r3
    3afe:	781b      	ldrb	r3, [r3, #0]
    3b00:	1e5a      	subs	r2, r3, #1
    3b02:	4193      	sbcs	r3, r2
    3b04:	b2db      	uxtb	r3, r3
    3b06:	2201      	movs	r2, #1
    3b08:	4053      	eors	r3, r2
    3b0a:	b2db      	uxtb	r3, r3
    3b0c:	001a      	movs	r2, r3
    3b0e:	2317      	movs	r3, #23
    3b10:	18fb      	adds	r3, r7, r3
    3b12:	701a      	strb	r2, [r3, #0]
    3b14:	781a      	ldrb	r2, [r3, #0]
    3b16:	2101      	movs	r1, #1
    3b18:	400a      	ands	r2, r1
    3b1a:	701a      	strb	r2, [r3, #0]
		if (state) {
    3b1c:	2317      	movs	r3, #23
    3b1e:	18fb      	adds	r3, r7, r3
    3b20:	781b      	ldrb	r3, [r3, #0]
    3b22:	2b00      	cmp	r3, #0
    3b24:	d020      	beq.n	3b68 <led_blink+0x9c>
			cfg.direction = PORT_PIN_DIR_OUTPUT;
    3b26:	2314      	movs	r3, #20
    3b28:	18fb      	adds	r3, r7, r3
    3b2a:	2201      	movs	r2, #1
    3b2c:	701a      	strb	r2, [r3, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    3b2e:	2314      	movs	r3, #20
    3b30:	18fb      	adds	r3, r7, r3
    3b32:	2200      	movs	r2, #0
    3b34:	705a      	strb	r2, [r3, #1]
			port_pin_set_output_level(LED_OUT_PIN, !green);
    3b36:	1dfb      	adds	r3, r7, #7
    3b38:	781b      	ldrb	r3, [r3, #0]
    3b3a:	1e5a      	subs	r2, r3, #1
    3b3c:	4193      	sbcs	r3, r2
    3b3e:	b2db      	uxtb	r3, r3
    3b40:	2201      	movs	r2, #1
    3b42:	4053      	eors	r3, r2
    3b44:	b2db      	uxtb	r3, r3
    3b46:	1c1a      	adds	r2, r3, #0
    3b48:	2301      	movs	r3, #1
    3b4a:	4013      	ands	r3, r2
    3b4c:	b2db      	uxtb	r3, r3
    3b4e:	0019      	movs	r1, r3
    3b50:	202b      	movs	r0, #43	; 0x2b
    3b52:	4b29      	ldr	r3, [pc, #164]	; (3bf8 <led_blink+0x12c>)
    3b54:	447b      	add	r3, pc
    3b56:	4798      	blx	r3
			port_pin_set_config(LED_OUT_PIN, &cfg);
    3b58:	2314      	movs	r3, #20
    3b5a:	18fb      	adds	r3, r7, r3
    3b5c:	0019      	movs	r1, r3
    3b5e:	202b      	movs	r0, #43	; 0x2b
    3b60:	4b26      	ldr	r3, [pc, #152]	; (3bfc <led_blink+0x130>)
    3b62:	58e3      	ldr	r3, [r4, r3]
    3b64:	4798      	blx	r3
    3b66:	e013      	b.n	3b90 <led_blink+0xc4>
			} else {
			cfg.direction = PORT_PIN_DIR_INPUT;
    3b68:	2314      	movs	r3, #20
    3b6a:	18fb      	adds	r3, r7, r3
    3b6c:	2200      	movs	r2, #0
    3b6e:	701a      	strb	r2, [r3, #0]
			cfg.input_pull = PORT_PIN_PULL_NONE;
    3b70:	2314      	movs	r3, #20
    3b72:	18fb      	adds	r3, r7, r3
    3b74:	2200      	movs	r2, #0
    3b76:	705a      	strb	r2, [r3, #1]
			port_pin_set_output_level(LED_OUT_PIN, 0);
    3b78:	2100      	movs	r1, #0
    3b7a:	202b      	movs	r0, #43	; 0x2b
    3b7c:	4b20      	ldr	r3, [pc, #128]	; (3c00 <led_blink+0x134>)
    3b7e:	447b      	add	r3, pc
    3b80:	4798      	blx	r3
			port_pin_set_config(LED_OUT_PIN, &cfg);
    3b82:	2314      	movs	r3, #20
    3b84:	18fb      	adds	r3, r7, r3
    3b86:	0019      	movs	r1, r3
    3b88:	202b      	movs	r0, #43	; 0x2b
    3b8a:	4b1c      	ldr	r3, [pc, #112]	; (3bfc <led_blink+0x130>)
    3b8c:	58e3      	ldr	r3, [r4, r3]
    3b8e:	4798      	blx	r3
		}
		delay_ms(blink_period_ms/2);
    3b90:	68bb      	ldr	r3, [r7, #8]
    3b92:	3301      	adds	r3, #1
    3b94:	2b02      	cmp	r3, #2
    3b96:	d909      	bls.n	3bac <led_blink+0xe0>
    3b98:	68bb      	ldr	r3, [r7, #8]
    3b9a:	2b00      	cmp	r3, #0
    3b9c:	da00      	bge.n	3ba0 <led_blink+0xd4>
    3b9e:	3301      	adds	r3, #1
    3ba0:	105b      	asrs	r3, r3, #1
    3ba2:	0018      	movs	r0, r3
    3ba4:	4b17      	ldr	r3, [pc, #92]	; (3c04 <led_blink+0x138>)
    3ba6:	58e3      	ldr	r3, [r4, r3]
    3ba8:	4798      	blx	r3
    3baa:	e003      	b.n	3bb4 <led_blink+0xe8>
    3bac:	2001      	movs	r0, #1
    3bae:	4b16      	ldr	r3, [pc, #88]	; (3c08 <led_blink+0x13c>)
    3bb0:	58e3      	ldr	r3, [r4, r3]
    3bb2:	4798      	blx	r3
		num_blinks--;
    3bb4:	68fb      	ldr	r3, [r7, #12]
    3bb6:	3b01      	subs	r3, #1
    3bb8:	60fb      	str	r3, [r7, #12]
	while(num_blinks > 0) {
    3bba:	68fb      	ldr	r3, [r7, #12]
    3bbc:	2b00      	cmp	r3, #0
    3bbe:	dc9c      	bgt.n	3afa <led_blink+0x2e>
	}
	cfg.direction = PORT_PIN_DIR_INPUT;
    3bc0:	2314      	movs	r3, #20
    3bc2:	18fb      	adds	r3, r7, r3
    3bc4:	2200      	movs	r2, #0
    3bc6:	701a      	strb	r2, [r3, #0]
	cfg.input_pull = PORT_PIN_PULL_NONE;
    3bc8:	2314      	movs	r3, #20
    3bca:	18fb      	adds	r3, r7, r3
    3bcc:	2200      	movs	r2, #0
    3bce:	705a      	strb	r2, [r3, #1]
	port_pin_set_output_level(LED_OUT_PIN, 0);
    3bd0:	2100      	movs	r1, #0
    3bd2:	202b      	movs	r0, #43	; 0x2b
    3bd4:	4b0d      	ldr	r3, [pc, #52]	; (3c0c <led_blink+0x140>)
    3bd6:	447b      	add	r3, pc
    3bd8:	4798      	blx	r3
	port_pin_set_config(LED_OUT_PIN, &cfg);
    3bda:	2314      	movs	r3, #20
    3bdc:	18fb      	adds	r3, r7, r3
    3bde:	0019      	movs	r1, r3
    3be0:	202b      	movs	r0, #43	; 0x2b
    3be2:	4b06      	ldr	r3, [pc, #24]	; (3bfc <led_blink+0x130>)
    3be4:	58e3      	ldr	r3, [r4, r3]
    3be6:	4798      	blx	r3
}
    3be8:	46c0      	nop			; (mov r8, r8)
    3bea:	46bd      	mov	sp, r7
    3bec:	b007      	add	sp, #28
    3bee:	bd90      	pop	{r4, r7, pc}
    3bf0:	0000b954 	.word	0x0000b954
    3bf4:	ffffefd3 	.word	0xffffefd3
    3bf8:	ffffef91 	.word	0xffffef91
    3bfc:	00000264 	.word	0x00000264
    3c00:	ffffef67 	.word	0xffffef67
    3c04:	000002bc 	.word	0x000002bc
    3c08:	00000310 	.word	0x00000310
    3c0c:	ffffef0f 	.word	0xffffef0f

00003c10 <fatal_error>:

// Fatal errors: blink light, print, sleep
void fatal_error(int numBlinks, const char* fmt, ...) {
    3c10:	b40e      	push	{r1, r2, r3}
    3c12:	b590      	push	{r4, r7, lr}
    3c14:	b084      	sub	sp, #16
    3c16:	af00      	add	r7, sp, #0
    3c18:	6078      	str	r0, [r7, #4]
    3c1a:	4c13      	ldr	r4, [pc, #76]	; (3c68 <fatal_error+0x58>)
    3c1c:	447c      	add	r4, pc
	va_list args;
	va_start(args, fmt);
    3c1e:	2320      	movs	r3, #32
    3c20:	18fb      	adds	r3, r7, r3
    3c22:	60fb      	str	r3, [r7, #12]
	debug_print(fmt, args);
    3c24:	68fa      	ldr	r2, [r7, #12]
    3c26:	69fb      	ldr	r3, [r7, #28]
    3c28:	0011      	movs	r1, r2
    3c2a:	0018      	movs	r0, r3
    3c2c:	4b0f      	ldr	r3, [pc, #60]	; (3c6c <fatal_error+0x5c>)
    3c2e:	58e3      	ldr	r3, [r4, r3]
    3c30:	4798      	blx	r3
	va_end(args);
	led_blink(numBlinks, 200, 0);
    3c32:	687b      	ldr	r3, [r7, #4]
    3c34:	2200      	movs	r2, #0
    3c36:	21c8      	movs	r1, #200	; 0xc8
    3c38:	0018      	movs	r0, r3
    3c3a:	4b0d      	ldr	r3, [pc, #52]	; (3c70 <fatal_error+0x60>)
    3c3c:	447b      	add	r3, pc
    3c3e:	4798      	blx	r3
	delay_ms(500);
    3c40:	23fa      	movs	r3, #250	; 0xfa
    3c42:	005b      	lsls	r3, r3, #1
    3c44:	0018      	movs	r0, r3
    3c46:	4b0b      	ldr	r3, [pc, #44]	; (3c74 <fatal_error+0x64>)
    3c48:	58e3      	ldr	r3, [r4, r3]
    3c4a:	4798      	blx	r3

	// Sleep, wakes on button press
	sleepmgr_sleep(SLEEPMGR_STANDBY);
    3c4c:	2004      	movs	r0, #4
    3c4e:	4b0a      	ldr	r3, [pc, #40]	; (3c78 <fatal_error+0x68>)
    3c50:	447b      	add	r3, pc
    3c52:	4798      	blx	r3
	system_reset();
    3c54:	4b09      	ldr	r3, [pc, #36]	; (3c7c <fatal_error+0x6c>)
    3c56:	447b      	add	r3, pc
    3c58:	4798      	blx	r3
}
    3c5a:	46c0      	nop			; (mov r8, r8)
    3c5c:	46bd      	mov	sp, r7
    3c5e:	b004      	add	sp, #16
    3c60:	bc90      	pop	{r4, r7}
    3c62:	bc08      	pop	{r3}
    3c64:	b003      	add	sp, #12
    3c66:	4718      	bx	r3
    3c68:	0000b814 	.word	0x0000b814
    3c6c:	00000200 	.word	0x00000200
    3c70:	fffffe8d 	.word	0xfffffe8d
    3c74:	000002bc 	.word	0x000002bc
    3c78:	fffff201 	.word	0xfffff201
    3c7c:	fffff0db 	.word	0xfffff0db

00003c80 <debug_print>:

void debug_print(const char* fmt, ...) {
    3c80:	b40f      	push	{r0, r1, r2, r3}
    3c82:	b580      	push	{r7, lr}
    3c84:	b082      	sub	sp, #8
    3c86:	af00      	add	r7, sp, #0
    3c88:	4a08      	ldr	r2, [pc, #32]	; (3cac <debug_print+0x2c>)
    3c8a:	447a      	add	r2, pc
	#ifdef ENABLE_USB_DEBUG
	va_list args;
	va_start(args, fmt);
    3c8c:	2314      	movs	r3, #20
    3c8e:	18fb      	adds	r3, r7, r3
    3c90:	607b      	str	r3, [r7, #4]
	vprintf(fmt, args);
    3c92:	6879      	ldr	r1, [r7, #4]
    3c94:	693b      	ldr	r3, [r7, #16]
    3c96:	0018      	movs	r0, r3
    3c98:	4b05      	ldr	r3, [pc, #20]	; (3cb0 <debug_print+0x30>)
    3c9a:	58d3      	ldr	r3, [r2, r3]
    3c9c:	4798      	blx	r3
	va_end(args);
	#endif
    3c9e:	46c0      	nop			; (mov r8, r8)
    3ca0:	46bd      	mov	sp, r7
    3ca2:	b002      	add	sp, #8
    3ca4:	bc80      	pop	{r7}
    3ca6:	bc08      	pop	{r3}
    3ca8:	b004      	add	sp, #16
    3caa:	4718      	bx	r3
    3cac:	0000b7a6 	.word	0x0000b7a6
    3cb0:	00000184 	.word	0x00000184

00003cb4 <system_pinmux_get_group_from_gpio_pin>:
{
    3cb4:	b580      	push	{r7, lr}
    3cb6:	b084      	sub	sp, #16
    3cb8:	af00      	add	r7, sp, #0
    3cba:	0002      	movs	r2, r0
    3cbc:	1dfb      	adds	r3, r7, #7
    3cbe:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    3cc0:	230f      	movs	r3, #15
    3cc2:	18fb      	adds	r3, r7, r3
    3cc4:	1dfa      	adds	r2, r7, #7
    3cc6:	7812      	ldrb	r2, [r2, #0]
    3cc8:	09d2      	lsrs	r2, r2, #7
    3cca:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    3ccc:	230e      	movs	r3, #14
    3cce:	18fb      	adds	r3, r7, r3
    3cd0:	1dfa      	adds	r2, r7, #7
    3cd2:	7812      	ldrb	r2, [r2, #0]
    3cd4:	0952      	lsrs	r2, r2, #5
    3cd6:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    3cd8:	4b0d      	ldr	r3, [pc, #52]	; (3d10 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    3cda:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    3cdc:	230f      	movs	r3, #15
    3cde:	18fb      	adds	r3, r7, r3
    3ce0:	781b      	ldrb	r3, [r3, #0]
    3ce2:	2b00      	cmp	r3, #0
    3ce4:	d10f      	bne.n	3d06 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    3ce6:	230f      	movs	r3, #15
    3ce8:	18fb      	adds	r3, r7, r3
    3cea:	781b      	ldrb	r3, [r3, #0]
    3cec:	009b      	lsls	r3, r3, #2
    3cee:	2210      	movs	r2, #16
    3cf0:	4694      	mov	ip, r2
    3cf2:	44bc      	add	ip, r7
    3cf4:	4463      	add	r3, ip
    3cf6:	3b08      	subs	r3, #8
    3cf8:	681a      	ldr	r2, [r3, #0]
    3cfa:	230e      	movs	r3, #14
    3cfc:	18fb      	adds	r3, r7, r3
    3cfe:	781b      	ldrb	r3, [r3, #0]
    3d00:	01db      	lsls	r3, r3, #7
    3d02:	18d3      	adds	r3, r2, r3
    3d04:	e000      	b.n	3d08 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    3d06:	2300      	movs	r3, #0
}
    3d08:	0018      	movs	r0, r3
    3d0a:	46bd      	mov	sp, r7
    3d0c:	b004      	add	sp, #16
    3d0e:	bd80      	pop	{r7, pc}
    3d10:	41004400 	.word	0x41004400

00003d14 <port_get_group_from_gpio_pin>:
{
    3d14:	b580      	push	{r7, lr}
    3d16:	b082      	sub	sp, #8
    3d18:	af00      	add	r7, sp, #0
    3d1a:	0002      	movs	r2, r0
    3d1c:	1dfb      	adds	r3, r7, #7
    3d1e:	701a      	strb	r2, [r3, #0]
	return system_pinmux_get_group_from_gpio_pin(gpio_pin);
    3d20:	1dfb      	adds	r3, r7, #7
    3d22:	781b      	ldrb	r3, [r3, #0]
    3d24:	0018      	movs	r0, r3
    3d26:	4b04      	ldr	r3, [pc, #16]	; (3d38 <port_get_group_from_gpio_pin+0x24>)
    3d28:	447b      	add	r3, pc
    3d2a:	4798      	blx	r3
    3d2c:	0003      	movs	r3, r0
}
    3d2e:	0018      	movs	r0, r3
    3d30:	46bd      	mov	sp, r7
    3d32:	b002      	add	sp, #8
    3d34:	bd80      	pop	{r7, pc}
    3d36:	46c0      	nop			; (mov r8, r8)
    3d38:	ffffff89 	.word	0xffffff89

00003d3c <port_get_config_defaults>:
{
    3d3c:	b580      	push	{r7, lr}
    3d3e:	b082      	sub	sp, #8
    3d40:	af00      	add	r7, sp, #0
    3d42:	6078      	str	r0, [r7, #4]
	config->direction  = PORT_PIN_DIR_INPUT;
    3d44:	687b      	ldr	r3, [r7, #4]
    3d46:	2200      	movs	r2, #0
    3d48:	701a      	strb	r2, [r3, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    3d4a:	687b      	ldr	r3, [r7, #4]
    3d4c:	2201      	movs	r2, #1
    3d4e:	705a      	strb	r2, [r3, #1]
	config->powersave  = false;
    3d50:	687b      	ldr	r3, [r7, #4]
    3d52:	2200      	movs	r2, #0
    3d54:	709a      	strb	r2, [r3, #2]
}
    3d56:	46c0      	nop			; (mov r8, r8)
    3d58:	46bd      	mov	sp, r7
    3d5a:	b002      	add	sp, #8
    3d5c:	bd80      	pop	{r7, pc}
	...

00003d60 <port_pin_set_output_level>:
{
    3d60:	b580      	push	{r7, lr}
    3d62:	b084      	sub	sp, #16
    3d64:	af00      	add	r7, sp, #0
    3d66:	0002      	movs	r2, r0
    3d68:	1dfb      	adds	r3, r7, #7
    3d6a:	701a      	strb	r2, [r3, #0]
    3d6c:	1dbb      	adds	r3, r7, #6
    3d6e:	1c0a      	adds	r2, r1, #0
    3d70:	701a      	strb	r2, [r3, #0]
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
    3d72:	1dfb      	adds	r3, r7, #7
    3d74:	781b      	ldrb	r3, [r3, #0]
    3d76:	0018      	movs	r0, r3
    3d78:	4b0d      	ldr	r3, [pc, #52]	; (3db0 <port_pin_set_output_level+0x50>)
    3d7a:	447b      	add	r3, pc
    3d7c:	4798      	blx	r3
    3d7e:	0003      	movs	r3, r0
    3d80:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    3d82:	1dfb      	adds	r3, r7, #7
    3d84:	781b      	ldrb	r3, [r3, #0]
    3d86:	221f      	movs	r2, #31
    3d88:	4013      	ands	r3, r2
    3d8a:	2201      	movs	r2, #1
    3d8c:	409a      	lsls	r2, r3
    3d8e:	0013      	movs	r3, r2
    3d90:	60bb      	str	r3, [r7, #8]
	if (level) {
    3d92:	1dbb      	adds	r3, r7, #6
    3d94:	781b      	ldrb	r3, [r3, #0]
    3d96:	2b00      	cmp	r3, #0
    3d98:	d003      	beq.n	3da2 <port_pin_set_output_level+0x42>
		port_base->OUTSET.reg = pin_mask;
    3d9a:	68fb      	ldr	r3, [r7, #12]
    3d9c:	68ba      	ldr	r2, [r7, #8]
    3d9e:	619a      	str	r2, [r3, #24]
}
    3da0:	e002      	b.n	3da8 <port_pin_set_output_level+0x48>
		port_base->OUTCLR.reg = pin_mask;
    3da2:	68fb      	ldr	r3, [r7, #12]
    3da4:	68ba      	ldr	r2, [r7, #8]
    3da6:	615a      	str	r2, [r3, #20]
}
    3da8:	46c0      	nop			; (mov r8, r8)
    3daa:	46bd      	mov	sp, r7
    3dac:	b004      	add	sp, #16
    3dae:	bd80      	pop	{r7, pc}
    3db0:	ffffff97 	.word	0xffffff97

00003db4 <system_board_init>:

#define CFG(x)	port_pin_set_config(x, &config)
#define LO(x)	port_pin_set_output_level(x,0)
#define HI(x)	port_pin_set_output_level(x,1)
void system_board_init(void)
{
    3db4:	b590      	push	{r4, r7, lr}
    3db6:	b083      	sub	sp, #12
    3db8:	af00      	add	r7, sp, #0
    3dba:	4ca7      	ldr	r4, [pc, #668]	; (4058 <system_board_init+0x2a4>)
    3dbc:	447c      	add	r4, pc
	// Initialize all IO's to turn everything off and low-power
	struct port_config config;
	port_get_config_defaults(&config);
    3dbe:	1d3b      	adds	r3, r7, #4
    3dc0:	0018      	movs	r0, r3
    3dc2:	4ba6      	ldr	r3, [pc, #664]	; (405c <system_board_init+0x2a8>)
    3dc4:	447b      	add	r3, pc
    3dc6:	4798      	blx	r3

	// SD Card pins, all inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    3dc8:	1d3b      	adds	r3, r7, #4
    3dca:	2200      	movs	r2, #0
    3dcc:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    3dce:	1d3b      	adds	r3, r7, #4
    3dd0:	2201      	movs	r2, #1
    3dd2:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    3dd4:	1d3b      	adds	r3, r7, #4
    3dd6:	2200      	movs	r2, #0
    3dd8:	709a      	strb	r2, [r3, #2]
	CFG(SD_SPI_MOSI_PIN); CFG(SD_SPI_MISO_PIN); CFG(SD_SPI_SCK_PIN); CFG(SD_SPI_CS_PIN);
    3dda:	1d3b      	adds	r3, r7, #4
    3ddc:	0019      	movs	r1, r3
    3dde:	2013      	movs	r0, #19
    3de0:	4b9f      	ldr	r3, [pc, #636]	; (4060 <system_board_init+0x2ac>)
    3de2:	58e3      	ldr	r3, [r4, r3]
    3de4:	4798      	blx	r3
    3de6:	1d3b      	adds	r3, r7, #4
    3de8:	0019      	movs	r1, r3
    3dea:	2010      	movs	r0, #16
    3dec:	4b9c      	ldr	r3, [pc, #624]	; (4060 <system_board_init+0x2ac>)
    3dee:	58e3      	ldr	r3, [r4, r3]
    3df0:	4798      	blx	r3
    3df2:	1d3b      	adds	r3, r7, #4
    3df4:	0019      	movs	r1, r3
    3df6:	2011      	movs	r0, #17
    3df8:	4b99      	ldr	r3, [pc, #612]	; (4060 <system_board_init+0x2ac>)
    3dfa:	58e3      	ldr	r3, [r4, r3]
    3dfc:	4798      	blx	r3
    3dfe:	1d3b      	adds	r3, r7, #4
    3e00:	0019      	movs	r1, r3
    3e02:	2012      	movs	r0, #18
    3e04:	4b96      	ldr	r3, [pc, #600]	; (4060 <system_board_init+0x2ac>)
    3e06:	58e3      	ldr	r3, [r4, r3]
    3e08:	4798      	blx	r3
	
	// Logic inputs, all input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    3e0a:	1d3b      	adds	r3, r7, #4
    3e0c:	2200      	movs	r2, #0
    3e0e:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    3e10:	1d3b      	adds	r3, r7, #4
    3e12:	2200      	movs	r2, #0
    3e14:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    3e16:	1d3b      	adds	r3, r7, #4
    3e18:	2201      	movs	r2, #1
    3e1a:	709a      	strb	r2, [r3, #2]
	CFG(LOGIC1_TC_CAP_PIN); CFG(LOGIC2_TC_CAP_PIN);
    3e1c:	1d3b      	adds	r3, r7, #4
    3e1e:	0019      	movs	r1, r3
    3e20:	2014      	movs	r0, #20
    3e22:	4b8f      	ldr	r3, [pc, #572]	; (4060 <system_board_init+0x2ac>)
    3e24:	58e3      	ldr	r3, [r4, r3]
    3e26:	4798      	blx	r3
    3e28:	1d3b      	adds	r3, r7, #4
    3e2a:	0019      	movs	r1, r3
    3e2c:	2015      	movs	r0, #21
    3e2e:	4b8c      	ldr	r3, [pc, #560]	; (4060 <system_board_init+0x2ac>)
    3e30:	58e3      	ldr	r3, [r4, r3]
    3e32:	4798      	blx	r3

	// USB / UART, both inputs pull-up
	config.direction	= PORT_PIN_DIR_INPUT;
    3e34:	1d3b      	adds	r3, r7, #4
    3e36:	2200      	movs	r2, #0
    3e38:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    3e3a:	1d3b      	adds	r3, r7, #4
    3e3c:	2201      	movs	r2, #1
    3e3e:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    3e40:	1d3b      	adds	r3, r7, #4
    3e42:	2201      	movs	r2, #1
    3e44:	709a      	strb	r2, [r3, #2]
	CFG(USB_DN_UART_TX_PIN); CFG(USB_DP_UART_RX_PIN);
    3e46:	1d3b      	adds	r3, r7, #4
    3e48:	0019      	movs	r1, r3
    3e4a:	2018      	movs	r0, #24
    3e4c:	4b84      	ldr	r3, [pc, #528]	; (4060 <system_board_init+0x2ac>)
    3e4e:	58e3      	ldr	r3, [r4, r3]
    3e50:	4798      	blx	r3
    3e52:	1d3b      	adds	r3, r7, #4
    3e54:	0019      	movs	r1, r3
    3e56:	2019      	movs	r0, #25
    3e58:	4b81      	ldr	r3, [pc, #516]	; (4060 <system_board_init+0x2ac>)
    3e5a:	58e3      	ldr	r3, [r4, r3]
    3e5c:	4798      	blx	r3

	// External ADC pins, all inputs pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    3e5e:	1d3b      	adds	r3, r7, #4
    3e60:	2200      	movs	r2, #0
    3e62:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3e64:	1d3b      	adds	r3, r7, #4
    3e66:	2202      	movs	r2, #2
    3e68:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    3e6a:	1d3b      	adds	r3, r7, #4
    3e6c:	2201      	movs	r2, #1
    3e6e:	709a      	strb	r2, [r3, #2]
	CFG(ADC_SPI_CS_PIN); CFG(ADC_SPI_MISO_PIN); CFG(ADC_SPI_MOSI_PIN); CFG(ADC_SPI_SCK_PIN); CFG(ADC_GCLK_MCK_PIN);
    3e70:	1d3b      	adds	r3, r7, #4
    3e72:	0019      	movs	r1, r3
    3e74:	2036      	movs	r0, #54	; 0x36
    3e76:	4b7a      	ldr	r3, [pc, #488]	; (4060 <system_board_init+0x2ac>)
    3e78:	58e3      	ldr	r3, [r4, r3]
    3e7a:	4798      	blx	r3
    3e7c:	1d3b      	adds	r3, r7, #4
    3e7e:	0019      	movs	r1, r3
    3e80:	2022      	movs	r0, #34	; 0x22
    3e82:	4b77      	ldr	r3, [pc, #476]	; (4060 <system_board_init+0x2ac>)
    3e84:	58e3      	ldr	r3, [r4, r3]
    3e86:	4798      	blx	r3
    3e88:	1d3b      	adds	r3, r7, #4
    3e8a:	0019      	movs	r1, r3
    3e8c:	2037      	movs	r0, #55	; 0x37
    3e8e:	4b74      	ldr	r3, [pc, #464]	; (4060 <system_board_init+0x2ac>)
    3e90:	58e3      	ldr	r3, [r4, r3]
    3e92:	4798      	blx	r3
    3e94:	1d3b      	adds	r3, r7, #4
    3e96:	0019      	movs	r1, r3
    3e98:	2023      	movs	r0, #35	; 0x23
    3e9a:	4b71      	ldr	r3, [pc, #452]	; (4060 <system_board_init+0x2ac>)
    3e9c:	58e3      	ldr	r3, [r4, r3]
    3e9e:	4798      	blx	r3
    3ea0:	1d3b      	adds	r3, r7, #4
    3ea2:	0019      	movs	r1, r3
    3ea4:	202a      	movs	r0, #42	; 0x2a
    3ea6:	4b6e      	ldr	r3, [pc, #440]	; (4060 <system_board_init+0x2ac>)
    3ea8:	58e3      	ldr	r3, [r4, r3]
    3eaa:	4798      	blx	r3

	// Buttons, all inputs pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    3eac:	1d3b      	adds	r3, r7, #4
    3eae:	2200      	movs	r2, #0
    3eb0:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_UP;
    3eb2:	1d3b      	adds	r3, r7, #4
    3eb4:	2201      	movs	r2, #1
    3eb6:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    3eb8:	1d3b      	adds	r3, r7, #4
    3eba:	2200      	movs	r2, #0
    3ebc:	709a      	strb	r2, [r3, #2]
	CFG(BUT1_IRQ_IN_PIN); CFG(BUT2_IRQ_IN_PIN);
    3ebe:	1d3b      	adds	r3, r7, #4
    3ec0:	0019      	movs	r1, r3
    3ec2:	2003      	movs	r0, #3
    3ec4:	4b66      	ldr	r3, [pc, #408]	; (4060 <system_board_init+0x2ac>)
    3ec6:	58e3      	ldr	r3, [r4, r3]
    3ec8:	4798      	blx	r3
    3eca:	1d3b      	adds	r3, r7, #4
    3ecc:	0019      	movs	r1, r3
    3ece:	201f      	movs	r0, #31
    3ed0:	4b63      	ldr	r3, [pc, #396]	; (4060 <system_board_init+0x2ac>)
    3ed2:	58e3      	ldr	r3, [r4, r3]
    3ed4:	4798      	blx	r3

	// Battery sense, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    3ed6:	1d3b      	adds	r3, r7, #4
    3ed8:	2200      	movs	r2, #0
    3eda:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    3edc:	1d3b      	adds	r3, r7, #4
    3ede:	2200      	movs	r2, #0
    3ee0:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    3ee2:	1d3b      	adds	r3, r7, #4
    3ee4:	2201      	movs	r2, #1
    3ee6:	709a      	strb	r2, [r3, #2]
	CFG(BATSENSE_ADC_PIN);
    3ee8:	1d3b      	adds	r3, r7, #4
    3eea:	0019      	movs	r1, r3
    3eec:	2002      	movs	r0, #2
    3eee:	4b5c      	ldr	r3, [pc, #368]	; (4060 <system_board_init+0x2ac>)
    3ef0:	58e3      	ldr	r3, [r4, r3]
    3ef2:	4798      	blx	r3

	// LEDs, input pull-none
	config.direction	= PORT_PIN_DIR_INPUT;
    3ef4:	1d3b      	adds	r3, r7, #4
    3ef6:	2200      	movs	r2, #0
    3ef8:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    3efa:	1d3b      	adds	r3, r7, #4
    3efc:	2200      	movs	r2, #0
    3efe:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    3f00:	1d3b      	adds	r3, r7, #4
    3f02:	2201      	movs	r2, #1
    3f04:	709a      	strb	r2, [r3, #2]
	CFG(LED_OUT_PIN);
    3f06:	1d3b      	adds	r3, r7, #4
    3f08:	0019      	movs	r1, r3
    3f0a:	202b      	movs	r0, #43	; 0x2b
    3f0c:	4b54      	ldr	r3, [pc, #336]	; (4060 <system_board_init+0x2ac>)
    3f0e:	58e3      	ldr	r3, [r4, r3]
    3f10:	4798      	blx	r3
	
	// Range switches, pull-down
	config.direction	= PORT_PIN_DIR_INPUT;
    3f12:	1d3b      	adds	r3, r7, #4
    3f14:	2200      	movs	r2, #0
    3f16:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3f18:	1d3b      	adds	r3, r7, #4
    3f1a:	2202      	movs	r2, #2
    3f1c:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    3f1e:	1d3b      	adds	r3, r7, #4
    3f20:	2201      	movs	r2, #1
    3f22:	709a      	strb	r2, [r3, #2]
	CFG(SW1A_GP_OUT_PIN); CFG(SW2A_GP_OUT_PIN); CFG(SW3A_GP_OUT_PIN); CFG(SW4A_GP_OUT_PIN);
    3f24:	1d3b      	adds	r3, r7, #4
    3f26:	0019      	movs	r1, r3
    3f28:	2004      	movs	r0, #4
    3f2a:	4b4d      	ldr	r3, [pc, #308]	; (4060 <system_board_init+0x2ac>)
    3f2c:	58e3      	ldr	r3, [r4, r3]
    3f2e:	4798      	blx	r3
    3f30:	1d3b      	adds	r3, r7, #4
    3f32:	0019      	movs	r1, r3
    3f34:	2005      	movs	r0, #5
    3f36:	4b4a      	ldr	r3, [pc, #296]	; (4060 <system_board_init+0x2ac>)
    3f38:	58e3      	ldr	r3, [r4, r3]
    3f3a:	4798      	blx	r3
    3f3c:	1d3b      	adds	r3, r7, #4
    3f3e:	0019      	movs	r1, r3
    3f40:	2006      	movs	r0, #6
    3f42:	4b47      	ldr	r3, [pc, #284]	; (4060 <system_board_init+0x2ac>)
    3f44:	58e3      	ldr	r3, [r4, r3]
    3f46:	4798      	blx	r3
    3f48:	1d3b      	adds	r3, r7, #4
    3f4a:	0019      	movs	r1, r3
    3f4c:	2007      	movs	r0, #7
    3f4e:	4b44      	ldr	r3, [pc, #272]	; (4060 <system_board_init+0x2ac>)
    3f50:	58e3      	ldr	r3, [r4, r3]
    3f52:	4798      	blx	r3
	CFG(SW1B_GP_OUT_PIN); CFG(SW2B_GP_OUT_PIN); CFG(SW3B_GP_OUT_PIN); CFG(SW4B_GP_OUT_PIN);
    3f54:	1d3b      	adds	r3, r7, #4
    3f56:	0019      	movs	r1, r3
    3f58:	2008      	movs	r0, #8
    3f5a:	4b41      	ldr	r3, [pc, #260]	; (4060 <system_board_init+0x2ac>)
    3f5c:	58e3      	ldr	r3, [r4, r3]
    3f5e:	4798      	blx	r3
    3f60:	1d3b      	adds	r3, r7, #4
    3f62:	0019      	movs	r1, r3
    3f64:	2009      	movs	r0, #9
    3f66:	4b3e      	ldr	r3, [pc, #248]	; (4060 <system_board_init+0x2ac>)
    3f68:	58e3      	ldr	r3, [r4, r3]
    3f6a:	4798      	blx	r3
    3f6c:	1d3b      	adds	r3, r7, #4
    3f6e:	0019      	movs	r1, r3
    3f70:	200a      	movs	r0, #10
    3f72:	4b3b      	ldr	r3, [pc, #236]	; (4060 <system_board_init+0x2ac>)
    3f74:	58e3      	ldr	r3, [r4, r3]
    3f76:	4798      	blx	r3
    3f78:	1d3b      	adds	r3, r7, #4
    3f7a:	0019      	movs	r1, r3
    3f7c:	200b      	movs	r0, #11
    3f7e:	4b38      	ldr	r3, [pc, #224]	; (4060 <system_board_init+0x2ac>)
    3f80:	58e3      	ldr	r3, [r4, r3]
    3f82:	4798      	blx	r3
	
	// Accessory power enable, drive low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    3f84:	1d3b      	adds	r3, r7, #4
    3f86:	2201      	movs	r2, #1
    3f88:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3f8a:	1d3b      	adds	r3, r7, #4
    3f8c:	2202      	movs	r2, #2
    3f8e:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    3f90:	1d3b      	adds	r3, r7, #4
    3f92:	2200      	movs	r2, #0
    3f94:	709a      	strb	r2, [r3, #2]
	CFG(ACCYEN_GP_OUT_PIN); LO(ACCYEN_GP_OUT_PIN);
    3f96:	1d3b      	adds	r3, r7, #4
    3f98:	0019      	movs	r1, r3
    3f9a:	2017      	movs	r0, #23
    3f9c:	4b30      	ldr	r3, [pc, #192]	; (4060 <system_board_init+0x2ac>)
    3f9e:	58e3      	ldr	r3, [r4, r3]
    3fa0:	4798      	blx	r3
    3fa2:	2100      	movs	r1, #0
    3fa4:	2017      	movs	r0, #23
    3fa6:	4b2f      	ldr	r3, [pc, #188]	; (4064 <system_board_init+0x2b0>)
    3fa8:	447b      	add	r3, pc
    3faa:	4798      	blx	r3

	// ATWINC, input pull-down communication pins
	config.direction	= PORT_PIN_DIR_INPUT;
    3fac:	1d3b      	adds	r3, r7, #4
    3fae:	2200      	movs	r2, #0
    3fb0:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_DOWN;
    3fb2:	1d3b      	adds	r3, r7, #4
    3fb4:	2202      	movs	r2, #2
    3fb6:	705a      	strb	r2, [r3, #1]
	config.powersave	= 1;
    3fb8:	1d3b      	adds	r3, r7, #4
    3fba:	2201      	movs	r2, #1
    3fbc:	709a      	strb	r2, [r3, #2]
	CFG(WINC_SPI_CS_PIN); CFG(WINC_SPI_MISO_PIN); CFG(WINC_SPI_MOSI_PIN); CFG(WINC_SPI_SCK_PIN); CFG(WINC_SPI_INT_PIN); CFG(WINC_GCLK_RTC_PIN); CFG(WINC_WAKE_GP_OUT_PIN);
    3fbe:	1d3b      	adds	r3, r7, #4
    3fc0:	0019      	movs	r1, r3
    3fc2:	200e      	movs	r0, #14
    3fc4:	4b26      	ldr	r3, [pc, #152]	; (4060 <system_board_init+0x2ac>)
    3fc6:	58e3      	ldr	r3, [r4, r3]
    3fc8:	4798      	blx	r3
    3fca:	1d3b      	adds	r3, r7, #4
    3fcc:	0019      	movs	r1, r3
    3fce:	200f      	movs	r0, #15
    3fd0:	4b23      	ldr	r3, [pc, #140]	; (4060 <system_board_init+0x2ac>)
    3fd2:	58e3      	ldr	r3, [r4, r3]
    3fd4:	4798      	blx	r3
    3fd6:	1d3b      	adds	r3, r7, #4
    3fd8:	0019      	movs	r1, r3
    3fda:	200c      	movs	r0, #12
    3fdc:	4b20      	ldr	r3, [pc, #128]	; (4060 <system_board_init+0x2ac>)
    3fde:	58e3      	ldr	r3, [r4, r3]
    3fe0:	4798      	blx	r3
    3fe2:	1d3b      	adds	r3, r7, #4
    3fe4:	0019      	movs	r1, r3
    3fe6:	200d      	movs	r0, #13
    3fe8:	4b1d      	ldr	r3, [pc, #116]	; (4060 <system_board_init+0x2ac>)
    3fea:	58e3      	ldr	r3, [r4, r3]
    3fec:	4798      	blx	r3
    3fee:	1d3b      	adds	r3, r7, #4
    3ff0:	0019      	movs	r1, r3
    3ff2:	2029      	movs	r0, #41	; 0x29
    3ff4:	4b1a      	ldr	r3, [pc, #104]	; (4060 <system_board_init+0x2ac>)
    3ff6:	58e3      	ldr	r3, [r4, r3]
    3ff8:	4798      	blx	r3
    3ffa:	1d3b      	adds	r3, r7, #4
    3ffc:	0019      	movs	r1, r3
    3ffe:	2016      	movs	r0, #22
    4000:	4b17      	ldr	r3, [pc, #92]	; (4060 <system_board_init+0x2ac>)
    4002:	58e3      	ldr	r3, [r4, r3]
    4004:	4798      	blx	r3
    4006:	1d3b      	adds	r3, r7, #4
    4008:	0019      	movs	r1, r3
    400a:	2028      	movs	r0, #40	; 0x28
    400c:	4b14      	ldr	r3, [pc, #80]	; (4060 <system_board_init+0x2ac>)
    400e:	58e3      	ldr	r3, [r4, r3]
    4010:	4798      	blx	r3
	
	// ATWINC, drive enable pins low
	config.direction	= PORT_PIN_DIR_OUTPUT;
    4012:	1d3b      	adds	r3, r7, #4
    4014:	2201      	movs	r2, #1
    4016:	701a      	strb	r2, [r3, #0]
	config.input_pull	= PORT_PIN_PULL_NONE;
    4018:	1d3b      	adds	r3, r7, #4
    401a:	2200      	movs	r2, #0
    401c:	705a      	strb	r2, [r3, #1]
	config.powersave	= 0;
    401e:	1d3b      	adds	r3, r7, #4
    4020:	2200      	movs	r2, #0
    4022:	709a      	strb	r2, [r3, #2]
	LO(WINC_RESET_GP_OUT_PIN);  LO(WINC_CHIPEN_GP_OUT_PIN);
    4024:	2100      	movs	r1, #0
    4026:	201b      	movs	r0, #27
    4028:	4b0f      	ldr	r3, [pc, #60]	; (4068 <system_board_init+0x2b4>)
    402a:	447b      	add	r3, pc
    402c:	4798      	blx	r3
    402e:	2100      	movs	r1, #0
    4030:	201c      	movs	r0, #28
    4032:	4b0e      	ldr	r3, [pc, #56]	; (406c <system_board_init+0x2b8>)
    4034:	447b      	add	r3, pc
    4036:	4798      	blx	r3
	CFG(WINC_RESET_GP_OUT_PIN); CFG(WINC_CHIPEN_GP_OUT_PIN);
    4038:	1d3b      	adds	r3, r7, #4
    403a:	0019      	movs	r1, r3
    403c:	201b      	movs	r0, #27
    403e:	4b08      	ldr	r3, [pc, #32]	; (4060 <system_board_init+0x2ac>)
    4040:	58e3      	ldr	r3, [r4, r3]
    4042:	4798      	blx	r3
    4044:	1d3b      	adds	r3, r7, #4
    4046:	0019      	movs	r1, r3
    4048:	201c      	movs	r0, #28
    404a:	4b05      	ldr	r3, [pc, #20]	; (4060 <system_board_init+0x2ac>)
    404c:	58e3      	ldr	r3, [r4, r3]
    404e:	4798      	blx	r3
	
    4050:	46c0      	nop			; (mov r8, r8)
    4052:	46bd      	mov	sp, r7
    4054:	b003      	add	sp, #12
    4056:	bd90      	pop	{r4, r7, pc}
    4058:	0000b674 	.word	0x0000b674
    405c:	ffffff75 	.word	0xffffff75
    4060:	00000264 	.word	0x00000264
    4064:	fffffdb5 	.word	0xfffffdb5
    4068:	fffffd33 	.word	0xfffffd33
    406c:	fffffd29 	.word	0xfffffd29

00004070 <delay_cycles>:
 *
 * \param n  Number of cycles to delay
 */
static inline void delay_cycles(
		const uint32_t n)
{
    4070:	b580      	push	{r7, lr}
    4072:	b082      	sub	sp, #8
    4074:	af00      	add	r7, sp, #0
    4076:	6078      	str	r0, [r7, #4]
	if (n > 0) {
    4078:	687b      	ldr	r3, [r7, #4]
    407a:	2b00      	cmp	r3, #0
    407c:	d00c      	beq.n	4098 <delay_cycles+0x28>
		SysTick->LOAD = n;
    407e:	4b08      	ldr	r3, [pc, #32]	; (40a0 <delay_cycles+0x30>)
    4080:	687a      	ldr	r2, [r7, #4]
    4082:	605a      	str	r2, [r3, #4]
		SysTick->VAL = 0;
    4084:	4b06      	ldr	r3, [pc, #24]	; (40a0 <delay_cycles+0x30>)
    4086:	2200      	movs	r2, #0
    4088:	609a      	str	r2, [r3, #8]

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    408a:	46c0      	nop			; (mov r8, r8)
    408c:	4b04      	ldr	r3, [pc, #16]	; (40a0 <delay_cycles+0x30>)
    408e:	681a      	ldr	r2, [r3, #0]
    4090:	2380      	movs	r3, #128	; 0x80
    4092:	025b      	lsls	r3, r3, #9
    4094:	4013      	ands	r3, r2
    4096:	d0f9      	beq.n	408c <delay_cycles+0x1c>
		};
	}
}
    4098:	46c0      	nop			; (mov r8, r8)
    409a:	46bd      	mov	sp, r7
    409c:	b002      	add	sp, #8
    409e:	bd80      	pop	{r7, pc}
    40a0:	e000e010 	.word	0xe000e010

000040a4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    40a4:	b5b0      	push	{r4, r5, r7, lr}
    40a6:	af00      	add	r7, sp, #0
    40a8:	4c15      	ldr	r4, [pc, #84]	; (4100 <delay_init+0x5c>)
    40aa:	447c      	add	r4, pc
	cycles_per_ms = system_gclk_gen_get_hz(0);
    40ac:	2000      	movs	r0, #0
    40ae:	4b15      	ldr	r3, [pc, #84]	; (4104 <delay_init+0x60>)
    40b0:	58e3      	ldr	r3, [r4, r3]
    40b2:	4798      	blx	r3
    40b4:	0002      	movs	r2, r0
    40b6:	4b14      	ldr	r3, [pc, #80]	; (4108 <delay_init+0x64>)
    40b8:	447b      	add	r3, pc
    40ba:	601a      	str	r2, [r3, #0]
	cycles_per_ms /= 1000;
    40bc:	4b13      	ldr	r3, [pc, #76]	; (410c <delay_init+0x68>)
    40be:	447b      	add	r3, pc
    40c0:	6818      	ldr	r0, [r3, #0]
    40c2:	4b13      	ldr	r3, [pc, #76]	; (4110 <delay_init+0x6c>)
    40c4:	58e3      	ldr	r3, [r4, r3]
    40c6:	001a      	movs	r2, r3
    40c8:	23fa      	movs	r3, #250	; 0xfa
    40ca:	0099      	lsls	r1, r3, #2
    40cc:	4790      	blx	r2
    40ce:	0003      	movs	r3, r0
    40d0:	001a      	movs	r2, r3
    40d2:	4b10      	ldr	r3, [pc, #64]	; (4114 <delay_init+0x70>)
    40d4:	447b      	add	r3, pc
    40d6:	601a      	str	r2, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    40d8:	4b0f      	ldr	r3, [pc, #60]	; (4118 <delay_init+0x74>)
    40da:	447b      	add	r3, pc
    40dc:	6818      	ldr	r0, [r3, #0]
    40de:	4b0c      	ldr	r3, [pc, #48]	; (4110 <delay_init+0x6c>)
    40e0:	58e3      	ldr	r3, [r4, r3]
    40e2:	001a      	movs	r2, r3
    40e4:	23fa      	movs	r3, #250	; 0xfa
    40e6:	0099      	lsls	r1, r3, #2
    40e8:	4790      	blx	r2
    40ea:	0003      	movs	r3, r0
    40ec:	001a      	movs	r2, r3
    40ee:	4b0b      	ldr	r3, [pc, #44]	; (411c <delay_init+0x78>)
    40f0:	447b      	add	r3, pc
    40f2:	601a      	str	r2, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    40f4:	4b0a      	ldr	r3, [pc, #40]	; (4120 <delay_init+0x7c>)
    40f6:	2205      	movs	r2, #5
    40f8:	601a      	str	r2, [r3, #0]
}
    40fa:	46c0      	nop			; (mov r8, r8)
    40fc:	46bd      	mov	sp, r7
    40fe:	bdb0      	pop	{r4, r5, r7, pc}
    4100:	0000b386 	.word	0x0000b386
    4104:	0000010c 	.word	0x0000010c
    4108:	1fffbf60 	.word	0x1fffbf60
    410c:	1fffbf5a 	.word	0x1fffbf5a
    4110:	00000234 	.word	0x00000234
    4114:	1fffbf44 	.word	0x1fffbf44
    4118:	1fffbf3e 	.word	0x1fffbf3e
    411c:	1fffbf2c 	.word	0x1fffbf2c
    4120:	e000e010 	.word	0xe000e010

00004124 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
    4124:	b580      	push	{r7, lr}
    4126:	b082      	sub	sp, #8
    4128:	af00      	add	r7, sp, #0
    412a:	6078      	str	r0, [r7, #4]
	while (n--) {
    412c:	e006      	b.n	413c <delay_cycles_us+0x18>
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
    412e:	4b08      	ldr	r3, [pc, #32]	; (4150 <delay_cycles_us+0x2c>)
    4130:	447b      	add	r3, pc
    4132:	681b      	ldr	r3, [r3, #0]
    4134:	0018      	movs	r0, r3
    4136:	4b07      	ldr	r3, [pc, #28]	; (4154 <delay_cycles_us+0x30>)
    4138:	447b      	add	r3, pc
    413a:	4798      	blx	r3
	while (n--) {
    413c:	687b      	ldr	r3, [r7, #4]
    413e:	1e5a      	subs	r2, r3, #1
    4140:	607a      	str	r2, [r7, #4]
    4142:	2b00      	cmp	r3, #0
    4144:	d1f3      	bne.n	412e <delay_cycles_us+0xa>
	}
}
    4146:	46c0      	nop			; (mov r8, r8)
    4148:	46bd      	mov	sp, r7
    414a:	b002      	add	sp, #8
    414c:	bd80      	pop	{r7, pc}
    414e:	46c0      	nop			; (mov r8, r8)
    4150:	1fffbeec 	.word	0x1fffbeec
    4154:	ffffff35 	.word	0xffffff35

00004158 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    4158:	b580      	push	{r7, lr}
    415a:	b082      	sub	sp, #8
    415c:	af00      	add	r7, sp, #0
    415e:	6078      	str	r0, [r7, #4]
	while (n--) {
    4160:	e006      	b.n	4170 <delay_cycles_ms+0x18>
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    4162:	4b08      	ldr	r3, [pc, #32]	; (4184 <delay_cycles_ms+0x2c>)
    4164:	447b      	add	r3, pc
    4166:	681b      	ldr	r3, [r3, #0]
    4168:	0018      	movs	r0, r3
    416a:	4b07      	ldr	r3, [pc, #28]	; (4188 <delay_cycles_ms+0x30>)
    416c:	447b      	add	r3, pc
    416e:	4798      	blx	r3
	while (n--) {
    4170:	687b      	ldr	r3, [r7, #4]
    4172:	1e5a      	subs	r2, r3, #1
    4174:	607a      	str	r2, [r7, #4]
    4176:	2b00      	cmp	r3, #0
    4178:	d1f3      	bne.n	4162 <delay_cycles_ms+0xa>
	}
}
    417a:	46c0      	nop			; (mov r8, r8)
    417c:	46bd      	mov	sp, r7
    417e:	b002      	add	sp, #8
    4180:	bd80      	pop	{r7, pc}
    4182:	46c0      	nop			; (mov r8, r8)
    4184:	1fffbeb4 	.word	0x1fffbeb4
    4188:	ffffff01 	.word	0xffffff01

0000418c <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
    418c:	b580      	push	{r7, lr}
    418e:	b082      	sub	sp, #8
    4190:	af00      	add	r7, sp, #0
    4192:	4a0b      	ldr	r2, [pc, #44]	; (41c0 <cpu_irq_save+0x34>)
    4194:	447a      	add	r2, pc
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    4196:	f3ef 8310 	mrs	r3, PRIMASK
    419a:	607b      	str	r3, [r7, #4]
  return(result);
    419c:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    419e:	4259      	negs	r1, r3
    41a0:	414b      	adcs	r3, r1
    41a2:	b2db      	uxtb	r3, r3
    41a4:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    41a6:	b672      	cpsid	i
    41a8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    41ac:	4b05      	ldr	r3, [pc, #20]	; (41c4 <cpu_irq_save+0x38>)
    41ae:	58d3      	ldr	r3, [r2, r3]
    41b0:	2200      	movs	r2, #0
    41b2:	701a      	strb	r2, [r3, #0]
	return flags;
    41b4:	683b      	ldr	r3, [r7, #0]
}
    41b6:	0018      	movs	r0, r3
    41b8:	46bd      	mov	sp, r7
    41ba:	b002      	add	sp, #8
    41bc:	bd80      	pop	{r7, pc}
    41be:	46c0      	nop			; (mov r8, r8)
    41c0:	0000b29c 	.word	0x0000b29c
    41c4:	00000118 	.word	0x00000118

000041c8 <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
    41c8:	b580      	push	{r7, lr}
    41ca:	b082      	sub	sp, #8
    41cc:	af00      	add	r7, sp, #0
    41ce:	6078      	str	r0, [r7, #4]
	return (flags);
    41d0:	687b      	ldr	r3, [r7, #4]
    41d2:	1e5a      	subs	r2, r3, #1
    41d4:	4193      	sbcs	r3, r2
    41d6:	b2db      	uxtb	r3, r3
}
    41d8:	0018      	movs	r0, r3
    41da:	46bd      	mov	sp, r7
    41dc:	b002      	add	sp, #8
    41de:	bd80      	pop	{r7, pc}

000041e0 <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
    41e0:	b590      	push	{r4, r7, lr}
    41e2:	b083      	sub	sp, #12
    41e4:	af00      	add	r7, sp, #0
    41e6:	6078      	str	r0, [r7, #4]
    41e8:	4c09      	ldr	r4, [pc, #36]	; (4210 <cpu_irq_restore+0x30>)
    41ea:	447c      	add	r4, pc
	if (cpu_irq_is_enabled_flags(flags))
    41ec:	687b      	ldr	r3, [r7, #4]
    41ee:	0018      	movs	r0, r3
    41f0:	4b08      	ldr	r3, [pc, #32]	; (4214 <cpu_irq_restore+0x34>)
    41f2:	447b      	add	r3, pc
    41f4:	4798      	blx	r3
    41f6:	1e03      	subs	r3, r0, #0
    41f8:	d006      	beq.n	4208 <cpu_irq_restore+0x28>
		cpu_irq_enable();
    41fa:	4b07      	ldr	r3, [pc, #28]	; (4218 <cpu_irq_restore+0x38>)
    41fc:	58e3      	ldr	r3, [r4, r3]
    41fe:	2201      	movs	r2, #1
    4200:	701a      	strb	r2, [r3, #0]
    4202:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    4206:	b662      	cpsie	i
}
    4208:	46c0      	nop			; (mov r8, r8)
    420a:	46bd      	mov	sp, r7
    420c:	b003      	add	sp, #12
    420e:	bd90      	pop	{r4, r7, pc}
    4210:	0000b246 	.word	0x0000b246
    4214:	ffffffd3 	.word	0xffffffd3
    4218:	00000118 	.word	0x00000118

0000421c <udi_cdc_comm_enable>:
static volatile bool udi_cdc_tx_both_buf_to_send[UDI_CDC_PORT_NB];

//@}

bool udi_cdc_comm_enable(void)
{
    421c:	b590      	push	{r4, r7, lr}
    421e:	b083      	sub	sp, #12
    4220:	af00      	add	r7, sp, #0
	uint8_t port;
	uint8_t iface_comm_num;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    4222:	1dbb      	adds	r3, r7, #6
    4224:	2200      	movs	r2, #0
    4226:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_comm_enabled = 0;
    4228:	4b57      	ldr	r3, [pc, #348]	; (4388 <udi_cdc_comm_enable+0x16c>)
    422a:	447b      	add	r3, pc
    422c:	2200      	movs	r2, #0
    422e:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_comm_enabled;
#endif

	// Initialize control signal management
	udi_cdc_state[port] = CPU_TO_LE16(0);
    4230:	1dbb      	adds	r3, r7, #6
    4232:	781a      	ldrb	r2, [r3, #0]
    4234:	4b55      	ldr	r3, [pc, #340]	; (438c <udi_cdc_comm_enable+0x170>)
    4236:	447b      	add	r3, pc
    4238:	0052      	lsls	r2, r2, #1
    423a:	2100      	movs	r1, #0
    423c:	52d1      	strh	r1, [r2, r3]

	uid_cdc_state_msg[port].header.bmRequestType =
    423e:	1dbb      	adds	r3, r7, #6
    4240:	781a      	ldrb	r2, [r3, #0]
    4242:	4953      	ldr	r1, [pc, #332]	; (4390 <udi_cdc_comm_enable+0x174>)
    4244:	4479      	add	r1, pc
    4246:	0013      	movs	r3, r2
    4248:	009b      	lsls	r3, r3, #2
    424a:	189b      	adds	r3, r3, r2
    424c:	005b      	lsls	r3, r3, #1
    424e:	22a1      	movs	r2, #161	; 0xa1
    4250:	545a      	strb	r2, [r3, r1]
			USB_REQ_DIR_IN | USB_REQ_TYPE_CLASS |
			USB_REQ_RECIP_INTERFACE;
	uid_cdc_state_msg[port].header.bNotification = USB_REQ_CDC_NOTIFY_SERIAL_STATE;
    4252:	1dbb      	adds	r3, r7, #6
    4254:	781a      	ldrb	r2, [r3, #0]
    4256:	494f      	ldr	r1, [pc, #316]	; (4394 <udi_cdc_comm_enable+0x178>)
    4258:	4479      	add	r1, pc
    425a:	0013      	movs	r3, r2
    425c:	009b      	lsls	r3, r3, #2
    425e:	189b      	adds	r3, r3, r2
    4260:	005b      	lsls	r3, r3, #1
    4262:	18cb      	adds	r3, r1, r3
    4264:	3301      	adds	r3, #1
    4266:	2220      	movs	r2, #32
    4268:	701a      	strb	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wValue = LE16(0);
    426a:	1dbb      	adds	r3, r7, #6
    426c:	781a      	ldrb	r2, [r3, #0]
    426e:	494a      	ldr	r1, [pc, #296]	; (4398 <udi_cdc_comm_enable+0x17c>)
    4270:	4479      	add	r1, pc
    4272:	0013      	movs	r3, r2
    4274:	009b      	lsls	r3, r3, #2
    4276:	189b      	adds	r3, r3, r2
    4278:	005b      	lsls	r3, r3, #1
    427a:	18cb      	adds	r3, r1, r3
    427c:	3302      	adds	r3, #2
    427e:	2200      	movs	r2, #0
    4280:	801a      	strh	r2, [r3, #0]

	switch (port) {
    4282:	1dbb      	adds	r3, r7, #6
    4284:	781b      	ldrb	r3, [r3, #0]
    4286:	2b00      	cmp	r3, #0
    4288:	d103      	bne.n	4292 <udi_cdc_comm_enable+0x76>
#define UDI_CDC_PORT_TO_IFACE_COMM(index, unused) \
	case index: \
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_IFACE_COMM, ~)
    428a:	1dfb      	adds	r3, r7, #7
    428c:	2200      	movs	r2, #0
    428e:	701a      	strb	r2, [r3, #0]
    4290:	e003      	b.n	429a <udi_cdc_comm_enable+0x7e>
#undef UDI_CDC_PORT_TO_IFACE_COMM
	default:
		iface_comm_num = UDI_CDC_COMM_IFACE_NUMBER_0;
    4292:	1dfb      	adds	r3, r7, #7
    4294:	2200      	movs	r2, #0
    4296:	701a      	strb	r2, [r3, #0]
		break;
    4298:	46c0      	nop			; (mov r8, r8)
	}

	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
    429a:	1dbb      	adds	r3, r7, #6
    429c:	781a      	ldrb	r2, [r3, #0]
    429e:	1dfb      	adds	r3, r7, #7
    42a0:	781b      	ldrb	r3, [r3, #0]
    42a2:	b298      	uxth	r0, r3
    42a4:	493d      	ldr	r1, [pc, #244]	; (439c <udi_cdc_comm_enable+0x180>)
    42a6:	4479      	add	r1, pc
    42a8:	0013      	movs	r3, r2
    42aa:	009b      	lsls	r3, r3, #2
    42ac:	189b      	adds	r3, r3, r2
    42ae:	005b      	lsls	r3, r3, #1
    42b0:	18cb      	adds	r3, r1, r3
    42b2:	3304      	adds	r3, #4
    42b4:	1c02      	adds	r2, r0, #0
    42b6:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
    42b8:	1dbb      	adds	r3, r7, #6
    42ba:	781a      	ldrb	r2, [r3, #0]
    42bc:	4938      	ldr	r1, [pc, #224]	; (43a0 <udi_cdc_comm_enable+0x184>)
    42be:	4479      	add	r1, pc
    42c0:	0013      	movs	r3, r2
    42c2:	009b      	lsls	r3, r3, #2
    42c4:	189b      	adds	r3, r3, r2
    42c6:	005b      	lsls	r3, r3, #1
    42c8:	18cb      	adds	r3, r1, r3
    42ca:	3306      	adds	r3, #6
    42cc:	2202      	movs	r2, #2
    42ce:	801a      	strh	r2, [r3, #0]
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
    42d0:	1dbb      	adds	r3, r7, #6
    42d2:	781a      	ldrb	r2, [r3, #0]
    42d4:	4933      	ldr	r1, [pc, #204]	; (43a4 <udi_cdc_comm_enable+0x188>)
    42d6:	4479      	add	r1, pc
    42d8:	0013      	movs	r3, r2
    42da:	009b      	lsls	r3, r3, #2
    42dc:	189b      	adds	r3, r3, r2
    42de:	005b      	lsls	r3, r3, #1
    42e0:	18cb      	adds	r3, r1, r3
    42e2:	3308      	adds	r3, #8
    42e4:	2200      	movs	r2, #0
    42e6:	801a      	strh	r2, [r3, #0]

	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
    42e8:	1dbb      	adds	r3, r7, #6
    42ea:	7819      	ldrb	r1, [r3, #0]
    42ec:	4a2e      	ldr	r2, [pc, #184]	; (43a8 <udi_cdc_comm_enable+0x18c>)
    42ee:	447a      	add	r2, pc
    42f0:	000b      	movs	r3, r1
    42f2:	00db      	lsls	r3, r3, #3
    42f4:	1a5b      	subs	r3, r3, r1
    42f6:	5c99      	ldrb	r1, [r3, r2]
    42f8:	2000      	movs	r0, #0
    42fa:	4001      	ands	r1, r0
    42fc:	5499      	strb	r1, [r3, r2]
    42fe:	18d1      	adds	r1, r2, r3
    4300:	7848      	ldrb	r0, [r1, #1]
    4302:	2400      	movs	r4, #0
    4304:	4020      	ands	r0, r4
    4306:	1c04      	adds	r4, r0, #0
    4308:	203e      	movs	r0, #62	; 0x3e
    430a:	4240      	negs	r0, r0
    430c:	4320      	orrs	r0, r4
    430e:	7048      	strb	r0, [r1, #1]
    4310:	18d1      	adds	r1, r2, r3
    4312:	7888      	ldrb	r0, [r1, #2]
    4314:	2400      	movs	r4, #0
    4316:	4020      	ands	r0, r4
    4318:	1c04      	adds	r4, r0, #0
    431a:	2001      	movs	r0, #1
    431c:	4320      	orrs	r0, r4
    431e:	7088      	strb	r0, [r1, #2]
    4320:	18d3      	adds	r3, r2, r3
    4322:	78da      	ldrb	r2, [r3, #3]
    4324:	2100      	movs	r1, #0
    4326:	400a      	ands	r2, r1
    4328:	70da      	strb	r2, [r3, #3]
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
    432a:	1dbb      	adds	r3, r7, #6
    432c:	781a      	ldrb	r2, [r3, #0]
    432e:	491f      	ldr	r1, [pc, #124]	; (43ac <udi_cdc_comm_enable+0x190>)
    4330:	4479      	add	r1, pc
    4332:	0013      	movs	r3, r2
    4334:	00db      	lsls	r3, r3, #3
    4336:	1a9b      	subs	r3, r3, r2
    4338:	18cb      	adds	r3, r1, r3
    433a:	3304      	adds	r3, #4
    433c:	2200      	movs	r2, #0
    433e:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
    4340:	1dbb      	adds	r3, r7, #6
    4342:	781a      	ldrb	r2, [r3, #0]
    4344:	491a      	ldr	r1, [pc, #104]	; (43b0 <udi_cdc_comm_enable+0x194>)
    4346:	4479      	add	r1, pc
    4348:	0013      	movs	r3, r2
    434a:	00db      	lsls	r3, r3, #3
    434c:	1a9b      	subs	r3, r3, r2
    434e:	18cb      	adds	r3, r1, r3
    4350:	3305      	adds	r3, #5
    4352:	2200      	movs	r2, #0
    4354:	701a      	strb	r2, [r3, #0]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
    4356:	1dbb      	adds	r3, r7, #6
    4358:	781a      	ldrb	r2, [r3, #0]
    435a:	4916      	ldr	r1, [pc, #88]	; (43b4 <udi_cdc_comm_enable+0x198>)
    435c:	4479      	add	r1, pc
    435e:	0013      	movs	r3, r2
    4360:	00db      	lsls	r3, r3, #3
    4362:	1a9b      	subs	r3, r3, r2
    4364:	18cb      	adds	r3, r1, r3
    4366:	3306      	adds	r3, #6
    4368:	2208      	movs	r2, #8
    436a:	701a      	strb	r2, [r3, #0]
	// to initialize memories or indicate that interface is enabled
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
	if (!UDI_CDC_ENABLE_EXT(port)) {
		return false;
	}
	udi_cdc_nb_comm_enabled++;
    436c:	4b12      	ldr	r3, [pc, #72]	; (43b8 <udi_cdc_comm_enable+0x19c>)
    436e:	447b      	add	r3, pc
    4370:	781b      	ldrb	r3, [r3, #0]
    4372:	b2db      	uxtb	r3, r3
    4374:	3301      	adds	r3, #1
    4376:	b2da      	uxtb	r2, r3
    4378:	4b10      	ldr	r3, [pc, #64]	; (43bc <udi_cdc_comm_enable+0x1a0>)
    437a:	447b      	add	r3, pc
    437c:	701a      	strb	r2, [r3, #0]
	return true;
    437e:	2301      	movs	r3, #1
}
    4380:	0018      	movs	r0, r3
    4382:	46bd      	mov	sp, r7
    4384:	b003      	add	sp, #12
    4386:	bd90      	pop	{r4, r7, pc}
    4388:	1fffbf98 	.word	0x1fffbf98
    438c:	1fffbf7e 	.word	0x1fffbf7e
    4390:	1fffbf74 	.word	0x1fffbf74
    4394:	1fffbf60 	.word	0x1fffbf60
    4398:	1fffbf48 	.word	0x1fffbf48
    439c:	1fffbf12 	.word	0x1fffbf12
    43a0:	1fffbefa 	.word	0x1fffbefa
    43a4:	1fffbee2 	.word	0x1fffbee2
    43a8:	1fffbebe 	.word	0x1fffbebe
    43ac:	1fffbe7c 	.word	0x1fffbe7c
    43b0:	1fffbe66 	.word	0x1fffbe66
    43b4:	1fffbe50 	.word	0x1fffbe50
    43b8:	1fffbe54 	.word	0x1fffbe54
    43bc:	1fffbe48 	.word	0x1fffbe48

000043c0 <udi_cdc_data_enable>:

bool udi_cdc_data_enable(void)
{
    43c0:	b580      	push	{r7, lr}
    43c2:	b082      	sub	sp, #8
    43c4:	af00      	add	r7, sp, #0
	uint8_t port;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    43c6:	1dfb      	adds	r3, r7, #7
    43c8:	2200      	movs	r2, #0
    43ca:	701a      	strb	r2, [r3, #0]
	udi_cdc_nb_data_enabled = 0;
    43cc:	4b3e      	ldr	r3, [pc, #248]	; (44c8 <udi_cdc_data_enable+0x108>)
    43ce:	447b      	add	r3, pc
    43d0:	2200      	movs	r2, #0
    43d2:	701a      	strb	r2, [r3, #0]
	}
	port = udi_cdc_nb_data_enabled;
#endif

	// Initialize TX management
	udi_cdc_tx_trans_ongoing[port] = false;
    43d4:	1dfb      	adds	r3, r7, #7
    43d6:	781b      	ldrb	r3, [r3, #0]
    43d8:	4a3c      	ldr	r2, [pc, #240]	; (44cc <udi_cdc_data_enable+0x10c>)
    43da:	447a      	add	r2, pc
    43dc:	2100      	movs	r1, #0
    43de:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    43e0:	1dfb      	adds	r3, r7, #7
    43e2:	781b      	ldrb	r3, [r3, #0]
    43e4:	4a3a      	ldr	r2, [pc, #232]	; (44d0 <udi_cdc_data_enable+0x110>)
    43e6:	447a      	add	r2, pc
    43e8:	2100      	movs	r1, #0
    43ea:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_sel[port] = 0;
    43ec:	1dfb      	adds	r3, r7, #7
    43ee:	781b      	ldrb	r3, [r3, #0]
    43f0:	4a38      	ldr	r2, [pc, #224]	; (44d4 <udi_cdc_data_enable+0x114>)
    43f2:	447a      	add	r2, pc
    43f4:	2100      	movs	r1, #0
    43f6:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][0] = 0;
    43f8:	1dfb      	adds	r3, r7, #7
    43fa:	781a      	ldrb	r2, [r3, #0]
    43fc:	4b36      	ldr	r3, [pc, #216]	; (44d8 <udi_cdc_data_enable+0x118>)
    43fe:	447b      	add	r3, pc
    4400:	0092      	lsls	r2, r2, #2
    4402:	2100      	movs	r1, #0
    4404:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_buf_nb[port][1] = 0;
    4406:	1dfb      	adds	r3, r7, #7
    4408:	781b      	ldrb	r3, [r3, #0]
    440a:	4a34      	ldr	r2, [pc, #208]	; (44dc <udi_cdc_data_enable+0x11c>)
    440c:	447a      	add	r2, pc
    440e:	009b      	lsls	r3, r3, #2
    4410:	18d3      	adds	r3, r2, r3
    4412:	3302      	adds	r3, #2
    4414:	2200      	movs	r2, #0
    4416:	801a      	strh	r2, [r3, #0]
	udi_cdc_tx_sof_num[port] = 0;
    4418:	1dfb      	adds	r3, r7, #7
    441a:	781a      	ldrb	r2, [r3, #0]
    441c:	4b30      	ldr	r3, [pc, #192]	; (44e0 <udi_cdc_data_enable+0x120>)
    441e:	447b      	add	r3, pc
    4420:	0052      	lsls	r2, r2, #1
    4422:	2100      	movs	r1, #0
    4424:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_send(port);
    4426:	1dfb      	adds	r3, r7, #7
    4428:	781b      	ldrb	r3, [r3, #0]
    442a:	0018      	movs	r0, r3
    442c:	4b2d      	ldr	r3, [pc, #180]	; (44e4 <udi_cdc_data_enable+0x124>)
    442e:	447b      	add	r3, pc
    4430:	4798      	blx	r3

	// Initialize RX management
	udi_cdc_rx_trans_ongoing[port] = false;
    4432:	1dfb      	adds	r3, r7, #7
    4434:	781b      	ldrb	r3, [r3, #0]
    4436:	4a2c      	ldr	r2, [pc, #176]	; (44e8 <udi_cdc_data_enable+0x128>)
    4438:	447a      	add	r2, pc
    443a:	2100      	movs	r1, #0
    443c:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = 0;
    443e:	1dfb      	adds	r3, r7, #7
    4440:	781b      	ldrb	r3, [r3, #0]
    4442:	4a2a      	ldr	r2, [pc, #168]	; (44ec <udi_cdc_data_enable+0x12c>)
    4444:	447a      	add	r2, pc
    4446:	2100      	movs	r1, #0
    4448:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][0] = 0;
    444a:	1dfb      	adds	r3, r7, #7
    444c:	781a      	ldrb	r2, [r3, #0]
    444e:	4b28      	ldr	r3, [pc, #160]	; (44f0 <udi_cdc_data_enable+0x130>)
    4450:	447b      	add	r3, pc
    4452:	0092      	lsls	r2, r2, #2
    4454:	2100      	movs	r1, #0
    4456:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_nb[port][1] = 0;
    4458:	1dfb      	adds	r3, r7, #7
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	4a25      	ldr	r2, [pc, #148]	; (44f4 <udi_cdc_data_enable+0x134>)
    445e:	447a      	add	r2, pc
    4460:	009b      	lsls	r3, r3, #2
    4462:	18d3      	adds	r3, r2, r3
    4464:	3302      	adds	r3, #2
    4466:	2200      	movs	r2, #0
    4468:	801a      	strh	r2, [r3, #0]
	udi_cdc_rx_pos[port] = 0;
    446a:	1dfb      	adds	r3, r7, #7
    446c:	781a      	ldrb	r2, [r3, #0]
    446e:	4b22      	ldr	r3, [pc, #136]	; (44f8 <udi_cdc_data_enable+0x138>)
    4470:	447b      	add	r3, pc
    4472:	0052      	lsls	r2, r2, #1
    4474:	2100      	movs	r1, #0
    4476:	52d1      	strh	r1, [r2, r3]
	if (!udi_cdc_rx_start(port)) {
    4478:	1dfb      	adds	r3, r7, #7
    447a:	781b      	ldrb	r3, [r3, #0]
    447c:	0018      	movs	r0, r3
    447e:	4b1f      	ldr	r3, [pc, #124]	; (44fc <udi_cdc_data_enable+0x13c>)
    4480:	447b      	add	r3, pc
    4482:	4798      	blx	r3
    4484:	0003      	movs	r3, r0
    4486:	001a      	movs	r2, r3
    4488:	2301      	movs	r3, #1
    448a:	4053      	eors	r3, r2
    448c:	b2db      	uxtb	r3, r3
    448e:	2b00      	cmp	r3, #0
    4490:	d001      	beq.n	4496 <udi_cdc_data_enable+0xd6>
		return false;
    4492:	2300      	movs	r3, #0
    4494:	e013      	b.n	44be <udi_cdc_data_enable+0xfe>
	}
	udi_cdc_nb_data_enabled++;
    4496:	4b1a      	ldr	r3, [pc, #104]	; (4500 <udi_cdc_data_enable+0x140>)
    4498:	447b      	add	r3, pc
    449a:	781b      	ldrb	r3, [r3, #0]
    449c:	b2db      	uxtb	r3, r3
    449e:	3301      	adds	r3, #1
    44a0:	b2da      	uxtb	r2, r3
    44a2:	4b18      	ldr	r3, [pc, #96]	; (4504 <udi_cdc_data_enable+0x144>)
    44a4:	447b      	add	r3, pc
    44a6:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
    44a8:	4b17      	ldr	r3, [pc, #92]	; (4508 <udi_cdc_data_enable+0x148>)
    44aa:	447b      	add	r3, pc
    44ac:	781b      	ldrb	r3, [r3, #0]
    44ae:	b2db      	uxtb	r3, r3
    44b0:	2b01      	cmp	r3, #1
    44b2:	d103      	bne.n	44bc <udi_cdc_data_enable+0xfc>
		udi_cdc_data_running = true;
    44b4:	4b15      	ldr	r3, [pc, #84]	; (450c <udi_cdc_data_enable+0x14c>)
    44b6:	447b      	add	r3, pc
    44b8:	2201      	movs	r2, #1
    44ba:	701a      	strb	r2, [r3, #0]
	}
	return true;
    44bc:	2301      	movs	r3, #1
}
    44be:	0018      	movs	r0, r3
    44c0:	46bd      	mov	sp, r7
    44c2:	b002      	add	sp, #8
    44c4:	bd80      	pop	{r7, pc}
    44c6:	46c0      	nop			; (mov r8, r8)
    44c8:	1fffbdf5 	.word	0x1fffbdf5
    44cc:	1fffbf0a 	.word	0x1fffbf0a
    44d0:	1fffbf02 	.word	0x1fffbf02
    44d4:	1fffbeea 	.word	0x1fffbeea
    44d8:	1fffbeda 	.word	0x1fffbeda
    44dc:	1fffbecc 	.word	0x1fffbecc
    44e0:	1fffbec2 	.word	0x1fffbec2
    44e4:	000005bf 	.word	0x000005bf
    44e8:	1fffbe1c 	.word	0x1fffbe1c
    44ec:	1fffbe08 	.word	0x1fffbe08
    44f0:	1fffbdf8 	.word	0x1fffbdf8
    44f4:	1fffbdea 	.word	0x1fffbdea
    44f8:	1fffbde0 	.word	0x1fffbde0
    44fc:	00000281 	.word	0x00000281
    4500:	1fffbd2b 	.word	0x1fffbd2b
    4504:	1fffbd1f 	.word	0x1fffbd1f
    4508:	1fffbd19 	.word	0x1fffbd19
    450c:	1fffbd0e 	.word	0x1fffbd0e

00004510 <udi_cdc_comm_disable>:

void udi_cdc_comm_disable(void)
{
    4510:	b580      	push	{r7, lr}
    4512:	af00      	add	r7, sp, #0
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
    4514:	4b05      	ldr	r3, [pc, #20]	; (452c <udi_cdc_comm_disable+0x1c>)
    4516:	447b      	add	r3, pc
    4518:	781b      	ldrb	r3, [r3, #0]
    451a:	b2db      	uxtb	r3, r3
    451c:	3b01      	subs	r3, #1
    451e:	b2da      	uxtb	r2, r3
    4520:	4b03      	ldr	r3, [pc, #12]	; (4530 <udi_cdc_comm_disable+0x20>)
    4522:	447b      	add	r3, pc
    4524:	701a      	strb	r2, [r3, #0]
}
    4526:	46c0      	nop			; (mov r8, r8)
    4528:	46bd      	mov	sp, r7
    452a:	bd80      	pop	{r7, pc}
    452c:	1fffbcac 	.word	0x1fffbcac
    4530:	1fffbca0 	.word	0x1fffbca0

00004534 <udi_cdc_data_disable>:

void udi_cdc_data_disable(void)
{
    4534:	b580      	push	{r7, lr}
    4536:	b082      	sub	sp, #8
    4538:	af00      	add	r7, sp, #0
	uint8_t port;

	Assert(udi_cdc_nb_data_enabled != 0);
	udi_cdc_nb_data_enabled--;
    453a:	4b0b      	ldr	r3, [pc, #44]	; (4568 <udi_cdc_data_disable+0x34>)
    453c:	447b      	add	r3, pc
    453e:	781b      	ldrb	r3, [r3, #0]
    4540:	b2db      	uxtb	r3, r3
    4542:	3b01      	subs	r3, #1
    4544:	b2da      	uxtb	r2, r3
    4546:	4b09      	ldr	r3, [pc, #36]	; (456c <udi_cdc_data_disable+0x38>)
    4548:	447b      	add	r3, pc
    454a:	701a      	strb	r2, [r3, #0]
	port = udi_cdc_nb_data_enabled;
    454c:	1dfb      	adds	r3, r7, #7
    454e:	4a08      	ldr	r2, [pc, #32]	; (4570 <udi_cdc_data_disable+0x3c>)
    4550:	447a      	add	r2, pc
    4552:	7812      	ldrb	r2, [r2, #0]
    4554:	701a      	strb	r2, [r3, #0]
	UDI_CDC_DISABLE_EXT(port);
	udi_cdc_data_running = false;
    4556:	4b07      	ldr	r3, [pc, #28]	; (4574 <udi_cdc_data_disable+0x40>)
    4558:	447b      	add	r3, pc
    455a:	2200      	movs	r2, #0
    455c:	701a      	strb	r2, [r3, #0]
}
    455e:	46c0      	nop			; (mov r8, r8)
    4560:	46bd      	mov	sp, r7
    4562:	b002      	add	sp, #8
    4564:	bd80      	pop	{r7, pc}
    4566:	46c0      	nop			; (mov r8, r8)
    4568:	1fffbc87 	.word	0x1fffbc87
    456c:	1fffbc7b 	.word	0x1fffbc7b
    4570:	1fffbc73 	.word	0x1fffbc73
    4574:	1fffbc6c 	.word	0x1fffbc6c

00004578 <udi_cdc_comm_setup>:

bool udi_cdc_comm_setup(void)
{
    4578:	b5b0      	push	{r4, r5, r7, lr}
    457a:	b082      	sub	sp, #8
    457c:	af00      	add	r7, sp, #0
    457e:	4c36      	ldr	r4, [pc, #216]	; (4658 <udi_cdc_comm_setup+0xe0>)
    4580:	447c      	add	r4, pc
	uint8_t port = udi_cdc_setup_to_port();
    4582:	1dfd      	adds	r5, r7, #7
    4584:	4b35      	ldr	r3, [pc, #212]	; (465c <udi_cdc_comm_setup+0xe4>)
    4586:	447b      	add	r3, pc
    4588:	4798      	blx	r3
    458a:	0003      	movs	r3, r0
    458c:	702b      	strb	r3, [r5, #0]

	if (Udd_setup_is_in()) {
    458e:	4b34      	ldr	r3, [pc, #208]	; (4660 <udi_cdc_comm_setup+0xe8>)
    4590:	58e3      	ldr	r3, [r4, r3]
    4592:	781b      	ldrb	r3, [r3, #0]
    4594:	b25b      	sxtb	r3, r3
    4596:	2b00      	cmp	r3, #0
    4598:	da24      	bge.n	45e4 <udi_cdc_comm_setup+0x6c>
		// GET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    459a:	4b31      	ldr	r3, [pc, #196]	; (4660 <udi_cdc_comm_setup+0xe8>)
    459c:	58e3      	ldr	r3, [r4, r3]
    459e:	781b      	ldrb	r3, [r3, #0]
    45a0:	001a      	movs	r2, r3
    45a2:	2360      	movs	r3, #96	; 0x60
    45a4:	4013      	ands	r3, r2
    45a6:	2b20      	cmp	r3, #32
    45a8:	d11c      	bne.n	45e4 <udi_cdc_comm_setup+0x6c>
			// Requests Class Interface Get
			switch (udd_g_ctrlreq.req.bRequest) {
    45aa:	4b2d      	ldr	r3, [pc, #180]	; (4660 <udi_cdc_comm_setup+0xe8>)
    45ac:	58e3      	ldr	r3, [r4, r3]
    45ae:	785b      	ldrb	r3, [r3, #1]
    45b0:	2b21      	cmp	r3, #33	; 0x21
    45b2:	d117      	bne.n	45e4 <udi_cdc_comm_setup+0x6c>
			case USB_REQ_CDC_GET_LINE_CODING:
				// Get configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    45b4:	4b2a      	ldr	r3, [pc, #168]	; (4660 <udi_cdc_comm_setup+0xe8>)
    45b6:	58e3      	ldr	r3, [r4, r3]
    45b8:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    45ba:	2b07      	cmp	r3, #7
    45bc:	d001      	beq.n	45c2 <udi_cdc_comm_setup+0x4a>
					return false; // Error for USB host
    45be:	2300      	movs	r3, #0
    45c0:	e046      	b.n	4650 <udi_cdc_comm_setup+0xd8>
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    45c2:	1dfb      	adds	r3, r7, #7
    45c4:	781a      	ldrb	r2, [r3, #0]
						(uint8_t *) &
    45c6:	0013      	movs	r3, r2
    45c8:	00db      	lsls	r3, r3, #3
    45ca:	1a9b      	subs	r3, r3, r2
    45cc:	4a25      	ldr	r2, [pc, #148]	; (4664 <udi_cdc_comm_setup+0xec>)
    45ce:	447a      	add	r2, pc
    45d0:	189a      	adds	r2, r3, r2
				udd_g_ctrlreq.payload =
    45d2:	4b23      	ldr	r3, [pc, #140]	; (4660 <udi_cdc_comm_setup+0xe8>)
    45d4:	58e3      	ldr	r3, [r4, r3]
    45d6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
    45d8:	4b21      	ldr	r3, [pc, #132]	; (4660 <udi_cdc_comm_setup+0xe8>)
    45da:	58e3      	ldr	r3, [r4, r3]
    45dc:	2207      	movs	r2, #7
    45de:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    45e0:	2301      	movs	r3, #1
    45e2:	e035      	b.n	4650 <udi_cdc_comm_setup+0xd8>
			}
		}
	}
	if (Udd_setup_is_out()) {
    45e4:	4b1e      	ldr	r3, [pc, #120]	; (4660 <udi_cdc_comm_setup+0xe8>)
    45e6:	58e3      	ldr	r3, [r4, r3]
    45e8:	781b      	ldrb	r3, [r3, #0]
    45ea:	b25b      	sxtb	r3, r3
    45ec:	2b00      	cmp	r3, #0
    45ee:	db2e      	blt.n	464e <udi_cdc_comm_setup+0xd6>
		// SET Interface Requests
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
    45f0:	4b1b      	ldr	r3, [pc, #108]	; (4660 <udi_cdc_comm_setup+0xe8>)
    45f2:	58e3      	ldr	r3, [r4, r3]
    45f4:	781b      	ldrb	r3, [r3, #0]
    45f6:	001a      	movs	r2, r3
    45f8:	2360      	movs	r3, #96	; 0x60
    45fa:	4013      	ands	r3, r2
    45fc:	2b20      	cmp	r3, #32
    45fe:	d126      	bne.n	464e <udi_cdc_comm_setup+0xd6>
			// Requests Class Interface Set
			switch (udd_g_ctrlreq.req.bRequest) {
    4600:	4b17      	ldr	r3, [pc, #92]	; (4660 <udi_cdc_comm_setup+0xe8>)
    4602:	58e3      	ldr	r3, [r4, r3]
    4604:	785b      	ldrb	r3, [r3, #1]
    4606:	2b20      	cmp	r3, #32
    4608:	d002      	beq.n	4610 <udi_cdc_comm_setup+0x98>
    460a:	2b22      	cmp	r3, #34	; 0x22
    460c:	d01d      	beq.n	464a <udi_cdc_comm_setup+0xd2>
    460e:	e01e      	b.n	464e <udi_cdc_comm_setup+0xd6>
			case USB_REQ_CDC_SET_LINE_CODING:
				// Change configuration of CDC line
				if (sizeof(usb_cdc_line_coding_t) !=
						udd_g_ctrlreq.req.wLength)
    4610:	4b13      	ldr	r3, [pc, #76]	; (4660 <udi_cdc_comm_setup+0xe8>)
    4612:	58e3      	ldr	r3, [r4, r3]
    4614:	88db      	ldrh	r3, [r3, #6]
				if (sizeof(usb_cdc_line_coding_t) !=
    4616:	2b07      	cmp	r3, #7
    4618:	d001      	beq.n	461e <udi_cdc_comm_setup+0xa6>
					return false; // Error for USB host
    461a:	2300      	movs	r3, #0
    461c:	e018      	b.n	4650 <udi_cdc_comm_setup+0xd8>
				udd_g_ctrlreq.callback =
    461e:	4b10      	ldr	r3, [pc, #64]	; (4660 <udi_cdc_comm_setup+0xe8>)
    4620:	58e3      	ldr	r3, [r4, r3]
    4622:	4a11      	ldr	r2, [pc, #68]	; (4668 <udi_cdc_comm_setup+0xf0>)
    4624:	447a      	add	r2, pc
    4626:	611a      	str	r2, [r3, #16]
						udi_cdc_line_coding_received;
				udd_g_ctrlreq.payload =
						(uint8_t *) &
						udi_cdc_line_coding[port];
    4628:	1dfb      	adds	r3, r7, #7
    462a:	781a      	ldrb	r2, [r3, #0]
						(uint8_t *) &
    462c:	0013      	movs	r3, r2
    462e:	00db      	lsls	r3, r3, #3
    4630:	1a9b      	subs	r3, r3, r2
    4632:	4a0e      	ldr	r2, [pc, #56]	; (466c <udi_cdc_comm_setup+0xf4>)
    4634:	447a      	add	r2, pc
    4636:	189a      	adds	r2, r3, r2
				udd_g_ctrlreq.payload =
    4638:	4b09      	ldr	r3, [pc, #36]	; (4660 <udi_cdc_comm_setup+0xe8>)
    463a:	58e3      	ldr	r3, [r4, r3]
    463c:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
    463e:	4b08      	ldr	r3, [pc, #32]	; (4660 <udi_cdc_comm_setup+0xe8>)
    4640:	58e3      	ldr	r3, [r4, r3]
    4642:	2207      	movs	r2, #7
    4644:	819a      	strh	r2, [r3, #12]
						sizeof(usb_cdc_line_coding_t);
				return true;
    4646:	2301      	movs	r3, #1
    4648:	e002      	b.n	4650 <udi_cdc_comm_setup+0xd8>
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_DTE_PRESENT)));
				UDI_CDC_SET_RTS_EXT(port, (0 !=
						(udd_g_ctrlreq.req.wValue
						 & CDC_CTRL_SIGNAL_ACTIVATE_CARRIER)));
				return true;
    464a:	2301      	movs	r3, #1
    464c:	e000      	b.n	4650 <udi_cdc_comm_setup+0xd8>
			}
		}
	}
	return false;  // request Not supported
    464e:	2300      	movs	r3, #0
}
    4650:	0018      	movs	r0, r3
    4652:	46bd      	mov	sp, r7
    4654:	b002      	add	sp, #8
    4656:	bdb0      	pop	{r4, r5, r7, pc}
    4658:	0000aeb0 	.word	0x0000aeb0
    465c:	0000011f 	.word	0x0000011f
    4660:	00000208 	.word	0x00000208
    4664:	1fffbbde 	.word	0x1fffbbde
    4668:	000000bd 	.word	0x000000bd
    466c:	1fffbb78 	.word	0x1fffbb78

00004670 <udi_cdc_data_setup>:

bool udi_cdc_data_setup(void)
{
    4670:	b580      	push	{r7, lr}
    4672:	af00      	add	r7, sp, #0
	return false;  // request Not supported
    4674:	2300      	movs	r3, #0
}
    4676:	0018      	movs	r0, r3
    4678:	46bd      	mov	sp, r7
    467a:	bd80      	pop	{r7, pc}

0000467c <udi_cdc_getsetting>:

uint8_t udi_cdc_getsetting(void)
{
    467c:	b580      	push	{r7, lr}
    467e:	af00      	add	r7, sp, #0
	return 0;      // CDC don't have multiple alternate setting
    4680:	2300      	movs	r3, #0
}
    4682:	0018      	movs	r0, r3
    4684:	46bd      	mov	sp, r7
    4686:	bd80      	pop	{r7, pc}

00004688 <udi_cdc_data_sof_notify>:

void udi_cdc_data_sof_notify(void)
{
    4688:	b580      	push	{r7, lr}
    468a:	af00      	add	r7, sp, #0
	static uint8_t port_notify = 0;

	// A call of udi_cdc_data_sof_notify() is done for each port
	udi_cdc_tx_send(port_notify);
    468c:	4b04      	ldr	r3, [pc, #16]	; (46a0 <udi_cdc_data_sof_notify+0x18>)
    468e:	447b      	add	r3, pc
    4690:	781b      	ldrb	r3, [r3, #0]
    4692:	0018      	movs	r0, r3
    4694:	4b03      	ldr	r3, [pc, #12]	; (46a4 <udi_cdc_data_sof_notify+0x1c>)
    4696:	447b      	add	r3, pc
    4698:	4798      	blx	r3
	port_notify++;
	if (port_notify >= UDI_CDC_PORT_NB) {
		port_notify = 0;
	}
#endif
}
    469a:	46c0      	nop			; (mov r8, r8)
    469c:	46bd      	mov	sp, r7
    469e:	bd80      	pop	{r7, pc}
    46a0:	1fffbc5b 	.word	0x1fffbc5b
    46a4:	00000357 	.word	0x00000357

000046a8 <udi_cdc_setup_to_port>:

//-------------------------------------------------
//------- Internal routines to control serial line

static uint8_t udi_cdc_setup_to_port(void)
{
    46a8:	b580      	push	{r7, lr}
    46aa:	b082      	sub	sp, #8
    46ac:	af00      	add	r7, sp, #0
    46ae:	4a0b      	ldr	r2, [pc, #44]	; (46dc <udi_cdc_setup_to_port+0x34>)
    46b0:	447a      	add	r2, pc
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
    46b2:	4b0b      	ldr	r3, [pc, #44]	; (46e0 <udi_cdc_setup_to_port+0x38>)
    46b4:	58d3      	ldr	r3, [r2, r3]
    46b6:	889b      	ldrh	r3, [r3, #4]
    46b8:	001a      	movs	r2, r3
    46ba:	23ff      	movs	r3, #255	; 0xff
    46bc:	4013      	ands	r3, r2
    46be:	d103      	bne.n	46c8 <udi_cdc_setup_to_port+0x20>
#define UDI_CDC_IFACE_COMM_TO_PORT(iface, unused) \
	case UDI_CDC_COMM_IFACE_NUMBER_##iface: \
		port = iface; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_IFACE_COMM_TO_PORT, ~)
    46c0:	1dfb      	adds	r3, r7, #7
    46c2:	2200      	movs	r2, #0
    46c4:	701a      	strb	r2, [r3, #0]
    46c6:	e003      	b.n	46d0 <udi_cdc_setup_to_port+0x28>
#undef UDI_CDC_IFACE_COMM_TO_PORT
	default:
		port = 0;
    46c8:	1dfb      	adds	r3, r7, #7
    46ca:	2200      	movs	r2, #0
    46cc:	701a      	strb	r2, [r3, #0]
		break;
    46ce:	46c0      	nop			; (mov r8, r8)
	}
	return port;
    46d0:	1dfb      	adds	r3, r7, #7
    46d2:	781b      	ldrb	r3, [r3, #0]
}
    46d4:	0018      	movs	r0, r3
    46d6:	46bd      	mov	sp, r7
    46d8:	b002      	add	sp, #8
    46da:	bd80      	pop	{r7, pc}
    46dc:	0000ad80 	.word	0x0000ad80
    46e0:	00000208 	.word	0x00000208

000046e4 <udi_cdc_line_coding_received>:

static void udi_cdc_line_coding_received(void)
{
    46e4:	b590      	push	{r4, r7, lr}
    46e6:	b083      	sub	sp, #12
    46e8:	af00      	add	r7, sp, #0
	uint8_t port = udi_cdc_setup_to_port();
    46ea:	1dfc      	adds	r4, r7, #7
    46ec:	4b04      	ldr	r3, [pc, #16]	; (4700 <udi_cdc_line_coding_received+0x1c>)
    46ee:	447b      	add	r3, pc
    46f0:	4798      	blx	r3
    46f2:	0003      	movs	r3, r0
    46f4:	7023      	strb	r3, [r4, #0]
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
}
    46f6:	46c0      	nop			; (mov r8, r8)
    46f8:	46bd      	mov	sp, r7
    46fa:	b003      	add	sp, #12
    46fc:	bd90      	pop	{r4, r7, pc}
    46fe:	46c0      	nop			; (mov r8, r8)
    4700:	ffffffb7 	.word	0xffffffb7

00004704 <udi_cdc_rx_start>:
//-------------------------------------------------
//------- Internal routines to process data transfer


static bool udi_cdc_rx_start(uint8_t port)
{
    4704:	b5b0      	push	{r4, r5, r7, lr}
    4706:	b088      	sub	sp, #32
    4708:	af02      	add	r7, sp, #8
    470a:	0002      	movs	r2, r0
    470c:	1dfb      	adds	r3, r7, #7
    470e:	701a      	strb	r2, [r3, #0]
    4710:	4c41      	ldr	r4, [pc, #260]	; (4818 <udi_cdc_rx_start+0x114>)
    4712:	447c      	add	r4, pc
	irqflags_t flags;
	uint8_t buf_sel_trans;
	udd_ep_id_t ep;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    4714:	1dfb      	adds	r3, r7, #7
    4716:	2200      	movs	r2, #0
    4718:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    471a:	4b40      	ldr	r3, [pc, #256]	; (481c <udi_cdc_rx_start+0x118>)
    471c:	447b      	add	r3, pc
    471e:	4798      	blx	r3
    4720:	0003      	movs	r3, r0
    4722:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
    4724:	1dfb      	adds	r3, r7, #7
    4726:	781a      	ldrb	r2, [r3, #0]
    4728:	230f      	movs	r3, #15
    472a:	18fb      	adds	r3, r7, r3
    472c:	493c      	ldr	r1, [pc, #240]	; (4820 <udi_cdc_rx_start+0x11c>)
    472e:	4479      	add	r1, pc
    4730:	5c8a      	ldrb	r2, [r1, r2]
    4732:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_rx_trans_ongoing[port] ||
    4734:	1dfb      	adds	r3, r7, #7
    4736:	781b      	ldrb	r3, [r3, #0]
    4738:	4a3a      	ldr	r2, [pc, #232]	; (4824 <udi_cdc_rx_start+0x120>)
    473a:	447a      	add	r2, pc
    473c:	5cd3      	ldrb	r3, [r2, r3]
    473e:	b2db      	uxtb	r3, r3
    4740:	2b00      	cmp	r3, #0
    4742:	d114      	bne.n	476e <udi_cdc_rx_start+0x6a>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
    4744:	1dfb      	adds	r3, r7, #7
    4746:	781a      	ldrb	r2, [r3, #0]
    4748:	4b37      	ldr	r3, [pc, #220]	; (4828 <udi_cdc_rx_start+0x124>)
    474a:	447b      	add	r3, pc
    474c:	0052      	lsls	r2, r2, #1
    474e:	5ad3      	ldrh	r3, [r2, r3]
    4750:	b29a      	uxth	r2, r3
    4752:	1dfb      	adds	r3, r7, #7
    4754:	7818      	ldrb	r0, [r3, #0]
    4756:	230f      	movs	r3, #15
    4758:	18fb      	adds	r3, r7, r3
    475a:	7819      	ldrb	r1, [r3, #0]
    475c:	4b33      	ldr	r3, [pc, #204]	; (482c <udi_cdc_rx_start+0x128>)
    475e:	447b      	add	r3, pc
    4760:	0040      	lsls	r0, r0, #1
    4762:	1841      	adds	r1, r0, r1
    4764:	0049      	lsls	r1, r1, #1
    4766:	5acb      	ldrh	r3, [r1, r3]
    4768:	b29b      	uxth	r3, r3
	if (udi_cdc_rx_trans_ongoing[port] ||
    476a:	429a      	cmp	r2, r3
    476c:	d206      	bcs.n	477c <udi_cdc_rx_start+0x78>
		// Transfer already on-going or current buffer no empty
		cpu_irq_restore(flags);
    476e:	693b      	ldr	r3, [r7, #16]
    4770:	0018      	movs	r0, r3
    4772:	4b2f      	ldr	r3, [pc, #188]	; (4830 <udi_cdc_rx_start+0x12c>)
    4774:	447b      	add	r3, pc
    4776:	4798      	blx	r3
		return false;
    4778:	2300      	movs	r3, #0
    477a:	e048      	b.n	480e <udi_cdc_rx_start+0x10a>
	}

	// Change current buffer
	udi_cdc_rx_pos[port] = 0;
    477c:	1dfb      	adds	r3, r7, #7
    477e:	781a      	ldrb	r2, [r3, #0]
    4780:	4b2c      	ldr	r3, [pc, #176]	; (4834 <udi_cdc_rx_start+0x130>)
    4782:	447b      	add	r3, pc
    4784:	0052      	lsls	r2, r2, #1
    4786:	2100      	movs	r1, #0
    4788:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    478a:	1dfb      	adds	r3, r7, #7
    478c:	781b      	ldrb	r3, [r3, #0]
    478e:	220f      	movs	r2, #15
    4790:	18ba      	adds	r2, r7, r2
    4792:	7812      	ldrb	r2, [r2, #0]
    4794:	4251      	negs	r1, r2
    4796:	414a      	adcs	r2, r1
    4798:	b2d2      	uxtb	r2, r2
    479a:	0011      	movs	r1, r2
    479c:	4a26      	ldr	r2, [pc, #152]	; (4838 <udi_cdc_rx_start+0x134>)
    479e:	447a      	add	r2, pc
    47a0:	54d1      	strb	r1, [r2, r3]

	// Start transfer on RX
	udi_cdc_rx_trans_ongoing[port] = true;
    47a2:	1dfb      	adds	r3, r7, #7
    47a4:	781b      	ldrb	r3, [r3, #0]
    47a6:	4a25      	ldr	r2, [pc, #148]	; (483c <udi_cdc_rx_start+0x138>)
    47a8:	447a      	add	r2, pc
    47aa:	2101      	movs	r1, #1
    47ac:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    47ae:	693b      	ldr	r3, [r7, #16]
    47b0:	0018      	movs	r0, r3
    47b2:	4b23      	ldr	r3, [pc, #140]	; (4840 <udi_cdc_rx_start+0x13c>)
    47b4:	447b      	add	r3, pc
    47b6:	4798      	blx	r3

	if (udi_cdc_multi_is_rx_ready(port)) {
    47b8:	1dfb      	adds	r3, r7, #7
    47ba:	781b      	ldrb	r3, [r3, #0]
    47bc:	0018      	movs	r0, r3
    47be:	4b21      	ldr	r3, [pc, #132]	; (4844 <udi_cdc_rx_start+0x140>)
    47c0:	58e3      	ldr	r3, [r4, r3]
    47c2:	4798      	blx	r3
		UDI_CDC_RX_NOTIFY(port);
	}
	// Send the buffer with enable of short packet
	switch (port) {
    47c4:	1dfb      	adds	r3, r7, #7
    47c6:	781b      	ldrb	r3, [r3, #0]
    47c8:	2b00      	cmp	r3, #0
    47ca:	d104      	bne.n	47d6 <udi_cdc_rx_start+0xd2>
#define UDI_CDC_PORT_TO_DATA_EP_OUT(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_OUT_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
    47cc:	2317      	movs	r3, #23
    47ce:	18fb      	adds	r3, r7, r3
    47d0:	2202      	movs	r2, #2
    47d2:	701a      	strb	r2, [r3, #0]
    47d4:	e004      	b.n	47e0 <udi_cdc_rx_start+0xdc>
#undef UDI_CDC_PORT_TO_DATA_EP_OUT
	default:
		ep = UDI_CDC_DATA_EP_OUT_0;
    47d6:	2317      	movs	r3, #23
    47d8:	18fb      	adds	r3, r7, r3
    47da:	2202      	movs	r2, #2
    47dc:	701a      	strb	r2, [r3, #0]
		break;
    47de:	46c0      	nop			; (mov r8, r8)
	}
	return udd_ep_run(ep,
			true,
			udi_cdc_rx_buf[port][buf_sel_trans],
    47e0:	1dfb      	adds	r3, r7, #7
    47e2:	781a      	ldrb	r2, [r3, #0]
    47e4:	230f      	movs	r3, #15
    47e6:	18fb      	adds	r3, r7, r3
    47e8:	781b      	ldrb	r3, [r3, #0]
    47ea:	0052      	lsls	r2, r2, #1
    47ec:	18d3      	adds	r3, r2, r3
    47ee:	019b      	lsls	r3, r3, #6
    47f0:	4a15      	ldr	r2, [pc, #84]	; (4848 <udi_cdc_rx_start+0x144>)
    47f2:	447a      	add	r2, pc
    47f4:	189a      	adds	r2, r3, r2
	return udd_ep_run(ep,
    47f6:	2317      	movs	r3, #23
    47f8:	18fb      	adds	r3, r7, r3
    47fa:	7818      	ldrb	r0, [r3, #0]
    47fc:	4b13      	ldr	r3, [pc, #76]	; (484c <udi_cdc_rx_start+0x148>)
    47fe:	447b      	add	r3, pc
    4800:	9300      	str	r3, [sp, #0]
    4802:	2340      	movs	r3, #64	; 0x40
    4804:	2101      	movs	r1, #1
    4806:	4d12      	ldr	r5, [pc, #72]	; (4850 <udi_cdc_rx_start+0x14c>)
    4808:	5964      	ldr	r4, [r4, r5]
    480a:	47a0      	blx	r4
    480c:	0003      	movs	r3, r0
			UDI_CDC_RX_BUFFERS,
			udi_cdc_data_received);
}
    480e:	0018      	movs	r0, r3
    4810:	46bd      	mov	sp, r7
    4812:	b006      	add	sp, #24
    4814:	bdb0      	pop	{r4, r5, r7, pc}
    4816:	46c0      	nop			; (mov r8, r8)
    4818:	0000ad1e 	.word	0x0000ad1e
    481c:	fffffa6d 	.word	0xfffffa6d
    4820:	1fffbb1e 	.word	0x1fffbb1e
    4824:	1fffbb1a 	.word	0x1fffbb1a
    4828:	1fffbb06 	.word	0x1fffbb06
    482c:	1fffbaea 	.word	0x1fffbaea
    4830:	fffffa69 	.word	0xfffffa69
    4834:	1fffbace 	.word	0x1fffbace
    4838:	1fffbaae 	.word	0x1fffbaae
    483c:	1fffbaac 	.word	0x1fffbaac
    4840:	fffffa29 	.word	0xfffffa29
    4844:	000001d4 	.word	0x000001d4
    4848:	1fffb9d6 	.word	0x1fffb9d6
    484c:	00000053 	.word	0x00000053
    4850:	00000094 	.word	0x00000094

00004854 <udi_cdc_data_received>:


static void udi_cdc_data_received(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    4854:	b5b0      	push	{r4, r5, r7, lr}
    4856:	b086      	sub	sp, #24
    4858:	af02      	add	r7, sp, #8
    485a:	6039      	str	r1, [r7, #0]
    485c:	0011      	movs	r1, r2
    485e:	1dfb      	adds	r3, r7, #7
    4860:	1c02      	adds	r2, r0, #0
    4862:	701a      	strb	r2, [r3, #0]
    4864:	1dbb      	adds	r3, r7, #6
    4866:	1c0a      	adds	r2, r1, #0
    4868:	701a      	strb	r2, [r3, #0]
    486a:	4d2e      	ldr	r5, [pc, #184]	; (4924 <udi_cdc_data_received+0xd0>)
    486c:	447d      	add	r5, pc
	uint8_t buf_sel_trans;
	uint8_t port;

	switch (ep) {
    486e:	1dbb      	adds	r3, r7, #6
    4870:	781b      	ldrb	r3, [r3, #0]
    4872:	2b02      	cmp	r3, #2
    4874:	d104      	bne.n	4880 <udi_cdc_data_received+0x2c>
#define UDI_CDC_DATA_EP_OUT_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_OUT_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_OUT_TO_PORT, ~)
    4876:	230f      	movs	r3, #15
    4878:	18fb      	adds	r3, r7, r3
    487a:	2200      	movs	r2, #0
    487c:	701a      	strb	r2, [r3, #0]
    487e:	e004      	b.n	488a <udi_cdc_data_received+0x36>
#undef UDI_CDC_DATA_EP_OUT_TO_PORT
	default:
		port = 0;
    4880:	230f      	movs	r3, #15
    4882:	18fb      	adds	r3, r7, r3
    4884:	2200      	movs	r2, #0
    4886:	701a      	strb	r2, [r3, #0]
		break;
    4888:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    488a:	1dfb      	adds	r3, r7, #7
    488c:	781b      	ldrb	r3, [r3, #0]
    488e:	2b00      	cmp	r3, #0
    4890:	d144      	bne.n	491c <udi_cdc_data_received+0xc8>
		// Abort reception
		return;
	}
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
    4892:	230f      	movs	r3, #15
    4894:	18fb      	adds	r3, r7, r3
    4896:	781b      	ldrb	r3, [r3, #0]
    4898:	4a23      	ldr	r2, [pc, #140]	; (4928 <udi_cdc_data_received+0xd4>)
    489a:	447a      	add	r2, pc
    489c:	5cd3      	ldrb	r3, [r2, r3]
    489e:	b2db      	uxtb	r3, r3
    48a0:	425a      	negs	r2, r3
    48a2:	4153      	adcs	r3, r2
    48a4:	b2da      	uxtb	r2, r3
    48a6:	230e      	movs	r3, #14
    48a8:	18fb      	adds	r3, r7, r3
    48aa:	701a      	strb	r2, [r3, #0]
	if (!n) {
    48ac:	683b      	ldr	r3, [r7, #0]
    48ae:	2b00      	cmp	r3, #0
    48b0:	d116      	bne.n	48e0 <udi_cdc_data_received+0x8c>
		udd_ep_run( ep,
				true,
				udi_cdc_rx_buf[port][buf_sel_trans],
    48b2:	230f      	movs	r3, #15
    48b4:	18fb      	adds	r3, r7, r3
    48b6:	781a      	ldrb	r2, [r3, #0]
    48b8:	230e      	movs	r3, #14
    48ba:	18fb      	adds	r3, r7, r3
    48bc:	781b      	ldrb	r3, [r3, #0]
    48be:	0052      	lsls	r2, r2, #1
    48c0:	18d3      	adds	r3, r2, r3
    48c2:	019b      	lsls	r3, r3, #6
    48c4:	4a19      	ldr	r2, [pc, #100]	; (492c <udi_cdc_data_received+0xd8>)
    48c6:	447a      	add	r2, pc
    48c8:	189a      	adds	r2, r3, r2
		udd_ep_run( ep,
    48ca:	1dbb      	adds	r3, r7, #6
    48cc:	7818      	ldrb	r0, [r3, #0]
    48ce:	4b18      	ldr	r3, [pc, #96]	; (4930 <udi_cdc_data_received+0xdc>)
    48d0:	447b      	add	r3, pc
    48d2:	9300      	str	r3, [sp, #0]
    48d4:	2340      	movs	r3, #64	; 0x40
    48d6:	2101      	movs	r1, #1
    48d8:	4c16      	ldr	r4, [pc, #88]	; (4934 <udi_cdc_data_received+0xe0>)
    48da:	592c      	ldr	r4, [r5, r4]
    48dc:	47a0      	blx	r4
				UDI_CDC_RX_BUFFERS,
				udi_cdc_data_received);
		return;
    48de:	e01e      	b.n	491e <udi_cdc_data_received+0xca>
	}
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
    48e0:	230f      	movs	r3, #15
    48e2:	18fb      	adds	r3, r7, r3
    48e4:	7819      	ldrb	r1, [r3, #0]
    48e6:	230e      	movs	r3, #14
    48e8:	18fb      	adds	r3, r7, r3
    48ea:	781a      	ldrb	r2, [r3, #0]
    48ec:	683b      	ldr	r3, [r7, #0]
    48ee:	b298      	uxth	r0, r3
    48f0:	4b11      	ldr	r3, [pc, #68]	; (4938 <udi_cdc_data_received+0xe4>)
    48f2:	447b      	add	r3, pc
    48f4:	0049      	lsls	r1, r1, #1
    48f6:	188a      	adds	r2, r1, r2
    48f8:	0052      	lsls	r2, r2, #1
    48fa:	1c01      	adds	r1, r0, #0
    48fc:	52d1      	strh	r1, [r2, r3]
	udi_cdc_rx_trans_ongoing[port] = false;
    48fe:	230f      	movs	r3, #15
    4900:	18fb      	adds	r3, r7, r3
    4902:	781b      	ldrb	r3, [r3, #0]
    4904:	4a0d      	ldr	r2, [pc, #52]	; (493c <udi_cdc_data_received+0xe8>)
    4906:	447a      	add	r2, pc
    4908:	2100      	movs	r1, #0
    490a:	54d1      	strb	r1, [r2, r3]
	udi_cdc_rx_start(port);
    490c:	230f      	movs	r3, #15
    490e:	18fb      	adds	r3, r7, r3
    4910:	781b      	ldrb	r3, [r3, #0]
    4912:	0018      	movs	r0, r3
    4914:	4b0a      	ldr	r3, [pc, #40]	; (4940 <udi_cdc_data_received+0xec>)
    4916:	447b      	add	r3, pc
    4918:	4798      	blx	r3
    491a:	e000      	b.n	491e <udi_cdc_data_received+0xca>
		return;
    491c:	46c0      	nop			; (mov r8, r8)
}
    491e:	46bd      	mov	sp, r7
    4920:	b004      	add	sp, #16
    4922:	bdb0      	pop	{r4, r5, r7, pc}
    4924:	0000abc4 	.word	0x0000abc4
    4928:	1fffb9b2 	.word	0x1fffb9b2
    492c:	1fffb902 	.word	0x1fffb902
    4930:	ffffff81 	.word	0xffffff81
    4934:	00000094 	.word	0x00000094
    4938:	1fffb956 	.word	0x1fffb956
    493c:	1fffb94e 	.word	0x1fffb94e
    4940:	fffffdeb 	.word	0xfffffdeb

00004944 <udi_cdc_data_sent>:


static void udi_cdc_data_sent(udd_ep_status_t status, iram_size_t n, udd_ep_id_t ep)
{
    4944:	b580      	push	{r7, lr}
    4946:	b084      	sub	sp, #16
    4948:	af00      	add	r7, sp, #0
    494a:	6039      	str	r1, [r7, #0]
    494c:	0011      	movs	r1, r2
    494e:	1dfb      	adds	r3, r7, #7
    4950:	1c02      	adds	r2, r0, #0
    4952:	701a      	strb	r2, [r3, #0]
    4954:	1dbb      	adds	r3, r7, #6
    4956:	1c0a      	adds	r2, r1, #0
    4958:	701a      	strb	r2, [r3, #0]
	uint8_t port;
	UNUSED(n);

	switch (ep) {
    495a:	1dbb      	adds	r3, r7, #6
    495c:	781b      	ldrb	r3, [r3, #0]
    495e:	2b81      	cmp	r3, #129	; 0x81
    4960:	d104      	bne.n	496c <udi_cdc_data_sent+0x28>
#define UDI_CDC_DATA_EP_IN_TO_PORT(index, unused) \
	case UDI_CDC_DATA_EP_IN_##index: \
		port = index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_DATA_EP_IN_TO_PORT, ~)
    4962:	230f      	movs	r3, #15
    4964:	18fb      	adds	r3, r7, r3
    4966:	2200      	movs	r2, #0
    4968:	701a      	strb	r2, [r3, #0]
    496a:	e004      	b.n	4976 <udi_cdc_data_sent+0x32>
#undef UDI_CDC_DATA_EP_IN_TO_PORT
	default:
		port = 0;
    496c:	230f      	movs	r3, #15
    496e:	18fb      	adds	r3, r7, r3
    4970:	2200      	movs	r2, #0
    4972:	701a      	strb	r2, [r3, #0]
		break;
    4974:	46c0      	nop			; (mov r8, r8)
	}

	if (UDD_EP_TRANSFER_OK != status) {
    4976:	1dfb      	adds	r3, r7, #7
    4978:	781b      	ldrb	r3, [r3, #0]
    497a:	2b00      	cmp	r3, #0
    497c:	d12a      	bne.n	49d4 <udi_cdc_data_sent+0x90>
		// Abort transfer
		return;
	}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
    497e:	230f      	movs	r3, #15
    4980:	18fb      	adds	r3, r7, r3
    4982:	781a      	ldrb	r2, [r3, #0]
    4984:	230f      	movs	r3, #15
    4986:	18fb      	adds	r3, r7, r3
    4988:	781b      	ldrb	r3, [r3, #0]
    498a:	4914      	ldr	r1, [pc, #80]	; (49dc <udi_cdc_data_sent+0x98>)
    498c:	4479      	add	r1, pc
    498e:	5ccb      	ldrb	r3, [r1, r3]
    4990:	b2db      	uxtb	r3, r3
    4992:	4259      	negs	r1, r3
    4994:	414b      	adcs	r3, r1
    4996:	b2db      	uxtb	r3, r3
    4998:	0019      	movs	r1, r3
    499a:	4b11      	ldr	r3, [pc, #68]	; (49e0 <udi_cdc_data_sent+0x9c>)
    499c:	447b      	add	r3, pc
    499e:	0052      	lsls	r2, r2, #1
    49a0:	1852      	adds	r2, r2, r1
    49a2:	0052      	lsls	r2, r2, #1
    49a4:	2100      	movs	r1, #0
    49a6:	52d1      	strh	r1, [r2, r3]
	udi_cdc_tx_both_buf_to_send[port] = false;
    49a8:	230f      	movs	r3, #15
    49aa:	18fb      	adds	r3, r7, r3
    49ac:	781b      	ldrb	r3, [r3, #0]
    49ae:	4a0d      	ldr	r2, [pc, #52]	; (49e4 <udi_cdc_data_sent+0xa0>)
    49b0:	447a      	add	r2, pc
    49b2:	2100      	movs	r1, #0
    49b4:	54d1      	strb	r1, [r2, r3]
	udi_cdc_tx_trans_ongoing[port] = false;
    49b6:	230f      	movs	r3, #15
    49b8:	18fb      	adds	r3, r7, r3
    49ba:	781b      	ldrb	r3, [r3, #0]
    49bc:	4a0a      	ldr	r2, [pc, #40]	; (49e8 <udi_cdc_data_sent+0xa4>)
    49be:	447a      	add	r2, pc
    49c0:	2100      	movs	r1, #0
    49c2:	54d1      	strb	r1, [r2, r3]

	if (n != 0) {
		UDI_CDC_TX_EMPTY_NOTIFY(port);
	}
	udi_cdc_tx_send(port);
    49c4:	230f      	movs	r3, #15
    49c6:	18fb      	adds	r3, r7, r3
    49c8:	781b      	ldrb	r3, [r3, #0]
    49ca:	0018      	movs	r0, r3
    49cc:	4b07      	ldr	r3, [pc, #28]	; (49ec <udi_cdc_data_sent+0xa8>)
    49ce:	447b      	add	r3, pc
    49d0:	4798      	blx	r3
    49d2:	e000      	b.n	49d6 <udi_cdc_data_sent+0x92>
		return;
    49d4:	46c0      	nop			; (mov r8, r8)
}
    49d6:	46bd      	mov	sp, r7
    49d8:	b004      	add	sp, #16
    49da:	bd80      	pop	{r7, pc}
    49dc:	1fffb950 	.word	0x1fffb950
    49e0:	1fffb93c 	.word	0x1fffb93c
    49e4:	1fffb938 	.word	0x1fffb938
    49e8:	1fffb926 	.word	0x1fffb926
    49ec:	0000001f 	.word	0x0000001f

000049f0 <udi_cdc_tx_send>:


static void udi_cdc_tx_send(uint8_t port)
{
    49f0:	b5b0      	push	{r4, r5, r7, lr}
    49f2:	b088      	sub	sp, #32
    49f4:	af02      	add	r7, sp, #8
    49f6:	0002      	movs	r2, r0
    49f8:	1dfb      	adds	r3, r7, #7
    49fa:	701a      	strb	r2, [r3, #0]
    49fc:	4c89      	ldr	r4, [pc, #548]	; (4c24 <udi_cdc_tx_send+0x234>)
    49fe:	447c      	add	r4, pc
	bool b_short_packet;
	udd_ep_id_t ep;
	static uint16_t sof_zlp_counter = 0;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    4a00:	1dfb      	adds	r3, r7, #7
    4a02:	2200      	movs	r2, #0
    4a04:	701a      	strb	r2, [r3, #0]
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
    4a06:	1dfb      	adds	r3, r7, #7
    4a08:	781b      	ldrb	r3, [r3, #0]
    4a0a:	4a87      	ldr	r2, [pc, #540]	; (4c28 <udi_cdc_tx_send+0x238>)
    4a0c:	447a      	add	r2, pc
    4a0e:	5cd3      	ldrb	r3, [r2, r3]
    4a10:	b2db      	uxtb	r3, r3
    4a12:	2b00      	cmp	r3, #0
    4a14:	d000      	beq.n	4a18 <udi_cdc_tx_send+0x28>
    4a16:	e0fe      	b.n	4c16 <udi_cdc_tx_send+0x226>
		return; // Already on going or wait next SOF to send next data
	}
	if (udd_is_high_speed()) {
    4a18:	4b84      	ldr	r3, [pc, #528]	; (4c2c <udi_cdc_tx_send+0x23c>)
    4a1a:	58e3      	ldr	r3, [r4, r3]
    4a1c:	4798      	blx	r3
    4a1e:	1e03      	subs	r3, r0, #0
    4a20:	d00c      	beq.n	4a3c <udi_cdc_tx_send+0x4c>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
    4a22:	1dfb      	adds	r3, r7, #7
    4a24:	781a      	ldrb	r2, [r3, #0]
    4a26:	4b82      	ldr	r3, [pc, #520]	; (4c30 <udi_cdc_tx_send+0x240>)
    4a28:	447b      	add	r3, pc
    4a2a:	0052      	lsls	r2, r2, #1
    4a2c:	5ad5      	ldrh	r5, [r2, r3]
    4a2e:	4b81      	ldr	r3, [pc, #516]	; (4c34 <udi_cdc_tx_send+0x244>)
    4a30:	58e3      	ldr	r3, [r4, r3]
    4a32:	4798      	blx	r3
    4a34:	0003      	movs	r3, r0
    4a36:	429d      	cmp	r5, r3
    4a38:	d10d      	bne.n	4a56 <udi_cdc_tx_send+0x66>
			return; // Wait next SOF to send next data
    4a3a:	e0ef      	b.n	4c1c <udi_cdc_tx_send+0x22c>
		}
	}else{
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
    4a3c:	1dfb      	adds	r3, r7, #7
    4a3e:	781a      	ldrb	r2, [r3, #0]
    4a40:	4b7d      	ldr	r3, [pc, #500]	; (4c38 <udi_cdc_tx_send+0x248>)
    4a42:	447b      	add	r3, pc
    4a44:	0052      	lsls	r2, r2, #1
    4a46:	5ad5      	ldrh	r5, [r2, r3]
    4a48:	4b7c      	ldr	r3, [pc, #496]	; (4c3c <udi_cdc_tx_send+0x24c>)
    4a4a:	58e3      	ldr	r3, [r4, r3]
    4a4c:	4798      	blx	r3
    4a4e:	0003      	movs	r3, r0
    4a50:	429d      	cmp	r5, r3
    4a52:	d100      	bne.n	4a56 <udi_cdc_tx_send+0x66>
    4a54:	e0e1      	b.n	4c1a <udi_cdc_tx_send+0x22a>
			return; // Wait next SOF to send next data
		}
	}

	flags = cpu_irq_save(); // to protect udi_cdc_tx_buf_sel
    4a56:	4b7a      	ldr	r3, [pc, #488]	; (4c40 <udi_cdc_tx_send+0x250>)
    4a58:	447b      	add	r3, pc
    4a5a:	4798      	blx	r3
    4a5c:	0003      	movs	r3, r0
    4a5e:	613b      	str	r3, [r7, #16]
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
    4a60:	1dfb      	adds	r3, r7, #7
    4a62:	781a      	ldrb	r2, [r3, #0]
    4a64:	2317      	movs	r3, #23
    4a66:	18fb      	adds	r3, r7, r3
    4a68:	4976      	ldr	r1, [pc, #472]	; (4c44 <udi_cdc_tx_send+0x254>)
    4a6a:	4479      	add	r1, pc
    4a6c:	5c8a      	ldrb	r2, [r1, r2]
    4a6e:	701a      	strb	r2, [r3, #0]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
    4a70:	1dfb      	adds	r3, r7, #7
    4a72:	7819      	ldrb	r1, [r3, #0]
    4a74:	2317      	movs	r3, #23
    4a76:	18fb      	adds	r3, r7, r3
    4a78:	781a      	ldrb	r2, [r3, #0]
    4a7a:	4b73      	ldr	r3, [pc, #460]	; (4c48 <udi_cdc_tx_send+0x258>)
    4a7c:	447b      	add	r3, pc
    4a7e:	0049      	lsls	r1, r1, #1
    4a80:	188a      	adds	r2, r1, r2
    4a82:	0052      	lsls	r2, r2, #1
    4a84:	5ad3      	ldrh	r3, [r2, r3]
    4a86:	2b00      	cmp	r3, #0
    4a88:	d127      	bne.n	4ada <udi_cdc_tx_send+0xea>
		sof_zlp_counter++;
    4a8a:	4b70      	ldr	r3, [pc, #448]	; (4c4c <udi_cdc_tx_send+0x25c>)
    4a8c:	447b      	add	r3, pc
    4a8e:	881b      	ldrh	r3, [r3, #0]
    4a90:	3301      	adds	r3, #1
    4a92:	b29a      	uxth	r2, r3
    4a94:	4b6e      	ldr	r3, [pc, #440]	; (4c50 <udi_cdc_tx_send+0x260>)
    4a96:	447b      	add	r3, pc
    4a98:	801a      	strh	r2, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
    4a9a:	4b64      	ldr	r3, [pc, #400]	; (4c2c <udi_cdc_tx_send+0x23c>)
    4a9c:	58e3      	ldr	r3, [r4, r3]
    4a9e:	4798      	blx	r3
    4aa0:	0003      	movs	r3, r0
    4aa2:	001a      	movs	r2, r3
    4aa4:	2301      	movs	r3, #1
    4aa6:	4053      	eors	r3, r2
    4aa8:	b2db      	uxtb	r3, r3
    4aaa:	2b00      	cmp	r3, #0
    4aac:	d004      	beq.n	4ab8 <udi_cdc_tx_send+0xc8>
    4aae:	4b69      	ldr	r3, [pc, #420]	; (4c54 <udi_cdc_tx_send+0x264>)
    4ab0:	447b      	add	r3, pc
    4ab2:	881b      	ldrh	r3, [r3, #0]
    4ab4:	2b63      	cmp	r3, #99	; 0x63
    4ab6:	d90a      	bls.n	4ace <udi_cdc_tx_send+0xde>
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
    4ab8:	4b5c      	ldr	r3, [pc, #368]	; (4c2c <udi_cdc_tx_send+0x23c>)
    4aba:	58e3      	ldr	r3, [r4, r3]
    4abc:	4798      	blx	r3
    4abe:	1e03      	subs	r3, r0, #0
    4ac0:	d00b      	beq.n	4ada <udi_cdc_tx_send+0xea>
    4ac2:	4b65      	ldr	r3, [pc, #404]	; (4c58 <udi_cdc_tx_send+0x268>)
    4ac4:	447b      	add	r3, pc
    4ac6:	881b      	ldrh	r3, [r3, #0]
    4ac8:	4a64      	ldr	r2, [pc, #400]	; (4c5c <udi_cdc_tx_send+0x26c>)
    4aca:	4293      	cmp	r3, r2
    4acc:	d805      	bhi.n	4ada <udi_cdc_tx_send+0xea>
			cpu_irq_restore(flags);
    4ace:	693b      	ldr	r3, [r7, #16]
    4ad0:	0018      	movs	r0, r3
    4ad2:	4b63      	ldr	r3, [pc, #396]	; (4c60 <udi_cdc_tx_send+0x270>)
    4ad4:	447b      	add	r3, pc
    4ad6:	4798      	blx	r3
			return;
    4ad8:	e0a0      	b.n	4c1c <udi_cdc_tx_send+0x22c>
		}
	}
	sof_zlp_counter = 0;
    4ada:	4b62      	ldr	r3, [pc, #392]	; (4c64 <udi_cdc_tx_send+0x274>)
    4adc:	447b      	add	r3, pc
    4ade:	2200      	movs	r2, #0
    4ae0:	801a      	strh	r2, [r3, #0]

	if (!udi_cdc_tx_both_buf_to_send[port]) {
    4ae2:	1dfb      	adds	r3, r7, #7
    4ae4:	781b      	ldrb	r3, [r3, #0]
    4ae6:	4a60      	ldr	r2, [pc, #384]	; (4c68 <udi_cdc_tx_send+0x278>)
    4ae8:	447a      	add	r2, pc
    4aea:	5cd3      	ldrb	r3, [r2, r3]
    4aec:	b2db      	uxtb	r3, r3
    4aee:	2201      	movs	r2, #1
    4af0:	4053      	eors	r3, r2
    4af2:	b2db      	uxtb	r3, r3
    4af4:	2b00      	cmp	r3, #0
    4af6:	d00c      	beq.n	4b12 <udi_cdc_tx_send+0x122>
		// Send current Buffer
		// and switch the current buffer
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
    4af8:	1dfb      	adds	r3, r7, #7
    4afa:	781b      	ldrb	r3, [r3, #0]
    4afc:	2217      	movs	r2, #23
    4afe:	18ba      	adds	r2, r7, r2
    4b00:	7812      	ldrb	r2, [r2, #0]
    4b02:	4251      	negs	r1, r2
    4b04:	414a      	adcs	r2, r1
    4b06:	b2d2      	uxtb	r2, r2
    4b08:	0011      	movs	r1, r2
    4b0a:	4a58      	ldr	r2, [pc, #352]	; (4c6c <udi_cdc_tx_send+0x27c>)
    4b0c:	447a      	add	r2, pc
    4b0e:	54d1      	strb	r1, [r2, r3]
    4b10:	e008      	b.n	4b24 <udi_cdc_tx_send+0x134>
	}else{
		// Send the other Buffer
		// and no switch the current buffer
		buf_sel_trans = (buf_sel_trans==0)?1:0;
    4b12:	2317      	movs	r3, #23
    4b14:	18fb      	adds	r3, r7, r3
    4b16:	781b      	ldrb	r3, [r3, #0]
    4b18:	425a      	negs	r2, r3
    4b1a:	4153      	adcs	r3, r2
    4b1c:	b2da      	uxtb	r2, r3
    4b1e:	2317      	movs	r3, #23
    4b20:	18fb      	adds	r3, r7, r3
    4b22:	701a      	strb	r2, [r3, #0]
	}
	udi_cdc_tx_trans_ongoing[port] = true;
    4b24:	1dfb      	adds	r3, r7, #7
    4b26:	781b      	ldrb	r3, [r3, #0]
    4b28:	4a51      	ldr	r2, [pc, #324]	; (4c70 <udi_cdc_tx_send+0x280>)
    4b2a:	447a      	add	r2, pc
    4b2c:	2101      	movs	r1, #1
    4b2e:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
    4b30:	693b      	ldr	r3, [r7, #16]
    4b32:	0018      	movs	r0, r3
    4b34:	4b4f      	ldr	r3, [pc, #316]	; (4c74 <udi_cdc_tx_send+0x284>)
    4b36:	447b      	add	r3, pc
    4b38:	4798      	blx	r3

	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
    4b3a:	1dfb      	adds	r3, r7, #7
    4b3c:	7819      	ldrb	r1, [r3, #0]
    4b3e:	2317      	movs	r3, #23
    4b40:	18fb      	adds	r3, r7, r3
    4b42:	781a      	ldrb	r2, [r3, #0]
    4b44:	4b4c      	ldr	r3, [pc, #304]	; (4c78 <udi_cdc_tx_send+0x288>)
    4b46:	447b      	add	r3, pc
    4b48:	0049      	lsls	r1, r1, #1
    4b4a:	188a      	adds	r2, r1, r2
    4b4c:	0052      	lsls	r2, r2, #1
    4b4e:	5ad2      	ldrh	r2, [r2, r3]
    4b50:	230f      	movs	r3, #15
    4b52:	18fb      	adds	r3, r7, r3
    4b54:	3a40      	subs	r2, #64	; 0x40
    4b56:	1e51      	subs	r1, r2, #1
    4b58:	418a      	sbcs	r2, r1
    4b5a:	701a      	strb	r2, [r3, #0]
	if (b_short_packet) {
    4b5c:	230f      	movs	r3, #15
    4b5e:	18fb      	adds	r3, r7, r3
    4b60:	781b      	ldrb	r3, [r3, #0]
    4b62:	2b00      	cmp	r3, #0
    4b64:	d01c      	beq.n	4ba0 <udi_cdc_tx_send+0x1b0>
		if (udd_is_high_speed()) {
    4b66:	4b31      	ldr	r3, [pc, #196]	; (4c2c <udi_cdc_tx_send+0x23c>)
    4b68:	58e3      	ldr	r3, [r4, r3]
    4b6a:	4798      	blx	r3
    4b6c:	1e03      	subs	r3, r0, #0
    4b6e:	d00b      	beq.n	4b88 <udi_cdc_tx_send+0x198>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
    4b70:	1dfb      	adds	r3, r7, #7
    4b72:	781d      	ldrb	r5, [r3, #0]
    4b74:	4b2f      	ldr	r3, [pc, #188]	; (4c34 <udi_cdc_tx_send+0x244>)
    4b76:	58e3      	ldr	r3, [r4, r3]
    4b78:	4798      	blx	r3
    4b7a:	0003      	movs	r3, r0
    4b7c:	0019      	movs	r1, r3
    4b7e:	4b3f      	ldr	r3, [pc, #252]	; (4c7c <udi_cdc_tx_send+0x28c>)
    4b80:	447b      	add	r3, pc
    4b82:	006a      	lsls	r2, r5, #1
    4b84:	52d1      	strh	r1, [r2, r3]
    4b86:	e012      	b.n	4bae <udi_cdc_tx_send+0x1be>
		}else{
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
    4b88:	1dfb      	adds	r3, r7, #7
    4b8a:	781d      	ldrb	r5, [r3, #0]
    4b8c:	4b2b      	ldr	r3, [pc, #172]	; (4c3c <udi_cdc_tx_send+0x24c>)
    4b8e:	58e3      	ldr	r3, [r4, r3]
    4b90:	4798      	blx	r3
    4b92:	0003      	movs	r3, r0
    4b94:	0019      	movs	r1, r3
    4b96:	4b3a      	ldr	r3, [pc, #232]	; (4c80 <udi_cdc_tx_send+0x290>)
    4b98:	447b      	add	r3, pc
    4b9a:	006a      	lsls	r2, r5, #1
    4b9c:	52d1      	strh	r1, [r2, r3]
    4b9e:	e006      	b.n	4bae <udi_cdc_tx_send+0x1be>
		}
	}else{
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
    4ba0:	1dfb      	adds	r3, r7, #7
    4ba2:	781a      	ldrb	r2, [r3, #0]
    4ba4:	4b37      	ldr	r3, [pc, #220]	; (4c84 <udi_cdc_tx_send+0x294>)
    4ba6:	447b      	add	r3, pc
    4ba8:	0052      	lsls	r2, r2, #1
    4baa:	2100      	movs	r1, #0
    4bac:	52d1      	strh	r1, [r2, r3]
	}

	// Send the buffer with enable of short packet
	switch (port) {
    4bae:	1dfb      	adds	r3, r7, #7
    4bb0:	781b      	ldrb	r3, [r3, #0]
    4bb2:	2b00      	cmp	r3, #0
    4bb4:	d104      	bne.n	4bc0 <udi_cdc_tx_send+0x1d0>
#define UDI_CDC_PORT_TO_DATA_EP_IN(index, unused) \
	case index: \
		ep = UDI_CDC_DATA_EP_IN_##index; \
		break;
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
    4bb6:	2316      	movs	r3, #22
    4bb8:	18fb      	adds	r3, r7, r3
    4bba:	2281      	movs	r2, #129	; 0x81
    4bbc:	701a      	strb	r2, [r3, #0]
    4bbe:	e004      	b.n	4bca <udi_cdc_tx_send+0x1da>
#undef UDI_CDC_PORT_TO_DATA_EP_IN
	default:
		ep = UDI_CDC_DATA_EP_IN_0;
    4bc0:	2316      	movs	r3, #22
    4bc2:	18fb      	adds	r3, r7, r3
    4bc4:	2281      	movs	r2, #129	; 0x81
    4bc6:	701a      	strb	r2, [r3, #0]
		break;
    4bc8:	46c0      	nop			; (mov r8, r8)
	}
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
    4bca:	1dfb      	adds	r3, r7, #7
    4bcc:	781a      	ldrb	r2, [r3, #0]
    4bce:	2317      	movs	r3, #23
    4bd0:	18fb      	adds	r3, r7, r3
    4bd2:	781b      	ldrb	r3, [r3, #0]
    4bd4:	0052      	lsls	r2, r2, #1
    4bd6:	18d3      	adds	r3, r2, r3
    4bd8:	019b      	lsls	r3, r3, #6
    4bda:	4a2b      	ldr	r2, [pc, #172]	; (4c88 <udi_cdc_tx_send+0x298>)
    4bdc:	447a      	add	r2, pc
    4bde:	189d      	adds	r5, r3, r2
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
    4be0:	1dfb      	adds	r3, r7, #7
    4be2:	7819      	ldrb	r1, [r3, #0]
    4be4:	2317      	movs	r3, #23
    4be6:	18fb      	adds	r3, r7, r3
    4be8:	781a      	ldrb	r2, [r3, #0]
    4bea:	4b28      	ldr	r3, [pc, #160]	; (4c8c <udi_cdc_tx_send+0x29c>)
    4bec:	447b      	add	r3, pc
    4bee:	0049      	lsls	r1, r1, #1
    4bf0:	188a      	adds	r2, r1, r2
    4bf2:	0052      	lsls	r2, r2, #1
    4bf4:	5ad3      	ldrh	r3, [r2, r3]
	udd_ep_run( ep,
    4bf6:	001a      	movs	r2, r3
    4bf8:	230f      	movs	r3, #15
    4bfa:	18fb      	adds	r3, r7, r3
    4bfc:	7819      	ldrb	r1, [r3, #0]
    4bfe:	2316      	movs	r3, #22
    4c00:	18fb      	adds	r3, r7, r3
    4c02:	7818      	ldrb	r0, [r3, #0]
    4c04:	4b22      	ldr	r3, [pc, #136]	; (4c90 <udi_cdc_tx_send+0x2a0>)
    4c06:	447b      	add	r3, pc
    4c08:	9300      	str	r3, [sp, #0]
    4c0a:	0013      	movs	r3, r2
    4c0c:	002a      	movs	r2, r5
    4c0e:	4d21      	ldr	r5, [pc, #132]	; (4c94 <udi_cdc_tx_send+0x2a4>)
    4c10:	5964      	ldr	r4, [r4, r5]
    4c12:	47a0      	blx	r4
    4c14:	e002      	b.n	4c1c <udi_cdc_tx_send+0x22c>
		return; // Already on going or wait next SOF to send next data
    4c16:	46c0      	nop			; (mov r8, r8)
    4c18:	e000      	b.n	4c1c <udi_cdc_tx_send+0x22c>
			return; // Wait next SOF to send next data
    4c1a:	46c0      	nop			; (mov r8, r8)
			udi_cdc_data_sent);
}
    4c1c:	46bd      	mov	sp, r7
    4c1e:	b006      	add	sp, #24
    4c20:	bdb0      	pop	{r4, r5, r7, pc}
    4c22:	46c0      	nop			; (mov r8, r8)
    4c24:	0000aa32 	.word	0x0000aa32
    4c28:	1fffb8d8 	.word	0x1fffb8d8
    4c2c:	000001bc 	.word	0x000001bc
    4c30:	1fffb8b8 	.word	0x1fffb8b8
    4c34:	00000060 	.word	0x00000060
    4c38:	1fffb89e 	.word	0x1fffb89e
    4c3c:	000000f4 	.word	0x000000f4
    4c40:	fffff731 	.word	0xfffff731
    4c44:	1fffb872 	.word	0x1fffb872
    4c48:	1fffb85c 	.word	0x1fffb85c
    4c4c:	1fffb85e 	.word	0x1fffb85e
    4c50:	1fffb854 	.word	0x1fffb854
    4c54:	1fffb83a 	.word	0x1fffb83a
    4c58:	1fffb826 	.word	0x1fffb826
    4c5c:	0000031f 	.word	0x0000031f
    4c60:	fffff709 	.word	0xfffff709
    4c64:	1fffb80e 	.word	0x1fffb80e
    4c68:	1fffb800 	.word	0x1fffb800
    4c6c:	1fffb7d0 	.word	0x1fffb7d0
    4c70:	1fffb7ba 	.word	0x1fffb7ba
    4c74:	fffff6a7 	.word	0xfffff6a7
    4c78:	1fffb792 	.word	0x1fffb792
    4c7c:	1fffb760 	.word	0x1fffb760
    4c80:	1fffb748 	.word	0x1fffb748
    4c84:	1fffb73a 	.word	0x1fffb73a
    4c88:	1fffb67c 	.word	0x1fffb67c
    4c8c:	1fffb6ec 	.word	0x1fffb6ec
    4c90:	fffffd3b 	.word	0xfffffd3b
    4c94:	00000094 	.word	0x00000094

00004c98 <udi_cdc_multi_get_nb_received_data>:
{
	udi_cdc_ctrl_state_change(port, true, CDC_SERIAL_STATE_OVERRUN);
}

iram_size_t udi_cdc_multi_get_nb_received_data(uint8_t port)
{
    4c98:	b580      	push	{r7, lr}
    4c9a:	b086      	sub	sp, #24
    4c9c:	af00      	add	r7, sp, #0
    4c9e:	0002      	movs	r2, r0
    4ca0:	1dfb      	adds	r3, r7, #7
    4ca2:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	uint16_t pos;
	iram_size_t nb_received;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    4ca4:	1dfb      	adds	r3, r7, #7
    4ca6:	2200      	movs	r2, #0
    4ca8:	701a      	strb	r2, [r3, #0]
#endif
	flags = cpu_irq_save();
    4caa:	4b17      	ldr	r3, [pc, #92]	; (4d08 <udi_cdc_multi_get_nb_received_data+0x70>)
    4cac:	447b      	add	r3, pc
    4cae:	4798      	blx	r3
    4cb0:	0003      	movs	r3, r0
    4cb2:	617b      	str	r3, [r7, #20]
	pos = udi_cdc_rx_pos[port];
    4cb4:	1dfb      	adds	r3, r7, #7
    4cb6:	7819      	ldrb	r1, [r3, #0]
    4cb8:	2312      	movs	r3, #18
    4cba:	18fb      	adds	r3, r7, r3
    4cbc:	4a13      	ldr	r2, [pc, #76]	; (4d0c <udi_cdc_multi_get_nb_received_data+0x74>)
    4cbe:	447a      	add	r2, pc
    4cc0:	0049      	lsls	r1, r1, #1
    4cc2:	5a8a      	ldrh	r2, [r1, r2]
    4cc4:	801a      	strh	r2, [r3, #0]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
    4cc6:	1dfb      	adds	r3, r7, #7
    4cc8:	781a      	ldrb	r2, [r3, #0]
    4cca:	1dfb      	adds	r3, r7, #7
    4ccc:	781b      	ldrb	r3, [r3, #0]
    4cce:	4910      	ldr	r1, [pc, #64]	; (4d10 <udi_cdc_multi_get_nb_received_data+0x78>)
    4cd0:	4479      	add	r1, pc
    4cd2:	5ccb      	ldrb	r3, [r1, r3]
    4cd4:	b2db      	uxtb	r3, r3
    4cd6:	0019      	movs	r1, r3
    4cd8:	4b0e      	ldr	r3, [pc, #56]	; (4d14 <udi_cdc_multi_get_nb_received_data+0x7c>)
    4cda:	447b      	add	r3, pc
    4cdc:	0052      	lsls	r2, r2, #1
    4cde:	1852      	adds	r2, r2, r1
    4ce0:	0052      	lsls	r2, r2, #1
    4ce2:	5ad3      	ldrh	r3, [r2, r3]
    4ce4:	b29b      	uxth	r3, r3
    4ce6:	001a      	movs	r2, r3
    4ce8:	2312      	movs	r3, #18
    4cea:	18fb      	adds	r3, r7, r3
    4cec:	881b      	ldrh	r3, [r3, #0]
    4cee:	1ad3      	subs	r3, r2, r3
    4cf0:	60fb      	str	r3, [r7, #12]
	cpu_irq_restore(flags);
    4cf2:	697b      	ldr	r3, [r7, #20]
    4cf4:	0018      	movs	r0, r3
    4cf6:	4b08      	ldr	r3, [pc, #32]	; (4d18 <udi_cdc_multi_get_nb_received_data+0x80>)
    4cf8:	447b      	add	r3, pc
    4cfa:	4798      	blx	r3
	return nb_received;
    4cfc:	68fb      	ldr	r3, [r7, #12]
}
    4cfe:	0018      	movs	r0, r3
    4d00:	46bd      	mov	sp, r7
    4d02:	b006      	add	sp, #24
    4d04:	bd80      	pop	{r7, pc}
    4d06:	46c0      	nop			; (mov r8, r8)
    4d08:	fffff4dd 	.word	0xfffff4dd
    4d0c:	1fffb592 	.word	0x1fffb592
    4d10:	1fffb57c 	.word	0x1fffb57c
    4d14:	1fffb56e 	.word	0x1fffb56e
    4d18:	fffff4e5 	.word	0xfffff4e5

00004d1c <udi_cdc_multi_is_rx_ready>:
{
	return udi_cdc_multi_get_nb_received_data(0);
}

bool udi_cdc_multi_is_rx_ready(uint8_t port)
{
    4d1c:	b580      	push	{r7, lr}
    4d1e:	b082      	sub	sp, #8
    4d20:	af00      	add	r7, sp, #0
    4d22:	0002      	movs	r2, r0
    4d24:	1dfb      	adds	r3, r7, #7
    4d26:	701a      	strb	r2, [r3, #0]
    4d28:	4a07      	ldr	r2, [pc, #28]	; (4d48 <udi_cdc_multi_is_rx_ready+0x2c>)
    4d2a:	447a      	add	r2, pc
	return (udi_cdc_multi_get_nb_received_data(port) > 0);
    4d2c:	1dfb      	adds	r3, r7, #7
    4d2e:	781b      	ldrb	r3, [r3, #0]
    4d30:	0018      	movs	r0, r3
    4d32:	4b06      	ldr	r3, [pc, #24]	; (4d4c <udi_cdc_multi_is_rx_ready+0x30>)
    4d34:	58d3      	ldr	r3, [r2, r3]
    4d36:	4798      	blx	r3
    4d38:	0003      	movs	r3, r0
    4d3a:	1e5a      	subs	r2, r3, #1
    4d3c:	4193      	sbcs	r3, r2
    4d3e:	b2db      	uxtb	r3, r3
}
    4d40:	0018      	movs	r0, r3
    4d42:	46bd      	mov	sp, r7
    4d44:	b002      	add	sp, #8
    4d46:	bd80      	pop	{r7, pc}
    4d48:	0000a706 	.word	0x0000a706
    4d4c:	00000034 	.word	0x00000034

00004d50 <udi_cdc_multi_getc>:
{
	return udi_cdc_multi_is_rx_ready(0);
}

int udi_cdc_multi_getc(uint8_t port)
{
    4d50:	b580      	push	{r7, lr}
    4d52:	b086      	sub	sp, #24
    4d54:	af00      	add	r7, sp, #0
    4d56:	0002      	movs	r2, r0
    4d58:	1dfb      	adds	r3, r7, #7
    4d5a:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	int rx_data = 0;
    4d5c:	2300      	movs	r3, #0
    4d5e:	617b      	str	r3, [r7, #20]
	uint16_t pos;
	uint8_t buf_sel;
	bool again;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    4d60:	1dfb      	adds	r3, r7, #7
    4d62:	2200      	movs	r2, #0
    4d64:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    4d66:	1dfb      	adds	r3, r7, #7
    4d68:	781a      	ldrb	r2, [r3, #0]
    4d6a:	4945      	ldr	r1, [pc, #276]	; (4e80 <udi_cdc_multi_getc+0x130>)
    4d6c:	4479      	add	r1, pc
    4d6e:	0013      	movs	r3, r2
    4d70:	00db      	lsls	r3, r3, #3
    4d72:	1a9b      	subs	r3, r3, r2
    4d74:	18cb      	adds	r3, r1, r3
    4d76:	3306      	adds	r3, #6
    4d78:	781a      	ldrb	r2, [r3, #0]
    4d7a:	2313      	movs	r3, #19
    4d7c:	18fb      	adds	r3, r7, r3
    4d7e:	3a09      	subs	r2, #9
    4d80:	4251      	negs	r1, r2
    4d82:	414a      	adcs	r2, r1
    4d84:	701a      	strb	r2, [r3, #0]

udi_cdc_getc_process_one_byte:
	// Check available data
	flags = cpu_irq_save();
    4d86:	4b3f      	ldr	r3, [pc, #252]	; (4e84 <udi_cdc_multi_getc+0x134>)
    4d88:	447b      	add	r3, pc
    4d8a:	4798      	blx	r3
    4d8c:	0003      	movs	r3, r0
    4d8e:	60fb      	str	r3, [r7, #12]
	pos = udi_cdc_rx_pos[port];
    4d90:	1dfb      	adds	r3, r7, #7
    4d92:	7819      	ldrb	r1, [r3, #0]
    4d94:	230a      	movs	r3, #10
    4d96:	18fb      	adds	r3, r7, r3
    4d98:	4a3b      	ldr	r2, [pc, #236]	; (4e88 <udi_cdc_multi_getc+0x138>)
    4d9a:	447a      	add	r2, pc
    4d9c:	0049      	lsls	r1, r1, #1
    4d9e:	5a8a      	ldrh	r2, [r1, r2]
    4da0:	801a      	strh	r2, [r3, #0]
	buf_sel = udi_cdc_rx_buf_sel[port];
    4da2:	1dfb      	adds	r3, r7, #7
    4da4:	781a      	ldrb	r2, [r3, #0]
    4da6:	2309      	movs	r3, #9
    4da8:	18fb      	adds	r3, r7, r3
    4daa:	4938      	ldr	r1, [pc, #224]	; (4e8c <udi_cdc_multi_getc+0x13c>)
    4dac:	4479      	add	r1, pc
    4dae:	5c8a      	ldrb	r2, [r1, r2]
    4db0:	701a      	strb	r2, [r3, #0]
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
    4db2:	1dfb      	adds	r3, r7, #7
    4db4:	7819      	ldrb	r1, [r3, #0]
    4db6:	2309      	movs	r3, #9
    4db8:	18fb      	adds	r3, r7, r3
    4dba:	781a      	ldrb	r2, [r3, #0]
    4dbc:	4b34      	ldr	r3, [pc, #208]	; (4e90 <udi_cdc_multi_getc+0x140>)
    4dbe:	447b      	add	r3, pc
    4dc0:	0049      	lsls	r1, r1, #1
    4dc2:	188a      	adds	r2, r1, r2
    4dc4:	0052      	lsls	r2, r2, #1
    4dc6:	5ad3      	ldrh	r3, [r2, r3]
    4dc8:	b299      	uxth	r1, r3
    4dca:	2308      	movs	r3, #8
    4dcc:	18fa      	adds	r2, r7, r3
    4dce:	230a      	movs	r3, #10
    4dd0:	18fb      	adds	r3, r7, r3
    4dd2:	8818      	ldrh	r0, [r3, #0]
    4dd4:	2300      	movs	r3, #0
    4dd6:	4288      	cmp	r0, r1
    4dd8:	415b      	adcs	r3, r3
    4dda:	7013      	strb	r3, [r2, #0]
	cpu_irq_restore(flags);
    4ddc:	68fb      	ldr	r3, [r7, #12]
    4dde:	0018      	movs	r0, r3
    4de0:	4b2c      	ldr	r3, [pc, #176]	; (4e94 <udi_cdc_multi_getc+0x144>)
    4de2:	447b      	add	r3, pc
    4de4:	4798      	blx	r3
	while (again) {
    4de6:	2308      	movs	r3, #8
    4de8:	18fb      	adds	r3, r7, r3
    4dea:	781b      	ldrb	r3, [r3, #0]
    4dec:	2b00      	cmp	r3, #0
    4dee:	d011      	beq.n	4e14 <udi_cdc_multi_getc+0xc4>
		if (!udi_cdc_data_running) {
    4df0:	4b29      	ldr	r3, [pc, #164]	; (4e98 <udi_cdc_multi_getc+0x148>)
    4df2:	447b      	add	r3, pc
    4df4:	781b      	ldrb	r3, [r3, #0]
    4df6:	b2db      	uxtb	r3, r3
    4df8:	2201      	movs	r2, #1
    4dfa:	4053      	eors	r3, r2
    4dfc:	b2db      	uxtb	r3, r3
    4dfe:	2b00      	cmp	r3, #0
    4e00:	d001      	beq.n	4e06 <udi_cdc_multi_getc+0xb6>
			return 0;
    4e02:	2300      	movs	r3, #0
    4e04:	e038      	b.n	4e78 <udi_cdc_multi_getc+0x128>
    4e06:	2313      	movs	r3, #19
    4e08:	18fb      	adds	r3, r7, r3
    4e0a:	2213      	movs	r2, #19
    4e0c:	18ba      	adds	r2, r7, r2
    4e0e:	7812      	ldrb	r2, [r2, #0]
    4e10:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_getc_process_one_byte;
    4e12:	e7b8      	b.n	4d86 <udi_cdc_multi_getc+0x36>
	}

	// Read data
	rx_data |= udi_cdc_rx_buf[port][buf_sel][pos];
    4e14:	1dfb      	adds	r3, r7, #7
    4e16:	7818      	ldrb	r0, [r3, #0]
    4e18:	2309      	movs	r3, #9
    4e1a:	18fb      	adds	r3, r7, r3
    4e1c:	781a      	ldrb	r2, [r3, #0]
    4e1e:	230a      	movs	r3, #10
    4e20:	18fb      	adds	r3, r7, r3
    4e22:	881b      	ldrh	r3, [r3, #0]
    4e24:	491d      	ldr	r1, [pc, #116]	; (4e9c <udi_cdc_multi_getc+0x14c>)
    4e26:	4479      	add	r1, pc
    4e28:	0040      	lsls	r0, r0, #1
    4e2a:	1882      	adds	r2, r0, r2
    4e2c:	0192      	lsls	r2, r2, #6
    4e2e:	188a      	adds	r2, r1, r2
    4e30:	5cd3      	ldrb	r3, [r2, r3]
    4e32:	001a      	movs	r2, r3
    4e34:	697b      	ldr	r3, [r7, #20]
    4e36:	4313      	orrs	r3, r2
    4e38:	617b      	str	r3, [r7, #20]
	udi_cdc_rx_pos[port] = pos+1;
    4e3a:	1dfb      	adds	r3, r7, #7
    4e3c:	781a      	ldrb	r2, [r3, #0]
    4e3e:	230a      	movs	r3, #10
    4e40:	18fb      	adds	r3, r7, r3
    4e42:	881b      	ldrh	r3, [r3, #0]
    4e44:	3301      	adds	r3, #1
    4e46:	b299      	uxth	r1, r3
    4e48:	4b15      	ldr	r3, [pc, #84]	; (4ea0 <udi_cdc_multi_getc+0x150>)
    4e4a:	447b      	add	r3, pc
    4e4c:	0052      	lsls	r2, r2, #1
    4e4e:	52d1      	strh	r1, [r2, r3]

	udi_cdc_rx_start(port);
    4e50:	1dfb      	adds	r3, r7, #7
    4e52:	781b      	ldrb	r3, [r3, #0]
    4e54:	0018      	movs	r0, r3
    4e56:	4b13      	ldr	r3, [pc, #76]	; (4ea4 <udi_cdc_multi_getc+0x154>)
    4e58:	447b      	add	r3, pc
    4e5a:	4798      	blx	r3

	if (b_databit_9) {
    4e5c:	2313      	movs	r3, #19
    4e5e:	18fb      	adds	r3, r7, r3
    4e60:	781b      	ldrb	r3, [r3, #0]
    4e62:	2b00      	cmp	r3, #0
    4e64:	d007      	beq.n	4e76 <udi_cdc_multi_getc+0x126>
		// Receive MSB
		b_databit_9 = false;
    4e66:	2313      	movs	r3, #19
    4e68:	18fb      	adds	r3, r7, r3
    4e6a:	2200      	movs	r2, #0
    4e6c:	701a      	strb	r2, [r3, #0]
		rx_data = rx_data << 8;
    4e6e:	697b      	ldr	r3, [r7, #20]
    4e70:	021b      	lsls	r3, r3, #8
    4e72:	617b      	str	r3, [r7, #20]
		goto udi_cdc_getc_process_one_byte;
    4e74:	e787      	b.n	4d86 <udi_cdc_multi_getc+0x36>
	}
	return rx_data;
    4e76:	697b      	ldr	r3, [r7, #20]
}
    4e78:	0018      	movs	r0, r3
    4e7a:	46bd      	mov	sp, r7
    4e7c:	b006      	add	sp, #24
    4e7e:	bd80      	pop	{r7, pc}
    4e80:	1fffb440 	.word	0x1fffb440
    4e84:	fffff401 	.word	0xfffff401
    4e88:	1fffb4b6 	.word	0x1fffb4b6
    4e8c:	1fffb4a0 	.word	0x1fffb4a0
    4e90:	1fffb48a 	.word	0x1fffb48a
    4e94:	fffff3fb 	.word	0xfffff3fb
    4e98:	1fffb3d2 	.word	0x1fffb3d2
    4e9c:	1fffb3a2 	.word	0x1fffb3a2
    4ea0:	1fffb406 	.word	0x1fffb406
    4ea4:	fffff8a9 	.word	0xfffff8a9

00004ea8 <udi_cdc_getc>:

int udi_cdc_getc(void)
{
    4ea8:	b580      	push	{r7, lr}
    4eaa:	af00      	add	r7, sp, #0
    4eac:	4a04      	ldr	r2, [pc, #16]	; (4ec0 <udi_cdc_getc+0x18>)
    4eae:	447a      	add	r2, pc
	return udi_cdc_multi_getc(0);
    4eb0:	2000      	movs	r0, #0
    4eb2:	4b04      	ldr	r3, [pc, #16]	; (4ec4 <udi_cdc_getc+0x1c>)
    4eb4:	58d3      	ldr	r3, [r2, r3]
    4eb6:	4798      	blx	r3
    4eb8:	0003      	movs	r3, r0
}
    4eba:	0018      	movs	r0, r3
    4ebc:	46bd      	mov	sp, r7
    4ebe:	bd80      	pop	{r7, pc}
    4ec0:	0000a582 	.word	0x0000a582
    4ec4:	00000224 	.word	0x00000224

00004ec8 <udi_cdc_multi_get_free_tx_buffer>:
{
	return udi_cdc_multi_read_buf(0, buf, size);
}

iram_size_t udi_cdc_multi_get_free_tx_buffer(uint8_t port)
{
    4ec8:	b580      	push	{r7, lr}
    4eca:	b086      	sub	sp, #24
    4ecc:	af00      	add	r7, sp, #0
    4ece:	0002      	movs	r2, r0
    4ed0:	1dfb      	adds	r3, r7, #7
    4ed2:	701a      	strb	r2, [r3, #0]
	irqflags_t flags;
	iram_size_t buf_sel_nb, retval;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    4ed4:	1dfb      	adds	r3, r7, #7
    4ed6:	2200      	movs	r2, #0
    4ed8:	701a      	strb	r2, [r3, #0]
#endif

	flags = cpu_irq_save();
    4eda:	4b2a      	ldr	r3, [pc, #168]	; (4f84 <udi_cdc_multi_get_free_tx_buffer+0xbc>)
    4edc:	447b      	add	r3, pc
    4ede:	4798      	blx	r3
    4ee0:	0003      	movs	r3, r0
    4ee2:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    4ee4:	1dfb      	adds	r3, r7, #7
    4ee6:	781a      	ldrb	r2, [r3, #0]
    4ee8:	230f      	movs	r3, #15
    4eea:	18fb      	adds	r3, r7, r3
    4eec:	4926      	ldr	r1, [pc, #152]	; (4f88 <udi_cdc_multi_get_free_tx_buffer+0xc0>)
    4eee:	4479      	add	r1, pc
    4ef0:	5c8a      	ldrb	r2, [r1, r2]
    4ef2:	701a      	strb	r2, [r3, #0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
    4ef4:	1dfb      	adds	r3, r7, #7
    4ef6:	7819      	ldrb	r1, [r3, #0]
    4ef8:	230f      	movs	r3, #15
    4efa:	18fb      	adds	r3, r7, r3
    4efc:	781a      	ldrb	r2, [r3, #0]
    4efe:	4b23      	ldr	r3, [pc, #140]	; (4f8c <udi_cdc_multi_get_free_tx_buffer+0xc4>)
    4f00:	447b      	add	r3, pc
    4f02:	0049      	lsls	r1, r1, #1
    4f04:	188a      	adds	r2, r1, r2
    4f06:	0052      	lsls	r2, r2, #1
    4f08:	5ad3      	ldrh	r3, [r2, r3]
    4f0a:	617b      	str	r3, [r7, #20]
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
    4f0c:	697b      	ldr	r3, [r7, #20]
    4f0e:	2b40      	cmp	r3, #64	; 0x40
    4f10:	d129      	bne.n	4f66 <udi_cdc_multi_get_free_tx_buffer+0x9e>
		if ((!udi_cdc_tx_trans_ongoing[port])
    4f12:	1dfb      	adds	r3, r7, #7
    4f14:	781b      	ldrb	r3, [r3, #0]
    4f16:	4a1e      	ldr	r2, [pc, #120]	; (4f90 <udi_cdc_multi_get_free_tx_buffer+0xc8>)
    4f18:	447a      	add	r2, pc
    4f1a:	5cd3      	ldrb	r3, [r2, r3]
    4f1c:	b2db      	uxtb	r3, r3
    4f1e:	2201      	movs	r2, #1
    4f20:	4053      	eors	r3, r2
    4f22:	b2db      	uxtb	r3, r3
    4f24:	2b00      	cmp	r3, #0
    4f26:	d01e      	beq.n	4f66 <udi_cdc_multi_get_free_tx_buffer+0x9e>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
    4f28:	1dfb      	adds	r3, r7, #7
    4f2a:	781b      	ldrb	r3, [r3, #0]
    4f2c:	4a19      	ldr	r2, [pc, #100]	; (4f94 <udi_cdc_multi_get_free_tx_buffer+0xcc>)
    4f2e:	447a      	add	r2, pc
    4f30:	5cd3      	ldrb	r3, [r2, r3]
    4f32:	b2db      	uxtb	r3, r3
    4f34:	2201      	movs	r2, #1
    4f36:	4053      	eors	r3, r2
    4f38:	b2db      	uxtb	r3, r3
    4f3a:	2b00      	cmp	r3, #0
    4f3c:	d013      	beq.n	4f66 <udi_cdc_multi_get_free_tx_buffer+0x9e>
			/* One buffer is full, but the other buffer is not used.
			 * (not used = transfer on-going)
			 * then move to the other buffer to store data */
			udi_cdc_tx_both_buf_to_send[port] = true;
    4f3e:	1dfb      	adds	r3, r7, #7
    4f40:	781b      	ldrb	r3, [r3, #0]
    4f42:	4a15      	ldr	r2, [pc, #84]	; (4f98 <udi_cdc_multi_get_free_tx_buffer+0xd0>)
    4f44:	447a      	add	r2, pc
    4f46:	2101      	movs	r1, #1
    4f48:	54d1      	strb	r1, [r2, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
    4f4a:	1dfb      	adds	r3, r7, #7
    4f4c:	781b      	ldrb	r3, [r3, #0]
    4f4e:	220f      	movs	r2, #15
    4f50:	18ba      	adds	r2, r7, r2
    4f52:	7812      	ldrb	r2, [r2, #0]
    4f54:	4251      	negs	r1, r2
    4f56:	414a      	adcs	r2, r1
    4f58:	b2d2      	uxtb	r2, r2
    4f5a:	0011      	movs	r1, r2
    4f5c:	4a0f      	ldr	r2, [pc, #60]	; (4f9c <udi_cdc_multi_get_free_tx_buffer+0xd4>)
    4f5e:	447a      	add	r2, pc
    4f60:	54d1      	strb	r1, [r2, r3]
			buf_sel_nb = 0;
    4f62:	2300      	movs	r3, #0
    4f64:	617b      	str	r3, [r7, #20]
		}
	}
	retval = UDI_CDC_TX_BUFFERS - buf_sel_nb;  
    4f66:	697b      	ldr	r3, [r7, #20]
    4f68:	2240      	movs	r2, #64	; 0x40
    4f6a:	1ad3      	subs	r3, r2, r3
    4f6c:	60bb      	str	r3, [r7, #8]
	cpu_irq_restore(flags);
    4f6e:	693b      	ldr	r3, [r7, #16]
    4f70:	0018      	movs	r0, r3
    4f72:	4b0b      	ldr	r3, [pc, #44]	; (4fa0 <udi_cdc_multi_get_free_tx_buffer+0xd8>)
    4f74:	447b      	add	r3, pc
    4f76:	4798      	blx	r3
	return retval;
    4f78:	68bb      	ldr	r3, [r7, #8]
}
    4f7a:	0018      	movs	r0, r3
    4f7c:	46bd      	mov	sp, r7
    4f7e:	b006      	add	sp, #24
    4f80:	bd80      	pop	{r7, pc}
    4f82:	46c0      	nop			; (mov r8, r8)
    4f84:	fffff2ad 	.word	0xfffff2ad
    4f88:	1fffb3ee 	.word	0x1fffb3ee
    4f8c:	1fffb3d8 	.word	0x1fffb3d8
    4f90:	1fffb3cc 	.word	0x1fffb3cc
    4f94:	1fffb3ba 	.word	0x1fffb3ba
    4f98:	1fffb3a4 	.word	0x1fffb3a4
    4f9c:	1fffb37e 	.word	0x1fffb37e
    4fa0:	fffff269 	.word	0xfffff269

00004fa4 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
    4fa4:	b580      	push	{r7, lr}
    4fa6:	b082      	sub	sp, #8
    4fa8:	af00      	add	r7, sp, #0
    4faa:	0002      	movs	r2, r0
    4fac:	1dfb      	adds	r3, r7, #7
    4fae:	701a      	strb	r2, [r3, #0]
    4fb0:	4a07      	ldr	r2, [pc, #28]	; (4fd0 <udi_cdc_multi_is_tx_ready+0x2c>)
    4fb2:	447a      	add	r2, pc
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
    4fb4:	1dfb      	adds	r3, r7, #7
    4fb6:	781b      	ldrb	r3, [r3, #0]
    4fb8:	0018      	movs	r0, r3
    4fba:	4b06      	ldr	r3, [pc, #24]	; (4fd4 <udi_cdc_multi_is_tx_ready+0x30>)
    4fbc:	58d3      	ldr	r3, [r2, r3]
    4fbe:	4798      	blx	r3
    4fc0:	0003      	movs	r3, r0
    4fc2:	1e5a      	subs	r2, r3, #1
    4fc4:	4193      	sbcs	r3, r2
    4fc6:	b2db      	uxtb	r3, r3
}
    4fc8:	0018      	movs	r0, r3
    4fca:	46bd      	mov	sp, r7
    4fcc:	b002      	add	sp, #8
    4fce:	bd80      	pop	{r7, pc}
    4fd0:	0000a47e 	.word	0x0000a47e
    4fd4:	000001e8 	.word	0x000001e8

00004fd8 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
    4fd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    4fda:	b087      	sub	sp, #28
    4fdc:	af00      	add	r7, sp, #0
    4fde:	0002      	movs	r2, r0
    4fe0:	6039      	str	r1, [r7, #0]
    4fe2:	1dfb      	adds	r3, r7, #7
    4fe4:	701a      	strb	r2, [r3, #0]
    4fe6:	4c3e      	ldr	r4, [pc, #248]	; (50e0 <udi_cdc_multi_putc+0x108>)
    4fe8:	447c      	add	r4, pc
	irqflags_t flags;
	bool b_databit_9;
	uint8_t buf_sel;

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
    4fea:	1dfb      	adds	r3, r7, #7
    4fec:	2200      	movs	r2, #0
    4fee:	701a      	strb	r2, [r3, #0]
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
    4ff0:	1dfb      	adds	r3, r7, #7
    4ff2:	781a      	ldrb	r2, [r3, #0]
    4ff4:	493b      	ldr	r1, [pc, #236]	; (50e4 <udi_cdc_multi_putc+0x10c>)
    4ff6:	4479      	add	r1, pc
    4ff8:	0013      	movs	r3, r2
    4ffa:	00db      	lsls	r3, r3, #3
    4ffc:	1a9b      	subs	r3, r3, r2
    4ffe:	18cb      	adds	r3, r1, r3
    5000:	3306      	adds	r3, #6
    5002:	781a      	ldrb	r2, [r3, #0]
    5004:	2317      	movs	r3, #23
    5006:	18fb      	adds	r3, r7, r3
    5008:	3a09      	subs	r2, #9
    500a:	4251      	negs	r1, r2
    500c:	414a      	adcs	r2, r1
    500e:	701a      	strb	r2, [r3, #0]

udi_cdc_putc_process_one_byte:
	// Check available space
	if (!udi_cdc_multi_is_tx_ready(port)) {
    5010:	1dfb      	adds	r3, r7, #7
    5012:	781b      	ldrb	r3, [r3, #0]
    5014:	0018      	movs	r0, r3
    5016:	4b34      	ldr	r3, [pc, #208]	; (50e8 <udi_cdc_multi_putc+0x110>)
    5018:	58e3      	ldr	r3, [r4, r3]
    501a:	4798      	blx	r3
    501c:	0003      	movs	r3, r0
    501e:	001a      	movs	r2, r3
    5020:	2301      	movs	r3, #1
    5022:	4053      	eors	r3, r2
    5024:	b2db      	uxtb	r3, r3
    5026:	2b00      	cmp	r3, #0
    5028:	d011      	beq.n	504e <udi_cdc_multi_putc+0x76>
		if (!udi_cdc_data_running) {
    502a:	4b30      	ldr	r3, [pc, #192]	; (50ec <udi_cdc_multi_putc+0x114>)
    502c:	447b      	add	r3, pc
    502e:	781b      	ldrb	r3, [r3, #0]
    5030:	b2db      	uxtb	r3, r3
    5032:	2201      	movs	r2, #1
    5034:	4053      	eors	r3, r2
    5036:	b2db      	uxtb	r3, r3
    5038:	2b00      	cmp	r3, #0
    503a:	d001      	beq.n	5040 <udi_cdc_multi_putc+0x68>
			return false;
    503c:	2300      	movs	r3, #0
    503e:	e04a      	b.n	50d6 <udi_cdc_multi_putc+0xfe>
    5040:	2317      	movs	r3, #23
    5042:	18fb      	adds	r3, r7, r3
    5044:	2217      	movs	r2, #23
    5046:	18ba      	adds	r2, r7, r2
    5048:	7812      	ldrb	r2, [r2, #0]
    504a:	701a      	strb	r2, [r3, #0]
		}
		goto udi_cdc_putc_process_one_byte;
    504c:	e7e0      	b.n	5010 <udi_cdc_multi_putc+0x38>
	}

	// Write value
	flags = cpu_irq_save();
    504e:	4b28      	ldr	r3, [pc, #160]	; (50f0 <udi_cdc_multi_putc+0x118>)
    5050:	447b      	add	r3, pc
    5052:	4798      	blx	r3
    5054:	0003      	movs	r3, r0
    5056:	613b      	str	r3, [r7, #16]
	buf_sel = udi_cdc_tx_buf_sel[port];
    5058:	1dfb      	adds	r3, r7, #7
    505a:	781a      	ldrb	r2, [r3, #0]
    505c:	230f      	movs	r3, #15
    505e:	18fb      	adds	r3, r7, r3
    5060:	4924      	ldr	r1, [pc, #144]	; (50f4 <udi_cdc_multi_putc+0x11c>)
    5062:	4479      	add	r1, pc
    5064:	5c8a      	ldrb	r2, [r1, r2]
    5066:	701a      	strb	r2, [r3, #0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
    5068:	1dfb      	adds	r3, r7, #7
    506a:	781d      	ldrb	r5, [r3, #0]
    506c:	230f      	movs	r3, #15
    506e:	18fb      	adds	r3, r7, r3
    5070:	7818      	ldrb	r0, [r3, #0]
    5072:	1dfb      	adds	r3, r7, #7
    5074:	781a      	ldrb	r2, [r3, #0]
    5076:	230f      	movs	r3, #15
    5078:	18fb      	adds	r3, r7, r3
    507a:	781b      	ldrb	r3, [r3, #0]
    507c:	491e      	ldr	r1, [pc, #120]	; (50f8 <udi_cdc_multi_putc+0x120>)
    507e:	4479      	add	r1, pc
    5080:	0056      	lsls	r6, r2, #1
    5082:	18f6      	adds	r6, r6, r3
    5084:	0076      	lsls	r6, r6, #1
    5086:	5a71      	ldrh	r1, [r6, r1]
    5088:	1c4e      	adds	r6, r1, #1
    508a:	b2b6      	uxth	r6, r6
    508c:	46b4      	mov	ip, r6
    508e:	4e1b      	ldr	r6, [pc, #108]	; (50fc <udi_cdc_multi_putc+0x124>)
    5090:	447e      	add	r6, pc
    5092:	0052      	lsls	r2, r2, #1
    5094:	18d3      	adds	r3, r2, r3
    5096:	005b      	lsls	r3, r3, #1
    5098:	4662      	mov	r2, ip
    509a:	539a      	strh	r2, [r3, r6]
    509c:	683b      	ldr	r3, [r7, #0]
    509e:	b2de      	uxtb	r6, r3
    50a0:	4a17      	ldr	r2, [pc, #92]	; (5100 <udi_cdc_multi_putc+0x128>)
    50a2:	447a      	add	r2, pc
    50a4:	006b      	lsls	r3, r5, #1
    50a6:	181b      	adds	r3, r3, r0
    50a8:	019b      	lsls	r3, r3, #6
    50aa:	18d3      	adds	r3, r2, r3
    50ac:	1c32      	adds	r2, r6, #0
    50ae:	545a      	strb	r2, [r3, r1]
	cpu_irq_restore(flags);
    50b0:	693b      	ldr	r3, [r7, #16]
    50b2:	0018      	movs	r0, r3
    50b4:	4b13      	ldr	r3, [pc, #76]	; (5104 <udi_cdc_multi_putc+0x12c>)
    50b6:	447b      	add	r3, pc
    50b8:	4798      	blx	r3

	if (b_databit_9) {
    50ba:	2317      	movs	r3, #23
    50bc:	18fb      	adds	r3, r7, r3
    50be:	781b      	ldrb	r3, [r3, #0]
    50c0:	2b00      	cmp	r3, #0
    50c2:	d007      	beq.n	50d4 <udi_cdc_multi_putc+0xfc>
		// Send MSB
		b_databit_9 = false;
    50c4:	2317      	movs	r3, #23
    50c6:	18fb      	adds	r3, r7, r3
    50c8:	2200      	movs	r2, #0
    50ca:	701a      	strb	r2, [r3, #0]
		value = value >> 8;
    50cc:	683b      	ldr	r3, [r7, #0]
    50ce:	121b      	asrs	r3, r3, #8
    50d0:	603b      	str	r3, [r7, #0]
		goto udi_cdc_putc_process_one_byte;
    50d2:	e79d      	b.n	5010 <udi_cdc_multi_putc+0x38>
	}
	return true;
    50d4:	2301      	movs	r3, #1
}
    50d6:	0018      	movs	r0, r3
    50d8:	46bd      	mov	sp, r7
    50da:	b007      	add	sp, #28
    50dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    50de:	46c0      	nop			; (mov r8, r8)
    50e0:	0000a448 	.word	0x0000a448
    50e4:	1fffb1b6 	.word	0x1fffb1b6
    50e8:	00000308 	.word	0x00000308
    50ec:	1fffb198 	.word	0x1fffb198
    50f0:	fffff139 	.word	0xfffff139
    50f4:	1fffb27a 	.word	0x1fffb27a
    50f8:	1fffb25a 	.word	0x1fffb25a
    50fc:	1fffb248 	.word	0x1fffb248
    5100:	1fffb1b6 	.word	0x1fffb1b6
    5104:	fffff127 	.word	0xfffff127

00005108 <udi_cdc_putc>:

int udi_cdc_putc(int value)
{
    5108:	b580      	push	{r7, lr}
    510a:	b082      	sub	sp, #8
    510c:	af00      	add	r7, sp, #0
    510e:	6078      	str	r0, [r7, #4]
    5110:	4a06      	ldr	r2, [pc, #24]	; (512c <udi_cdc_putc+0x24>)
    5112:	447a      	add	r2, pc
	return udi_cdc_multi_putc(0, value);
    5114:	687b      	ldr	r3, [r7, #4]
    5116:	0019      	movs	r1, r3
    5118:	2000      	movs	r0, #0
    511a:	4b05      	ldr	r3, [pc, #20]	; (5130 <udi_cdc_putc+0x28>)
    511c:	58d3      	ldr	r3, [r2, r3]
    511e:	4798      	blx	r3
    5120:	0003      	movs	r3, r0
}
    5122:	0018      	movs	r0, r3
    5124:	46bd      	mov	sp, r7
    5126:	b002      	add	sp, #8
    5128:	bd80      	pop	{r7, pc}
    512a:	46c0      	nop			; (mov r8, r8)
    512c:	0000a31e 	.word	0x0000a31e
    5130:	0000025c 	.word	0x0000025c

00005134 <udc_get_string_serial_name>:
	}
#  define USB_DEVICE_SERIAL_NAME_SIZE \
	USB_DEVICE_GET_SERIAL_NAME_LENGTH
#elif defined USB_DEVICE_SERIAL_NAME
	static const uint8_t *udc_get_string_serial_name(void)
	{
    5134:	b580      	push	{r7, lr}
    5136:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_SERIAL_NAME;
    5138:	4b02      	ldr	r3, [pc, #8]	; (5144 <udc_get_string_serial_name+0x10>)
    513a:	447b      	add	r3, pc
	}
    513c:	0018      	movs	r0, r3
    513e:	46bd      	mov	sp, r7
    5140:	bd80      	pop	{r7, pc}
    5142:	46c0      	nop			; (mov r8, r8)
    5144:	0000a1fe 	.word	0x0000a1fe

00005148 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
    5148:	b580      	push	{r7, lr}
    514a:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
    514c:	4b08      	ldr	r3, [pc, #32]	; (5170 <udc_get_eof_conf+0x28>)
    514e:	447b      	add	r3, pc
    5150:	681b      	ldr	r3, [r3, #0]
    5152:	681a      	ldr	r2, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
    5154:	4b07      	ldr	r3, [pc, #28]	; (5174 <udc_get_eof_conf+0x2c>)
    5156:	447b      	add	r3, pc
    5158:	681b      	ldr	r3, [r3, #0]
    515a:	681b      	ldr	r3, [r3, #0]
    515c:	7899      	ldrb	r1, [r3, #2]
    515e:	78db      	ldrb	r3, [r3, #3]
    5160:	021b      	lsls	r3, r3, #8
    5162:	430b      	orrs	r3, r1
    5164:	b29b      	uxth	r3, r3
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
    5166:	18d3      	adds	r3, r2, r3
}
    5168:	0018      	movs	r0, r3
    516a:	46bd      	mov	sp, r7
    516c:	bd80      	pop	{r7, pc}
    516e:	46c0      	nop			; (mov r8, r8)
    5170:	1fffb1aa 	.word	0x1fffb1aa
    5174:	1fffb1a2 	.word	0x1fffb1a2

00005178 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
    5178:	b580      	push	{r7, lr}
    517a:	b084      	sub	sp, #16
    517c:	af00      	add	r7, sp, #0
    517e:	6078      	str	r0, [r7, #4]
    5180:	000a      	movs	r2, r1
    5182:	1cfb      	adds	r3, r7, #3
    5184:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
    5186:	4b14      	ldr	r3, [pc, #80]	; (51d8 <udc_next_desc_in_iface+0x60>)
    5188:	447b      	add	r3, pc
    518a:	4798      	blx	r3
    518c:	0003      	movs	r3, r0
    518e:	60fb      	str	r3, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
    5190:	687b      	ldr	r3, [r7, #4]
    5192:	781b      	ldrb	r3, [r3, #0]
    5194:	001a      	movs	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    5196:	687b      	ldr	r3, [r7, #4]
    5198:	189b      	adds	r3, r3, r2
    519a:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
    519c:	e011      	b.n	51c2 <udc_next_desc_in_iface+0x4a>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
    519e:	687b      	ldr	r3, [r7, #4]
    51a0:	785b      	ldrb	r3, [r3, #1]
    51a2:	2b04      	cmp	r3, #4
    51a4:	d012      	beq.n	51cc <udc_next_desc_in_iface+0x54>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
    51a6:	687b      	ldr	r3, [r7, #4]
    51a8:	785b      	ldrb	r3, [r3, #1]
    51aa:	1cfa      	adds	r2, r7, #3
    51ac:	7812      	ldrb	r2, [r2, #0]
    51ae:	429a      	cmp	r2, r3
    51b0:	d101      	bne.n	51b6 <udc_next_desc_in_iface+0x3e>
			return desc; // Specific descriptor found
    51b2:	687b      	ldr	r3, [r7, #4]
    51b4:	e00c      	b.n	51d0 <udc_next_desc_in_iface+0x58>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
    51b6:	687b      	ldr	r3, [r7, #4]
    51b8:	781b      	ldrb	r3, [r3, #0]
    51ba:	001a      	movs	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	189b      	adds	r3, r3, r2
    51c0:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
    51c2:	68fa      	ldr	r2, [r7, #12]
    51c4:	687b      	ldr	r3, [r7, #4]
    51c6:	429a      	cmp	r2, r3
    51c8:	d8e9      	bhi.n	519e <udc_next_desc_in_iface+0x26>
    51ca:	e000      	b.n	51ce <udc_next_desc_in_iface+0x56>
			break; // End of global interface descriptor
    51cc:	46c0      	nop			; (mov r8, r8)
	}
	return NULL; // No specific descriptor found
    51ce:	2300      	movs	r3, #0
}
    51d0:	0018      	movs	r0, r3
    51d2:	46bd      	mov	sp, r7
    51d4:	b004      	add	sp, #16
    51d6:	bd80      	pop	{r7, pc}
    51d8:	ffffffbd 	.word	0xffffffbd

000051dc <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
    51dc:	b580      	push	{r7, lr}
    51de:	b084      	sub	sp, #16
    51e0:	af00      	add	r7, sp, #0
    51e2:	0002      	movs	r2, r0
    51e4:	1dfb      	adds	r3, r7, #7
    51e6:	701a      	strb	r2, [r3, #0]
    51e8:	1dbb      	adds	r3, r7, #6
    51ea:	1c0a      	adds	r2, r1, #0
    51ec:	701a      	strb	r2, [r3, #0]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
    51ee:	4b26      	ldr	r3, [pc, #152]	; (5288 <udc_update_iface_desc+0xac>)
    51f0:	447b      	add	r3, pc
    51f2:	781b      	ldrb	r3, [r3, #0]
    51f4:	2b00      	cmp	r3, #0
    51f6:	d101      	bne.n	51fc <udc_update_iface_desc+0x20>
		return false;
    51f8:	2300      	movs	r3, #0
    51fa:	e041      	b.n	5280 <udc_update_iface_desc+0xa4>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    51fc:	4b23      	ldr	r3, [pc, #140]	; (528c <udc_update_iface_desc+0xb0>)
    51fe:	447b      	add	r3, pc
    5200:	681b      	ldr	r3, [r3, #0]
    5202:	681b      	ldr	r3, [r3, #0]
    5204:	791b      	ldrb	r3, [r3, #4]
    5206:	1dfa      	adds	r2, r7, #7
    5208:	7812      	ldrb	r2, [r2, #0]
    520a:	429a      	cmp	r2, r3
    520c:	d301      	bcc.n	5212 <udc_update_iface_desc+0x36>
		return false;
    520e:	2300      	movs	r3, #0
    5210:	e036      	b.n	5280 <udc_update_iface_desc+0xa4>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
    5212:	4b1f      	ldr	r3, [pc, #124]	; (5290 <udc_update_iface_desc+0xb4>)
    5214:	447b      	add	r3, pc
    5216:	681b      	ldr	r3, [r3, #0]
    5218:	681a      	ldr	r2, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
    521a:	4b1e      	ldr	r3, [pc, #120]	; (5294 <udc_update_iface_desc+0xb8>)
    521c:	447b      	add	r3, pc
    521e:	601a      	str	r2, [r3, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
    5220:	4b1d      	ldr	r3, [pc, #116]	; (5298 <udc_update_iface_desc+0xbc>)
    5222:	447b      	add	r3, pc
    5224:	4798      	blx	r3
    5226:	0003      	movs	r3, r0
    5228:	60fb      	str	r3, [r7, #12]
	while (ptr_end_desc >
    522a:	e022      	b.n	5272 <udc_update_iface_desc+0x96>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
    522c:	4b1b      	ldr	r3, [pc, #108]	; (529c <udc_update_iface_desc+0xc0>)
    522e:	447b      	add	r3, pc
    5230:	681b      	ldr	r3, [r3, #0]
    5232:	785b      	ldrb	r3, [r3, #1]
    5234:	2b04      	cmp	r3, #4
    5236:	d111      	bne.n	525c <udc_update_iface_desc+0x80>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    5238:	4b19      	ldr	r3, [pc, #100]	; (52a0 <udc_update_iface_desc+0xc4>)
    523a:	447b      	add	r3, pc
    523c:	681b      	ldr	r3, [r3, #0]
    523e:	789b      	ldrb	r3, [r3, #2]
    5240:	1dfa      	adds	r2, r7, #7
    5242:	7812      	ldrb	r2, [r2, #0]
    5244:	429a      	cmp	r2, r3
    5246:	d109      	bne.n	525c <udc_update_iface_desc+0x80>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
    5248:	4b16      	ldr	r3, [pc, #88]	; (52a4 <udc_update_iface_desc+0xc8>)
    524a:	447b      	add	r3, pc
    524c:	681b      	ldr	r3, [r3, #0]
    524e:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
    5250:	1dba      	adds	r2, r7, #6
    5252:	7812      	ldrb	r2, [r2, #0]
    5254:	429a      	cmp	r2, r3
    5256:	d101      	bne.n	525c <udc_update_iface_desc+0x80>
				return true; // Interface found
    5258:	2301      	movs	r3, #1
    525a:	e011      	b.n	5280 <udc_update_iface_desc+0xa4>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    525c:	4b12      	ldr	r3, [pc, #72]	; (52a8 <udc_update_iface_desc+0xcc>)
    525e:	447b      	add	r3, pc
    5260:	681a      	ldr	r2, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
    5262:	4b12      	ldr	r3, [pc, #72]	; (52ac <udc_update_iface_desc+0xd0>)
    5264:	447b      	add	r3, pc
    5266:	681b      	ldr	r3, [r3, #0]
    5268:	781b      	ldrb	r3, [r3, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
    526a:	18d2      	adds	r2, r2, r3
    526c:	4b10      	ldr	r3, [pc, #64]	; (52b0 <udc_update_iface_desc+0xd4>)
    526e:	447b      	add	r3, pc
    5270:	601a      	str	r2, [r3, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
    5272:	4b10      	ldr	r3, [pc, #64]	; (52b4 <udc_update_iface_desc+0xd8>)
    5274:	447b      	add	r3, pc
    5276:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
    5278:	68fa      	ldr	r2, [r7, #12]
    527a:	429a      	cmp	r2, r3
    527c:	d8d6      	bhi.n	522c <udc_update_iface_desc+0x50>
	}
	return false; // Interface not found
    527e:	2300      	movs	r3, #0
}
    5280:	0018      	movs	r0, r3
    5282:	46bd      	mov	sp, r7
    5284:	b004      	add	sp, #16
    5286:	bd80      	pop	{r7, pc}
    5288:	1fffb104 	.word	0x1fffb104
    528c:	1fffb0fa 	.word	0x1fffb0fa
    5290:	1fffb0e4 	.word	0x1fffb0e4
    5294:	1fffb0e0 	.word	0x1fffb0e0
    5298:	ffffff23 	.word	0xffffff23
    529c:	1fffb0ce 	.word	0x1fffb0ce
    52a0:	1fffb0c2 	.word	0x1fffb0c2
    52a4:	1fffb0b2 	.word	0x1fffb0b2
    52a8:	1fffb09e 	.word	0x1fffb09e
    52ac:	1fffb098 	.word	0x1fffb098
    52b0:	1fffb08e 	.word	0x1fffb08e
    52b4:	1fffb088 	.word	0x1fffb088

000052b8 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
    52b8:	b590      	push	{r4, r7, lr}
    52ba:	b085      	sub	sp, #20
    52bc:	af00      	add	r7, sp, #0
    52be:	0002      	movs	r2, r0
    52c0:	1dfb      	adds	r3, r7, #7
    52c2:	701a      	strb	r2, [r3, #0]
    52c4:	4c27      	ldr	r4, [pc, #156]	; (5364 <udc_iface_disable+0xac>)
    52c6:	447c      	add	r4, pc
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    52c8:	1dfb      	adds	r3, r7, #7
    52ca:	781b      	ldrb	r3, [r3, #0]
    52cc:	2100      	movs	r1, #0
    52ce:	0018      	movs	r0, r3
    52d0:	4b25      	ldr	r3, [pc, #148]	; (5368 <udc_iface_disable+0xb0>)
    52d2:	447b      	add	r3, pc
    52d4:	4798      	blx	r3
    52d6:	0003      	movs	r3, r0
    52d8:	001a      	movs	r2, r3
    52da:	2301      	movs	r3, #1
    52dc:	4053      	eors	r3, r2
    52de:	b2db      	uxtb	r3, r3
    52e0:	2b00      	cmp	r3, #0
    52e2:	d001      	beq.n	52e8 <udc_iface_disable+0x30>
		return false;
    52e4:	2300      	movs	r3, #0
    52e6:	e039      	b.n	535c <udc_iface_disable+0xa4>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    52e8:	4b20      	ldr	r3, [pc, #128]	; (536c <udc_iface_disable+0xb4>)
    52ea:	447b      	add	r3, pc
    52ec:	681b      	ldr	r3, [r3, #0]
    52ee:	685a      	ldr	r2, [r3, #4]
    52f0:	1dfb      	adds	r3, r7, #7
    52f2:	781b      	ldrb	r3, [r3, #0]
    52f4:	009b      	lsls	r3, r3, #2
    52f6:	18d3      	adds	r3, r2, r3
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    52fc:	68bb      	ldr	r3, [r7, #8]
    52fe:	68db      	ldr	r3, [r3, #12]
    5300:	4798      	blx	r3
    5302:	0003      	movs	r3, r0
    5304:	001a      	movs	r2, r3
    5306:	1dfb      	adds	r3, r7, #7
    5308:	781b      	ldrb	r3, [r3, #0]
    530a:	0011      	movs	r1, r2
    530c:	0018      	movs	r0, r3
    530e:	4b18      	ldr	r3, [pc, #96]	; (5370 <udc_iface_disable+0xb8>)
    5310:	447b      	add	r3, pc
    5312:	4798      	blx	r3
    5314:	0003      	movs	r3, r0
    5316:	001a      	movs	r2, r3
    5318:	2301      	movs	r3, #1
    531a:	4053      	eors	r3, r2
    531c:	b2db      	uxtb	r3, r3
    531e:	2b00      	cmp	r3, #0
    5320:	d001      	beq.n	5326 <udc_iface_disable+0x6e>
		return false;
    5322:	2300      	movs	r3, #0
    5324:	e01a      	b.n	535c <udc_iface_disable+0xa4>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    5326:	4b13      	ldr	r3, [pc, #76]	; (5374 <udc_iface_disable+0xbc>)
    5328:	447b      	add	r3, pc
    532a:	681b      	ldr	r3, [r3, #0]
    532c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    532e:	68fb      	ldr	r3, [r7, #12]
    5330:	2105      	movs	r1, #5
    5332:	0018      	movs	r0, r3
    5334:	4b10      	ldr	r3, [pc, #64]	; (5378 <udc_iface_disable+0xc0>)
    5336:	447b      	add	r3, pc
    5338:	4798      	blx	r3
    533a:	0003      	movs	r3, r0
    533c:	60fb      	str	r3, [r7, #12]
					udc_next_desc_in_iface((UDC_DESC_STORAGE
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
    533e:	68fb      	ldr	r3, [r7, #12]
    5340:	2b00      	cmp	r3, #0
    5342:	d006      	beq.n	5352 <udc_iface_disable+0x9a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
    5344:	68fb      	ldr	r3, [r7, #12]
    5346:	789b      	ldrb	r3, [r3, #2]
    5348:	0018      	movs	r0, r3
    534a:	4b0c      	ldr	r3, [pc, #48]	; (537c <udc_iface_disable+0xc4>)
    534c:	58e3      	ldr	r3, [r4, r3]
    534e:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    5350:	e7ed      	b.n	532e <udc_iface_disable+0x76>
				break;
    5352:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif

	// Disable interface
	udi_api->disable();
    5354:	68bb      	ldr	r3, [r7, #8]
    5356:	685b      	ldr	r3, [r3, #4]
    5358:	4798      	blx	r3
	return true;
    535a:	2301      	movs	r3, #1
}
    535c:	0018      	movs	r0, r3
    535e:	46bd      	mov	sp, r7
    5360:	b005      	add	sp, #20
    5362:	bd90      	pop	{r4, r7, pc}
    5364:	0000a16a 	.word	0x0000a16a
    5368:	ffffff07 	.word	0xffffff07
    536c:	1fffb00e 	.word	0x1fffb00e
    5370:	fffffec9 	.word	0xfffffec9
    5374:	1fffafd4 	.word	0x1fffafd4
    5378:	fffffe3f 	.word	0xfffffe3f
    537c:	000001b0 	.word	0x000001b0

00005380 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
    5380:	b590      	push	{r4, r7, lr}
    5382:	b085      	sub	sp, #20
    5384:	af00      	add	r7, sp, #0
    5386:	0002      	movs	r2, r0
    5388:	1dfb      	adds	r3, r7, #7
    538a:	701a      	strb	r2, [r3, #0]
    538c:	1dbb      	adds	r3, r7, #6
    538e:	1c0a      	adds	r2, r1, #0
    5390:	701a      	strb	r2, [r3, #0]
    5392:	4c25      	ldr	r4, [pc, #148]	; (5428 <udc_iface_enable+0xa8>)
    5394:	447c      	add	r4, pc
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
    5396:	1dbb      	adds	r3, r7, #6
    5398:	781a      	ldrb	r2, [r3, #0]
    539a:	1dfb      	adds	r3, r7, #7
    539c:	781b      	ldrb	r3, [r3, #0]
    539e:	0011      	movs	r1, r2
    53a0:	0018      	movs	r0, r3
    53a2:	4b22      	ldr	r3, [pc, #136]	; (542c <udc_iface_enable+0xac>)
    53a4:	447b      	add	r3, pc
    53a6:	4798      	blx	r3
    53a8:	0003      	movs	r3, r0
    53aa:	001a      	movs	r2, r3
    53ac:	2301      	movs	r3, #1
    53ae:	4053      	eors	r3, r2
    53b0:	b2db      	uxtb	r3, r3
    53b2:	2b00      	cmp	r3, #0
    53b4:	d001      	beq.n	53ba <udc_iface_enable+0x3a>
		return false;
    53b6:	2300      	movs	r3, #0
    53b8:	e032      	b.n	5420 <udc_iface_enable+0xa0>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
    53ba:	4b1d      	ldr	r3, [pc, #116]	; (5430 <udc_iface_enable+0xb0>)
    53bc:	447b      	add	r3, pc
    53be:	681b      	ldr	r3, [r3, #0]
    53c0:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
    53c2:	68fb      	ldr	r3, [r7, #12]
    53c4:	2105      	movs	r1, #5
    53c6:	0018      	movs	r0, r3
    53c8:	4b1a      	ldr	r3, [pc, #104]	; (5434 <udc_iface_enable+0xb4>)
    53ca:	447b      	add	r3, pc
    53cc:	4798      	blx	r3
    53ce:	0003      	movs	r3, r0
    53d0:	60fb      	str	r3, [r7, #12]
				udc_next_desc_in_iface((UDC_DESC_STORAGE
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
    53d2:	68fb      	ldr	r3, [r7, #12]
    53d4:	2b00      	cmp	r3, #0
    53d6:	d016      	beq.n	5406 <udc_iface_enable+0x86>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
    53d8:	68fb      	ldr	r3, [r7, #12]
    53da:	7898      	ldrb	r0, [r3, #2]
    53dc:	68fb      	ldr	r3, [r7, #12]
    53de:	78d9      	ldrb	r1, [r3, #3]
    53e0:	68fb      	ldr	r3, [r7, #12]
    53e2:	791a      	ldrb	r2, [r3, #4]
    53e4:	795b      	ldrb	r3, [r3, #5]
    53e6:	021b      	lsls	r3, r3, #8
    53e8:	4313      	orrs	r3, r2
    53ea:	b29b      	uxth	r3, r3
    53ec:	001a      	movs	r2, r3
    53ee:	4b12      	ldr	r3, [pc, #72]	; (5438 <udc_iface_enable+0xb8>)
    53f0:	58e3      	ldr	r3, [r4, r3]
    53f2:	4798      	blx	r3
    53f4:	0003      	movs	r3, r0
    53f6:	001a      	movs	r2, r3
    53f8:	2301      	movs	r3, #1
    53fa:	4053      	eors	r3, r2
    53fc:	b2db      	uxtb	r3, r3
    53fe:	2b00      	cmp	r3, #0
    5400:	d0df      	beq.n	53c2 <udc_iface_enable+0x42>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
    5402:	2300      	movs	r3, #0
    5404:	e00c      	b.n	5420 <udc_iface_enable+0xa0>
			break;
    5406:	46c0      	nop			; (mov r8, r8)
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
    5408:	4b0c      	ldr	r3, [pc, #48]	; (543c <udc_iface_enable+0xbc>)
    540a:	447b      	add	r3, pc
    540c:	681b      	ldr	r3, [r3, #0]
    540e:	685a      	ldr	r2, [r3, #4]
    5410:	1dfb      	adds	r3, r7, #7
    5412:	781b      	ldrb	r3, [r3, #0]
    5414:	009b      	lsls	r3, r3, #2
    5416:	18d3      	adds	r3, r2, r3
    5418:	681b      	ldr	r3, [r3, #0]
    541a:	681b      	ldr	r3, [r3, #0]
    541c:	4798      	blx	r3
    541e:	0003      	movs	r3, r0
}
    5420:	0018      	movs	r0, r3
    5422:	46bd      	mov	sp, r7
    5424:	b005      	add	sp, #20
    5426:	bd90      	pop	{r4, r7, pc}
    5428:	0000a09c 	.word	0x0000a09c
    542c:	fffffe35 	.word	0xfffffe35
    5430:	1fffaf40 	.word	0x1fffaf40
    5434:	fffffdab 	.word	0xfffffdab
    5438:	0000020c 	.word	0x0000020c
    543c:	1fffaeee 	.word	0x1fffaeee

00005440 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
    5440:	b580      	push	{r7, lr}
    5442:	af00      	add	r7, sp, #0
    5444:	4a03      	ldr	r2, [pc, #12]	; (5454 <udc_start+0x14>)
    5446:	447a      	add	r2, pc
	udd_enable();
    5448:	4b03      	ldr	r3, [pc, #12]	; (5458 <udc_start+0x18>)
    544a:	58d3      	ldr	r3, [r2, r3]
    544c:	4798      	blx	r3
}
    544e:	46c0      	nop			; (mov r8, r8)
    5450:	46bd      	mov	sp, r7
    5452:	bd80      	pop	{r7, pc}
    5454:	00009fea 	.word	0x00009fea
    5458:	000001c0 	.word	0x000001c0

0000545c <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
    545c:	b580      	push	{r7, lr}
    545e:	b082      	sub	sp, #8
    5460:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    5462:	4b14      	ldr	r3, [pc, #80]	; (54b4 <udc_reset+0x58>)
    5464:	447b      	add	r3, pc
    5466:	781b      	ldrb	r3, [r3, #0]
    5468:	2b00      	cmp	r3, #0
    546a:	d017      	beq.n	549c <udc_reset+0x40>
		for (iface_num = 0;
    546c:	1dfb      	adds	r3, r7, #7
    546e:	2200      	movs	r2, #0
    5470:	701a      	strb	r2, [r3, #0]
    5472:	e00a      	b.n	548a <udc_reset+0x2e>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
    5474:	1dfb      	adds	r3, r7, #7
    5476:	781b      	ldrb	r3, [r3, #0]
    5478:	0018      	movs	r0, r3
    547a:	4b0f      	ldr	r3, [pc, #60]	; (54b8 <udc_reset+0x5c>)
    547c:	447b      	add	r3, pc
    547e:	4798      	blx	r3
				iface_num++) {
    5480:	1dfb      	adds	r3, r7, #7
    5482:	781a      	ldrb	r2, [r3, #0]
    5484:	1dfb      	adds	r3, r7, #7
    5486:	3201      	adds	r2, #1
    5488:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    548a:	4b0c      	ldr	r3, [pc, #48]	; (54bc <udc_reset+0x60>)
    548c:	447b      	add	r3, pc
    548e:	681b      	ldr	r3, [r3, #0]
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    5494:	1dfa      	adds	r2, r7, #7
    5496:	7812      	ldrb	r2, [r2, #0]
    5498:	429a      	cmp	r2, r3
    549a:	d3eb      	bcc.n	5474 <udc_reset+0x18>
		}
	}
	udc_num_configuration = 0;
    549c:	4b08      	ldr	r3, [pc, #32]	; (54c0 <udc_reset+0x64>)
    549e:	447b      	add	r3, pc
    54a0:	2200      	movs	r2, #0
    54a2:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
    54a4:	4b07      	ldr	r3, [pc, #28]	; (54c4 <udc_reset+0x68>)
    54a6:	447b      	add	r3, pc
    54a8:	2201      	movs	r2, #1
    54aa:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
    54ac:	46c0      	nop			; (mov r8, r8)
    54ae:	46bd      	mov	sp, r7
    54b0:	b002      	add	sp, #8
    54b2:	bd80      	pop	{r7, pc}
    54b4:	1fffae90 	.word	0x1fffae90
    54b8:	fffffe39 	.word	0xfffffe39
    54bc:	1fffae6c 	.word	0x1fffae6c
    54c0:	1fffae56 	.word	0x1fffae56
    54c4:	1fffae46 	.word	0x1fffae46

000054c8 <udc_sof_notify>:

void udc_sof_notify(void)
{
    54c8:	b580      	push	{r7, lr}
    54ca:	b082      	sub	sp, #8
    54cc:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
    54ce:	4b19      	ldr	r3, [pc, #100]	; (5534 <udc_sof_notify+0x6c>)
    54d0:	447b      	add	r3, pc
    54d2:	781b      	ldrb	r3, [r3, #0]
    54d4:	2b00      	cmp	r3, #0
    54d6:	d028      	beq.n	552a <udc_sof_notify+0x62>
		for (iface_num = 0;
    54d8:	1dfb      	adds	r3, r7, #7
    54da:	2200      	movs	r2, #0
    54dc:	701a      	strb	r2, [r3, #0]
    54de:	e01b      	b.n	5518 <udc_sof_notify+0x50>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
    54e0:	4b15      	ldr	r3, [pc, #84]	; (5538 <udc_sof_notify+0x70>)
    54e2:	447b      	add	r3, pc
    54e4:	681b      	ldr	r3, [r3, #0]
    54e6:	685a      	ldr	r2, [r3, #4]
    54e8:	1dfb      	adds	r3, r7, #7
    54ea:	781b      	ldrb	r3, [r3, #0]
    54ec:	009b      	lsls	r3, r3, #2
    54ee:	18d3      	adds	r3, r2, r3
    54f0:	681b      	ldr	r3, [r3, #0]
    54f2:	691b      	ldr	r3, [r3, #16]
    54f4:	2b00      	cmp	r3, #0
    54f6:	d00a      	beq.n	550e <udc_sof_notify+0x46>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
    54f8:	4b10      	ldr	r3, [pc, #64]	; (553c <udc_sof_notify+0x74>)
    54fa:	447b      	add	r3, pc
    54fc:	681b      	ldr	r3, [r3, #0]
    54fe:	685a      	ldr	r2, [r3, #4]
    5500:	1dfb      	adds	r3, r7, #7
    5502:	781b      	ldrb	r3, [r3, #0]
    5504:	009b      	lsls	r3, r3, #2
    5506:	18d3      	adds	r3, r2, r3
    5508:	681b      	ldr	r3, [r3, #0]
    550a:	691b      	ldr	r3, [r3, #16]
    550c:	4798      	blx	r3
				iface_num++) {
    550e:	1dfb      	adds	r3, r7, #7
    5510:	781a      	ldrb	r2, [r3, #0]
    5512:	1dfb      	adds	r3, r7, #7
    5514:	3201      	adds	r2, #1
    5516:	701a      	strb	r2, [r3, #0]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
    5518:	4b09      	ldr	r3, [pc, #36]	; (5540 <udc_sof_notify+0x78>)
    551a:	447b      	add	r3, pc
    551c:	681b      	ldr	r3, [r3, #0]
    551e:	681b      	ldr	r3, [r3, #0]
    5520:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
    5522:	1dfa      	adds	r2, r7, #7
    5524:	7812      	ldrb	r2, [r2, #0]
    5526:	429a      	cmp	r2, r3
    5528:	d3da      	bcc.n	54e0 <udc_sof_notify+0x18>
			}
		}
	}
}
    552a:	46c0      	nop			; (mov r8, r8)
    552c:	46bd      	mov	sp, r7
    552e:	b002      	add	sp, #8
    5530:	bd80      	pop	{r7, pc}
    5532:	46c0      	nop			; (mov r8, r8)
    5534:	1fffae24 	.word	0x1fffae24
    5538:	1fffae16 	.word	0x1fffae16
    553c:	1fffadfe 	.word	0x1fffadfe
    5540:	1fffadde 	.word	0x1fffadde

00005544 <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
    5544:	b580      	push	{r7, lr}
    5546:	af00      	add	r7, sp, #0
    5548:	4b09      	ldr	r3, [pc, #36]	; (5570 <udc_req_std_dev_get_status+0x2c>)
    554a:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
    554c:	4a09      	ldr	r2, [pc, #36]	; (5574 <udc_req_std_dev_get_status+0x30>)
    554e:	589a      	ldr	r2, [r3, r2]
    5550:	88d2      	ldrh	r2, [r2, #6]
    5552:	2a02      	cmp	r2, #2
    5554:	d001      	beq.n	555a <udc_req_std_dev_get_status+0x16>
		return false;
    5556:	2300      	movs	r3, #0
    5558:	e007      	b.n	556a <udc_req_std_dev_get_status+0x26>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
    555a:	4a07      	ldr	r2, [pc, #28]	; (5578 <udc_req_std_dev_get_status+0x34>)
    555c:	447a      	add	r2, pc
    555e:	2102      	movs	r1, #2
    5560:	0010      	movs	r0, r2
    5562:	4a06      	ldr	r2, [pc, #24]	; (557c <udc_req_std_dev_get_status+0x38>)
    5564:	589b      	ldr	r3, [r3, r2]
    5566:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
    5568:	2301      	movs	r3, #1
}
    556a:	0018      	movs	r0, r3
    556c:	46bd      	mov	sp, r7
    556e:	bd80      	pop	{r7, pc}
    5570:	00009ee6 	.word	0x00009ee6
    5574:	00000208 	.word	0x00000208
    5578:	1fffad90 	.word	0x1fffad90
    557c:	00000080 	.word	0x00000080

00005580 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
    5580:	b5b0      	push	{r4, r5, r7, lr}
    5582:	af00      	add	r7, sp, #0
    5584:	4c10      	ldr	r4, [pc, #64]	; (55c8 <udc_req_std_ep_get_status+0x48>)
    5586:	447c      	add	r4, pc
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
    5588:	4b10      	ldr	r3, [pc, #64]	; (55cc <udc_req_std_ep_get_status+0x4c>)
    558a:	58e3      	ldr	r3, [r4, r3]
    558c:	88db      	ldrh	r3, [r3, #6]
    558e:	2b02      	cmp	r3, #2
    5590:	d001      	beq.n	5596 <udc_req_std_ep_get_status+0x16>
		return false;
    5592:	2300      	movs	r3, #0
    5594:	e014      	b.n	55c0 <udc_req_std_ep_get_status+0x40>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    5596:	4b0d      	ldr	r3, [pc, #52]	; (55cc <udc_req_std_ep_get_status+0x4c>)
    5598:	58e3      	ldr	r3, [r4, r3]
    559a:	889b      	ldrh	r3, [r3, #4]
    559c:	b2db      	uxtb	r3, r3
    559e:	0018      	movs	r0, r3
    55a0:	4b0b      	ldr	r3, [pc, #44]	; (55d0 <udc_req_std_ep_get_status+0x50>)
    55a2:	58e3      	ldr	r3, [r4, r3]
    55a4:	4798      	blx	r3
    55a6:	0003      	movs	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
    55a8:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
    55aa:	4b0a      	ldr	r3, [pc, #40]	; (55d4 <udc_req_std_ep_get_status+0x54>)
    55ac:	447b      	add	r3, pc
    55ae:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
    55b0:	4b09      	ldr	r3, [pc, #36]	; (55d8 <udc_req_std_ep_get_status+0x58>)
    55b2:	447b      	add	r3, pc
    55b4:	2102      	movs	r1, #2
    55b6:	0018      	movs	r0, r3
    55b8:	4b08      	ldr	r3, [pc, #32]	; (55dc <udc_req_std_ep_get_status+0x5c>)
    55ba:	58e3      	ldr	r3, [r4, r3]
    55bc:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
    55be:	2301      	movs	r3, #1
}
    55c0:	0018      	movs	r0, r3
    55c2:	46bd      	mov	sp, r7
    55c4:	bdb0      	pop	{r4, r5, r7, pc}
    55c6:	46c0      	nop			; (mov r8, r8)
    55c8:	00009eaa 	.word	0x00009eaa
    55cc:	00000208 	.word	0x00000208
    55d0:	000001c8 	.word	0x000001c8
    55d4:	1fffad54 	.word	0x1fffad54
    55d8:	1fffad4e 	.word	0x1fffad4e
    55dc:	00000080 	.word	0x00000080

000055e0 <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
    55e0:	b580      	push	{r7, lr}
    55e2:	af00      	add	r7, sp, #0
    55e4:	4b0e      	ldr	r3, [pc, #56]	; (5620 <udc_req_std_dev_clear_feature+0x40>)
    55e6:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    55e8:	4a0e      	ldr	r2, [pc, #56]	; (5624 <udc_req_std_dev_clear_feature+0x44>)
    55ea:	589a      	ldr	r2, [r3, r2]
    55ec:	88d2      	ldrh	r2, [r2, #6]
    55ee:	2a00      	cmp	r2, #0
    55f0:	d001      	beq.n	55f6 <udc_req_std_dev_clear_feature+0x16>
		return false;
    55f2:	2300      	movs	r3, #0
    55f4:	e010      	b.n	5618 <udc_req_std_dev_clear_feature+0x38>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
    55f6:	4a0b      	ldr	r2, [pc, #44]	; (5624 <udc_req_std_dev_clear_feature+0x44>)
    55f8:	589b      	ldr	r3, [r3, r2]
    55fa:	885b      	ldrh	r3, [r3, #2]
    55fc:	2b01      	cmp	r3, #1
    55fe:	d10a      	bne.n	5616 <udc_req_std_dev_clear_feature+0x36>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
    5600:	4b09      	ldr	r3, [pc, #36]	; (5628 <udc_req_std_dev_clear_feature+0x48>)
    5602:	447b      	add	r3, pc
    5604:	881b      	ldrh	r3, [r3, #0]
    5606:	2202      	movs	r2, #2
    5608:	4393      	bics	r3, r2
    560a:	b29a      	uxth	r2, r3
    560c:	4b07      	ldr	r3, [pc, #28]	; (562c <udc_req_std_dev_clear_feature+0x4c>)
    560e:	447b      	add	r3, pc
    5610:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
    5612:	2301      	movs	r3, #1
    5614:	e000      	b.n	5618 <udc_req_std_dev_clear_feature+0x38>
	}
	return false;
    5616:	2300      	movs	r3, #0
}
    5618:	0018      	movs	r0, r3
    561a:	46bd      	mov	sp, r7
    561c:	bd80      	pop	{r7, pc}
    561e:	46c0      	nop			; (mov r8, r8)
    5620:	00009e4a 	.word	0x00009e4a
    5624:	00000208 	.word	0x00000208
    5628:	1fffacea 	.word	0x1fffacea
    562c:	1fffacde 	.word	0x1fffacde

00005630 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
    5630:	b580      	push	{r7, lr}
    5632:	af00      	add	r7, sp, #0
    5634:	4b0d      	ldr	r3, [pc, #52]	; (566c <udc_req_std_ep_clear_feature+0x3c>)
    5636:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    5638:	4a0d      	ldr	r2, [pc, #52]	; (5670 <udc_req_std_ep_clear_feature+0x40>)
    563a:	589a      	ldr	r2, [r3, r2]
    563c:	88d2      	ldrh	r2, [r2, #6]
    563e:	2a00      	cmp	r2, #0
    5640:	d001      	beq.n	5646 <udc_req_std_ep_clear_feature+0x16>
		return false;
    5642:	2300      	movs	r3, #0
    5644:	e00f      	b.n	5666 <udc_req_std_ep_clear_feature+0x36>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    5646:	4a0a      	ldr	r2, [pc, #40]	; (5670 <udc_req_std_ep_clear_feature+0x40>)
    5648:	589a      	ldr	r2, [r3, r2]
    564a:	8852      	ldrh	r2, [r2, #2]
    564c:	2a00      	cmp	r2, #0
    564e:	d109      	bne.n	5664 <udc_req_std_ep_clear_feature+0x34>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    5650:	4a07      	ldr	r2, [pc, #28]	; (5670 <udc_req_std_ep_clear_feature+0x40>)
    5652:	589a      	ldr	r2, [r3, r2]
    5654:	8892      	ldrh	r2, [r2, #4]
    5656:	b2d2      	uxtb	r2, r2
    5658:	0010      	movs	r0, r2
    565a:	4a06      	ldr	r2, [pc, #24]	; (5674 <udc_req_std_ep_clear_feature+0x44>)
    565c:	589b      	ldr	r3, [r3, r2]
    565e:	4798      	blx	r3
    5660:	0003      	movs	r3, r0
    5662:	e000      	b.n	5666 <udc_req_std_ep_clear_feature+0x36>
	}
	return false;
    5664:	2300      	movs	r3, #0
}
    5666:	0018      	movs	r0, r3
    5668:	46bd      	mov	sp, r7
    566a:	bd80      	pop	{r7, pc}
    566c:	00009dfa 	.word	0x00009dfa
    5670:	00000208 	.word	0x00000208
    5674:	000001dc 	.word	0x000001dc

00005678 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
    5678:	b580      	push	{r7, lr}
    567a:	af00      	add	r7, sp, #0
    567c:	4b0a      	ldr	r3, [pc, #40]	; (56a8 <udc_req_std_dev_set_feature+0x30>)
    567e:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    5680:	4a0a      	ldr	r2, [pc, #40]	; (56ac <udc_req_std_dev_set_feature+0x34>)
    5682:	589a      	ldr	r2, [r3, r2]
    5684:	88d2      	ldrh	r2, [r2, #6]
    5686:	2a00      	cmp	r2, #0
    5688:	d001      	beq.n	568e <udc_req_std_dev_set_feature+0x16>
		return false;
    568a:	2300      	movs	r3, #0
    568c:	e008      	b.n	56a0 <udc_req_std_dev_set_feature+0x28>
	}

	switch (udd_g_ctrlreq.req.wValue) {
    568e:	4a07      	ldr	r2, [pc, #28]	; (56ac <udc_req_std_dev_set_feature+0x34>)
    5690:	589b      	ldr	r3, [r3, r2]
    5692:	885b      	ldrh	r3, [r3, #2]
    5694:	2b01      	cmp	r3, #1
    5696:	d002      	beq.n	569e <udc_req_std_dev_set_feature+0x26>
			break;
		}
		break;
#endif
	default:
		break;
    5698:	46c0      	nop			; (mov r8, r8)
	}
	return false;
    569a:	2300      	movs	r3, #0
    569c:	e000      	b.n	56a0 <udc_req_std_dev_set_feature+0x28>
		return false;
    569e:	2300      	movs	r3, #0
}
    56a0:	0018      	movs	r0, r3
    56a2:	46bd      	mov	sp, r7
    56a4:	bd80      	pop	{r7, pc}
    56a6:	46c0      	nop			; (mov r8, r8)
    56a8:	00009db2 	.word	0x00009db2
    56ac:	00000208 	.word	0x00000208

000056b0 <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
    56b0:	b5b0      	push	{r4, r5, r7, lr}
    56b2:	af00      	add	r7, sp, #0
    56b4:	4c11      	ldr	r4, [pc, #68]	; (56fc <udc_req_std_ep_set_feature+0x4c>)
    56b6:	447c      	add	r4, pc
	if (udd_g_ctrlreq.req.wLength) {
    56b8:	4b11      	ldr	r3, [pc, #68]	; (5700 <udc_req_std_ep_set_feature+0x50>)
    56ba:	58e3      	ldr	r3, [r4, r3]
    56bc:	88db      	ldrh	r3, [r3, #6]
    56be:	2b00      	cmp	r3, #0
    56c0:	d001      	beq.n	56c6 <udc_req_std_ep_set_feature+0x16>
		return false;
    56c2:	2300      	movs	r3, #0
    56c4:	e017      	b.n	56f6 <udc_req_std_ep_set_feature+0x46>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
    56c6:	4b0e      	ldr	r3, [pc, #56]	; (5700 <udc_req_std_ep_set_feature+0x50>)
    56c8:	58e3      	ldr	r3, [r4, r3]
    56ca:	885b      	ldrh	r3, [r3, #2]
    56cc:	2b00      	cmp	r3, #0
    56ce:	d111      	bne.n	56f4 <udc_req_std_ep_set_feature+0x44>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
    56d0:	4b0b      	ldr	r3, [pc, #44]	; (5700 <udc_req_std_ep_set_feature+0x50>)
    56d2:	58e3      	ldr	r3, [r4, r3]
    56d4:	889b      	ldrh	r3, [r3, #4]
    56d6:	b2db      	uxtb	r3, r3
    56d8:	0018      	movs	r0, r3
    56da:	4b0a      	ldr	r3, [pc, #40]	; (5704 <udc_req_std_ep_set_feature+0x54>)
    56dc:	58e3      	ldr	r3, [r4, r3]
    56de:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
    56e0:	4b07      	ldr	r3, [pc, #28]	; (5700 <udc_req_std_ep_set_feature+0x50>)
    56e2:	58e3      	ldr	r3, [r4, r3]
    56e4:	889b      	ldrh	r3, [r3, #4]
    56e6:	b2db      	uxtb	r3, r3
    56e8:	0018      	movs	r0, r3
    56ea:	4b07      	ldr	r3, [pc, #28]	; (5708 <udc_req_std_ep_set_feature+0x58>)
    56ec:	58e3      	ldr	r3, [r4, r3]
    56ee:	4798      	blx	r3
    56f0:	0003      	movs	r3, r0
    56f2:	e000      	b.n	56f6 <udc_req_std_ep_set_feature+0x46>
	}
	return false;
    56f4:	2300      	movs	r3, #0
}
    56f6:	0018      	movs	r0, r3
    56f8:	46bd      	mov	sp, r7
    56fa:	bdb0      	pop	{r4, r5, r7, pc}
    56fc:	00009d7a 	.word	0x00009d7a
    5700:	00000208 	.word	0x00000208
    5704:	000001d8 	.word	0x000001d8
    5708:	0000014c 	.word	0x0000014c

0000570c <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
    570c:	b580      	push	{r7, lr}
    570e:	af00      	add	r7, sp, #0
    5710:	4b07      	ldr	r3, [pc, #28]	; (5730 <udc_valid_address+0x24>)
    5712:	447b      	add	r3, pc
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
    5714:	4a07      	ldr	r2, [pc, #28]	; (5734 <udc_valid_address+0x28>)
    5716:	589a      	ldr	r2, [r3, r2]
    5718:	8852      	ldrh	r2, [r2, #2]
    571a:	b2d2      	uxtb	r2, r2
    571c:	217f      	movs	r1, #127	; 0x7f
    571e:	400a      	ands	r2, r1
    5720:	b2d2      	uxtb	r2, r2
    5722:	0010      	movs	r0, r2
    5724:	4a04      	ldr	r2, [pc, #16]	; (5738 <udc_valid_address+0x2c>)
    5726:	589b      	ldr	r3, [r3, r2]
    5728:	4798      	blx	r3
}
    572a:	46c0      	nop			; (mov r8, r8)
    572c:	46bd      	mov	sp, r7
    572e:	bd80      	pop	{r7, pc}
    5730:	00009d1e 	.word	0x00009d1e
    5734:	00000208 	.word	0x00000208
    5738:	00000304 	.word	0x00000304

0000573c <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
    573c:	b580      	push	{r7, lr}
    573e:	af00      	add	r7, sp, #0
    5740:	4b08      	ldr	r3, [pc, #32]	; (5764 <udc_req_std_dev_set_address+0x28>)
    5742:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength) {
    5744:	4a08      	ldr	r2, [pc, #32]	; (5768 <udc_req_std_dev_set_address+0x2c>)
    5746:	589a      	ldr	r2, [r3, r2]
    5748:	88d2      	ldrh	r2, [r2, #6]
    574a:	2a00      	cmp	r2, #0
    574c:	d001      	beq.n	5752 <udc_req_std_dev_set_address+0x16>
		return false;
    574e:	2300      	movs	r3, #0
    5750:	e005      	b.n	575e <udc_req_std_dev_set_address+0x22>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
    5752:	4a05      	ldr	r2, [pc, #20]	; (5768 <udc_req_std_dev_set_address+0x2c>)
    5754:	589b      	ldr	r3, [r3, r2]
    5756:	4a05      	ldr	r2, [pc, #20]	; (576c <udc_req_std_dev_set_address+0x30>)
    5758:	447a      	add	r2, pc
    575a:	611a      	str	r2, [r3, #16]
	return true;
    575c:	2301      	movs	r3, #1
}
    575e:	0018      	movs	r0, r3
    5760:	46bd      	mov	sp, r7
    5762:	bd80      	pop	{r7, pc}
    5764:	00009cee 	.word	0x00009cee
    5768:	00000208 	.word	0x00000208
    576c:	ffffffb1 	.word	0xffffffb1

00005770 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
    5770:	b590      	push	{r4, r7, lr}
    5772:	b085      	sub	sp, #20
    5774:	af00      	add	r7, sp, #0
    5776:	4c3d      	ldr	r4, [pc, #244]	; (586c <udc_req_std_dev_get_str_desc+0xfc>)
    5778:	447c      	add	r4, pc
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
    577a:	1dfb      	adds	r3, r7, #7
    577c:	2200      	movs	r2, #0
    577e:	701a      	strb	r2, [r3, #0]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
    5780:	4b3b      	ldr	r3, [pc, #236]	; (5870 <udc_req_std_dev_get_str_desc+0x100>)
    5782:	58e3      	ldr	r3, [r4, r3]
    5784:	885b      	ldrh	r3, [r3, #2]
    5786:	001a      	movs	r2, r3
    5788:	23ff      	movs	r3, #255	; 0xff
    578a:	4013      	ands	r3, r2
    578c:	2b03      	cmp	r3, #3
    578e:	d82a      	bhi.n	57e6 <udc_req_std_dev_get_str_desc+0x76>
    5790:	0018      	movs	r0, r3
    5792:	f008 f8b3 	bl	d8fc <__gnu_thumb1_case_si>
    5796:	46c0      	nop			; (mov r8, r8)
    5798:	00000010 	.word	0x00000010
    579c:	00000020 	.word	0x00000020
    57a0:	0000002e 	.word	0x0000002e
    57a4:	0000003c 	.word	0x0000003c
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
    57a8:	4b32      	ldr	r3, [pc, #200]	; (5874 <udc_req_std_dev_get_str_desc+0x104>)
    57aa:	447b      	add	r3, pc
    57ac:	2104      	movs	r1, #4
    57ae:	0018      	movs	r0, r3
    57b0:	4b31      	ldr	r3, [pc, #196]	; (5878 <udc_req_std_dev_get_str_desc+0x108>)
    57b2:	58e3      	ldr	r3, [r4, r3]
    57b4:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
    57b6:	e018      	b.n	57ea <udc_req_std_dev_get_str_desc+0x7a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
    57b8:	1dfb      	adds	r3, r7, #7
    57ba:	220b      	movs	r2, #11
    57bc:	701a      	strb	r2, [r3, #0]
		str = udc_string_manufacturer_name;
    57be:	4b2f      	ldr	r3, [pc, #188]	; (587c <udc_req_std_dev_get_str_desc+0x10c>)
    57c0:	447b      	add	r3, pc
    57c2:	60bb      	str	r3, [r7, #8]
		break;
    57c4:	e011      	b.n	57ea <udc_req_std_dev_get_str_desc+0x7a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
    57c6:	1dfb      	adds	r3, r7, #7
    57c8:	2210      	movs	r2, #16
    57ca:	701a      	strb	r2, [r3, #0]
		str = udc_string_product_name;
    57cc:	4b2c      	ldr	r3, [pc, #176]	; (5880 <udc_req_std_dev_get_str_desc+0x110>)
    57ce:	447b      	add	r3, pc
    57d0:	60bb      	str	r3, [r7, #8]
		break;
    57d2:	e00a      	b.n	57ea <udc_req_std_dev_get_str_desc+0x7a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
    57d4:	1dfb      	adds	r3, r7, #7
    57d6:	2207      	movs	r2, #7
    57d8:	701a      	strb	r2, [r3, #0]
		str = udc_get_string_serial_name();
    57da:	4b2a      	ldr	r3, [pc, #168]	; (5884 <udc_req_std_dev_get_str_desc+0x114>)
    57dc:	447b      	add	r3, pc
    57de:	4798      	blx	r3
    57e0:	0003      	movs	r3, r0
    57e2:	60bb      	str	r3, [r7, #8]
		break;
    57e4:	e001      	b.n	57ea <udc_req_std_dev_get_str_desc+0x7a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
    57e6:	2300      	movs	r3, #0
    57e8:	e03c      	b.n	5864 <udc_req_std_dev_get_str_desc+0xf4>
	}

	if (str_length) {
    57ea:	1dfb      	adds	r3, r7, #7
    57ec:	781b      	ldrb	r3, [r3, #0]
    57ee:	2b00      	cmp	r3, #0
    57f0:	d037      	beq.n	5862 <udc_req_std_dev_get_str_desc+0xf2>
		for(i = 0; i < str_length; i++) {
    57f2:	230f      	movs	r3, #15
    57f4:	18fb      	adds	r3, r7, r3
    57f6:	2200      	movs	r2, #0
    57f8:	701a      	strb	r2, [r3, #0]
    57fa:	e017      	b.n	582c <udc_req_std_dev_get_str_desc+0xbc>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
    57fc:	230f      	movs	r3, #15
    57fe:	18fb      	adds	r3, r7, r3
    5800:	781b      	ldrb	r3, [r3, #0]
    5802:	220f      	movs	r2, #15
    5804:	18ba      	adds	r2, r7, r2
    5806:	7812      	ldrb	r2, [r2, #0]
    5808:	68b9      	ldr	r1, [r7, #8]
    580a:	188a      	adds	r2, r1, r2
    580c:	7812      	ldrb	r2, [r2, #0]
    580e:	b291      	uxth	r1, r2
    5810:	4a1d      	ldr	r2, [pc, #116]	; (5888 <udc_req_std_dev_get_str_desc+0x118>)
    5812:	447a      	add	r2, pc
    5814:	005b      	lsls	r3, r3, #1
    5816:	18d3      	adds	r3, r2, r3
    5818:	3302      	adds	r3, #2
    581a:	1c0a      	adds	r2, r1, #0
    581c:	801a      	strh	r2, [r3, #0]
		for(i = 0; i < str_length; i++) {
    581e:	230f      	movs	r3, #15
    5820:	18fb      	adds	r3, r7, r3
    5822:	781a      	ldrb	r2, [r3, #0]
    5824:	230f      	movs	r3, #15
    5826:	18fb      	adds	r3, r7, r3
    5828:	3201      	adds	r2, #1
    582a:	701a      	strb	r2, [r3, #0]
    582c:	230f      	movs	r3, #15
    582e:	18fa      	adds	r2, r7, r3
    5830:	1dfb      	adds	r3, r7, #7
    5832:	7812      	ldrb	r2, [r2, #0]
    5834:	781b      	ldrb	r3, [r3, #0]
    5836:	429a      	cmp	r2, r3
    5838:	d3e0      	bcc.n	57fc <udc_req_std_dev_get_str_desc+0x8c>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
    583a:	1dfb      	adds	r3, r7, #7
    583c:	781b      	ldrb	r3, [r3, #0]
    583e:	3301      	adds	r3, #1
    5840:	b2db      	uxtb	r3, r3
    5842:	18db      	adds	r3, r3, r3
    5844:	b2da      	uxtb	r2, r3
    5846:	4b11      	ldr	r3, [pc, #68]	; (588c <udc_req_std_dev_get_str_desc+0x11c>)
    5848:	447b      	add	r3, pc
    584a:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
    584c:	4b10      	ldr	r3, [pc, #64]	; (5890 <udc_req_std_dev_get_str_desc+0x120>)
    584e:	447b      	add	r3, pc
    5850:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
    5852:	b29b      	uxth	r3, r3
    5854:	4a0f      	ldr	r2, [pc, #60]	; (5894 <udc_req_std_dev_get_str_desc+0x124>)
    5856:	447a      	add	r2, pc
    5858:	0019      	movs	r1, r3
    585a:	0010      	movs	r0, r2
    585c:	4b06      	ldr	r3, [pc, #24]	; (5878 <udc_req_std_dev_get_str_desc+0x108>)
    585e:	58e3      	ldr	r3, [r4, r3]
    5860:	4798      	blx	r3
	}

	return true;
    5862:	2301      	movs	r3, #1
}
    5864:	0018      	movs	r0, r3
    5866:	46bd      	mov	sp, r7
    5868:	b005      	add	sp, #20
    586a:	bd90      	pop	{r4, r7, pc}
    586c:	00009cb8 	.word	0x00009cb8
    5870:	00000208 	.word	0x00000208
    5874:	1fffa91e 	.word	0x1fffa91e
    5878:	00000080 	.word	0x00000080
    587c:	1fffa90c 	.word	0x1fffa90c
    5880:	1fffa90a 	.word	0x1fffa90a
    5884:	fffff955 	.word	0xfffff955
    5888:	1fffa8da 	.word	0x1fffa8da
    588c:	1fffa8a4 	.word	0x1fffa8a4
    5890:	1fffa89e 	.word	0x1fffa89e
    5894:	1fffa896 	.word	0x1fffa896

00005898 <udc_req_std_dev_get_descriptor>:
 * \brief Standard device request to get descriptors about USB device
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_descriptor(void)
{
    5898:	b590      	push	{r4, r7, lr}
    589a:	b083      	sub	sp, #12
    589c:	af00      	add	r7, sp, #0
    589e:	4c51      	ldr	r4, [pc, #324]	; (59e4 <udc_req_std_dev_get_descriptor+0x14c>)
    58a0:	447c      	add	r4, pc
	uint8_t conf_num;

	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
    58a2:	4b51      	ldr	r3, [pc, #324]	; (59e8 <udc_req_std_dev_get_descriptor+0x150>)
    58a4:	58e3      	ldr	r3, [r4, r3]
    58a6:	885a      	ldrh	r2, [r3, #2]
    58a8:	1dfb      	adds	r3, r7, #7
    58aa:	701a      	strb	r2, [r3, #0]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
    58ac:	4b4e      	ldr	r3, [pc, #312]	; (59e8 <udc_req_std_dev_get_descriptor+0x150>)
    58ae:	58e3      	ldr	r3, [r4, r3]
    58b0:	885b      	ldrh	r3, [r3, #2]
    58b2:	0a1b      	lsrs	r3, r3, #8
    58b4:	b29b      	uxth	r3, r3
    58b6:	b2db      	uxtb	r3, r3
    58b8:	3b01      	subs	r3, #1
    58ba:	2b0e      	cmp	r3, #14
    58bc:	d900      	bls.n	58c0 <udc_req_std_dev_get_descriptor+0x28>
    58be:	e07b      	b.n	59b8 <udc_req_std_dev_get_descriptor+0x120>
    58c0:	0018      	movs	r0, r3
    58c2:	f008 f81b 	bl	d8fc <__gnu_thumb1_case_si>
    58c6:	46c0      	nop			; (mov r8, r8)
    58c8:	0000003c 	.word	0x0000003c
    58cc:	00000058 	.word	0x00000058
    58d0:	000000d8 	.word	0x000000d8
    58d4:	000000f0 	.word	0x000000f0
    58d8:	000000f0 	.word	0x000000f0
    58dc:	000000f0 	.word	0x000000f0
    58e0:	000000f0 	.word	0x000000f0
    58e4:	000000f0 	.word	0x000000f0
    58e8:	000000f0 	.word	0x000000f0
    58ec:	000000f0 	.word	0x000000f0
    58f0:	000000f0 	.word	0x000000f0
    58f4:	000000f0 	.word	0x000000f0
    58f8:	000000f0 	.word	0x000000f0
    58fc:	000000f0 	.word	0x000000f0
    5900:	000000aa 	.word	0x000000aa
				udc_config.confdev_hs->bLength);
		} else
#endif
		{
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
    5904:	4b39      	ldr	r3, [pc, #228]	; (59ec <udc_req_std_dev_get_descriptor+0x154>)
    5906:	58e3      	ldr	r3, [r4, r3]
    5908:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
    590a:	4b38      	ldr	r3, [pc, #224]	; (59ec <udc_req_std_dev_get_descriptor+0x154>)
    590c:	58e3      	ldr	r3, [r4, r3]
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
    5912:	b29b      	uxth	r3, r3
    5914:	0019      	movs	r1, r3
    5916:	0010      	movs	r0, r2
    5918:	4b35      	ldr	r3, [pc, #212]	; (59f0 <udc_req_std_dev_get_descriptor+0x158>)
    591a:	58e3      	ldr	r3, [r4, r3]
    591c:	4798      	blx	r3
		}
		break;
    591e:	e04e      	b.n	59be <udc_req_std_dev_get_descriptor+0x126>
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
    5920:	4b32      	ldr	r3, [pc, #200]	; (59ec <udc_req_std_dev_get_descriptor+0x154>)
    5922:	58e3      	ldr	r3, [r4, r3]
    5924:	681b      	ldr	r3, [r3, #0]
    5926:	7c5b      	ldrb	r3, [r3, #17]
    5928:	1dfa      	adds	r2, r7, #7
    592a:	7812      	ldrb	r2, [r2, #0]
    592c:	429a      	cmp	r2, r3
    592e:	d301      	bcc.n	5934 <udc_req_std_dev_get_descriptor+0x9c>
					bNumConfigurations) {
				return false;
    5930:	2300      	movs	r3, #0
    5932:	e053      	b.n	59dc <udc_req_std_dev_get_descriptor+0x144>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
    5934:	4b2d      	ldr	r3, [pc, #180]	; (59ec <udc_req_std_dev_get_descriptor+0x154>)
    5936:	58e3      	ldr	r3, [r4, r3]
    5938:	685a      	ldr	r2, [r3, #4]
    593a:	1dfb      	adds	r3, r7, #7
    593c:	781b      	ldrb	r3, [r3, #0]
    593e:	00db      	lsls	r3, r3, #3
    5940:	18d3      	adds	r3, r2, r3
    5942:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
    5944:	4b29      	ldr	r3, [pc, #164]	; (59ec <udc_req_std_dev_get_descriptor+0x154>)
    5946:	58e3      	ldr	r3, [r4, r3]
    5948:	685a      	ldr	r2, [r3, #4]
    594a:	1dfb      	adds	r3, r7, #7
    594c:	781b      	ldrb	r3, [r3, #0]
    594e:	00db      	lsls	r3, r3, #3
    5950:	18d3      	adds	r3, r2, r3
    5952:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
    5954:	789a      	ldrb	r2, [r3, #2]
    5956:	78db      	ldrb	r3, [r3, #3]
    5958:	021b      	lsls	r3, r3, #8
    595a:	4313      	orrs	r3, r2
    595c:	b29b      	uxth	r3, r3
    595e:	0019      	movs	r1, r3
    5960:	4b23      	ldr	r3, [pc, #140]	; (59f0 <udc_req_std_dev_get_descriptor+0x158>)
    5962:	58e3      	ldr	r3, [r4, r3]
    5964:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
    5966:	4b20      	ldr	r3, [pc, #128]	; (59e8 <udc_req_std_dev_get_descriptor+0x150>)
    5968:	58e3      	ldr	r3, [r4, r3]
    596a:	689b      	ldr	r3, [r3, #8]
    596c:	2202      	movs	r2, #2
    596e:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
    5970:	e025      	b.n	59be <udc_req_std_dev_get_descriptor+0x126>
		break;
#endif

	case USB_DT_BOS:
		// Device BOS descriptor requested
		if (udc_config.conf_bos == NULL) {
    5972:	4b1e      	ldr	r3, [pc, #120]	; (59ec <udc_req_std_dev_get_descriptor+0x154>)
    5974:	58e3      	ldr	r3, [r4, r3]
    5976:	689b      	ldr	r3, [r3, #8]
    5978:	2b00      	cmp	r3, #0
    597a:	d101      	bne.n	5980 <udc_req_std_dev_get_descriptor+0xe8>
			return false;
    597c:	2300      	movs	r3, #0
    597e:	e02d      	b.n	59dc <udc_req_std_dev_get_descriptor+0x144>
		}
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    5980:	4b1a      	ldr	r3, [pc, #104]	; (59ec <udc_req_std_dev_get_descriptor+0x154>)
    5982:	58e3      	ldr	r3, [r4, r3]
    5984:	6898      	ldr	r0, [r3, #8]
				udc_config.conf_bos->wTotalLength);
    5986:	4b19      	ldr	r3, [pc, #100]	; (59ec <udc_req_std_dev_get_descriptor+0x154>)
    5988:	58e3      	ldr	r3, [r4, r3]
    598a:	689b      	ldr	r3, [r3, #8]
		udd_set_setup_payload( (uint8_t *) udc_config.conf_bos,
    598c:	789a      	ldrb	r2, [r3, #2]
    598e:	78db      	ldrb	r3, [r3, #3]
    5990:	021b      	lsls	r3, r3, #8
    5992:	4313      	orrs	r3, r2
    5994:	b29b      	uxth	r3, r3
    5996:	0019      	movs	r1, r3
    5998:	4b15      	ldr	r3, [pc, #84]	; (59f0 <udc_req_std_dev_get_descriptor+0x158>)
    599a:	58e3      	ldr	r3, [r4, r3]
    599c:	4798      	blx	r3
		break;
    599e:	e00e      	b.n	59be <udc_req_std_dev_get_descriptor+0x126>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
    59a0:	4b14      	ldr	r3, [pc, #80]	; (59f4 <udc_req_std_dev_get_descriptor+0x15c>)
    59a2:	447b      	add	r3, pc
    59a4:	4798      	blx	r3
    59a6:	0003      	movs	r3, r0
    59a8:	001a      	movs	r2, r3
    59aa:	2301      	movs	r3, #1
    59ac:	4053      	eors	r3, r2
    59ae:	b2db      	uxtb	r3, r3
    59b0:	2b00      	cmp	r3, #0
    59b2:	d003      	beq.n	59bc <udc_req_std_dev_get_descriptor+0x124>
			return false;
    59b4:	2300      	movs	r3, #0
    59b6:	e011      	b.n	59dc <udc_req_std_dev_get_descriptor+0x144>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
    59b8:	2300      	movs	r3, #0
    59ba:	e00f      	b.n	59dc <udc_req_std_dev_get_descriptor+0x144>
		break;
    59bc:	46c0      	nop			; (mov r8, r8)
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
    59be:	4b0a      	ldr	r3, [pc, #40]	; (59e8 <udc_req_std_dev_get_descriptor+0x150>)
    59c0:	58e3      	ldr	r3, [r4, r3]
    59c2:	88da      	ldrh	r2, [r3, #6]
    59c4:	4b08      	ldr	r3, [pc, #32]	; (59e8 <udc_req_std_dev_get_descriptor+0x150>)
    59c6:	58e3      	ldr	r3, [r4, r3]
    59c8:	899b      	ldrh	r3, [r3, #12]
    59ca:	429a      	cmp	r2, r3
    59cc:	d205      	bcs.n	59da <udc_req_std_dev_get_descriptor+0x142>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
    59ce:	4b06      	ldr	r3, [pc, #24]	; (59e8 <udc_req_std_dev_get_descriptor+0x150>)
    59d0:	58e3      	ldr	r3, [r4, r3]
    59d2:	88da      	ldrh	r2, [r3, #6]
    59d4:	4b04      	ldr	r3, [pc, #16]	; (59e8 <udc_req_std_dev_get_descriptor+0x150>)
    59d6:	58e3      	ldr	r3, [r4, r3]
    59d8:	819a      	strh	r2, [r3, #12]
	}
	return true;
    59da:	2301      	movs	r3, #1
}
    59dc:	0018      	movs	r0, r3
    59de:	46bd      	mov	sp, r7
    59e0:	b003      	add	sp, #12
    59e2:	bd90      	pop	{r4, r7, pc}
    59e4:	00009b90 	.word	0x00009b90
    59e8:	00000208 	.word	0x00000208
    59ec:	00000134 	.word	0x00000134
    59f0:	00000080 	.word	0x00000080
    59f4:	fffffdcb 	.word	0xfffffdcb

000059f8 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
    59f8:	b580      	push	{r7, lr}
    59fa:	af00      	add	r7, sp, #0
    59fc:	4b09      	ldr	r3, [pc, #36]	; (5a24 <udc_req_std_dev_get_configuration+0x2c>)
    59fe:	447b      	add	r3, pc
	if (udd_g_ctrlreq.req.wLength != 1) {
    5a00:	4a09      	ldr	r2, [pc, #36]	; (5a28 <udc_req_std_dev_get_configuration+0x30>)
    5a02:	589a      	ldr	r2, [r3, r2]
    5a04:	88d2      	ldrh	r2, [r2, #6]
    5a06:	2a01      	cmp	r2, #1
    5a08:	d001      	beq.n	5a0e <udc_req_std_dev_get_configuration+0x16>
		return false;
    5a0a:	2300      	movs	r3, #0
    5a0c:	e007      	b.n	5a1e <udc_req_std_dev_get_configuration+0x26>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
    5a0e:	4a07      	ldr	r2, [pc, #28]	; (5a2c <udc_req_std_dev_get_configuration+0x34>)
    5a10:	447a      	add	r2, pc
    5a12:	2101      	movs	r1, #1
    5a14:	0010      	movs	r0, r2
    5a16:	4a06      	ldr	r2, [pc, #24]	; (5a30 <udc_req_std_dev_get_configuration+0x38>)
    5a18:	589b      	ldr	r3, [r3, r2]
    5a1a:	4798      	blx	r3
	return true;
    5a1c:	2301      	movs	r3, #1
}
    5a1e:	0018      	movs	r0, r3
    5a20:	46bd      	mov	sp, r7
    5a22:	bd80      	pop	{r7, pc}
    5a24:	00009a32 	.word	0x00009a32
    5a28:	00000208 	.word	0x00000208
    5a2c:	1fffa8e4 	.word	0x1fffa8e4
    5a30:	00000080 	.word	0x00000080

00005a34 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
    5a34:	b590      	push	{r4, r7, lr}
    5a36:	b083      	sub	sp, #12
    5a38:	af00      	add	r7, sp, #0
    5a3a:	4c32      	ldr	r4, [pc, #200]	; (5b04 <udc_req_std_dev_set_configuration+0xd0>)
    5a3c:	447c      	add	r4, pc
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
    5a3e:	4b32      	ldr	r3, [pc, #200]	; (5b08 <udc_req_std_dev_set_configuration+0xd4>)
    5a40:	58e3      	ldr	r3, [r4, r3]
    5a42:	88db      	ldrh	r3, [r3, #6]
    5a44:	2b00      	cmp	r3, #0
    5a46:	d001      	beq.n	5a4c <udc_req_std_dev_set_configuration+0x18>
		return false;
    5a48:	2300      	movs	r3, #0
    5a4a:	e056      	b.n	5afa <udc_req_std_dev_set_configuration+0xc6>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
    5a4c:	4b2f      	ldr	r3, [pc, #188]	; (5b0c <udc_req_std_dev_set_configuration+0xd8>)
    5a4e:	58e3      	ldr	r3, [r4, r3]
    5a50:	4798      	blx	r3
    5a52:	1e03      	subs	r3, r0, #0
    5a54:	d101      	bne.n	5a5a <udc_req_std_dev_set_configuration+0x26>
		return false;
    5a56:	2300      	movs	r3, #0
    5a58:	e04f      	b.n	5afa <udc_req_std_dev_set_configuration+0xc6>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    5a5a:	4b2b      	ldr	r3, [pc, #172]	; (5b08 <udc_req_std_dev_set_configuration+0xd4>)
    5a5c:	58e3      	ldr	r3, [r4, r3]
    5a5e:	885b      	ldrh	r3, [r3, #2]
    5a60:	001a      	movs	r2, r3
    5a62:	23ff      	movs	r3, #255	; 0xff
    5a64:	401a      	ands	r2, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
    5a66:	4b2a      	ldr	r3, [pc, #168]	; (5b10 <udc_req_std_dev_set_configuration+0xdc>)
    5a68:	58e3      	ldr	r3, [r4, r3]
    5a6a:	681b      	ldr	r3, [r3, #0]
    5a6c:	7c5b      	ldrb	r3, [r3, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
    5a6e:	429a      	cmp	r2, r3
    5a70:	dd01      	ble.n	5a76 <udc_req_std_dev_set_configuration+0x42>
			return false;
    5a72:	2300      	movs	r3, #0
    5a74:	e041      	b.n	5afa <udc_req_std_dev_set_configuration+0xc6>
		}
	}

	// Reset current configuration
	udc_reset();
    5a76:	4b27      	ldr	r3, [pc, #156]	; (5b14 <udc_req_std_dev_set_configuration+0xe0>)
    5a78:	58e3      	ldr	r3, [r4, r3]
    5a7a:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
    5a7c:	4b22      	ldr	r3, [pc, #136]	; (5b08 <udc_req_std_dev_set_configuration+0xd4>)
    5a7e:	58e3      	ldr	r3, [r4, r3]
    5a80:	885b      	ldrh	r3, [r3, #2]
    5a82:	b2da      	uxtb	r2, r3
    5a84:	4b24      	ldr	r3, [pc, #144]	; (5b18 <udc_req_std_dev_set_configuration+0xe4>)
    5a86:	447b      	add	r3, pc
    5a88:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
    5a8a:	4b24      	ldr	r3, [pc, #144]	; (5b1c <udc_req_std_dev_set_configuration+0xe8>)
    5a8c:	447b      	add	r3, pc
    5a8e:	781b      	ldrb	r3, [r3, #0]
    5a90:	2b00      	cmp	r3, #0
    5a92:	d101      	bne.n	5a98 <udc_req_std_dev_set_configuration+0x64>
		return true; // Default empty configuration requested
    5a94:	2301      	movs	r3, #1
    5a96:	e030      	b.n	5afa <udc_req_std_dev_set_configuration+0xc6>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
    5a98:	4b1d      	ldr	r3, [pc, #116]	; (5b10 <udc_req_std_dev_set_configuration+0xdc>)
    5a9a:	58e3      	ldr	r3, [r4, r3]
    5a9c:	685a      	ldr	r2, [r3, #4]
    5a9e:	4b20      	ldr	r3, [pc, #128]	; (5b20 <udc_req_std_dev_set_configuration+0xec>)
    5aa0:	447b      	add	r3, pc
    5aa2:	781b      	ldrb	r3, [r3, #0]
    5aa4:	491f      	ldr	r1, [pc, #124]	; (5b24 <udc_req_std_dev_set_configuration+0xf0>)
    5aa6:	468c      	mov	ip, r1
    5aa8:	4463      	add	r3, ip
    5aaa:	00db      	lsls	r3, r3, #3
    5aac:	18d2      	adds	r2, r2, r3
    5aae:	4b1e      	ldr	r3, [pc, #120]	; (5b28 <udc_req_std_dev_set_configuration+0xf4>)
    5ab0:	447b      	add	r3, pc
    5ab2:	601a      	str	r2, [r3, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    5ab4:	1dfb      	adds	r3, r7, #7
    5ab6:	2200      	movs	r2, #0
    5ab8:	701a      	strb	r2, [r3, #0]
    5aba:	e014      	b.n	5ae6 <udc_req_std_dev_set_configuration+0xb2>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
    5abc:	1dfb      	adds	r3, r7, #7
    5abe:	781b      	ldrb	r3, [r3, #0]
    5ac0:	2100      	movs	r1, #0
    5ac2:	0018      	movs	r0, r3
    5ac4:	4b19      	ldr	r3, [pc, #100]	; (5b2c <udc_req_std_dev_set_configuration+0xf8>)
    5ac6:	447b      	add	r3, pc
    5ac8:	4798      	blx	r3
    5aca:	0003      	movs	r3, r0
    5acc:	001a      	movs	r2, r3
    5ace:	2301      	movs	r3, #1
    5ad0:	4053      	eors	r3, r2
    5ad2:	b2db      	uxtb	r3, r3
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d001      	beq.n	5adc <udc_req_std_dev_set_configuration+0xa8>
			return false;
    5ad8:	2300      	movs	r3, #0
    5ada:	e00e      	b.n	5afa <udc_req_std_dev_set_configuration+0xc6>
			iface_num++) {
    5adc:	1dfb      	adds	r3, r7, #7
    5ade:	781a      	ldrb	r2, [r3, #0]
    5ae0:	1dfb      	adds	r3, r7, #7
    5ae2:	3201      	adds	r2, #1
    5ae4:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    5ae6:	4b12      	ldr	r3, [pc, #72]	; (5b30 <udc_req_std_dev_set_configuration+0xfc>)
    5ae8:	447b      	add	r3, pc
    5aea:	681b      	ldr	r3, [r3, #0]
    5aec:	681b      	ldr	r3, [r3, #0]
    5aee:	791b      	ldrb	r3, [r3, #4]
    5af0:	1dfa      	adds	r2, r7, #7
    5af2:	7812      	ldrb	r2, [r2, #0]
    5af4:	429a      	cmp	r2, r3
    5af6:	d3e1      	bcc.n	5abc <udc_req_std_dev_set_configuration+0x88>
		}
	}
	return true;
    5af8:	2301      	movs	r3, #1
}
    5afa:	0018      	movs	r0, r3
    5afc:	46bd      	mov	sp, r7
    5afe:	b003      	add	sp, #12
    5b00:	bd90      	pop	{r4, r7, pc}
    5b02:	46c0      	nop			; (mov r8, r8)
    5b04:	000099f4 	.word	0x000099f4
    5b08:	00000208 	.word	0x00000208
    5b0c:	0000004c 	.word	0x0000004c
    5b10:	00000134 	.word	0x00000134
    5b14:	000000c8 	.word	0x000000c8
    5b18:	1fffa86e 	.word	0x1fffa86e
    5b1c:	1fffa868 	.word	0x1fffa868
    5b20:	1fffa854 	.word	0x1fffa854
    5b24:	1fffffff 	.word	0x1fffffff
    5b28:	1fffa848 	.word	0x1fffa848
    5b2c:	fffff8b7 	.word	0xfffff8b7
    5b30:	1fffa810 	.word	0x1fffa810

00005b34 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
    5b34:	b590      	push	{r4, r7, lr}
    5b36:	b083      	sub	sp, #12
    5b38:	af00      	add	r7, sp, #0
    5b3a:	4c27      	ldr	r4, [pc, #156]	; (5bd8 <udc_req_std_iface_get_setting+0xa4>)
    5b3c:	447c      	add	r4, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
    5b3e:	4b27      	ldr	r3, [pc, #156]	; (5bdc <udc_req_std_iface_get_setting+0xa8>)
    5b40:	58e3      	ldr	r3, [r4, r3]
    5b42:	88db      	ldrh	r3, [r3, #6]
    5b44:	2b01      	cmp	r3, #1
    5b46:	d001      	beq.n	5b4c <udc_req_std_iface_get_setting+0x18>
		return false; // Error in request
    5b48:	2300      	movs	r3, #0
    5b4a:	e040      	b.n	5bce <udc_req_std_iface_get_setting+0x9a>
	}
	if (!udc_num_configuration) {
    5b4c:	4b24      	ldr	r3, [pc, #144]	; (5be0 <udc_req_std_iface_get_setting+0xac>)
    5b4e:	447b      	add	r3, pc
    5b50:	781b      	ldrb	r3, [r3, #0]
    5b52:	2b00      	cmp	r3, #0
    5b54:	d101      	bne.n	5b5a <udc_req_std_iface_get_setting+0x26>
		return false; // The device is not is configured state yet
    5b56:	2300      	movs	r3, #0
    5b58:	e039      	b.n	5bce <udc_req_std_iface_get_setting+0x9a>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    5b5a:	4b20      	ldr	r3, [pc, #128]	; (5bdc <udc_req_std_iface_get_setting+0xa8>)
    5b5c:	58e3      	ldr	r3, [r4, r3]
    5b5e:	889a      	ldrh	r2, [r3, #4]
    5b60:	1dfb      	adds	r3, r7, #7
    5b62:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    5b64:	4b1f      	ldr	r3, [pc, #124]	; (5be4 <udc_req_std_iface_get_setting+0xb0>)
    5b66:	447b      	add	r3, pc
    5b68:	681b      	ldr	r3, [r3, #0]
    5b6a:	681b      	ldr	r3, [r3, #0]
    5b6c:	791b      	ldrb	r3, [r3, #4]
    5b6e:	1dfa      	adds	r2, r7, #7
    5b70:	7812      	ldrb	r2, [r2, #0]
    5b72:	429a      	cmp	r2, r3
    5b74:	d301      	bcc.n	5b7a <udc_req_std_iface_get_setting+0x46>
		return false;
    5b76:	2300      	movs	r3, #0
    5b78:	e029      	b.n	5bce <udc_req_std_iface_get_setting+0x9a>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    5b7a:	1dfb      	adds	r3, r7, #7
    5b7c:	781b      	ldrb	r3, [r3, #0]
    5b7e:	2100      	movs	r1, #0
    5b80:	0018      	movs	r0, r3
    5b82:	4b19      	ldr	r3, [pc, #100]	; (5be8 <udc_req_std_iface_get_setting+0xb4>)
    5b84:	447b      	add	r3, pc
    5b86:	4798      	blx	r3
    5b88:	0003      	movs	r3, r0
    5b8a:	001a      	movs	r2, r3
    5b8c:	2301      	movs	r3, #1
    5b8e:	4053      	eors	r3, r2
    5b90:	b2db      	uxtb	r3, r3
    5b92:	2b00      	cmp	r3, #0
    5b94:	d001      	beq.n	5b9a <udc_req_std_iface_get_setting+0x66>
		return false;
    5b96:	2300      	movs	r3, #0
    5b98:	e019      	b.n	5bce <udc_req_std_iface_get_setting+0x9a>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    5b9a:	4b14      	ldr	r3, [pc, #80]	; (5bec <udc_req_std_iface_get_setting+0xb8>)
    5b9c:	447b      	add	r3, pc
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	685a      	ldr	r2, [r3, #4]
    5ba2:	1dfb      	adds	r3, r7, #7
    5ba4:	781b      	ldrb	r3, [r3, #0]
    5ba6:	009b      	lsls	r3, r3, #2
    5ba8:	18d3      	adds	r3, r2, r3
    5baa:	681b      	ldr	r3, [r3, #0]
    5bac:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
    5bae:	683b      	ldr	r3, [r7, #0]
    5bb0:	68db      	ldr	r3, [r3, #12]
    5bb2:	4798      	blx	r3
    5bb4:	0003      	movs	r3, r0
    5bb6:	001a      	movs	r2, r3
    5bb8:	4b0d      	ldr	r3, [pc, #52]	; (5bf0 <udc_req_std_iface_get_setting+0xbc>)
    5bba:	447b      	add	r3, pc
    5bbc:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
    5bbe:	4b0d      	ldr	r3, [pc, #52]	; (5bf4 <udc_req_std_iface_get_setting+0xc0>)
    5bc0:	447b      	add	r3, pc
    5bc2:	2101      	movs	r1, #1
    5bc4:	0018      	movs	r0, r3
    5bc6:	4b0c      	ldr	r3, [pc, #48]	; (5bf8 <udc_req_std_iface_get_setting+0xc4>)
    5bc8:	58e3      	ldr	r3, [r4, r3]
    5bca:	4798      	blx	r3
	return true;
    5bcc:	2301      	movs	r3, #1
}
    5bce:	0018      	movs	r0, r3
    5bd0:	46bd      	mov	sp, r7
    5bd2:	b003      	add	sp, #12
    5bd4:	bd90      	pop	{r4, r7, pc}
    5bd6:	46c0      	nop			; (mov r8, r8)
    5bd8:	000098f4 	.word	0x000098f4
    5bdc:	00000208 	.word	0x00000208
    5be0:	1fffa7a6 	.word	0x1fffa7a6
    5be4:	1fffa792 	.word	0x1fffa792
    5be8:	fffff655 	.word	0xfffff655
    5bec:	1fffa75c 	.word	0x1fffa75c
    5bf0:	1fffa736 	.word	0x1fffa736
    5bf4:	1fffa730 	.word	0x1fffa730
    5bf8:	00000080 	.word	0x00000080

00005bfc <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
    5bfc:	b580      	push	{r7, lr}
    5bfe:	b082      	sub	sp, #8
    5c00:	af00      	add	r7, sp, #0
    5c02:	4b1b      	ldr	r3, [pc, #108]	; (5c70 <udc_req_std_iface_set_setting+0x74>)
    5c04:	447b      	add	r3, pc
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
    5c06:	4a1b      	ldr	r2, [pc, #108]	; (5c74 <udc_req_std_iface_set_setting+0x78>)
    5c08:	589a      	ldr	r2, [r3, r2]
    5c0a:	88d2      	ldrh	r2, [r2, #6]
    5c0c:	2a00      	cmp	r2, #0
    5c0e:	d001      	beq.n	5c14 <udc_req_std_iface_set_setting+0x18>
		return false; // Error in request
    5c10:	2300      	movs	r3, #0
    5c12:	e029      	b.n	5c68 <udc_req_std_iface_set_setting+0x6c>
	}
	if (!udc_num_configuration) {
    5c14:	4a18      	ldr	r2, [pc, #96]	; (5c78 <udc_req_std_iface_set_setting+0x7c>)
    5c16:	447a      	add	r2, pc
    5c18:	7812      	ldrb	r2, [r2, #0]
    5c1a:	2a00      	cmp	r2, #0
    5c1c:	d101      	bne.n	5c22 <udc_req_std_iface_set_setting+0x26>
		return false; // The device is not is configured state yet
    5c1e:	2300      	movs	r3, #0
    5c20:	e022      	b.n	5c68 <udc_req_std_iface_set_setting+0x6c>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    5c22:	4a14      	ldr	r2, [pc, #80]	; (5c74 <udc_req_std_iface_set_setting+0x78>)
    5c24:	589a      	ldr	r2, [r3, r2]
    5c26:	8891      	ldrh	r1, [r2, #4]
    5c28:	1dfa      	adds	r2, r7, #7
    5c2a:	7011      	strb	r1, [r2, #0]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
    5c2c:	4a11      	ldr	r2, [pc, #68]	; (5c74 <udc_req_std_iface_set_setting+0x78>)
    5c2e:	589b      	ldr	r3, [r3, r2]
    5c30:	885a      	ldrh	r2, [r3, #2]
    5c32:	1dbb      	adds	r3, r7, #6
    5c34:	701a      	strb	r2, [r3, #0]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
    5c36:	1dfb      	adds	r3, r7, #7
    5c38:	781b      	ldrb	r3, [r3, #0]
    5c3a:	0018      	movs	r0, r3
    5c3c:	4b0f      	ldr	r3, [pc, #60]	; (5c7c <udc_req_std_iface_set_setting+0x80>)
    5c3e:	447b      	add	r3, pc
    5c40:	4798      	blx	r3
    5c42:	0003      	movs	r3, r0
    5c44:	001a      	movs	r2, r3
    5c46:	2301      	movs	r3, #1
    5c48:	4053      	eors	r3, r2
    5c4a:	b2db      	uxtb	r3, r3
    5c4c:	2b00      	cmp	r3, #0
    5c4e:	d001      	beq.n	5c54 <udc_req_std_iface_set_setting+0x58>
		return false;
    5c50:	2300      	movs	r3, #0
    5c52:	e009      	b.n	5c68 <udc_req_std_iface_set_setting+0x6c>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
    5c54:	1dbb      	adds	r3, r7, #6
    5c56:	781a      	ldrb	r2, [r3, #0]
    5c58:	1dfb      	adds	r3, r7, #7
    5c5a:	781b      	ldrb	r3, [r3, #0]
    5c5c:	0011      	movs	r1, r2
    5c5e:	0018      	movs	r0, r3
    5c60:	4b07      	ldr	r3, [pc, #28]	; (5c80 <udc_req_std_iface_set_setting+0x84>)
    5c62:	447b      	add	r3, pc
    5c64:	4798      	blx	r3
    5c66:	0003      	movs	r3, r0
}
    5c68:	0018      	movs	r0, r3
    5c6a:	46bd      	mov	sp, r7
    5c6c:	b002      	add	sp, #8
    5c6e:	bd80      	pop	{r7, pc}
    5c70:	0000982c 	.word	0x0000982c
    5c74:	00000208 	.word	0x00000208
    5c78:	1fffa6de 	.word	0x1fffa6de
    5c7c:	fffff677 	.word	0xfffff677
    5c80:	fffff71b 	.word	0xfffff71b

00005c84 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
    5c84:	b580      	push	{r7, lr}
    5c86:	af00      	add	r7, sp, #0
    5c88:	4b5e      	ldr	r3, [pc, #376]	; (5e04 <udc_reqstd+0x180>)
    5c8a:	447b      	add	r3, pc
	if (Udd_setup_is_in()) {
    5c8c:	4a5e      	ldr	r2, [pc, #376]	; (5e08 <udc_reqstd+0x184>)
    5c8e:	589a      	ldr	r2, [r3, r2]
    5c90:	7812      	ldrb	r2, [r2, #0]
    5c92:	b252      	sxtb	r2, r2
    5c94:	2a00      	cmp	r2, #0
    5c96:	da4d      	bge.n	5d34 <udc_reqstd+0xb0>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
    5c98:	4a5b      	ldr	r2, [pc, #364]	; (5e08 <udc_reqstd+0x184>)
    5c9a:	589a      	ldr	r2, [r3, r2]
    5c9c:	88d2      	ldrh	r2, [r2, #6]
    5c9e:	2a00      	cmp	r2, #0
    5ca0:	d101      	bne.n	5ca6 <udc_reqstd+0x22>
			return false; // Error for USB host
    5ca2:	2300      	movs	r3, #0
    5ca4:	e0ab      	b.n	5dfe <udc_reqstd+0x17a>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    5ca6:	4a58      	ldr	r2, [pc, #352]	; (5e08 <udc_reqstd+0x184>)
    5ca8:	589a      	ldr	r2, [r3, r2]
    5caa:	7812      	ldrb	r2, [r2, #0]
    5cac:	0011      	movs	r1, r2
    5cae:	221f      	movs	r2, #31
    5cb0:	400a      	ands	r2, r1
    5cb2:	d118      	bne.n	5ce6 <udc_reqstd+0x62>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    5cb4:	4a54      	ldr	r2, [pc, #336]	; (5e08 <udc_reqstd+0x184>)
    5cb6:	589a      	ldr	r2, [r3, r2]
    5cb8:	7852      	ldrb	r2, [r2, #1]
    5cba:	2a06      	cmp	r2, #6
    5cbc:	d009      	beq.n	5cd2 <udc_reqstd+0x4e>
    5cbe:	2a08      	cmp	r2, #8
    5cc0:	d00c      	beq.n	5cdc <udc_reqstd+0x58>
    5cc2:	2a00      	cmp	r2, #0
    5cc4:	d000      	beq.n	5cc8 <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
    5cc6:	e00e      	b.n	5ce6 <udc_reqstd+0x62>
				return udc_req_std_dev_get_status();
    5cc8:	4b50      	ldr	r3, [pc, #320]	; (5e0c <udc_reqstd+0x188>)
    5cca:	447b      	add	r3, pc
    5ccc:	4798      	blx	r3
    5cce:	0003      	movs	r3, r0
    5cd0:	e095      	b.n	5dfe <udc_reqstd+0x17a>
				return udc_req_std_dev_get_descriptor();
    5cd2:	4b4f      	ldr	r3, [pc, #316]	; (5e10 <udc_reqstd+0x18c>)
    5cd4:	447b      	add	r3, pc
    5cd6:	4798      	blx	r3
    5cd8:	0003      	movs	r3, r0
    5cda:	e090      	b.n	5dfe <udc_reqstd+0x17a>
				return udc_req_std_dev_get_configuration();
    5cdc:	4b4d      	ldr	r3, [pc, #308]	; (5e14 <udc_reqstd+0x190>)
    5cde:	447b      	add	r3, pc
    5ce0:	4798      	blx	r3
    5ce2:	0003      	movs	r3, r0
    5ce4:	e08b      	b.n	5dfe <udc_reqstd+0x17a>
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    5ce6:	4a48      	ldr	r2, [pc, #288]	; (5e08 <udc_reqstd+0x184>)
    5ce8:	589a      	ldr	r2, [r3, r2]
    5cea:	7812      	ldrb	r2, [r2, #0]
    5cec:	0011      	movs	r1, r2
    5cee:	221f      	movs	r2, #31
    5cf0:	400a      	ands	r2, r1
    5cf2:	2a01      	cmp	r2, #1
    5cf4:	d10a      	bne.n	5d0c <udc_reqstd+0x88>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    5cf6:	4a44      	ldr	r2, [pc, #272]	; (5e08 <udc_reqstd+0x184>)
    5cf8:	589a      	ldr	r2, [r3, r2]
    5cfa:	7852      	ldrb	r2, [r2, #1]
    5cfc:	2a0a      	cmp	r2, #10
    5cfe:	d000      	beq.n	5d02 <udc_reqstd+0x7e>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
			default:
				break;
    5d00:	e004      	b.n	5d0c <udc_reqstd+0x88>
				return udc_req_std_iface_get_setting();
    5d02:	4b45      	ldr	r3, [pc, #276]	; (5e18 <udc_reqstd+0x194>)
    5d04:	447b      	add	r3, pc
    5d06:	4798      	blx	r3
    5d08:	0003      	movs	r3, r0
    5d0a:	e078      	b.n	5dfe <udc_reqstd+0x17a>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    5d0c:	4a3e      	ldr	r2, [pc, #248]	; (5e08 <udc_reqstd+0x184>)
    5d0e:	589a      	ldr	r2, [r3, r2]
    5d10:	7812      	ldrb	r2, [r2, #0]
    5d12:	0011      	movs	r1, r2
    5d14:	221f      	movs	r2, #31
    5d16:	400a      	ands	r2, r1
    5d18:	2a02      	cmp	r2, #2
    5d1a:	d000      	beq.n	5d1e <udc_reqstd+0x9a>
    5d1c:	e06e      	b.n	5dfc <udc_reqstd+0x178>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    5d1e:	4a3a      	ldr	r2, [pc, #232]	; (5e08 <udc_reqstd+0x184>)
    5d20:	589b      	ldr	r3, [r3, r2]
    5d22:	785b      	ldrb	r3, [r3, #1]
    5d24:	2b00      	cmp	r3, #0
    5d26:	d000      	beq.n	5d2a <udc_reqstd+0xa6>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
			default:
				break;
    5d28:	e068      	b.n	5dfc <udc_reqstd+0x178>
				return udc_req_std_ep_get_status();
    5d2a:	4b3c      	ldr	r3, [pc, #240]	; (5e1c <udc_reqstd+0x198>)
    5d2c:	447b      	add	r3, pc
    5d2e:	4798      	blx	r3
    5d30:	0003      	movs	r3, r0
    5d32:	e064      	b.n	5dfe <udc_reqstd+0x17a>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
    5d34:	4a34      	ldr	r2, [pc, #208]	; (5e08 <udc_reqstd+0x184>)
    5d36:	589a      	ldr	r2, [r3, r2]
    5d38:	7812      	ldrb	r2, [r2, #0]
    5d3a:	0011      	movs	r1, r2
    5d3c:	221f      	movs	r2, #31
    5d3e:	400a      	ands	r2, r1
    5d40:	d12f      	bne.n	5da2 <udc_reqstd+0x11e>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
    5d42:	4a31      	ldr	r2, [pc, #196]	; (5e08 <udc_reqstd+0x184>)
    5d44:	589a      	ldr	r2, [r3, r2]
    5d46:	7852      	ldrb	r2, [r2, #1]
    5d48:	3a01      	subs	r2, #1
    5d4a:	2a08      	cmp	r2, #8
    5d4c:	d828      	bhi.n	5da0 <udc_reqstd+0x11c>
    5d4e:	0010      	movs	r0, r2
    5d50:	f007 fdd4 	bl	d8fc <__gnu_thumb1_case_si>
    5d54:	0000002e 	.word	0x0000002e
    5d58:	0000004c 	.word	0x0000004c
    5d5c:	00000038 	.word	0x00000038
    5d60:	0000004c 	.word	0x0000004c
    5d64:	00000024 	.word	0x00000024
    5d68:	0000004c 	.word	0x0000004c
    5d6c:	0000004c 	.word	0x0000004c
    5d70:	0000004c 	.word	0x0000004c
    5d74:	00000042 	.word	0x00000042
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
    5d78:	4b29      	ldr	r3, [pc, #164]	; (5e20 <udc_reqstd+0x19c>)
    5d7a:	447b      	add	r3, pc
    5d7c:	4798      	blx	r3
    5d7e:	0003      	movs	r3, r0
    5d80:	e03d      	b.n	5dfe <udc_reqstd+0x17a>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
    5d82:	4b28      	ldr	r3, [pc, #160]	; (5e24 <udc_reqstd+0x1a0>)
    5d84:	447b      	add	r3, pc
    5d86:	4798      	blx	r3
    5d88:	0003      	movs	r3, r0
    5d8a:	e038      	b.n	5dfe <udc_reqstd+0x17a>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
    5d8c:	4b26      	ldr	r3, [pc, #152]	; (5e28 <udc_reqstd+0x1a4>)
    5d8e:	447b      	add	r3, pc
    5d90:	4798      	blx	r3
    5d92:	0003      	movs	r3, r0
    5d94:	e033      	b.n	5dfe <udc_reqstd+0x17a>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
    5d96:	4b25      	ldr	r3, [pc, #148]	; (5e2c <udc_reqstd+0x1a8>)
    5d98:	447b      	add	r3, pc
    5d9a:	4798      	blx	r3
    5d9c:	0003      	movs	r3, r0
    5d9e:	e02e      	b.n	5dfe <udc_reqstd+0x17a>
			case USB_REQ_SET_DESCRIPTOR:
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
    5da0:	46c0      	nop			; (mov r8, r8)
			}
		}

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
    5da2:	4a19      	ldr	r2, [pc, #100]	; (5e08 <udc_reqstd+0x184>)
    5da4:	589a      	ldr	r2, [r3, r2]
    5da6:	7812      	ldrb	r2, [r2, #0]
    5da8:	0011      	movs	r1, r2
    5daa:	221f      	movs	r2, #31
    5dac:	400a      	ands	r2, r1
    5dae:	2a01      	cmp	r2, #1
    5db0:	d10a      	bne.n	5dc8 <udc_reqstd+0x144>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
    5db2:	4a15      	ldr	r2, [pc, #84]	; (5e08 <udc_reqstd+0x184>)
    5db4:	589a      	ldr	r2, [r3, r2]
    5db6:	7852      	ldrb	r2, [r2, #1]
    5db8:	2a0b      	cmp	r2, #11
    5dba:	d000      	beq.n	5dbe <udc_reqstd+0x13a>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
			default:
				break;
    5dbc:	e004      	b.n	5dc8 <udc_reqstd+0x144>
				return udc_req_std_iface_set_setting();
    5dbe:	4b1c      	ldr	r3, [pc, #112]	; (5e30 <udc_reqstd+0x1ac>)
    5dc0:	447b      	add	r3, pc
    5dc2:	4798      	blx	r3
    5dc4:	0003      	movs	r3, r0
    5dc6:	e01a      	b.n	5dfe <udc_reqstd+0x17a>
			}
		}
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
    5dc8:	4a0f      	ldr	r2, [pc, #60]	; (5e08 <udc_reqstd+0x184>)
    5dca:	589a      	ldr	r2, [r3, r2]
    5dcc:	7812      	ldrb	r2, [r2, #0]
    5dce:	0011      	movs	r1, r2
    5dd0:	221f      	movs	r2, #31
    5dd2:	400a      	ands	r2, r1
    5dd4:	2a02      	cmp	r2, #2
    5dd6:	d111      	bne.n	5dfc <udc_reqstd+0x178>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
    5dd8:	4a0b      	ldr	r2, [pc, #44]	; (5e08 <udc_reqstd+0x184>)
    5dda:	589b      	ldr	r3, [r3, r2]
    5ddc:	785b      	ldrb	r3, [r3, #1]
    5dde:	2b01      	cmp	r3, #1
    5de0:	d002      	beq.n	5de8 <udc_reqstd+0x164>
    5de2:	2b03      	cmp	r3, #3
    5de4:	d005      	beq.n	5df2 <udc_reqstd+0x16e>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
    5de6:	e009      	b.n	5dfc <udc_reqstd+0x178>
				return udc_req_std_ep_clear_feature();
    5de8:	4b12      	ldr	r3, [pc, #72]	; (5e34 <udc_reqstd+0x1b0>)
    5dea:	447b      	add	r3, pc
    5dec:	4798      	blx	r3
    5dee:	0003      	movs	r3, r0
    5df0:	e005      	b.n	5dfe <udc_reqstd+0x17a>
				return udc_req_std_ep_set_feature();
    5df2:	4b11      	ldr	r3, [pc, #68]	; (5e38 <udc_reqstd+0x1b4>)
    5df4:	447b      	add	r3, pc
    5df6:	4798      	blx	r3
    5df8:	0003      	movs	r3, r0
    5dfa:	e000      	b.n	5dfe <udc_reqstd+0x17a>
			}
		}
#endif
	}
	return false;
    5dfc:	2300      	movs	r3, #0
}
    5dfe:	0018      	movs	r0, r3
    5e00:	46bd      	mov	sp, r7
    5e02:	bd80      	pop	{r7, pc}
    5e04:	000097a6 	.word	0x000097a6
    5e08:	00000208 	.word	0x00000208
    5e0c:	fffff877 	.word	0xfffff877
    5e10:	fffffbc1 	.word	0xfffffbc1
    5e14:	fffffd17 	.word	0xfffffd17
    5e18:	fffffe2d 	.word	0xfffffe2d
    5e1c:	fffff851 	.word	0xfffff851
    5e20:	fffff9bf 	.word	0xfffff9bf
    5e24:	fffff859 	.word	0xfffff859
    5e28:	fffff8e7 	.word	0xfffff8e7
    5e2c:	fffffc99 	.word	0xfffffc99
    5e30:	fffffe39 	.word	0xfffffe39
    5e34:	fffff843 	.word	0xfffff843
    5e38:	fffff8b9 	.word	0xfffff8b9

00005e3c <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
    5e3c:	b580      	push	{r7, lr}
    5e3e:	b082      	sub	sp, #8
    5e40:	af00      	add	r7, sp, #0
    5e42:	4a28      	ldr	r2, [pc, #160]	; (5ee4 <udc_req_iface+0xa8>)
    5e44:	447a      	add	r2, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    5e46:	4b28      	ldr	r3, [pc, #160]	; (5ee8 <udc_req_iface+0xac>)
    5e48:	447b      	add	r3, pc
    5e4a:	781b      	ldrb	r3, [r3, #0]
    5e4c:	2b00      	cmp	r3, #0
    5e4e:	d101      	bne.n	5e54 <udc_req_iface+0x18>
		return false; // The device is not is configured state yet
    5e50:	2300      	movs	r3, #0
    5e52:	e042      	b.n	5eda <udc_req_iface+0x9e>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    5e54:	4b25      	ldr	r3, [pc, #148]	; (5eec <udc_req_iface+0xb0>)
    5e56:	58d3      	ldr	r3, [r2, r3]
    5e58:	889a      	ldrh	r2, [r3, #4]
    5e5a:	1dfb      	adds	r3, r7, #7
    5e5c:	701a      	strb	r2, [r3, #0]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
    5e5e:	4b24      	ldr	r3, [pc, #144]	; (5ef0 <udc_req_iface+0xb4>)
    5e60:	447b      	add	r3, pc
    5e62:	681b      	ldr	r3, [r3, #0]
    5e64:	681b      	ldr	r3, [r3, #0]
    5e66:	791b      	ldrb	r3, [r3, #4]
    5e68:	1dfa      	adds	r2, r7, #7
    5e6a:	7812      	ldrb	r2, [r2, #0]
    5e6c:	429a      	cmp	r2, r3
    5e6e:	d301      	bcc.n	5e74 <udc_req_iface+0x38>
		return false;
    5e70:	2300      	movs	r3, #0
    5e72:	e032      	b.n	5eda <udc_req_iface+0x9e>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
    5e74:	1dfb      	adds	r3, r7, #7
    5e76:	781b      	ldrb	r3, [r3, #0]
    5e78:	2100      	movs	r1, #0
    5e7a:	0018      	movs	r0, r3
    5e7c:	4b1d      	ldr	r3, [pc, #116]	; (5ef4 <udc_req_iface+0xb8>)
    5e7e:	447b      	add	r3, pc
    5e80:	4798      	blx	r3
    5e82:	0003      	movs	r3, r0
    5e84:	001a      	movs	r2, r3
    5e86:	2301      	movs	r3, #1
    5e88:	4053      	eors	r3, r2
    5e8a:	b2db      	uxtb	r3, r3
    5e8c:	2b00      	cmp	r3, #0
    5e8e:	d001      	beq.n	5e94 <udc_req_iface+0x58>
		return false;
    5e90:	2300      	movs	r3, #0
    5e92:	e022      	b.n	5eda <udc_req_iface+0x9e>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
    5e94:	4b18      	ldr	r3, [pc, #96]	; (5ef8 <udc_req_iface+0xbc>)
    5e96:	447b      	add	r3, pc
    5e98:	681b      	ldr	r3, [r3, #0]
    5e9a:	685a      	ldr	r2, [r3, #4]
    5e9c:	1dfb      	adds	r3, r7, #7
    5e9e:	781b      	ldrb	r3, [r3, #0]
    5ea0:	009b      	lsls	r3, r3, #2
    5ea2:	18d3      	adds	r3, r2, r3
    5ea4:	681b      	ldr	r3, [r3, #0]
    5ea6:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    5ea8:	683b      	ldr	r3, [r7, #0]
    5eaa:	68db      	ldr	r3, [r3, #12]
    5eac:	4798      	blx	r3
    5eae:	0003      	movs	r3, r0
    5eb0:	001a      	movs	r2, r3
    5eb2:	1dfb      	adds	r3, r7, #7
    5eb4:	781b      	ldrb	r3, [r3, #0]
    5eb6:	0011      	movs	r1, r2
    5eb8:	0018      	movs	r0, r3
    5eba:	4b10      	ldr	r3, [pc, #64]	; (5efc <udc_req_iface+0xc0>)
    5ebc:	447b      	add	r3, pc
    5ebe:	4798      	blx	r3
    5ec0:	0003      	movs	r3, r0
    5ec2:	001a      	movs	r2, r3
    5ec4:	2301      	movs	r3, #1
    5ec6:	4053      	eors	r3, r2
    5ec8:	b2db      	uxtb	r3, r3
    5eca:	2b00      	cmp	r3, #0
    5ecc:	d001      	beq.n	5ed2 <udc_req_iface+0x96>
		return false;
    5ece:	2300      	movs	r3, #0
    5ed0:	e003      	b.n	5eda <udc_req_iface+0x9e>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
    5ed2:	683b      	ldr	r3, [r7, #0]
    5ed4:	689b      	ldr	r3, [r3, #8]
    5ed6:	4798      	blx	r3
    5ed8:	0003      	movs	r3, r0
}
    5eda:	0018      	movs	r0, r3
    5edc:	46bd      	mov	sp, r7
    5ede:	b002      	add	sp, #8
    5ee0:	bd80      	pop	{r7, pc}
    5ee2:	46c0      	nop			; (mov r8, r8)
    5ee4:	000095ec 	.word	0x000095ec
    5ee8:	1fffa4ac 	.word	0x1fffa4ac
    5eec:	00000208 	.word	0x00000208
    5ef0:	1fffa498 	.word	0x1fffa498
    5ef4:	fffff35b 	.word	0xfffff35b
    5ef8:	1fffa462 	.word	0x1fffa462
    5efc:	fffff31d 	.word	0xfffff31d

00005f00 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
    5f00:	b580      	push	{r7, lr}
    5f02:	b082      	sub	sp, #8
    5f04:	af00      	add	r7, sp, #0
    5f06:	4a25      	ldr	r2, [pc, #148]	; (5f9c <udc_req_ep+0x9c>)
    5f08:	447a      	add	r2, pc
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
    5f0a:	4b25      	ldr	r3, [pc, #148]	; (5fa0 <udc_req_ep+0xa0>)
    5f0c:	447b      	add	r3, pc
    5f0e:	781b      	ldrb	r3, [r3, #0]
    5f10:	2b00      	cmp	r3, #0
    5f12:	d101      	bne.n	5f18 <udc_req_ep+0x18>
		return false; // The device is not is configured state yet
    5f14:	2300      	movs	r3, #0
    5f16:	e03d      	b.n	5f94 <udc_req_ep+0x94>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
    5f18:	4b22      	ldr	r3, [pc, #136]	; (5fa4 <udc_req_ep+0xa4>)
    5f1a:	58d3      	ldr	r3, [r2, r3]
    5f1c:	889a      	ldrh	r2, [r3, #4]
    5f1e:	1dfb      	adds	r3, r7, #7
    5f20:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    5f22:	1dfb      	adds	r3, r7, #7
    5f24:	2200      	movs	r2, #0
    5f26:	701a      	strb	r2, [r3, #0]
    5f28:	e02a      	b.n	5f80 <udc_req_ep+0x80>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
    5f2a:	4b1f      	ldr	r3, [pc, #124]	; (5fa8 <udc_req_ep+0xa8>)
    5f2c:	447b      	add	r3, pc
    5f2e:	681b      	ldr	r3, [r3, #0]
    5f30:	685a      	ldr	r2, [r3, #4]
    5f32:	1dfb      	adds	r3, r7, #7
    5f34:	781b      	ldrb	r3, [r3, #0]
    5f36:	009b      	lsls	r3, r3, #2
    5f38:	18d3      	adds	r3, r2, r3
    5f3a:	681b      	ldr	r3, [r3, #0]
    5f3c:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
    5f3e:	683b      	ldr	r3, [r7, #0]
    5f40:	68db      	ldr	r3, [r3, #12]
    5f42:	4798      	blx	r3
    5f44:	0003      	movs	r3, r0
    5f46:	001a      	movs	r2, r3
    5f48:	1dfb      	adds	r3, r7, #7
    5f4a:	781b      	ldrb	r3, [r3, #0]
    5f4c:	0011      	movs	r1, r2
    5f4e:	0018      	movs	r0, r3
    5f50:	4b16      	ldr	r3, [pc, #88]	; (5fac <udc_req_ep+0xac>)
    5f52:	447b      	add	r3, pc
    5f54:	4798      	blx	r3
    5f56:	0003      	movs	r3, r0
    5f58:	001a      	movs	r2, r3
    5f5a:	2301      	movs	r3, #1
    5f5c:	4053      	eors	r3, r2
    5f5e:	b2db      	uxtb	r3, r3
    5f60:	2b00      	cmp	r3, #0
    5f62:	d001      	beq.n	5f68 <udc_req_ep+0x68>
			return false;
    5f64:	2300      	movs	r3, #0
    5f66:	e015      	b.n	5f94 <udc_req_ep+0x94>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
    5f68:	683b      	ldr	r3, [r7, #0]
    5f6a:	689b      	ldr	r3, [r3, #8]
    5f6c:	4798      	blx	r3
    5f6e:	1e03      	subs	r3, r0, #0
    5f70:	d001      	beq.n	5f76 <udc_req_ep+0x76>
			return true;
    5f72:	2301      	movs	r3, #1
    5f74:	e00e      	b.n	5f94 <udc_req_ep+0x94>
			iface_num++) {
    5f76:	1dfb      	adds	r3, r7, #7
    5f78:	781a      	ldrb	r2, [r3, #0]
    5f7a:	1dfb      	adds	r3, r7, #7
    5f7c:	3201      	adds	r2, #1
    5f7e:	701a      	strb	r2, [r3, #0]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
    5f80:	4b0b      	ldr	r3, [pc, #44]	; (5fb0 <udc_req_ep+0xb0>)
    5f82:	447b      	add	r3, pc
    5f84:	681b      	ldr	r3, [r3, #0]
    5f86:	681b      	ldr	r3, [r3, #0]
    5f88:	791b      	ldrb	r3, [r3, #4]
    5f8a:	1dfa      	adds	r2, r7, #7
    5f8c:	7812      	ldrb	r2, [r2, #0]
    5f8e:	429a      	cmp	r2, r3
    5f90:	d3cb      	bcc.n	5f2a <udc_req_ep+0x2a>
		}
	}
	return false;
    5f92:	2300      	movs	r3, #0
}
    5f94:	0018      	movs	r0, r3
    5f96:	46bd      	mov	sp, r7
    5f98:	b002      	add	sp, #8
    5f9a:	bd80      	pop	{r7, pc}
    5f9c:	00009528 	.word	0x00009528
    5fa0:	1fffa3e8 	.word	0x1fffa3e8
    5fa4:	00000208 	.word	0x00000208
    5fa8:	1fffa3cc 	.word	0x1fffa3cc
    5fac:	fffff287 	.word	0xfffff287
    5fb0:	1fffa376 	.word	0x1fffa376

00005fb4 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
    5fb4:	b5b0      	push	{r4, r5, r7, lr}
    5fb6:	af00      	add	r7, sp, #0
    5fb8:	4c25      	ldr	r4, [pc, #148]	; (6050 <udc_process_setup+0x9c>)
    5fba:	447c      	add	r4, pc
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
    5fbc:	4b25      	ldr	r3, [pc, #148]	; (6054 <udc_process_setup+0xa0>)
    5fbe:	58e3      	ldr	r3, [r4, r3]
    5fc0:	2200      	movs	r2, #0
    5fc2:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
    5fc4:	4b23      	ldr	r3, [pc, #140]	; (6054 <udc_process_setup+0xa0>)
    5fc6:	58e3      	ldr	r3, [r4, r3]
    5fc8:	2200      	movs	r2, #0
    5fca:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
    5fcc:	4b21      	ldr	r3, [pc, #132]	; (6054 <udc_process_setup+0xa0>)
    5fce:	58e3      	ldr	r3, [r4, r3]
    5fd0:	2200      	movs	r2, #0
    5fd2:	615a      	str	r2, [r3, #20]

	if (Udd_setup_is_in()) {
    5fd4:	4b1f      	ldr	r3, [pc, #124]	; (6054 <udc_process_setup+0xa0>)
    5fd6:	58e3      	ldr	r3, [r4, r3]
    5fd8:	781b      	ldrb	r3, [r3, #0]
    5fda:	b25b      	sxtb	r3, r3
    5fdc:	2b00      	cmp	r3, #0
    5fde:	da06      	bge.n	5fee <udc_process_setup+0x3a>
		if (udd_g_ctrlreq.req.wLength == 0) {
    5fe0:	4b1c      	ldr	r3, [pc, #112]	; (6054 <udc_process_setup+0xa0>)
    5fe2:	58e3      	ldr	r3, [r4, r3]
    5fe4:	88db      	ldrh	r3, [r3, #6]
    5fe6:	2b00      	cmp	r3, #0
    5fe8:	d101      	bne.n	5fee <udc_process_setup+0x3a>
			return false; // Error from USB host
    5fea:	2300      	movs	r3, #0
    5fec:	e02c      	b.n	6048 <udc_process_setup+0x94>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
    5fee:	4b19      	ldr	r3, [pc, #100]	; (6054 <udc_process_setup+0xa0>)
    5ff0:	58e3      	ldr	r3, [r4, r3]
    5ff2:	781b      	ldrb	r3, [r3, #0]
    5ff4:	001a      	movs	r2, r3
    5ff6:	2360      	movs	r3, #96	; 0x60
    5ff8:	4013      	ands	r3, r2
    5ffa:	d106      	bne.n	600a <udc_process_setup+0x56>
		if (udc_reqstd()) {
    5ffc:	4b16      	ldr	r3, [pc, #88]	; (6058 <udc_process_setup+0xa4>)
    5ffe:	447b      	add	r3, pc
    6000:	4798      	blx	r3
    6002:	1e03      	subs	r3, r0, #0
    6004:	d001      	beq.n	600a <udc_process_setup+0x56>
			return true;
    6006:	2301      	movs	r3, #1
    6008:	e01e      	b.n	6048 <udc_process_setup+0x94>
		}
	}

	// If interface request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) {
    600a:	4b12      	ldr	r3, [pc, #72]	; (6054 <udc_process_setup+0xa0>)
    600c:	58e3      	ldr	r3, [r4, r3]
    600e:	781b      	ldrb	r3, [r3, #0]
    6010:	001a      	movs	r2, r3
    6012:	231f      	movs	r3, #31
    6014:	4013      	ands	r3, r2
    6016:	2b01      	cmp	r3, #1
    6018:	d106      	bne.n	6028 <udc_process_setup+0x74>
		if (udc_req_iface()) {
    601a:	4b10      	ldr	r3, [pc, #64]	; (605c <udc_process_setup+0xa8>)
    601c:	447b      	add	r3, pc
    601e:	4798      	blx	r3
    6020:	1e03      	subs	r3, r0, #0
    6022:	d001      	beq.n	6028 <udc_process_setup+0x74>
			return true;
    6024:	2301      	movs	r3, #1
    6026:	e00f      	b.n	6048 <udc_process_setup+0x94>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
    6028:	4b0a      	ldr	r3, [pc, #40]	; (6054 <udc_process_setup+0xa0>)
    602a:	58e3      	ldr	r3, [r4, r3]
    602c:	781b      	ldrb	r3, [r3, #0]
    602e:	001a      	movs	r2, r3
    6030:	231f      	movs	r3, #31
    6032:	4013      	ands	r3, r2
    6034:	2b02      	cmp	r3, #2
    6036:	d106      	bne.n	6046 <udc_process_setup+0x92>
		if (udc_req_ep()) {
    6038:	4b09      	ldr	r3, [pc, #36]	; (6060 <udc_process_setup+0xac>)
    603a:	447b      	add	r3, pc
    603c:	4798      	blx	r3
    603e:	1e03      	subs	r3, r0, #0
    6040:	d001      	beq.n	6046 <udc_process_setup+0x92>
			return true;
    6042:	2301      	movs	r3, #1
    6044:	e000      	b.n	6048 <udc_process_setup+0x94>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
    6046:	2300      	movs	r3, #0
#endif
}
    6048:	0018      	movs	r0, r3
    604a:	46bd      	mov	sp, r7
    604c:	bdb0      	pop	{r4, r5, r7, pc}
    604e:	46c0      	nop			; (mov r8, r8)
    6050:	00009476 	.word	0x00009476
    6054:	00000208 	.word	0x00000208
    6058:	fffffc83 	.word	0xfffffc83
    605c:	fffffe1d 	.word	0xfffffe1d
    6060:	fffffec3 	.word	0xfffffec3

00006064 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
    6064:	b580      	push	{r7, lr}
    6066:	b082      	sub	sp, #8
    6068:	af00      	add	r7, sp, #0
    606a:	4a14      	ldr	r2, [pc, #80]	; (60bc <cpu_irq_enter_critical+0x58>)
    606c:	447a      	add	r2, pc
	if (cpu_irq_critical_section_counter == 0) {
    606e:	4b14      	ldr	r3, [pc, #80]	; (60c0 <cpu_irq_enter_critical+0x5c>)
    6070:	447b      	add	r3, pc
    6072:	681b      	ldr	r3, [r3, #0]
    6074:	2b00      	cmp	r3, #0
    6076:	d115      	bne.n	60a4 <cpu_irq_enter_critical+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6078:	f3ef 8310 	mrs	r3, PRIMASK
    607c:	607b      	str	r3, [r7, #4]
  return(result);
    607e:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
    6080:	2b00      	cmp	r3, #0
    6082:	d10b      	bne.n	609c <cpu_irq_enter_critical+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
    6084:	b672      	cpsid	i
    6086:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    608a:	4b0e      	ldr	r3, [pc, #56]	; (60c4 <cpu_irq_enter_critical+0x60>)
    608c:	58d3      	ldr	r3, [r2, r3]
    608e:	2200      	movs	r2, #0
    6090:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    6092:	4b0d      	ldr	r3, [pc, #52]	; (60c8 <cpu_irq_enter_critical+0x64>)
    6094:	447b      	add	r3, pc
    6096:	2201      	movs	r2, #1
    6098:	701a      	strb	r2, [r3, #0]
    609a:	e003      	b.n	60a4 <cpu_irq_enter_critical+0x40>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    609c:	4b0b      	ldr	r3, [pc, #44]	; (60cc <cpu_irq_enter_critical+0x68>)
    609e:	447b      	add	r3, pc
    60a0:	2200      	movs	r2, #0
    60a2:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    60a4:	4b0a      	ldr	r3, [pc, #40]	; (60d0 <cpu_irq_enter_critical+0x6c>)
    60a6:	447b      	add	r3, pc
    60a8:	681b      	ldr	r3, [r3, #0]
    60aa:	1c5a      	adds	r2, r3, #1
    60ac:	4b09      	ldr	r3, [pc, #36]	; (60d4 <cpu_irq_enter_critical+0x70>)
    60ae:	447b      	add	r3, pc
    60b0:	601a      	str	r2, [r3, #0]
}
    60b2:	46c0      	nop			; (mov r8, r8)
    60b4:	46bd      	mov	sp, r7
    60b6:	b002      	add	sp, #8
    60b8:	bd80      	pop	{r7, pc}
    60ba:	46c0      	nop			; (mov r8, r8)
    60bc:	000093c4 	.word	0x000093c4
    60c0:	1fffa294 	.word	0x1fffa294
    60c4:	00000118 	.word	0x00000118
    60c8:	1fffa274 	.word	0x1fffa274
    60cc:	1fffa26a 	.word	0x1fffa26a
    60d0:	1fffa25e 	.word	0x1fffa25e
    60d4:	1fffa256 	.word	0x1fffa256

000060d8 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
    60d8:	b580      	push	{r7, lr}
    60da:	af00      	add	r7, sp, #0
    60dc:	4a0e      	ldr	r2, [pc, #56]	; (6118 <cpu_irq_leave_critical+0x40>)
    60de:	447a      	add	r2, pc
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    60e0:	4b0e      	ldr	r3, [pc, #56]	; (611c <cpu_irq_leave_critical+0x44>)
    60e2:	447b      	add	r3, pc
    60e4:	681b      	ldr	r3, [r3, #0]
    60e6:	1e59      	subs	r1, r3, #1
    60e8:	4b0d      	ldr	r3, [pc, #52]	; (6120 <cpu_irq_leave_critical+0x48>)
    60ea:	447b      	add	r3, pc
    60ec:	6019      	str	r1, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    60ee:	4b0d      	ldr	r3, [pc, #52]	; (6124 <cpu_irq_leave_critical+0x4c>)
    60f0:	447b      	add	r3, pc
    60f2:	681b      	ldr	r3, [r3, #0]
    60f4:	2b00      	cmp	r3, #0
    60f6:	d10c      	bne.n	6112 <cpu_irq_leave_critical+0x3a>
    60f8:	4b0b      	ldr	r3, [pc, #44]	; (6128 <cpu_irq_leave_critical+0x50>)
    60fa:	447b      	add	r3, pc
    60fc:	781b      	ldrb	r3, [r3, #0]
    60fe:	b2db      	uxtb	r3, r3
    6100:	2b00      	cmp	r3, #0
    6102:	d006      	beq.n	6112 <cpu_irq_leave_critical+0x3a>
		cpu_irq_enable();
    6104:	4b09      	ldr	r3, [pc, #36]	; (612c <cpu_irq_leave_critical+0x54>)
    6106:	58d3      	ldr	r3, [r2, r3]
    6108:	2201      	movs	r2, #1
    610a:	701a      	strb	r2, [r3, #0]
    610c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    6110:	b662      	cpsie	i
	}
}
    6112:	46c0      	nop			; (mov r8, r8)
    6114:	46bd      	mov	sp, r7
    6116:	bd80      	pop	{r7, pc}
    6118:	00009352 	.word	0x00009352
    611c:	1fffa222 	.word	0x1fffa222
    6120:	1fffa21a 	.word	0x1fffa21a
    6124:	1fffa214 	.word	0x1fffa214
    6128:	1fffa20e 	.word	0x1fffa20e
    612c:	00000118 	.word	0x00000118

00006130 <stdio_usb_putchar>:
#include "stdio_usb.h"

static bool stdio_usb_interface_enable = false;

int stdio_usb_putchar (volatile void * unused, char data)
{
    6130:	b580      	push	{r7, lr}
    6132:	b082      	sub	sp, #8
    6134:	af00      	add	r7, sp, #0
    6136:	6078      	str	r0, [r7, #4]
    6138:	000a      	movs	r2, r1
    613a:	1cfb      	adds	r3, r7, #3
    613c:	701a      	strb	r2, [r3, #0]
    613e:	4a0e      	ldr	r2, [pc, #56]	; (6178 <stdio_usb_putchar+0x48>)
    6140:	447a      	add	r2, pc
	/* A negative return value should be used to indicate that data
	 * was not written, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    6142:	4b0e      	ldr	r3, [pc, #56]	; (617c <stdio_usb_putchar+0x4c>)
    6144:	447b      	add	r3, pc
    6146:	781b      	ldrb	r3, [r3, #0]
    6148:	2101      	movs	r1, #1
    614a:	404b      	eors	r3, r1
    614c:	b2db      	uxtb	r3, r3
    614e:	2b00      	cmp	r3, #0
    6150:	d001      	beq.n	6156 <stdio_usb_putchar+0x26>
		return 0;  // -1
    6152:	2300      	movs	r3, #0
    6154:	e00b      	b.n	616e <stdio_usb_putchar+0x3e>
	}

	return udi_cdc_putc(data) ? 0 : -1;
    6156:	1cfb      	adds	r3, r7, #3
    6158:	781b      	ldrb	r3, [r3, #0]
    615a:	0018      	movs	r0, r3
    615c:	4b08      	ldr	r3, [pc, #32]	; (6180 <stdio_usb_putchar+0x50>)
    615e:	58d3      	ldr	r3, [r2, r3]
    6160:	4798      	blx	r3
    6162:	1e03      	subs	r3, r0, #0
    6164:	d001      	beq.n	616a <stdio_usb_putchar+0x3a>
    6166:	2300      	movs	r3, #0
    6168:	e001      	b.n	616e <stdio_usb_putchar+0x3e>
    616a:	2301      	movs	r3, #1
    616c:	425b      	negs	r3, r3
}
    616e:	0018      	movs	r0, r3
    6170:	46bd      	mov	sp, r7
    6172:	b002      	add	sp, #8
    6174:	bd80      	pop	{r7, pc}
    6176:	46c0      	nop			; (mov r8, r8)
    6178:	000092f0 	.word	0x000092f0
    617c:	1fffa1c5 	.word	0x1fffa1c5
    6180:	000000c4 	.word	0x000000c4

00006184 <stdio_usb_getchar>:

void stdio_usb_getchar (void volatile * unused, char *data)
{
    6184:	b580      	push	{r7, lr}
    6186:	b082      	sub	sp, #8
    6188:	af00      	add	r7, sp, #0
    618a:	6078      	str	r0, [r7, #4]
    618c:	6039      	str	r1, [r7, #0]
    618e:	4a0c      	ldr	r2, [pc, #48]	; (61c0 <stdio_usb_getchar+0x3c>)
    6190:	447a      	add	r2, pc
	/* A negative return value should be used to indicate that data
	 * was not read, but this doesn't seem to work with GCC libc.
	 */
	if (!stdio_usb_interface_enable) {
    6192:	4b0c      	ldr	r3, [pc, #48]	; (61c4 <stdio_usb_getchar+0x40>)
    6194:	447b      	add	r3, pc
    6196:	781b      	ldrb	r3, [r3, #0]
    6198:	2101      	movs	r1, #1
    619a:	404b      	eors	r3, r1
    619c:	b2db      	uxtb	r3, r3
    619e:	2b00      	cmp	r3, #0
    61a0:	d003      	beq.n	61aa <stdio_usb_getchar+0x26>
		*data = 0;  // -1
    61a2:	683b      	ldr	r3, [r7, #0]
    61a4:	2200      	movs	r2, #0
    61a6:	701a      	strb	r2, [r3, #0]
		return;
    61a8:	e006      	b.n	61b8 <stdio_usb_getchar+0x34>
	}

	*data = (char)udi_cdc_getc();
    61aa:	4b07      	ldr	r3, [pc, #28]	; (61c8 <stdio_usb_getchar+0x44>)
    61ac:	58d3      	ldr	r3, [r2, r3]
    61ae:	4798      	blx	r3
    61b0:	0003      	movs	r3, r0
    61b2:	b2da      	uxtb	r2, r3
    61b4:	683b      	ldr	r3, [r7, #0]
    61b6:	701a      	strb	r2, [r3, #0]
}
    61b8:	46bd      	mov	sp, r7
    61ba:	b002      	add	sp, #8
    61bc:	bd80      	pop	{r7, pc}
    61be:	46c0      	nop			; (mov r8, r8)
    61c0:	000092a0 	.word	0x000092a0
    61c4:	1fffa175 	.word	0x1fffa175
    61c8:	000002a8 	.word	0x000002a8

000061cc <stdio_usb_enable>:

bool stdio_usb_enable(void)
{
    61cc:	b580      	push	{r7, lr}
    61ce:	af00      	add	r7, sp, #0
	stdio_usb_interface_enable = true;
    61d0:	4b03      	ldr	r3, [pc, #12]	; (61e0 <stdio_usb_enable+0x14>)
    61d2:	447b      	add	r3, pc
    61d4:	2201      	movs	r2, #1
    61d6:	701a      	strb	r2, [r3, #0]
	return true;
    61d8:	2301      	movs	r3, #1
}
    61da:	0018      	movs	r0, r3
    61dc:	46bd      	mov	sp, r7
    61de:	bd80      	pop	{r7, pc}
    61e0:	1fffa137 	.word	0x1fffa137

000061e4 <stdio_usb_init>:
{
	stdio_usb_interface_enable = false;
}

void stdio_usb_init(void)
{
    61e4:	b5b0      	push	{r4, r5, r7, lr}
    61e6:	af00      	add	r7, sp, #0
    61e8:	4c13      	ldr	r4, [pc, #76]	; (6238 <stdio_usb_init+0x54>)
    61ea:	447c      	add	r4, pc
	stdio_base = NULL;
    61ec:	4b13      	ldr	r3, [pc, #76]	; (623c <stdio_usb_init+0x58>)
    61ee:	58e3      	ldr	r3, [r4, r3]
    61f0:	2200      	movs	r2, #0
    61f2:	601a      	str	r2, [r3, #0]
	ptr_put = stdio_usb_putchar;
    61f4:	4b12      	ldr	r3, [pc, #72]	; (6240 <stdio_usb_init+0x5c>)
    61f6:	58e3      	ldr	r3, [r4, r3]
    61f8:	4a12      	ldr	r2, [pc, #72]	; (6244 <stdio_usb_init+0x60>)
    61fa:	58a2      	ldr	r2, [r4, r2]
    61fc:	601a      	str	r2, [r3, #0]
	ptr_get = stdio_usb_getchar;
    61fe:	4b12      	ldr	r3, [pc, #72]	; (6248 <stdio_usb_init+0x64>)
    6200:	58e3      	ldr	r3, [r4, r3]
    6202:	4a12      	ldr	r2, [pc, #72]	; (624c <stdio_usb_init+0x68>)
    6204:	58a2      	ldr	r2, [r4, r2]
    6206:	601a      	str	r2, [r3, #0]
	/*
	 * Start and attach USB CDC device interface for devices with
	 * integrated USB interfaces.  Assume the VBUS is present if
	 * VBUS monitoring is not available.
	 */
	udc_start ();
    6208:	4b11      	ldr	r3, [pc, #68]	; (6250 <stdio_usb_init+0x6c>)
    620a:	58e3      	ldr	r3, [r4, r3]
    620c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
# endif
# if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    620e:	4b11      	ldr	r3, [pc, #68]	; (6254 <stdio_usb_init+0x70>)
    6210:	58e3      	ldr	r3, [r4, r3]
    6212:	681b      	ldr	r3, [r3, #0]
    6214:	689b      	ldr	r3, [r3, #8]
    6216:	2100      	movs	r1, #0
    6218:	0018      	movs	r0, r3
    621a:	4b0f      	ldr	r3, [pc, #60]	; (6258 <stdio_usb_init+0x74>)
    621c:	58e3      	ldr	r3, [r4, r3]
    621e:	4798      	blx	r3
	setbuf(stdin, NULL);
    6220:	4b0c      	ldr	r3, [pc, #48]	; (6254 <stdio_usb_init+0x70>)
    6222:	58e3      	ldr	r3, [r4, r3]
    6224:	681b      	ldr	r3, [r3, #0]
    6226:	685b      	ldr	r3, [r3, #4]
    6228:	2100      	movs	r1, #0
    622a:	0018      	movs	r0, r3
    622c:	4b0a      	ldr	r3, [pc, #40]	; (6258 <stdio_usb_init+0x74>)
    622e:	58e3      	ldr	r3, [r4, r3]
    6230:	4798      	blx	r3
	// and AVR GCC library:
	// - printf() emits one character at a time.
	// - getchar() requests only 1 byte to exit.
# endif
#endif
}
    6232:	46c0      	nop			; (mov r8, r8)
    6234:	46bd      	mov	sp, r7
    6236:	bdb0      	pop	{r4, r5, r7, pc}
    6238:	00009246 	.word	0x00009246
    623c:	0000022c 	.word	0x0000022c
    6240:	00000138 	.word	0x00000138
    6244:	00000188 	.word	0x00000188
    6248:	0000011c 	.word	0x0000011c
    624c:	00000144 	.word	0x00000144
    6250:	000002f0 	.word	0x000002f0
    6254:	00000270 	.word	0x00000270
    6258:	000002c4 	.word	0x000002c4

0000625c <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
    625c:	b580      	push	{r7, lr}
    625e:	b084      	sub	sp, #16
    6260:	af00      	add	r7, sp, #0
    6262:	0002      	movs	r2, r0
    6264:	6039      	str	r1, [r7, #0]
    6266:	1dfb      	adds	r3, r7, #7
    6268:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(conf);

	uint32_t temp = 0;
    626a:	2300      	movs	r3, #0
    626c:	60fb      	str	r3, [r7, #12]

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
    626e:	4b2b      	ldr	r3, [pc, #172]	; (631c <bod_set_config+0xc0>)
    6270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    6272:	2202      	movs	r2, #2
    6274:	4013      	ands	r3, r2
    6276:	d005      	beq.n	6284 <bod_set_config+0x28>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
    6278:	4b28      	ldr	r3, [pc, #160]	; (631c <bod_set_config+0xc0>)
    627a:	4a28      	ldr	r2, [pc, #160]	; (631c <bod_set_config+0xc0>)
    627c:	6b52      	ldr	r2, [r2, #52]	; 0x34
    627e:	2102      	movs	r1, #2
    6280:	438a      	bics	r2, r1
    6282:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    6284:	683b      	ldr	r3, [r7, #0]
    6286:	881b      	ldrh	r3, [r3, #0]
    6288:	001a      	movs	r2, r3
    628a:	683b      	ldr	r3, [r7, #0]
    628c:	791b      	ldrb	r3, [r3, #4]
    628e:	4313      	orrs	r3, r2
			(uint32_t)conf->mode;
    6290:	683a      	ldr	r2, [r7, #0]
    6292:	8852      	ldrh	r2, [r2, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
    6294:	4313      	orrs	r3, r2
    6296:	68fa      	ldr	r2, [r7, #12]
    6298:	4313      	orrs	r3, r2
    629a:	60fb      	str	r3, [r7, #12]

	if (conf->mode == BOD_MODE_SAMPLED) {
    629c:	683b      	ldr	r3, [r7, #0]
    629e:	885a      	ldrh	r2, [r3, #2]
    62a0:	2380      	movs	r3, #128	; 0x80
    62a2:	005b      	lsls	r3, r3, #1
    62a4:	429a      	cmp	r2, r3
    62a6:	d104      	bne.n	62b2 <bod_set_config+0x56>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
    62a8:	68fb      	ldr	r3, [r7, #12]
    62aa:	2280      	movs	r2, #128	; 0x80
    62ac:	0092      	lsls	r2, r2, #2
    62ae:	4313      	orrs	r3, r2
    62b0:	60fb      	str	r3, [r7, #12]
	}

	if (conf->hysteresis == true) {
    62b2:	683b      	ldr	r3, [r7, #0]
    62b4:	799b      	ldrb	r3, [r3, #6]
    62b6:	2b00      	cmp	r3, #0
    62b8:	d003      	beq.n	62c2 <bod_set_config+0x66>
		temp |= SYSCTRL_BOD33_HYST;
    62ba:	68fb      	ldr	r3, [r7, #12]
    62bc:	2204      	movs	r2, #4
    62be:	4313      	orrs	r3, r2
    62c0:	60fb      	str	r3, [r7, #12]
	}

	if (conf->run_in_standby == true) {
    62c2:	683b      	ldr	r3, [r7, #0]
    62c4:	79db      	ldrb	r3, [r3, #7]
    62c6:	2b00      	cmp	r3, #0
    62c8:	d003      	beq.n	62d2 <bod_set_config+0x76>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
    62ca:	68fb      	ldr	r3, [r7, #12]
    62cc:	2240      	movs	r2, #64	; 0x40
    62ce:	4313      	orrs	r3, r2
    62d0:	60fb      	str	r3, [r7, #12]
	}

	switch (bod_id) {
    62d2:	1dfb      	adds	r3, r7, #7
    62d4:	781b      	ldrb	r3, [r3, #0]
    62d6:	2b00      	cmp	r3, #0
    62d8:	d118      	bne.n	630c <bod_set_config+0xb0>
		case BOD_BOD33:
			if (conf->level > 0x3F) {
    62da:	683b      	ldr	r3, [r7, #0]
    62dc:	795b      	ldrb	r3, [r3, #5]
    62de:	2b3f      	cmp	r3, #63	; 0x3f
    62e0:	d901      	bls.n	62e6 <bod_set_config+0x8a>
				return STATUS_ERR_INVALID_ARG;
    62e2:	2317      	movs	r3, #23
    62e4:	e015      	b.n	6312 <bod_set_config+0xb6>
			}

			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
    62e6:	4b0d      	ldr	r3, [pc, #52]	; (631c <bod_set_config+0xc0>)
    62e8:	683a      	ldr	r2, [r7, #0]
    62ea:	7952      	ldrb	r2, [r2, #5]
    62ec:	0412      	lsls	r2, r2, #16
    62ee:	0011      	movs	r1, r2
    62f0:	22fc      	movs	r2, #252	; 0xfc
    62f2:	0392      	lsls	r2, r2, #14
    62f4:	4011      	ands	r1, r2
    62f6:	68fa      	ldr	r2, [r7, #12]
    62f8:	430a      	orrs	r2, r1
    62fa:	635a      	str	r2, [r3, #52]	; 0x34

			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
    62fc:	46c0      	nop			; (mov r8, r8)
    62fe:	4b07      	ldr	r3, [pc, #28]	; (631c <bod_set_config+0xc0>)
    6300:	68da      	ldr	r2, [r3, #12]
    6302:	2380      	movs	r3, #128	; 0x80
    6304:	011b      	lsls	r3, r3, #4
    6306:	4013      	ands	r3, r2
    6308:	d0f9      	beq.n	62fe <bod_set_config+0xa2>
				/* Wait for BOD33 register sync ready */
			}
			break;
    630a:	e001      	b.n	6310 <bod_set_config+0xb4>
		default:
			return STATUS_ERR_INVALID_ARG;
    630c:	2317      	movs	r3, #23
    630e:	e000      	b.n	6312 <bod_set_config+0xb6>
	}

	return STATUS_OK;
    6310:	2300      	movs	r3, #0
}
    6312:	0018      	movs	r0, r3
    6314:	46bd      	mov	sp, r7
    6316:	b004      	add	sp, #16
    6318:	bd80      	pop	{r7, pc}
    631a:	46c0      	nop			; (mov r8, r8)
    631c:	40000800 	.word	0x40000800

00006320 <system_ahb_clock_set_mask>:
{
    6320:	b580      	push	{r7, lr}
    6322:	b082      	sub	sp, #8
    6324:	af00      	add	r7, sp, #0
    6326:	6078      	str	r0, [r7, #4]
	PM->AHBMASK.reg |= ahb_mask;
    6328:	4b04      	ldr	r3, [pc, #16]	; (633c <system_ahb_clock_set_mask+0x1c>)
    632a:	4a04      	ldr	r2, [pc, #16]	; (633c <system_ahb_clock_set_mask+0x1c>)
    632c:	6951      	ldr	r1, [r2, #20]
    632e:	687a      	ldr	r2, [r7, #4]
    6330:	430a      	orrs	r2, r1
    6332:	615a      	str	r2, [r3, #20]
}
    6334:	46c0      	nop			; (mov r8, r8)
    6336:	46bd      	mov	sp, r7
    6338:	b002      	add	sp, #8
    633a:	bd80      	pop	{r7, pc}
    633c:	40000400 	.word	0x40000400

00006340 <system_apb_clock_set_mask>:
{
    6340:	b580      	push	{r7, lr}
    6342:	b082      	sub	sp, #8
    6344:	af00      	add	r7, sp, #0
    6346:	0002      	movs	r2, r0
    6348:	6039      	str	r1, [r7, #0]
    634a:	1dfb      	adds	r3, r7, #7
    634c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    634e:	1dfb      	adds	r3, r7, #7
    6350:	781b      	ldrb	r3, [r3, #0]
    6352:	2b01      	cmp	r3, #1
    6354:	d00a      	beq.n	636c <system_apb_clock_set_mask+0x2c>
    6356:	2b02      	cmp	r3, #2
    6358:	d00f      	beq.n	637a <system_apb_clock_set_mask+0x3a>
    635a:	2b00      	cmp	r3, #0
    635c:	d114      	bne.n	6388 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    635e:	4b0e      	ldr	r3, [pc, #56]	; (6398 <system_apb_clock_set_mask+0x58>)
    6360:	4a0d      	ldr	r2, [pc, #52]	; (6398 <system_apb_clock_set_mask+0x58>)
    6362:	6991      	ldr	r1, [r2, #24]
    6364:	683a      	ldr	r2, [r7, #0]
    6366:	430a      	orrs	r2, r1
    6368:	619a      	str	r2, [r3, #24]
			break;
    636a:	e00f      	b.n	638c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    636c:	4b0a      	ldr	r3, [pc, #40]	; (6398 <system_apb_clock_set_mask+0x58>)
    636e:	4a0a      	ldr	r2, [pc, #40]	; (6398 <system_apb_clock_set_mask+0x58>)
    6370:	69d1      	ldr	r1, [r2, #28]
    6372:	683a      	ldr	r2, [r7, #0]
    6374:	430a      	orrs	r2, r1
    6376:	61da      	str	r2, [r3, #28]
			break;
    6378:	e008      	b.n	638c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    637a:	4b07      	ldr	r3, [pc, #28]	; (6398 <system_apb_clock_set_mask+0x58>)
    637c:	4a06      	ldr	r2, [pc, #24]	; (6398 <system_apb_clock_set_mask+0x58>)
    637e:	6a11      	ldr	r1, [r2, #32]
    6380:	683a      	ldr	r2, [r7, #0]
    6382:	430a      	orrs	r2, r1
    6384:	621a      	str	r2, [r3, #32]
			break;
    6386:	e001      	b.n	638c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6388:	2317      	movs	r3, #23
    638a:	e000      	b.n	638e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    638c:	2300      	movs	r3, #0
}
    638e:	0018      	movs	r0, r3
    6390:	46bd      	mov	sp, r7
    6392:	b002      	add	sp, #8
    6394:	bd80      	pop	{r7, pc}
    6396:	46c0      	nop			; (mov r8, r8)
    6398:	40000400 	.word	0x40000400

0000639c <system_interrupt_enter_critical_section>:
{
    639c:	b580      	push	{r7, lr}
    639e:	af00      	add	r7, sp, #0
    63a0:	4a03      	ldr	r2, [pc, #12]	; (63b0 <system_interrupt_enter_critical_section+0x14>)
    63a2:	447a      	add	r2, pc
	cpu_irq_enter_critical();
    63a4:	4b03      	ldr	r3, [pc, #12]	; (63b4 <system_interrupt_enter_critical_section+0x18>)
    63a6:	58d3      	ldr	r3, [r2, r3]
    63a8:	4798      	blx	r3
}
    63aa:	46c0      	nop			; (mov r8, r8)
    63ac:	46bd      	mov	sp, r7
    63ae:	bd80      	pop	{r7, pc}
    63b0:	0000908e 	.word	0x0000908e
    63b4:	00000108 	.word	0x00000108

000063b8 <system_interrupt_leave_critical_section>:
{
    63b8:	b580      	push	{r7, lr}
    63ba:	af00      	add	r7, sp, #0
    63bc:	4a03      	ldr	r2, [pc, #12]	; (63cc <system_interrupt_leave_critical_section+0x14>)
    63be:	447a      	add	r2, pc
	cpu_irq_leave_critical();
    63c0:	4b03      	ldr	r3, [pc, #12]	; (63d0 <system_interrupt_leave_critical_section+0x18>)
    63c2:	58d3      	ldr	r3, [r2, r3]
    63c4:	4798      	blx	r3
}
    63c6:	46c0      	nop			; (mov r8, r8)
    63c8:	46bd      	mov	sp, r7
    63ca:	bd80      	pop	{r7, pc}
    63cc:	00009072 	.word	0x00009072
    63d0:	00000014 	.word	0x00000014

000063d4 <system_interrupt_enable>:
{
    63d4:	b580      	push	{r7, lr}
    63d6:	b082      	sub	sp, #8
    63d8:	af00      	add	r7, sp, #0
    63da:	0002      	movs	r2, r0
    63dc:	1dfb      	adds	r3, r7, #7
    63de:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    63e0:	4b06      	ldr	r3, [pc, #24]	; (63fc <system_interrupt_enable+0x28>)
    63e2:	1dfa      	adds	r2, r7, #7
    63e4:	7812      	ldrb	r2, [r2, #0]
    63e6:	0011      	movs	r1, r2
    63e8:	221f      	movs	r2, #31
    63ea:	400a      	ands	r2, r1
    63ec:	2101      	movs	r1, #1
    63ee:	4091      	lsls	r1, r2
    63f0:	000a      	movs	r2, r1
    63f2:	601a      	str	r2, [r3, #0]
}
    63f4:	46c0      	nop			; (mov r8, r8)
    63f6:	46bd      	mov	sp, r7
    63f8:	b002      	add	sp, #8
    63fa:	bd80      	pop	{r7, pc}
    63fc:	e000e100 	.word	0xe000e100

00006400 <_dma_find_first_free_channel_and_allocate>:
 * \return Status of channel allocation.
 * \retval DMA_INVALID_CHANNEL  No channel available
 * \retval count          Allocated channel for the DMA resource
 */
static uint8_t _dma_find_first_free_channel_and_allocate(void)
{
    6400:	b590      	push	{r4, r7, lr}
    6402:	b085      	sub	sp, #20
    6404:	af00      	add	r7, sp, #0
    6406:	4c28      	ldr	r4, [pc, #160]	; (64a8 <_dma_find_first_free_channel_and_allocate+0xa8>)
    6408:	447c      	add	r4, pc
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;
    640a:	1dfb      	adds	r3, r7, #7
    640c:	2200      	movs	r2, #0
    640e:	701a      	strb	r2, [r3, #0]

	system_interrupt_enter_critical_section();
    6410:	4b26      	ldr	r3, [pc, #152]	; (64ac <_dma_find_first_free_channel_and_allocate+0xac>)
    6412:	447b      	add	r3, pc
    6414:	4798      	blx	r3

	tmp = _dma_inst.allocated_channels;
    6416:	4b26      	ldr	r3, [pc, #152]	; (64b0 <_dma_find_first_free_channel_and_allocate+0xb0>)
    6418:	58e3      	ldr	r3, [r4, r3]
    641a:	685b      	ldr	r3, [r3, #4]
    641c:	60bb      	str	r3, [r7, #8]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    641e:	230f      	movs	r3, #15
    6420:	18fb      	adds	r3, r7, r3
    6422:	2200      	movs	r2, #0
    6424:	701a      	strb	r2, [r3, #0]
    6426:	e026      	b.n	6476 <_dma_find_first_free_channel_and_allocate+0x76>
		if (!(tmp & 0x00000001)) {
    6428:	68bb      	ldr	r3, [r7, #8]
    642a:	2201      	movs	r2, #1
    642c:	4013      	ands	r3, r2
    642e:	d118      	bne.n	6462 <_dma_find_first_free_channel_and_allocate+0x62>
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
    6430:	4b1f      	ldr	r3, [pc, #124]	; (64b0 <_dma_find_first_free_channel_and_allocate+0xb0>)
    6432:	58e3      	ldr	r3, [r4, r3]
    6434:	685b      	ldr	r3, [r3, #4]
    6436:	220f      	movs	r2, #15
    6438:	18ba      	adds	r2, r7, r2
    643a:	7812      	ldrb	r2, [r2, #0]
    643c:	2101      	movs	r1, #1
    643e:	4091      	lsls	r1, r2
    6440:	000a      	movs	r2, r1
    6442:	431a      	orrs	r2, r3
    6444:	4b1a      	ldr	r3, [pc, #104]	; (64b0 <_dma_find_first_free_channel_and_allocate+0xb0>)
    6446:	58e3      	ldr	r3, [r4, r3]
    6448:	605a      	str	r2, [r3, #4]
			_dma_inst.free_channels--;
    644a:	4b19      	ldr	r3, [pc, #100]	; (64b0 <_dma_find_first_free_channel_and_allocate+0xb0>)
    644c:	58e3      	ldr	r3, [r4, r3]
    644e:	7a1b      	ldrb	r3, [r3, #8]
    6450:	3b01      	subs	r3, #1
    6452:	b2da      	uxtb	r2, r3
    6454:	4b16      	ldr	r3, [pc, #88]	; (64b0 <_dma_find_first_free_channel_and_allocate+0xb0>)
    6456:	58e3      	ldr	r3, [r4, r3]
    6458:	721a      	strb	r2, [r3, #8]
			allocated = true;
    645a:	1dfb      	adds	r3, r7, #7
    645c:	2201      	movs	r2, #1
    645e:	701a      	strb	r2, [r3, #0]

			break;
    6460:	e00e      	b.n	6480 <_dma_find_first_free_channel_and_allocate+0x80>
		}

		tmp = tmp >> 1;
    6462:	68bb      	ldr	r3, [r7, #8]
    6464:	085b      	lsrs	r3, r3, #1
    6466:	60bb      	str	r3, [r7, #8]
	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
    6468:	230f      	movs	r3, #15
    646a:	18fb      	adds	r3, r7, r3
    646c:	220f      	movs	r2, #15
    646e:	18ba      	adds	r2, r7, r2
    6470:	7812      	ldrb	r2, [r2, #0]
    6472:	3201      	adds	r2, #1
    6474:	701a      	strb	r2, [r3, #0]
    6476:	230f      	movs	r3, #15
    6478:	18fb      	adds	r3, r7, r3
    647a:	781b      	ldrb	r3, [r3, #0]
    647c:	2b04      	cmp	r3, #4
    647e:	d9d3      	bls.n	6428 <_dma_find_first_free_channel_and_allocate+0x28>
	}

	system_interrupt_leave_critical_section();
    6480:	4b0c      	ldr	r3, [pc, #48]	; (64b4 <_dma_find_first_free_channel_and_allocate+0xb4>)
    6482:	447b      	add	r3, pc
    6484:	4798      	blx	r3

	if (!allocated) {
    6486:	1dfb      	adds	r3, r7, #7
    6488:	781b      	ldrb	r3, [r3, #0]
    648a:	2201      	movs	r2, #1
    648c:	4053      	eors	r3, r2
    648e:	b2db      	uxtb	r3, r3
    6490:	2b00      	cmp	r3, #0
    6492:	d001      	beq.n	6498 <_dma_find_first_free_channel_and_allocate+0x98>
		return DMA_INVALID_CHANNEL;
    6494:	23ff      	movs	r3, #255	; 0xff
    6496:	e002      	b.n	649e <_dma_find_first_free_channel_and_allocate+0x9e>
	} else {
		return count;
    6498:	230f      	movs	r3, #15
    649a:	18fb      	adds	r3, r7, r3
    649c:	781b      	ldrb	r3, [r3, #0]
	}
}
    649e:	0018      	movs	r0, r3
    64a0:	46bd      	mov	sp, r7
    64a2:	b005      	add	sp, #20
    64a4:	bd90      	pop	{r4, r7, pc}
    64a6:	46c0      	nop			; (mov r8, r8)
    64a8:	00009028 	.word	0x00009028
    64ac:	ffffff87 	.word	0xffffff87
    64b0:	000002d8 	.word	0x000002d8
    64b4:	ffffff33 	.word	0xffffff33

000064b8 <_dma_set_config>:
 * \param[out] resource_config Configurations of the DMA resource
 *
 */
static void _dma_set_config(struct dma_resource *resource,
		struct dma_resource_config *resource_config)
{
    64b8:	b580      	push	{r7, lr}
    64ba:	b084      	sub	sp, #16
    64bc:	af00      	add	r7, sp, #0
    64be:	6078      	str	r0, [r7, #4]
    64c0:	6039      	str	r1, [r7, #0]
	Assert(resource);
	Assert(resource_config);
	uint32_t temp_CHCTRLB_reg;
	system_interrupt_enter_critical_section();
    64c2:	4b26      	ldr	r3, [pc, #152]	; (655c <_dma_set_config+0xa4>)
    64c4:	447b      	add	r3, pc
    64c6:	4798      	blx	r3

	/** Select the DMA channel and clear software trigger */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    64c8:	4a25      	ldr	r2, [pc, #148]	; (6560 <_dma_set_config+0xa8>)
    64ca:	687b      	ldr	r3, [r7, #4]
    64cc:	781b      	ldrb	r3, [r3, #0]
    64ce:	210f      	movs	r1, #15
    64d0:	400b      	ands	r3, r1
    64d2:	b2d9      	uxtb	r1, r3
    64d4:	233f      	movs	r3, #63	; 0x3f
    64d6:	54d1      	strb	r1, [r2, r3]
	DMAC->SWTRIGCTRL.reg &= (uint32_t)(~(1 << resource->channel_id));
    64d8:	4b21      	ldr	r3, [pc, #132]	; (6560 <_dma_set_config+0xa8>)
    64da:	4a21      	ldr	r2, [pc, #132]	; (6560 <_dma_set_config+0xa8>)
    64dc:	6912      	ldr	r2, [r2, #16]
    64de:	6879      	ldr	r1, [r7, #4]
    64e0:	7809      	ldrb	r1, [r1, #0]
    64e2:	0008      	movs	r0, r1
    64e4:	2101      	movs	r1, #1
    64e6:	4081      	lsls	r1, r0
    64e8:	43c9      	mvns	r1, r1
    64ea:	400a      	ands	r2, r1
    64ec:	611a      	str	r2, [r3, #16]

	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    64ee:	683b      	ldr	r3, [r7, #0]
    64f0:	781b      	ldrb	r3, [r3, #0]
    64f2:	015b      	lsls	r3, r3, #5
    64f4:	001a      	movs	r2, r3
    64f6:	2360      	movs	r3, #96	; 0x60
    64f8:	401a      	ands	r2, r3
			DMAC_CHCTRLB_TRIGSRC(resource_config->peripheral_trigger) | \
    64fa:	683b      	ldr	r3, [r7, #0]
    64fc:	785b      	ldrb	r3, [r3, #1]
    64fe:	021b      	lsls	r3, r3, #8
    6500:	0019      	movs	r1, r3
    6502:	23fc      	movs	r3, #252	; 0xfc
    6504:	019b      	lsls	r3, r3, #6
    6506:	400b      	ands	r3, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    6508:	431a      	orrs	r2, r3
			DMAC_CHCTRLB_TRIGACT(resource_config->trigger_action);
    650a:	683b      	ldr	r3, [r7, #0]
    650c:	789b      	ldrb	r3, [r3, #2]
    650e:	059b      	lsls	r3, r3, #22
    6510:	0019      	movs	r1, r3
    6512:	23c0      	movs	r3, #192	; 0xc0
    6514:	041b      	lsls	r3, r3, #16
    6516:	400b      	ands	r3, r1
	temp_CHCTRLB_reg = DMAC_CHCTRLB_LVL(resource_config->priority) | \
    6518:	4313      	orrs	r3, r2
    651a:	60fb      	str	r3, [r7, #12]


	if(resource_config->event_config.input_action){
    651c:	683b      	ldr	r3, [r7, #0]
    651e:	78db      	ldrb	r3, [r3, #3]
    6520:	2b00      	cmp	r3, #0
    6522:	d009      	beq.n	6538 <_dma_set_config+0x80>
	temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVIE | DMAC_CHCTRLB_EVACT(
    6524:	683b      	ldr	r3, [r7, #0]
    6526:	78db      	ldrb	r3, [r3, #3]
    6528:	001a      	movs	r2, r3
    652a:	2307      	movs	r3, #7
    652c:	401a      	ands	r2, r3
    652e:	68fb      	ldr	r3, [r7, #12]
    6530:	4313      	orrs	r3, r2
    6532:	2208      	movs	r2, #8
    6534:	4313      	orrs	r3, r2
    6536:	60fb      	str	r3, [r7, #12]
				resource_config->event_config.input_action);
	}

	/** Enable event output, the event output selection is configured in
	 * each transfer descriptor  */
	if (resource_config->event_config.event_output_enable) {
    6538:	683b      	ldr	r3, [r7, #0]
    653a:	791b      	ldrb	r3, [r3, #4]
    653c:	2b00      	cmp	r3, #0
    653e:	d003      	beq.n	6548 <_dma_set_config+0x90>
		temp_CHCTRLB_reg |= DMAC_CHCTRLB_EVOE;
    6540:	68fb      	ldr	r3, [r7, #12]
    6542:	2210      	movs	r2, #16
    6544:	4313      	orrs	r3, r2
    6546:	60fb      	str	r3, [r7, #12]
	}

	/* Write config to CTRLB register */
	DMAC->CHCTRLB.reg = temp_CHCTRLB_reg;
    6548:	4b05      	ldr	r3, [pc, #20]	; (6560 <_dma_set_config+0xa8>)
    654a:	68fa      	ldr	r2, [r7, #12]
    654c:	645a      	str	r2, [r3, #68]	; 0x44



	system_interrupt_leave_critical_section();
    654e:	4b05      	ldr	r3, [pc, #20]	; (6564 <_dma_set_config+0xac>)
    6550:	447b      	add	r3, pc
    6552:	4798      	blx	r3
}
    6554:	46c0      	nop			; (mov r8, r8)
    6556:	46bd      	mov	sp, r7
    6558:	b004      	add	sp, #16
    655a:	bd80      	pop	{r7, pc}
    655c:	fffffed5 	.word	0xfffffed5
    6560:	41004800 	.word	0x41004800
    6564:	fffffe65 	.word	0xfffffe65

00006568 <DMAC_Handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
void DMAC_Handler( void )
{
    6568:	b590      	push	{r4, r7, lr}
    656a:	b087      	sub	sp, #28
    656c:	af00      	add	r7, sp, #0
    656e:	4c4d      	ldr	r4, [pc, #308]	; (66a4 <DMAC_Handler+0x13c>)
    6570:	447c      	add	r4, pc
	struct dma_resource *resource;
	uint8_t isr;
	uint32_t write_size;
	uint32_t total_size;

	system_interrupt_enter_critical_section();
    6572:	4b4d      	ldr	r3, [pc, #308]	; (66a8 <DMAC_Handler+0x140>)
    6574:	447b      	add	r3, pc
    6576:	4798      	blx	r3

	/* Get Pending channel */
	active_channel =  DMAC->INTPEND.reg & DMAC_INTPEND_ID_Msk;
    6578:	4b4c      	ldr	r3, [pc, #304]	; (66ac <DMAC_Handler+0x144>)
    657a:	8c1b      	ldrh	r3, [r3, #32]
    657c:	b29b      	uxth	r3, r3
    657e:	b2da      	uxtb	r2, r3
    6580:	2317      	movs	r3, #23
    6582:	18fb      	adds	r3, r7, r3
    6584:	210f      	movs	r1, #15
    6586:	400a      	ands	r2, r1
    6588:	701a      	strb	r2, [r3, #0]

	Assert(_dma_active_resource[active_channel]);

	/* Get active DMA resource based on channel */
	resource = _dma_active_resource[active_channel];
    658a:	2317      	movs	r3, #23
    658c:	18fb      	adds	r3, r7, r3
    658e:	781a      	ldrb	r2, [r3, #0]
    6590:	4b47      	ldr	r3, [pc, #284]	; (66b0 <DMAC_Handler+0x148>)
    6592:	447b      	add	r3, pc
    6594:	0092      	lsls	r2, r2, #2
    6596:	58d3      	ldr	r3, [r2, r3]
    6598:	613b      	str	r3, [r7, #16]

	/* Select the active channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    659a:	4a44      	ldr	r2, [pc, #272]	; (66ac <DMAC_Handler+0x144>)
    659c:	693b      	ldr	r3, [r7, #16]
    659e:	781b      	ldrb	r3, [r3, #0]
    65a0:	210f      	movs	r1, #15
    65a2:	400b      	ands	r3, r1
    65a4:	b2d9      	uxtb	r1, r3
    65a6:	233f      	movs	r3, #63	; 0x3f
    65a8:	54d1      	strb	r1, [r2, r3]
	isr = DMAC->CHINTFLAG.reg;
    65aa:	4940      	ldr	r1, [pc, #256]	; (66ac <DMAC_Handler+0x144>)
    65ac:	230f      	movs	r3, #15
    65ae:	18fb      	adds	r3, r7, r3
    65b0:	224e      	movs	r2, #78	; 0x4e
    65b2:	5c8a      	ldrb	r2, [r1, r2]
    65b4:	701a      	strb	r2, [r3, #0]

	/* Calculate block transfer size of the DMA transfer */
	total_size = descriptor_section[resource->channel_id].BTCNT.reg;
    65b6:	693b      	ldr	r3, [r7, #16]
    65b8:	781b      	ldrb	r3, [r3, #0]
    65ba:	0019      	movs	r1, r3
    65bc:	4b3d      	ldr	r3, [pc, #244]	; (66b4 <DMAC_Handler+0x14c>)
    65be:	58e2      	ldr	r2, [r4, r3]
    65c0:	010b      	lsls	r3, r1, #4
    65c2:	18d3      	adds	r3, r2, r3
    65c4:	3302      	adds	r3, #2
    65c6:	881b      	ldrh	r3, [r3, #0]
    65c8:	b29b      	uxth	r3, r3
    65ca:	60bb      	str	r3, [r7, #8]
	write_size = _write_back_section[resource->channel_id].BTCNT.reg;
    65cc:	693b      	ldr	r3, [r7, #16]
    65ce:	781b      	ldrb	r3, [r3, #0]
    65d0:	4a39      	ldr	r2, [pc, #228]	; (66b8 <DMAC_Handler+0x150>)
    65d2:	447a      	add	r2, pc
    65d4:	011b      	lsls	r3, r3, #4
    65d6:	18d3      	adds	r3, r2, r3
    65d8:	3302      	adds	r3, #2
    65da:	881b      	ldrh	r3, [r3, #0]
    65dc:	b29b      	uxth	r3, r3
    65de:	607b      	str	r3, [r7, #4]
	resource->transfered_size = total_size - write_size;
    65e0:	68ba      	ldr	r2, [r7, #8]
    65e2:	687b      	ldr	r3, [r7, #4]
    65e4:	1ad2      	subs	r2, r2, r3
    65e6:	693b      	ldr	r3, [r7, #16]
    65e8:	615a      	str	r2, [r3, #20]

	/* DMA channel interrupt handler */
	if (isr & DMAC_CHINTENCLR_TERR) {
    65ea:	230f      	movs	r3, #15
    65ec:	18fb      	adds	r3, r7, r3
    65ee:	781b      	ldrb	r3, [r3, #0]
    65f0:	2201      	movs	r2, #1
    65f2:	4013      	ands	r3, r2
    65f4:	d016      	beq.n	6624 <DMAC_Handler+0xbc>
		/* Clear transfer error flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TERR;
    65f6:	4a2d      	ldr	r2, [pc, #180]	; (66ac <DMAC_Handler+0x144>)
    65f8:	234e      	movs	r3, #78	; 0x4e
    65fa:	2101      	movs	r1, #1
    65fc:	54d1      	strb	r1, [r2, r3]

		/* Set I/O ERROR status */
		resource->job_status = STATUS_ERR_IO;
    65fe:	693b      	ldr	r3, [r7, #16]
    6600:	2210      	movs	r2, #16
    6602:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    6604:	693b      	ldr	r3, [r7, #16]
    6606:	7c1b      	ldrb	r3, [r3, #16]
    6608:	001a      	movs	r2, r3
    660a:	2301      	movs	r3, #1
    660c:	4013      	ands	r3, r2
    660e:	d042      	beq.n	6696 <DMAC_Handler+0x12e>
				(resource->callback[DMA_CALLBACK_TRANSFER_ERROR])) {
    6610:	693b      	ldr	r3, [r7, #16]
    6612:	685b      	ldr	r3, [r3, #4]
		if ((resource->callback_enable & (1<<DMA_CALLBACK_TRANSFER_ERROR)) &&
    6614:	2b00      	cmp	r3, #0
    6616:	d03e      	beq.n	6696 <DMAC_Handler+0x12e>
			resource->callback[DMA_CALLBACK_TRANSFER_ERROR](resource);
    6618:	693b      	ldr	r3, [r7, #16]
    661a:	685b      	ldr	r3, [r3, #4]
    661c:	693a      	ldr	r2, [r7, #16]
    661e:	0010      	movs	r0, r2
    6620:	4798      	blx	r3
    6622:	e038      	b.n	6696 <DMAC_Handler+0x12e>
		}
	} else if (isr & DMAC_CHINTENCLR_TCMPL) {
    6624:	230f      	movs	r3, #15
    6626:	18fb      	adds	r3, r7, r3
    6628:	781b      	ldrb	r3, [r3, #0]
    662a:	2202      	movs	r2, #2
    662c:	4013      	ands	r3, r2
    662e:	d016      	beq.n	665e <DMAC_Handler+0xf6>
		/* Clear the transfer complete flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_TCMPL;
    6630:	4a1e      	ldr	r2, [pc, #120]	; (66ac <DMAC_Handler+0x144>)
    6632:	234e      	movs	r3, #78	; 0x4e
    6634:	2102      	movs	r1, #2
    6636:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_OK;
    6638:	693b      	ldr	r3, [r7, #16]
    663a:	2200      	movs	r2, #0
    663c:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    663e:	693b      	ldr	r3, [r7, #16]
    6640:	7c1b      	ldrb	r3, [r3, #16]
    6642:	001a      	movs	r2, r3
    6644:	2302      	movs	r3, #2
    6646:	4013      	ands	r3, r2
    6648:	d025      	beq.n	6696 <DMAC_Handler+0x12e>
				(resource->callback[DMA_CALLBACK_TRANSFER_DONE])) {
    664a:	693b      	ldr	r3, [r7, #16]
    664c:	689b      	ldr	r3, [r3, #8]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_TRANSFER_DONE)) &&
    664e:	2b00      	cmp	r3, #0
    6650:	d021      	beq.n	6696 <DMAC_Handler+0x12e>
			resource->callback[DMA_CALLBACK_TRANSFER_DONE](resource);
    6652:	693b      	ldr	r3, [r7, #16]
    6654:	689b      	ldr	r3, [r3, #8]
    6656:	693a      	ldr	r2, [r7, #16]
    6658:	0010      	movs	r0, r2
    665a:	4798      	blx	r3
    665c:	e01b      	b.n	6696 <DMAC_Handler+0x12e>
		}
	} else if (isr & DMAC_CHINTENCLR_SUSP) {
    665e:	230f      	movs	r3, #15
    6660:	18fb      	adds	r3, r7, r3
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	2204      	movs	r2, #4
    6666:	4013      	ands	r3, r2
    6668:	d015      	beq.n	6696 <DMAC_Handler+0x12e>
		/* Clear channel suspend flag */
		DMAC->CHINTFLAG.reg = DMAC_CHINTENCLR_SUSP;
    666a:	4a10      	ldr	r2, [pc, #64]	; (66ac <DMAC_Handler+0x144>)
    666c:	234e      	movs	r3, #78	; 0x4e
    666e:	2104      	movs	r1, #4
    6670:	54d1      	strb	r1, [r2, r3]

		/* Set job status */
		resource->job_status = STATUS_SUSPEND;
    6672:	693b      	ldr	r3, [r7, #16]
    6674:	2206      	movs	r2, #6
    6676:	745a      	strb	r2, [r3, #17]

		/* Execute the callback function */
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    6678:	693b      	ldr	r3, [r7, #16]
    667a:	7c1b      	ldrb	r3, [r3, #16]
    667c:	001a      	movs	r2, r3
    667e:	2304      	movs	r3, #4
    6680:	4013      	ands	r3, r2
    6682:	d008      	beq.n	6696 <DMAC_Handler+0x12e>
			(resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND])){
    6684:	693b      	ldr	r3, [r7, #16]
    6686:	68db      	ldr	r3, [r3, #12]
		if ((resource->callback_enable & (1 << DMA_CALLBACK_CHANNEL_SUSPEND)) &&
    6688:	2b00      	cmp	r3, #0
    668a:	d004      	beq.n	6696 <DMAC_Handler+0x12e>
			resource->callback[DMA_CALLBACK_CHANNEL_SUSPEND](resource);
    668c:	693b      	ldr	r3, [r7, #16]
    668e:	68db      	ldr	r3, [r3, #12]
    6690:	693a      	ldr	r2, [r7, #16]
    6692:	0010      	movs	r0, r2
    6694:	4798      	blx	r3
		}
	}

	system_interrupt_leave_critical_section();
    6696:	4b09      	ldr	r3, [pc, #36]	; (66bc <DMAC_Handler+0x154>)
    6698:	447b      	add	r3, pc
    669a:	4798      	blx	r3
}
    669c:	46c0      	nop			; (mov r8, r8)
    669e:	46bd      	mov	sp, r7
    66a0:	b007      	add	sp, #28
    66a2:	bd90      	pop	{r4, r7, pc}
    66a4:	00008ec0 	.word	0x00008ec0
    66a8:	fffffe25 	.word	0xfffffe25
    66ac:	41004800 	.word	0x41004800
    66b0:	1fff9dca 	.word	0x1fff9dca
    66b4:	00000054 	.word	0x00000054
    66b8:	1fff9d3a 	.word	0x1fff9d3a
    66bc:	fffffd1d 	.word	0xfffffd1d

000066c0 <dma_get_config_defaults>:
 *  \li DMA channel is disabled during sleep mode (if has the feature)
 * \param[out] config Pointer to the configuration
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
    66c0:	b580      	push	{r7, lr}
    66c2:	b082      	sub	sp, #8
    66c4:	af00      	add	r7, sp, #0
    66c6:	6078      	str	r0, [r7, #4]
	Assert(config);
	/* Set as priority 0 */
	config->priority = DMA_PRIORITY_LEVEL_0;
    66c8:	687b      	ldr	r3, [r7, #4]
    66ca:	2200      	movs	r2, #0
    66cc:	701a      	strb	r2, [r3, #0]
	/* Only software/event trigger */
	config->peripheral_trigger = 0;
    66ce:	687b      	ldr	r3, [r7, #4]
    66d0:	2200      	movs	r2, #0
    66d2:	705a      	strb	r2, [r3, #1]
	/* Transaction trigger */
	config->trigger_action = DMA_TRIGGER_ACTION_TRANSACTION;
    66d4:	687b      	ldr	r3, [r7, #4]
    66d6:	2203      	movs	r2, #3
    66d8:	709a      	strb	r2, [r3, #2]

	/* Event configurations, no event input/output */
	config->event_config.input_action = DMA_EVENT_INPUT_NOACT;
    66da:	687b      	ldr	r3, [r7, #4]
    66dc:	2200      	movs	r2, #0
    66de:	70da      	strb	r2, [r3, #3]
	config->event_config.event_output_enable = false;
    66e0:	687b      	ldr	r3, [r7, #4]
    66e2:	2200      	movs	r2, #0
    66e4:	711a      	strb	r2, [r3, #4]
#ifdef FEATURE_DMA_CHANNEL_STANDBY
	config->run_in_standby = false;
#endif
}
    66e6:	46c0      	nop			; (mov r8, r8)
    66e8:	46bd      	mov	sp, r7
    66ea:	b002      	add	sp, #8
    66ec:	bd80      	pop	{r7, pc}
	...

000066f0 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
    66f0:	b590      	push	{r4, r7, lr}
    66f2:	b085      	sub	sp, #20
    66f4:	af00      	add	r7, sp, #0
    66f6:	6078      	str	r0, [r7, #4]
    66f8:	6039      	str	r1, [r7, #0]
    66fa:	4c3b      	ldr	r4, [pc, #236]	; (67e8 <dma_allocate+0xf8>)
    66fc:	447c      	add	r4, pc
	uint8_t new_channel;

	Assert(resource);

	system_interrupt_enter_critical_section();
    66fe:	4b3b      	ldr	r3, [pc, #236]	; (67ec <dma_allocate+0xfc>)
    6700:	447b      	add	r3, pc
    6702:	4798      	blx	r3

	if (!_dma_inst._dma_init) {
    6704:	4b3a      	ldr	r3, [pc, #232]	; (67f0 <dma_allocate+0x100>)
    6706:	58e3      	ldr	r3, [r4, r3]
    6708:	781b      	ldrb	r3, [r3, #0]
    670a:	b2db      	uxtb	r3, r3
    670c:	2201      	movs	r2, #1
    670e:	4053      	eors	r3, r2
    6710:	b2db      	uxtb	r3, r3
    6712:	2b00      	cmp	r3, #0
    6714:	d022      	beq.n	675c <dma_allocate+0x6c>
		/* Initialize clocks for DMA */
#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
		system_ahb_clock_set_mask(MCLK_AHBMASK_DMAC);
#else
		system_ahb_clock_set_mask(PM_AHBMASK_DMAC);
    6716:	2020      	movs	r0, #32
    6718:	4b36      	ldr	r3, [pc, #216]	; (67f4 <dma_allocate+0x104>)
    671a:	447b      	add	r3, pc
    671c:	4798      	blx	r3
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB,
    671e:	2110      	movs	r1, #16
    6720:	2001      	movs	r0, #1
    6722:	4b35      	ldr	r3, [pc, #212]	; (67f8 <dma_allocate+0x108>)
    6724:	447b      	add	r3, pc
    6726:	4798      	blx	r3
				PM_APBBMASK_DMAC);
#endif

		/* Perform a software reset before enable DMA controller */
		DMAC->CTRL.reg &= ~DMAC_CTRL_DMAENABLE;
    6728:	4a34      	ldr	r2, [pc, #208]	; (67fc <dma_allocate+0x10c>)
    672a:	4b34      	ldr	r3, [pc, #208]	; (67fc <dma_allocate+0x10c>)
    672c:	881b      	ldrh	r3, [r3, #0]
    672e:	b29b      	uxth	r3, r3
    6730:	2102      	movs	r1, #2
    6732:	438b      	bics	r3, r1
    6734:	b29b      	uxth	r3, r3
    6736:	8013      	strh	r3, [r2, #0]
		DMAC->CTRL.reg = DMAC_CTRL_SWRST;
    6738:	4b30      	ldr	r3, [pc, #192]	; (67fc <dma_allocate+0x10c>)
    673a:	2201      	movs	r2, #1
    673c:	801a      	strh	r2, [r3, #0]

		/* Setup descriptor base address and write back section base
		 * address */
		DMAC->BASEADDR.reg = (uint32_t)descriptor_section;
    673e:	4b2f      	ldr	r3, [pc, #188]	; (67fc <dma_allocate+0x10c>)
    6740:	4a2f      	ldr	r2, [pc, #188]	; (6800 <dma_allocate+0x110>)
    6742:	58a2      	ldr	r2, [r4, r2]
    6744:	635a      	str	r2, [r3, #52]	; 0x34
		DMAC->WRBADDR.reg = (uint32_t)_write_back_section;
    6746:	4b2d      	ldr	r3, [pc, #180]	; (67fc <dma_allocate+0x10c>)
    6748:	4a2e      	ldr	r2, [pc, #184]	; (6804 <dma_allocate+0x114>)
    674a:	447a      	add	r2, pc
    674c:	639a      	str	r2, [r3, #56]	; 0x38

		/* Enable all priority level at the same time */
		DMAC->CTRL.reg = DMAC_CTRL_DMAENABLE | DMAC_CTRL_LVLEN(0xf);
    674e:	4b2b      	ldr	r3, [pc, #172]	; (67fc <dma_allocate+0x10c>)
    6750:	4a2d      	ldr	r2, [pc, #180]	; (6808 <dma_allocate+0x118>)
    6752:	801a      	strh	r2, [r3, #0]

		_dma_inst._dma_init = true;
    6754:	4b26      	ldr	r3, [pc, #152]	; (67f0 <dma_allocate+0x100>)
    6756:	58e3      	ldr	r3, [r4, r3]
    6758:	2201      	movs	r2, #1
    675a:	701a      	strb	r2, [r3, #0]
	}

	/* Find the proper channel */
	new_channel = _dma_find_first_free_channel_and_allocate();
    675c:	230f      	movs	r3, #15
    675e:	18fc      	adds	r4, r7, r3
    6760:	4b2a      	ldr	r3, [pc, #168]	; (680c <dma_allocate+0x11c>)
    6762:	447b      	add	r3, pc
    6764:	4798      	blx	r3
    6766:	0003      	movs	r3, r0
    6768:	7023      	strb	r3, [r4, #0]

	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
    676a:	230f      	movs	r3, #15
    676c:	18fb      	adds	r3, r7, r3
    676e:	781b      	ldrb	r3, [r3, #0]
    6770:	2bff      	cmp	r3, #255	; 0xff
    6772:	d104      	bne.n	677e <dma_allocate+0x8e>
		system_interrupt_leave_critical_section();
    6774:	4b26      	ldr	r3, [pc, #152]	; (6810 <dma_allocate+0x120>)
    6776:	447b      	add	r3, pc
    6778:	4798      	blx	r3

		return STATUS_ERR_NOT_FOUND;
    677a:	2314      	movs	r3, #20
    677c:	e030      	b.n	67e0 <dma_allocate+0xf0>
	}

	/* Set the channel */
	resource->channel_id = new_channel;
    677e:	687b      	ldr	r3, [r7, #4]
    6780:	220f      	movs	r2, #15
    6782:	18ba      	adds	r2, r7, r2
    6784:	7812      	ldrb	r2, [r2, #0]
    6786:	701a      	strb	r2, [r3, #0]

	/** Perform a reset for the allocated channel */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    6788:	4a1c      	ldr	r2, [pc, #112]	; (67fc <dma_allocate+0x10c>)
    678a:	687b      	ldr	r3, [r7, #4]
    678c:	781b      	ldrb	r3, [r3, #0]
    678e:	210f      	movs	r1, #15
    6790:	400b      	ands	r3, r1
    6792:	b2d9      	uxtb	r1, r3
    6794:	233f      	movs	r3, #63	; 0x3f
    6796:	54d1      	strb	r1, [r2, r3]
	DMAC->CHCTRLA.reg &= ~DMAC_CHCTRLA_ENABLE;
    6798:	4a18      	ldr	r2, [pc, #96]	; (67fc <dma_allocate+0x10c>)
    679a:	4918      	ldr	r1, [pc, #96]	; (67fc <dma_allocate+0x10c>)
    679c:	2340      	movs	r3, #64	; 0x40
    679e:	5ccb      	ldrb	r3, [r1, r3]
    67a0:	b2db      	uxtb	r3, r3
    67a2:	2102      	movs	r1, #2
    67a4:	438b      	bics	r3, r1
    67a6:	b2d9      	uxtb	r1, r3
    67a8:	2340      	movs	r3, #64	; 0x40
    67aa:	54d1      	strb	r1, [r2, r3]
	DMAC->CHCTRLA.reg = DMAC_CHCTRLA_SWRST;
    67ac:	4a13      	ldr	r2, [pc, #76]	; (67fc <dma_allocate+0x10c>)
    67ae:	2340      	movs	r3, #64	; 0x40
    67b0:	2101      	movs	r1, #1
    67b2:	54d1      	strb	r1, [r2, r3]
		DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_RUNSTDBY;
	}
#endif

	/** Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
    67b4:	683a      	ldr	r2, [r7, #0]
    67b6:	687b      	ldr	r3, [r7, #4]
    67b8:	0011      	movs	r1, r2
    67ba:	0018      	movs	r0, r3
    67bc:	4b15      	ldr	r3, [pc, #84]	; (6814 <dma_allocate+0x124>)
    67be:	447b      	add	r3, pc
    67c0:	4798      	blx	r3

	resource->descriptor = NULL;
    67c2:	687b      	ldr	r3, [r7, #4]
    67c4:	2200      	movs	r2, #0
    67c6:	619a      	str	r2, [r3, #24]

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
    67c8:	687b      	ldr	r3, [r7, #4]
    67ca:	781b      	ldrb	r3, [r3, #0]
    67cc:	001a      	movs	r2, r3
    67ce:	4b12      	ldr	r3, [pc, #72]	; (6818 <dma_allocate+0x128>)
    67d0:	447b      	add	r3, pc
    67d2:	0092      	lsls	r2, r2, #2
    67d4:	6879      	ldr	r1, [r7, #4]
    67d6:	50d1      	str	r1, [r2, r3]

	system_interrupt_leave_critical_section();
    67d8:	4b10      	ldr	r3, [pc, #64]	; (681c <dma_allocate+0x12c>)
    67da:	447b      	add	r3, pc
    67dc:	4798      	blx	r3

	return STATUS_OK;
    67de:	2300      	movs	r3, #0
}
    67e0:	0018      	movs	r0, r3
    67e2:	46bd      	mov	sp, r7
    67e4:	b005      	add	sp, #20
    67e6:	bd90      	pop	{r4, r7, pc}
    67e8:	00008d34 	.word	0x00008d34
    67ec:	fffffc99 	.word	0xfffffc99
    67f0:	000002d8 	.word	0x000002d8
    67f4:	fffffc03 	.word	0xfffffc03
    67f8:	fffffc19 	.word	0xfffffc19
    67fc:	41004800 	.word	0x41004800
    6800:	00000054 	.word	0x00000054
    6804:	1fff9bc2 	.word	0x1fff9bc2
    6808:	00000f02 	.word	0x00000f02
    680c:	fffffc9b 	.word	0xfffffc9b
    6810:	fffffc3f 	.word	0xfffffc3f
    6814:	fffffcf7 	.word	0xfffffcf7
    6818:	1fff9b8c 	.word	0x1fff9b8c
    681c:	fffffbdb 	.word	0xfffffbdb

00006820 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
    6820:	b590      	push	{r4, r7, lr}
    6822:	b083      	sub	sp, #12
    6824:	af00      	add	r7, sp, #0
    6826:	6078      	str	r0, [r7, #4]
    6828:	4c29      	ldr	r4, [pc, #164]	; (68d0 <dma_start_transfer_job+0xb0>)
    682a:	447c      	add	r4, pc
	Assert(resource);
	Assert(resource->channel_id != DMA_INVALID_CHANNEL);

	system_interrupt_enter_critical_section();
    682c:	4b29      	ldr	r3, [pc, #164]	; (68d4 <dma_start_transfer_job+0xb4>)
    682e:	447b      	add	r3, pc
    6830:	4798      	blx	r3

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
    6832:	687b      	ldr	r3, [r7, #4]
    6834:	7c5b      	ldrb	r3, [r3, #17]
    6836:	b2db      	uxtb	r3, r3
    6838:	2b05      	cmp	r3, #5
    683a:	d104      	bne.n	6846 <dma_start_transfer_job+0x26>
		system_interrupt_leave_critical_section();
    683c:	4b26      	ldr	r3, [pc, #152]	; (68d8 <dma_start_transfer_job+0xb8>)
    683e:	447b      	add	r3, pc
    6840:	4798      	blx	r3
		return STATUS_BUSY;
    6842:	2305      	movs	r3, #5
    6844:	e040      	b.n	68c8 <dma_start_transfer_job+0xa8>
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->BTCNT.reg == 0) {
    6846:	687b      	ldr	r3, [r7, #4]
    6848:	699b      	ldr	r3, [r3, #24]
    684a:	885b      	ldrh	r3, [r3, #2]
    684c:	b29b      	uxth	r3, r3
    684e:	2b00      	cmp	r3, #0
    6850:	d104      	bne.n	685c <dma_start_transfer_job+0x3c>
		system_interrupt_leave_critical_section();
    6852:	4b22      	ldr	r3, [pc, #136]	; (68dc <dma_start_transfer_job+0xbc>)
    6854:	447b      	add	r3, pc
    6856:	4798      	blx	r3
		return STATUS_ERR_INVALID_ARG;
    6858:	2317      	movs	r3, #23
    685a:	e035      	b.n	68c8 <dma_start_transfer_job+0xa8>
	}

	/* Enable DMA interrupt */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_DMA);
    685c:	2006      	movs	r0, #6
    685e:	4b20      	ldr	r3, [pc, #128]	; (68e0 <dma_start_transfer_job+0xc0>)
    6860:	447b      	add	r3, pc
    6862:	4798      	blx	r3

	/* Set the interrupt flag */
	DMAC->CHID.reg = DMAC_CHID_ID(resource->channel_id);
    6864:	4a1f      	ldr	r2, [pc, #124]	; (68e4 <dma_start_transfer_job+0xc4>)
    6866:	687b      	ldr	r3, [r7, #4]
    6868:	781b      	ldrb	r3, [r3, #0]
    686a:	210f      	movs	r1, #15
    686c:	400b      	ands	r3, r1
    686e:	b2d9      	uxtb	r1, r3
    6870:	233f      	movs	r3, #63	; 0x3f
    6872:	54d1      	strb	r1, [r2, r3]
	DMAC->CHINTENSET.reg = (DMAC_CHINTENSET_MASK & g_chan_interrupt_flag[resource->channel_id]);
    6874:	4a1b      	ldr	r2, [pc, #108]	; (68e4 <dma_start_transfer_job+0xc4>)
    6876:	687b      	ldr	r3, [r7, #4]
    6878:	781b      	ldrb	r3, [r3, #0]
    687a:	0019      	movs	r1, r3
    687c:	4b1a      	ldr	r3, [pc, #104]	; (68e8 <dma_start_transfer_job+0xc8>)
    687e:	58e3      	ldr	r3, [r4, r3]
    6880:	5c5b      	ldrb	r3, [r3, r1]
    6882:	2107      	movs	r1, #7
    6884:	400b      	ands	r3, r1
    6886:	b2d9      	uxtb	r1, r3
    6888:	234d      	movs	r3, #77	; 0x4d
    688a:	54d1      	strb	r1, [r2, r3]
	/* Set job status */
	resource->job_status = STATUS_BUSY;
    688c:	687b      	ldr	r3, [r7, #4]
    688e:	2205      	movs	r2, #5
    6890:	745a      	strb	r2, [r3, #17]

	/* Set channel x descriptor 0 to the descriptor base address */
	memcpy(&descriptor_section[resource->channel_id], resource->descriptor,
    6892:	687b      	ldr	r3, [r7, #4]
    6894:	781b      	ldrb	r3, [r3, #0]
    6896:	011b      	lsls	r3, r3, #4
    6898:	4a14      	ldr	r2, [pc, #80]	; (68ec <dma_start_transfer_job+0xcc>)
    689a:	58a2      	ldr	r2, [r4, r2]
    689c:	1898      	adds	r0, r3, r2
    689e:	687b      	ldr	r3, [r7, #4]
    68a0:	699b      	ldr	r3, [r3, #24]
    68a2:	2210      	movs	r2, #16
    68a4:	0019      	movs	r1, r3
    68a6:	4b12      	ldr	r3, [pc, #72]	; (68f0 <dma_start_transfer_job+0xd0>)
    68a8:	58e3      	ldr	r3, [r4, r3]
    68aa:	4798      	blx	r3
						sizeof(DmacDescriptor));

	/* Enable the transfer channel */
	DMAC->CHCTRLA.reg |= DMAC_CHCTRLA_ENABLE;
    68ac:	4a0d      	ldr	r2, [pc, #52]	; (68e4 <dma_start_transfer_job+0xc4>)
    68ae:	490d      	ldr	r1, [pc, #52]	; (68e4 <dma_start_transfer_job+0xc4>)
    68b0:	2340      	movs	r3, #64	; 0x40
    68b2:	5ccb      	ldrb	r3, [r1, r3]
    68b4:	b2db      	uxtb	r3, r3
    68b6:	2102      	movs	r1, #2
    68b8:	430b      	orrs	r3, r1
    68ba:	b2d9      	uxtb	r1, r3
    68bc:	2340      	movs	r3, #64	; 0x40
    68be:	54d1      	strb	r1, [r2, r3]

	system_interrupt_leave_critical_section();
    68c0:	4b0c      	ldr	r3, [pc, #48]	; (68f4 <dma_start_transfer_job+0xd4>)
    68c2:	447b      	add	r3, pc
    68c4:	4798      	blx	r3

	return STATUS_OK;
    68c6:	2300      	movs	r3, #0
}
    68c8:	0018      	movs	r0, r3
    68ca:	46bd      	mov	sp, r7
    68cc:	b003      	add	sp, #12
    68ce:	bd90      	pop	{r4, r7, pc}
    68d0:	00008c06 	.word	0x00008c06
    68d4:	fffffb6b 	.word	0xfffffb6b
    68d8:	fffffb77 	.word	0xfffffb77
    68dc:	fffffb61 	.word	0xfffffb61
    68e0:	fffffb71 	.word	0xfffffb71
    68e4:	41004800 	.word	0x41004800
    68e8:	00000074 	.word	0x00000074
    68ec:	00000054 	.word	0x00000054
    68f0:	000000bc 	.word	0x000000bc
    68f4:	fffffaf3 	.word	0xfffffaf3

000068f8 <dma_descriptor_create>:
 * \param[in] config Pointer to the descriptor configuration structure
 *
 */
void dma_descriptor_create(DmacDescriptor* descriptor,
	struct dma_descriptor_config *config)
{
    68f8:	b580      	push	{r7, lr}
    68fa:	b082      	sub	sp, #8
    68fc:	af00      	add	r7, sp, #0
    68fe:	6078      	str	r0, [r7, #4]
    6900:	6039      	str	r1, [r7, #0]
	/* Set block transfer control */
	descriptor->BTCTRL.bit.VALID = config->descriptor_valid;
    6902:	683b      	ldr	r3, [r7, #0]
    6904:	7819      	ldrb	r1, [r3, #0]
    6906:	687a      	ldr	r2, [r7, #4]
    6908:	8813      	ldrh	r3, [r2, #0]
    690a:	1c08      	adds	r0, r1, #0
    690c:	2101      	movs	r1, #1
    690e:	4008      	ands	r0, r1
    6910:	2101      	movs	r1, #1
    6912:	438b      	bics	r3, r1
    6914:	1c19      	adds	r1, r3, #0
    6916:	1c03      	adds	r3, r0, #0
    6918:	430b      	orrs	r3, r1
    691a:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.EVOSEL = config->event_output_selection;
    691c:	683b      	ldr	r3, [r7, #0]
    691e:	785b      	ldrb	r3, [r3, #1]
    6920:	1c1a      	adds	r2, r3, #0
    6922:	2303      	movs	r3, #3
    6924:	4013      	ands	r3, r2
    6926:	b2d9      	uxtb	r1, r3
    6928:	687a      	ldr	r2, [r7, #4]
    692a:	8813      	ldrh	r3, [r2, #0]
    692c:	1c08      	adds	r0, r1, #0
    692e:	2103      	movs	r1, #3
    6930:	4001      	ands	r1, r0
    6932:	1848      	adds	r0, r1, r1
    6934:	2106      	movs	r1, #6
    6936:	438b      	bics	r3, r1
    6938:	1c19      	adds	r1, r3, #0
    693a:	1c03      	adds	r3, r0, #0
    693c:	430b      	orrs	r3, r1
    693e:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.BLOCKACT = config->block_action;
    6940:	683b      	ldr	r3, [r7, #0]
    6942:	789b      	ldrb	r3, [r3, #2]
    6944:	1c1a      	adds	r2, r3, #0
    6946:	2303      	movs	r3, #3
    6948:	4013      	ands	r3, r2
    694a:	b2d9      	uxtb	r1, r3
    694c:	687a      	ldr	r2, [r7, #4]
    694e:	8813      	ldrh	r3, [r2, #0]
    6950:	1c08      	adds	r0, r1, #0
    6952:	2103      	movs	r1, #3
    6954:	4001      	ands	r1, r0
    6956:	00c8      	lsls	r0, r1, #3
    6958:	2118      	movs	r1, #24
    695a:	438b      	bics	r3, r1
    695c:	1c19      	adds	r1, r3, #0
    695e:	1c03      	adds	r3, r0, #0
    6960:	430b      	orrs	r3, r1
    6962:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.BEATSIZE = config->beat_size;
    6964:	683b      	ldr	r3, [r7, #0]
    6966:	78db      	ldrb	r3, [r3, #3]
    6968:	1c1a      	adds	r2, r3, #0
    696a:	2303      	movs	r3, #3
    696c:	4013      	ands	r3, r2
    696e:	b2d9      	uxtb	r1, r3
    6970:	687a      	ldr	r2, [r7, #4]
    6972:	8813      	ldrh	r3, [r2, #0]
    6974:	1c08      	adds	r0, r1, #0
    6976:	2103      	movs	r1, #3
    6978:	4001      	ands	r1, r0
    697a:	0208      	lsls	r0, r1, #8
    697c:	492b      	ldr	r1, [pc, #172]	; (6a2c <dma_descriptor_create+0x134>)
    697e:	400b      	ands	r3, r1
    6980:	1c19      	adds	r1, r3, #0
    6982:	1c03      	adds	r3, r0, #0
    6984:	430b      	orrs	r3, r1
    6986:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.SRCINC = config->src_increment_enable;
    6988:	683b      	ldr	r3, [r7, #0]
    698a:	7919      	ldrb	r1, [r3, #4]
    698c:	687a      	ldr	r2, [r7, #4]
    698e:	8813      	ldrh	r3, [r2, #0]
    6990:	1c08      	adds	r0, r1, #0
    6992:	2101      	movs	r1, #1
    6994:	4001      	ands	r1, r0
    6996:	0288      	lsls	r0, r1, #10
    6998:	4925      	ldr	r1, [pc, #148]	; (6a30 <dma_descriptor_create+0x138>)
    699a:	400b      	ands	r3, r1
    699c:	1c19      	adds	r1, r3, #0
    699e:	1c03      	adds	r3, r0, #0
    69a0:	430b      	orrs	r3, r1
    69a2:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.DSTINC = config->dst_increment_enable;
    69a4:	683b      	ldr	r3, [r7, #0]
    69a6:	7959      	ldrb	r1, [r3, #5]
    69a8:	687a      	ldr	r2, [r7, #4]
    69aa:	8813      	ldrh	r3, [r2, #0]
    69ac:	1c08      	adds	r0, r1, #0
    69ae:	2101      	movs	r1, #1
    69b0:	4001      	ands	r1, r0
    69b2:	02c8      	lsls	r0, r1, #11
    69b4:	491f      	ldr	r1, [pc, #124]	; (6a34 <dma_descriptor_create+0x13c>)
    69b6:	400b      	ands	r3, r1
    69b8:	1c19      	adds	r1, r3, #0
    69ba:	1c03      	adds	r3, r0, #0
    69bc:	430b      	orrs	r3, r1
    69be:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.STEPSEL = config->step_selection;
    69c0:	683b      	ldr	r3, [r7, #0]
    69c2:	799b      	ldrb	r3, [r3, #6]
    69c4:	1c1a      	adds	r2, r3, #0
    69c6:	2301      	movs	r3, #1
    69c8:	4013      	ands	r3, r2
    69ca:	b2d9      	uxtb	r1, r3
    69cc:	687a      	ldr	r2, [r7, #4]
    69ce:	8813      	ldrh	r3, [r2, #0]
    69d0:	1c08      	adds	r0, r1, #0
    69d2:	2101      	movs	r1, #1
    69d4:	4001      	ands	r1, r0
    69d6:	0308      	lsls	r0, r1, #12
    69d8:	4917      	ldr	r1, [pc, #92]	; (6a38 <dma_descriptor_create+0x140>)
    69da:	400b      	ands	r3, r1
    69dc:	1c19      	adds	r1, r3, #0
    69de:	1c03      	adds	r3, r0, #0
    69e0:	430b      	orrs	r3, r1
    69e2:	8013      	strh	r3, [r2, #0]
	descriptor->BTCTRL.bit.STEPSIZE = config->step_size;
    69e4:	683b      	ldr	r3, [r7, #0]
    69e6:	79db      	ldrb	r3, [r3, #7]
    69e8:	1c1a      	adds	r2, r3, #0
    69ea:	2307      	movs	r3, #7
    69ec:	4013      	ands	r3, r2
    69ee:	b2d9      	uxtb	r1, r3
    69f0:	687a      	ldr	r2, [r7, #4]
    69f2:	8813      	ldrh	r3, [r2, #0]
    69f4:	0348      	lsls	r0, r1, #13
    69f6:	04db      	lsls	r3, r3, #19
    69f8:	0cdb      	lsrs	r3, r3, #19
    69fa:	1c19      	adds	r1, r3, #0
    69fc:	1c03      	adds	r3, r0, #0
    69fe:	430b      	orrs	r3, r1
    6a00:	8013      	strh	r3, [r2, #0]

	/* Set transfer size, source address and destination address */
	descriptor->BTCNT.reg = config->block_transfer_count;
    6a02:	683b      	ldr	r3, [r7, #0]
    6a04:	891a      	ldrh	r2, [r3, #8]
    6a06:	687b      	ldr	r3, [r7, #4]
    6a08:	805a      	strh	r2, [r3, #2]
	descriptor->SRCADDR.reg = config->source_address;
    6a0a:	683b      	ldr	r3, [r7, #0]
    6a0c:	68da      	ldr	r2, [r3, #12]
    6a0e:	687b      	ldr	r3, [r7, #4]
    6a10:	605a      	str	r2, [r3, #4]
	descriptor->DSTADDR.reg = config->destination_address;
    6a12:	683b      	ldr	r3, [r7, #0]
    6a14:	691a      	ldr	r2, [r3, #16]
    6a16:	687b      	ldr	r3, [r7, #4]
    6a18:	609a      	str	r2, [r3, #8]

	/* Set next transfer descriptor address */
	descriptor->DESCADDR.reg = config->next_descriptor_address;
    6a1a:	683b      	ldr	r3, [r7, #0]
    6a1c:	695a      	ldr	r2, [r3, #20]
    6a1e:	687b      	ldr	r3, [r7, #4]
    6a20:	60da      	str	r2, [r3, #12]
}
    6a22:	46c0      	nop			; (mov r8, r8)
    6a24:	46bd      	mov	sp, r7
    6a26:	b002      	add	sp, #8
    6a28:	bd80      	pop	{r7, pc}
    6a2a:	46c0      	nop			; (mov r8, r8)
    6a2c:	fffffcff 	.word	0xfffffcff
    6a30:	fffffbff 	.word	0xfffffbff
    6a34:	fffff7ff 	.word	0xfffff7ff
    6a38:	ffffefff 	.word	0xffffefff

00006a3c <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		DmacDescriptor* descriptor)
{
    6a3c:	b580      	push	{r7, lr}
    6a3e:	b084      	sub	sp, #16
    6a40:	af00      	add	r7, sp, #0
    6a42:	6078      	str	r0, [r7, #4]
    6a44:	6039      	str	r1, [r7, #0]
	DmacDescriptor* desc = resource->descriptor;
    6a46:	687b      	ldr	r3, [r7, #4]
    6a48:	699b      	ldr	r3, [r3, #24]
    6a4a:	60fb      	str	r3, [r7, #12]

	if (resource->job_status == STATUS_BUSY) {
    6a4c:	687b      	ldr	r3, [r7, #4]
    6a4e:	7c5b      	ldrb	r3, [r3, #17]
    6a50:	b2db      	uxtb	r3, r3
    6a52:	2b05      	cmp	r3, #5
    6a54:	d101      	bne.n	6a5a <dma_add_descriptor+0x1e>
		return STATUS_BUSY;
    6a56:	2305      	movs	r3, #5
    6a58:	e011      	b.n	6a7e <dma_add_descriptor+0x42>
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
    6a5a:	68fb      	ldr	r3, [r7, #12]
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d106      	bne.n	6a6e <dma_add_descriptor+0x32>
		resource->descriptor = descriptor;
    6a60:	687b      	ldr	r3, [r7, #4]
    6a62:	683a      	ldr	r2, [r7, #0]
    6a64:	619a      	str	r2, [r3, #24]
    6a66:	e009      	b.n	6a7c <dma_add_descriptor+0x40>
	} else {
		/* Looking for end of descriptor link */
		while(desc->DESCADDR.reg != 0) {
			desc = (DmacDescriptor*)(desc->DESCADDR.reg);
    6a68:	68fb      	ldr	r3, [r7, #12]
    6a6a:	68db      	ldr	r3, [r3, #12]
    6a6c:	60fb      	str	r3, [r7, #12]
		while(desc->DESCADDR.reg != 0) {
    6a6e:	68fb      	ldr	r3, [r7, #12]
    6a70:	68db      	ldr	r3, [r3, #12]
    6a72:	2b00      	cmp	r3, #0
    6a74:	d1f8      	bne.n	6a68 <dma_add_descriptor+0x2c>
		}

		/* Set to the end of descriptor list */
		desc->DESCADDR.reg = (uint32_t)descriptor;
    6a76:	683a      	ldr	r2, [r7, #0]
    6a78:	68fb      	ldr	r3, [r7, #12]
    6a7a:	60da      	str	r2, [r3, #12]
	}

	return STATUS_OK;
    6a7c:	2300      	movs	r3, #0
}
    6a7e:	0018      	movs	r0, r3
    6a80:	46bd      	mov	sp, r7
    6a82:	b004      	add	sp, #16
    6a84:	bd80      	pop	{r7, pc}
	...

00006a88 <_extint_get_eic_from_channel>:
 *
 * \return Base address of the associated EIC module.
 */
static inline Eic * _extint_get_eic_from_channel(
		const uint8_t channel)
{
    6a88:	b580      	push	{r7, lr}
    6a8a:	b084      	sub	sp, #16
    6a8c:	af00      	add	r7, sp, #0
    6a8e:	0002      	movs	r2, r0
    6a90:	1dfb      	adds	r3, r7, #7
    6a92:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6a94:	230f      	movs	r3, #15
    6a96:	18fb      	adds	r3, r7, r3
    6a98:	1dfa      	adds	r2, r7, #7
    6a9a:	7812      	ldrb	r2, [r2, #0]
    6a9c:	0952      	lsrs	r2, r2, #5
    6a9e:	701a      	strb	r2, [r3, #0]

	if (eic_index < EIC_INST_NUM) {
    6aa0:	230f      	movs	r3, #15
    6aa2:	18fb      	adds	r3, r7, r3
    6aa4:	781b      	ldrb	r3, [r3, #0]
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d10c      	bne.n	6ac4 <_extint_get_eic_from_channel+0x3c>
		/* Array of available EICs */
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6aaa:	4b09      	ldr	r3, [pc, #36]	; (6ad0 <_extint_get_eic_from_channel+0x48>)
    6aac:	60bb      	str	r3, [r7, #8]

		return eics[eic_index];
    6aae:	230f      	movs	r3, #15
    6ab0:	18fb      	adds	r3, r7, r3
    6ab2:	781b      	ldrb	r3, [r3, #0]
    6ab4:	009b      	lsls	r3, r3, #2
    6ab6:	2210      	movs	r2, #16
    6ab8:	4694      	mov	ip, r2
    6aba:	44bc      	add	ip, r7
    6abc:	4463      	add	r3, ip
    6abe:	3b08      	subs	r3, #8
    6ac0:	681b      	ldr	r3, [r3, #0]
    6ac2:	e000      	b.n	6ac6 <_extint_get_eic_from_channel+0x3e>
	} else {
		Assert(false);
		return NULL;
    6ac4:	2300      	movs	r3, #0
	}
}
    6ac6:	0018      	movs	r0, r3
    6ac8:	46bd      	mov	sp, r7
    6aca:	b004      	add	sp, #16
    6acc:	bd80      	pop	{r7, pc}
    6ace:	46c0      	nop			; (mov r8, r8)
    6ad0:	40001800 	.word	0x40001800

00006ad4 <extint_chan_is_detected>:
 *  \retval true   If the channel's edge/level detection criteria was met
 *  \retval false  If the channel has not detected its configured criteria
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
    6ad4:	b580      	push	{r7, lr}
    6ad6:	b084      	sub	sp, #16
    6ad8:	af00      	add	r7, sp, #0
    6ada:	0002      	movs	r2, r0
    6adc:	1dfb      	adds	r3, r7, #7
    6ade:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6ae0:	1dfb      	adds	r3, r7, #7
    6ae2:	781b      	ldrb	r3, [r3, #0]
    6ae4:	0018      	movs	r0, r3
    6ae6:	4b0c      	ldr	r3, [pc, #48]	; (6b18 <extint_chan_is_detected+0x44>)
    6ae8:	447b      	add	r3, pc
    6aea:	4798      	blx	r3
    6aec:	0003      	movs	r3, r0
    6aee:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    6af0:	1dfb      	adds	r3, r7, #7
    6af2:	781b      	ldrb	r3, [r3, #0]
    6af4:	221f      	movs	r2, #31
    6af6:	4013      	ands	r3, r2
    6af8:	2201      	movs	r2, #1
    6afa:	409a      	lsls	r2, r3
    6afc:	0013      	movs	r3, r2
    6afe:	60bb      	str	r3, [r7, #8]

	return (eic_module->INTFLAG.reg & eic_mask);
    6b00:	68fb      	ldr	r3, [r7, #12]
    6b02:	691b      	ldr	r3, [r3, #16]
    6b04:	68ba      	ldr	r2, [r7, #8]
    6b06:	4013      	ands	r3, r2
    6b08:	1e5a      	subs	r2, r3, #1
    6b0a:	4193      	sbcs	r3, r2
    6b0c:	b2db      	uxtb	r3, r3
}
    6b0e:	0018      	movs	r0, r3
    6b10:	46bd      	mov	sp, r7
    6b12:	b004      	add	sp, #16
    6b14:	bd80      	pop	{r7, pc}
    6b16:	46c0      	nop			; (mov r8, r8)
    6b18:	ffffff9d 	.word	0xffffff9d

00006b1c <extint_chan_clear_detected>:
 *
 *  \param[in] channel  External Interrupt channel index to check
 */
static inline void extint_chan_clear_detected(
		const uint8_t channel)
{
    6b1c:	b580      	push	{r7, lr}
    6b1e:	b084      	sub	sp, #16
    6b20:	af00      	add	r7, sp, #0
    6b22:	0002      	movs	r2, r0
    6b24:	1dfb      	adds	r3, r7, #7
    6b26:	701a      	strb	r2, [r3, #0]
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
    6b28:	1dfb      	adds	r3, r7, #7
    6b2a:	781b      	ldrb	r3, [r3, #0]
    6b2c:	0018      	movs	r0, r3
    6b2e:	4b0a      	ldr	r3, [pc, #40]	; (6b58 <extint_chan_clear_detected+0x3c>)
    6b30:	447b      	add	r3, pc
    6b32:	4798      	blx	r3
    6b34:	0003      	movs	r3, r0
    6b36:	60fb      	str	r3, [r7, #12]
	uint32_t eic_mask   = (1UL << (channel % 32));
    6b38:	1dfb      	adds	r3, r7, #7
    6b3a:	781b      	ldrb	r3, [r3, #0]
    6b3c:	221f      	movs	r2, #31
    6b3e:	4013      	ands	r3, r2
    6b40:	2201      	movs	r2, #1
    6b42:	409a      	lsls	r2, r3
    6b44:	0013      	movs	r3, r2
    6b46:	60bb      	str	r3, [r7, #8]

	eic_module->INTFLAG.reg = eic_mask;
    6b48:	68fb      	ldr	r3, [r7, #12]
    6b4a:	68ba      	ldr	r2, [r7, #8]
    6b4c:	611a      	str	r2, [r3, #16]
}
    6b4e:	46c0      	nop			; (mov r8, r8)
    6b50:	46bd      	mov	sp, r7
    6b52:	b004      	add	sp, #16
    6b54:	bd80      	pop	{r7, pc}
    6b56:	46c0      	nop			; (mov r8, r8)
    6b58:	ffffff55 	.word	0xffffff55

00006b5c <extint_chan_enable_callback>:
 * \retval STATUS_ERR_INVALID_ARG  If an invalid callback type was supplied
 */
enum status_code extint_chan_enable_callback(
	const uint8_t channel,
	const enum extint_callback_type type)
{
    6b5c:	b580      	push	{r7, lr}
    6b5e:	b084      	sub	sp, #16
    6b60:	af00      	add	r7, sp, #0
    6b62:	0002      	movs	r2, r0
    6b64:	1dfb      	adds	r3, r7, #7
    6b66:	701a      	strb	r2, [r3, #0]
    6b68:	1dbb      	adds	r3, r7, #6
    6b6a:	1c0a      	adds	r2, r1, #0
    6b6c:	701a      	strb	r2, [r3, #0]
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
    6b6e:	1dbb      	adds	r3, r7, #6
    6b70:	781b      	ldrb	r3, [r3, #0]
    6b72:	2b00      	cmp	r3, #0
    6b74:	d10f      	bne.n	6b96 <extint_chan_enable_callback+0x3a>
		Eic *const eic = _extint_get_eic_from_channel(channel);
    6b76:	1dfb      	adds	r3, r7, #7
    6b78:	781b      	ldrb	r3, [r3, #0]
    6b7a:	0018      	movs	r0, r3
    6b7c:	4b08      	ldr	r3, [pc, #32]	; (6ba0 <extint_chan_enable_callback+0x44>)
    6b7e:	447b      	add	r3, pc
    6b80:	4798      	blx	r3
    6b82:	0003      	movs	r3, r0
    6b84:	60fb      	str	r3, [r7, #12]

		eic->INTENSET.reg = (1UL << channel);
    6b86:	1dfb      	adds	r3, r7, #7
    6b88:	781b      	ldrb	r3, [r3, #0]
    6b8a:	2201      	movs	r2, #1
    6b8c:	409a      	lsls	r2, r3
    6b8e:	68fb      	ldr	r3, [r7, #12]
    6b90:	60da      	str	r2, [r3, #12]
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
    6b92:	2300      	movs	r3, #0
    6b94:	e000      	b.n	6b98 <extint_chan_enable_callback+0x3c>
		return STATUS_ERR_INVALID_ARG;
    6b96:	2317      	movs	r3, #23
}
    6b98:	0018      	movs	r0, r3
    6b9a:	46bd      	mov	sp, r7
    6b9c:	b004      	add	sp, #16
    6b9e:	bd80      	pop	{r7, pc}
    6ba0:	ffffff07 	.word	0xffffff07

00006ba4 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
    6ba4:	b5b0      	push	{r4, r5, r7, lr}
    6ba6:	af00      	add	r7, sp, #0
    6ba8:	4c1c      	ldr	r4, [pc, #112]	; (6c1c <EIC_Handler+0x78>)
    6baa:	447c      	add	r4, pc
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6bac:	4b1c      	ldr	r3, [pc, #112]	; (6c20 <EIC_Handler+0x7c>)
    6bae:	58e3      	ldr	r3, [r4, r3]
    6bb0:	2200      	movs	r2, #0
    6bb2:	701a      	strb	r2, [r3, #0]
    6bb4:	e02a      	b.n	6c0c <EIC_Handler+0x68>
		if (extint_chan_is_detected(_current_channel)) {
    6bb6:	4b1a      	ldr	r3, [pc, #104]	; (6c20 <EIC_Handler+0x7c>)
    6bb8:	58e3      	ldr	r3, [r4, r3]
    6bba:	781b      	ldrb	r3, [r3, #0]
    6bbc:	0018      	movs	r0, r3
    6bbe:	4b19      	ldr	r3, [pc, #100]	; (6c24 <EIC_Handler+0x80>)
    6bc0:	447b      	add	r3, pc
    6bc2:	4798      	blx	r3
    6bc4:	1e03      	subs	r3, r0, #0
    6bc6:	d019      	beq.n	6bfc <EIC_Handler+0x58>
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
    6bc8:	4b15      	ldr	r3, [pc, #84]	; (6c20 <EIC_Handler+0x7c>)
    6bca:	58e3      	ldr	r3, [r4, r3]
    6bcc:	781b      	ldrb	r3, [r3, #0]
    6bce:	0018      	movs	r0, r3
    6bd0:	4b15      	ldr	r3, [pc, #84]	; (6c28 <EIC_Handler+0x84>)
    6bd2:	447b      	add	r3, pc
    6bd4:	4798      	blx	r3
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
    6bd6:	4b12      	ldr	r3, [pc, #72]	; (6c20 <EIC_Handler+0x7c>)
    6bd8:	58e3      	ldr	r3, [r4, r3]
    6bda:	781b      	ldrb	r3, [r3, #0]
    6bdc:	001a      	movs	r2, r3
    6bde:	4b13      	ldr	r3, [pc, #76]	; (6c2c <EIC_Handler+0x88>)
    6be0:	58e3      	ldr	r3, [r4, r3]
    6be2:	0092      	lsls	r2, r2, #2
    6be4:	58d3      	ldr	r3, [r2, r3]
    6be6:	2b00      	cmp	r3, #0
    6be8:	d008      	beq.n	6bfc <EIC_Handler+0x58>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
    6bea:	4b0d      	ldr	r3, [pc, #52]	; (6c20 <EIC_Handler+0x7c>)
    6bec:	58e3      	ldr	r3, [r4, r3]
    6bee:	781b      	ldrb	r3, [r3, #0]
    6bf0:	001a      	movs	r2, r3
    6bf2:	4b0e      	ldr	r3, [pc, #56]	; (6c2c <EIC_Handler+0x88>)
    6bf4:	58e3      	ldr	r3, [r4, r3]
    6bf6:	0092      	lsls	r2, r2, #2
    6bf8:	58d3      	ldr	r3, [r2, r3]
    6bfa:	4798      	blx	r3
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
    6bfc:	4b08      	ldr	r3, [pc, #32]	; (6c20 <EIC_Handler+0x7c>)
    6bfe:	58e3      	ldr	r3, [r4, r3]
    6c00:	781b      	ldrb	r3, [r3, #0]
    6c02:	3301      	adds	r3, #1
    6c04:	b2da      	uxtb	r2, r3
    6c06:	4b06      	ldr	r3, [pc, #24]	; (6c20 <EIC_Handler+0x7c>)
    6c08:	58e3      	ldr	r3, [r4, r3]
    6c0a:	701a      	strb	r2, [r3, #0]
    6c0c:	4b04      	ldr	r3, [pc, #16]	; (6c20 <EIC_Handler+0x7c>)
    6c0e:	58e3      	ldr	r3, [r4, r3]
    6c10:	781b      	ldrb	r3, [r3, #0]
    6c12:	2b0f      	cmp	r3, #15
    6c14:	d9cf      	bls.n	6bb6 <EIC_Handler+0x12>
			}
		}
	}
}
    6c16:	46c0      	nop			; (mov r8, r8)
    6c18:	46bd      	mov	sp, r7
    6c1a:	bdb0      	pop	{r4, r5, r7, pc}
    6c1c:	00008886 	.word	0x00008886
    6c20:	00000218 	.word	0x00000218
    6c24:	ffffff11 	.word	0xffffff11
    6c28:	ffffff47 	.word	0xffffff47
    6c2c:	000001ac 	.word	0x000001ac

00006c30 <system_gclk_chan_get_config_defaults>:
{
    6c30:	b580      	push	{r7, lr}
    6c32:	b082      	sub	sp, #8
    6c34:	af00      	add	r7, sp, #0
    6c36:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    6c38:	687b      	ldr	r3, [r7, #4]
    6c3a:	2200      	movs	r2, #0
    6c3c:	701a      	strb	r2, [r3, #0]
}
    6c3e:	46c0      	nop			; (mov r8, r8)
    6c40:	46bd      	mov	sp, r7
    6c42:	b002      	add	sp, #8
    6c44:	bd80      	pop	{r7, pc}
	...

00006c48 <system_apb_clock_set_mask>:
{
    6c48:	b580      	push	{r7, lr}
    6c4a:	b082      	sub	sp, #8
    6c4c:	af00      	add	r7, sp, #0
    6c4e:	0002      	movs	r2, r0
    6c50:	6039      	str	r1, [r7, #0]
    6c52:	1dfb      	adds	r3, r7, #7
    6c54:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    6c56:	1dfb      	adds	r3, r7, #7
    6c58:	781b      	ldrb	r3, [r3, #0]
    6c5a:	2b01      	cmp	r3, #1
    6c5c:	d00a      	beq.n	6c74 <system_apb_clock_set_mask+0x2c>
    6c5e:	2b02      	cmp	r3, #2
    6c60:	d00f      	beq.n	6c82 <system_apb_clock_set_mask+0x3a>
    6c62:	2b00      	cmp	r3, #0
    6c64:	d114      	bne.n	6c90 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    6c66:	4b0e      	ldr	r3, [pc, #56]	; (6ca0 <system_apb_clock_set_mask+0x58>)
    6c68:	4a0d      	ldr	r2, [pc, #52]	; (6ca0 <system_apb_clock_set_mask+0x58>)
    6c6a:	6991      	ldr	r1, [r2, #24]
    6c6c:	683a      	ldr	r2, [r7, #0]
    6c6e:	430a      	orrs	r2, r1
    6c70:	619a      	str	r2, [r3, #24]
			break;
    6c72:	e00f      	b.n	6c94 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    6c74:	4b0a      	ldr	r3, [pc, #40]	; (6ca0 <system_apb_clock_set_mask+0x58>)
    6c76:	4a0a      	ldr	r2, [pc, #40]	; (6ca0 <system_apb_clock_set_mask+0x58>)
    6c78:	69d1      	ldr	r1, [r2, #28]
    6c7a:	683a      	ldr	r2, [r7, #0]
    6c7c:	430a      	orrs	r2, r1
    6c7e:	61da      	str	r2, [r3, #28]
			break;
    6c80:	e008      	b.n	6c94 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    6c82:	4b07      	ldr	r3, [pc, #28]	; (6ca0 <system_apb_clock_set_mask+0x58>)
    6c84:	4a06      	ldr	r2, [pc, #24]	; (6ca0 <system_apb_clock_set_mask+0x58>)
    6c86:	6a11      	ldr	r1, [r2, #32]
    6c88:	683a      	ldr	r2, [r7, #0]
    6c8a:	430a      	orrs	r2, r1
    6c8c:	621a      	str	r2, [r3, #32]
			break;
    6c8e:	e001      	b.n	6c94 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    6c90:	2317      	movs	r3, #23
    6c92:	e000      	b.n	6c96 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    6c94:	2300      	movs	r3, #0
}
    6c96:	0018      	movs	r0, r3
    6c98:	46bd      	mov	sp, r7
    6c9a:	b002      	add	sp, #8
    6c9c:	bd80      	pop	{r7, pc}
    6c9e:	46c0      	nop			; (mov r8, r8)
    6ca0:	40000400 	.word	0x40000400

00006ca4 <system_pinmux_get_config_defaults>:
{
    6ca4:	b580      	push	{r7, lr}
    6ca6:	b082      	sub	sp, #8
    6ca8:	af00      	add	r7, sp, #0
    6caa:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    6cac:	687b      	ldr	r3, [r7, #4]
    6cae:	2280      	movs	r2, #128	; 0x80
    6cb0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6cb2:	687b      	ldr	r3, [r7, #4]
    6cb4:	2200      	movs	r2, #0
    6cb6:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    6cb8:	687b      	ldr	r3, [r7, #4]
    6cba:	2201      	movs	r2, #1
    6cbc:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    6cbe:	687b      	ldr	r3, [r7, #4]
    6cc0:	2200      	movs	r2, #0
    6cc2:	70da      	strb	r2, [r3, #3]
}
    6cc4:	46c0      	nop			; (mov r8, r8)
    6cc6:	46bd      	mov	sp, r7
    6cc8:	b002      	add	sp, #8
    6cca:	bd80      	pop	{r7, pc}

00006ccc <system_interrupt_enable>:
{
    6ccc:	b580      	push	{r7, lr}
    6cce:	b082      	sub	sp, #8
    6cd0:	af00      	add	r7, sp, #0
    6cd2:	0002      	movs	r2, r0
    6cd4:	1dfb      	adds	r3, r7, #7
    6cd6:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    6cd8:	4b06      	ldr	r3, [pc, #24]	; (6cf4 <system_interrupt_enable+0x28>)
    6cda:	1dfa      	adds	r2, r7, #7
    6cdc:	7812      	ldrb	r2, [r2, #0]
    6cde:	0011      	movs	r1, r2
    6ce0:	221f      	movs	r2, #31
    6ce2:	400a      	ands	r2, r1
    6ce4:	2101      	movs	r1, #1
    6ce6:	4091      	lsls	r1, r2
    6ce8:	000a      	movs	r2, r1
    6cea:	601a      	str	r2, [r3, #0]
}
    6cec:	46c0      	nop			; (mov r8, r8)
    6cee:	46bd      	mov	sp, r7
    6cf0:	b002      	add	sp, #8
    6cf2:	bd80      	pop	{r7, pc}
    6cf4:	e000e100 	.word	0xe000e100

00006cf8 <_extint_get_eic_from_channel>:
{
    6cf8:	b580      	push	{r7, lr}
    6cfa:	b084      	sub	sp, #16
    6cfc:	af00      	add	r7, sp, #0
    6cfe:	0002      	movs	r2, r0
    6d00:	1dfb      	adds	r3, r7, #7
    6d02:	701a      	strb	r2, [r3, #0]
	uint8_t eic_index = (channel / 32);
    6d04:	230f      	movs	r3, #15
    6d06:	18fb      	adds	r3, r7, r3
    6d08:	1dfa      	adds	r2, r7, #7
    6d0a:	7812      	ldrb	r2, [r2, #0]
    6d0c:	0952      	lsrs	r2, r2, #5
    6d0e:	701a      	strb	r2, [r3, #0]
	if (eic_index < EIC_INST_NUM) {
    6d10:	230f      	movs	r3, #15
    6d12:	18fb      	adds	r3, r7, r3
    6d14:	781b      	ldrb	r3, [r3, #0]
    6d16:	2b00      	cmp	r3, #0
    6d18:	d10c      	bne.n	6d34 <_extint_get_eic_from_channel+0x3c>
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6d1a:	4b09      	ldr	r3, [pc, #36]	; (6d40 <_extint_get_eic_from_channel+0x48>)
    6d1c:	60bb      	str	r3, [r7, #8]
		return eics[eic_index];
    6d1e:	230f      	movs	r3, #15
    6d20:	18fb      	adds	r3, r7, r3
    6d22:	781b      	ldrb	r3, [r3, #0]
    6d24:	009b      	lsls	r3, r3, #2
    6d26:	2210      	movs	r2, #16
    6d28:	4694      	mov	ip, r2
    6d2a:	44bc      	add	ip, r7
    6d2c:	4463      	add	r3, ip
    6d2e:	3b08      	subs	r3, #8
    6d30:	681b      	ldr	r3, [r3, #0]
    6d32:	e000      	b.n	6d36 <_extint_get_eic_from_channel+0x3e>
		return NULL;
    6d34:	2300      	movs	r3, #0
}
    6d36:	0018      	movs	r0, r3
    6d38:	46bd      	mov	sp, r7
    6d3a:	b004      	add	sp, #16
    6d3c:	bd80      	pop	{r7, pc}
    6d3e:	46c0      	nop			; (mov r8, r8)
    6d40:	40001800 	.word	0x40001800

00006d44 <extint_is_syncing>:
 *
 * \retval true  If the module synchronization is ongoing
 * \retval false If the module has completed synchronization
 */
static inline bool extint_is_syncing(void)
{
    6d44:	b580      	push	{r7, lr}
    6d46:	b082      	sub	sp, #8
    6d48:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6d4a:	4b0f      	ldr	r3, [pc, #60]	; (6d88 <extint_is_syncing+0x44>)
    6d4c:	603b      	str	r3, [r7, #0]

	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6d4e:	2300      	movs	r3, #0
    6d50:	607b      	str	r3, [r7, #4]
    6d52:	e011      	b.n	6d78 <extint_is_syncing+0x34>
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
    6d54:	687b      	ldr	r3, [r7, #4]
    6d56:	009b      	lsls	r3, r3, #2
    6d58:	2208      	movs	r2, #8
    6d5a:	4694      	mov	ip, r2
    6d5c:	44bc      	add	ip, r7
    6d5e:	4463      	add	r3, ip
    6d60:	3b08      	subs	r3, #8
    6d62:	681b      	ldr	r3, [r3, #0]
    6d64:	785b      	ldrb	r3, [r3, #1]
    6d66:	b2db      	uxtb	r3, r3
    6d68:	b25b      	sxtb	r3, r3
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	da01      	bge.n	6d72 <extint_is_syncing+0x2e>
			return true;
    6d6e:	2301      	movs	r3, #1
    6d70:	e006      	b.n	6d80 <extint_is_syncing+0x3c>
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6d72:	687b      	ldr	r3, [r7, #4]
    6d74:	3301      	adds	r3, #1
    6d76:	607b      	str	r3, [r7, #4]
    6d78:	687b      	ldr	r3, [r7, #4]
    6d7a:	2b00      	cmp	r3, #0
    6d7c:	d0ea      	beq.n	6d54 <extint_is_syncing+0x10>
		}
	}
	return false;
    6d7e:	2300      	movs	r3, #0
}
    6d80:	0018      	movs	r0, r3
    6d82:	46bd      	mov	sp, r7
    6d84:	b002      	add	sp, #8
    6d86:	bd80      	pop	{r7, pc}
    6d88:	40001800 	.word	0x40001800

00006d8c <_system_extint_init>:
 * \note When SYSTEM module is used, this function will be invoked by
 * \ref system_init() automatically if the module is included.
 */
void _system_extint_init(void);
void _system_extint_init(void)
{
    6d8c:	b590      	push	{r4, r7, lr}
    6d8e:	b085      	sub	sp, #20
    6d90:	af00      	add	r7, sp, #0
    6d92:	4c32      	ldr	r4, [pc, #200]	; (6e5c <_system_extint_init+0xd0>)
    6d94:	447c      	add	r4, pc
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6d96:	4b32      	ldr	r3, [pc, #200]	; (6e60 <_system_extint_init+0xd4>)
    6d98:	607b      	str	r3, [r7, #4]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_EIC);
    6d9a:	2140      	movs	r1, #64	; 0x40
    6d9c:	2000      	movs	r0, #0
    6d9e:	4b31      	ldr	r3, [pc, #196]	; (6e64 <_system_extint_init+0xd8>)
    6da0:	447b      	add	r3, pc
    6da2:	4798      	blx	r3

	/* Configure the generic clock for the module and enable it */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    6da4:	003b      	movs	r3, r7
    6da6:	0018      	movs	r0, r3
    6da8:	4b2f      	ldr	r3, [pc, #188]	; (6e68 <_system_extint_init+0xdc>)
    6daa:	447b      	add	r3, pc
    6dac:	4798      	blx	r3
	gclk_chan_conf.source_generator = EXTINT_CLOCK_SOURCE;
    6dae:	003b      	movs	r3, r7
    6db0:	2202      	movs	r2, #2
    6db2:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
    6db4:	003b      	movs	r3, r7
    6db6:	0019      	movs	r1, r3
    6db8:	2005      	movs	r0, #5
    6dba:	4b2c      	ldr	r3, [pc, #176]	; (6e6c <_system_extint_init+0xe0>)
    6dbc:	58e3      	ldr	r3, [r4, r3]
    6dbe:	4798      	blx	r3

	/* Enable the clock anyway, since when needed it will be requested
	 * by External Interrupt driver */
	system_gclk_chan_enable(EIC_GCLK_ID);
    6dc0:	2005      	movs	r0, #5
    6dc2:	4b2b      	ldr	r3, [pc, #172]	; (6e70 <_system_extint_init+0xe4>)
    6dc4:	58e3      	ldr	r3, [r4, r3]
    6dc6:	4798      	blx	r3

	/* Reset all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6dc8:	2300      	movs	r3, #0
    6dca:	60fb      	str	r3, [r7, #12]
    6dcc:	e018      	b.n	6e00 <_system_extint_init+0x74>
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
    6dce:	68fb      	ldr	r3, [r7, #12]
    6dd0:	009b      	lsls	r3, r3, #2
    6dd2:	2210      	movs	r2, #16
    6dd4:	4694      	mov	ip, r2
    6dd6:	44bc      	add	ip, r7
    6dd8:	4463      	add	r3, ip
    6dda:	3b0c      	subs	r3, #12
    6ddc:	681a      	ldr	r2, [r3, #0]
    6dde:	68fb      	ldr	r3, [r7, #12]
    6de0:	009b      	lsls	r3, r3, #2
    6de2:	2110      	movs	r1, #16
    6de4:	468c      	mov	ip, r1
    6de6:	44bc      	add	ip, r7
    6de8:	4463      	add	r3, ip
    6dea:	3b0c      	subs	r3, #12
    6dec:	681b      	ldr	r3, [r3, #0]
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	b2db      	uxtb	r3, r3
    6df2:	2101      	movs	r1, #1
    6df4:	430b      	orrs	r3, r1
    6df6:	b2db      	uxtb	r3, r3
    6df8:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6dfa:	68fb      	ldr	r3, [r7, #12]
    6dfc:	3301      	adds	r3, #1
    6dfe:	60fb      	str	r3, [r7, #12]
    6e00:	68fb      	ldr	r3, [r7, #12]
    6e02:	2b00      	cmp	r3, #0
    6e04:	d0e3      	beq.n	6dce <_system_extint_init+0x42>
	}

	while (extint_is_syncing()) {
    6e06:	46c0      	nop			; (mov r8, r8)
    6e08:	4b1a      	ldr	r3, [pc, #104]	; (6e74 <_system_extint_init+0xe8>)
    6e0a:	447b      	add	r3, pc
    6e0c:	4798      	blx	r3
    6e0e:	1e03      	subs	r3, r0, #0
    6e10:	d1fa      	bne.n	6e08 <_system_extint_init+0x7c>
	}

	/* Reset the software module */
#if EXTINT_CALLBACK_MODE == true
	/* Clear callback registration table */
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6e12:	230b      	movs	r3, #11
    6e14:	18fb      	adds	r3, r7, r3
    6e16:	2200      	movs	r2, #0
    6e18:	701a      	strb	r2, [r3, #0]
    6e1a:	e00e      	b.n	6e3a <_system_extint_init+0xae>
		_extint_dev.callbacks[j] = NULL;
    6e1c:	230b      	movs	r3, #11
    6e1e:	18fb      	adds	r3, r7, r3
    6e20:	781a      	ldrb	r2, [r3, #0]
    6e22:	4b15      	ldr	r3, [pc, #84]	; (6e78 <_system_extint_init+0xec>)
    6e24:	58e3      	ldr	r3, [r4, r3]
    6e26:	0092      	lsls	r2, r2, #2
    6e28:	2100      	movs	r1, #0
    6e2a:	50d1      	str	r1, [r2, r3]
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
    6e2c:	230b      	movs	r3, #11
    6e2e:	18fb      	adds	r3, r7, r3
    6e30:	781a      	ldrb	r2, [r3, #0]
    6e32:	230b      	movs	r3, #11
    6e34:	18fb      	adds	r3, r7, r3
    6e36:	3201      	adds	r2, #1
    6e38:	701a      	strb	r2, [r3, #0]
    6e3a:	230b      	movs	r3, #11
    6e3c:	18fb      	adds	r3, r7, r3
    6e3e:	781b      	ldrb	r3, [r3, #0]
    6e40:	2b0f      	cmp	r3, #15
    6e42:	d9eb      	bls.n	6e1c <_system_extint_init+0x90>
	}
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_EIC);
    6e44:	2004      	movs	r0, #4
    6e46:	4b0d      	ldr	r3, [pc, #52]	; (6e7c <_system_extint_init+0xf0>)
    6e48:	447b      	add	r3, pc
    6e4a:	4798      	blx	r3
#endif

	/* Enables the driver for further use */
	_extint_enable();
    6e4c:	4b0c      	ldr	r3, [pc, #48]	; (6e80 <_system_extint_init+0xf4>)
    6e4e:	447b      	add	r3, pc
    6e50:	4798      	blx	r3
}
    6e52:	46c0      	nop			; (mov r8, r8)
    6e54:	46bd      	mov	sp, r7
    6e56:	b005      	add	sp, #20
    6e58:	bd90      	pop	{r4, r7, pc}
    6e5a:	46c0      	nop			; (mov r8, r8)
    6e5c:	0000869c 	.word	0x0000869c
    6e60:	40001800 	.word	0x40001800
    6e64:	fffffea5 	.word	0xfffffea5
    6e68:	fffffe83 	.word	0xfffffe83
    6e6c:	000000d4 	.word	0x000000d4
    6e70:	00000260 	.word	0x00000260
    6e74:	ffffff37 	.word	0xffffff37
    6e78:	000001ac 	.word	0x000001ac
    6e7c:	fffffe81 	.word	0xfffffe81
    6e80:	00000033 	.word	0x00000033

00006e84 <_extint_enable>:
 *
 * Enables EIC modules.
 * Registered callback list will not be affected if callback mode is used.
 */
void _extint_enable(void)
{
    6e84:	b580      	push	{r7, lr}
    6e86:	b082      	sub	sp, #8
    6e88:	af00      	add	r7, sp, #0
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;
    6e8a:	4b15      	ldr	r3, [pc, #84]	; (6ee0 <_extint_enable+0x5c>)
    6e8c:	603b      	str	r3, [r7, #0]

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6e8e:	2300      	movs	r3, #0
    6e90:	607b      	str	r3, [r7, #4]
    6e92:	e018      	b.n	6ec6 <_extint_enable+0x42>
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
    6e94:	687b      	ldr	r3, [r7, #4]
    6e96:	009b      	lsls	r3, r3, #2
    6e98:	2208      	movs	r2, #8
    6e9a:	4694      	mov	ip, r2
    6e9c:	44bc      	add	ip, r7
    6e9e:	4463      	add	r3, ip
    6ea0:	3b08      	subs	r3, #8
    6ea2:	681a      	ldr	r2, [r3, #0]
    6ea4:	687b      	ldr	r3, [r7, #4]
    6ea6:	009b      	lsls	r3, r3, #2
    6ea8:	2108      	movs	r1, #8
    6eaa:	468c      	mov	ip, r1
    6eac:	44bc      	add	ip, r7
    6eae:	4463      	add	r3, ip
    6eb0:	3b08      	subs	r3, #8
    6eb2:	681b      	ldr	r3, [r3, #0]
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	b2db      	uxtb	r3, r3
    6eb8:	2102      	movs	r1, #2
    6eba:	430b      	orrs	r3, r1
    6ebc:	b2db      	uxtb	r3, r3
    6ebe:	7013      	strb	r3, [r2, #0]
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
    6ec0:	687b      	ldr	r3, [r7, #4]
    6ec2:	3301      	adds	r3, #1
    6ec4:	607b      	str	r3, [r7, #4]
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	2b00      	cmp	r3, #0
    6eca:	d0e3      	beq.n	6e94 <_extint_enable+0x10>
	}

	while (extint_is_syncing()) {
    6ecc:	46c0      	nop			; (mov r8, r8)
    6ece:	4b05      	ldr	r3, [pc, #20]	; (6ee4 <_extint_enable+0x60>)
    6ed0:	447b      	add	r3, pc
    6ed2:	4798      	blx	r3
    6ed4:	1e03      	subs	r3, r0, #0
    6ed6:	d1fa      	bne.n	6ece <_extint_enable+0x4a>
		/* Wait for all hardware modules to complete synchronization */
	}
}
    6ed8:	46c0      	nop			; (mov r8, r8)
    6eda:	46bd      	mov	sp, r7
    6edc:	b002      	add	sp, #8
    6ede:	bd80      	pop	{r7, pc}
    6ee0:	40001800 	.word	0x40001800
    6ee4:	fffffe71 	.word	0xfffffe71

00006ee8 <extint_chan_get_config_defaults>:
 *
 * \param[out] config  Configuration structure to initialize to default values
 */
void extint_chan_get_config_defaults(
		struct extint_chan_conf *const config)
{
    6ee8:	b580      	push	{r7, lr}
    6eea:	b082      	sub	sp, #8
    6eec:	af00      	add	r7, sp, #0
    6eee:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
    6ef0:	687b      	ldr	r3, [r7, #4]
    6ef2:	2200      	movs	r2, #0
    6ef4:	601a      	str	r2, [r3, #0]
	config->gpio_pin_mux        = 0;
    6ef6:	687b      	ldr	r3, [r7, #4]
    6ef8:	2200      	movs	r2, #0
    6efa:	605a      	str	r2, [r3, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
    6efc:	687b      	ldr	r3, [r7, #4]
    6efe:	2201      	movs	r2, #1
    6f00:	721a      	strb	r2, [r3, #8]
	config->wake_if_sleeping    = true;
    6f02:	687b      	ldr	r3, [r7, #4]
    6f04:	2201      	movs	r2, #1
    6f06:	725a      	strb	r2, [r3, #9]
	config->filter_input_signal = false;
    6f08:	687b      	ldr	r3, [r7, #4]
    6f0a:	2200      	movs	r2, #0
    6f0c:	729a      	strb	r2, [r3, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
    6f0e:	687b      	ldr	r3, [r7, #4]
    6f10:	2202      	movs	r2, #2
    6f12:	72da      	strb	r2, [r3, #11]
}
    6f14:	46c0      	nop			; (mov r8, r8)
    6f16:	46bd      	mov	sp, r7
    6f18:	b002      	add	sp, #8
    6f1a:	bd80      	pop	{r7, pc}

00006f1c <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
    6f1c:	b590      	push	{r4, r7, lr}
    6f1e:	b087      	sub	sp, #28
    6f20:	af00      	add	r7, sp, #0
    6f22:	0002      	movs	r2, r0
    6f24:	6039      	str	r1, [r7, #0]
    6f26:	1dfb      	adds	r3, r7, #7
    6f28:	701a      	strb	r2, [r3, #0]
    6f2a:	4c3b      	ldr	r4, [pc, #236]	; (7018 <extint_chan_set_config+0xfc>)
    6f2c:	447c      	add	r4, pc
	Assert(!(!system_gclk_gen_is_enabled(EXTINT_CLOCK_SOURCE) &&
		_extint_is_gclk_required(config->filter_input_signal,
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    6f2e:	2308      	movs	r3, #8
    6f30:	18fb      	adds	r3, r7, r3
    6f32:	0018      	movs	r0, r3
    6f34:	4b39      	ldr	r3, [pc, #228]	; (701c <extint_chan_set_config+0x100>)
    6f36:	447b      	add	r3, pc
    6f38:	4798      	blx	r3

	pinmux_config.mux_position = config->gpio_pin_mux;
    6f3a:	683b      	ldr	r3, [r7, #0]
    6f3c:	685b      	ldr	r3, [r3, #4]
    6f3e:	b2da      	uxtb	r2, r3
    6f40:	2308      	movs	r3, #8
    6f42:	18fb      	adds	r3, r7, r3
    6f44:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    6f46:	2308      	movs	r3, #8
    6f48:	18fb      	adds	r3, r7, r3
    6f4a:	2200      	movs	r2, #0
    6f4c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
    6f4e:	683b      	ldr	r3, [r7, #0]
    6f50:	7a1a      	ldrb	r2, [r3, #8]
    6f52:	2308      	movs	r3, #8
    6f54:	18fb      	adds	r3, r7, r3
    6f56:	709a      	strb	r2, [r3, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
    6f58:	683b      	ldr	r3, [r7, #0]
    6f5a:	681b      	ldr	r3, [r3, #0]
    6f5c:	b2db      	uxtb	r3, r3
    6f5e:	2208      	movs	r2, #8
    6f60:	18ba      	adds	r2, r7, r2
    6f62:	0011      	movs	r1, r2
    6f64:	0018      	movs	r0, r3
    6f66:	4b2e      	ldr	r3, [pc, #184]	; (7020 <extint_chan_set_config+0x104>)
    6f68:	58e3      	ldr	r3, [r4, r3]
    6f6a:	4798      	blx	r3

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);
    6f6c:	1dfb      	adds	r3, r7, #7
    6f6e:	781b      	ldrb	r3, [r3, #0]
    6f70:	0018      	movs	r0, r3
    6f72:	4b2c      	ldr	r3, [pc, #176]	; (7024 <extint_chan_set_config+0x108>)
    6f74:	447b      	add	r3, pc
    6f76:	4798      	blx	r3
    6f78:	0003      	movs	r3, r0
    6f7a:	613b      	str	r3, [r7, #16]

	uint32_t config_pos = (4 * (channel % 8));
    6f7c:	1dfb      	adds	r3, r7, #7
    6f7e:	781b      	ldrb	r3, [r3, #0]
    6f80:	2207      	movs	r2, #7
    6f82:	4013      	ands	r3, r2
    6f84:	009b      	lsls	r3, r3, #2
    6f86:	60fb      	str	r3, [r7, #12]
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
    6f88:	683b      	ldr	r3, [r7, #0]
    6f8a:	7adb      	ldrb	r3, [r3, #11]
    6f8c:	617b      	str	r3, [r7, #20]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
    6f8e:	683b      	ldr	r3, [r7, #0]
    6f90:	7a9b      	ldrb	r3, [r3, #10]
    6f92:	2b00      	cmp	r3, #0
    6f94:	d003      	beq.n	6f9e <extint_chan_set_config+0x82>
		new_config |= EIC_CONFIG_FILTEN0;
    6f96:	697b      	ldr	r3, [r7, #20]
    6f98:	2208      	movs	r2, #8
    6f9a:	4313      	orrs	r3, r2
    6f9c:	617b      	str	r3, [r7, #20]
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
    6f9e:	1dfb      	adds	r3, r7, #7
    6fa0:	781b      	ldrb	r3, [r3, #0]
    6fa2:	08db      	lsrs	r3, r3, #3
    6fa4:	b2db      	uxtb	r3, r3
    6fa6:	0018      	movs	r0, r3
		= (EIC_module->CONFIG[channel / 8].reg &
    6fa8:	1dfb      	adds	r3, r7, #7
    6faa:	781b      	ldrb	r3, [r3, #0]
    6fac:	08db      	lsrs	r3, r3, #3
    6fae:	b2db      	uxtb	r3, r3
    6fb0:	001a      	movs	r2, r3
    6fb2:	693b      	ldr	r3, [r7, #16]
    6fb4:	3206      	adds	r2, #6
    6fb6:	0092      	lsls	r2, r2, #2
    6fb8:	58d3      	ldr	r3, [r2, r3]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6fba:	210f      	movs	r1, #15
    6fbc:	68fa      	ldr	r2, [r7, #12]
    6fbe:	4091      	lsls	r1, r2
    6fc0:	000a      	movs	r2, r1
    6fc2:	43d2      	mvns	r2, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6fc4:	401a      	ands	r2, r3
			(new_config << config_pos);
    6fc6:	6979      	ldr	r1, [r7, #20]
    6fc8:	68fb      	ldr	r3, [r7, #12]
    6fca:	4099      	lsls	r1, r3
    6fcc:	000b      	movs	r3, r1
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
    6fce:	431a      	orrs	r2, r3
    6fd0:	0011      	movs	r1, r2
		= (EIC_module->CONFIG[channel / 8].reg &
    6fd2:	693b      	ldr	r3, [r7, #16]
    6fd4:	1d82      	adds	r2, r0, #6
    6fd6:	0092      	lsls	r2, r2, #2
    6fd8:	50d1      	str	r1, [r2, r3]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
    6fda:	683b      	ldr	r3, [r7, #0]
    6fdc:	7a5b      	ldrb	r3, [r3, #9]
    6fde:	2b00      	cmp	r3, #0
    6fe0:	d00a      	beq.n	6ff8 <extint_chan_set_config+0xdc>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
    6fe2:	693b      	ldr	r3, [r7, #16]
    6fe4:	695a      	ldr	r2, [r3, #20]
    6fe6:	1dfb      	adds	r3, r7, #7
    6fe8:	781b      	ldrb	r3, [r3, #0]
    6fea:	2101      	movs	r1, #1
    6fec:	4099      	lsls	r1, r3
    6fee:	000b      	movs	r3, r1
    6ff0:	431a      	orrs	r2, r3
    6ff2:	693b      	ldr	r3, [r7, #16]
    6ff4:	615a      	str	r2, [r3, #20]
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
	}
}
    6ff6:	e00a      	b.n	700e <extint_chan_set_config+0xf2>
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
    6ff8:	693b      	ldr	r3, [r7, #16]
    6ffa:	695b      	ldr	r3, [r3, #20]
    6ffc:	1dfa      	adds	r2, r7, #7
    6ffe:	7812      	ldrb	r2, [r2, #0]
    7000:	2101      	movs	r1, #1
    7002:	4091      	lsls	r1, r2
    7004:	000a      	movs	r2, r1
    7006:	43d2      	mvns	r2, r2
    7008:	401a      	ands	r2, r3
    700a:	693b      	ldr	r3, [r7, #16]
    700c:	615a      	str	r2, [r3, #20]
}
    700e:	46c0      	nop			; (mov r8, r8)
    7010:	46bd      	mov	sp, r7
    7012:	b007      	add	sp, #28
    7014:	bd90      	pop	{r4, r7, pc}
    7016:	46c0      	nop			; (mov r8, r8)
    7018:	00008504 	.word	0x00008504
    701c:	fffffd6b 	.word	0xfffffd6b
    7020:	000002dc 	.word	0x000002dc
    7024:	fffffd81 	.word	0xfffffd81

00007028 <system_pinmux_get_config_defaults>:
{
    7028:	b580      	push	{r7, lr}
    702a:	b082      	sub	sp, #8
    702c:	af00      	add	r7, sp, #0
    702e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7030:	687b      	ldr	r3, [r7, #4]
    7032:	2280      	movs	r2, #128	; 0x80
    7034:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7036:	687b      	ldr	r3, [r7, #4]
    7038:	2200      	movs	r2, #0
    703a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    703c:	687b      	ldr	r3, [r7, #4]
    703e:	2201      	movs	r2, #1
    7040:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	2200      	movs	r2, #0
    7046:	70da      	strb	r2, [r3, #3]
}
    7048:	46c0      	nop			; (mov r8, r8)
    704a:	46bd      	mov	sp, r7
    704c:	b002      	add	sp, #8
    704e:	bd80      	pop	{r7, pc}

00007050 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    7050:	b590      	push	{r4, r7, lr}
    7052:	b085      	sub	sp, #20
    7054:	af00      	add	r7, sp, #0
    7056:	0002      	movs	r2, r0
    7058:	6039      	str	r1, [r7, #0]
    705a:	1dfb      	adds	r3, r7, #7
    705c:	701a      	strb	r2, [r3, #0]
    705e:	4c14      	ldr	r4, [pc, #80]	; (70b0 <port_pin_set_config+0x60>)
    7060:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(config);

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);
    7062:	230c      	movs	r3, #12
    7064:	18fb      	adds	r3, r7, r3
    7066:	0018      	movs	r0, r3
    7068:	4b12      	ldr	r3, [pc, #72]	; (70b4 <port_pin_set_config+0x64>)
    706a:	447b      	add	r3, pc
    706c:	4798      	blx	r3

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
    706e:	230c      	movs	r3, #12
    7070:	18fb      	adds	r3, r7, r3
    7072:	2280      	movs	r2, #128	; 0x80
    7074:	701a      	strb	r2, [r3, #0]
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    7076:	683b      	ldr	r3, [r7, #0]
    7078:	781a      	ldrb	r2, [r3, #0]
    707a:	230c      	movs	r3, #12
    707c:	18fb      	adds	r3, r7, r3
    707e:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    7080:	683b      	ldr	r3, [r7, #0]
    7082:	785a      	ldrb	r2, [r3, #1]
    7084:	230c      	movs	r3, #12
    7086:	18fb      	adds	r3, r7, r3
    7088:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    708a:	683b      	ldr	r3, [r7, #0]
    708c:	789a      	ldrb	r2, [r3, #2]
    708e:	230c      	movs	r3, #12
    7090:	18fb      	adds	r3, r7, r3
    7092:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    7094:	230c      	movs	r3, #12
    7096:	18fa      	adds	r2, r7, r3
    7098:	1dfb      	adds	r3, r7, #7
    709a:	781b      	ldrb	r3, [r3, #0]
    709c:	0011      	movs	r1, r2
    709e:	0018      	movs	r0, r3
    70a0:	4b05      	ldr	r3, [pc, #20]	; (70b8 <port_pin_set_config+0x68>)
    70a2:	58e3      	ldr	r3, [r4, r3]
    70a4:	4798      	blx	r3
}
    70a6:	46c0      	nop			; (mov r8, r8)
    70a8:	46bd      	mov	sp, r7
    70aa:	b005      	add	sp, #20
    70ac:	bd90      	pop	{r4, r7, pc}
    70ae:	46c0      	nop			; (mov r8, r8)
    70b0:	000083d0 	.word	0x000083d0
    70b4:	ffffffbb 	.word	0xffffffbb
    70b8:	000002dc 	.word	0x000002dc

000070bc <system_gclk_chan_get_config_defaults>:
{
    70bc:	b580      	push	{r7, lr}
    70be:	b082      	sub	sp, #8
    70c0:	af00      	add	r7, sp, #0
    70c2:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    70c4:	687b      	ldr	r3, [r7, #4]
    70c6:	2200      	movs	r2, #0
    70c8:	701a      	strb	r2, [r3, #0]
}
    70ca:	46c0      	nop			; (mov r8, r8)
    70cc:	46bd      	mov	sp, r7
    70ce:	b002      	add	sp, #8
    70d0:	bd80      	pop	{r7, pc}
	...

000070d4 <system_apb_clock_set_mask>:
{
    70d4:	b580      	push	{r7, lr}
    70d6:	b082      	sub	sp, #8
    70d8:	af00      	add	r7, sp, #0
    70da:	0002      	movs	r2, r0
    70dc:	6039      	str	r1, [r7, #0]
    70de:	1dfb      	adds	r3, r7, #7
    70e0:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    70e2:	1dfb      	adds	r3, r7, #7
    70e4:	781b      	ldrb	r3, [r3, #0]
    70e6:	2b01      	cmp	r3, #1
    70e8:	d00a      	beq.n	7100 <system_apb_clock_set_mask+0x2c>
    70ea:	2b02      	cmp	r3, #2
    70ec:	d00f      	beq.n	710e <system_apb_clock_set_mask+0x3a>
    70ee:	2b00      	cmp	r3, #0
    70f0:	d114      	bne.n	711c <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    70f2:	4b0e      	ldr	r3, [pc, #56]	; (712c <system_apb_clock_set_mask+0x58>)
    70f4:	4a0d      	ldr	r2, [pc, #52]	; (712c <system_apb_clock_set_mask+0x58>)
    70f6:	6991      	ldr	r1, [r2, #24]
    70f8:	683a      	ldr	r2, [r7, #0]
    70fa:	430a      	orrs	r2, r1
    70fc:	619a      	str	r2, [r3, #24]
			break;
    70fe:	e00f      	b.n	7120 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7100:	4b0a      	ldr	r3, [pc, #40]	; (712c <system_apb_clock_set_mask+0x58>)
    7102:	4a0a      	ldr	r2, [pc, #40]	; (712c <system_apb_clock_set_mask+0x58>)
    7104:	69d1      	ldr	r1, [r2, #28]
    7106:	683a      	ldr	r2, [r7, #0]
    7108:	430a      	orrs	r2, r1
    710a:	61da      	str	r2, [r3, #28]
			break;
    710c:	e008      	b.n	7120 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    710e:	4b07      	ldr	r3, [pc, #28]	; (712c <system_apb_clock_set_mask+0x58>)
    7110:	4a06      	ldr	r2, [pc, #24]	; (712c <system_apb_clock_set_mask+0x58>)
    7112:	6a11      	ldr	r1, [r2, #32]
    7114:	683a      	ldr	r2, [r7, #0]
    7116:	430a      	orrs	r2, r1
    7118:	621a      	str	r2, [r3, #32]
			break;
    711a:	e001      	b.n	7120 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    711c:	2317      	movs	r3, #23
    711e:	e000      	b.n	7122 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7120:	2300      	movs	r3, #0
}
    7122:	0018      	movs	r0, r3
    7124:	46bd      	mov	sp, r7
    7126:	b002      	add	sp, #8
    7128:	bd80      	pop	{r7, pc}
    712a:	46c0      	nop			; (mov r8, r8)
    712c:	40000400 	.word	0x40000400

00007130 <system_interrupt_enable>:
{
    7130:	b580      	push	{r7, lr}
    7132:	b082      	sub	sp, #8
    7134:	af00      	add	r7, sp, #0
    7136:	0002      	movs	r2, r0
    7138:	1dfb      	adds	r3, r7, #7
    713a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    713c:	4b06      	ldr	r3, [pc, #24]	; (7158 <system_interrupt_enable+0x28>)
    713e:	1dfa      	adds	r2, r7, #7
    7140:	7812      	ldrb	r2, [r2, #0]
    7142:	0011      	movs	r1, r2
    7144:	221f      	movs	r2, #31
    7146:	400a      	ands	r2, r1
    7148:	2101      	movs	r1, #1
    714a:	4091      	lsls	r1, r2
    714c:	000a      	movs	r2, r1
    714e:	601a      	str	r2, [r3, #0]
}
    7150:	46c0      	nop			; (mov r8, r8)
    7152:	46bd      	mov	sp, r7
    7154:	b002      	add	sp, #8
    7156:	bd80      	pop	{r7, pc}
    7158:	e000e100 	.word	0xe000e100

0000715c <system_interrupt_disable>:
 *
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
    715c:	b580      	push	{r7, lr}
    715e:	b082      	sub	sp, #8
    7160:	af00      	add	r7, sp, #0
    7162:	0002      	movs	r2, r0
    7164:	1dfb      	adds	r3, r7, #7
    7166:	701a      	strb	r2, [r3, #0]
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    7168:	4a07      	ldr	r2, [pc, #28]	; (7188 <system_interrupt_disable+0x2c>)
    716a:	1dfb      	adds	r3, r7, #7
    716c:	781b      	ldrb	r3, [r3, #0]
    716e:	0019      	movs	r1, r3
    7170:	231f      	movs	r3, #31
    7172:	400b      	ands	r3, r1
    7174:	2101      	movs	r1, #1
    7176:	4099      	lsls	r1, r3
    7178:	000b      	movs	r3, r1
    717a:	0019      	movs	r1, r3
    717c:	2380      	movs	r3, #128	; 0x80
    717e:	50d1      	str	r1, [r2, r3]
}
    7180:	46c0      	nop			; (mov r8, r8)
    7182:	46bd      	mov	sp, r7
    7184:	b002      	add	sp, #8
    7186:	bd80      	pop	{r7, pc}
    7188:	e000e100 	.word	0xe000e100

0000718c <rtc_calendar_is_syncing>:
 *
 * \retval false If the module has completed synchronization
 * \retval true If the module synchronization is ongoing
 */
static inline bool rtc_calendar_is_syncing(struct rtc_module *const module)
{
    718c:	b580      	push	{r7, lr}
    718e:	b084      	sub	sp, #16
    7190:	af00      	add	r7, sp, #0
    7192:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    7194:	687b      	ldr	r3, [r7, #4]
    7196:	681b      	ldr	r3, [r3, #0]
    7198:	60fb      	str	r3, [r7, #12]

        if (rtc_module->MODE2.STATUS.reg & RTC_STATUS_SYNCBUSY) {
    719a:	68fb      	ldr	r3, [r7, #12]
    719c:	7a9b      	ldrb	r3, [r3, #10]
    719e:	b2db      	uxtb	r3, r3
    71a0:	b25b      	sxtb	r3, r3
    71a2:	2b00      	cmp	r3, #0
    71a4:	da01      	bge.n	71aa <rtc_calendar_is_syncing+0x1e>
                return true;
    71a6:	2301      	movs	r3, #1
    71a8:	e000      	b.n	71ac <rtc_calendar_is_syncing+0x20>
        }

        return false;
    71aa:	2300      	movs	r3, #0
}
    71ac:	0018      	movs	r0, r3
    71ae:	46bd      	mov	sp, r7
    71b0:	b004      	add	sp, #16
    71b2:	bd80      	pop	{r7, pc}

000071b4 <rtc_calendar_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_enable(struct rtc_module *const module)
{
    71b4:	b580      	push	{r7, lr}
    71b6:	b084      	sub	sp, #16
    71b8:	af00      	add	r7, sp, #0
    71ba:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    71bc:	687b      	ldr	r3, [r7, #4]
    71be:	681b      	ldr	r3, [r3, #0]
    71c0:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
    71c2:	2003      	movs	r0, #3
    71c4:	4b0b      	ldr	r3, [pc, #44]	; (71f4 <rtc_calendar_enable+0x40>)
    71c6:	447b      	add	r3, pc
    71c8:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
    71ca:	46c0      	nop			; (mov r8, r8)
    71cc:	687b      	ldr	r3, [r7, #4]
    71ce:	0018      	movs	r0, r3
    71d0:	4b09      	ldr	r3, [pc, #36]	; (71f8 <rtc_calendar_enable+0x44>)
    71d2:	447b      	add	r3, pc
    71d4:	4798      	blx	r3
    71d6:	1e03      	subs	r3, r0, #0
    71d8:	d1f8      	bne.n	71cc <rtc_calendar_enable+0x18>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_ENABLE;
    71da:	68fb      	ldr	r3, [r7, #12]
    71dc:	881b      	ldrh	r3, [r3, #0]
    71de:	b29b      	uxth	r3, r3
    71e0:	2202      	movs	r2, #2
    71e2:	4313      	orrs	r3, r2
    71e4:	b29a      	uxth	r2, r3
    71e6:	68fb      	ldr	r3, [r7, #12]
    71e8:	801a      	strh	r2, [r3, #0]
}
    71ea:	46c0      	nop			; (mov r8, r8)
    71ec:	46bd      	mov	sp, r7
    71ee:	b004      	add	sp, #16
    71f0:	bd80      	pop	{r7, pc}
    71f2:	46c0      	nop			; (mov r8, r8)
    71f4:	ffffff67 	.word	0xffffff67
    71f8:	ffffffb7 	.word	0xffffffb7

000071fc <rtc_calendar_disable>:
 * Disables the RTC module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_disable(struct rtc_module *const module)
{
    71fc:	b580      	push	{r7, lr}
    71fe:	b084      	sub	sp, #16
    7200:	af00      	add	r7, sp, #0
    7202:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	681b      	ldr	r3, [r3, #0]
    7208:	60fb      	str	r3, [r7, #12]

#if RTC_CALENDAR_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
    720a:	2003      	movs	r0, #3
    720c:	4b0e      	ldr	r3, [pc, #56]	; (7248 <rtc_calendar_disable+0x4c>)
    720e:	447b      	add	r3, pc
    7210:	4798      	blx	r3
#endif

	while (rtc_calendar_is_syncing(module)) {
    7212:	46c0      	nop			; (mov r8, r8)
    7214:	687b      	ldr	r3, [r7, #4]
    7216:	0018      	movs	r0, r3
    7218:	4b0c      	ldr	r3, [pc, #48]	; (724c <rtc_calendar_disable+0x50>)
    721a:	447b      	add	r3, pc
    721c:	4798      	blx	r3
    721e:	1e03      	subs	r3, r0, #0
    7220:	d1f8      	bne.n	7214 <rtc_calendar_disable+0x18>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE2.INTENCLR.reg = RTC_MODE2_INTENCLR_MASK;
    7222:	68fb      	ldr	r3, [r7, #12]
    7224:	22c1      	movs	r2, #193	; 0xc1
    7226:	719a      	strb	r2, [r3, #6]
	/* Clear interrupt flag */
	rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_MASK;
    7228:	68fb      	ldr	r3, [r7, #12]
    722a:	22c1      	movs	r2, #193	; 0xc1
    722c:	721a      	strb	r2, [r3, #8]

	/* Disable RTC module. */
	rtc_module->MODE2.CTRL.reg &= ~RTC_MODE2_CTRL_ENABLE;
    722e:	68fb      	ldr	r3, [r7, #12]
    7230:	881b      	ldrh	r3, [r3, #0]
    7232:	b29b      	uxth	r3, r3
    7234:	2202      	movs	r2, #2
    7236:	4393      	bics	r3, r2
    7238:	b29a      	uxth	r2, r3
    723a:	68fb      	ldr	r3, [r7, #12]
    723c:	801a      	strh	r2, [r3, #0]
}
    723e:	46c0      	nop			; (mov r8, r8)
    7240:	46bd      	mov	sp, r7
    7242:	b004      	add	sp, #16
    7244:	bd80      	pop	{r7, pc}
    7246:	46c0      	nop			; (mov r8, r8)
    7248:	ffffff4b 	.word	0xffffff4b
    724c:	ffffff6f 	.word	0xffffff6f

00007250 <rtc_calendar_reset>:
 * Resets the RTC module to hardware defaults.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void rtc_calendar_reset(struct rtc_module *const module)
{
    7250:	b580      	push	{r7, lr}
    7252:	b084      	sub	sp, #16
    7254:	af00      	add	r7, sp, #0
    7256:	6078      	str	r0, [r7, #4]
    7258:	4a11      	ldr	r2, [pc, #68]	; (72a0 <rtc_calendar_reset+0x50>)
    725a:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    725c:	687b      	ldr	r3, [r7, #4]
    725e:	681b      	ldr	r3, [r3, #0]
    7260:	60fb      	str	r3, [r7, #12]

	/* Disable module before reset. */
	rtc_calendar_disable(module);
    7262:	687b      	ldr	r3, [r7, #4]
    7264:	0018      	movs	r0, r3
    7266:	4b0f      	ldr	r3, [pc, #60]	; (72a4 <rtc_calendar_reset+0x54>)
    7268:	58d3      	ldr	r3, [r2, r3]
    726a:	4798      	blx	r3

#if RTC_CALENDAR_ASYNC == true
	module->registered_callback = 0;
    726c:	687b      	ldr	r3, [r7, #4]
    726e:	2200      	movs	r2, #0
    7270:	821a      	strh	r2, [r3, #16]
	module->enabled_callback    = 0;
    7272:	687b      	ldr	r3, [r7, #4]
    7274:	2200      	movs	r2, #0
    7276:	825a      	strh	r2, [r3, #18]
#endif

	while (rtc_calendar_is_syncing(module)) {
    7278:	46c0      	nop			; (mov r8, r8)
    727a:	687b      	ldr	r3, [r7, #4]
    727c:	0018      	movs	r0, r3
    727e:	4b0a      	ldr	r3, [pc, #40]	; (72a8 <rtc_calendar_reset+0x58>)
    7280:	447b      	add	r3, pc
    7282:	4798      	blx	r3
    7284:	1e03      	subs	r3, r0, #0
    7286:	d1f8      	bne.n	727a <rtc_calendar_reset+0x2a>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE2.CTRL.reg |= RTC_MODE2_CTRL_SWRST;
    7288:	68fb      	ldr	r3, [r7, #12]
    728a:	881b      	ldrh	r3, [r3, #0]
    728c:	b29b      	uxth	r3, r3
    728e:	2201      	movs	r2, #1
    7290:	4313      	orrs	r3, r2
    7292:	b29a      	uxth	r2, r3
    7294:	68fb      	ldr	r3, [r7, #12]
    7296:	801a      	strh	r2, [r3, #0]
}
    7298:	46c0      	nop			; (mov r8, r8)
    729a:	46bd      	mov	sp, r7
    729c:	b004      	add	sp, #16
    729e:	bd80      	pop	{r7, pc}
    72a0:	000081d6 	.word	0x000081d6
    72a4:	0000018c 	.word	0x0000018c
    72a8:	ffffff09 	.word	0xffffff09

000072ac <rtc_calendar_time_to_register_value>:
 * \return 32-bit value.
 */
uint32_t rtc_calendar_time_to_register_value(
		struct rtc_module *const module,
		const struct rtc_calendar_time *const time)
{
    72ac:	b580      	push	{r7, lr}
    72ae:	b084      	sub	sp, #16
    72b0:	af00      	add	r7, sp, #0
    72b2:	6078      	str	r0, [r7, #4]
    72b4:	6039      	str	r1, [r7, #0]
	/* Initialize return value. */
	uint32_t register_value;

	/* Set year value into register_value minus initial year. */
	register_value = (time->year - module->year_init_value) <<
    72b6:	683b      	ldr	r3, [r7, #0]
    72b8:	88db      	ldrh	r3, [r3, #6]
    72ba:	001a      	movs	r2, r3
    72bc:	687b      	ldr	r3, [r7, #4]
    72be:	88db      	ldrh	r3, [r3, #6]
    72c0:	1ad3      	subs	r3, r2, r3
    72c2:	069b      	lsls	r3, r3, #26
    72c4:	60fb      	str	r3, [r7, #12]
			RTC_MODE2_CLOCK_YEAR_Pos;

	/* Set month value into register_value. */
	register_value |= (time->month << RTC_MODE2_CLOCK_MONTH_Pos);
    72c6:	683b      	ldr	r3, [r7, #0]
    72c8:	795b      	ldrb	r3, [r3, #5]
    72ca:	059b      	lsls	r3, r3, #22
    72cc:	001a      	movs	r2, r3
    72ce:	68fb      	ldr	r3, [r7, #12]
    72d0:	4313      	orrs	r3, r2
    72d2:	60fb      	str	r3, [r7, #12]

	/* Set day value into register_value. */
	register_value |= (time->day << RTC_MODE2_CLOCK_DAY_Pos);
    72d4:	683b      	ldr	r3, [r7, #0]
    72d6:	791b      	ldrb	r3, [r3, #4]
    72d8:	045b      	lsls	r3, r3, #17
    72da:	001a      	movs	r2, r3
    72dc:	68fb      	ldr	r3, [r7, #12]
    72de:	4313      	orrs	r3, r2
    72e0:	60fb      	str	r3, [r7, #12]

	/* Set 24 hour value into register_value. */
	register_value |= (time->hour << RTC_MODE2_CLOCK_HOUR_Pos);
    72e2:	683b      	ldr	r3, [r7, #0]
    72e4:	789b      	ldrb	r3, [r3, #2]
    72e6:	031b      	lsls	r3, r3, #12
    72e8:	001a      	movs	r2, r3
    72ea:	68fb      	ldr	r3, [r7, #12]
    72ec:	4313      	orrs	r3, r2
    72ee:	60fb      	str	r3, [r7, #12]

	/* Check if 24 h clock and set pm flag. */
	if (!(module->clock_24h) && (time->pm)) {
    72f0:	687b      	ldr	r3, [r7, #4]
    72f2:	791b      	ldrb	r3, [r3, #4]
    72f4:	2201      	movs	r2, #1
    72f6:	4053      	eors	r3, r2
    72f8:	b2db      	uxtb	r3, r3
    72fa:	2b00      	cmp	r3, #0
    72fc:	d008      	beq.n	7310 <rtc_calendar_time_to_register_value+0x64>
    72fe:	683b      	ldr	r3, [r7, #0]
    7300:	78db      	ldrb	r3, [r3, #3]
    7302:	2b00      	cmp	r3, #0
    7304:	d004      	beq.n	7310 <rtc_calendar_time_to_register_value+0x64>
		/* Set pm flag. */
		register_value |= RTC_MODE2_CLOCK_HOUR_PM;
    7306:	68fb      	ldr	r3, [r7, #12]
    7308:	2280      	movs	r2, #128	; 0x80
    730a:	0252      	lsls	r2, r2, #9
    730c:	4313      	orrs	r3, r2
    730e:	60fb      	str	r3, [r7, #12]
	}

	/* Set minute value into register_value. */
	register_value |= (time->minute << RTC_MODE2_CLOCK_MINUTE_Pos);
    7310:	683b      	ldr	r3, [r7, #0]
    7312:	785b      	ldrb	r3, [r3, #1]
    7314:	019b      	lsls	r3, r3, #6
    7316:	001a      	movs	r2, r3
    7318:	68fb      	ldr	r3, [r7, #12]
    731a:	4313      	orrs	r3, r2
    731c:	60fb      	str	r3, [r7, #12]

	/* Set second value into register_value. */
	register_value |= (time->second << RTC_MODE2_CLOCK_SECOND_Pos);
    731e:	683b      	ldr	r3, [r7, #0]
    7320:	781b      	ldrb	r3, [r3, #0]
    7322:	001a      	movs	r2, r3
    7324:	68fb      	ldr	r3, [r7, #12]
    7326:	4313      	orrs	r3, r2
    7328:	60fb      	str	r3, [r7, #12]

	return register_value;
    732a:	68fb      	ldr	r3, [r7, #12]
}
    732c:	0018      	movs	r0, r3
    732e:	46bd      	mov	sp, r7
    7330:	b004      	add	sp, #16
    7332:	bd80      	pop	{r7, pc}

00007334 <_rtc_calendar_set_config>:
 * \param[in] config  Pointer to the configuration structure.
 */
static void _rtc_calendar_set_config(
		struct rtc_module *const module,
		const struct rtc_calendar_config *const config)
{
    7334:	b590      	push	{r4, r7, lr}
    7336:	b085      	sub	sp, #20
    7338:	af00      	add	r7, sp, #0
    733a:	6078      	str	r0, [r7, #4]
    733c:	6039      	str	r1, [r7, #0]
    733e:	4c30      	ldr	r4, [pc, #192]	; (7400 <_rtc_calendar_set_config+0xcc>)
    7340:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    7342:	687b      	ldr	r3, [r7, #4]
    7344:	681b      	ldr	r3, [r3, #0]
    7346:	60bb      	str	r3, [r7, #8]

	/* Set up temporary register value. */
	uint16_t tmp_reg;

	/* Set to calendar mode and set the prescaler. */
	tmp_reg = RTC_MODE2_CTRL_MODE(2) | config->prescaler;
    7348:	683b      	ldr	r3, [r7, #0]
    734a:	881a      	ldrh	r2, [r3, #0]
    734c:	230e      	movs	r3, #14
    734e:	18fb      	adds	r3, r7, r3
    7350:	2108      	movs	r1, #8
    7352:	430a      	orrs	r2, r1
    7354:	801a      	strh	r2, [r3, #0]

	/* Check clock mode. */
	if (!(config->clock_24h)) {
    7356:	683b      	ldr	r3, [r7, #0]
    7358:	791b      	ldrb	r3, [r3, #4]
    735a:	2201      	movs	r2, #1
    735c:	4053      	eors	r3, r2
    735e:	b2db      	uxtb	r3, r3
    7360:	2b00      	cmp	r3, #0
    7362:	d007      	beq.n	7374 <_rtc_calendar_set_config+0x40>
		/* Set clock mode 12h. */
		tmp_reg |= RTC_MODE2_CTRL_CLKREP;
    7364:	230e      	movs	r3, #14
    7366:	18fb      	adds	r3, r7, r3
    7368:	220e      	movs	r2, #14
    736a:	18ba      	adds	r2, r7, r2
    736c:	8812      	ldrh	r2, [r2, #0]
    736e:	2140      	movs	r1, #64	; 0x40
    7370:	430a      	orrs	r2, r1
    7372:	801a      	strh	r2, [r3, #0]
	}

	/* Check for clear on compare match. */
	if (config->clear_on_match) {
    7374:	683b      	ldr	r3, [r7, #0]
    7376:	789b      	ldrb	r3, [r3, #2]
    7378:	2b00      	cmp	r3, #0
    737a:	d007      	beq.n	738c <_rtc_calendar_set_config+0x58>
		/* Set clear on compare match. */
		tmp_reg |= RTC_MODE2_CTRL_MATCHCLR;
    737c:	230e      	movs	r3, #14
    737e:	18fb      	adds	r3, r7, r3
    7380:	220e      	movs	r2, #14
    7382:	18ba      	adds	r2, r7, r2
    7384:	8812      	ldrh	r2, [r2, #0]
    7386:	2180      	movs	r1, #128	; 0x80
    7388:	430a      	orrs	r2, r1
    738a:	801a      	strh	r2, [r3, #0]
	}

	/* Set temporary value to register. */
	rtc_module->MODE2.CTRL.reg = tmp_reg;
    738c:	68bb      	ldr	r3, [r7, #8]
    738e:	220e      	movs	r2, #14
    7390:	18ba      	adds	r2, r7, r2
    7392:	8812      	ldrh	r2, [r2, #0]
    7394:	801a      	strh	r2, [r3, #0]

	/* Check to set continuously clock read update mode. */
	if (config->continuously_update) {
    7396:	683b      	ldr	r3, [r7, #0]
    7398:	78db      	ldrb	r3, [r3, #3]
    739a:	2b00      	cmp	r3, #0
    739c:	d008      	beq.n	73b0 <_rtc_calendar_set_config+0x7c>
		/* Set continuously mode. */
		rtc_module->MODE2.READREQ.reg |= RTC_READREQ_RCONT;
    739e:	68bb      	ldr	r3, [r7, #8]
    73a0:	885b      	ldrh	r3, [r3, #2]
    73a2:	b29b      	uxth	r3, r3
    73a4:	2280      	movs	r2, #128	; 0x80
    73a6:	01d2      	lsls	r2, r2, #7
    73a8:	4313      	orrs	r3, r2
    73aa:	b29a      	uxth	r2, r3
    73ac:	68bb      	ldr	r3, [r7, #8]
    73ae:	805a      	strh	r2, [r3, #2]
	}

	/* Set alarm time registers. */
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    73b0:	230d      	movs	r3, #13
    73b2:	18fb      	adds	r3, r7, r3
    73b4:	2200      	movs	r2, #0
    73b6:	701a      	strb	r2, [r3, #0]
    73b8:	e018      	b.n	73ec <_rtc_calendar_set_config+0xb8>
		rtc_calendar_set_alarm(module, &(config->alarm[i]), (enum rtc_calendar_alarm)i);
    73ba:	230d      	movs	r3, #13
    73bc:	18fb      	adds	r3, r7, r3
    73be:	781a      	ldrb	r2, [r3, #0]
    73c0:	0013      	movs	r3, r2
    73c2:	009b      	lsls	r3, r3, #2
    73c4:	189b      	adds	r3, r3, r2
    73c6:	005b      	lsls	r3, r3, #1
    73c8:	3308      	adds	r3, #8
    73ca:	683a      	ldr	r2, [r7, #0]
    73cc:	18d1      	adds	r1, r2, r3
    73ce:	230d      	movs	r3, #13
    73d0:	18fb      	adds	r3, r7, r3
    73d2:	781a      	ldrb	r2, [r3, #0]
    73d4:	687b      	ldr	r3, [r7, #4]
    73d6:	0018      	movs	r0, r3
    73d8:	4b0a      	ldr	r3, [pc, #40]	; (7404 <_rtc_calendar_set_config+0xd0>)
    73da:	58e3      	ldr	r3, [r4, r3]
    73dc:	4798      	blx	r3
	for (uint8_t i = 0; i < RTC_NUM_OF_ALARMS; i++) {
    73de:	230d      	movs	r3, #13
    73e0:	18fb      	adds	r3, r7, r3
    73e2:	781a      	ldrb	r2, [r3, #0]
    73e4:	230d      	movs	r3, #13
    73e6:	18fb      	adds	r3, r7, r3
    73e8:	3201      	adds	r2, #1
    73ea:	701a      	strb	r2, [r3, #0]
    73ec:	230d      	movs	r3, #13
    73ee:	18fb      	adds	r3, r7, r3
    73f0:	781b      	ldrb	r3, [r3, #0]
    73f2:	2b00      	cmp	r3, #0
    73f4:	d0e1      	beq.n	73ba <_rtc_calendar_set_config+0x86>
	}
}
    73f6:	46c0      	nop			; (mov r8, r8)
    73f8:	46bd      	mov	sp, r7
    73fa:	b005      	add	sp, #20
    73fc:	bd90      	pop	{r4, r7, pc}
    73fe:	46c0      	nop			; (mov r8, r8)
    7400:	000080f0 	.word	0x000080f0
    7404:	000002c8 	.word	0x000002c8

00007408 <rtc_calendar_init>:
 */
void rtc_calendar_init(
		struct rtc_module *const module,
		Rtc *const hw,
		const struct rtc_calendar_config *const config)
{
    7408:	b590      	push	{r4, r7, lr}
    740a:	b087      	sub	sp, #28
    740c:	af00      	add	r7, sp, #0
    740e:	60f8      	str	r0, [r7, #12]
    7410:	60b9      	str	r1, [r7, #8]
    7412:	607a      	str	r2, [r7, #4]
    7414:	4c1f      	ldr	r4, [pc, #124]	; (7494 <rtc_calendar_init+0x8c>)
    7416:	447c      	add	r4, pc
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7418:	68fb      	ldr	r3, [r7, #12]
    741a:	68ba      	ldr	r2, [r7, #8]
    741c:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_RTC);
    741e:	2120      	movs	r1, #32
    7420:	2000      	movs	r0, #0
    7422:	4b1d      	ldr	r3, [pc, #116]	; (7498 <rtc_calendar_init+0x90>)
    7424:	447b      	add	r3, pc
    7426:	4798      	blx	r3

	/* Set up GCLK */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7428:	2314      	movs	r3, #20
    742a:	18fb      	adds	r3, r7, r3
    742c:	0018      	movs	r0, r3
    742e:	4b1b      	ldr	r3, [pc, #108]	; (749c <rtc_calendar_init+0x94>)
    7430:	447b      	add	r3, pc
    7432:	4798      	blx	r3
	gclk_chan_conf.source_generator = GCLK_GENERATOR_2;
    7434:	2314      	movs	r3, #20
    7436:	18fb      	adds	r3, r7, r3
    7438:	2202      	movs	r2, #2
    743a:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(RTC_GCLK_ID, &gclk_chan_conf);
    743c:	2314      	movs	r3, #20
    743e:	18fb      	adds	r3, r7, r3
    7440:	0019      	movs	r1, r3
    7442:	2004      	movs	r0, #4
    7444:	4b16      	ldr	r3, [pc, #88]	; (74a0 <rtc_calendar_init+0x98>)
    7446:	58e3      	ldr	r3, [r4, r3]
    7448:	4798      	blx	r3
	system_gclk_chan_enable(RTC_GCLK_ID);
    744a:	2004      	movs	r0, #4
    744c:	4b15      	ldr	r3, [pc, #84]	; (74a4 <rtc_calendar_init+0x9c>)
    744e:	58e3      	ldr	r3, [r4, r3]
    7450:	4798      	blx	r3

	/* Reset module to hardware defaults. */
	rtc_calendar_reset(module);
    7452:	68fb      	ldr	r3, [r7, #12]
    7454:	0018      	movs	r0, r3
    7456:	4b14      	ldr	r3, [pc, #80]	; (74a8 <rtc_calendar_init+0xa0>)
    7458:	58e3      	ldr	r3, [r4, r3]
    745a:	4798      	blx	r3

	/* Save conf_struct internally for continued use. */
	module->clock_24h           = config->clock_24h;
    745c:	687b      	ldr	r3, [r7, #4]
    745e:	791a      	ldrb	r2, [r3, #4]
    7460:	68fb      	ldr	r3, [r7, #12]
    7462:	711a      	strb	r2, [r3, #4]
	module->continuously_update = config->continuously_update;
    7464:	687b      	ldr	r3, [r7, #4]
    7466:	78da      	ldrb	r2, [r3, #3]
    7468:	68fb      	ldr	r3, [r7, #12]
    746a:	715a      	strb	r2, [r3, #5]
	module->year_init_value     = config->year_init_value;
    746c:	687b      	ldr	r3, [r7, #4]
    746e:	88da      	ldrh	r2, [r3, #6]
    7470:	68fb      	ldr	r3, [r7, #12]
    7472:	80da      	strh	r2, [r3, #6]

#if (RTC_INST_NUM == 1)
	_rtc_instance[0] = module;
    7474:	4b0d      	ldr	r3, [pc, #52]	; (74ac <rtc_calendar_init+0xa4>)
    7476:	58e3      	ldr	r3, [r4, r3]
    7478:	68fa      	ldr	r2, [r7, #12]
    747a:	601a      	str	r2, [r3, #0]
	/* Register this instance for callbacks*/
	_rtc_instance[_rtc_get_inst_index(hw)] = module;
#endif

	/* Set config. */
	_rtc_calendar_set_config(module, config);
    747c:	687a      	ldr	r2, [r7, #4]
    747e:	68fb      	ldr	r3, [r7, #12]
    7480:	0011      	movs	r1, r2
    7482:	0018      	movs	r0, r3
    7484:	4b0a      	ldr	r3, [pc, #40]	; (74b0 <rtc_calendar_init+0xa8>)
    7486:	447b      	add	r3, pc
    7488:	4798      	blx	r3
}
    748a:	46c0      	nop			; (mov r8, r8)
    748c:	46bd      	mov	sp, r7
    748e:	b007      	add	sp, #28
    7490:	bd90      	pop	{r4, r7, pc}
    7492:	46c0      	nop			; (mov r8, r8)
    7494:	0000801a 	.word	0x0000801a
    7498:	fffffcad 	.word	0xfffffcad
    749c:	fffffc89 	.word	0xfffffc89
    74a0:	000000d4 	.word	0x000000d4
    74a4:	00000260 	.word	0x00000260
    74a8:	000001b8 	.word	0x000001b8
    74ac:	00000018 	.word	0x00000018
    74b0:	fffffeab 	.word	0xfffffeab

000074b4 <rtc_calendar_set_alarm>:
 */
enum status_code rtc_calendar_set_alarm(
		struct rtc_module *const module,
		const struct rtc_calendar_alarm_time *const alarm,
		const enum rtc_calendar_alarm alarm_index)
{
    74b4:	b580      	push	{r7, lr}
    74b6:	b086      	sub	sp, #24
    74b8:	af00      	add	r7, sp, #0
    74ba:	60f8      	str	r0, [r7, #12]
    74bc:	60b9      	str	r1, [r7, #8]
    74be:	1dfb      	adds	r3, r7, #7
    74c0:	701a      	strb	r2, [r3, #0]
    74c2:	4a19      	ldr	r2, [pc, #100]	; (7528 <rtc_calendar_set_alarm+0x74>)
    74c4:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    74c6:	68fb      	ldr	r3, [r7, #12]
    74c8:	681b      	ldr	r3, [r3, #0]
    74ca:	617b      	str	r3, [r7, #20]

	/* Sanity check. */
	if ((uint32_t)alarm_index > RTC_NUM_OF_ALARMS) {
    74cc:	1dfb      	adds	r3, r7, #7
    74ce:	781b      	ldrb	r3, [r3, #0]
    74d0:	2b01      	cmp	r3, #1
    74d2:	d901      	bls.n	74d8 <rtc_calendar_set_alarm+0x24>
		return STATUS_ERR_INVALID_ARG;
    74d4:	2317      	movs	r3, #23
    74d6:	e022      	b.n	751e <rtc_calendar_set_alarm+0x6a>
	}

	/* Get register_value from time. */
	uint32_t register_value = rtc_calendar_time_to_register_value(module, &(alarm->time));
    74d8:	68b9      	ldr	r1, [r7, #8]
    74da:	68fb      	ldr	r3, [r7, #12]
    74dc:	0018      	movs	r0, r3
    74de:	4b13      	ldr	r3, [pc, #76]	; (752c <rtc_calendar_set_alarm+0x78>)
    74e0:	58d3      	ldr	r3, [r2, r3]
    74e2:	4798      	blx	r3
    74e4:	0003      	movs	r3, r0
    74e6:	613b      	str	r3, [r7, #16]

	while (rtc_calendar_is_syncing(module)) {
    74e8:	46c0      	nop			; (mov r8, r8)
    74ea:	68fb      	ldr	r3, [r7, #12]
    74ec:	0018      	movs	r0, r3
    74ee:	4b10      	ldr	r3, [pc, #64]	; (7530 <rtc_calendar_set_alarm+0x7c>)
    74f0:	447b      	add	r3, pc
    74f2:	4798      	blx	r3
    74f4:	1e03      	subs	r3, r0, #0
    74f6:	d1f8      	bne.n	74ea <rtc_calendar_set_alarm+0x36>
		/* Wait for synchronization */
	}

	/* Set alarm value. */
	rtc_module->MODE2.Mode2Alarm[alarm_index].ALARM.reg = register_value;
    74f8:	1dfb      	adds	r3, r7, #7
    74fa:	781a      	ldrb	r2, [r3, #0]
    74fc:	697b      	ldr	r3, [r7, #20]
    74fe:	3203      	adds	r2, #3
    7500:	00d2      	lsls	r2, r2, #3
    7502:	6939      	ldr	r1, [r7, #16]
    7504:	50d1      	str	r1, [r2, r3]

	/* Set alarm mask */
	rtc_module->MODE2.Mode2Alarm[alarm_index].MASK.reg = alarm->mask;
    7506:	1dfb      	adds	r3, r7, #7
    7508:	781b      	ldrb	r3, [r3, #0]
    750a:	68ba      	ldr	r2, [r7, #8]
    750c:	7a11      	ldrb	r1, [r2, #8]
    750e:	697a      	ldr	r2, [r7, #20]
    7510:	3303      	adds	r3, #3
    7512:	00db      	lsls	r3, r3, #3
    7514:	18d3      	adds	r3, r2, r3
    7516:	3304      	adds	r3, #4
    7518:	1c0a      	adds	r2, r1, #0
    751a:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    751c:	2300      	movs	r3, #0
}
    751e:	0018      	movs	r0, r3
    7520:	46bd      	mov	sp, r7
    7522:	b006      	add	sp, #24
    7524:	bd80      	pop	{r7, pc}
    7526:	46c0      	nop			; (mov r8, r8)
    7528:	00007f6c 	.word	0x00007f6c
    752c:	000002b8 	.word	0x000002b8
    7530:	fffffc99 	.word	0xfffffc99

00007534 <_rtc_interrupt_handler>:
 * \internal Interrupt handler for RTC
 *
 * \param [in] instance_index  Default value 0
 */
static void _rtc_interrupt_handler(const uint32_t instance_index)
{
    7534:	b580      	push	{r7, lr}
    7536:	b086      	sub	sp, #24
    7538:	af00      	add	r7, sp, #0
    753a:	6078      	str	r0, [r7, #4]
    753c:	4a29      	ldr	r2, [pc, #164]	; (75e4 <_rtc_interrupt_handler+0xb0>)
    753e:	447a      	add	r2, pc
	struct rtc_module *module = _rtc_instance[instance_index];
    7540:	4b29      	ldr	r3, [pc, #164]	; (75e8 <_rtc_interrupt_handler+0xb4>)
    7542:	58d3      	ldr	r3, [r2, r3]
    7544:	687a      	ldr	r2, [r7, #4]
    7546:	0092      	lsls	r2, r2, #2
    7548:	58d3      	ldr	r3, [r2, r3]
    754a:	617b      	str	r3, [r7, #20]

	Rtc *const rtc_module = module->hw;
    754c:	697b      	ldr	r3, [r7, #20]
    754e:	681b      	ldr	r3, [r3, #0]
    7550:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks */
	uint16_t callback_mask = module->enabled_callback;
    7552:	230e      	movs	r3, #14
    7554:	18fb      	adds	r3, r7, r3
    7556:	697a      	ldr	r2, [r7, #20]
    7558:	8a52      	ldrh	r2, [r2, #18]
    755a:	801a      	strh	r2, [r3, #0]
	callback_mask &= module->registered_callback;
    755c:	697b      	ldr	r3, [r7, #20]
    755e:	8a1b      	ldrh	r3, [r3, #16]
    7560:	b29a      	uxth	r2, r3
    7562:	230e      	movs	r3, #14
    7564:	18fb      	adds	r3, r7, r3
    7566:	210e      	movs	r1, #14
    7568:	1879      	adds	r1, r7, r1
    756a:	8809      	ldrh	r1, [r1, #0]
    756c:	400a      	ands	r2, r1
    756e:	801a      	strh	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = rtc_module->MODE2.INTFLAG.reg;
    7570:	693b      	ldr	r3, [r7, #16]
    7572:	7a1b      	ldrb	r3, [r3, #8]
    7574:	b2da      	uxtb	r2, r3
    7576:	230c      	movs	r3, #12
    7578:	18fb      	adds	r3, r7, r3
    757a:	801a      	strh	r2, [r3, #0]
	interrupt_status &= rtc_module->MODE2.INTENSET.reg;
    757c:	693b      	ldr	r3, [r7, #16]
    757e:	79db      	ldrb	r3, [r3, #7]
    7580:	b2db      	uxtb	r3, r3
    7582:	b29a      	uxth	r2, r3
    7584:	230c      	movs	r3, #12
    7586:	18fb      	adds	r3, r7, r3
    7588:	210c      	movs	r1, #12
    758a:	1879      	adds	r1, r7, r1
    758c:	8809      	ldrh	r1, [r1, #0]
    758e:	400a      	ands	r2, r1
    7590:	801a      	strh	r2, [r3, #0]

	if (interrupt_status & RTC_MODE2_INTFLAG_OVF) {
    7592:	230c      	movs	r3, #12
    7594:	18fb      	adds	r3, r7, r3
    7596:	881b      	ldrh	r3, [r3, #0]
    7598:	2280      	movs	r2, #128	; 0x80
    759a:	4013      	ands	r3, r2
    759c:	d00c      	beq.n	75b8 <_rtc_interrupt_handler+0x84>
		/* Overflow interrupt */
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_OVERFLOW)) {
    759e:	230e      	movs	r3, #14
    75a0:	18fb      	adds	r3, r7, r3
    75a2:	881b      	ldrh	r3, [r3, #0]
    75a4:	2202      	movs	r2, #2
    75a6:	4013      	ands	r3, r2
    75a8:	d002      	beq.n	75b0 <_rtc_interrupt_handler+0x7c>
			module->callbacks[RTC_CALENDAR_CALLBACK_OVERFLOW]();
    75aa:	697b      	ldr	r3, [r7, #20]
    75ac:	68db      	ldr	r3, [r3, #12]
    75ae:	4798      	blx	r3
		}

		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_OVF;
    75b0:	693b      	ldr	r3, [r7, #16]
    75b2:	2280      	movs	r2, #128	; 0x80
    75b4:	721a      	strb	r2, [r3, #8]
		}
		/* Clear interrupt flag */
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 3);
		#endif
	}
}
    75b6:	e011      	b.n	75dc <_rtc_interrupt_handler+0xa8>
	} else if (interrupt_status & RTC_MODE2_INTFLAG_ALARM(1 << 0)) {
    75b8:	230c      	movs	r3, #12
    75ba:	18fb      	adds	r3, r7, r3
    75bc:	881b      	ldrh	r3, [r3, #0]
    75be:	2201      	movs	r2, #1
    75c0:	4013      	ands	r3, r2
    75c2:	d00b      	beq.n	75dc <_rtc_interrupt_handler+0xa8>
		if (callback_mask & (1 << RTC_CALENDAR_CALLBACK_ALARM_0)) {
    75c4:	230e      	movs	r3, #14
    75c6:	18fb      	adds	r3, r7, r3
    75c8:	881b      	ldrh	r3, [r3, #0]
    75ca:	2201      	movs	r2, #1
    75cc:	4013      	ands	r3, r2
    75ce:	d002      	beq.n	75d6 <_rtc_interrupt_handler+0xa2>
			module->callbacks[RTC_CALENDAR_CALLBACK_ALARM_0]();
    75d0:	697b      	ldr	r3, [r7, #20]
    75d2:	689b      	ldr	r3, [r3, #8]
    75d4:	4798      	blx	r3
		rtc_module->MODE2.INTFLAG.reg = RTC_MODE2_INTFLAG_ALARM(1 << 0);
    75d6:	693b      	ldr	r3, [r7, #16]
    75d8:	2201      	movs	r2, #1
    75da:	721a      	strb	r2, [r3, #8]
}
    75dc:	46c0      	nop			; (mov r8, r8)
    75de:	46bd      	mov	sp, r7
    75e0:	b006      	add	sp, #24
    75e2:	bd80      	pop	{r7, pc}
    75e4:	00007ef2 	.word	0x00007ef2
    75e8:	00000018 	.word	0x00000018

000075ec <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    75ec:	b580      	push	{r7, lr}
    75ee:	af00      	add	r7, sp, #0
	_rtc_interrupt_handler(0);
    75f0:	2000      	movs	r0, #0
    75f2:	4b03      	ldr	r3, [pc, #12]	; (7600 <RTC_Handler+0x14>)
    75f4:	447b      	add	r3, pc
    75f6:	4798      	blx	r3
}
    75f8:	46c0      	nop			; (mov r8, r8)
    75fa:	46bd      	mov	sp, r7
    75fc:	bd80      	pop	{r7, pc}
    75fe:	46c0      	nop			; (mov r8, r8)
    7600:	ffffff3d 	.word	0xffffff3d

00007604 <system_gclk_chan_get_config_defaults>:
{
    7604:	b580      	push	{r7, lr}
    7606:	b082      	sub	sp, #8
    7608:	af00      	add	r7, sp, #0
    760a:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    760c:	687b      	ldr	r3, [r7, #4]
    760e:	2200      	movs	r2, #0
    7610:	701a      	strb	r2, [r3, #0]
}
    7612:	46c0      	nop			; (mov r8, r8)
    7614:	46bd      	mov	sp, r7
    7616:	b002      	add	sp, #8
    7618:	bd80      	pop	{r7, pc}

0000761a <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    761a:	b580      	push	{r7, lr}
    761c:	b086      	sub	sp, #24
    761e:	af00      	add	r7, sp, #0
    7620:	60f8      	str	r0, [r7, #12]
    7622:	60b9      	str	r1, [r7, #8]
    7624:	607a      	str	r2, [r7, #4]
	/* Baud value variable */
	uint16_t baud_calculated = 0;
    7626:	2316      	movs	r3, #22
    7628:	18fb      	adds	r3, r7, r3
    762a:	2200      	movs	r2, #0
    762c:	801a      	strh	r2, [r3, #0]
	uint32_t clock_value = external_clock;
    762e:	68bb      	ldr	r3, [r7, #8]
    7630:	613b      	str	r3, [r7, #16]


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    7632:	68bb      	ldr	r3, [r7, #8]
    7634:	085a      	lsrs	r2, r3, #1
    7636:	68fb      	ldr	r3, [r7, #12]
    7638:	429a      	cmp	r2, r3
    763a:	d201      	bcs.n	7640 <_sercom_get_sync_baud_val+0x26>
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    763c:	2340      	movs	r3, #64	; 0x40
    763e:	e026      	b.n	768e <_sercom_get_sync_baud_val+0x74>
	}

	/* Calculate BAUD value from clock frequency and baudrate */
	clock_value = external_clock / 2;
    7640:	68bb      	ldr	r3, [r7, #8]
    7642:	085b      	lsrs	r3, r3, #1
    7644:	613b      	str	r3, [r7, #16]
	while (clock_value >= baudrate) {
    7646:	e00a      	b.n	765e <_sercom_get_sync_baud_val+0x44>
		clock_value = clock_value - baudrate;
    7648:	693a      	ldr	r2, [r7, #16]
    764a:	68fb      	ldr	r3, [r7, #12]
    764c:	1ad3      	subs	r3, r2, r3
    764e:	613b      	str	r3, [r7, #16]
		baud_calculated++;
    7650:	2316      	movs	r3, #22
    7652:	18fb      	adds	r3, r7, r3
    7654:	881a      	ldrh	r2, [r3, #0]
    7656:	2316      	movs	r3, #22
    7658:	18fb      	adds	r3, r7, r3
    765a:	3201      	adds	r2, #1
    765c:	801a      	strh	r2, [r3, #0]
	while (clock_value >= baudrate) {
    765e:	693a      	ldr	r2, [r7, #16]
    7660:	68fb      	ldr	r3, [r7, #12]
    7662:	429a      	cmp	r2, r3
    7664:	d2f0      	bcs.n	7648 <_sercom_get_sync_baud_val+0x2e>
	}
	baud_calculated = baud_calculated - 1;
    7666:	2316      	movs	r3, #22
    7668:	18fb      	adds	r3, r7, r3
    766a:	2216      	movs	r2, #22
    766c:	18ba      	adds	r2, r7, r2
    766e:	8812      	ldrh	r2, [r2, #0]
    7670:	3a01      	subs	r2, #1
    7672:	801a      	strh	r2, [r3, #0]

	/* Check if BAUD value is more than 255, which is maximum
	 * for synchronous mode */
	if (baud_calculated > 0xFF) {
    7674:	2316      	movs	r3, #22
    7676:	18fb      	adds	r3, r7, r3
    7678:	881b      	ldrh	r3, [r3, #0]
    767a:	2bff      	cmp	r3, #255	; 0xff
    767c:	d901      	bls.n	7682 <_sercom_get_sync_baud_val+0x68>
		/* Return with an error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    767e:	2340      	movs	r3, #64	; 0x40
    7680:	e005      	b.n	768e <_sercom_get_sync_baud_val+0x74>
	} else {
		*baudvalue = baud_calculated;
    7682:	687b      	ldr	r3, [r7, #4]
    7684:	2216      	movs	r2, #22
    7686:	18ba      	adds	r2, r7, r2
    7688:	8812      	ldrh	r2, [r2, #0]
    768a:	801a      	strh	r2, [r3, #0]
		return STATUS_OK;
    768c:	2300      	movs	r3, #0
	}
}
    768e:	0018      	movs	r0, r3
    7690:	46bd      	mov	sp, r7
    7692:	b006      	add	sp, #24
    7694:	bd80      	pop	{r7, pc}
	...

00007698 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    7698:	b590      	push	{r4, r7, lr}
    769a:	b085      	sub	sp, #20
    769c:	af00      	add	r7, sp, #0
    769e:	0002      	movs	r2, r0
    76a0:	1dfb      	adds	r3, r7, #7
    76a2:	701a      	strb	r2, [r3, #0]
    76a4:	1dbb      	adds	r3, r7, #6
    76a6:	1c0a      	adds	r2, r1, #0
    76a8:	701a      	strb	r2, [r3, #0]
    76aa:	4c1e      	ldr	r4, [pc, #120]	; (7724 <sercom_set_gclk_generator+0x8c>)
    76ac:	447c      	add	r4, pc
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    76ae:	4b1e      	ldr	r3, [pc, #120]	; (7728 <sercom_set_gclk_generator+0x90>)
    76b0:	447b      	add	r3, pc
    76b2:	781b      	ldrb	r3, [r3, #0]
    76b4:	2201      	movs	r2, #1
    76b6:	4053      	eors	r3, r2
    76b8:	b2db      	uxtb	r3, r3
    76ba:	2b00      	cmp	r3, #0
    76bc:	d103      	bne.n	76c6 <sercom_set_gclk_generator+0x2e>
    76be:	1dbb      	adds	r3, r7, #6
    76c0:	781b      	ldrb	r3, [r3, #0]
    76c2:	2b00      	cmp	r3, #0
    76c4:	d020      	beq.n	7708 <sercom_set_gclk_generator+0x70>
		/* Create and fill a GCLK configuration structure for the new config */
		struct system_gclk_chan_config gclk_chan_conf;
		system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    76c6:	230c      	movs	r3, #12
    76c8:	18fb      	adds	r3, r7, r3
    76ca:	0018      	movs	r0, r3
    76cc:	4b17      	ldr	r3, [pc, #92]	; (772c <sercom_set_gclk_generator+0x94>)
    76ce:	447b      	add	r3, pc
    76d0:	4798      	blx	r3
		gclk_chan_conf.source_generator = generator_source;
    76d2:	230c      	movs	r3, #12
    76d4:	18fb      	adds	r3, r7, r3
    76d6:	1dfa      	adds	r2, r7, #7
    76d8:	7812      	ldrb	r2, [r2, #0]
    76da:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    76dc:	230c      	movs	r3, #12
    76de:	18fb      	adds	r3, r7, r3
    76e0:	0019      	movs	r1, r3
    76e2:	2013      	movs	r0, #19
    76e4:	4b12      	ldr	r3, [pc, #72]	; (7730 <sercom_set_gclk_generator+0x98>)
    76e6:	58e3      	ldr	r3, [r4, r3]
    76e8:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    76ea:	2013      	movs	r0, #19
    76ec:	4b11      	ldr	r3, [pc, #68]	; (7734 <sercom_set_gclk_generator+0x9c>)
    76ee:	58e3      	ldr	r3, [r4, r3]
    76f0:	4798      	blx	r3

		/* Save config */
		_sercom_config.generator_source = generator_source;
    76f2:	4b11      	ldr	r3, [pc, #68]	; (7738 <sercom_set_gclk_generator+0xa0>)
    76f4:	447b      	add	r3, pc
    76f6:	1dfa      	adds	r2, r7, #7
    76f8:	7812      	ldrb	r2, [r2, #0]
    76fa:	705a      	strb	r2, [r3, #1]
		_sercom_config.generator_is_set = true;
    76fc:	4b0f      	ldr	r3, [pc, #60]	; (773c <sercom_set_gclk_generator+0xa4>)
    76fe:	447b      	add	r3, pc
    7700:	2201      	movs	r2, #1
    7702:	701a      	strb	r2, [r3, #0]

		return STATUS_OK;
    7704:	2300      	movs	r3, #0
    7706:	e009      	b.n	771c <sercom_set_gclk_generator+0x84>
	} else if (generator_source == _sercom_config.generator_source) {
    7708:	4b0d      	ldr	r3, [pc, #52]	; (7740 <sercom_set_gclk_generator+0xa8>)
    770a:	447b      	add	r3, pc
    770c:	785b      	ldrb	r3, [r3, #1]
    770e:	1dfa      	adds	r2, r7, #7
    7710:	7812      	ldrb	r2, [r2, #0]
    7712:	429a      	cmp	r2, r3
    7714:	d101      	bne.n	771a <sercom_set_gclk_generator+0x82>
		/* Return status OK if same config */
		return STATUS_OK;
    7716:	2300      	movs	r3, #0
    7718:	e000      	b.n	771c <sercom_set_gclk_generator+0x84>
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    771a:	231d      	movs	r3, #29
}
    771c:	0018      	movs	r0, r3
    771e:	46bd      	mov	sp, r7
    7720:	b005      	add	sp, #20
    7722:	bd90      	pop	{r4, r7, pc}
    7724:	00007d84 	.word	0x00007d84
    7728:	1fff8cc8 	.word	0x1fff8cc8
    772c:	ffffff33 	.word	0xffffff33
    7730:	000000d4 	.word	0x000000d4
    7734:	00000260 	.word	0x00000260
    7738:	1fff8c84 	.word	0x1fff8c84
    773c:	1fff8c7a 	.word	0x1fff8c7a
    7740:	1fff8c6e 	.word	0x1fff8c6e

00007744 <_sercom_get_default_pad>:
 *
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
    7744:	b580      	push	{r7, lr}
    7746:	b082      	sub	sp, #8
    7748:	af00      	add	r7, sp, #0
    774a:	6078      	str	r0, [r7, #4]
    774c:	000a      	movs	r2, r1
    774e:	1cfb      	adds	r3, r7, #3
    7750:	701a      	strb	r2, [r3, #0]
	switch ((uintptr_t)sercom_module) {
    7752:	687b      	ldr	r3, [r7, #4]
    7754:	4a57      	ldr	r2, [pc, #348]	; (78b4 <_sercom_get_default_pad+0x170>)
    7756:	4293      	cmp	r3, r2
    7758:	d046      	beq.n	77e8 <_sercom_get_default_pad+0xa4>
    775a:	4a56      	ldr	r2, [pc, #344]	; (78b4 <_sercom_get_default_pad+0x170>)
    775c:	4293      	cmp	r3, r2
    775e:	d806      	bhi.n	776e <_sercom_get_default_pad+0x2a>
    7760:	4a55      	ldr	r2, [pc, #340]	; (78b8 <_sercom_get_default_pad+0x174>)
    7762:	4293      	cmp	r3, r2
    7764:	d00f      	beq.n	7786 <_sercom_get_default_pad+0x42>
    7766:	4a55      	ldr	r2, [pc, #340]	; (78bc <_sercom_get_default_pad+0x178>)
    7768:	4293      	cmp	r3, r2
    776a:	d025      	beq.n	77b8 <_sercom_get_default_pad+0x74>
    776c:	e09d      	b.n	78aa <_sercom_get_default_pad+0x166>
    776e:	4a54      	ldr	r2, [pc, #336]	; (78c0 <_sercom_get_default_pad+0x17c>)
    7770:	4293      	cmp	r3, r2
    7772:	d100      	bne.n	7776 <_sercom_get_default_pad+0x32>
    7774:	e068      	b.n	7848 <_sercom_get_default_pad+0x104>
    7776:	4a53      	ldr	r2, [pc, #332]	; (78c4 <_sercom_get_default_pad+0x180>)
    7778:	4293      	cmp	r3, r2
    777a:	d100      	bne.n	777e <_sercom_get_default_pad+0x3a>
    777c:	e07c      	b.n	7878 <_sercom_get_default_pad+0x134>
    777e:	4a52      	ldr	r2, [pc, #328]	; (78c8 <_sercom_get_default_pad+0x184>)
    7780:	4293      	cmp	r3, r2
    7782:	d049      	beq.n	7818 <_sercom_get_default_pad+0xd4>
    7784:	e091      	b.n	78aa <_sercom_get_default_pad+0x166>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    7786:	1cfb      	adds	r3, r7, #3
    7788:	781b      	ldrb	r3, [r3, #0]
    778a:	2b03      	cmp	r3, #3
    778c:	d900      	bls.n	7790 <_sercom_get_default_pad+0x4c>
    778e:	e08b      	b.n	78a8 <_sercom_get_default_pad+0x164>
    7790:	0018      	movs	r0, r3
    7792:	f006 f8b3 	bl	d8fc <__gnu_thumb1_case_si>
    7796:	46c0      	nop			; (mov r8, r8)
    7798:	00000010 	.word	0x00000010
    779c:	00000014 	.word	0x00000014
    77a0:	00000018 	.word	0x00000018
    77a4:	0000001c 	.word	0x0000001c
    77a8:	4b48      	ldr	r3, [pc, #288]	; (78cc <_sercom_get_default_pad+0x188>)
    77aa:	e07f      	b.n	78ac <_sercom_get_default_pad+0x168>
    77ac:	4b48      	ldr	r3, [pc, #288]	; (78d0 <_sercom_get_default_pad+0x18c>)
    77ae:	e07d      	b.n	78ac <_sercom_get_default_pad+0x168>
    77b0:	4b48      	ldr	r3, [pc, #288]	; (78d4 <_sercom_get_default_pad+0x190>)
    77b2:	e07b      	b.n	78ac <_sercom_get_default_pad+0x168>
    77b4:	4b48      	ldr	r3, [pc, #288]	; (78d8 <_sercom_get_default_pad+0x194>)
    77b6:	e079      	b.n	78ac <_sercom_get_default_pad+0x168>
    77b8:	1cfb      	adds	r3, r7, #3
    77ba:	781b      	ldrb	r3, [r3, #0]
    77bc:	2b03      	cmp	r3, #3
    77be:	d900      	bls.n	77c2 <_sercom_get_default_pad+0x7e>
    77c0:	e072      	b.n	78a8 <_sercom_get_default_pad+0x164>
    77c2:	0018      	movs	r0, r3
    77c4:	f006 f89a 	bl	d8fc <__gnu_thumb1_case_si>
    77c8:	00000010 	.word	0x00000010
    77cc:	00000014 	.word	0x00000014
    77d0:	00000018 	.word	0x00000018
    77d4:	0000001c 	.word	0x0000001c
    77d8:	2303      	movs	r3, #3
    77da:	e067      	b.n	78ac <_sercom_get_default_pad+0x168>
    77dc:	4b3f      	ldr	r3, [pc, #252]	; (78dc <_sercom_get_default_pad+0x198>)
    77de:	e065      	b.n	78ac <_sercom_get_default_pad+0x168>
    77e0:	4b3f      	ldr	r3, [pc, #252]	; (78e0 <_sercom_get_default_pad+0x19c>)
    77e2:	e063      	b.n	78ac <_sercom_get_default_pad+0x168>
    77e4:	4b3f      	ldr	r3, [pc, #252]	; (78e4 <_sercom_get_default_pad+0x1a0>)
    77e6:	e061      	b.n	78ac <_sercom_get_default_pad+0x168>
    77e8:	1cfb      	adds	r3, r7, #3
    77ea:	781b      	ldrb	r3, [r3, #0]
    77ec:	2b03      	cmp	r3, #3
    77ee:	d85b      	bhi.n	78a8 <_sercom_get_default_pad+0x164>
    77f0:	0018      	movs	r0, r3
    77f2:	f006 f883 	bl	d8fc <__gnu_thumb1_case_si>
    77f6:	46c0      	nop			; (mov r8, r8)
    77f8:	00000010 	.word	0x00000010
    77fc:	00000014 	.word	0x00000014
    7800:	00000018 	.word	0x00000018
    7804:	0000001c 	.word	0x0000001c
    7808:	4b37      	ldr	r3, [pc, #220]	; (78e8 <_sercom_get_default_pad+0x1a4>)
    780a:	e04f      	b.n	78ac <_sercom_get_default_pad+0x168>
    780c:	4b37      	ldr	r3, [pc, #220]	; (78ec <_sercom_get_default_pad+0x1a8>)
    780e:	e04d      	b.n	78ac <_sercom_get_default_pad+0x168>
    7810:	4b37      	ldr	r3, [pc, #220]	; (78f0 <_sercom_get_default_pad+0x1ac>)
    7812:	e04b      	b.n	78ac <_sercom_get_default_pad+0x168>
    7814:	4b37      	ldr	r3, [pc, #220]	; (78f4 <_sercom_get_default_pad+0x1b0>)
    7816:	e049      	b.n	78ac <_sercom_get_default_pad+0x168>
    7818:	1cfb      	adds	r3, r7, #3
    781a:	781b      	ldrb	r3, [r3, #0]
    781c:	2b03      	cmp	r3, #3
    781e:	d843      	bhi.n	78a8 <_sercom_get_default_pad+0x164>
    7820:	0018      	movs	r0, r3
    7822:	f006 f86b 	bl	d8fc <__gnu_thumb1_case_si>
    7826:	46c0      	nop			; (mov r8, r8)
    7828:	00000010 	.word	0x00000010
    782c:	00000014 	.word	0x00000014
    7830:	00000018 	.word	0x00000018
    7834:	0000001c 	.word	0x0000001c
    7838:	4b2f      	ldr	r3, [pc, #188]	; (78f8 <_sercom_get_default_pad+0x1b4>)
    783a:	e037      	b.n	78ac <_sercom_get_default_pad+0x168>
    783c:	4b2f      	ldr	r3, [pc, #188]	; (78fc <_sercom_get_default_pad+0x1b8>)
    783e:	e035      	b.n	78ac <_sercom_get_default_pad+0x168>
    7840:	4b2f      	ldr	r3, [pc, #188]	; (7900 <_sercom_get_default_pad+0x1bc>)
    7842:	e033      	b.n	78ac <_sercom_get_default_pad+0x168>
    7844:	4b2f      	ldr	r3, [pc, #188]	; (7904 <_sercom_get_default_pad+0x1c0>)
    7846:	e031      	b.n	78ac <_sercom_get_default_pad+0x168>
    7848:	1cfb      	adds	r3, r7, #3
    784a:	781b      	ldrb	r3, [r3, #0]
    784c:	2b03      	cmp	r3, #3
    784e:	d82b      	bhi.n	78a8 <_sercom_get_default_pad+0x164>
    7850:	0018      	movs	r0, r3
    7852:	f006 f853 	bl	d8fc <__gnu_thumb1_case_si>
    7856:	46c0      	nop			; (mov r8, r8)
    7858:	00000010 	.word	0x00000010
    785c:	00000014 	.word	0x00000014
    7860:	00000018 	.word	0x00000018
    7864:	0000001c 	.word	0x0000001c
    7868:	4b27      	ldr	r3, [pc, #156]	; (7908 <_sercom_get_default_pad+0x1c4>)
    786a:	e01f      	b.n	78ac <_sercom_get_default_pad+0x168>
    786c:	4b27      	ldr	r3, [pc, #156]	; (790c <_sercom_get_default_pad+0x1c8>)
    786e:	e01d      	b.n	78ac <_sercom_get_default_pad+0x168>
    7870:	4b27      	ldr	r3, [pc, #156]	; (7910 <_sercom_get_default_pad+0x1cc>)
    7872:	e01b      	b.n	78ac <_sercom_get_default_pad+0x168>
    7874:	4b27      	ldr	r3, [pc, #156]	; (7914 <_sercom_get_default_pad+0x1d0>)
    7876:	e019      	b.n	78ac <_sercom_get_default_pad+0x168>
    7878:	1cfb      	adds	r3, r7, #3
    787a:	781b      	ldrb	r3, [r3, #0]
    787c:	2b03      	cmp	r3, #3
    787e:	d813      	bhi.n	78a8 <_sercom_get_default_pad+0x164>
    7880:	0018      	movs	r0, r3
    7882:	f006 f83b 	bl	d8fc <__gnu_thumb1_case_si>
    7886:	46c0      	nop			; (mov r8, r8)
    7888:	00000010 	.word	0x00000010
    788c:	00000014 	.word	0x00000014
    7890:	00000018 	.word	0x00000018
    7894:	0000001c 	.word	0x0000001c
    7898:	4b1f      	ldr	r3, [pc, #124]	; (7918 <_sercom_get_default_pad+0x1d4>)
    789a:	e007      	b.n	78ac <_sercom_get_default_pad+0x168>
    789c:	4b1f      	ldr	r3, [pc, #124]	; (791c <_sercom_get_default_pad+0x1d8>)
    789e:	e005      	b.n	78ac <_sercom_get_default_pad+0x168>
    78a0:	4b1f      	ldr	r3, [pc, #124]	; (7920 <_sercom_get_default_pad+0x1dc>)
    78a2:	e003      	b.n	78ac <_sercom_get_default_pad+0x168>
    78a4:	4b1f      	ldr	r3, [pc, #124]	; (7924 <_sercom_get_default_pad+0x1e0>)
    78a6:	e001      	b.n	78ac <_sercom_get_default_pad+0x168>
    78a8:	46c0      	nop			; (mov r8, r8)
	}

	Assert(false);
	return 0;
    78aa:	2300      	movs	r3, #0
}
    78ac:	0018      	movs	r0, r3
    78ae:	46bd      	mov	sp, r7
    78b0:	b002      	add	sp, #8
    78b2:	bd80      	pop	{r7, pc}
    78b4:	42001000 	.word	0x42001000
    78b8:	42000800 	.word	0x42000800
    78bc:	42000c00 	.word	0x42000c00
    78c0:	42001800 	.word	0x42001800
    78c4:	42001c00 	.word	0x42001c00
    78c8:	42001400 	.word	0x42001400
    78cc:	00040003 	.word	0x00040003
    78d0:	00050003 	.word	0x00050003
    78d4:	00060003 	.word	0x00060003
    78d8:	00070003 	.word	0x00070003
    78dc:	00010003 	.word	0x00010003
    78e0:	001e0003 	.word	0x001e0003
    78e4:	001f0003 	.word	0x001f0003
    78e8:	00080003 	.word	0x00080003
    78ec:	00090003 	.word	0x00090003
    78f0:	000a0003 	.word	0x000a0003
    78f4:	000b0003 	.word	0x000b0003
    78f8:	00100003 	.word	0x00100003
    78fc:	00110003 	.word	0x00110003
    7900:	00120003 	.word	0x00120003
    7904:	00130003 	.word	0x00130003
    7908:	000c0003 	.word	0x000c0003
    790c:	000d0003 	.word	0x000d0003
    7910:	000e0003 	.word	0x000e0003
    7914:	000f0003 	.word	0x000f0003
    7918:	00160003 	.word	0x00160003
    791c:	00170003 	.word	0x00170003
    7920:	00180003 	.word	0x00180003
    7924:	00190003 	.word	0x00190003

00007928 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    7928:	b590      	push	{r4, r7, lr}
    792a:	b08b      	sub	sp, #44	; 0x2c
    792c:	af00      	add	r7, sp, #0
    792e:	6078      	str	r0, [r7, #4]
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    7930:	230c      	movs	r3, #12
    7932:	18fb      	adds	r3, r7, r3
    7934:	4a0f      	ldr	r2, [pc, #60]	; (7974 <_sercom_get_sercom_inst_index+0x4c>)
    7936:	447a      	add	r2, pc
    7938:	ca13      	ldmia	r2!, {r0, r1, r4}
    793a:	c313      	stmia	r3!, {r0, r1, r4}
    793c:	ca13      	ldmia	r2!, {r0, r1, r4}
    793e:	c313      	stmia	r3!, {r0, r1, r4}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    7940:	2300      	movs	r3, #0
    7942:	627b      	str	r3, [r7, #36]	; 0x24
    7944:	e00e      	b.n	7964 <_sercom_get_sercom_inst_index+0x3c>
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    7946:	230c      	movs	r3, #12
    7948:	18fb      	adds	r3, r7, r3
    794a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    794c:	0092      	lsls	r2, r2, #2
    794e:	58d3      	ldr	r3, [r2, r3]
    7950:	001a      	movs	r2, r3
    7952:	687b      	ldr	r3, [r7, #4]
    7954:	429a      	cmp	r2, r3
    7956:	d102      	bne.n	795e <_sercom_get_sercom_inst_index+0x36>
			return i;
    7958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    795a:	b2db      	uxtb	r3, r3
    795c:	e006      	b.n	796c <_sercom_get_sercom_inst_index+0x44>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    795e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7960:	3301      	adds	r3, #1
    7962:	627b      	str	r3, [r7, #36]	; 0x24
    7964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7966:	2b05      	cmp	r3, #5
    7968:	d9ed      	bls.n	7946 <_sercom_get_sercom_inst_index+0x1e>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    796a:	2300      	movs	r3, #0
}
    796c:	0018      	movs	r0, r3
    796e:	46bd      	mov	sp, r7
    7970:	b00b      	add	sp, #44	; 0x2c
    7972:	bd90      	pop	{r4, r7, pc}
    7974:	00007a0a 	.word	0x00007a0a

00007978 <_sercom_default_handler>:
 *
 * \param[in] instance SERCOM instance used.
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
    7978:	b580      	push	{r7, lr}
    797a:	b082      	sub	sp, #8
    797c:	af00      	add	r7, sp, #0
    797e:	0002      	movs	r2, r0
    7980:	1dfb      	adds	r3, r7, #7
    7982:	701a      	strb	r2, [r3, #0]
	Assert(false);
}
    7984:	46c0      	nop			; (mov r8, r8)
    7986:	46bd      	mov	sp, r7
    7988:	b002      	add	sp, #8
    798a:	bd80      	pop	{r7, pc}

0000798c <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    798c:	b580      	push	{r7, lr}
    798e:	b084      	sub	sp, #16
    7990:	af00      	add	r7, sp, #0
    7992:	0002      	movs	r2, r0
    7994:	6039      	str	r1, [r7, #0]
    7996:	1dfb      	adds	r3, r7, #7
    7998:	701a      	strb	r2, [r3, #0]
    799a:	4a17      	ldr	r2, [pc, #92]	; (79f8 <_sercom_set_handler+0x6c>)
    799c:	447a      	add	r2, pc
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    799e:	4b17      	ldr	r3, [pc, #92]	; (79fc <_sercom_set_handler+0x70>)
    79a0:	447b      	add	r3, pc
    79a2:	781b      	ldrb	r3, [r3, #0]
    79a4:	2101      	movs	r1, #1
    79a6:	404b      	eors	r3, r1
    79a8:	b2db      	uxtb	r3, r3
    79aa:	2b00      	cmp	r3, #0
    79ac:	d019      	beq.n	79e2 <_sercom_set_handler+0x56>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    79ae:	2300      	movs	r3, #0
    79b0:	60fb      	str	r3, [r7, #12]
    79b2:	e00f      	b.n	79d4 <_sercom_set_handler+0x48>
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    79b4:	4b12      	ldr	r3, [pc, #72]	; (7a00 <_sercom_set_handler+0x74>)
    79b6:	447b      	add	r3, pc
    79b8:	68f9      	ldr	r1, [r7, #12]
    79ba:	0089      	lsls	r1, r1, #2
    79bc:	4811      	ldr	r0, [pc, #68]	; (7a04 <_sercom_set_handler+0x78>)
    79be:	4478      	add	r0, pc
    79c0:	50c8      	str	r0, [r1, r3]
			_sercom_instances[i] = NULL;
    79c2:	4b11      	ldr	r3, [pc, #68]	; (7a08 <_sercom_set_handler+0x7c>)
    79c4:	58d3      	ldr	r3, [r2, r3]
    79c6:	68f9      	ldr	r1, [r7, #12]
    79c8:	0089      	lsls	r1, r1, #2
    79ca:	2000      	movs	r0, #0
    79cc:	50c8      	str	r0, [r1, r3]
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    79ce:	68fb      	ldr	r3, [r7, #12]
    79d0:	3301      	adds	r3, #1
    79d2:	60fb      	str	r3, [r7, #12]
    79d4:	68fb      	ldr	r3, [r7, #12]
    79d6:	2b05      	cmp	r3, #5
    79d8:	d9ec      	bls.n	79b4 <_sercom_set_handler+0x28>
		}

		_handler_table_initialized = true;
    79da:	4b0c      	ldr	r3, [pc, #48]	; (7a0c <_sercom_set_handler+0x80>)
    79dc:	447b      	add	r3, pc
    79de:	2201      	movs	r2, #1
    79e0:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    79e2:	1dfb      	adds	r3, r7, #7
    79e4:	781a      	ldrb	r2, [r3, #0]
    79e6:	4b0a      	ldr	r3, [pc, #40]	; (7a10 <_sercom_set_handler+0x84>)
    79e8:	447b      	add	r3, pc
    79ea:	0092      	lsls	r2, r2, #2
    79ec:	6839      	ldr	r1, [r7, #0]
    79ee:	50d1      	str	r1, [r2, r3]
}
    79f0:	46c0      	nop			; (mov r8, r8)
    79f2:	46bd      	mov	sp, r7
    79f4:	b004      	add	sp, #16
    79f6:	bd80      	pop	{r7, pc}
    79f8:	00007a94 	.word	0x00007a94
    79fc:	1fff89da 	.word	0x1fff89da
    7a00:	1fff89c6 	.word	0x1fff89c6
    7a04:	ffffffb7 	.word	0xffffffb7
    7a08:	00000180 	.word	0x00000180
    7a0c:	1fff899e 	.word	0x1fff899e
    7a10:	1fff8994 	.word	0x1fff8994

00007a14 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    7a14:	b5b0      	push	{r4, r5, r7, lr}
    7a16:	b084      	sub	sp, #16
    7a18:	af00      	add	r7, sp, #0
    7a1a:	6078      	str	r0, [r7, #4]
    7a1c:	4c10      	ldr	r4, [pc, #64]	; (7a60 <_sercom_get_interrupt_vector+0x4c>)
    7a1e:	447c      	add	r4, pc
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    7a20:	2308      	movs	r3, #8
    7a22:	18fa      	adds	r2, r7, r3
    7a24:	4b0f      	ldr	r3, [pc, #60]	; (7a64 <_sercom_get_interrupt_vector+0x50>)
    7a26:	447b      	add	r3, pc
    7a28:	0010      	movs	r0, r2
    7a2a:	0019      	movs	r1, r3
    7a2c:	2306      	movs	r3, #6
    7a2e:	001a      	movs	r2, r3
    7a30:	4b0d      	ldr	r3, [pc, #52]	; (7a68 <_sercom_get_interrupt_vector+0x54>)
    7a32:	58e3      	ldr	r3, [r4, r3]
    7a34:	4798      	blx	r3
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    7a36:	230f      	movs	r3, #15
    7a38:	18fd      	adds	r5, r7, r3
    7a3a:	687b      	ldr	r3, [r7, #4]
    7a3c:	0018      	movs	r0, r3
    7a3e:	4b0b      	ldr	r3, [pc, #44]	; (7a6c <_sercom_get_interrupt_vector+0x58>)
    7a40:	58e3      	ldr	r3, [r4, r3]
    7a42:	4798      	blx	r3
    7a44:	0003      	movs	r3, r0
    7a46:	702b      	strb	r3, [r5, #0]

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    7a48:	230f      	movs	r3, #15
    7a4a:	18fb      	adds	r3, r7, r3
    7a4c:	781b      	ldrb	r3, [r3, #0]
    7a4e:	2208      	movs	r2, #8
    7a50:	18ba      	adds	r2, r7, r2
    7a52:	5cd3      	ldrb	r3, [r2, r3]
    7a54:	b25b      	sxtb	r3, r3
}
    7a56:	0018      	movs	r0, r3
    7a58:	46bd      	mov	sp, r7
    7a5a:	b004      	add	sp, #16
    7a5c:	bdb0      	pop	{r4, r5, r7, pc}
    7a5e:	46c0      	nop			; (mov r8, r8)
    7a60:	00007a12 	.word	0x00007a12
    7a64:	00007932 	.word	0x00007932
    7a68:	000000bc 	.word	0x000000bc
    7a6c:	000002d4 	.word	0x000002d4

00007a70 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    7a70:	b580      	push	{r7, lr}
    7a72:	af00      	add	r7, sp, #0
    7a74:	4b03      	ldr	r3, [pc, #12]	; (7a84 <SERCOM0_Handler+0x14>)
    7a76:	447b      	add	r3, pc
    7a78:	681b      	ldr	r3, [r3, #0]
    7a7a:	2000      	movs	r0, #0
    7a7c:	4798      	blx	r3
    7a7e:	46c0      	nop			; (mov r8, r8)
    7a80:	46bd      	mov	sp, r7
    7a82:	bd80      	pop	{r7, pc}
    7a84:	1fff8906 	.word	0x1fff8906

00007a88 <SERCOM1_Handler>:
    7a88:	b580      	push	{r7, lr}
    7a8a:	af00      	add	r7, sp, #0
    7a8c:	4b03      	ldr	r3, [pc, #12]	; (7a9c <SERCOM1_Handler+0x14>)
    7a8e:	447b      	add	r3, pc
    7a90:	685b      	ldr	r3, [r3, #4]
    7a92:	2001      	movs	r0, #1
    7a94:	4798      	blx	r3
    7a96:	46c0      	nop			; (mov r8, r8)
    7a98:	46bd      	mov	sp, r7
    7a9a:	bd80      	pop	{r7, pc}
    7a9c:	1fff88ee 	.word	0x1fff88ee

00007aa0 <SERCOM2_Handler>:
    7aa0:	b580      	push	{r7, lr}
    7aa2:	af00      	add	r7, sp, #0
    7aa4:	4b03      	ldr	r3, [pc, #12]	; (7ab4 <SERCOM2_Handler+0x14>)
    7aa6:	447b      	add	r3, pc
    7aa8:	689b      	ldr	r3, [r3, #8]
    7aaa:	2002      	movs	r0, #2
    7aac:	4798      	blx	r3
    7aae:	46c0      	nop			; (mov r8, r8)
    7ab0:	46bd      	mov	sp, r7
    7ab2:	bd80      	pop	{r7, pc}
    7ab4:	1fff88d6 	.word	0x1fff88d6

00007ab8 <SERCOM3_Handler>:
    7ab8:	b580      	push	{r7, lr}
    7aba:	af00      	add	r7, sp, #0
    7abc:	4b03      	ldr	r3, [pc, #12]	; (7acc <SERCOM3_Handler+0x14>)
    7abe:	447b      	add	r3, pc
    7ac0:	68db      	ldr	r3, [r3, #12]
    7ac2:	2003      	movs	r0, #3
    7ac4:	4798      	blx	r3
    7ac6:	46c0      	nop			; (mov r8, r8)
    7ac8:	46bd      	mov	sp, r7
    7aca:	bd80      	pop	{r7, pc}
    7acc:	1fff88be 	.word	0x1fff88be

00007ad0 <SERCOM4_Handler>:
    7ad0:	b580      	push	{r7, lr}
    7ad2:	af00      	add	r7, sp, #0
    7ad4:	4b03      	ldr	r3, [pc, #12]	; (7ae4 <SERCOM4_Handler+0x14>)
    7ad6:	447b      	add	r3, pc
    7ad8:	691b      	ldr	r3, [r3, #16]
    7ada:	2004      	movs	r0, #4
    7adc:	4798      	blx	r3
    7ade:	46c0      	nop			; (mov r8, r8)
    7ae0:	46bd      	mov	sp, r7
    7ae2:	bd80      	pop	{r7, pc}
    7ae4:	1fff88a6 	.word	0x1fff88a6

00007ae8 <SERCOM5_Handler>:
    7ae8:	b580      	push	{r7, lr}
    7aea:	af00      	add	r7, sp, #0
    7aec:	4b03      	ldr	r3, [pc, #12]	; (7afc <SERCOM5_Handler+0x14>)
    7aee:	447b      	add	r3, pc
    7af0:	695b      	ldr	r3, [r3, #20]
    7af2:	2005      	movs	r0, #5
    7af4:	4798      	blx	r3
    7af6:	46c0      	nop			; (mov r8, r8)
    7af8:	46bd      	mov	sp, r7
    7afa:	bd80      	pop	{r7, pc}
    7afc:	1fff888e 	.word	0x1fff888e

00007b00 <system_pinmux_get_config_defaults>:
{
    7b00:	b580      	push	{r7, lr}
    7b02:	b082      	sub	sp, #8
    7b04:	af00      	add	r7, sp, #0
    7b06:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    7b08:	687b      	ldr	r3, [r7, #4]
    7b0a:	2280      	movs	r2, #128	; 0x80
    7b0c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7b0e:	687b      	ldr	r3, [r7, #4]
    7b10:	2200      	movs	r2, #0
    7b12:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    7b14:	687b      	ldr	r3, [r7, #4]
    7b16:	2201      	movs	r2, #1
    7b18:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    7b1a:	687b      	ldr	r3, [r7, #4]
    7b1c:	2200      	movs	r2, #0
    7b1e:	70da      	strb	r2, [r3, #3]
}
    7b20:	46c0      	nop			; (mov r8, r8)
    7b22:	46bd      	mov	sp, r7
    7b24:	b002      	add	sp, #8
    7b26:	bd80      	pop	{r7, pc}

00007b28 <system_gclk_chan_get_config_defaults>:
{
    7b28:	b580      	push	{r7, lr}
    7b2a:	b082      	sub	sp, #8
    7b2c:	af00      	add	r7, sp, #0
    7b2e:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    7b30:	687b      	ldr	r3, [r7, #4]
    7b32:	2200      	movs	r2, #0
    7b34:	701a      	strb	r2, [r3, #0]
}
    7b36:	46c0      	nop			; (mov r8, r8)
    7b38:	46bd      	mov	sp, r7
    7b3a:	b002      	add	sp, #8
    7b3c:	bd80      	pop	{r7, pc}
	...

00007b40 <system_apb_clock_set_mask>:
{
    7b40:	b580      	push	{r7, lr}
    7b42:	b082      	sub	sp, #8
    7b44:	af00      	add	r7, sp, #0
    7b46:	0002      	movs	r2, r0
    7b48:	6039      	str	r1, [r7, #0]
    7b4a:	1dfb      	adds	r3, r7, #7
    7b4c:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    7b4e:	1dfb      	adds	r3, r7, #7
    7b50:	781b      	ldrb	r3, [r3, #0]
    7b52:	2b01      	cmp	r3, #1
    7b54:	d00a      	beq.n	7b6c <system_apb_clock_set_mask+0x2c>
    7b56:	2b02      	cmp	r3, #2
    7b58:	d00f      	beq.n	7b7a <system_apb_clock_set_mask+0x3a>
    7b5a:	2b00      	cmp	r3, #0
    7b5c:	d114      	bne.n	7b88 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    7b5e:	4b0e      	ldr	r3, [pc, #56]	; (7b98 <system_apb_clock_set_mask+0x58>)
    7b60:	4a0d      	ldr	r2, [pc, #52]	; (7b98 <system_apb_clock_set_mask+0x58>)
    7b62:	6991      	ldr	r1, [r2, #24]
    7b64:	683a      	ldr	r2, [r7, #0]
    7b66:	430a      	orrs	r2, r1
    7b68:	619a      	str	r2, [r3, #24]
			break;
    7b6a:	e00f      	b.n	7b8c <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    7b6c:	4b0a      	ldr	r3, [pc, #40]	; (7b98 <system_apb_clock_set_mask+0x58>)
    7b6e:	4a0a      	ldr	r2, [pc, #40]	; (7b98 <system_apb_clock_set_mask+0x58>)
    7b70:	69d1      	ldr	r1, [r2, #28]
    7b72:	683a      	ldr	r2, [r7, #0]
    7b74:	430a      	orrs	r2, r1
    7b76:	61da      	str	r2, [r3, #28]
			break;
    7b78:	e008      	b.n	7b8c <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    7b7a:	4b07      	ldr	r3, [pc, #28]	; (7b98 <system_apb_clock_set_mask+0x58>)
    7b7c:	4a06      	ldr	r2, [pc, #24]	; (7b98 <system_apb_clock_set_mask+0x58>)
    7b7e:	6a11      	ldr	r1, [r2, #32]
    7b80:	683a      	ldr	r2, [r7, #0]
    7b82:	430a      	orrs	r2, r1
    7b84:	621a      	str	r2, [r3, #32]
			break;
    7b86:	e001      	b.n	7b8c <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    7b88:	2317      	movs	r3, #23
    7b8a:	e000      	b.n	7b8e <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    7b8c:	2300      	movs	r3, #0
}
    7b8e:	0018      	movs	r0, r3
    7b90:	46bd      	mov	sp, r7
    7b92:	b002      	add	sp, #8
    7b94:	bd80      	pop	{r7, pc}
    7b96:	46c0      	nop			; (mov r8, r8)
    7b98:	40000400 	.word	0x40000400

00007b9c <system_is_debugger_present>:
 * \retval true  Debugger is connected to the system
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
    7b9c:	b580      	push	{r7, lr}
    7b9e:	af00      	add	r7, sp, #0
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    7ba0:	4b05      	ldr	r3, [pc, #20]	; (7bb8 <system_is_debugger_present+0x1c>)
    7ba2:	789b      	ldrb	r3, [r3, #2]
    7ba4:	b2db      	uxtb	r3, r3
    7ba6:	001a      	movs	r2, r3
    7ba8:	2302      	movs	r3, #2
    7baa:	4013      	ands	r3, r2
    7bac:	1e5a      	subs	r2, r3, #1
    7bae:	4193      	sbcs	r3, r2
    7bb0:	b2db      	uxtb	r3, r3
}
    7bb2:	0018      	movs	r0, r3
    7bb4:	46bd      	mov	sp, r7
    7bb6:	bd80      	pop	{r7, pc}
    7bb8:	41002000 	.word	0x41002000

00007bbc <spi_is_write_complete>:
 *                has been drawn high for SPI slave
 * \retval false  If the SPI master module has not shifted out data
 */
static inline bool spi_is_write_complete(
		struct spi_module *const module)
{
    7bbc:	b580      	push	{r7, lr}
    7bbe:	b084      	sub	sp, #16
    7bc0:	af00      	add	r7, sp, #0
    7bc2:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7bc4:	687b      	ldr	r3, [r7, #4]
    7bc6:	681b      	ldr	r3, [r3, #0]
    7bc8:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    7bca:	68fb      	ldr	r3, [r7, #12]
    7bcc:	7e1b      	ldrb	r3, [r3, #24]
    7bce:	b2db      	uxtb	r3, r3
    7bd0:	001a      	movs	r2, r3
    7bd2:	2302      	movs	r3, #2
    7bd4:	4013      	ands	r3, r2
    7bd6:	1e5a      	subs	r2, r3, #1
    7bd8:	4193      	sbcs	r3, r2
    7bda:	b2db      	uxtb	r3, r3
}
    7bdc:	0018      	movs	r0, r3
    7bde:	46bd      	mov	sp, r7
    7be0:	b004      	add	sp, #16
    7be2:	bd80      	pop	{r7, pc}

00007be4 <spi_is_ready_to_write>:
 * \retval true   If the SPI module is ready to write data
 * \retval false  If the SPI module is not ready to write data
 */
static inline bool spi_is_ready_to_write(
		struct spi_module *const module)
{
    7be4:	b580      	push	{r7, lr}
    7be6:	b084      	sub	sp, #16
    7be8:	af00      	add	r7, sp, #0
    7bea:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7bec:	687b      	ldr	r3, [r7, #4]
    7bee:	681b      	ldr	r3, [r3, #0]
    7bf0:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    7bf2:	68fb      	ldr	r3, [r7, #12]
    7bf4:	7e1b      	ldrb	r3, [r3, #24]
    7bf6:	b2db      	uxtb	r3, r3
    7bf8:	001a      	movs	r2, r3
    7bfa:	2301      	movs	r3, #1
    7bfc:	4013      	ands	r3, r2
    7bfe:	1e5a      	subs	r2, r3, #1
    7c00:	4193      	sbcs	r3, r2
    7c02:	b2db      	uxtb	r3, r3
}
    7c04:	0018      	movs	r0, r3
    7c06:	46bd      	mov	sp, r7
    7c08:	b004      	add	sp, #16
    7c0a:	bd80      	pop	{r7, pc}

00007c0c <spi_is_ready_to_read>:
 * \retval true   If the SPI module is ready to read data
 * \retval false  If the SPI module is not ready to read data
 */
static inline bool spi_is_ready_to_read(
		struct spi_module *const module)
{
    7c0c:	b580      	push	{r7, lr}
    7c0e:	b084      	sub	sp, #16
    7c10:	af00      	add	r7, sp, #0
    7c12:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7c14:	687b      	ldr	r3, [r7, #4]
    7c16:	681b      	ldr	r3, [r3, #0]
    7c18:	60fb      	str	r3, [r7, #12]

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    7c1a:	68fb      	ldr	r3, [r7, #12]
    7c1c:	7e1b      	ldrb	r3, [r3, #24]
    7c1e:	b2db      	uxtb	r3, r3
    7c20:	001a      	movs	r2, r3
    7c22:	2304      	movs	r3, #4
    7c24:	4013      	ands	r3, r2
    7c26:	1e5a      	subs	r2, r3, #1
    7c28:	4193      	sbcs	r3, r2
    7c2a:	b2db      	uxtb	r3, r3
}
    7c2c:	0018      	movs	r0, r3
    7c2e:	46bd      	mov	sp, r7
    7c30:	b004      	add	sp, #16
    7c32:	bd80      	pop	{r7, pc}

00007c34 <spi_write>:
 * \retval STATUS_BUSY  If the last write was not completed
 */
static inline enum status_code spi_write(
		struct spi_module *module,
		uint16_t tx_data)
{
    7c34:	b580      	push	{r7, lr}
    7c36:	b084      	sub	sp, #16
    7c38:	af00      	add	r7, sp, #0
    7c3a:	6078      	str	r0, [r7, #4]
    7c3c:	000a      	movs	r2, r1
    7c3e:	1cbb      	adds	r3, r7, #2
    7c40:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7c42:	687b      	ldr	r3, [r7, #4]
    7c44:	681b      	ldr	r3, [r3, #0]
    7c46:	60fb      	str	r3, [r7, #12]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    7c48:	687b      	ldr	r3, [r7, #4]
    7c4a:	0018      	movs	r0, r3
    7c4c:	4b0b      	ldr	r3, [pc, #44]	; (7c7c <spi_write+0x48>)
    7c4e:	447b      	add	r3, pc
    7c50:	4798      	blx	r3
    7c52:	0003      	movs	r3, r0
    7c54:	001a      	movs	r2, r3
    7c56:	2301      	movs	r3, #1
    7c58:	4053      	eors	r3, r2
    7c5a:	b2db      	uxtb	r3, r3
    7c5c:	2b00      	cmp	r3, #0
    7c5e:	d001      	beq.n	7c64 <spi_write+0x30>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
    7c60:	2305      	movs	r3, #5
    7c62:	e006      	b.n	7c72 <spi_write+0x3e>
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    7c64:	1cbb      	adds	r3, r7, #2
    7c66:	881b      	ldrh	r3, [r3, #0]
    7c68:	05db      	lsls	r3, r3, #23
    7c6a:	0dda      	lsrs	r2, r3, #23
    7c6c:	68fb      	ldr	r3, [r7, #12]
    7c6e:	629a      	str	r2, [r3, #40]	; 0x28

	return STATUS_OK;
    7c70:	2300      	movs	r3, #0
}
    7c72:	0018      	movs	r0, r3
    7c74:	46bd      	mov	sp, r7
    7c76:	b004      	add	sp, #16
    7c78:	bd80      	pop	{r7, pc}
    7c7a:	46c0      	nop			; (mov r8, r8)
    7c7c:	ffffff93 	.word	0xffffff93

00007c80 <spi_read>:
 * \retval STATUS_ERR_OVERFLOW  If the data is overflown
 */
static inline enum status_code spi_read(
		struct spi_module *const module,
		uint16_t *rx_data)
{
    7c80:	b580      	push	{r7, lr}
    7c82:	b084      	sub	sp, #16
    7c84:	af00      	add	r7, sp, #0
    7c86:	6078      	str	r0, [r7, #4]
    7c88:	6039      	str	r1, [r7, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7c8a:	687b      	ldr	r3, [r7, #4]
    7c8c:	681b      	ldr	r3, [r3, #0]
    7c8e:	60bb      	str	r3, [r7, #8]

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    7c90:	687b      	ldr	r3, [r7, #4]
    7c92:	0018      	movs	r0, r3
    7c94:	4b1b      	ldr	r3, [pc, #108]	; (7d04 <spi_read+0x84>)
    7c96:	447b      	add	r3, pc
    7c98:	4798      	blx	r3
    7c9a:	0003      	movs	r3, r0
    7c9c:	001a      	movs	r2, r3
    7c9e:	2301      	movs	r3, #1
    7ca0:	4053      	eors	r3, r2
    7ca2:	b2db      	uxtb	r3, r3
    7ca4:	2b00      	cmp	r3, #0
    7ca6:	d001      	beq.n	7cac <spi_read+0x2c>
		/* No data has been received, return */
		return STATUS_ERR_IO;
    7ca8:	2310      	movs	r3, #16
    7caa:	e027      	b.n	7cfc <spi_read+0x7c>
	}

	/* Return value */
	enum status_code retval = STATUS_OK;
    7cac:	230f      	movs	r3, #15
    7cae:	18fb      	adds	r3, r7, r3
    7cb0:	2200      	movs	r2, #0
    7cb2:	701a      	strb	r2, [r3, #0]

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    7cb4:	68bb      	ldr	r3, [r7, #8]
    7cb6:	8b5b      	ldrh	r3, [r3, #26]
    7cb8:	b29b      	uxth	r3, r3
    7cba:	001a      	movs	r2, r3
    7cbc:	2304      	movs	r3, #4
    7cbe:	4013      	ands	r3, r2
    7cc0:	d006      	beq.n	7cd0 <spi_read+0x50>
		retval = STATUS_ERR_OVERFLOW;
    7cc2:	230f      	movs	r3, #15
    7cc4:	18fb      	adds	r3, r7, r3
    7cc6:	221e      	movs	r2, #30
    7cc8:	701a      	strb	r2, [r3, #0]
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    7cca:	68bb      	ldr	r3, [r7, #8]
    7ccc:	2204      	movs	r2, #4
    7cce:	835a      	strh	r2, [r3, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    7cd0:	687b      	ldr	r3, [r7, #4]
    7cd2:	799b      	ldrb	r3, [r3, #6]
    7cd4:	2b01      	cmp	r3, #1
    7cd6:	d108      	bne.n	7cea <spi_read+0x6a>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    7cd8:	68bb      	ldr	r3, [r7, #8]
    7cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cdc:	b29b      	uxth	r3, r3
    7cde:	05db      	lsls	r3, r3, #23
    7ce0:	0ddb      	lsrs	r3, r3, #23
    7ce2:	b29a      	uxth	r2, r3
    7ce4:	683b      	ldr	r3, [r7, #0]
    7ce6:	801a      	strh	r2, [r3, #0]
    7ce8:	e005      	b.n	7cf6 <spi_read+0x76>
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    7cea:	68bb      	ldr	r3, [r7, #8]
    7cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7cee:	b2db      	uxtb	r3, r3
    7cf0:	b29a      	uxth	r2, r3
    7cf2:	683b      	ldr	r3, [r7, #0]
    7cf4:	801a      	strh	r2, [r3, #0]
	}

	return retval;
    7cf6:	230f      	movs	r3, #15
    7cf8:	18fb      	adds	r3, r7, r3
    7cfa:	781b      	ldrb	r3, [r3, #0]
}
    7cfc:	0018      	movs	r0, r3
    7cfe:	46bd      	mov	sp, r7
    7d00:	b004      	add	sp, #16
    7d02:	bd80      	pop	{r7, pc}
    7d04:	ffffff73 	.word	0xffffff73

00007d08 <_spi_set_config>:
 * \retval STATUS_OK               If the configuration was written
 */
static enum status_code _spi_set_config(
		struct spi_module *const module,
		const struct spi_config *const config)
{
    7d08:	b5b0      	push	{r4, r5, r7, lr}
    7d0a:	b092      	sub	sp, #72	; 0x48
    7d0c:	af00      	add	r7, sp, #0
    7d0e:	6078      	str	r0, [r7, #4]
    7d10:	6039      	str	r1, [r7, #0]
    7d12:	4c7f      	ldr	r4, [pc, #508]	; (7f10 <_spi_set_config+0x208>)
    7d14:	447c      	add	r4, pc
	/* Sanity check arguments */
	Assert(module);
	Assert(config);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    7d16:	687b      	ldr	r3, [r7, #4]
    7d18:	681b      	ldr	r3, [r3, #0]
    7d1a:	637b      	str	r3, [r7, #52]	; 0x34
	Sercom *const hw = module->hw;
    7d1c:	687b      	ldr	r3, [r7, #4]
    7d1e:	681b      	ldr	r3, [r3, #0]
    7d20:	633b      	str	r3, [r7, #48]	; 0x30

	struct system_pinmux_config pin_conf;
	system_pinmux_get_config_defaults(&pin_conf);
    7d22:	231c      	movs	r3, #28
    7d24:	18fb      	adds	r3, r7, r3
    7d26:	0018      	movs	r0, r3
    7d28:	4b7a      	ldr	r3, [pc, #488]	; (7f14 <_spi_set_config+0x20c>)
    7d2a:	447b      	add	r3, pc
    7d2c:	4798      	blx	r3
	pin_conf.direction = SYSTEM_PINMUX_PIN_DIR_INPUT;
    7d2e:	231c      	movs	r3, #28
    7d30:	18fb      	adds	r3, r7, r3
    7d32:	2200      	movs	r2, #0
    7d34:	705a      	strb	r2, [r3, #1]
	if(config->mode == SPI_MODE_SLAVE) {
    7d36:	683b      	ldr	r3, [r7, #0]
    7d38:	781b      	ldrb	r3, [r3, #0]
    7d3a:	2b00      	cmp	r3, #0
    7d3c:	d103      	bne.n	7d46 <_spi_set_config+0x3e>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    7d3e:	231c      	movs	r3, #28
    7d40:	18fb      	adds	r3, r7, r3
    7d42:	2200      	movs	r2, #0
    7d44:	709a      	strb	r2, [r3, #2]
	}

	uint32_t pad_pinmuxes[] = {
			config->pinmux_pad0, config->pinmux_pad1,
    7d46:	683b      	ldr	r3, [r7, #0]
    7d48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	uint32_t pad_pinmuxes[] = {
    7d4a:	230c      	movs	r3, #12
    7d4c:	18fb      	adds	r3, r7, r3
    7d4e:	601a      	str	r2, [r3, #0]
			config->pinmux_pad0, config->pinmux_pad1,
    7d50:	683b      	ldr	r3, [r7, #0]
    7d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
	uint32_t pad_pinmuxes[] = {
    7d54:	230c      	movs	r3, #12
    7d56:	18fb      	adds	r3, r7, r3
    7d58:	605a      	str	r2, [r3, #4]
			config->pinmux_pad2, config->pinmux_pad3
    7d5a:	683b      	ldr	r3, [r7, #0]
    7d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	uint32_t pad_pinmuxes[] = {
    7d5e:	230c      	movs	r3, #12
    7d60:	18fb      	adds	r3, r7, r3
    7d62:	609a      	str	r2, [r3, #8]
			config->pinmux_pad2, config->pinmux_pad3
    7d64:	683b      	ldr	r3, [r7, #0]
    7d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	uint32_t pad_pinmuxes[] = {
    7d68:	230c      	movs	r3, #12
    7d6a:	18fb      	adds	r3, r7, r3
    7d6c:	60da      	str	r2, [r3, #12]
		};

	/* Configure the SERCOM pins according to the user configuration */
	for (uint8_t pad = 0; pad < 4; pad++) {
    7d6e:	2347      	movs	r3, #71	; 0x47
    7d70:	18fb      	adds	r3, r7, r3
    7d72:	2200      	movs	r2, #0
    7d74:	701a      	strb	r2, [r3, #0]
    7d76:	e02e      	b.n	7dd6 <_spi_set_config+0xce>
		uint32_t current_pinmux = pad_pinmuxes[pad];
    7d78:	2347      	movs	r3, #71	; 0x47
    7d7a:	18fb      	adds	r3, r7, r3
    7d7c:	781a      	ldrb	r2, [r3, #0]
    7d7e:	230c      	movs	r3, #12
    7d80:	18fb      	adds	r3, r7, r3
    7d82:	0092      	lsls	r2, r2, #2
    7d84:	58d3      	ldr	r3, [r2, r3]
    7d86:	643b      	str	r3, [r7, #64]	; 0x40

		if (current_pinmux == PINMUX_DEFAULT) {
    7d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7d8a:	2b00      	cmp	r3, #0
    7d8c:	d10a      	bne.n	7da4 <_spi_set_config+0x9c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    7d8e:	2347      	movs	r3, #71	; 0x47
    7d90:	18fb      	adds	r3, r7, r3
    7d92:	781a      	ldrb	r2, [r3, #0]
    7d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    7d96:	0011      	movs	r1, r2
    7d98:	0018      	movs	r0, r3
    7d9a:	4b5f      	ldr	r3, [pc, #380]	; (7f18 <_spi_set_config+0x210>)
    7d9c:	58e3      	ldr	r3, [r4, r3]
    7d9e:	4798      	blx	r3
    7da0:	0003      	movs	r3, r0
    7da2:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if (current_pinmux != PINMUX_UNUSED) {
    7da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7da6:	3301      	adds	r3, #1
    7da8:	d00e      	beq.n	7dc8 <_spi_set_config+0xc0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    7daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7dac:	b2da      	uxtb	r2, r3
    7dae:	231c      	movs	r3, #28
    7db0:	18fb      	adds	r3, r7, r3
    7db2:	701a      	strb	r2, [r3, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    7db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7db6:	0c1b      	lsrs	r3, r3, #16
    7db8:	b2db      	uxtb	r3, r3
    7dba:	221c      	movs	r2, #28
    7dbc:	18ba      	adds	r2, r7, r2
    7dbe:	0011      	movs	r1, r2
    7dc0:	0018      	movs	r0, r3
    7dc2:	4b56      	ldr	r3, [pc, #344]	; (7f1c <_spi_set_config+0x214>)
    7dc4:	58e3      	ldr	r3, [r4, r3]
    7dc6:	4798      	blx	r3
	for (uint8_t pad = 0; pad < 4; pad++) {
    7dc8:	2347      	movs	r3, #71	; 0x47
    7dca:	18fb      	adds	r3, r7, r3
    7dcc:	781a      	ldrb	r2, [r3, #0]
    7dce:	2347      	movs	r3, #71	; 0x47
    7dd0:	18fb      	adds	r3, r7, r3
    7dd2:	3201      	adds	r2, #1
    7dd4:	701a      	strb	r2, [r3, #0]
    7dd6:	2347      	movs	r3, #71	; 0x47
    7dd8:	18fb      	adds	r3, r7, r3
    7dda:	781b      	ldrb	r3, [r3, #0]
    7ddc:	2b03      	cmp	r3, #3
    7dde:	d9cb      	bls.n	7d78 <_spi_set_config+0x70>
		}
	}

	module->mode             = config->mode;
    7de0:	683b      	ldr	r3, [r7, #0]
    7de2:	781a      	ldrb	r2, [r3, #0]
    7de4:	687b      	ldr	r3, [r7, #4]
    7de6:	715a      	strb	r2, [r3, #5]
	module->character_size   = config->character_size;
    7de8:	683b      	ldr	r3, [r7, #0]
    7dea:	7c1a      	ldrb	r2, [r3, #16]
    7dec:	687b      	ldr	r3, [r7, #4]
    7dee:	719a      	strb	r2, [r3, #6]
	module->receiver_enabled = config->receiver_enable;
    7df0:	683b      	ldr	r3, [r7, #0]
    7df2:	7c9a      	ldrb	r2, [r3, #18]
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	71da      	strb	r2, [r3, #7]
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	module->master_slave_select_enable = config->master_slave_select_enable;
    7df8:	683b      	ldr	r3, [r7, #0]
    7dfa:	7d1a      	ldrb	r2, [r3, #20]
    7dfc:	687b      	ldr	r3, [r7, #4]
    7dfe:	721a      	strb	r2, [r3, #8]
#  endif

#  if CONF_SPI_MASTER_ENABLE == true
	/* Value to write to BAUD register */
	uint16_t baud = 0;
    7e00:	230a      	movs	r3, #10
    7e02:	18fb      	adds	r3, r7, r3
    7e04:	2200      	movs	r2, #0
    7e06:	801a      	strh	r2, [r3, #0]
#  endif
	/* Value to write to CTRLA register */
	uint32_t ctrla = 0;
    7e08:	2300      	movs	r3, #0
    7e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Value to write to CTRLB register */
	uint32_t ctrlb = 0;
    7e0c:	2300      	movs	r3, #0
    7e0e:	63bb      	str	r3, [r7, #56]	; 0x38

# if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
    7e10:	683b      	ldr	r3, [r7, #0]
    7e12:	781b      	ldrb	r3, [r3, #0]
    7e14:	2b01      	cmp	r3, #1
    7e16:	d12c      	bne.n	7e72 <_spi_set_config+0x16a>
		/* Find frequency of the internal SERCOMi_GCLK_ID_CORE */
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7e18:	687b      	ldr	r3, [r7, #4]
    7e1a:	681b      	ldr	r3, [r3, #0]
    7e1c:	0018      	movs	r0, r3
    7e1e:	4b40      	ldr	r3, [pc, #256]	; (7f20 <_spi_set_config+0x218>)
    7e20:	58e3      	ldr	r3, [r4, r3]
    7e22:	4798      	blx	r3
    7e24:	0003      	movs	r3, r0
    7e26:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7e2a:	3314      	adds	r3, #20
    7e2c:	62bb      	str	r3, [r7, #40]	; 0x28
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    7e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7e30:	b2db      	uxtb	r3, r3
    7e32:	0018      	movs	r0, r3
    7e34:	4b3b      	ldr	r3, [pc, #236]	; (7f24 <_spi_set_config+0x21c>)
    7e36:	58e3      	ldr	r3, [r4, r3]
    7e38:	4798      	blx	r3
    7e3a:	0003      	movs	r3, r0
    7e3c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Get baud value, based on baudrate and the internal clock frequency */
		enum status_code error_code = _sercom_get_sync_baud_val(
    7e3e:	683b      	ldr	r3, [r7, #0]
    7e40:	699b      	ldr	r3, [r3, #24]
    7e42:	2223      	movs	r2, #35	; 0x23
    7e44:	18bd      	adds	r5, r7, r2
    7e46:	220a      	movs	r2, #10
    7e48:	18ba      	adds	r2, r7, r2
    7e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    7e4c:	0018      	movs	r0, r3
    7e4e:	4b36      	ldr	r3, [pc, #216]	; (7f28 <_spi_set_config+0x220>)
    7e50:	58e3      	ldr	r3, [r4, r3]
    7e52:	4798      	blx	r3
    7e54:	0003      	movs	r3, r0
    7e56:	702b      	strb	r3, [r5, #0]
				config->mode_specific.master.baudrate,
				internal_clock, &baud);

		if (error_code != STATUS_OK) {
    7e58:	2323      	movs	r3, #35	; 0x23
    7e5a:	18fb      	adds	r3, r7, r3
    7e5c:	781b      	ldrb	r3, [r3, #0]
    7e5e:	2b00      	cmp	r3, #0
    7e60:	d001      	beq.n	7e66 <_spi_set_config+0x15e>
			/* Baud rate calculation error, return status code */
			return STATUS_ERR_INVALID_ARG;
    7e62:	2317      	movs	r3, #23
    7e64:	e04f      	b.n	7f06 <_spi_set_config+0x1fe>
		}

		spi_module->BAUD.reg = (uint8_t)baud;
    7e66:	230a      	movs	r3, #10
    7e68:	18fb      	adds	r3, r7, r3
    7e6a:	881b      	ldrh	r3, [r3, #0]
    7e6c:	b2da      	uxtb	r2, r3
    7e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7e70:	731a      	strb	r2, [r3, #12]
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
		}
	}
# endif
	/* Set data order */
	ctrla |= config->data_order;
    7e72:	683b      	ldr	r3, [r7, #0]
    7e74:	685b      	ldr	r3, [r3, #4]
    7e76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7e78:	4313      	orrs	r3, r2
    7e7a:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set clock polarity and clock phase */
	ctrla |= config->transfer_mode;
    7e7c:	683b      	ldr	r3, [r7, #0]
    7e7e:	689b      	ldr	r3, [r3, #8]
    7e80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7e82:	4313      	orrs	r3, r2
    7e84:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set MUX setting */
	ctrla |= config->mux_setting;
    7e86:	683b      	ldr	r3, [r7, #0]
    7e88:	68db      	ldr	r3, [r3, #12]
    7e8a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    7e8c:	4313      	orrs	r3, r2
    7e8e:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Set SPI character size */
	ctrlb |= config->character_size;
    7e90:	683b      	ldr	r3, [r7, #0]
    7e92:	7c1b      	ldrb	r3, [r3, #16]
    7e94:	001a      	movs	r2, r3
    7e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7e98:	4313      	orrs	r3, r2
    7e9a:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Set whether module should run in standby. */
	if (config->run_in_standby || system_is_debugger_present()) {
    7e9c:	683b      	ldr	r3, [r7, #0]
    7e9e:	7c5b      	ldrb	r3, [r3, #17]
    7ea0:	2b00      	cmp	r3, #0
    7ea2:	d104      	bne.n	7eae <_spi_set_config+0x1a6>
    7ea4:	4b21      	ldr	r3, [pc, #132]	; (7f2c <_spi_set_config+0x224>)
    7ea6:	447b      	add	r3, pc
    7ea8:	4798      	blx	r3
    7eaa:	1e03      	subs	r3, r0, #0
    7eac:	d003      	beq.n	7eb6 <_spi_set_config+0x1ae>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    7eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7eb0:	2280      	movs	r2, #128	; 0x80
    7eb2:	4313      	orrs	r3, r2
    7eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	if (config->receiver_enable) {
    7eb6:	683b      	ldr	r3, [r7, #0]
    7eb8:	7c9b      	ldrb	r3, [r3, #18]
    7eba:	2b00      	cmp	r3, #0
    7ebc:	d004      	beq.n	7ec8 <_spi_set_config+0x1c0>
		/* Enable receiver */
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    7ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7ec0:	2280      	movs	r2, #128	; 0x80
    7ec2:	0292      	lsls	r2, r2, #10
    7ec4:	4313      	orrs	r3, r2
    7ec6:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  ifdef FEATURE_SPI_SLAVE_SELECT_LOW_DETECT
	if (config->select_slave_low_detect_enable) {
    7ec8:	683b      	ldr	r3, [r7, #0]
    7eca:	7cdb      	ldrb	r3, [r3, #19]
    7ecc:	2b00      	cmp	r3, #0
    7ece:	d004      	beq.n	7eda <_spi_set_config+0x1d2>
		/* Enable Slave Select Low Detect */
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    7ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7ed2:	2280      	movs	r2, #128	; 0x80
    7ed4:	0092      	lsls	r2, r2, #2
    7ed6:	4313      	orrs	r3, r2
    7ed8:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
#  ifdef FEATURE_SPI_HARDWARE_SLAVE_SELECT
	if (config->master_slave_select_enable) {
    7eda:	683b      	ldr	r3, [r7, #0]
    7edc:	7d1b      	ldrb	r3, [r3, #20]
    7ede:	2b00      	cmp	r3, #0
    7ee0:	d004      	beq.n	7eec <_spi_set_config+0x1e4>
		/* Enable Master Slave Select */
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    7ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7ee4:	2280      	movs	r2, #128	; 0x80
    7ee6:	0192      	lsls	r2, r2, #6
    7ee8:	4313      	orrs	r3, r2
    7eea:	63bb      	str	r3, [r7, #56]	; 0x38
	}
#  endif
	/* Write CTRLA register */
	spi_module->CTRLA.reg |= ctrla;
    7eec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7eee:	681a      	ldr	r2, [r3, #0]
    7ef0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7ef2:	431a      	orrs	r2, r3
    7ef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7ef6:	601a      	str	r2, [r3, #0]

	/* Write CTRLB register */
	spi_module->CTRLB.reg |= ctrlb;
    7ef8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7efa:	685a      	ldr	r2, [r3, #4]
    7efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7efe:	431a      	orrs	r2, r3
    7f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    7f02:	605a      	str	r2, [r3, #4]

	return STATUS_OK;
    7f04:	2300      	movs	r3, #0
}
    7f06:	0018      	movs	r0, r3
    7f08:	46bd      	mov	sp, r7
    7f0a:	b012      	add	sp, #72	; 0x48
    7f0c:	bdb0      	pop	{r4, r5, r7, pc}
    7f0e:	46c0      	nop			; (mov r8, r8)
    7f10:	0000771c 	.word	0x0000771c
    7f14:	fffffdd3 	.word	0xfffffdd3
    7f18:	000002f4 	.word	0x000002f4
    7f1c:	000002dc 	.word	0x000002dc
    7f20:	000002d4 	.word	0x000002d4
    7f24:	000001c4 	.word	0x000001c4
    7f28:	0000012c 	.word	0x0000012c
    7f2c:	fffffcf3 	.word	0xfffffcf3

00007f30 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    7f30:	b5b0      	push	{r4, r5, r7, lr}
    7f32:	b08a      	sub	sp, #40	; 0x28
    7f34:	af00      	add	r7, sp, #0
    7f36:	60f8      	str	r0, [r7, #12]
    7f38:	60b9      	str	r1, [r7, #8]
    7f3a:	607a      	str	r2, [r7, #4]
    7f3c:	4c5d      	ldr	r4, [pc, #372]	; (80b4 <spi_init+0x184>)
    7f3e:	447c      	add	r4, pc
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    7f40:	68fb      	ldr	r3, [r7, #12]
    7f42:	68ba      	ldr	r2, [r7, #8]
    7f44:	601a      	str	r2, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);
    7f46:	68fb      	ldr	r3, [r7, #12]
    7f48:	681b      	ldr	r3, [r3, #0]
    7f4a:	623b      	str	r3, [r7, #32]

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    7f4c:	6a3b      	ldr	r3, [r7, #32]
    7f4e:	681b      	ldr	r3, [r3, #0]
    7f50:	2202      	movs	r2, #2
    7f52:	4013      	ands	r3, r2
    7f54:	d001      	beq.n	7f5a <spi_init+0x2a>
#  if SPI_CALLBACK_MODE == false
		/* Check if config is valid */
		return _spi_check_config(module, config);
#  else
		return STATUS_ERR_DENIED;
    7f56:	231c      	movs	r3, #28
    7f58:	e0a8      	b.n	80ac <spi_init+0x17c>
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    7f5a:	6a3b      	ldr	r3, [r7, #32]
    7f5c:	681b      	ldr	r3, [r3, #0]
    7f5e:	2201      	movs	r2, #1
    7f60:	4013      	ands	r3, r2
    7f62:	d001      	beq.n	7f68 <spi_init+0x38>
		return STATUS_BUSY;
    7f64:	2305      	movs	r3, #5
    7f66:	e0a1      	b.n	80ac <spi_init+0x17c>
	}

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    7f68:	68fb      	ldr	r3, [r7, #12]
    7f6a:	681b      	ldr	r3, [r3, #0]
    7f6c:	0018      	movs	r0, r3
    7f6e:	4b52      	ldr	r3, [pc, #328]	; (80b8 <spi_init+0x188>)
    7f70:	58e3      	ldr	r3, [r4, r3]
    7f72:	4798      	blx	r3
    7f74:	0003      	movs	r3, r0
    7f76:	61fb      	str	r3, [r7, #28]
	}
#elif (SAMC20) || (SAML22)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
    7f78:	69fb      	ldr	r3, [r7, #28]
    7f7a:	3302      	adds	r3, #2
    7f7c:	61bb      	str	r3, [r7, #24]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    7f7e:	69fb      	ldr	r3, [r7, #28]
    7f80:	3314      	adds	r3, #20
    7f82:	617b      	str	r3, [r7, #20]
#  endif
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
	}
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    7f84:	2201      	movs	r2, #1
    7f86:	69bb      	ldr	r3, [r7, #24]
    7f88:	409a      	lsls	r2, r3
    7f8a:	0013      	movs	r3, r2
    7f8c:	0019      	movs	r1, r3
    7f8e:	2002      	movs	r0, #2
    7f90:	4b4a      	ldr	r3, [pc, #296]	; (80bc <spi_init+0x18c>)
    7f92:	447b      	add	r3, pc
    7f94:	4798      	blx	r3
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
    7f96:	2310      	movs	r3, #16
    7f98:	18fb      	adds	r3, r7, r3
    7f9a:	0018      	movs	r0, r3
    7f9c:	4b48      	ldr	r3, [pc, #288]	; (80c0 <spi_init+0x190>)
    7f9e:	447b      	add	r3, pc
    7fa0:	4798      	blx	r3
	gclk_chan_conf.source_generator = config->generator_source;
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	2224      	movs	r2, #36	; 0x24
    7fa6:	5c9a      	ldrb	r2, [r3, r2]
    7fa8:	2310      	movs	r3, #16
    7faa:	18fb      	adds	r3, r7, r3
    7fac:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    7fae:	697b      	ldr	r3, [r7, #20]
    7fb0:	b2db      	uxtb	r3, r3
    7fb2:	2210      	movs	r2, #16
    7fb4:	18ba      	adds	r2, r7, r2
    7fb6:	0011      	movs	r1, r2
    7fb8:	0018      	movs	r0, r3
    7fba:	4b42      	ldr	r3, [pc, #264]	; (80c4 <spi_init+0x194>)
    7fbc:	58e3      	ldr	r3, [r4, r3]
    7fbe:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    7fc0:	697b      	ldr	r3, [r7, #20]
    7fc2:	b2db      	uxtb	r3, r3
    7fc4:	0018      	movs	r0, r3
    7fc6:	4b40      	ldr	r3, [pc, #256]	; (80c8 <spi_init+0x198>)
    7fc8:	58e3      	ldr	r3, [r4, r3]
    7fca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	2224      	movs	r2, #36	; 0x24
    7fd0:	5c9b      	ldrb	r3, [r3, r2]
    7fd2:	2100      	movs	r1, #0
    7fd4:	0018      	movs	r0, r3
    7fd6:	4b3d      	ldr	r3, [pc, #244]	; (80cc <spi_init+0x19c>)
    7fd8:	58e3      	ldr	r3, [r4, r3]
    7fda:	4798      	blx	r3

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
    7fdc:	687b      	ldr	r3, [r7, #4]
    7fde:	781b      	ldrb	r3, [r3, #0]
    7fe0:	2b01      	cmp	r3, #1
    7fe2:	d105      	bne.n	7ff0 <spi_init+0xc0>
		/* Set the SERCOM in SPI master mode */
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    7fe4:	6a3b      	ldr	r3, [r7, #32]
    7fe6:	681b      	ldr	r3, [r3, #0]
    7fe8:	220c      	movs	r2, #12
    7fea:	431a      	orrs	r2, r3
    7fec:	6a3b      	ldr	r3, [r7, #32]
    7fee:	601a      	str	r2, [r3, #0]
	/* Temporary variables */
	uint8_t i;
	uint8_t instance_index;

	/* Initialize parameters */
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    7ff0:	2327      	movs	r3, #39	; 0x27
    7ff2:	18fb      	adds	r3, r7, r3
    7ff4:	2200      	movs	r2, #0
    7ff6:	701a      	strb	r2, [r3, #0]
    7ff8:	e010      	b.n	801c <spi_init+0xec>
		module->callback[i]        = NULL;
    7ffa:	2327      	movs	r3, #39	; 0x27
    7ffc:	18fb      	adds	r3, r7, r3
    7ffe:	781b      	ldrb	r3, [r3, #0]
    8000:	68fa      	ldr	r2, [r7, #12]
    8002:	3302      	adds	r3, #2
    8004:	009b      	lsls	r3, r3, #2
    8006:	18d3      	adds	r3, r2, r3
    8008:	3304      	adds	r3, #4
    800a:	2200      	movs	r2, #0
    800c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < SPI_CALLBACK_N; i++) {
    800e:	2327      	movs	r3, #39	; 0x27
    8010:	18fb      	adds	r3, r7, r3
    8012:	781a      	ldrb	r2, [r3, #0]
    8014:	2327      	movs	r3, #39	; 0x27
    8016:	18fb      	adds	r3, r7, r3
    8018:	3201      	adds	r2, #1
    801a:	701a      	strb	r2, [r3, #0]
    801c:	2327      	movs	r3, #39	; 0x27
    801e:	18fb      	adds	r3, r7, r3
    8020:	781b      	ldrb	r3, [r3, #0]
    8022:	2b06      	cmp	r3, #6
    8024:	d9e9      	bls.n	7ffa <spi_init+0xca>
	}
	module->tx_buffer_ptr              = NULL;
    8026:	68fb      	ldr	r3, [r7, #12]
    8028:	2200      	movs	r2, #0
    802a:	62da      	str	r2, [r3, #44]	; 0x2c
	module->rx_buffer_ptr              = NULL;
    802c:	68fb      	ldr	r3, [r7, #12]
    802e:	2200      	movs	r2, #0
    8030:	629a      	str	r2, [r3, #40]	; 0x28
	module->remaining_tx_buffer_length = 0x0000;
    8032:	68fb      	ldr	r3, [r7, #12]
    8034:	2200      	movs	r2, #0
    8036:	869a      	strh	r2, [r3, #52]	; 0x34
	module->remaining_rx_buffer_length = 0x0000;
    8038:	68fb      	ldr	r3, [r7, #12]
    803a:	2200      	movs	r2, #0
    803c:	861a      	strh	r2, [r3, #48]	; 0x30
	module->registered_callback        = 0x00;
    803e:	68fb      	ldr	r3, [r7, #12]
    8040:	2236      	movs	r2, #54	; 0x36
    8042:	2100      	movs	r1, #0
    8044:	5499      	strb	r1, [r3, r2]
	module->enabled_callback           = 0x00;
    8046:	68fb      	ldr	r3, [r7, #12]
    8048:	2237      	movs	r2, #55	; 0x37
    804a:	2100      	movs	r1, #0
    804c:	5499      	strb	r1, [r3, r2]
	module->status                     = STATUS_OK;
    804e:	68fb      	ldr	r3, [r7, #12]
    8050:	2238      	movs	r2, #56	; 0x38
    8052:	2100      	movs	r1, #0
    8054:	5499      	strb	r1, [r3, r2]
	module->dir                        = SPI_DIRECTION_IDLE;
    8056:	68fb      	ldr	r3, [r7, #12]
    8058:	2203      	movs	r2, #3
    805a:	725a      	strb	r2, [r3, #9]
	module->locked                     = false;
    805c:	68fb      	ldr	r3, [r7, #12]
    805e:	2200      	movs	r2, #0
    8060:	711a      	strb	r2, [r3, #4]
	/*
	 * Set interrupt handler and register SPI software module struct in
	 * look-up table
	 */
	instance_index = _sercom_get_sercom_inst_index(module->hw);
    8062:	68fb      	ldr	r3, [r7, #12]
    8064:	681b      	ldr	r3, [r3, #0]
    8066:	2213      	movs	r2, #19
    8068:	18bd      	adds	r5, r7, r2
    806a:	0018      	movs	r0, r3
    806c:	4b12      	ldr	r3, [pc, #72]	; (80b8 <spi_init+0x188>)
    806e:	58e3      	ldr	r3, [r4, r3]
    8070:	4798      	blx	r3
    8072:	0003      	movs	r3, r0
    8074:	702b      	strb	r3, [r5, #0]
	_sercom_set_handler(instance_index, _spi_interrupt_handler);
    8076:	4b16      	ldr	r3, [pc, #88]	; (80d0 <spi_init+0x1a0>)
    8078:	58e3      	ldr	r3, [r4, r3]
    807a:	001a      	movs	r2, r3
    807c:	2313      	movs	r3, #19
    807e:	18fb      	adds	r3, r7, r3
    8080:	781b      	ldrb	r3, [r3, #0]
    8082:	0011      	movs	r1, r2
    8084:	0018      	movs	r0, r3
    8086:	4b13      	ldr	r3, [pc, #76]	; (80d4 <spi_init+0x1a4>)
    8088:	58e3      	ldr	r3, [r4, r3]
    808a:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    808c:	2313      	movs	r3, #19
    808e:	18fb      	adds	r3, r7, r3
    8090:	781a      	ldrb	r2, [r3, #0]
    8092:	4b11      	ldr	r3, [pc, #68]	; (80d8 <spi_init+0x1a8>)
    8094:	58e3      	ldr	r3, [r4, r3]
    8096:	0092      	lsls	r2, r2, #2
    8098:	68f9      	ldr	r1, [r7, #12]
    809a:	50d1      	str	r1, [r2, r3]
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
    809c:	687a      	ldr	r2, [r7, #4]
    809e:	68fb      	ldr	r3, [r7, #12]
    80a0:	0011      	movs	r1, r2
    80a2:	0018      	movs	r0, r3
    80a4:	4b0d      	ldr	r3, [pc, #52]	; (80dc <spi_init+0x1ac>)
    80a6:	447b      	add	r3, pc
    80a8:	4798      	blx	r3
    80aa:	0003      	movs	r3, r0
}
    80ac:	0018      	movs	r0, r3
    80ae:	46bd      	mov	sp, r7
    80b0:	b00a      	add	sp, #40	; 0x28
    80b2:	bdb0      	pop	{r4, r5, r7, pc}
    80b4:	000074f2 	.word	0x000074f2
    80b8:	000002d4 	.word	0x000002d4
    80bc:	fffffbab 	.word	0xfffffbab
    80c0:	fffffb87 	.word	0xfffffb87
    80c4:	000000d4 	.word	0x000000d4
    80c8:	00000260 	.word	0x00000260
    80cc:	00000258 	.word	0x00000258
    80d0:	000000ec 	.word	0x000000ec
    80d4:	00000198 	.word	0x00000198
    80d8:	00000180 	.word	0x00000180
    80dc:	fffffc5f 	.word	0xfffffc5f

000080e0 <spi_read_buffer_wait>:
enum status_code spi_read_buffer_wait(
		struct spi_module *const module,
		uint8_t *rx_data,
		uint16_t length,
		uint16_t dummy)
{
    80e0:	b590      	push	{r4, r7, lr}
    80e2:	b087      	sub	sp, #28
    80e4:	af00      	add	r7, sp, #0
    80e6:	60f8      	str	r0, [r7, #12]
    80e8:	60b9      	str	r1, [r7, #8]
    80ea:	0019      	movs	r1, r3
    80ec:	1dbb      	adds	r3, r7, #6
    80ee:	801a      	strh	r2, [r3, #0]
    80f0:	1d3b      	adds	r3, r7, #4
    80f2:	1c0a      	adds	r2, r1, #0
    80f4:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    80f6:	68fb      	ldr	r3, [r7, #12]
    80f8:	2238      	movs	r2, #56	; 0x38
    80fa:	5c9b      	ldrb	r3, [r3, r2]
    80fc:	b2db      	uxtb	r3, r3
    80fe:	2b05      	cmp	r3, #5
    8100:	d101      	bne.n	8106 <spi_read_buffer_wait+0x26>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    8102:	2305      	movs	r3, #5
    8104:	e07e      	b.n	8204 <spi_read_buffer_wait+0x124>
	}
#  endif

	/* Sanity check arguments */
	if (length == 0) {
    8106:	1dbb      	adds	r3, r7, #6
    8108:	881b      	ldrh	r3, [r3, #0]
    810a:	2b00      	cmp	r3, #0
    810c:	d101      	bne.n	8112 <spi_read_buffer_wait+0x32>
		return STATUS_ERR_INVALID_ARG;
    810e:	2317      	movs	r3, #23
    8110:	e078      	b.n	8204 <spi_read_buffer_wait+0x124>
	}

	if (!(module->receiver_enabled)) {
    8112:	68fb      	ldr	r3, [r7, #12]
    8114:	79db      	ldrb	r3, [r3, #7]
    8116:	2201      	movs	r2, #1
    8118:	4053      	eors	r3, r2
    811a:	b2db      	uxtb	r3, r3
    811c:	2b00      	cmp	r3, #0
    811e:	d001      	beq.n	8124 <spi_read_buffer_wait+0x44>
		return STATUS_ERR_DENIED;
    8120:	231c      	movs	r3, #28
    8122:	e06f      	b.n	8204 <spi_read_buffer_wait+0x124>
	if ((module->mode == SPI_MODE_SLAVE) && (spi_is_write_complete(module))) {
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif
	uint16_t rx_pos = 0;
    8124:	2316      	movs	r3, #22
    8126:	18fb      	adds	r3, r7, r3
    8128:	2200      	movs	r2, #0
    812a:	801a      	strh	r2, [r3, #0]

	while (length--) {
    812c:	e062      	b.n	81f4 <spi_read_buffer_wait+0x114>
#  if CONF_SPI_MASTER_ENABLE == true
		if (module->mode == SPI_MODE_MASTER) {
    812e:	68fb      	ldr	r3, [r7, #12]
    8130:	795b      	ldrb	r3, [r3, #5]
    8132:	2b01      	cmp	r3, #1
    8134:	d114      	bne.n	8160 <spi_read_buffer_wait+0x80>
			/* Wait until the module is ready to write a character */
			while (!spi_is_ready_to_write(module)) {
    8136:	46c0      	nop			; (mov r8, r8)
    8138:	68fb      	ldr	r3, [r7, #12]
    813a:	0018      	movs	r0, r3
    813c:	4b33      	ldr	r3, [pc, #204]	; (820c <spi_read_buffer_wait+0x12c>)
    813e:	447b      	add	r3, pc
    8140:	4798      	blx	r3
    8142:	0003      	movs	r3, r0
    8144:	001a      	movs	r2, r3
    8146:	2301      	movs	r3, #1
    8148:	4053      	eors	r3, r2
    814a:	b2db      	uxtb	r3, r3
    814c:	2b00      	cmp	r3, #0
    814e:	d1f3      	bne.n	8138 <spi_read_buffer_wait+0x58>
			}

			/* Send dummy SPI character to read in master mode */
			spi_write(module, dummy);
    8150:	1d3b      	adds	r3, r7, #4
    8152:	881a      	ldrh	r2, [r3, #0]
    8154:	68fb      	ldr	r3, [r7, #12]
    8156:	0011      	movs	r1, r2
    8158:	0018      	movs	r0, r3
    815a:	4b2d      	ldr	r3, [pc, #180]	; (8210 <spi_read_buffer_wait+0x130>)
    815c:	447b      	add	r3, pc
    815e:	4798      	blx	r3
			}
		}
#  endif

		/* Wait until the module is ready to read a character */
		while (!spi_is_ready_to_read(module)) {
    8160:	46c0      	nop			; (mov r8, r8)
    8162:	68fb      	ldr	r3, [r7, #12]
    8164:	0018      	movs	r0, r3
    8166:	4b2b      	ldr	r3, [pc, #172]	; (8214 <spi_read_buffer_wait+0x134>)
    8168:	447b      	add	r3, pc
    816a:	4798      	blx	r3
    816c:	0003      	movs	r3, r0
    816e:	001a      	movs	r2, r3
    8170:	2301      	movs	r3, #1
    8172:	4053      	eors	r3, r2
    8174:	b2db      	uxtb	r3, r3
    8176:	2b00      	cmp	r3, #0
    8178:	d1f3      	bne.n	8162 <spi_read_buffer_wait+0x82>
		}

		uint16_t received_data = 0;
    817a:	2312      	movs	r3, #18
    817c:	18fb      	adds	r3, r7, r3
    817e:	2200      	movs	r2, #0
    8180:	801a      	strh	r2, [r3, #0]
		enum status_code retval = spi_read(module, &received_data);
    8182:	2315      	movs	r3, #21
    8184:	18fc      	adds	r4, r7, r3
    8186:	2312      	movs	r3, #18
    8188:	18fa      	adds	r2, r7, r3
    818a:	68fb      	ldr	r3, [r7, #12]
    818c:	0011      	movs	r1, r2
    818e:	0018      	movs	r0, r3
    8190:	4b21      	ldr	r3, [pc, #132]	; (8218 <spi_read_buffer_wait+0x138>)
    8192:	447b      	add	r3, pc
    8194:	4798      	blx	r3
    8196:	0003      	movs	r3, r0
    8198:	7023      	strb	r3, [r4, #0]

		if (retval != STATUS_OK) {
    819a:	2315      	movs	r3, #21
    819c:	18fb      	adds	r3, r7, r3
    819e:	781b      	ldrb	r3, [r3, #0]
    81a0:	2b00      	cmp	r3, #0
    81a2:	d003      	beq.n	81ac <spi_read_buffer_wait+0xcc>
			/* Overflow, abort */
			return retval;
    81a4:	2315      	movs	r3, #21
    81a6:	18fb      	adds	r3, r7, r3
    81a8:	781b      	ldrb	r3, [r3, #0]
    81aa:	e02b      	b.n	8204 <spi_read_buffer_wait+0x124>
		}

		/* Read value will be at least 8-bits long */
		rx_data[rx_pos++] = received_data;
    81ac:	2316      	movs	r3, #22
    81ae:	18fb      	adds	r3, r7, r3
    81b0:	881b      	ldrh	r3, [r3, #0]
    81b2:	2216      	movs	r2, #22
    81b4:	18ba      	adds	r2, r7, r2
    81b6:	1c59      	adds	r1, r3, #1
    81b8:	8011      	strh	r1, [r2, #0]
    81ba:	001a      	movs	r2, r3
    81bc:	68bb      	ldr	r3, [r7, #8]
    81be:	189b      	adds	r3, r3, r2
    81c0:	2212      	movs	r2, #18
    81c2:	18ba      	adds	r2, r7, r2
    81c4:	8812      	ldrh	r2, [r2, #0]
    81c6:	b2d2      	uxtb	r2, r2
    81c8:	701a      	strb	r2, [r3, #0]

		/* If 9-bit data, write next received byte to the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    81ca:	68fb      	ldr	r3, [r7, #12]
    81cc:	799b      	ldrb	r3, [r3, #6]
    81ce:	2b01      	cmp	r3, #1
    81d0:	d110      	bne.n	81f4 <spi_read_buffer_wait+0x114>
			rx_data[rx_pos++] = (received_data >> 8);
    81d2:	2316      	movs	r3, #22
    81d4:	18fb      	adds	r3, r7, r3
    81d6:	881b      	ldrh	r3, [r3, #0]
    81d8:	2216      	movs	r2, #22
    81da:	18ba      	adds	r2, r7, r2
    81dc:	1c59      	adds	r1, r3, #1
    81de:	8011      	strh	r1, [r2, #0]
    81e0:	001a      	movs	r2, r3
    81e2:	68bb      	ldr	r3, [r7, #8]
    81e4:	189b      	adds	r3, r3, r2
    81e6:	2212      	movs	r2, #18
    81e8:	18ba      	adds	r2, r7, r2
    81ea:	8812      	ldrh	r2, [r2, #0]
    81ec:	0a12      	lsrs	r2, r2, #8
    81ee:	b292      	uxth	r2, r2
    81f0:	b2d2      	uxtb	r2, r2
    81f2:	701a      	strb	r2, [r3, #0]
	while (length--) {
    81f4:	1dbb      	adds	r3, r7, #6
    81f6:	881b      	ldrh	r3, [r3, #0]
    81f8:	1dba      	adds	r2, r7, #6
    81fa:	1e59      	subs	r1, r3, #1
    81fc:	8011      	strh	r1, [r2, #0]
    81fe:	2b00      	cmp	r3, #0
    8200:	d195      	bne.n	812e <spi_read_buffer_wait+0x4e>
		}
	}

	return STATUS_OK;
    8202:	2300      	movs	r3, #0
}
    8204:	0018      	movs	r0, r3
    8206:	46bd      	mov	sp, r7
    8208:	b007      	add	sp, #28
    820a:	bd90      	pop	{r4, r7, pc}
    820c:	fffffaa3 	.word	0xfffffaa3
    8210:	fffffad5 	.word	0xfffffad5
    8214:	fffffaa1 	.word	0xfffffaa1
    8218:	fffffaeb 	.word	0xfffffaeb

0000821c <spi_write_buffer_wait>:
 */
enum status_code spi_write_buffer_wait(
		struct spi_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
    821c:	b580      	push	{r7, lr}
    821e:	b086      	sub	sp, #24
    8220:	af00      	add	r7, sp, #0
    8222:	60f8      	str	r0, [r7, #12]
    8224:	60b9      	str	r1, [r7, #8]
    8226:	1dbb      	adds	r3, r7, #6
    8228:	801a      	strh	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module);

#  if SPI_CALLBACK_MODE == true
	if (module->status == STATUS_BUSY) {
    822a:	68fb      	ldr	r3, [r7, #12]
    822c:	2238      	movs	r2, #56	; 0x38
    822e:	5c9b      	ldrb	r3, [r3, r2]
    8230:	b2db      	uxtb	r3, r3
    8232:	2b05      	cmp	r3, #5
    8234:	d101      	bne.n	823a <spi_write_buffer_wait+0x1e>
		/* Check if the SPI module is busy with a job */
		return STATUS_BUSY;
    8236:	2305      	movs	r3, #5
    8238:	e08c      	b.n	8354 <spi_write_buffer_wait+0x138>
	}
#  endif

	if (length == 0) {
    823a:	1dbb      	adds	r3, r7, #6
    823c:	881b      	ldrh	r3, [r3, #0]
    823e:	2b00      	cmp	r3, #0
    8240:	d101      	bne.n	8246 <spi_write_buffer_wait+0x2a>
		return STATUS_ERR_INVALID_ARG;
    8242:	2317      	movs	r3, #23
    8244:	e086      	b.n	8354 <spi_write_buffer_wait+0x138>
		/* Clear TX complete flag */
		_spi_clear_tx_complete_flag(module);
	}
#  endif

	uint16_t tx_pos = 0;
    8246:	2316      	movs	r3, #22
    8248:	18fb      	adds	r3, r7, r3
    824a:	2200      	movs	r2, #0
    824c:	801a      	strh	r2, [r3, #0]
	uint16_t flush_length = length;
    824e:	2314      	movs	r3, #20
    8250:	18fb      	adds	r3, r7, r3
    8252:	1dba      	adds	r2, r7, #6
    8254:	8812      	ldrh	r2, [r2, #0]
    8256:	801a      	strh	r2, [r3, #0]

	/* Write block */
	while (length--) {
    8258:	e063      	b.n	8322 <spi_write_buffer_wait+0x106>
			}
		}
#  endif

		/* Wait until the module is ready to write a character */
		while (!spi_is_ready_to_write(module)) {
    825a:	46c0      	nop			; (mov r8, r8)
    825c:	68fb      	ldr	r3, [r7, #12]
    825e:	0018      	movs	r0, r3
    8260:	4b3e      	ldr	r3, [pc, #248]	; (835c <spi_write_buffer_wait+0x140>)
    8262:	447b      	add	r3, pc
    8264:	4798      	blx	r3
    8266:	0003      	movs	r3, r0
    8268:	001a      	movs	r2, r3
    826a:	2301      	movs	r3, #1
    826c:	4053      	eors	r3, r2
    826e:	b2db      	uxtb	r3, r3
    8270:	2b00      	cmp	r3, #0
    8272:	d1f3      	bne.n	825c <spi_write_buffer_wait+0x40>
		}

		/* Write value will be at least 8-bits long */
		uint16_t data_to_send = tx_data[tx_pos++];
    8274:	2316      	movs	r3, #22
    8276:	18fb      	adds	r3, r7, r3
    8278:	881b      	ldrh	r3, [r3, #0]
    827a:	2216      	movs	r2, #22
    827c:	18ba      	adds	r2, r7, r2
    827e:	1c59      	adds	r1, r3, #1
    8280:	8011      	strh	r1, [r2, #0]
    8282:	001a      	movs	r2, r3
    8284:	68bb      	ldr	r3, [r7, #8]
    8286:	189b      	adds	r3, r3, r2
    8288:	781a      	ldrb	r2, [r3, #0]
    828a:	2312      	movs	r3, #18
    828c:	18fb      	adds	r3, r7, r3
    828e:	801a      	strh	r2, [r3, #0]

		/* If 9-bit data, get next byte to send from the buffer */
		if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8290:	68fb      	ldr	r3, [r7, #12]
    8292:	799b      	ldrb	r3, [r3, #6]
    8294:	2b01      	cmp	r3, #1
    8296:	d115      	bne.n	82c4 <spi_write_buffer_wait+0xa8>
			data_to_send |= (tx_data[tx_pos++] << 8);
    8298:	2316      	movs	r3, #22
    829a:	18fb      	adds	r3, r7, r3
    829c:	881b      	ldrh	r3, [r3, #0]
    829e:	2216      	movs	r2, #22
    82a0:	18ba      	adds	r2, r7, r2
    82a2:	1c59      	adds	r1, r3, #1
    82a4:	8011      	strh	r1, [r2, #0]
    82a6:	001a      	movs	r2, r3
    82a8:	68bb      	ldr	r3, [r7, #8]
    82aa:	189b      	adds	r3, r3, r2
    82ac:	781b      	ldrb	r3, [r3, #0]
    82ae:	021b      	lsls	r3, r3, #8
    82b0:	b21a      	sxth	r2, r3
    82b2:	2312      	movs	r3, #18
    82b4:	18fb      	adds	r3, r7, r3
    82b6:	2100      	movs	r1, #0
    82b8:	5e5b      	ldrsh	r3, [r3, r1]
    82ba:	4313      	orrs	r3, r2
    82bc:	b21a      	sxth	r2, r3
    82be:	2312      	movs	r3, #18
    82c0:	18fb      	adds	r3, r7, r3
    82c2:	801a      	strh	r2, [r3, #0]
		}

		/* Write the data to send */
		spi_write(module, data_to_send);
    82c4:	2312      	movs	r3, #18
    82c6:	18fb      	adds	r3, r7, r3
    82c8:	881a      	ldrh	r2, [r3, #0]
    82ca:	68fb      	ldr	r3, [r7, #12]
    82cc:	0011      	movs	r1, r2
    82ce:	0018      	movs	r0, r3
    82d0:	4b23      	ldr	r3, [pc, #140]	; (8360 <spi_write_buffer_wait+0x144>)
    82d2:	447b      	add	r3, pc
    82d4:	4798      	blx	r3

		if (module->receiver_enabled) {
    82d6:	68fb      	ldr	r3, [r7, #12]
    82d8:	79db      	ldrb	r3, [r3, #7]
    82da:	2214      	movs	r2, #20
    82dc:	18ba      	adds	r2, r7, r2
    82de:	2114      	movs	r1, #20
    82e0:	1879      	adds	r1, r7, r1
    82e2:	8809      	ldrh	r1, [r1, #0]
    82e4:	8011      	strh	r1, [r2, #0]
    82e6:	2b00      	cmp	r3, #0
    82e8:	d01b      	beq.n	8322 <spi_write_buffer_wait+0x106>
					return STATUS_ERR_TIMEOUT;
				}
			}
#  endif

			while (!spi_is_ready_to_read(module)) {
    82ea:	46c0      	nop			; (mov r8, r8)
    82ec:	68fb      	ldr	r3, [r7, #12]
    82ee:	0018      	movs	r0, r3
    82f0:	4b1c      	ldr	r3, [pc, #112]	; (8364 <spi_write_buffer_wait+0x148>)
    82f2:	447b      	add	r3, pc
    82f4:	4798      	blx	r3
    82f6:	0003      	movs	r3, r0
    82f8:	001a      	movs	r2, r3
    82fa:	2301      	movs	r3, #1
    82fc:	4053      	eors	r3, r2
    82fe:	b2db      	uxtb	r3, r3
    8300:	2b00      	cmp	r3, #0
    8302:	d1f3      	bne.n	82ec <spi_write_buffer_wait+0xd0>
			}

			/* Flush read buffer */
			uint16_t flush;
			spi_read(module, &flush);
    8304:	2310      	movs	r3, #16
    8306:	18fa      	adds	r2, r7, r3
    8308:	68fb      	ldr	r3, [r7, #12]
    830a:	0011      	movs	r1, r2
    830c:	0018      	movs	r0, r3
    830e:	4b16      	ldr	r3, [pc, #88]	; (8368 <spi_write_buffer_wait+0x14c>)
    8310:	447b      	add	r3, pc
    8312:	4798      	blx	r3
			flush_length--;
    8314:	2314      	movs	r3, #20
    8316:	18fb      	adds	r3, r7, r3
    8318:	881a      	ldrh	r2, [r3, #0]
    831a:	2314      	movs	r3, #20
    831c:	18fb      	adds	r3, r7, r3
    831e:	3a01      	subs	r2, #1
    8320:	801a      	strh	r2, [r3, #0]
	while (length--) {
    8322:	1dbb      	adds	r3, r7, #6
    8324:	881b      	ldrh	r3, [r3, #0]
    8326:	1dba      	adds	r2, r7, #6
    8328:	1e59      	subs	r1, r3, #1
    832a:	8011      	strh	r1, [r2, #0]
    832c:	2b00      	cmp	r3, #0
    832e:	d194      	bne.n	825a <spi_write_buffer_wait+0x3e>
		}
	}

#  if CONF_SPI_MASTER_ENABLE == true
	if (module->mode == SPI_MODE_MASTER) {
    8330:	68fb      	ldr	r3, [r7, #12]
    8332:	795b      	ldrb	r3, [r3, #5]
    8334:	2b01      	cmp	r3, #1
    8336:	d10c      	bne.n	8352 <spi_write_buffer_wait+0x136>
		/* Wait for last byte to be transferred */
		while (!spi_is_write_complete(module)) {
    8338:	46c0      	nop			; (mov r8, r8)
    833a:	68fb      	ldr	r3, [r7, #12]
    833c:	0018      	movs	r0, r3
    833e:	4b0b      	ldr	r3, [pc, #44]	; (836c <spi_write_buffer_wait+0x150>)
    8340:	447b      	add	r3, pc
    8342:	4798      	blx	r3
    8344:	0003      	movs	r3, r0
    8346:	001a      	movs	r2, r3
    8348:	2301      	movs	r3, #1
    834a:	4053      	eors	r3, r2
    834c:	b2db      	uxtb	r3, r3
    834e:	2b00      	cmp	r3, #0
    8350:	d1f3      	bne.n	833a <spi_write_buffer_wait+0x11e>
				flush_length--;
			}
		}
	}
#  endif
	return STATUS_OK;
    8352:	2300      	movs	r3, #0
}
    8354:	0018      	movs	r0, r3
    8356:	46bd      	mov	sp, r7
    8358:	b006      	add	sp, #24
    835a:	bd80      	pop	{r7, pc}
    835c:	fffff97f 	.word	0xfffff97f
    8360:	fffff95f 	.word	0xfffff95f
    8364:	fffff917 	.word	0xfffff917
    8368:	fffff96d 	.word	0xfffff96d
    836c:	fffff879 	.word	0xfffff879

00008370 <_spi_write>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write(
		struct spi_module *const module)
{
    8370:	b580      	push	{r7, lr}
    8372:	b084      	sub	sp, #16
    8374:	af00      	add	r7, sp, #0
    8376:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8378:	687b      	ldr	r3, [r7, #4]
    837a:	681b      	ldr	r3, [r3, #0]
    837c:	60bb      	str	r3, [r7, #8]

	/* Write value will be at least 8-bits long */
	uint16_t data_to_send = *(module->tx_buffer_ptr);
    837e:	687b      	ldr	r3, [r7, #4]
    8380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8382:	781b      	ldrb	r3, [r3, #0]
    8384:	b2da      	uxtb	r2, r3
    8386:	230e      	movs	r3, #14
    8388:	18fb      	adds	r3, r7, r3
    838a:	801a      	strh	r2, [r3, #0]
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
    838c:	687b      	ldr	r3, [r7, #4]
    838e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8390:	1c5a      	adds	r2, r3, #1
    8392:	687b      	ldr	r3, [r7, #4]
    8394:	62da      	str	r2, [r3, #44]	; 0x2c

	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8396:	687b      	ldr	r3, [r7, #4]
    8398:	799b      	ldrb	r3, [r3, #6]
    839a:	2b01      	cmp	r3, #1
    839c:	d113      	bne.n	83c6 <_spi_write+0x56>
		data_to_send |= ((*(module->tx_buffer_ptr)) << 8);
    839e:	687b      	ldr	r3, [r7, #4]
    83a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    83a2:	781b      	ldrb	r3, [r3, #0]
    83a4:	b2db      	uxtb	r3, r3
    83a6:	021b      	lsls	r3, r3, #8
    83a8:	b21a      	sxth	r2, r3
    83aa:	230e      	movs	r3, #14
    83ac:	18fb      	adds	r3, r7, r3
    83ae:	2100      	movs	r1, #0
    83b0:	5e5b      	ldrsh	r3, [r3, r1]
    83b2:	4313      	orrs	r3, r2
    83b4:	b21a      	sxth	r2, r3
    83b6:	230e      	movs	r3, #14
    83b8:	18fb      	adds	r3, r7, r3
    83ba:	801a      	strh	r2, [r3, #0]
		/* Increment 8-bit pointer */
		(module->tx_buffer_ptr)++;
    83bc:	687b      	ldr	r3, [r7, #4]
    83be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    83c0:	1c5a      	adds	r2, r3, #1
    83c2:	687b      	ldr	r3, [r7, #4]
    83c4:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	/* Write the data to send*/
	spi_hw->DATA.reg = data_to_send & SERCOM_SPI_DATA_MASK;
    83c6:	230e      	movs	r3, #14
    83c8:	18fb      	adds	r3, r7, r3
    83ca:	881b      	ldrh	r3, [r3, #0]
    83cc:	05db      	lsls	r3, r3, #23
    83ce:	0dda      	lsrs	r2, r3, #23
    83d0:	68bb      	ldr	r3, [r7, #8]
    83d2:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
    83d4:	687b      	ldr	r3, [r7, #4]
    83d6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    83d8:	b29b      	uxth	r3, r3
    83da:	3b01      	subs	r3, #1
    83dc:	b29a      	uxth	r2, r3
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	869a      	strh	r2, [r3, #52]	; 0x34
}
    83e2:	46c0      	nop			; (mov r8, r8)
    83e4:	46bd      	mov	sp, r7
    83e6:	b004      	add	sp, #16
    83e8:	bd80      	pop	{r7, pc}
	...

000083ec <_spi_write_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_write_dummy(
		struct spi_module *const module)
{
    83ec:	b580      	push	{r7, lr}
    83ee:	b084      	sub	sp, #16
    83f0:	af00      	add	r7, sp, #0
    83f2:	6078      	str	r0, [r7, #4]
    83f4:	4a0a      	ldr	r2, [pc, #40]	; (8420 <_spi_write_dummy+0x34>)
    83f6:	447a      	add	r2, pc
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    83f8:	687b      	ldr	r3, [r7, #4]
    83fa:	681b      	ldr	r3, [r3, #0]
    83fc:	60fb      	str	r3, [r7, #12]

	/* Write dummy byte */
	spi_hw->DATA.reg = dummy_write;
    83fe:	4b09      	ldr	r3, [pc, #36]	; (8424 <_spi_write_dummy+0x38>)
    8400:	58d3      	ldr	r3, [r2, r3]
    8402:	881b      	ldrh	r3, [r3, #0]
    8404:	001a      	movs	r2, r3
    8406:	68fb      	ldr	r3, [r7, #12]
    8408:	629a      	str	r2, [r3, #40]	; 0x28

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    840a:	687b      	ldr	r3, [r7, #4]
    840c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    840e:	b29b      	uxth	r3, r3
    8410:	3b01      	subs	r3, #1
    8412:	b29a      	uxth	r2, r3
    8414:	687b      	ldr	r3, [r7, #4]
    8416:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8418:	46c0      	nop			; (mov r8, r8)
    841a:	46bd      	mov	sp, r7
    841c:	b004      	add	sp, #16
    841e:	bd80      	pop	{r7, pc}
    8420:	0000703a 	.word	0x0000703a
    8424:	00000154 	.word	0x00000154

00008428 <_spi_read_dummy>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read_dummy(
		struct spi_module *const module)
{
    8428:	b580      	push	{r7, lr}
    842a:	b084      	sub	sp, #16
    842c:	af00      	add	r7, sp, #0
    842e:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8430:	687b      	ldr	r3, [r7, #4]
    8432:	681b      	ldr	r3, [r3, #0]
    8434:	60fb      	str	r3, [r7, #12]
	uint16_t flush = 0;
    8436:	230a      	movs	r3, #10
    8438:	18fb      	adds	r3, r7, r3
    843a:	2200      	movs	r2, #0
    843c:	801a      	strh	r2, [r3, #0]

	/* Read dummy byte */
	flush = spi_hw->DATA.reg;
    843e:	68fb      	ldr	r3, [r7, #12]
    8440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8442:	230a      	movs	r3, #10
    8444:	18fb      	adds	r3, r7, r3
    8446:	801a      	strh	r2, [r3, #0]
	UNUSED(flush);

	/* Decrement remaining dummy buffer length */
	module->remaining_dummy_buffer_length--;
    8448:	687b      	ldr	r3, [r7, #4]
    844a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    844c:	b29b      	uxth	r3, r3
    844e:	3b01      	subs	r3, #1
    8450:	b29a      	uxth	r2, r3
    8452:	687b      	ldr	r3, [r7, #4]
    8454:	865a      	strh	r2, [r3, #50]	; 0x32
}
    8456:	46c0      	nop			; (mov r8, r8)
    8458:	46bd      	mov	sp, r7
    845a:	b004      	add	sp, #16
    845c:	bd80      	pop	{r7, pc}

0000845e <_spi_read>:
 *
 * \param[in,out]  module  Pointer to SPI software instance struct
 */
static void _spi_read(
		struct spi_module *const module)
{
    845e:	b580      	push	{r7, lr}
    8460:	b084      	sub	sp, #16
    8462:	af00      	add	r7, sp, #0
    8464:	6078      	str	r0, [r7, #4]
	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    8466:	687b      	ldr	r3, [r7, #4]
    8468:	681b      	ldr	r3, [r3, #0]
    846a:	60fb      	str	r3, [r7, #12]

	uint16_t received_data = (spi_hw->DATA.reg & SERCOM_SPI_DATA_MASK);
    846c:	68fb      	ldr	r3, [r7, #12]
    846e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8470:	b29a      	uxth	r2, r3
    8472:	230a      	movs	r3, #10
    8474:	18fb      	adds	r3, r7, r3
    8476:	05d2      	lsls	r2, r2, #23
    8478:	0dd2      	lsrs	r2, r2, #23
    847a:	801a      	strh	r2, [r3, #0]

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
    847c:	687b      	ldr	r3, [r7, #4]
    847e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8480:	220a      	movs	r2, #10
    8482:	18ba      	adds	r2, r7, r2
    8484:	8812      	ldrh	r2, [r2, #0]
    8486:	b2d2      	uxtb	r2, r2
    8488:	701a      	strb	r2, [r3, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
    848a:	687b      	ldr	r3, [r7, #4]
    848c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    848e:	1c5a      	adds	r2, r3, #1
    8490:	687b      	ldr	r3, [r7, #4]
    8492:	629a      	str	r2, [r3, #40]	; 0x28

	if(module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    8494:	687b      	ldr	r3, [r7, #4]
    8496:	799b      	ldrb	r3, [r3, #6]
    8498:	2b01      	cmp	r3, #1
    849a:	d10d      	bne.n	84b8 <_spi_read+0x5a>
		/* 9-bit data, write next received byte to the buffer */
		*(module->rx_buffer_ptr) = (received_data >> 8);
    849c:	687b      	ldr	r3, [r7, #4]
    849e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84a0:	220a      	movs	r2, #10
    84a2:	18ba      	adds	r2, r7, r2
    84a4:	8812      	ldrh	r2, [r2, #0]
    84a6:	0a12      	lsrs	r2, r2, #8
    84a8:	b292      	uxth	r2, r2
    84aa:	b2d2      	uxtb	r2, r2
    84ac:	701a      	strb	r2, [r3, #0]
		/* Increment 8-bit pointer */
		module->rx_buffer_ptr += 1;
    84ae:	687b      	ldr	r3, [r7, #4]
    84b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    84b2:	1c5a      	adds	r2, r3, #1
    84b4:	687b      	ldr	r3, [r7, #4]
    84b6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
    84b8:	687b      	ldr	r3, [r7, #4]
    84ba:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    84bc:	b29b      	uxth	r3, r3
    84be:	3b01      	subs	r3, #1
    84c0:	b29a      	uxth	r2, r3
    84c2:	687b      	ldr	r3, [r7, #4]
    84c4:	861a      	strh	r2, [r3, #48]	; 0x30
}
    84c6:	46c0      	nop			; (mov r8, r8)
    84c8:	46bd      	mov	sp, r7
    84ca:	b004      	add	sp, #16
    84cc:	bd80      	pop	{r7, pc}
	...

000084d0 <_spi_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _spi_interrupt_handler(
		uint8_t instance)
{
    84d0:	b580      	push	{r7, lr}
    84d2:	b086      	sub	sp, #24
    84d4:	af00      	add	r7, sp, #0
    84d6:	0002      	movs	r2, r0
    84d8:	1dfb      	adds	r3, r7, #7
    84da:	701a      	strb	r2, [r3, #0]
    84dc:	499a      	ldr	r1, [pc, #616]	; (8748 <_spi_interrupt_handler+0x278>)
    84de:	4479      	add	r1, pc
	/* Get device instance from the look-up table */
	struct spi_module *module
		= (struct spi_module *)_sercom_instances[instance];
    84e0:	1dfb      	adds	r3, r7, #7
    84e2:	781a      	ldrb	r2, [r3, #0]
	struct spi_module *module
    84e4:	4b99      	ldr	r3, [pc, #612]	; (874c <_spi_interrupt_handler+0x27c>)
    84e6:	58cb      	ldr	r3, [r1, r3]
    84e8:	0092      	lsls	r2, r2, #2
    84ea:	58d3      	ldr	r3, [r2, r3]
    84ec:	617b      	str	r3, [r7, #20]

	/* Pointer to the hardware module instance */
	SercomSpi *const spi_hw = &(module->hw->SPI);
    84ee:	697b      	ldr	r3, [r7, #20]
    84f0:	681b      	ldr	r3, [r3, #0]
    84f2:	613b      	str	r3, [r7, #16]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
    84f4:	697b      	ldr	r3, [r7, #20]
    84f6:	2237      	movs	r2, #55	; 0x37
    84f8:	5c9a      	ldrb	r2, [r3, r2]
    84fa:	697b      	ldr	r3, [r7, #20]
    84fc:	2136      	movs	r1, #54	; 0x36
    84fe:	5c59      	ldrb	r1, [r3, r1]
	uint8_t callback_mask =
    8500:	230f      	movs	r3, #15
    8502:	18fb      	adds	r3, r7, r3
    8504:	400a      	ands	r2, r1
    8506:	701a      	strb	r2, [r3, #0]

	/* Read and mask interrupt flag register */
	uint16_t interrupt_status = spi_hw->INTFLAG.reg;
    8508:	693b      	ldr	r3, [r7, #16]
    850a:	7e1b      	ldrb	r3, [r3, #24]
    850c:	b2da      	uxtb	r2, r3
    850e:	230c      	movs	r3, #12
    8510:	18fb      	adds	r3, r7, r3
    8512:	801a      	strh	r2, [r3, #0]
	interrupt_status &= spi_hw->INTENSET.reg;
    8514:	693b      	ldr	r3, [r7, #16]
    8516:	7d9b      	ldrb	r3, [r3, #22]
    8518:	b2db      	uxtb	r3, r3
    851a:	b29a      	uxth	r2, r3
    851c:	230c      	movs	r3, #12
    851e:	18fb      	adds	r3, r7, r3
    8520:	210c      	movs	r1, #12
    8522:	1879      	adds	r1, r7, r1
    8524:	8809      	ldrh	r1, [r1, #0]
    8526:	400a      	ands	r2, r1
    8528:	801a      	strh	r2, [r3, #0]

	/* Data register empty interrupt */
	if (interrupt_status & SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY) {
    852a:	230c      	movs	r3, #12
    852c:	18fb      	adds	r3, r7, r3
    852e:	881b      	ldrh	r3, [r3, #0]
    8530:	2201      	movs	r2, #1
    8532:	4013      	ands	r3, r2
    8534:	d03a      	beq.n	85ac <_spi_interrupt_handler+0xdc>
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    8536:	697b      	ldr	r3, [r7, #20]
    8538:	795b      	ldrb	r3, [r3, #5]
    853a:	2b01      	cmp	r3, #1
    853c:	d111      	bne.n	8562 <_spi_interrupt_handler+0x92>
			(module->dir == SPI_DIRECTION_READ)) {
    853e:	697b      	ldr	r3, [r7, #20]
    8540:	7a5b      	ldrb	r3, [r3, #9]
    8542:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    8544:	2b00      	cmp	r3, #0
    8546:	d10c      	bne.n	8562 <_spi_interrupt_handler+0x92>
			/* Send dummy byte when reading in master mode */
			_spi_write_dummy(module);
    8548:	697b      	ldr	r3, [r7, #20]
    854a:	0018      	movs	r0, r3
    854c:	4b80      	ldr	r3, [pc, #512]	; (8750 <_spi_interrupt_handler+0x280>)
    854e:	447b      	add	r3, pc
    8550:	4798      	blx	r3
			if (module->remaining_dummy_buffer_length == 0) {
    8552:	697b      	ldr	r3, [r7, #20]
    8554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8556:	b29b      	uxth	r3, r3
    8558:	2b00      	cmp	r3, #0
    855a:	d102      	bne.n	8562 <_spi_interrupt_handler+0x92>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    855c:	693b      	ldr	r3, [r7, #16]
    855e:	2201      	movs	r2, #1
    8560:	751a      	strb	r2, [r3, #20]
		}
#  endif

		if (0
#  if CONF_SPI_MASTER_ENABLE == true
		|| ((module->mode == SPI_MODE_MASTER) &&
    8562:	697b      	ldr	r3, [r7, #20]
    8564:	795b      	ldrb	r3, [r3, #5]
		if (0
    8566:	2b01      	cmp	r3, #1
    8568:	d120      	bne.n	85ac <_spi_interrupt_handler+0xdc>
			(module->dir != SPI_DIRECTION_READ))
    856a:	697b      	ldr	r3, [r7, #20]
    856c:	7a5b      	ldrb	r3, [r3, #9]
    856e:	b2db      	uxtb	r3, r3
		|| ((module->mode == SPI_MODE_MASTER) &&
    8570:	2b00      	cmp	r3, #0
    8572:	d01b      	beq.n	85ac <_spi_interrupt_handler+0xdc>
		|| ((module->mode == SPI_MODE_SLAVE) &&
			(module->dir != SPI_DIRECTION_READ))
#  endif
		) {
			/* Write next byte from buffer */
			_spi_write(module);
    8574:	697b      	ldr	r3, [r7, #20]
    8576:	0018      	movs	r0, r3
    8578:	4b76      	ldr	r3, [pc, #472]	; (8754 <_spi_interrupt_handler+0x284>)
    857a:	447b      	add	r3, pc
    857c:	4798      	blx	r3
			if (module->remaining_tx_buffer_length == 0) {
    857e:	697b      	ldr	r3, [r7, #20]
    8580:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
    8582:	b29b      	uxth	r3, r3
    8584:	2b00      	cmp	r3, #0
    8586:	d111      	bne.n	85ac <_spi_interrupt_handler+0xdc>
				/* Disable the Data Register Empty Interrupt */
				spi_hw->INTENCLR.reg
						= SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
    8588:	693b      	ldr	r3, [r7, #16]
    858a:	2201      	movs	r2, #1
    858c:	751a      	strb	r2, [r3, #20]

				if (module->dir == SPI_DIRECTION_WRITE &&
    858e:	697b      	ldr	r3, [r7, #20]
    8590:	7a5b      	ldrb	r3, [r3, #9]
    8592:	b2db      	uxtb	r3, r3
    8594:	2b01      	cmp	r3, #1
    8596:	d109      	bne.n	85ac <_spi_interrupt_handler+0xdc>
						!(module->receiver_enabled)) {
    8598:	697b      	ldr	r3, [r7, #20]
    859a:	79db      	ldrb	r3, [r3, #7]
    859c:	2201      	movs	r2, #1
    859e:	4053      	eors	r3, r2
    85a0:	b2db      	uxtb	r3, r3
				if (module->dir == SPI_DIRECTION_WRITE &&
    85a2:	2b00      	cmp	r3, #0
    85a4:	d002      	beq.n	85ac <_spi_interrupt_handler+0xdc>
					/* Enable the Data Register transmit complete Interrupt */
					spi_hw->INTENSET.reg = SPI_INTERRUPT_FLAG_TX_COMPLETE;
    85a6:	693b      	ldr	r3, [r7, #16]
    85a8:	2202      	movs	r2, #2
    85aa:	759a      	strb	r2, [r3, #22]
			}
		}
	}

	/* Receive complete interrupt*/
	if (interrupt_status & SPI_INTERRUPT_FLAG_RX_COMPLETE) {
    85ac:	230c      	movs	r3, #12
    85ae:	18fb      	adds	r3, r7, r3
    85b0:	881b      	ldrh	r3, [r3, #0]
    85b2:	2204      	movs	r2, #4
    85b4:	4013      	ands	r3, r2
    85b6:	d100      	bne.n	85ba <_spi_interrupt_handler+0xea>
    85b8:	e080      	b.n	86bc <_spi_interrupt_handler+0x1ec>
		/* Check for overflow */
		if (spi_hw->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    85ba:	693b      	ldr	r3, [r7, #16]
    85bc:	8b5b      	ldrh	r3, [r3, #26]
    85be:	b29b      	uxth	r3, r3
    85c0:	001a      	movs	r2, r3
    85c2:	2304      	movs	r3, #4
    85c4:	4013      	ands	r3, r2
    85c6:	d022      	beq.n	860e <_spi_interrupt_handler+0x13e>
			if (module->dir != SPI_DIRECTION_WRITE) {
    85c8:	697b      	ldr	r3, [r7, #20]
    85ca:	7a5b      	ldrb	r3, [r3, #9]
    85cc:	b2db      	uxtb	r3, r3
    85ce:	2b01      	cmp	r3, #1
    85d0:	d014      	beq.n	85fc <_spi_interrupt_handler+0x12c>
				/* Store the error code */
				module->status = STATUS_ERR_OVERFLOW;
    85d2:	697b      	ldr	r3, [r7, #20]
    85d4:	2238      	movs	r2, #56	; 0x38
    85d6:	211e      	movs	r1, #30
    85d8:	5499      	strb	r1, [r3, r2]

				/* End transaction */
				module->dir = SPI_DIRECTION_IDLE;
    85da:	697b      	ldr	r3, [r7, #20]
    85dc:	2203      	movs	r2, #3
    85de:	725a      	strb	r2, [r3, #9]

				spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE |
    85e0:	693b      	ldr	r3, [r7, #16]
    85e2:	2205      	movs	r2, #5
    85e4:	751a      	strb	r2, [r3, #20]
						SPI_INTERRUPT_FLAG_DATA_REGISTER_EMPTY;
				/* Run callback if registered and enabled */
				if (callback_mask & (1 << SPI_CALLBACK_ERROR)) {
    85e6:	230f      	movs	r3, #15
    85e8:	18fb      	adds	r3, r7, r3
    85ea:	781b      	ldrb	r3, [r3, #0]
    85ec:	2208      	movs	r2, #8
    85ee:	4013      	ands	r3, r2
    85f0:	d004      	beq.n	85fc <_spi_interrupt_handler+0x12c>
					(module->callback[SPI_CALLBACK_ERROR])(module);
    85f2:	697b      	ldr	r3, [r7, #20]
    85f4:	699b      	ldr	r3, [r3, #24]
    85f6:	697a      	ldr	r2, [r7, #20]
    85f8:	0010      	movs	r0, r2
    85fa:	4798      	blx	r3
				}
			}
			/* Flush */
			uint16_t flush = spi_hw->DATA.reg;
    85fc:	693b      	ldr	r3, [r7, #16]
    85fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    8600:	230a      	movs	r3, #10
    8602:	18fb      	adds	r3, r7, r3
    8604:	801a      	strh	r2, [r3, #0]
			UNUSED(flush);
			/* Clear overflow flag */
			spi_hw->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    8606:	693b      	ldr	r3, [r7, #16]
    8608:	2204      	movs	r2, #4
    860a:	835a      	strh	r2, [r3, #26]
    860c:	e056      	b.n	86bc <_spi_interrupt_handler+0x1ec>
		} else {
			if (module->dir == SPI_DIRECTION_WRITE) {
    860e:	697b      	ldr	r3, [r7, #20]
    8610:	7a5b      	ldrb	r3, [r3, #9]
    8612:	b2db      	uxtb	r3, r3
    8614:	2b01      	cmp	r3, #1
    8616:	d11f      	bne.n	8658 <_spi_interrupt_handler+0x188>
				/* Flush receive buffer when writing */
				_spi_read_dummy(module);
    8618:	697b      	ldr	r3, [r7, #20]
    861a:	0018      	movs	r0, r3
    861c:	4b4e      	ldr	r3, [pc, #312]	; (8758 <_spi_interrupt_handler+0x288>)
    861e:	447b      	add	r3, pc
    8620:	4798      	blx	r3
				if (module->remaining_dummy_buffer_length == 0) {
    8622:	697b      	ldr	r3, [r7, #20]
    8624:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
    8626:	b29b      	uxth	r3, r3
    8628:	2b00      	cmp	r3, #0
    862a:	d147      	bne.n	86bc <_spi_interrupt_handler+0x1ec>
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    862c:	693b      	ldr	r3, [r7, #16]
    862e:	2204      	movs	r2, #4
    8630:	751a      	strb	r2, [r3, #20]
					module->status = STATUS_OK;
    8632:	697b      	ldr	r3, [r7, #20]
    8634:	2238      	movs	r2, #56	; 0x38
    8636:	2100      	movs	r1, #0
    8638:	5499      	strb	r1, [r3, r2]
					module->dir = SPI_DIRECTION_IDLE;
    863a:	697b      	ldr	r3, [r7, #20]
    863c:	2203      	movs	r2, #3
    863e:	725a      	strb	r2, [r3, #9]
					/* Run callback if registered and enabled */
					if (callback_mask &
    8640:	230f      	movs	r3, #15
    8642:	18fb      	adds	r3, r7, r3
    8644:	781b      	ldrb	r3, [r3, #0]
    8646:	2201      	movs	r2, #1
    8648:	4013      	ands	r3, r2
    864a:	d037      	beq.n	86bc <_spi_interrupt_handler+0x1ec>
							(1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
						(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])(module);
    864c:	697b      	ldr	r3, [r7, #20]
    864e:	68db      	ldr	r3, [r3, #12]
    8650:	697a      	ldr	r2, [r7, #20]
    8652:	0010      	movs	r0, r2
    8654:	4798      	blx	r3
    8656:	e031      	b.n	86bc <_spi_interrupt_handler+0x1ec>
					}
				}
			} else {
				/* Read data register */
				_spi_read(module);
    8658:	697b      	ldr	r3, [r7, #20]
    865a:	0018      	movs	r0, r3
    865c:	4b3f      	ldr	r3, [pc, #252]	; (875c <_spi_interrupt_handler+0x28c>)
    865e:	447b      	add	r3, pc
    8660:	4798      	blx	r3

				/* Check if the last character have been received */
				if (module->remaining_rx_buffer_length == 0) {
    8662:	697b      	ldr	r3, [r7, #20]
    8664:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
    8666:	b29b      	uxth	r3, r3
    8668:	2b00      	cmp	r3, #0
    866a:	d127      	bne.n	86bc <_spi_interrupt_handler+0x1ec>
					module->status = STATUS_OK;
    866c:	697b      	ldr	r3, [r7, #20]
    866e:	2238      	movs	r2, #56	; 0x38
    8670:	2100      	movs	r1, #0
    8672:	5499      	strb	r1, [r3, r2]
					/* Disable RX Complete Interrupt and set status */
					spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_RX_COMPLETE;
    8674:	693b      	ldr	r3, [r7, #16]
    8676:	2204      	movs	r2, #4
    8678:	751a      	strb	r2, [r3, #20]
					if(module->dir == SPI_DIRECTION_BOTH) {
    867a:	697b      	ldr	r3, [r7, #20]
    867c:	7a5b      	ldrb	r3, [r3, #9]
    867e:	b2db      	uxtb	r3, r3
    8680:	2b02      	cmp	r3, #2
    8682:	d10b      	bne.n	869c <_spi_interrupt_handler+0x1cc>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSCEIVED)) {
    8684:	230f      	movs	r3, #15
    8686:	18fb      	adds	r3, r7, r3
    8688:	781b      	ldrb	r3, [r3, #0]
    868a:	2204      	movs	r2, #4
    868c:	4013      	ands	r3, r2
    868e:	d015      	beq.n	86bc <_spi_interrupt_handler+0x1ec>
							(module->callback[SPI_CALLBACK_BUFFER_TRANSCEIVED])(module);
    8690:	697b      	ldr	r3, [r7, #20]
    8692:	695b      	ldr	r3, [r3, #20]
    8694:	697a      	ldr	r2, [r7, #20]
    8696:	0010      	movs	r0, r2
    8698:	4798      	blx	r3
    869a:	e00f      	b.n	86bc <_spi_interrupt_handler+0x1ec>
						}
					} else if (module->dir == SPI_DIRECTION_READ) {
    869c:	697b      	ldr	r3, [r7, #20]
    869e:	7a5b      	ldrb	r3, [r3, #9]
    86a0:	b2db      	uxtb	r3, r3
    86a2:	2b00      	cmp	r3, #0
    86a4:	d10a      	bne.n	86bc <_spi_interrupt_handler+0x1ec>
						if (callback_mask & (1 << SPI_CALLBACK_BUFFER_RECEIVED)) {
    86a6:	230f      	movs	r3, #15
    86a8:	18fb      	adds	r3, r7, r3
    86aa:	781b      	ldrb	r3, [r3, #0]
    86ac:	2202      	movs	r2, #2
    86ae:	4013      	ands	r3, r2
    86b0:	d004      	beq.n	86bc <_spi_interrupt_handler+0x1ec>
							(module->callback[SPI_CALLBACK_BUFFER_RECEIVED])(module);
    86b2:	697b      	ldr	r3, [r7, #20]
    86b4:	691b      	ldr	r3, [r3, #16]
    86b6:	697a      	ldr	r2, [r7, #20]
    86b8:	0010      	movs	r0, r2
    86ba:	4798      	blx	r3
			}
		}
	}

	/* Transmit complete */
	if (interrupt_status & SPI_INTERRUPT_FLAG_TX_COMPLETE) {
    86bc:	230c      	movs	r3, #12
    86be:	18fb      	adds	r3, r7, r3
    86c0:	881b      	ldrh	r3, [r3, #0]
    86c2:	2202      	movs	r2, #2
    86c4:	4013      	ands	r3, r2
    86c6:	d024      	beq.n	8712 <_spi_interrupt_handler+0x242>
			}

		}
#  endif
#  if CONF_SPI_MASTER_ENABLE == true
		if ((module->mode == SPI_MODE_MASTER) &&
    86c8:	697b      	ldr	r3, [r7, #20]
    86ca:	795b      	ldrb	r3, [r3, #5]
    86cc:	2b01      	cmp	r3, #1
    86ce:	d120      	bne.n	8712 <_spi_interrupt_handler+0x242>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    86d0:	697b      	ldr	r3, [r7, #20]
    86d2:	7a5b      	ldrb	r3, [r3, #9]
    86d4:	b2db      	uxtb	r3, r3
		if ((module->mode == SPI_MODE_MASTER) &&
    86d6:	2b01      	cmp	r3, #1
    86d8:	d11b      	bne.n	8712 <_spi_interrupt_handler+0x242>
			(module->dir == SPI_DIRECTION_WRITE) && !(module->receiver_enabled)) {
    86da:	697b      	ldr	r3, [r7, #20]
    86dc:	79db      	ldrb	r3, [r3, #7]
    86de:	2201      	movs	r2, #1
    86e0:	4053      	eors	r3, r2
    86e2:	b2db      	uxtb	r3, r3
    86e4:	2b00      	cmp	r3, #0
    86e6:	d014      	beq.n	8712 <_spi_interrupt_handler+0x242>
		  	/* Clear interrupt flag */
		 	spi_hw->INTENCLR.reg
					= SPI_INTERRUPT_FLAG_TX_COMPLETE;
    86e8:	693b      	ldr	r3, [r7, #16]
    86ea:	2202      	movs	r2, #2
    86ec:	751a      	strb	r2, [r3, #20]
			/* Buffer sent with receiver disabled */
			module->dir = SPI_DIRECTION_IDLE;
    86ee:	697b      	ldr	r3, [r7, #20]
    86f0:	2203      	movs	r2, #3
    86f2:	725a      	strb	r2, [r3, #9]
			module->status = STATUS_OK;
    86f4:	697b      	ldr	r3, [r7, #20]
    86f6:	2238      	movs	r2, #56	; 0x38
    86f8:	2100      	movs	r1, #0
    86fa:	5499      	strb	r1, [r3, r2]
			/* Run callback if registered and enabled */
			if (callback_mask & (1 << SPI_CALLBACK_BUFFER_TRANSMITTED)){
    86fc:	230f      	movs	r3, #15
    86fe:	18fb      	adds	r3, r7, r3
    8700:	781b      	ldrb	r3, [r3, #0]
    8702:	2201      	movs	r2, #1
    8704:	4013      	ands	r3, r2
    8706:	d004      	beq.n	8712 <_spi_interrupt_handler+0x242>
				(module->callback[SPI_CALLBACK_BUFFER_TRANSMITTED])
    8708:	697b      	ldr	r3, [r7, #20]
    870a:	68db      	ldr	r3, [r3, #12]
    870c:	697a      	ldr	r2, [r7, #20]
    870e:	0010      	movs	r0, r2
    8710:	4798      	blx	r3
#  endif
#  endif

#  ifdef FEATURE_SPI_ERROR_INTERRUPT
	/* When combined error happen */
	if (interrupt_status & SPI_INTERRUPT_FLAG_COMBINED_ERROR) {
    8712:	230c      	movs	r3, #12
    8714:	18fb      	adds	r3, r7, r3
    8716:	881b      	ldrh	r3, [r3, #0]
    8718:	2280      	movs	r2, #128	; 0x80
    871a:	4013      	ands	r3, r2
    871c:	d010      	beq.n	8740 <_spi_interrupt_handler+0x270>
		/* Disable interrupts */
		spi_hw->INTENCLR.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    871e:	693b      	ldr	r3, [r7, #16]
    8720:	2280      	movs	r2, #128	; 0x80
    8722:	751a      	strb	r2, [r3, #20]
		/* Clear interrupt flag */
		spi_hw->INTFLAG.reg = SPI_INTERRUPT_FLAG_COMBINED_ERROR;
    8724:	693b      	ldr	r3, [r7, #16]
    8726:	2280      	movs	r2, #128	; 0x80
    8728:	761a      	strb	r2, [r3, #24]

		if (callback_mask & (1 << SPI_CALLBACK_COMBINED_ERROR)) {
    872a:	230f      	movs	r3, #15
    872c:	18fb      	adds	r3, r7, r3
    872e:	781b      	ldrb	r3, [r3, #0]
    8730:	2240      	movs	r2, #64	; 0x40
    8732:	4013      	ands	r3, r2
    8734:	d004      	beq.n	8740 <_spi_interrupt_handler+0x270>
			(module->callback[SPI_CALLBACK_COMBINED_ERROR])(module);
    8736:	697b      	ldr	r3, [r7, #20]
    8738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    873a:	697a      	ldr	r2, [r7, #20]
    873c:	0010      	movs	r0, r2
    873e:	4798      	blx	r3
		}
	}
#  endif
}
    8740:	46c0      	nop			; (mov r8, r8)
    8742:	46bd      	mov	sp, r7
    8744:	b006      	add	sp, #24
    8746:	bd80      	pop	{r7, pc}
    8748:	00006f52 	.word	0x00006f52
    874c:	00000180 	.word	0x00000180
    8750:	fffffe9b 	.word	0xfffffe9b
    8754:	fffffdf3 	.word	0xfffffdf3
    8758:	fffffe07 	.word	0xfffffe07
    875c:	fffffdfd 	.word	0xfffffdfd

00008760 <system_gclk_gen_get_config_defaults>:
{
    8760:	b580      	push	{r7, lr}
    8762:	b082      	sub	sp, #8
    8764:	af00      	add	r7, sp, #0
    8766:	6078      	str	r0, [r7, #4]
	config->division_factor    = 1;
    8768:	687b      	ldr	r3, [r7, #4]
    876a:	2201      	movs	r2, #1
    876c:	605a      	str	r2, [r3, #4]
	config->high_when_disabled = false;
    876e:	687b      	ldr	r3, [r7, #4]
    8770:	2200      	movs	r2, #0
    8772:	705a      	strb	r2, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    8774:	687b      	ldr	r3, [r7, #4]
    8776:	2206      	movs	r2, #6
    8778:	701a      	strb	r2, [r3, #0]
	config->run_in_standby     = false;
    877a:	687b      	ldr	r3, [r7, #4]
    877c:	2200      	movs	r2, #0
    877e:	721a      	strb	r2, [r3, #8]
	config->output_enable      = false;
    8780:	687b      	ldr	r3, [r7, #4]
    8782:	2200      	movs	r2, #0
    8784:	725a      	strb	r2, [r3, #9]
}
    8786:	46c0      	nop			; (mov r8, r8)
    8788:	46bd      	mov	sp, r7
    878a:	b002      	add	sp, #8
    878c:	bd80      	pop	{r7, pc}

0000878e <system_gclk_chan_get_config_defaults>:
{
    878e:	b580      	push	{r7, lr}
    8790:	b082      	sub	sp, #8
    8792:	af00      	add	r7, sp, #0
    8794:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    8796:	687b      	ldr	r3, [r7, #4]
    8798:	2200      	movs	r2, #0
    879a:	701a      	strb	r2, [r3, #0]
}
    879c:	46c0      	nop			; (mov r8, r8)
    879e:	46bd      	mov	sp, r7
    87a0:	b002      	add	sp, #8
    87a2:	bd80      	pop	{r7, pc}

000087a4 <system_clock_source_xosc32k_get_config_defaults>:
{
    87a4:	b580      	push	{r7, lr}
    87a6:	b082      	sub	sp, #8
    87a8:	af00      	add	r7, sp, #0
    87aa:	6078      	str	r0, [r7, #4]
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    87ac:	687b      	ldr	r3, [r7, #4]
    87ae:	2200      	movs	r2, #0
    87b0:	701a      	strb	r2, [r3, #0]
	config->startup_time        = SYSTEM_XOSC32K_STARTUP_16384;
    87b2:	687b      	ldr	r3, [r7, #4]
    87b4:	2204      	movs	r2, #4
    87b6:	705a      	strb	r2, [r3, #1]
	config->auto_gain_control   = false;
    87b8:	687b      	ldr	r3, [r7, #4]
    87ba:	2200      	movs	r2, #0
    87bc:	709a      	strb	r2, [r3, #2]
	config->frequency           = 32768UL;
    87be:	687b      	ldr	r3, [r7, #4]
    87c0:	2280      	movs	r2, #128	; 0x80
    87c2:	0212      	lsls	r2, r2, #8
    87c4:	609a      	str	r2, [r3, #8]
	config->enable_1khz_output  = false;
    87c6:	687b      	ldr	r3, [r7, #4]
    87c8:	2200      	movs	r2, #0
    87ca:	70da      	strb	r2, [r3, #3]
	config->enable_32khz_output = true;
    87cc:	687b      	ldr	r3, [r7, #4]
    87ce:	2201      	movs	r2, #1
    87d0:	711a      	strb	r2, [r3, #4]
	config->run_in_standby      = false;
    87d2:	687b      	ldr	r3, [r7, #4]
    87d4:	2200      	movs	r2, #0
    87d6:	731a      	strb	r2, [r3, #12]
	config->on_demand           = true;
    87d8:	687b      	ldr	r3, [r7, #4]
    87da:	2201      	movs	r2, #1
    87dc:	735a      	strb	r2, [r3, #13]
	config->write_once          = false;
    87de:	687b      	ldr	r3, [r7, #4]
    87e0:	2200      	movs	r2, #0
    87e2:	739a      	strb	r2, [r3, #14]
}
    87e4:	46c0      	nop			; (mov r8, r8)
    87e6:	46bd      	mov	sp, r7
    87e8:	b002      	add	sp, #8
    87ea:	bd80      	pop	{r7, pc}

000087ec <system_clock_source_osc8m_get_config_defaults>:
{
    87ec:	b580      	push	{r7, lr}
    87ee:	b082      	sub	sp, #8
    87f0:	af00      	add	r7, sp, #0
    87f2:	6078      	str	r0, [r7, #4]
	config->prescaler       = SYSTEM_OSC8M_DIV_8;
    87f4:	687b      	ldr	r3, [r7, #4]
    87f6:	2203      	movs	r2, #3
    87f8:	701a      	strb	r2, [r3, #0]
	config->run_in_standby  = false;
    87fa:	687b      	ldr	r3, [r7, #4]
    87fc:	2200      	movs	r2, #0
    87fe:	705a      	strb	r2, [r3, #1]
	config->on_demand       = true;
    8800:	687b      	ldr	r3, [r7, #4]
    8802:	2201      	movs	r2, #1
    8804:	709a      	strb	r2, [r3, #2]
}
    8806:	46c0      	nop			; (mov r8, r8)
    8808:	46bd      	mov	sp, r7
    880a:	b002      	add	sp, #8
    880c:	bd80      	pop	{r7, pc}

0000880e <system_clock_source_dfll_get_config_defaults>:
{
    880e:	b580      	push	{r7, lr}
    8810:	b082      	sub	sp, #8
    8812:	af00      	add	r7, sp, #0
    8814:	6078      	str	r0, [r7, #4]
	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
    8816:	687b      	ldr	r3, [r7, #4]
    8818:	2200      	movs	r2, #0
    881a:	701a      	strb	r2, [r3, #0]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    881c:	687b      	ldr	r3, [r7, #4]
    881e:	2200      	movs	r2, #0
    8820:	805a      	strh	r2, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8822:	687b      	ldr	r3, [r7, #4]
    8824:	2200      	movs	r2, #0
    8826:	809a      	strh	r2, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    8828:	687b      	ldr	r3, [r7, #4]
    882a:	2200      	movs	r2, #0
    882c:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    882e:	687b      	ldr	r3, [r7, #4]
    8830:	2200      	movs	r2, #0
    8832:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;
    8834:	687b      	ldr	r3, [r7, #4]
    8836:	2201      	movs	r2, #1
    8838:	705a      	strb	r2, [r3, #1]
	config->coarse_value    = 0x1f / 4; /* Midpoint */
    883a:	687b      	ldr	r3, [r7, #4]
    883c:	2207      	movs	r2, #7
    883e:	721a      	strb	r2, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
    8840:	687b      	ldr	r3, [r7, #4]
    8842:	223f      	movs	r2, #63	; 0x3f
    8844:	815a      	strh	r2, [r3, #10]
	config->coarse_max_step = 1;
    8846:	687b      	ldr	r3, [r7, #4]
    8848:	2201      	movs	r2, #1
    884a:	731a      	strb	r2, [r3, #12]
	config->fine_max_step   = 1;
    884c:	687b      	ldr	r3, [r7, #4]
    884e:	2201      	movs	r2, #1
    8850:	81da      	strh	r2, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
    8852:	687b      	ldr	r3, [r7, #4]
    8854:	2206      	movs	r2, #6
    8856:	821a      	strh	r2, [r3, #16]
}
    8858:	46c0      	nop			; (mov r8, r8)
    885a:	46bd      	mov	sp, r7
    885c:	b002      	add	sp, #8
    885e:	bd80      	pop	{r7, pc}

00008860 <system_cpu_clock_set_divider>:
{
    8860:	b580      	push	{r7, lr}
    8862:	b082      	sub	sp, #8
    8864:	af00      	add	r7, sp, #0
    8866:	0002      	movs	r2, r0
    8868:	1dfb      	adds	r3, r7, #7
    886a:	701a      	strb	r2, [r3, #0]
	PM->CPUSEL.reg = (uint32_t)divider;
    886c:	4a03      	ldr	r2, [pc, #12]	; (887c <system_cpu_clock_set_divider+0x1c>)
    886e:	1dfb      	adds	r3, r7, #7
    8870:	781b      	ldrb	r3, [r3, #0]
    8872:	7213      	strb	r3, [r2, #8]
}
    8874:	46c0      	nop			; (mov r8, r8)
    8876:	46bd      	mov	sp, r7
    8878:	b002      	add	sp, #8
    887a:	bd80      	pop	{r7, pc}
    887c:	40000400 	.word	0x40000400

00008880 <system_apb_clock_set_divider>:
{
    8880:	b580      	push	{r7, lr}
    8882:	b082      	sub	sp, #8
    8884:	af00      	add	r7, sp, #0
    8886:	0002      	movs	r2, r0
    8888:	1dfb      	adds	r3, r7, #7
    888a:	701a      	strb	r2, [r3, #0]
    888c:	1dbb      	adds	r3, r7, #6
    888e:	1c0a      	adds	r2, r1, #0
    8890:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    8892:	1dfb      	adds	r3, r7, #7
    8894:	781b      	ldrb	r3, [r3, #0]
    8896:	2b01      	cmp	r3, #1
    8898:	d008      	beq.n	88ac <system_apb_clock_set_divider+0x2c>
    889a:	2b02      	cmp	r3, #2
    889c:	d00b      	beq.n	88b6 <system_apb_clock_set_divider+0x36>
    889e:	2b00      	cmp	r3, #0
    88a0:	d10e      	bne.n	88c0 <system_apb_clock_set_divider+0x40>
			PM->APBASEL.reg = (uint32_t)divider;
    88a2:	4a0b      	ldr	r2, [pc, #44]	; (88d0 <system_apb_clock_set_divider+0x50>)
    88a4:	1dbb      	adds	r3, r7, #6
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	7253      	strb	r3, [r2, #9]
			break;
    88aa:	e00b      	b.n	88c4 <system_apb_clock_set_divider+0x44>
			PM->APBBSEL.reg = (uint32_t)divider;
    88ac:	4a08      	ldr	r2, [pc, #32]	; (88d0 <system_apb_clock_set_divider+0x50>)
    88ae:	1dbb      	adds	r3, r7, #6
    88b0:	781b      	ldrb	r3, [r3, #0]
    88b2:	7293      	strb	r3, [r2, #10]
			break;
    88b4:	e006      	b.n	88c4 <system_apb_clock_set_divider+0x44>
			PM->APBCSEL.reg = (uint32_t)divider;
    88b6:	4a06      	ldr	r2, [pc, #24]	; (88d0 <system_apb_clock_set_divider+0x50>)
    88b8:	1dbb      	adds	r3, r7, #6
    88ba:	781b      	ldrb	r3, [r3, #0]
    88bc:	72d3      	strb	r3, [r2, #11]
			break;
    88be:	e001      	b.n	88c4 <system_apb_clock_set_divider+0x44>
			return STATUS_ERR_INVALID_ARG;
    88c0:	2317      	movs	r3, #23
    88c2:	e000      	b.n	88c6 <system_apb_clock_set_divider+0x46>
	return STATUS_OK;
    88c4:	2300      	movs	r3, #0
}
    88c6:	0018      	movs	r0, r3
    88c8:	46bd      	mov	sp, r7
    88ca:	b002      	add	sp, #8
    88cc:	bd80      	pop	{r7, pc}
    88ce:	46c0      	nop			; (mov r8, r8)
    88d0:	40000400 	.word	0x40000400

000088d4 <system_flash_set_waitstates>:
 * can be found in the electrical characteristics of the device.
 *
 * \param[in] wait_states Number of wait states to use for internal flash
 */
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
    88d4:	b580      	push	{r7, lr}
    88d6:	b082      	sub	sp, #8
    88d8:	af00      	add	r7, sp, #0
    88da:	0002      	movs	r2, r0
    88dc:	1dfb      	adds	r3, r7, #7
    88de:	701a      	strb	r2, [r3, #0]
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    88e0:	4a08      	ldr	r2, [pc, #32]	; (8904 <system_flash_set_waitstates+0x30>)
    88e2:	1dfb      	adds	r3, r7, #7
    88e4:	781b      	ldrb	r3, [r3, #0]
    88e6:	210f      	movs	r1, #15
    88e8:	400b      	ands	r3, r1
    88ea:	b2d9      	uxtb	r1, r3
    88ec:	6853      	ldr	r3, [r2, #4]
    88ee:	200f      	movs	r0, #15
    88f0:	4001      	ands	r1, r0
    88f2:	0049      	lsls	r1, r1, #1
    88f4:	201e      	movs	r0, #30
    88f6:	4383      	bics	r3, r0
    88f8:	430b      	orrs	r3, r1
    88fa:	6053      	str	r3, [r2, #4]
}
    88fc:	46c0      	nop			; (mov r8, r8)
    88fe:	46bd      	mov	sp, r7
    8900:	b002      	add	sp, #8
    8902:	bd80      	pop	{r7, pc}
    8904:	41004000 	.word	0x41004000

00008908 <_system_dfll_wait_for_sync>:
/**
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
    8908:	b580      	push	{r7, lr}
    890a:	af00      	add	r7, sp, #0
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    890c:	46c0      	nop			; (mov r8, r8)
    890e:	4b04      	ldr	r3, [pc, #16]	; (8920 <_system_dfll_wait_for_sync+0x18>)
    8910:	68db      	ldr	r3, [r3, #12]
    8912:	2210      	movs	r2, #16
    8914:	4013      	ands	r3, r2
    8916:	d0fa      	beq.n	890e <_system_dfll_wait_for_sync+0x6>
		/* Wait for DFLL sync */
	}
}
    8918:	46c0      	nop			; (mov r8, r8)
    891a:	46bd      	mov	sp, r7
    891c:	bd80      	pop	{r7, pc}
    891e:	46c0      	nop			; (mov r8, r8)
    8920:	40000800 	.word	0x40000800

00008924 <_system_clock_source_dfll_set_config_errata_9905>:
		/* Wait for OSC32K sync */
	}
}

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{
    8924:	b580      	push	{r7, lr}
    8926:	af00      	add	r7, sp, #0

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    8928:	4b0f      	ldr	r3, [pc, #60]	; (8968 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    892a:	2202      	movs	r2, #2
    892c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    892e:	4b0f      	ldr	r3, [pc, #60]	; (896c <_system_clock_source_dfll_set_config_errata_9905+0x48>)
    8930:	447b      	add	r3, pc
    8932:	4798      	blx	r3

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    8934:	4a0c      	ldr	r2, [pc, #48]	; (8968 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    8936:	4b0e      	ldr	r3, [pc, #56]	; (8970 <_system_clock_source_dfll_set_config_errata_9905+0x4c>)
    8938:	447b      	add	r3, pc
    893a:	689b      	ldr	r3, [r3, #8]
    893c:	62d3      	str	r3, [r2, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    893e:	4a0a      	ldr	r2, [pc, #40]	; (8968 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    8940:	4b0c      	ldr	r3, [pc, #48]	; (8974 <_system_clock_source_dfll_set_config_errata_9905+0x50>)
    8942:	447b      	add	r3, pc
    8944:	685b      	ldr	r3, [r3, #4]
    8946:	6293      	str	r3, [r2, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = 0;
    8948:	4b07      	ldr	r3, [pc, #28]	; (8968 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    894a:	2200      	movs	r2, #0
    894c:	849a      	strh	r2, [r3, #36]	; 0x24
	_system_dfll_wait_for_sync();
    894e:	4b0a      	ldr	r3, [pc, #40]	; (8978 <_system_clock_source_dfll_set_config_errata_9905+0x54>)
    8950:	447b      	add	r3, pc
    8952:	4798      	blx	r3
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    8954:	4a04      	ldr	r2, [pc, #16]	; (8968 <_system_clock_source_dfll_set_config_errata_9905+0x44>)
    8956:	4b09      	ldr	r3, [pc, #36]	; (897c <_system_clock_source_dfll_set_config_errata_9905+0x58>)
    8958:	447b      	add	r3, pc
    895a:	681b      	ldr	r3, [r3, #0]
    895c:	b29b      	uxth	r3, r3
    895e:	8493      	strh	r3, [r2, #36]	; 0x24
}
    8960:	46c0      	nop			; (mov r8, r8)
    8962:	46bd      	mov	sp, r7
    8964:	bd80      	pop	{r7, pc}
    8966:	46c0      	nop			; (mov r8, r8)
    8968:	40000800 	.word	0x40000800
    896c:	ffffffd5 	.word	0xffffffd5
    8970:	1fff7a5c 	.word	0x1fff7a5c
    8974:	1fff7a52 	.word	0x1fff7a52
    8978:	ffffffb5 	.word	0xffffffb5
    897c:	1fff7a3c 	.word	0x1fff7a3c

00008980 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    8980:	b590      	push	{r4, r7, lr}
    8982:	b083      	sub	sp, #12
    8984:	af00      	add	r7, sp, #0
    8986:	0002      	movs	r2, r0
    8988:	1dfb      	adds	r3, r7, #7
    898a:	701a      	strb	r2, [r3, #0]
    898c:	4c32      	ldr	r4, [pc, #200]	; (8a58 <system_clock_source_get_hz+0xd8>)
    898e:	447c      	add	r4, pc
	switch (clock_source) {
    8990:	1dfb      	adds	r3, r7, #7
    8992:	781b      	ldrb	r3, [r3, #0]
    8994:	2b08      	cmp	r3, #8
    8996:	d859      	bhi.n	8a4c <system_clock_source_get_hz+0xcc>
    8998:	0018      	movs	r0, r3
    899a:	f004 ffaf 	bl	d8fc <__gnu_thumb1_case_si>
    899e:	46c0      	nop			; (mov r8, r8)
    89a0:	00000024 	.word	0x00000024
    89a4:	000000ac 	.word	0x000000ac
    89a8:	000000ac 	.word	0x000000ac
    89ac:	00000044 	.word	0x00000044
    89b0:	0000003e 	.word	0x0000003e
    89b4:	0000004a 	.word	0x0000004a
    89b8:	0000002c 	.word	0x0000002c
    89bc:	00000052 	.word	0x00000052
    89c0:	00000090 	.word	0x00000090
	case SYSTEM_CLOCK_SOURCE_XOSC:
		return _system_clock_inst.xosc.frequency;
    89c4:	4b25      	ldr	r3, [pc, #148]	; (8a5c <system_clock_source_get_hz+0xdc>)
    89c6:	447b      	add	r3, pc
    89c8:	691b      	ldr	r3, [r3, #16]
    89ca:	e040      	b.n	8a4e <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_OSC8M:
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    89cc:	4b24      	ldr	r3, [pc, #144]	; (8a60 <system_clock_source_get_hz+0xe0>)
    89ce:	6a1b      	ldr	r3, [r3, #32]
    89d0:	059b      	lsls	r3, r3, #22
    89d2:	0f9b      	lsrs	r3, r3, #30
    89d4:	b2db      	uxtb	r3, r3
    89d6:	001a      	movs	r2, r3
    89d8:	4b22      	ldr	r3, [pc, #136]	; (8a64 <system_clock_source_get_hz+0xe4>)
    89da:	40d3      	lsrs	r3, r2
    89dc:	e037      	b.n	8a4e <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		return 32768UL;
    89de:	2380      	movs	r3, #128	; 0x80
    89e0:	021b      	lsls	r3, r3, #8
    89e2:	e034      	b.n	8a4e <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		return 32768UL;
    89e4:	2380      	movs	r3, #128	; 0x80
    89e6:	021b      	lsls	r3, r3, #8
    89e8:	e031      	b.n	8a4e <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		return _system_clock_inst.xosc32k.frequency;
    89ea:	4b1f      	ldr	r3, [pc, #124]	; (8a68 <system_clock_source_get_hz+0xe8>)
    89ec:	447b      	add	r3, pc
    89ee:	695b      	ldr	r3, [r3, #20]
    89f0:	e02d      	b.n	8a4e <system_clock_source_get_hz+0xce>

	case SYSTEM_CLOCK_SOURCE_DFLL:

		/* Check if the DFLL has been configured */
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    89f2:	4b1e      	ldr	r3, [pc, #120]	; (8a6c <system_clock_source_get_hz+0xec>)
    89f4:	447b      	add	r3, pc
    89f6:	681b      	ldr	r3, [r3, #0]
    89f8:	2202      	movs	r2, #2
    89fa:	4013      	ands	r3, r2
    89fc:	d101      	bne.n	8a02 <system_clock_source_get_hz+0x82>
			return 0;
    89fe:	2300      	movs	r3, #0
    8a00:	e025      	b.n	8a4e <system_clock_source_get_hz+0xce>

		/* Make sure that the DFLL module is ready */
		_system_dfll_wait_for_sync();
    8a02:	4b1b      	ldr	r3, [pc, #108]	; (8a70 <system_clock_source_get_hz+0xf0>)
    8a04:	447b      	add	r3, pc
    8a06:	4798      	blx	r3

		/* Check if operating in closed loop mode */
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    8a08:	4b1a      	ldr	r3, [pc, #104]	; (8a74 <system_clock_source_get_hz+0xf4>)
    8a0a:	447b      	add	r3, pc
    8a0c:	681b      	ldr	r3, [r3, #0]
    8a0e:	2204      	movs	r2, #4
    8a10:	4013      	ands	r3, r2
    8a12:	d00b      	beq.n	8a2c <system_clock_source_get_hz+0xac>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    8a14:	2000      	movs	r0, #0
    8a16:	4b18      	ldr	r3, [pc, #96]	; (8a78 <system_clock_source_get_hz+0xf8>)
    8a18:	58e3      	ldr	r3, [r4, r3]
    8a1a:	4798      	blx	r3
    8a1c:	0002      	movs	r2, r0
					(_system_clock_inst.dfll.mul & 0xffff);
    8a1e:	4b17      	ldr	r3, [pc, #92]	; (8a7c <system_clock_source_get_hz+0xfc>)
    8a20:	447b      	add	r3, pc
    8a22:	689b      	ldr	r3, [r3, #8]
    8a24:	041b      	lsls	r3, r3, #16
    8a26:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    8a28:	4353      	muls	r3, r2
    8a2a:	e010      	b.n	8a4e <system_clock_source_get_hz+0xce>
		}

		return 48000000UL;
    8a2c:	4b14      	ldr	r3, [pc, #80]	; (8a80 <system_clock_source_get_hz+0x100>)
    8a2e:	e00e      	b.n	8a4e <system_clock_source_get_hz+0xce>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    8a30:	4a0b      	ldr	r2, [pc, #44]	; (8a60 <system_clock_source_get_hz+0xe0>)
    8a32:	2350      	movs	r3, #80	; 0x50
    8a34:	5cd3      	ldrb	r3, [r2, r3]
    8a36:	b2db      	uxtb	r3, r3
    8a38:	001a      	movs	r2, r3
    8a3a:	2304      	movs	r3, #4
    8a3c:	4013      	ands	r3, r2
    8a3e:	d101      	bne.n	8a44 <system_clock_source_get_hz+0xc4>
			return 0;
    8a40:	2300      	movs	r3, #0
    8a42:	e004      	b.n	8a4e <system_clock_source_get_hz+0xce>
		}

		return _system_clock_inst.dpll.frequency;
    8a44:	4b0f      	ldr	r3, [pc, #60]	; (8a84 <system_clock_source_get_hz+0x104>)
    8a46:	447b      	add	r3, pc
    8a48:	68db      	ldr	r3, [r3, #12]
    8a4a:	e000      	b.n	8a4e <system_clock_source_get_hz+0xce>
#endif

	default:
		return 0;
    8a4c:	2300      	movs	r3, #0
	}
}
    8a4e:	0018      	movs	r0, r3
    8a50:	46bd      	mov	sp, r7
    8a52:	b003      	add	sp, #12
    8a54:	bd90      	pop	{r4, r7, pc}
    8a56:	46c0      	nop			; (mov r8, r8)
    8a58:	00006aa2 	.word	0x00006aa2
    8a5c:	1fff79ce 	.word	0x1fff79ce
    8a60:	40000800 	.word	0x40000800
    8a64:	007a1200 	.word	0x007a1200
    8a68:	1fff79a8 	.word	0x1fff79a8
    8a6c:	1fff79a0 	.word	0x1fff79a0
    8a70:	ffffff01 	.word	0xffffff01
    8a74:	1fff798a 	.word	0x1fff798a
    8a78:	000001c4 	.word	0x000001c4
    8a7c:	1fff7974 	.word	0x1fff7974
    8a80:	02dc6c00 	.word	0x02dc6c00
    8a84:	1fff794e 	.word	0x1fff794e

00008a88 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    8a88:	b580      	push	{r7, lr}
    8a8a:	b084      	sub	sp, #16
    8a8c:	af00      	add	r7, sp, #0
    8a8e:	6078      	str	r0, [r7, #4]
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    8a90:	4b1a      	ldr	r3, [pc, #104]	; (8afc <system_clock_source_osc8m_set_config+0x74>)
    8a92:	6a1b      	ldr	r3, [r3, #32]
    8a94:	60fb      	str	r3, [r7, #12]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    8a96:	687b      	ldr	r3, [r7, #4]
    8a98:	781b      	ldrb	r3, [r3, #0]
    8a9a:	1c1a      	adds	r2, r3, #0
    8a9c:	2303      	movs	r3, #3
    8a9e:	4013      	ands	r3, r2
    8aa0:	b2da      	uxtb	r2, r3
    8aa2:	230d      	movs	r3, #13
    8aa4:	18fb      	adds	r3, r7, r3
    8aa6:	2103      	movs	r1, #3
    8aa8:	400a      	ands	r2, r1
    8aaa:	0010      	movs	r0, r2
    8aac:	781a      	ldrb	r2, [r3, #0]
    8aae:	2103      	movs	r1, #3
    8ab0:	438a      	bics	r2, r1
    8ab2:	1c11      	adds	r1, r2, #0
    8ab4:	1c02      	adds	r2, r0, #0
    8ab6:	430a      	orrs	r2, r1
    8ab8:	701a      	strb	r2, [r3, #0]
	temp.bit.ONDEMAND = config->on_demand;
    8aba:	687b      	ldr	r3, [r7, #4]
    8abc:	789a      	ldrb	r2, [r3, #2]
    8abe:	230c      	movs	r3, #12
    8ac0:	18fb      	adds	r3, r7, r3
    8ac2:	01d0      	lsls	r0, r2, #7
    8ac4:	781a      	ldrb	r2, [r3, #0]
    8ac6:	217f      	movs	r1, #127	; 0x7f
    8ac8:	400a      	ands	r2, r1
    8aca:	1c11      	adds	r1, r2, #0
    8acc:	1c02      	adds	r2, r0, #0
    8ace:	430a      	orrs	r2, r1
    8ad0:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    8ad2:	687b      	ldr	r3, [r7, #4]
    8ad4:	785a      	ldrb	r2, [r3, #1]
    8ad6:	230c      	movs	r3, #12
    8ad8:	18fb      	adds	r3, r7, r3
    8ada:	2101      	movs	r1, #1
    8adc:	400a      	ands	r2, r1
    8ade:	0190      	lsls	r0, r2, #6
    8ae0:	781a      	ldrb	r2, [r3, #0]
    8ae2:	2140      	movs	r1, #64	; 0x40
    8ae4:	438a      	bics	r2, r1
    8ae6:	1c11      	adds	r1, r2, #0
    8ae8:	1c02      	adds	r2, r0, #0
    8aea:	430a      	orrs	r2, r1
    8aec:	701a      	strb	r2, [r3, #0]

	SYSCTRL->OSC8M = temp;
    8aee:	4b03      	ldr	r3, [pc, #12]	; (8afc <system_clock_source_osc8m_set_config+0x74>)
    8af0:	68fa      	ldr	r2, [r7, #12]
    8af2:	621a      	str	r2, [r3, #32]
}
    8af4:	46c0      	nop			; (mov r8, r8)
    8af6:	46bd      	mov	sp, r7
    8af8:	b004      	add	sp, #16
    8afa:	bd80      	pop	{r7, pc}
    8afc:	40000800 	.word	0x40000800

00008b00 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    8b00:	b580      	push	{r7, lr}
    8b02:	b084      	sub	sp, #16
    8b04:	af00      	add	r7, sp, #0
    8b06:	6078      	str	r0, [r7, #4]
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    8b08:	4a43      	ldr	r2, [pc, #268]	; (8c18 <system_clock_source_xosc32k_set_config+0x118>)
    8b0a:	230c      	movs	r3, #12
    8b0c:	18fb      	adds	r3, r7, r3
    8b0e:	8a92      	ldrh	r2, [r2, #20]
    8b10:	801a      	strh	r2, [r3, #0]

	temp.bit.STARTUP = config->startup_time;
    8b12:	687b      	ldr	r3, [r7, #4]
    8b14:	785b      	ldrb	r3, [r3, #1]
    8b16:	1c1a      	adds	r2, r3, #0
    8b18:	2307      	movs	r3, #7
    8b1a:	4013      	ands	r3, r2
    8b1c:	b2da      	uxtb	r2, r3
    8b1e:	230c      	movs	r3, #12
    8b20:	18fb      	adds	r3, r7, r3
    8b22:	2107      	movs	r1, #7
    8b24:	400a      	ands	r2, r1
    8b26:	0010      	movs	r0, r2
    8b28:	785a      	ldrb	r2, [r3, #1]
    8b2a:	2107      	movs	r1, #7
    8b2c:	438a      	bics	r2, r1
    8b2e:	1c11      	adds	r1, r2, #0
    8b30:	1c02      	adds	r2, r0, #0
    8b32:	430a      	orrs	r2, r1
    8b34:	705a      	strb	r2, [r3, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    8b36:	687b      	ldr	r3, [r7, #4]
    8b38:	781b      	ldrb	r3, [r3, #0]
    8b3a:	2b00      	cmp	r3, #0
    8b3c:	d106      	bne.n	8b4c <system_clock_source_xosc32k_set_config+0x4c>
		temp.bit.XTALEN = 1;
    8b3e:	230c      	movs	r3, #12
    8b40:	18fb      	adds	r3, r7, r3
    8b42:	781a      	ldrb	r2, [r3, #0]
    8b44:	2104      	movs	r1, #4
    8b46:	430a      	orrs	r2, r1
    8b48:	701a      	strb	r2, [r3, #0]
    8b4a:	e005      	b.n	8b58 <system_clock_source_xosc32k_set_config+0x58>
	} else {
		temp.bit.XTALEN = 0;
    8b4c:	230c      	movs	r3, #12
    8b4e:	18fb      	adds	r3, r7, r3
    8b50:	781a      	ldrb	r2, [r3, #0]
    8b52:	2104      	movs	r1, #4
    8b54:	438a      	bics	r2, r1
    8b56:	701a      	strb	r2, [r3, #0]
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    8b58:	687b      	ldr	r3, [r7, #4]
    8b5a:	789a      	ldrb	r2, [r3, #2]
    8b5c:	230c      	movs	r3, #12
    8b5e:	18fb      	adds	r3, r7, r3
    8b60:	2101      	movs	r1, #1
    8b62:	400a      	ands	r2, r1
    8b64:	0150      	lsls	r0, r2, #5
    8b66:	781a      	ldrb	r2, [r3, #0]
    8b68:	2120      	movs	r1, #32
    8b6a:	438a      	bics	r2, r1
    8b6c:	1c11      	adds	r1, r2, #0
    8b6e:	1c02      	adds	r2, r0, #0
    8b70:	430a      	orrs	r2, r1
    8b72:	701a      	strb	r2, [r3, #0]
	temp.bit.EN1K = config->enable_1khz_output;
    8b74:	687b      	ldr	r3, [r7, #4]
    8b76:	78da      	ldrb	r2, [r3, #3]
    8b78:	230c      	movs	r3, #12
    8b7a:	18fb      	adds	r3, r7, r3
    8b7c:	2101      	movs	r1, #1
    8b7e:	400a      	ands	r2, r1
    8b80:	0110      	lsls	r0, r2, #4
    8b82:	781a      	ldrb	r2, [r3, #0]
    8b84:	2110      	movs	r1, #16
    8b86:	438a      	bics	r2, r1
    8b88:	1c11      	adds	r1, r2, #0
    8b8a:	1c02      	adds	r2, r0, #0
    8b8c:	430a      	orrs	r2, r1
    8b8e:	701a      	strb	r2, [r3, #0]
	temp.bit.EN32K = config->enable_32khz_output;
    8b90:	687b      	ldr	r3, [r7, #4]
    8b92:	791a      	ldrb	r2, [r3, #4]
    8b94:	230c      	movs	r3, #12
    8b96:	18fb      	adds	r3, r7, r3
    8b98:	2101      	movs	r1, #1
    8b9a:	400a      	ands	r2, r1
    8b9c:	00d0      	lsls	r0, r2, #3
    8b9e:	781a      	ldrb	r2, [r3, #0]
    8ba0:	2108      	movs	r1, #8
    8ba2:	438a      	bics	r2, r1
    8ba4:	1c11      	adds	r1, r2, #0
    8ba6:	1c02      	adds	r2, r0, #0
    8ba8:	430a      	orrs	r2, r1
    8baa:	701a      	strb	r2, [r3, #0]

	temp.bit.ONDEMAND = config->on_demand;
    8bac:	687b      	ldr	r3, [r7, #4]
    8bae:	7b5a      	ldrb	r2, [r3, #13]
    8bb0:	230c      	movs	r3, #12
    8bb2:	18fb      	adds	r3, r7, r3
    8bb4:	01d0      	lsls	r0, r2, #7
    8bb6:	781a      	ldrb	r2, [r3, #0]
    8bb8:	217f      	movs	r1, #127	; 0x7f
    8bba:	400a      	ands	r2, r1
    8bbc:	1c11      	adds	r1, r2, #0
    8bbe:	1c02      	adds	r2, r0, #0
    8bc0:	430a      	orrs	r2, r1
    8bc2:	701a      	strb	r2, [r3, #0]
	temp.bit.RUNSTDBY = config->run_in_standby;
    8bc4:	687b      	ldr	r3, [r7, #4]
    8bc6:	7b1a      	ldrb	r2, [r3, #12]
    8bc8:	230c      	movs	r3, #12
    8bca:	18fb      	adds	r3, r7, r3
    8bcc:	2101      	movs	r1, #1
    8bce:	400a      	ands	r2, r1
    8bd0:	0190      	lsls	r0, r2, #6
    8bd2:	781a      	ldrb	r2, [r3, #0]
    8bd4:	2140      	movs	r1, #64	; 0x40
    8bd6:	438a      	bics	r2, r1
    8bd8:	1c11      	adds	r1, r2, #0
    8bda:	1c02      	adds	r2, r0, #0
    8bdc:	430a      	orrs	r2, r1
    8bde:	701a      	strb	r2, [r3, #0]
	temp.bit.WRTLOCK  = config->write_once;
    8be0:	687b      	ldr	r3, [r7, #4]
    8be2:	7b9a      	ldrb	r2, [r3, #14]
    8be4:	230c      	movs	r3, #12
    8be6:	18fb      	adds	r3, r7, r3
    8be8:	2101      	movs	r1, #1
    8bea:	400a      	ands	r2, r1
    8bec:	0110      	lsls	r0, r2, #4
    8bee:	785a      	ldrb	r2, [r3, #1]
    8bf0:	2110      	movs	r1, #16
    8bf2:	438a      	bics	r2, r1
    8bf4:	1c11      	adds	r1, r2, #0
    8bf6:	1c02      	adds	r2, r0, #0
    8bf8:	430a      	orrs	r2, r1
    8bfa:	705a      	strb	r2, [r3, #1]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    8bfc:	687b      	ldr	r3, [r7, #4]
    8bfe:	689a      	ldr	r2, [r3, #8]
    8c00:	4b06      	ldr	r3, [pc, #24]	; (8c1c <system_clock_source_xosc32k_set_config+0x11c>)
    8c02:	447b      	add	r3, pc
    8c04:	615a      	str	r2, [r3, #20]

	SYSCTRL->XOSC32K = temp;
    8c06:	4a04      	ldr	r2, [pc, #16]	; (8c18 <system_clock_source_xosc32k_set_config+0x118>)
    8c08:	230c      	movs	r3, #12
    8c0a:	18fb      	adds	r3, r7, r3
    8c0c:	881b      	ldrh	r3, [r3, #0]
    8c0e:	8293      	strh	r3, [r2, #20]
}
    8c10:	46c0      	nop			; (mov r8, r8)
    8c12:	46bd      	mov	sp, r7
    8c14:	b004      	add	sp, #16
    8c16:	bd80      	pop	{r7, pc}
    8c18:	40000800 	.word	0x40000800
    8c1c:	1fff7792 	.word	0x1fff7792

00008c20 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    8c20:	b580      	push	{r7, lr}
    8c22:	b082      	sub	sp, #8
    8c24:	af00      	add	r7, sp, #0
    8c26:	6078      	str	r0, [r7, #4]
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8c28:	687b      	ldr	r3, [r7, #4]
    8c2a:	7a1b      	ldrb	r3, [r3, #8]
    8c2c:	029b      	lsls	r3, r3, #10
    8c2e:	041b      	lsls	r3, r3, #16
    8c30:	0c1a      	lsrs	r2, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    8c32:	687b      	ldr	r3, [r7, #4]
    8c34:	895b      	ldrh	r3, [r3, #10]
    8c36:	059b      	lsls	r3, r3, #22
    8c38:	0d9b      	lsrs	r3, r3, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    8c3a:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.val =
    8c3c:	4b2e      	ldr	r3, [pc, #184]	; (8cf8 <system_clock_source_dfll_set_config+0xd8>)
    8c3e:	447b      	add	r3, pc
    8c40:	605a      	str	r2, [r3, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    8c42:	687b      	ldr	r3, [r7, #4]
    8c44:	799a      	ldrb	r2, [r3, #6]
			(uint32_t)config->stable_tracking |
    8c46:	687b      	ldr	r3, [r7, #4]
    8c48:	79db      	ldrb	r3, [r3, #7]
			(uint32_t)config->wakeup_lock     |
    8c4a:	4313      	orrs	r3, r2
    8c4c:	b2db      	uxtb	r3, r3
    8c4e:	001a      	movs	r2, r3
			(uint32_t)config->quick_lock      |
    8c50:	687b      	ldr	r3, [r7, #4]
    8c52:	885b      	ldrh	r3, [r3, #2]
			(uint32_t)config->stable_tracking |
    8c54:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
    8c56:	687a      	ldr	r2, [r7, #4]
    8c58:	8892      	ldrh	r2, [r2, #4]
			(uint32_t)config->quick_lock      |
    8c5a:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    8c5c:	687b      	ldr	r3, [r7, #4]
    8c5e:	785b      	ldrb	r3, [r3, #1]
    8c60:	01db      	lsls	r3, r3, #7
			(uint32_t)config->chill_cycle     |
    8c62:	431a      	orrs	r2, r3
	_system_clock_inst.dfll.control =
    8c64:	4b25      	ldr	r3, [pc, #148]	; (8cfc <system_clock_source_dfll_set_config+0xdc>)
    8c66:	447b      	add	r3, pc
    8c68:	601a      	str	r2, [r3, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    8c6a:	687b      	ldr	r3, [r7, #4]
    8c6c:	781b      	ldrb	r3, [r3, #0]
    8c6e:	2b04      	cmp	r3, #4
    8c70:	d119      	bne.n	8ca6 <system_clock_source_dfll_set_config+0x86>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8c72:	687b      	ldr	r3, [r7, #4]
    8c74:	7b1b      	ldrb	r3, [r3, #12]
    8c76:	069b      	lsls	r3, r3, #26
    8c78:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8c7a:	687b      	ldr	r3, [r7, #4]
    8c7c:	89db      	ldrh	r3, [r3, #14]
    8c7e:	041b      	lsls	r3, r3, #16
    8c80:	0019      	movs	r1, r3
    8c82:	4b1f      	ldr	r3, [pc, #124]	; (8d00 <system_clock_source_dfll_set_config+0xe0>)
    8c84:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8c86:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    8c88:	687a      	ldr	r2, [r7, #4]
    8c8a:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8c8c:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    8c8e:	4b1d      	ldr	r3, [pc, #116]	; (8d04 <system_clock_source_dfll_set_config+0xe4>)
    8c90:	447b      	add	r3, pc
    8c92:	609a      	str	r2, [r3, #8]

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
    8c94:	4b1c      	ldr	r3, [pc, #112]	; (8d08 <system_clock_source_dfll_set_config+0xe8>)
    8c96:	447b      	add	r3, pc
    8c98:	681b      	ldr	r3, [r3, #0]
    8c9a:	687a      	ldr	r2, [r7, #4]
    8c9c:	7812      	ldrb	r2, [r2, #0]
    8c9e:	431a      	orrs	r2, r3
    8ca0:	4b1a      	ldr	r3, [pc, #104]	; (8d0c <system_clock_source_dfll_set_config+0xec>)
    8ca2:	447b      	add	r3, pc
    8ca4:	601a      	str	r2, [r3, #0]
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    8ca6:	687b      	ldr	r3, [r7, #4]
    8ca8:	781b      	ldrb	r3, [r3, #0]
    8caa:	2b20      	cmp	r3, #32
    8cac:	d11f      	bne.n	8cee <system_clock_source_dfll_set_config+0xce>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8cae:	687b      	ldr	r3, [r7, #4]
    8cb0:	7b1b      	ldrb	r3, [r3, #12]
    8cb2:	069b      	lsls	r3, r3, #26
    8cb4:	001a      	movs	r2, r3
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8cb6:	687b      	ldr	r3, [r7, #4]
    8cb8:	89db      	ldrh	r3, [r3, #14]
    8cba:	041b      	lsls	r3, r3, #16
    8cbc:	0019      	movs	r1, r3
    8cbe:	4b10      	ldr	r3, [pc, #64]	; (8d00 <system_clock_source_dfll_set_config+0xe0>)
    8cc0:	400b      	ands	r3, r1
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    8cc2:	4313      	orrs	r3, r2
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    8cc4:	687a      	ldr	r2, [r7, #4]
    8cc6:	8a12      	ldrh	r2, [r2, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    8cc8:	431a      	orrs	r2, r3
		_system_clock_inst.dfll.mul =
    8cca:	4b11      	ldr	r3, [pc, #68]	; (8d10 <system_clock_source_dfll_set_config+0xf0>)
    8ccc:	447b      	add	r3, pc
    8cce:	609a      	str	r2, [r3, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    8cd0:	4b10      	ldr	r3, [pc, #64]	; (8d14 <system_clock_source_dfll_set_config+0xf4>)
    8cd2:	447b      	add	r3, pc
    8cd4:	681b      	ldr	r3, [r3, #0]
    8cd6:	687a      	ldr	r2, [r7, #4]
    8cd8:	7812      	ldrb	r2, [r2, #0]
    8cda:	2104      	movs	r1, #4
    8cdc:	430a      	orrs	r2, r1
    8cde:	b2d2      	uxtb	r2, r2
    8ce0:	4313      	orrs	r3, r2
    8ce2:	2280      	movs	r2, #128	; 0x80
    8ce4:	00d2      	lsls	r2, r2, #3
    8ce6:	431a      	orrs	r2, r3
    8ce8:	4b0b      	ldr	r3, [pc, #44]	; (8d18 <system_clock_source_dfll_set_config+0xf8>)
    8cea:	447b      	add	r3, pc
    8cec:	601a      	str	r2, [r3, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    8cee:	46c0      	nop			; (mov r8, r8)
    8cf0:	46bd      	mov	sp, r7
    8cf2:	b002      	add	sp, #8
    8cf4:	bd80      	pop	{r7, pc}
    8cf6:	46c0      	nop			; (mov r8, r8)
    8cf8:	1fff7756 	.word	0x1fff7756
    8cfc:	1fff772e 	.word	0x1fff772e
    8d00:	03ff0000 	.word	0x03ff0000
    8d04:	1fff7704 	.word	0x1fff7704
    8d08:	1fff76fe 	.word	0x1fff76fe
    8d0c:	1fff76f2 	.word	0x1fff76f2
    8d10:	1fff76c8 	.word	0x1fff76c8
    8d14:	1fff76c2 	.word	0x1fff76c2
    8d18:	1fff76aa 	.word	0x1fff76aa

00008d1c <system_clock_source_enable>:
 * \retval STATUS_ERR_INVALID_ARG  The clock source is not available on this
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
    8d1c:	b580      	push	{r7, lr}
    8d1e:	b082      	sub	sp, #8
    8d20:	af00      	add	r7, sp, #0
    8d22:	0002      	movs	r2, r0
    8d24:	1dfb      	adds	r3, r7, #7
    8d26:	701a      	strb	r2, [r3, #0]
	switch (clock_source) {
    8d28:	1dfb      	adds	r3, r7, #7
    8d2a:	781b      	ldrb	r3, [r3, #0]
    8d2c:	2b08      	cmp	r3, #8
    8d2e:	d84f      	bhi.n	8dd0 <system_clock_source_enable+0xb4>
    8d30:	0018      	movs	r0, r3
    8d32:	f004 fde3 	bl	d8fc <__gnu_thumb1_case_si>
    8d36:	46c0      	nop			; (mov r8, r8)
    8d38:	00000042 	.word	0x00000042
    8d3c:	00000098 	.word	0x00000098
    8d40:	00000098 	.word	0x00000098
    8d44:	00000094 	.word	0x00000094
    8d48:	00000034 	.word	0x00000034
    8d4c:	00000054 	.word	0x00000054
    8d50:	00000024 	.word	0x00000024
    8d54:	00000066 	.word	0x00000066
    8d58:	0000007e 	.word	0x0000007e
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    8d5c:	4b20      	ldr	r3, [pc, #128]	; (8de0 <system_clock_source_enable+0xc4>)
    8d5e:	4a20      	ldr	r2, [pc, #128]	; (8de0 <system_clock_source_enable+0xc4>)
    8d60:	6a12      	ldr	r2, [r2, #32]
    8d62:	2102      	movs	r1, #2
    8d64:	430a      	orrs	r2, r1
    8d66:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
    8d68:	2300      	movs	r3, #0
    8d6a:	e034      	b.n	8dd6 <system_clock_source_enable+0xba>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    8d6c:	4b1c      	ldr	r3, [pc, #112]	; (8de0 <system_clock_source_enable+0xc4>)
    8d6e:	4a1c      	ldr	r2, [pc, #112]	; (8de0 <system_clock_source_enable+0xc4>)
    8d70:	6992      	ldr	r2, [r2, #24]
    8d72:	2102      	movs	r1, #2
    8d74:	430a      	orrs	r2, r1
    8d76:	619a      	str	r2, [r3, #24]
		break;
    8d78:	e02c      	b.n	8dd4 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    8d7a:	4a19      	ldr	r2, [pc, #100]	; (8de0 <system_clock_source_enable+0xc4>)
    8d7c:	4b18      	ldr	r3, [pc, #96]	; (8de0 <system_clock_source_enable+0xc4>)
    8d7e:	8a1b      	ldrh	r3, [r3, #16]
    8d80:	b29b      	uxth	r3, r3
    8d82:	2102      	movs	r1, #2
    8d84:	430b      	orrs	r3, r1
    8d86:	b29b      	uxth	r3, r3
    8d88:	8213      	strh	r3, [r2, #16]
		break;
    8d8a:	e023      	b.n	8dd4 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    8d8c:	4a14      	ldr	r2, [pc, #80]	; (8de0 <system_clock_source_enable+0xc4>)
    8d8e:	4b14      	ldr	r3, [pc, #80]	; (8de0 <system_clock_source_enable+0xc4>)
    8d90:	8a9b      	ldrh	r3, [r3, #20]
    8d92:	b29b      	uxth	r3, r3
    8d94:	2102      	movs	r1, #2
    8d96:	430b      	orrs	r3, r1
    8d98:	b29b      	uxth	r3, r3
    8d9a:	8293      	strh	r3, [r2, #20]
		break;
    8d9c:	e01a      	b.n	8dd4 <system_clock_source_enable+0xb8>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    8d9e:	4b11      	ldr	r3, [pc, #68]	; (8de4 <system_clock_source_enable+0xc8>)
    8da0:	447b      	add	r3, pc
    8da2:	681b      	ldr	r3, [r3, #0]
    8da4:	2202      	movs	r2, #2
    8da6:	431a      	orrs	r2, r3
    8da8:	4b0f      	ldr	r3, [pc, #60]	; (8de8 <system_clock_source_enable+0xcc>)
    8daa:	447b      	add	r3, pc
    8dac:	601a      	str	r2, [r3, #0]
		_system_clock_source_dfll_set_config_errata_9905();
    8dae:	4b0f      	ldr	r3, [pc, #60]	; (8dec <system_clock_source_enable+0xd0>)
    8db0:	447b      	add	r3, pc
    8db2:	4798      	blx	r3
		break;
    8db4:	e00e      	b.n	8dd4 <system_clock_source_enable+0xb8>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    8db6:	4a0a      	ldr	r2, [pc, #40]	; (8de0 <system_clock_source_enable+0xc4>)
    8db8:	4909      	ldr	r1, [pc, #36]	; (8de0 <system_clock_source_enable+0xc4>)
    8dba:	2344      	movs	r3, #68	; 0x44
    8dbc:	5ccb      	ldrb	r3, [r1, r3]
    8dbe:	b2db      	uxtb	r3, r3
    8dc0:	2102      	movs	r1, #2
    8dc2:	430b      	orrs	r3, r1
    8dc4:	b2d9      	uxtb	r1, r3
    8dc6:	2344      	movs	r3, #68	; 0x44
    8dc8:	54d1      	strb	r1, [r2, r3]
		break;
    8dca:	e003      	b.n	8dd4 <system_clock_source_enable+0xb8>
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
    8dcc:	2300      	movs	r3, #0
    8dce:	e002      	b.n	8dd6 <system_clock_source_enable+0xba>

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    8dd0:	2317      	movs	r3, #23
    8dd2:	e000      	b.n	8dd6 <system_clock_source_enable+0xba>
	}

	return STATUS_OK;
    8dd4:	2300      	movs	r3, #0
}
    8dd6:	0018      	movs	r0, r3
    8dd8:	46bd      	mov	sp, r7
    8dda:	b002      	add	sp, #8
    8ddc:	bd80      	pop	{r7, pc}
    8dde:	46c0      	nop			; (mov r8, r8)
    8de0:	40000800 	.word	0x40000800
    8de4:	1fff75f4 	.word	0x1fff75f4
    8de8:	1fff75ea 	.word	0x1fff75ea
    8dec:	fffffb71 	.word	0xfffffb71

00008df0 <system_clock_source_is_ready>:
 * \retval true   Clock source is enabled and ready
 * \retval false  Clock source is disabled or not yet ready
 */
bool system_clock_source_is_ready(
		const enum system_clock_source clock_source)
{
    8df0:	b580      	push	{r7, lr}
    8df2:	b084      	sub	sp, #16
    8df4:	af00      	add	r7, sp, #0
    8df6:	0002      	movs	r2, r0
    8df8:	1dfb      	adds	r3, r7, #7
    8dfa:	701a      	strb	r2, [r3, #0]
	uint32_t mask = 0;
    8dfc:	2300      	movs	r3, #0
    8dfe:	60fb      	str	r3, [r7, #12]

	switch (clock_source) {
    8e00:	1dfb      	adds	r3, r7, #7
    8e02:	781b      	ldrb	r3, [r3, #0]
    8e04:	2b08      	cmp	r3, #8
    8e06:	d832      	bhi.n	8e6e <system_clock_source_is_ready+0x7e>
    8e08:	0018      	movs	r0, r3
    8e0a:	f004 fd77 	bl	d8fc <__gnu_thumb1_case_si>
    8e0e:	46c0      	nop			; (mov r8, r8)
    8e10:	00000030 	.word	0x00000030
    8e14:	0000005e 	.word	0x0000005e
    8e18:	0000005e 	.word	0x0000005e
    8e1c:	0000005a 	.word	0x0000005a
    8e20:	0000002a 	.word	0x0000002a
    8e24:	00000036 	.word	0x00000036
    8e28:	00000024 	.word	0x00000024
    8e2c:	0000003c 	.word	0x0000003c
    8e30:	00000042 	.word	0x00000042
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		mask = SYSCTRL_PCLKSR_OSC8MRDY;
    8e34:	2308      	movs	r3, #8
    8e36:	60fb      	str	r3, [r7, #12]
		break;
    8e38:	e01b      	b.n	8e72 <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		mask = SYSCTRL_PCLKSR_OSC32KRDY;
    8e3a:	2304      	movs	r3, #4
    8e3c:	60fb      	str	r3, [r7, #12]
		break;
    8e3e:	e018      	b.n	8e72 <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		mask = SYSCTRL_PCLKSR_XOSCRDY;
    8e40:	2301      	movs	r3, #1
    8e42:	60fb      	str	r3, [r7, #12]
		break;
    8e44:	e015      	b.n	8e72 <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		mask = SYSCTRL_PCLKSR_XOSC32KRDY;
    8e46:	2302      	movs	r3, #2
    8e48:	60fb      	str	r3, [r7, #12]
		break;
    8e4a:	e012      	b.n	8e72 <system_clock_source_is_ready+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
			mask = (SYSCTRL_PCLKSR_DFLLRDY |
    8e4c:	23d0      	movs	r3, #208	; 0xd0
    8e4e:	60fb      	str	r3, [r7, #12]
			        SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC);
		} else {
			mask = SYSCTRL_PCLKSR_DFLLRDY;
		}
		break;
    8e50:	e00f      	b.n	8e72 <system_clock_source_is_ready+0x82>

#ifdef FEATURE_SYSTEM_CLOCK_DPLL
	case SYSTEM_CLOCK_SOURCE_DPLL:
		return ((SYSCTRL->DPLLSTATUS.reg &
    8e52:	4a0e      	ldr	r2, [pc, #56]	; (8e8c <system_clock_source_is_ready+0x9c>)
    8e54:	2350      	movs	r3, #80	; 0x50
    8e56:	5cd3      	ldrb	r3, [r2, r3]
    8e58:	b2db      	uxtb	r3, r3
    8e5a:	001a      	movs	r2, r3
    8e5c:	2303      	movs	r3, #3
    8e5e:	4013      	ands	r3, r2
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK)) ==
    8e60:	3b03      	subs	r3, #3
    8e62:	425a      	negs	r2, r3
    8e64:	4153      	adcs	r3, r2
    8e66:	b2db      	uxtb	r3, r3
    8e68:	e00c      	b.n	8e84 <system_clock_source_is_ready+0x94>
				(SYSCTRL_DPLLSTATUS_CLKRDY | SYSCTRL_DPLLSTATUS_LOCK));
#endif

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Not possible to disable */
		return true;
    8e6a:	2301      	movs	r3, #1
    8e6c:	e00a      	b.n	8e84 <system_clock_source_is_ready+0x94>

	default:
		return false;
    8e6e:	2300      	movs	r3, #0
    8e70:	e008      	b.n	8e84 <system_clock_source_is_ready+0x94>
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    8e72:	4b06      	ldr	r3, [pc, #24]	; (8e8c <system_clock_source_is_ready+0x9c>)
    8e74:	68db      	ldr	r3, [r3, #12]
    8e76:	68fa      	ldr	r2, [r7, #12]
    8e78:	401a      	ands	r2, r3
    8e7a:	68fb      	ldr	r3, [r7, #12]
    8e7c:	1ad3      	subs	r3, r2, r3
    8e7e:	425a      	negs	r2, r3
    8e80:	4153      	adcs	r3, r2
    8e82:	b2db      	uxtb	r3, r3
}
    8e84:	0018      	movs	r0, r3
    8e86:	46bd      	mov	sp, r7
    8e88:	b004      	add	sp, #16
    8e8a:	bd80      	pop	{r7, pc}
    8e8c:	40000800 	.word	0x40000800

00008e90 <_switch_peripheral_gclk>:
 *
 * Switch all peripheral clock to a not enabled general clock
 * to save power.
 */
static void _switch_peripheral_gclk(void)
{
    8e90:	b590      	push	{r4, r7, lr}
    8e92:	b083      	sub	sp, #12
    8e94:	af00      	add	r7, sp, #0
    8e96:	4c0d      	ldr	r4, [pc, #52]	; (8ecc <_switch_peripheral_gclk+0x3c>)
    8e98:	447c      	add	r4, pc
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
    8e9a:	003b      	movs	r3, r7
    8e9c:	2203      	movs	r2, #3
    8e9e:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8ea0:	2300      	movs	r3, #0
    8ea2:	607b      	str	r3, [r7, #4]
    8ea4:	e00a      	b.n	8ebc <_switch_peripheral_gclk+0x2c>
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    8ea6:	687b      	ldr	r3, [r7, #4]
    8ea8:	b2db      	uxtb	r3, r3
    8eaa:	003a      	movs	r2, r7
    8eac:	0011      	movs	r1, r2
    8eae:	0018      	movs	r0, r3
    8eb0:	4b07      	ldr	r3, [pc, #28]	; (8ed0 <_switch_peripheral_gclk+0x40>)
    8eb2:	58e3      	ldr	r3, [r4, r3]
    8eb4:	4798      	blx	r3
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    8eb6:	687b      	ldr	r3, [r7, #4]
    8eb8:	3301      	adds	r3, #1
    8eba:	607b      	str	r3, [r7, #4]
    8ebc:	687b      	ldr	r3, [r7, #4]
    8ebe:	2b24      	cmp	r3, #36	; 0x24
    8ec0:	d9f1      	bls.n	8ea6 <_switch_peripheral_gclk+0x16>
	}
}
    8ec2:	46c0      	nop			; (mov r8, r8)
    8ec4:	46bd      	mov	sp, r7
    8ec6:	b003      	add	sp, #12
    8ec8:	bd90      	pop	{r4, r7, pc}
    8eca:	46c0      	nop			; (mov r8, r8)
    8ecc:	00006598 	.word	0x00006598
    8ed0:	000000d4 	.word	0x000000d4

00008ed4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    8ed4:	b590      	push	{r4, r7, lr}
    8ed6:	b0ab      	sub	sp, #172	; 0xac
    8ed8:	af00      	add	r7, sp, #0
    8eda:	4cca      	ldr	r4, [pc, #808]	; (9204 <system_clock_init+0x330>)
    8edc:	447c      	add	r4, pc
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    8ede:	4bca      	ldr	r3, [pc, #808]	; (9208 <system_clock_init+0x334>)
    8ee0:	22c2      	movs	r2, #194	; 0xc2
    8ee2:	00d2      	lsls	r2, r2, #3
    8ee4:	609a      	str	r2, [r3, #8]
			SYSCTRL_INTFLAG_DFLLRDY;

	system_flash_set_waitstates(CONF_CLOCK_FLASH_WAIT_STATES);
    8ee6:	2001      	movs	r0, #1
    8ee8:	4bc8      	ldr	r3, [pc, #800]	; (920c <system_clock_init+0x338>)
    8eea:	447b      	add	r3, pc
    8eec:	4798      	blx	r3

	/* Switch all peripheral clock to a not enabled general clock to save power. */
	_switch_peripheral_gclk();
    8eee:	4bc8      	ldr	r3, [pc, #800]	; (9210 <system_clock_init+0x33c>)
    8ef0:	447b      	add	r3, pc
    8ef2:	4798      	blx	r3


	/* XOSC32K */
#if CONF_CLOCK_XOSC32K_ENABLE == true
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);
    8ef4:	2394      	movs	r3, #148	; 0x94
    8ef6:	18fb      	adds	r3, r7, r3
    8ef8:	0018      	movs	r0, r3
    8efa:	4bc6      	ldr	r3, [pc, #792]	; (9214 <system_clock_init+0x340>)
    8efc:	447b      	add	r3, pc
    8efe:	4798      	blx	r3

	xosc32k_conf.frequency           = 32768UL;
    8f00:	2394      	movs	r3, #148	; 0x94
    8f02:	18fb      	adds	r3, r7, r3
    8f04:	2280      	movs	r2, #128	; 0x80
    8f06:	0212      	lsls	r2, r2, #8
    8f08:	609a      	str	r2, [r3, #8]
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
    8f0a:	2394      	movs	r3, #148	; 0x94
    8f0c:	18fb      	adds	r3, r7, r3
    8f0e:	2200      	movs	r2, #0
    8f10:	701a      	strb	r2, [r3, #0]
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    8f12:	2394      	movs	r3, #148	; 0x94
    8f14:	18fb      	adds	r3, r7, r3
    8f16:	2202      	movs	r2, #2
    8f18:	705a      	strb	r2, [r3, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
    8f1a:	2394      	movs	r3, #148	; 0x94
    8f1c:	18fb      	adds	r3, r7, r3
    8f1e:	2201      	movs	r2, #1
    8f20:	709a      	strb	r2, [r3, #2]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
    8f22:	2394      	movs	r3, #148	; 0x94
    8f24:	18fb      	adds	r3, r7, r3
    8f26:	2200      	movs	r2, #0
    8f28:	70da      	strb	r2, [r3, #3]
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
    8f2a:	2394      	movs	r3, #148	; 0x94
    8f2c:	18fb      	adds	r3, r7, r3
    8f2e:	2201      	movs	r2, #1
    8f30:	711a      	strb	r2, [r3, #4]
	xosc32k_conf.on_demand           = false;
    8f32:	2394      	movs	r3, #148	; 0x94
    8f34:	18fb      	adds	r3, r7, r3
    8f36:	2200      	movs	r2, #0
    8f38:	735a      	strb	r2, [r3, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;
    8f3a:	2394      	movs	r3, #148	; 0x94
    8f3c:	18fb      	adds	r3, r7, r3
    8f3e:	2201      	movs	r2, #1
    8f40:	731a      	strb	r2, [r3, #12]

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    8f42:	2394      	movs	r3, #148	; 0x94
    8f44:	18fb      	adds	r3, r7, r3
    8f46:	0018      	movs	r0, r3
    8f48:	4bb3      	ldr	r3, [pc, #716]	; (9218 <system_clock_init+0x344>)
    8f4a:	58e3      	ldr	r3, [r4, r3]
    8f4c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    8f4e:	2005      	movs	r0, #5
    8f50:	4bb2      	ldr	r3, [pc, #712]	; (921c <system_clock_init+0x348>)
    8f52:	58e3      	ldr	r3, [r4, r3]
    8f54:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    8f56:	46c0      	nop			; (mov r8, r8)
    8f58:	2005      	movs	r0, #5
    8f5a:	4bb1      	ldr	r3, [pc, #708]	; (9220 <system_clock_init+0x34c>)
    8f5c:	58e3      	ldr	r3, [r4, r3]
    8f5e:	4798      	blx	r3
    8f60:	0003      	movs	r3, r0
    8f62:	001a      	movs	r2, r3
    8f64:	2301      	movs	r3, #1
    8f66:	4053      	eors	r3, r2
    8f68:	b2db      	uxtb	r3, r3
    8f6a:	2b00      	cmp	r3, #0
    8f6c:	d1f4      	bne.n	8f58 <system_clock_init+0x84>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    8f6e:	4aa6      	ldr	r2, [pc, #664]	; (9208 <system_clock_init+0x334>)
    8f70:	8a93      	ldrh	r3, [r2, #20]
    8f72:	2180      	movs	r1, #128	; 0x80
    8f74:	430b      	orrs	r3, r1
    8f76:	8293      	strh	r3, [r2, #20]


	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);
    8f78:	2380      	movs	r3, #128	; 0x80
    8f7a:	18fb      	adds	r3, r7, r3
    8f7c:	0018      	movs	r0, r3
    8f7e:	4ba9      	ldr	r3, [pc, #676]	; (9224 <system_clock_init+0x350>)
    8f80:	447b      	add	r3, pc
    8f82:	4798      	blx	r3

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    8f84:	2380      	movs	r3, #128	; 0x80
    8f86:	18fb      	adds	r3, r7, r3
    8f88:	2204      	movs	r2, #4
    8f8a:	701a      	strb	r2, [r3, #0]
	dfll_conf.on_demand      = false;
    8f8c:	2380      	movs	r3, #128	; 0x80
    8f8e:	18fb      	adds	r3, r7, r3
    8f90:	2200      	movs	r2, #0
    8f92:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    8f94:	4ba4      	ldr	r3, [pc, #656]	; (9228 <system_clock_init+0x354>)
    8f96:	681b      	ldr	r3, [r3, #0]
    8f98:	0e9b      	lsrs	r3, r3, #26
    8f9a:	22a4      	movs	r2, #164	; 0xa4
    8f9c:	18ba      	adds	r2, r7, r2
    8f9e:	6013      	str	r3, [r2, #0]
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    8fa0:	23a4      	movs	r3, #164	; 0xa4
    8fa2:	18fb      	adds	r3, r7, r3
    8fa4:	681b      	ldr	r3, [r3, #0]
    8fa6:	2b3f      	cmp	r3, #63	; 0x3f
    8fa8:	d103      	bne.n	8fb2 <system_clock_init+0xde>
		coarse = 0x1f;
    8faa:	231f      	movs	r3, #31
    8fac:	22a4      	movs	r2, #164	; 0xa4
    8fae:	18ba      	adds	r2, r7, r2
    8fb0:	6013      	str	r3, [r2, #0]
	}
	dfll_conf.coarse_value = coarse;
    8fb2:	23a4      	movs	r3, #164	; 0xa4
    8fb4:	18fb      	adds	r3, r7, r3
    8fb6:	681b      	ldr	r3, [r3, #0]
    8fb8:	b2da      	uxtb	r2, r3
    8fba:	2380      	movs	r3, #128	; 0x80
    8fbc:	18fb      	adds	r3, r7, r3
    8fbe:	721a      	strb	r2, [r3, #8]
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN) {
		dfll_conf.fine_value   = CONF_CLOCK_DFLL_FINE_VALUE;
	}

#  if CONF_CLOCK_DFLL_QUICK_LOCK == true
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    8fc0:	2380      	movs	r3, #128	; 0x80
    8fc2:	18fb      	adds	r3, r7, r3
    8fc4:	2200      	movs	r2, #0
    8fc6:	805a      	strh	r2, [r3, #2]
#  else
	dfll_conf.quick_lock = SYSTEM_CLOCK_DFLL_QUICK_LOCK_DISABLE;
#  endif

#  if CONF_CLOCK_DFLL_TRACK_AFTER_FINE_LOCK == true
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    8fc8:	2380      	movs	r3, #128	; 0x80
    8fca:	18fb      	adds	r3, r7, r3
    8fcc:	2200      	movs	r2, #0
    8fce:	71da      	strb	r2, [r3, #7]
#  else
	dfll_conf.stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_FIX_AFTER_LOCK;
#  endif

#  if CONF_CLOCK_DFLL_KEEP_LOCK_ON_WAKEUP == true
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    8fd0:	2380      	movs	r3, #128	; 0x80
    8fd2:	18fb      	adds	r3, r7, r3
    8fd4:	2200      	movs	r2, #0
    8fd6:	719a      	strb	r2, [r3, #6]
#  else
	dfll_conf.wakeup_lock = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_LOSE;
#  endif

#  if CONF_CLOCK_DFLL_ENABLE_CHILL_CYCLE == true
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    8fd8:	2380      	movs	r3, #128	; 0x80
    8fda:	18fb      	adds	r3, r7, r3
    8fdc:	2200      	movs	r2, #0
    8fde:	809a      	strh	r2, [r3, #4]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    8fe0:	2380      	movs	r3, #128	; 0x80
    8fe2:	18fb      	adds	r3, r7, r3
    8fe4:	4a91      	ldr	r2, [pc, #580]	; (922c <system_clock_init+0x358>)
    8fe6:	821a      	strh	r2, [r3, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    8fe8:	2380      	movs	r3, #128	; 0x80
    8fea:	18fb      	adds	r3, r7, r3
    8fec:	2207      	movs	r2, #7
    8fee:	731a      	strb	r2, [r3, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    8ff0:	2380      	movs	r3, #128	; 0x80
    8ff2:	18fb      	adds	r3, r7, r3
    8ff4:	223f      	movs	r2, #63	; 0x3f
    8ff6:	81da      	strh	r2, [r3, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    8ff8:	2380      	movs	r3, #128	; 0x80
    8ffa:	18fb      	adds	r3, r7, r3
    8ffc:	0018      	movs	r0, r3
    8ffe:	4b8c      	ldr	r3, [pc, #560]	; (9230 <system_clock_init+0x35c>)
    9000:	58e3      	ldr	r3, [r4, r3]
    9002:	4798      	blx	r3
#endif


	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);
    9004:	237c      	movs	r3, #124	; 0x7c
    9006:	18fb      	adds	r3, r7, r3
    9008:	0018      	movs	r0, r3
    900a:	4b8a      	ldr	r3, [pc, #552]	; (9234 <system_clock_init+0x360>)
    900c:	447b      	add	r3, pc
    900e:	4798      	blx	r3

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    9010:	237c      	movs	r3, #124	; 0x7c
    9012:	18fb      	adds	r3, r7, r3
    9014:	2200      	movs	r2, #0
    9016:	701a      	strb	r2, [r3, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
    9018:	237c      	movs	r3, #124	; 0x7c
    901a:	18fb      	adds	r3, r7, r3
    901c:	2201      	movs	r2, #1
    901e:	709a      	strb	r2, [r3, #2]
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
    9020:	237c      	movs	r3, #124	; 0x7c
    9022:	18fb      	adds	r3, r7, r3
    9024:	2200      	movs	r2, #0
    9026:	705a      	strb	r2, [r3, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
    9028:	237c      	movs	r3, #124	; 0x7c
    902a:	18fb      	adds	r3, r7, r3
    902c:	0018      	movs	r0, r3
    902e:	4b82      	ldr	r3, [pc, #520]	; (9238 <system_clock_init+0x364>)
    9030:	58e3      	ldr	r3, [r4, r3]
    9032:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    9034:	2006      	movs	r0, #6
    9036:	4b79      	ldr	r3, [pc, #484]	; (921c <system_clock_init+0x348>)
    9038:	58e3      	ldr	r3, [r4, r3]
    903a:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    903c:	4b7f      	ldr	r3, [pc, #508]	; (923c <system_clock_init+0x368>)
    903e:	58e3      	ldr	r3, [r4, r3]
    9040:	4798      	blx	r3

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    9042:	2364      	movs	r3, #100	; 0x64
    9044:	18fb      	adds	r3, r7, r3
    9046:	0018      	movs	r0, r3
    9048:	4b7d      	ldr	r3, [pc, #500]	; (9240 <system_clock_init+0x36c>)
    904a:	447b      	add	r3, pc
    904c:	4798      	blx	r3
    904e:	2364      	movs	r3, #100	; 0x64
    9050:	18fb      	adds	r3, r7, r3
    9052:	2205      	movs	r2, #5
    9054:	701a      	strb	r2, [r3, #0]
    9056:	2364      	movs	r3, #100	; 0x64
    9058:	18fb      	adds	r3, r7, r3
    905a:	2201      	movs	r2, #1
    905c:	605a      	str	r2, [r3, #4]
    905e:	2364      	movs	r3, #100	; 0x64
    9060:	18fb      	adds	r3, r7, r3
    9062:	2200      	movs	r2, #0
    9064:	721a      	strb	r2, [r3, #8]
    9066:	2364      	movs	r3, #100	; 0x64
    9068:	18fb      	adds	r3, r7, r3
    906a:	2200      	movs	r2, #0
    906c:	725a      	strb	r2, [r3, #9]
    906e:	2364      	movs	r3, #100	; 0x64
    9070:	18fb      	adds	r3, r7, r3
    9072:	0019      	movs	r1, r3
    9074:	2001      	movs	r0, #1
    9076:	4b73      	ldr	r3, [pc, #460]	; (9244 <system_clock_init+0x370>)
    9078:	58e3      	ldr	r3, [r4, r3]
    907a:	4798      	blx	r3
    907c:	2001      	movs	r0, #1
    907e:	4b72      	ldr	r3, [pc, #456]	; (9248 <system_clock_init+0x374>)
    9080:	58e3      	ldr	r3, [r4, r3]
    9082:	4798      	blx	r3
    9084:	2358      	movs	r3, #88	; 0x58
    9086:	18fb      	adds	r3, r7, r3
    9088:	0018      	movs	r0, r3
    908a:	4b70      	ldr	r3, [pc, #448]	; (924c <system_clock_init+0x378>)
    908c:	447b      	add	r3, pc
    908e:	4798      	blx	r3
    9090:	2358      	movs	r3, #88	; 0x58
    9092:	18fb      	adds	r3, r7, r3
    9094:	2205      	movs	r2, #5
    9096:	701a      	strb	r2, [r3, #0]
    9098:	2358      	movs	r3, #88	; 0x58
    909a:	18fb      	adds	r3, r7, r3
    909c:	2220      	movs	r2, #32
    909e:	605a      	str	r2, [r3, #4]
    90a0:	2358      	movs	r3, #88	; 0x58
    90a2:	18fb      	adds	r3, r7, r3
    90a4:	2201      	movs	r2, #1
    90a6:	721a      	strb	r2, [r3, #8]
    90a8:	2358      	movs	r3, #88	; 0x58
    90aa:	18fb      	adds	r3, r7, r3
    90ac:	2200      	movs	r2, #0
    90ae:	725a      	strb	r2, [r3, #9]
    90b0:	2358      	movs	r3, #88	; 0x58
    90b2:	18fb      	adds	r3, r7, r3
    90b4:	0019      	movs	r1, r3
    90b6:	2002      	movs	r0, #2
    90b8:	4b62      	ldr	r3, [pc, #392]	; (9244 <system_clock_init+0x370>)
    90ba:	58e3      	ldr	r3, [r4, r3]
    90bc:	4798      	blx	r3
    90be:	2002      	movs	r0, #2
    90c0:	4b61      	ldr	r3, [pc, #388]	; (9248 <system_clock_init+0x374>)
    90c2:	58e3      	ldr	r3, [r4, r3]
    90c4:	4798      	blx	r3
    90c6:	2340      	movs	r3, #64	; 0x40
    90c8:	18fb      	adds	r3, r7, r3
    90ca:	0018      	movs	r0, r3
    90cc:	4b60      	ldr	r3, [pc, #384]	; (9250 <system_clock_init+0x37c>)
    90ce:	447b      	add	r3, pc
    90d0:	4798      	blx	r3
    90d2:	2340      	movs	r3, #64	; 0x40
    90d4:	18fb      	adds	r3, r7, r3
    90d6:	2207      	movs	r2, #7
    90d8:	701a      	strb	r2, [r3, #0]
    90da:	2340      	movs	r3, #64	; 0x40
    90dc:	18fb      	adds	r3, r7, r3
    90de:	2206      	movs	r2, #6
    90e0:	605a      	str	r2, [r3, #4]
    90e2:	2340      	movs	r3, #64	; 0x40
    90e4:	18fb      	adds	r3, r7, r3
    90e6:	2200      	movs	r2, #0
    90e8:	721a      	strb	r2, [r3, #8]
    90ea:	2340      	movs	r3, #64	; 0x40
    90ec:	18fb      	adds	r3, r7, r3
    90ee:	2201      	movs	r2, #1
    90f0:	725a      	strb	r2, [r3, #9]
    90f2:	2340      	movs	r3, #64	; 0x40
    90f4:	18fb      	adds	r3, r7, r3
    90f6:	0019      	movs	r1, r3
    90f8:	2004      	movs	r0, #4
    90fa:	4b52      	ldr	r3, [pc, #328]	; (9244 <system_clock_init+0x370>)
    90fc:	58e3      	ldr	r3, [r4, r3]
    90fe:	4798      	blx	r3
    9100:	2004      	movs	r0, #4
    9102:	4b51      	ldr	r3, [pc, #324]	; (9248 <system_clock_init+0x374>)
    9104:	58e3      	ldr	r3, [r4, r3]
    9106:	4798      	blx	r3
    9108:	2328      	movs	r3, #40	; 0x28
    910a:	18fb      	adds	r3, r7, r3
    910c:	0018      	movs	r0, r3
    910e:	4b51      	ldr	r3, [pc, #324]	; (9254 <system_clock_init+0x380>)
    9110:	447b      	add	r3, pc
    9112:	4798      	blx	r3
    9114:	2328      	movs	r3, #40	; 0x28
    9116:	18fb      	adds	r3, r7, r3
    9118:	2205      	movs	r2, #5
    911a:	701a      	strb	r2, [r3, #0]
    911c:	2328      	movs	r3, #40	; 0x28
    911e:	18fb      	adds	r3, r7, r3
    9120:	2201      	movs	r2, #1
    9122:	605a      	str	r2, [r3, #4]
    9124:	2328      	movs	r3, #40	; 0x28
    9126:	18fb      	adds	r3, r7, r3
    9128:	2201      	movs	r2, #1
    912a:	721a      	strb	r2, [r3, #8]
    912c:	2328      	movs	r3, #40	; 0x28
    912e:	18fb      	adds	r3, r7, r3
    9130:	2201      	movs	r2, #1
    9132:	725a      	strb	r2, [r3, #9]
    9134:	2328      	movs	r3, #40	; 0x28
    9136:	18fb      	adds	r3, r7, r3
    9138:	0019      	movs	r1, r3
    913a:	2006      	movs	r0, #6
    913c:	4b41      	ldr	r3, [pc, #260]	; (9244 <system_clock_init+0x370>)
    913e:	58e3      	ldr	r3, [r4, r3]
    9140:	4798      	blx	r3
    9142:	2006      	movs	r0, #6
    9144:	4b40      	ldr	r3, [pc, #256]	; (9248 <system_clock_init+0x374>)
    9146:	58e3      	ldr	r3, [r4, r3]
    9148:	4798      	blx	r3
#  if CONF_CLOCK_DFLL_ENABLE == true
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
    914a:	230c      	movs	r3, #12
    914c:	18fb      	adds	r3, r7, r3
    914e:	0018      	movs	r0, r3
    9150:	4b41      	ldr	r3, [pc, #260]	; (9258 <system_clock_init+0x384>)
    9152:	447b      	add	r3, pc
    9154:	4798      	blx	r3
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    9156:	230c      	movs	r3, #12
    9158:	18fb      	adds	r3, r7, r3
    915a:	2201      	movs	r2, #1
    915c:	701a      	strb	r2, [r3, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    915e:	230c      	movs	r3, #12
    9160:	18fb      	adds	r3, r7, r3
    9162:	0019      	movs	r1, r3
    9164:	2000      	movs	r0, #0
    9166:	4b3d      	ldr	r3, [pc, #244]	; (925c <system_clock_init+0x388>)
    9168:	58e3      	ldr	r3, [r4, r3]
    916a:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    916c:	2000      	movs	r0, #0
    916e:	4b3c      	ldr	r3, [pc, #240]	; (9260 <system_clock_init+0x38c>)
    9170:	58e3      	ldr	r3, [r4, r3]
    9172:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    9174:	2007      	movs	r0, #7
    9176:	4b29      	ldr	r3, [pc, #164]	; (921c <system_clock_init+0x348>)
    9178:	58e3      	ldr	r3, [r4, r3]
    917a:	4798      	blx	r3
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    917c:	46c0      	nop			; (mov r8, r8)
    917e:	2007      	movs	r0, #7
    9180:	4b27      	ldr	r3, [pc, #156]	; (9220 <system_clock_init+0x34c>)
    9182:	58e3      	ldr	r3, [r4, r3]
    9184:	4798      	blx	r3
    9186:	0003      	movs	r3, r0
    9188:	001a      	movs	r2, r3
    918a:	2301      	movs	r3, #1
    918c:	4053      	eors	r3, r2
    918e:	b2db      	uxtb	r3, r3
    9190:	2b00      	cmp	r3, #0
    9192:	d1f4      	bne.n	917e <system_clock_init+0x2aa>
	if (CONF_CLOCK_DFLL_ON_DEMAND) {
		SYSCTRL->DFLLCTRL.bit.ONDEMAND = 1;
    9194:	4a1c      	ldr	r2, [pc, #112]	; (9208 <system_clock_init+0x334>)
    9196:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    9198:	2180      	movs	r1, #128	; 0x80
    919a:	430b      	orrs	r3, r1
    919c:	8493      	strh	r3, [r2, #36]	; 0x24

#  endif
#endif

	/* CPU and BUS clocks */
	system_cpu_clock_set_divider(CONF_CLOCK_CPU_DIVIDER);
    919e:	2000      	movs	r0, #0
    91a0:	4b30      	ldr	r3, [pc, #192]	; (9264 <system_clock_init+0x390>)
    91a2:	447b      	add	r3, pc
    91a4:	4798      	blx	r3

	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBA, CONF_CLOCK_APBA_DIVIDER);
    91a6:	2100      	movs	r1, #0
    91a8:	2000      	movs	r0, #0
    91aa:	4b2f      	ldr	r3, [pc, #188]	; (9268 <system_clock_init+0x394>)
    91ac:	447b      	add	r3, pc
    91ae:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBB, CONF_CLOCK_APBB_DIVIDER);
    91b0:	2100      	movs	r1, #0
    91b2:	2001      	movs	r0, #1
    91b4:	4b2d      	ldr	r3, [pc, #180]	; (926c <system_clock_init+0x398>)
    91b6:	447b      	add	r3, pc
    91b8:	4798      	blx	r3
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);
    91ba:	2100      	movs	r1, #0
    91bc:	2002      	movs	r0, #2
    91be:	4b2c      	ldr	r3, [pc, #176]	; (9270 <system_clock_init+0x39c>)
    91c0:	447b      	add	r3, pc
    91c2:	4798      	blx	r3

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    91c4:	003b      	movs	r3, r7
    91c6:	0018      	movs	r0, r3
    91c8:	4b2a      	ldr	r3, [pc, #168]	; (9274 <system_clock_init+0x3a0>)
    91ca:	447b      	add	r3, pc
    91cc:	4798      	blx	r3
    91ce:	003b      	movs	r3, r7
    91d0:	2207      	movs	r2, #7
    91d2:	701a      	strb	r2, [r3, #0]
    91d4:	003b      	movs	r3, r7
    91d6:	2201      	movs	r2, #1
    91d8:	605a      	str	r2, [r3, #4]
    91da:	003b      	movs	r3, r7
    91dc:	2200      	movs	r2, #0
    91de:	721a      	strb	r2, [r3, #8]
    91e0:	003b      	movs	r3, r7
    91e2:	2200      	movs	r2, #0
    91e4:	725a      	strb	r2, [r3, #9]
    91e6:	003b      	movs	r3, r7
    91e8:	0019      	movs	r1, r3
    91ea:	2000      	movs	r0, #0
    91ec:	4b15      	ldr	r3, [pc, #84]	; (9244 <system_clock_init+0x370>)
    91ee:	58e3      	ldr	r3, [r4, r3]
    91f0:	4798      	blx	r3
    91f2:	2000      	movs	r0, #0
    91f4:	4b14      	ldr	r3, [pc, #80]	; (9248 <system_clock_init+0x374>)
    91f6:	58e3      	ldr	r3, [r4, r3]
    91f8:	4798      	blx	r3
#endif
}
    91fa:	46c0      	nop			; (mov r8, r8)
    91fc:	46bd      	mov	sp, r7
    91fe:	b02b      	add	sp, #172	; 0xac
    9200:	bd90      	pop	{r4, r7, pc}
    9202:	46c0      	nop			; (mov r8, r8)
    9204:	00006554 	.word	0x00006554
    9208:	40000800 	.word	0x40000800
    920c:	fffff9e7 	.word	0xfffff9e7
    9210:	ffffff9d 	.word	0xffffff9d
    9214:	fffff8a5 	.word	0xfffff8a5
    9218:	00000254 	.word	0x00000254
    921c:	00000284 	.word	0x00000284
    9220:	000002a4 	.word	0x000002a4
    9224:	fffff88b 	.word	0xfffff88b
    9228:	00806024 	.word	0x00806024
    922c:	000005dc 	.word	0x000005dc
    9230:	00000088 	.word	0x00000088
    9234:	fffff7dd 	.word	0xfffff7dd
    9238:	00000130 	.word	0x00000130
    923c:	000002e8 	.word	0x000002e8
    9240:	fffff713 	.word	0xfffff713
    9244:	00000120 	.word	0x00000120
    9248:	000001f0 	.word	0x000001f0
    924c:	fffff6d1 	.word	0xfffff6d1
    9250:	fffff68f 	.word	0xfffff68f
    9254:	fffff64d 	.word	0xfffff64d
    9258:	fffff639 	.word	0xfffff639
    925c:	000000d4 	.word	0x000000d4
    9260:	00000260 	.word	0x00000260
    9264:	fffff6bb 	.word	0xfffff6bb
    9268:	fffff6d1 	.word	0xfffff6d1
    926c:	fffff6c7 	.word	0xfffff6c7
    9270:	fffff6bd 	.word	0xfffff6bd
    9274:	fffff593 	.word	0xfffff593

00009278 <system_apb_clock_set_mask>:
{
    9278:	b580      	push	{r7, lr}
    927a:	b082      	sub	sp, #8
    927c:	af00      	add	r7, sp, #0
    927e:	0002      	movs	r2, r0
    9280:	6039      	str	r1, [r7, #0]
    9282:	1dfb      	adds	r3, r7, #7
    9284:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    9286:	1dfb      	adds	r3, r7, #7
    9288:	781b      	ldrb	r3, [r3, #0]
    928a:	2b01      	cmp	r3, #1
    928c:	d00a      	beq.n	92a4 <system_apb_clock_set_mask+0x2c>
    928e:	2b02      	cmp	r3, #2
    9290:	d00f      	beq.n	92b2 <system_apb_clock_set_mask+0x3a>
    9292:	2b00      	cmp	r3, #0
    9294:	d114      	bne.n	92c0 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    9296:	4b0e      	ldr	r3, [pc, #56]	; (92d0 <system_apb_clock_set_mask+0x58>)
    9298:	4a0d      	ldr	r2, [pc, #52]	; (92d0 <system_apb_clock_set_mask+0x58>)
    929a:	6991      	ldr	r1, [r2, #24]
    929c:	683a      	ldr	r2, [r7, #0]
    929e:	430a      	orrs	r2, r1
    92a0:	619a      	str	r2, [r3, #24]
			break;
    92a2:	e00f      	b.n	92c4 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    92a4:	4b0a      	ldr	r3, [pc, #40]	; (92d0 <system_apb_clock_set_mask+0x58>)
    92a6:	4a0a      	ldr	r2, [pc, #40]	; (92d0 <system_apb_clock_set_mask+0x58>)
    92a8:	69d1      	ldr	r1, [r2, #28]
    92aa:	683a      	ldr	r2, [r7, #0]
    92ac:	430a      	orrs	r2, r1
    92ae:	61da      	str	r2, [r3, #28]
			break;
    92b0:	e008      	b.n	92c4 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    92b2:	4b07      	ldr	r3, [pc, #28]	; (92d0 <system_apb_clock_set_mask+0x58>)
    92b4:	4a06      	ldr	r2, [pc, #24]	; (92d0 <system_apb_clock_set_mask+0x58>)
    92b6:	6a11      	ldr	r1, [r2, #32]
    92b8:	683a      	ldr	r2, [r7, #0]
    92ba:	430a      	orrs	r2, r1
    92bc:	621a      	str	r2, [r3, #32]
			break;
    92be:	e001      	b.n	92c4 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    92c0:	2317      	movs	r3, #23
    92c2:	e000      	b.n	92c6 <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    92c4:	2300      	movs	r3, #0
}
    92c6:	0018      	movs	r0, r3
    92c8:	46bd      	mov	sp, r7
    92ca:	b002      	add	sp, #8
    92cc:	bd80      	pop	{r7, pc}
    92ce:	46c0      	nop			; (mov r8, r8)
    92d0:	40000400 	.word	0x40000400

000092d4 <system_interrupt_enter_critical_section>:
{
    92d4:	b580      	push	{r7, lr}
    92d6:	af00      	add	r7, sp, #0
    92d8:	4a03      	ldr	r2, [pc, #12]	; (92e8 <system_interrupt_enter_critical_section+0x14>)
    92da:	447a      	add	r2, pc
	cpu_irq_enter_critical();
    92dc:	4b03      	ldr	r3, [pc, #12]	; (92ec <system_interrupt_enter_critical_section+0x18>)
    92de:	58d3      	ldr	r3, [r2, r3]
    92e0:	4798      	blx	r3
}
    92e2:	46c0      	nop			; (mov r8, r8)
    92e4:	46bd      	mov	sp, r7
    92e6:	bd80      	pop	{r7, pc}
    92e8:	00006156 	.word	0x00006156
    92ec:	00000108 	.word	0x00000108

000092f0 <system_interrupt_leave_critical_section>:
{
    92f0:	b580      	push	{r7, lr}
    92f2:	af00      	add	r7, sp, #0
    92f4:	4a03      	ldr	r2, [pc, #12]	; (9304 <system_interrupt_leave_critical_section+0x14>)
    92f6:	447a      	add	r2, pc
	cpu_irq_leave_critical();
    92f8:	4b03      	ldr	r3, [pc, #12]	; (9308 <system_interrupt_leave_critical_section+0x18>)
    92fa:	58d3      	ldr	r3, [r2, r3]
    92fc:	4798      	blx	r3
}
    92fe:	46c0      	nop			; (mov r8, r8)
    9300:	46bd      	mov	sp, r7
    9302:	bd80      	pop	{r7, pc}
    9304:	0000613a 	.word	0x0000613a
    9308:	00000014 	.word	0x00000014

0000930c <system_gclk_is_syncing>:
 *
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
    930c:	b580      	push	{r7, lr}
    930e:	af00      	add	r7, sp, #0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    9310:	4b05      	ldr	r3, [pc, #20]	; (9328 <system_gclk_is_syncing+0x1c>)
    9312:	785b      	ldrb	r3, [r3, #1]
    9314:	b2db      	uxtb	r3, r3
    9316:	b25b      	sxtb	r3, r3
    9318:	2b00      	cmp	r3, #0
    931a:	da01      	bge.n	9320 <system_gclk_is_syncing+0x14>
		return true;
    931c:	2301      	movs	r3, #1
    931e:	e000      	b.n	9322 <system_gclk_is_syncing+0x16>
	}

	return false;
    9320:	2300      	movs	r3, #0
}
    9322:	0018      	movs	r0, r3
    9324:	46bd      	mov	sp, r7
    9326:	bd80      	pop	{r7, pc}
    9328:	40000c00 	.word	0x40000c00

0000932c <system_gclk_init>:
 *
 * Initializes the Generic Clock module, disabling and resetting all active
 * Generic Clock Generators and Channels to their power-on default values.
 */
void system_gclk_init(void)
{
    932c:	b580      	push	{r7, lr}
    932e:	af00      	add	r7, sp, #0
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);
    9330:	2108      	movs	r1, #8
    9332:	2000      	movs	r0, #0
    9334:	4b08      	ldr	r3, [pc, #32]	; (9358 <system_gclk_init+0x2c>)
    9336:	447b      	add	r3, pc
    9338:	4798      	blx	r3

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    933a:	4b08      	ldr	r3, [pc, #32]	; (935c <system_gclk_init+0x30>)
    933c:	2201      	movs	r2, #1
    933e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    9340:	46c0      	nop			; (mov r8, r8)
    9342:	4b06      	ldr	r3, [pc, #24]	; (935c <system_gclk_init+0x30>)
    9344:	781b      	ldrb	r3, [r3, #0]
    9346:	b2db      	uxtb	r3, r3
    9348:	001a      	movs	r2, r3
    934a:	2301      	movs	r3, #1
    934c:	4013      	ands	r3, r2
    934e:	d1f8      	bne.n	9342 <system_gclk_init+0x16>
		/* Wait for reset to complete */
	}
}
    9350:	46c0      	nop			; (mov r8, r8)
    9352:	46bd      	mov	sp, r7
    9354:	bd80      	pop	{r7, pc}
    9356:	46c0      	nop			; (mov r8, r8)
    9358:	ffffff3f 	.word	0xffffff3f
    935c:	40000c00 	.word	0x40000c00

00009360 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    9360:	b580      	push	{r7, lr}
    9362:	b086      	sub	sp, #24
    9364:	af00      	add	r7, sp, #0
    9366:	0002      	movs	r2, r0
    9368:	6039      	str	r1, [r7, #0]
    936a:	1dfb      	adds	r3, r7, #7
    936c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    936e:	1dfb      	adds	r3, r7, #7
    9370:	781b      	ldrb	r3, [r3, #0]
    9372:	617b      	str	r3, [r7, #20]
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);
    9374:	1dfb      	adds	r3, r7, #7
    9376:	781b      	ldrb	r3, [r3, #0]
    9378:	613b      	str	r3, [r7, #16]

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    937a:	683b      	ldr	r3, [r7, #0]
    937c:	781b      	ldrb	r3, [r3, #0]
    937e:	021b      	lsls	r3, r3, #8
    9380:	001a      	movs	r2, r3
    9382:	697b      	ldr	r3, [r7, #20]
    9384:	4313      	orrs	r3, r2
    9386:	617b      	str	r3, [r7, #20]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    9388:	683b      	ldr	r3, [r7, #0]
    938a:	785b      	ldrb	r3, [r3, #1]
    938c:	2b00      	cmp	r3, #0
    938e:	d004      	beq.n	939a <system_gclk_gen_set_config+0x3a>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    9390:	697b      	ldr	r3, [r7, #20]
    9392:	2280      	movs	r2, #128	; 0x80
    9394:	02d2      	lsls	r2, r2, #11
    9396:	4313      	orrs	r3, r2
    9398:	617b      	str	r3, [r7, #20]
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    939a:	683b      	ldr	r3, [r7, #0]
    939c:	7a5b      	ldrb	r3, [r3, #9]
    939e:	2b00      	cmp	r3, #0
    93a0:	d004      	beq.n	93ac <system_gclk_gen_set_config+0x4c>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    93a2:	697b      	ldr	r3, [r7, #20]
    93a4:	2280      	movs	r2, #128	; 0x80
    93a6:	0312      	lsls	r2, r2, #12
    93a8:	4313      	orrs	r3, r2
    93aa:	617b      	str	r3, [r7, #20]
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    93ac:	683b      	ldr	r3, [r7, #0]
    93ae:	685b      	ldr	r3, [r3, #4]
    93b0:	2b01      	cmp	r3, #1
    93b2:	d92c      	bls.n	940e <system_gclk_gen_set_config+0xae>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    93b4:	683b      	ldr	r3, [r7, #0]
    93b6:	685a      	ldr	r2, [r3, #4]
    93b8:	683b      	ldr	r3, [r7, #0]
    93ba:	685b      	ldr	r3, [r3, #4]
    93bc:	3b01      	subs	r3, #1
    93be:	4013      	ands	r3, r2
    93c0:	d11a      	bne.n	93f8 <system_gclk_gen_set_config+0x98>
			/* Determine the index of the highest bit set to get the
			 * division factor that must be loaded into the division
			 * register */

			uint32_t div2_count = 0;
    93c2:	2300      	movs	r3, #0
    93c4:	60fb      	str	r3, [r7, #12]

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    93c6:	2302      	movs	r3, #2
    93c8:	60bb      	str	r3, [r7, #8]
    93ca:	e005      	b.n	93d8 <system_gclk_gen_set_config+0x78>
						mask <<= 1) {
				div2_count++;
    93cc:	68fb      	ldr	r3, [r7, #12]
    93ce:	3301      	adds	r3, #1
    93d0:	60fb      	str	r3, [r7, #12]
						mask <<= 1) {
    93d2:	68bb      	ldr	r3, [r7, #8]
    93d4:	005b      	lsls	r3, r3, #1
    93d6:	60bb      	str	r3, [r7, #8]
			for (mask = (1UL << 1); mask < config->division_factor;
    93d8:	683b      	ldr	r3, [r7, #0]
    93da:	685a      	ldr	r2, [r3, #4]
    93dc:	68bb      	ldr	r3, [r7, #8]
    93de:	429a      	cmp	r2, r3
    93e0:	d8f4      	bhi.n	93cc <system_gclk_gen_set_config+0x6c>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    93e2:	68fb      	ldr	r3, [r7, #12]
    93e4:	021b      	lsls	r3, r3, #8
    93e6:	693a      	ldr	r2, [r7, #16]
    93e8:	4313      	orrs	r3, r2
    93ea:	613b      	str	r3, [r7, #16]
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    93ec:	697b      	ldr	r3, [r7, #20]
    93ee:	2280      	movs	r2, #128	; 0x80
    93f0:	0352      	lsls	r2, r2, #13
    93f2:	4313      	orrs	r3, r2
    93f4:	617b      	str	r3, [r7, #20]
    93f6:	e00a      	b.n	940e <system_gclk_gen_set_config+0xae>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    93f8:	683b      	ldr	r3, [r7, #0]
    93fa:	685b      	ldr	r3, [r3, #4]
    93fc:	021b      	lsls	r3, r3, #8
			new_gendiv_config  |=
    93fe:	693a      	ldr	r2, [r7, #16]
    9400:	4313      	orrs	r3, r2
    9402:	613b      	str	r3, [r7, #16]

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    9404:	697b      	ldr	r3, [r7, #20]
    9406:	2280      	movs	r2, #128	; 0x80
    9408:	0292      	lsls	r2, r2, #10
    940a:	4313      	orrs	r3, r2
    940c:	617b      	str	r3, [r7, #20]
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    940e:	683b      	ldr	r3, [r7, #0]
    9410:	7a1b      	ldrb	r3, [r3, #8]
    9412:	2b00      	cmp	r3, #0
    9414:	d004      	beq.n	9420 <system_gclk_gen_set_config+0xc0>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    9416:	697b      	ldr	r3, [r7, #20]
    9418:	2280      	movs	r2, #128	; 0x80
    941a:	0392      	lsls	r2, r2, #14
    941c:	4313      	orrs	r3, r2
    941e:	617b      	str	r3, [r7, #20]
	}

	while (system_gclk_is_syncing()) {
    9420:	46c0      	nop			; (mov r8, r8)
    9422:	4b15      	ldr	r3, [pc, #84]	; (9478 <system_gclk_gen_set_config+0x118>)
    9424:	447b      	add	r3, pc
    9426:	4798      	blx	r3
    9428:	1e03      	subs	r3, r0, #0
    942a:	d1fa      	bne.n	9422 <system_gclk_gen_set_config+0xc2>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    942c:	4b13      	ldr	r3, [pc, #76]	; (947c <system_gclk_gen_set_config+0x11c>)
    942e:	447b      	add	r3, pc
    9430:	4798      	blx	r3

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9432:	4a13      	ldr	r2, [pc, #76]	; (9480 <system_gclk_gen_set_config+0x120>)
    9434:	1dfb      	adds	r3, r7, #7
    9436:	781b      	ldrb	r3, [r3, #0]
    9438:	7013      	strb	r3, [r2, #0]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    943a:	46c0      	nop			; (mov r8, r8)
    943c:	4b11      	ldr	r3, [pc, #68]	; (9484 <system_gclk_gen_set_config+0x124>)
    943e:	447b      	add	r3, pc
    9440:	4798      	blx	r3
    9442:	1e03      	subs	r3, r0, #0
    9444:	d1fa      	bne.n	943c <system_gclk_gen_set_config+0xdc>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    9446:	4b10      	ldr	r3, [pc, #64]	; (9488 <system_gclk_gen_set_config+0x128>)
    9448:	693a      	ldr	r2, [r7, #16]
    944a:	609a      	str	r2, [r3, #8]

	while (system_gclk_is_syncing()) {
    944c:	46c0      	nop			; (mov r8, r8)
    944e:	4b0f      	ldr	r3, [pc, #60]	; (948c <system_gclk_gen_set_config+0x12c>)
    9450:	447b      	add	r3, pc
    9452:	4798      	blx	r3
    9454:	1e03      	subs	r3, r0, #0
    9456:	d1fa      	bne.n	944e <system_gclk_gen_set_config+0xee>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    9458:	4b0b      	ldr	r3, [pc, #44]	; (9488 <system_gclk_gen_set_config+0x128>)
    945a:	4a0b      	ldr	r2, [pc, #44]	; (9488 <system_gclk_gen_set_config+0x128>)
    945c:	6851      	ldr	r1, [r2, #4]
    945e:	2280      	movs	r2, #128	; 0x80
    9460:	0252      	lsls	r2, r2, #9
    9462:	4011      	ands	r1, r2
    9464:	697a      	ldr	r2, [r7, #20]
    9466:	430a      	orrs	r2, r1
    9468:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    946a:	4b09      	ldr	r3, [pc, #36]	; (9490 <system_gclk_gen_set_config+0x130>)
    946c:	447b      	add	r3, pc
    946e:	4798      	blx	r3
}
    9470:	46c0      	nop			; (mov r8, r8)
    9472:	46bd      	mov	sp, r7
    9474:	b006      	add	sp, #24
    9476:	bd80      	pop	{r7, pc}
    9478:	fffffee5 	.word	0xfffffee5
    947c:	fffffea3 	.word	0xfffffea3
    9480:	40000c08 	.word	0x40000c08
    9484:	fffffecb 	.word	0xfffffecb
    9488:	40000c00 	.word	0x40000c00
    948c:	fffffeb9 	.word	0xfffffeb9
    9490:	fffffe81 	.word	0xfffffe81

00009494 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    9494:	b580      	push	{r7, lr}
    9496:	b082      	sub	sp, #8
    9498:	af00      	add	r7, sp, #0
    949a:	0002      	movs	r2, r0
    949c:	1dfb      	adds	r3, r7, #7
    949e:	701a      	strb	r2, [r3, #0]
	while (system_gclk_is_syncing()) {
    94a0:	46c0      	nop			; (mov r8, r8)
    94a2:	4b10      	ldr	r3, [pc, #64]	; (94e4 <system_gclk_gen_enable+0x50>)
    94a4:	447b      	add	r3, pc
    94a6:	4798      	blx	r3
    94a8:	1e03      	subs	r3, r0, #0
    94aa:	d1fa      	bne.n	94a2 <system_gclk_gen_enable+0xe>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    94ac:	4b0e      	ldr	r3, [pc, #56]	; (94e8 <system_gclk_gen_enable+0x54>)
    94ae:	447b      	add	r3, pc
    94b0:	4798      	blx	r3

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    94b2:	4a0e      	ldr	r2, [pc, #56]	; (94ec <system_gclk_gen_enable+0x58>)
    94b4:	1dfb      	adds	r3, r7, #7
    94b6:	781b      	ldrb	r3, [r3, #0]
    94b8:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    94ba:	46c0      	nop			; (mov r8, r8)
    94bc:	4b0c      	ldr	r3, [pc, #48]	; (94f0 <system_gclk_gen_enable+0x5c>)
    94be:	447b      	add	r3, pc
    94c0:	4798      	blx	r3
    94c2:	1e03      	subs	r3, r0, #0
    94c4:	d1fa      	bne.n	94bc <system_gclk_gen_enable+0x28>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    94c6:	4b0b      	ldr	r3, [pc, #44]	; (94f4 <system_gclk_gen_enable+0x60>)
    94c8:	4a0a      	ldr	r2, [pc, #40]	; (94f4 <system_gclk_gen_enable+0x60>)
    94ca:	6852      	ldr	r2, [r2, #4]
    94cc:	2180      	movs	r1, #128	; 0x80
    94ce:	0249      	lsls	r1, r1, #9
    94d0:	430a      	orrs	r2, r1
    94d2:	605a      	str	r2, [r3, #4]

	system_interrupt_leave_critical_section();
    94d4:	4b08      	ldr	r3, [pc, #32]	; (94f8 <system_gclk_gen_enable+0x64>)
    94d6:	447b      	add	r3, pc
    94d8:	4798      	blx	r3
}
    94da:	46c0      	nop			; (mov r8, r8)
    94dc:	46bd      	mov	sp, r7
    94de:	b002      	add	sp, #8
    94e0:	bd80      	pop	{r7, pc}
    94e2:	46c0      	nop			; (mov r8, r8)
    94e4:	fffffe65 	.word	0xfffffe65
    94e8:	fffffe23 	.word	0xfffffe23
    94ec:	40000c04 	.word	0x40000c04
    94f0:	fffffe4b 	.word	0xfffffe4b
    94f4:	40000c00 	.word	0x40000c00
    94f8:	fffffe17 	.word	0xfffffe17

000094fc <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    94fc:	b590      	push	{r4, r7, lr}
    94fe:	b087      	sub	sp, #28
    9500:	af00      	add	r7, sp, #0
    9502:	0002      	movs	r2, r0
    9504:	1dfb      	adds	r3, r7, #7
    9506:	701a      	strb	r2, [r3, #0]
    9508:	4c2f      	ldr	r4, [pc, #188]	; (95c8 <system_gclk_gen_get_hz+0xcc>)
    950a:	447c      	add	r4, pc
	while (system_gclk_is_syncing()) {
    950c:	46c0      	nop			; (mov r8, r8)
    950e:	4b2f      	ldr	r3, [pc, #188]	; (95cc <system_gclk_gen_get_hz+0xd0>)
    9510:	447b      	add	r3, pc
    9512:	4798      	blx	r3
    9514:	1e03      	subs	r3, r0, #0
    9516:	d1fa      	bne.n	950e <system_gclk_gen_get_hz+0x12>
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();
    9518:	4b2d      	ldr	r3, [pc, #180]	; (95d0 <system_gclk_gen_get_hz+0xd4>)
    951a:	447b      	add	r3, pc
    951c:	4798      	blx	r3

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    951e:	4a2d      	ldr	r2, [pc, #180]	; (95d4 <system_gclk_gen_get_hz+0xd8>)
    9520:	1dfb      	adds	r3, r7, #7
    9522:	781b      	ldrb	r3, [r3, #0]
    9524:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    9526:	46c0      	nop			; (mov r8, r8)
    9528:	4b2b      	ldr	r3, [pc, #172]	; (95d8 <system_gclk_gen_get_hz+0xdc>)
    952a:	447b      	add	r3, pc
    952c:	4798      	blx	r3
    952e:	1e03      	subs	r3, r0, #0
    9530:	d1fa      	bne.n	9528 <system_gclk_gen_get_hz+0x2c>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    9532:	4b2a      	ldr	r3, [pc, #168]	; (95dc <system_gclk_gen_get_hz+0xe0>)
    9534:	685b      	ldr	r3, [r3, #4]
    9536:	04db      	lsls	r3, r3, #19
    9538:	0edb      	lsrs	r3, r3, #27
    953a:	b2db      	uxtb	r3, r3
	uint32_t gen_input_hz = system_clock_source_get_hz(
    953c:	0018      	movs	r0, r3
    953e:	4b28      	ldr	r3, [pc, #160]	; (95e0 <system_gclk_gen_get_hz+0xe4>)
    9540:	58e3      	ldr	r3, [r4, r3]
    9542:	4798      	blx	r3
    9544:	0003      	movs	r3, r0
    9546:	617b      	str	r3, [r7, #20]

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    9548:	4a22      	ldr	r2, [pc, #136]	; (95d4 <system_gclk_gen_get_hz+0xd8>)
    954a:	1dfb      	adds	r3, r7, #7
    954c:	781b      	ldrb	r3, [r3, #0]
    954e:	7013      	strb	r3, [r2, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    9550:	4b22      	ldr	r3, [pc, #136]	; (95dc <system_gclk_gen_get_hz+0xe0>)
    9552:	685b      	ldr	r3, [r3, #4]
    9554:	02db      	lsls	r3, r3, #11
    9556:	0fdb      	lsrs	r3, r3, #31
    9558:	b2da      	uxtb	r2, r3
    955a:	2313      	movs	r3, #19
    955c:	18fb      	adds	r3, r7, r3
    955e:	701a      	strb	r2, [r3, #0]

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    9560:	4a20      	ldr	r2, [pc, #128]	; (95e4 <system_gclk_gen_get_hz+0xe8>)
    9562:	1dfb      	adds	r3, r7, #7
    9564:	781b      	ldrb	r3, [r3, #0]
    9566:	7013      	strb	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
    9568:	46c0      	nop			; (mov r8, r8)
    956a:	4b1f      	ldr	r3, [pc, #124]	; (95e8 <system_gclk_gen_get_hz+0xec>)
    956c:	447b      	add	r3, pc
    956e:	4798      	blx	r3
    9570:	1e03      	subs	r3, r0, #0
    9572:	d1fa      	bne.n	956a <system_gclk_gen_get_hz+0x6e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    9574:	4b19      	ldr	r3, [pc, #100]	; (95dc <system_gclk_gen_get_hz+0xe0>)
    9576:	689b      	ldr	r3, [r3, #8]
    9578:	021b      	lsls	r3, r3, #8
    957a:	0c1b      	lsrs	r3, r3, #16
    957c:	b29b      	uxth	r3, r3
    957e:	60fb      	str	r3, [r7, #12]

	system_interrupt_leave_critical_section();
    9580:	4b1a      	ldr	r3, [pc, #104]	; (95ec <system_gclk_gen_get_hz+0xf0>)
    9582:	447b      	add	r3, pc
    9584:	4798      	blx	r3

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    9586:	2313      	movs	r3, #19
    9588:	18fb      	adds	r3, r7, r3
    958a:	781b      	ldrb	r3, [r3, #0]
    958c:	2b00      	cmp	r3, #0
    958e:	d10a      	bne.n	95a6 <system_gclk_gen_get_hz+0xaa>
    9590:	68fb      	ldr	r3, [r7, #12]
    9592:	2b01      	cmp	r3, #1
    9594:	d907      	bls.n	95a6 <system_gclk_gen_get_hz+0xaa>
		gen_input_hz /= divider;
    9596:	4b16      	ldr	r3, [pc, #88]	; (95f0 <system_gclk_gen_get_hz+0xf4>)
    9598:	58e3      	ldr	r3, [r4, r3]
    959a:	68f9      	ldr	r1, [r7, #12]
    959c:	6978      	ldr	r0, [r7, #20]
    959e:	4798      	blx	r3
    95a0:	0003      	movs	r3, r0
    95a2:	617b      	str	r3, [r7, #20]
    95a4:	e00a      	b.n	95bc <system_gclk_gen_get_hz+0xc0>
	} else if (divsel) {
    95a6:	2313      	movs	r3, #19
    95a8:	18fb      	adds	r3, r7, r3
    95aa:	781b      	ldrb	r3, [r3, #0]
    95ac:	2b00      	cmp	r3, #0
    95ae:	d005      	beq.n	95bc <system_gclk_gen_get_hz+0xc0>
		gen_input_hz >>= (divider+1);
    95b0:	68fb      	ldr	r3, [r7, #12]
    95b2:	3301      	adds	r3, #1
    95b4:	697a      	ldr	r2, [r7, #20]
    95b6:	40da      	lsrs	r2, r3
    95b8:	0013      	movs	r3, r2
    95ba:	617b      	str	r3, [r7, #20]
	}

	return gen_input_hz;
    95bc:	697b      	ldr	r3, [r7, #20]
}
    95be:	0018      	movs	r0, r3
    95c0:	46bd      	mov	sp, r7
    95c2:	b007      	add	sp, #28
    95c4:	bd90      	pop	{r4, r7, pc}
    95c6:	46c0      	nop			; (mov r8, r8)
    95c8:	00005f26 	.word	0x00005f26
    95cc:	fffffdf9 	.word	0xfffffdf9
    95d0:	fffffdb7 	.word	0xfffffdb7
    95d4:	40000c04 	.word	0x40000c04
    95d8:	fffffddf 	.word	0xfffffddf
    95dc:	40000c00 	.word	0x40000c00
    95e0:	0000028c 	.word	0x0000028c
    95e4:	40000c08 	.word	0x40000c08
    95e8:	fffffd9d 	.word	0xfffffd9d
    95ec:	fffffd6b 	.word	0xfffffd6b
    95f0:	00000234 	.word	0x00000234

000095f4 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
    95f4:	b580      	push	{r7, lr}
    95f6:	b084      	sub	sp, #16
    95f8:	af00      	add	r7, sp, #0
    95fa:	0002      	movs	r2, r0
    95fc:	6039      	str	r1, [r7, #0]
    95fe:	1dfb      	adds	r3, r7, #7
    9600:	701a      	strb	r2, [r3, #0]
    9602:	4a0d      	ldr	r2, [pc, #52]	; (9638 <system_gclk_chan_set_config+0x44>)
    9604:	447a      	add	r2, pc
	/* Sanity check arguments */
	Assert(config);

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);
    9606:	1dfb      	adds	r3, r7, #7
    9608:	781b      	ldrb	r3, [r3, #0]
    960a:	60fb      	str	r3, [r7, #12]

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    960c:	683b      	ldr	r3, [r7, #0]
    960e:	781b      	ldrb	r3, [r3, #0]
    9610:	021b      	lsls	r3, r3, #8
    9612:	0019      	movs	r1, r3
    9614:	68fb      	ldr	r3, [r7, #12]
    9616:	430b      	orrs	r3, r1
    9618:	60fb      	str	r3, [r7, #12]

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
    961a:	1dfb      	adds	r3, r7, #7
    961c:	781b      	ldrb	r3, [r3, #0]
    961e:	0018      	movs	r0, r3
    9620:	4b06      	ldr	r3, [pc, #24]	; (963c <system_gclk_chan_set_config+0x48>)
    9622:	58d3      	ldr	r3, [r2, r3]
    9624:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    9626:	4b06      	ldr	r3, [pc, #24]	; (9640 <system_gclk_chan_set_config+0x4c>)
    9628:	68fa      	ldr	r2, [r7, #12]
    962a:	b292      	uxth	r2, r2
    962c:	805a      	strh	r2, [r3, #2]
}
    962e:	46c0      	nop			; (mov r8, r8)
    9630:	46bd      	mov	sp, r7
    9632:	b004      	add	sp, #16
    9634:	bd80      	pop	{r7, pc}
    9636:	46c0      	nop			; (mov r8, r8)
    9638:	00005e2c 	.word	0x00005e2c
    963c:	000002b0 	.word	0x000002b0
    9640:	40000c00 	.word	0x40000c00

00009644 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    9644:	b580      	push	{r7, lr}
    9646:	b082      	sub	sp, #8
    9648:	af00      	add	r7, sp, #0
    964a:	0002      	movs	r2, r0
    964c:	1dfb      	adds	r3, r7, #7
    964e:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    9650:	4b0b      	ldr	r3, [pc, #44]	; (9680 <system_gclk_chan_enable+0x3c>)
    9652:	447b      	add	r3, pc
    9654:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9656:	4a0b      	ldr	r2, [pc, #44]	; (9684 <system_gclk_chan_enable+0x40>)
    9658:	1dfb      	adds	r3, r7, #7
    965a:	781b      	ldrb	r3, [r3, #0]
    965c:	7013      	strb	r3, [r2, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    965e:	490a      	ldr	r1, [pc, #40]	; (9688 <system_gclk_chan_enable+0x44>)
    9660:	4b09      	ldr	r3, [pc, #36]	; (9688 <system_gclk_chan_enable+0x44>)
    9662:	885b      	ldrh	r3, [r3, #2]
    9664:	b29b      	uxth	r3, r3
    9666:	2280      	movs	r2, #128	; 0x80
    9668:	01d2      	lsls	r2, r2, #7
    966a:	4313      	orrs	r3, r2
    966c:	b29b      	uxth	r3, r3
    966e:	804b      	strh	r3, [r1, #2]

	system_interrupt_leave_critical_section();
    9670:	4b06      	ldr	r3, [pc, #24]	; (968c <system_gclk_chan_enable+0x48>)
    9672:	447b      	add	r3, pc
    9674:	4798      	blx	r3
}
    9676:	46c0      	nop			; (mov r8, r8)
    9678:	46bd      	mov	sp, r7
    967a:	b002      	add	sp, #8
    967c:	bd80      	pop	{r7, pc}
    967e:	46c0      	nop			; (mov r8, r8)
    9680:	fffffc7f 	.word	0xfffffc7f
    9684:	40000c02 	.word	0x40000c02
    9688:	40000c00 	.word	0x40000c00
    968c:	fffffc7b 	.word	0xfffffc7b

00009690 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    9690:	b580      	push	{r7, lr}
    9692:	b084      	sub	sp, #16
    9694:	af00      	add	r7, sp, #0
    9696:	0002      	movs	r2, r0
    9698:	1dfb      	adds	r3, r7, #7
    969a:	701a      	strb	r2, [r3, #0]
	system_interrupt_enter_critical_section();
    969c:	4b1d      	ldr	r3, [pc, #116]	; (9714 <system_gclk_chan_disable+0x84>)
    969e:	447b      	add	r3, pc
    96a0:	4798      	blx	r3

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    96a2:	4a1d      	ldr	r2, [pc, #116]	; (9718 <system_gclk_chan_disable+0x88>)
    96a4:	1dfb      	adds	r3, r7, #7
    96a6:	781b      	ldrb	r3, [r3, #0]
    96a8:	7013      	strb	r3, [r2, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    96aa:	4b1c      	ldr	r3, [pc, #112]	; (971c <system_gclk_chan_disable+0x8c>)
    96ac:	885b      	ldrh	r3, [r3, #2]
    96ae:	051b      	lsls	r3, r3, #20
    96b0:	0f1b      	lsrs	r3, r3, #28
    96b2:	b2db      	uxtb	r3, r3
    96b4:	60fb      	str	r3, [r7, #12]
	GCLK->CLKCTRL.bit.GEN = 0;
    96b6:	4a19      	ldr	r2, [pc, #100]	; (971c <system_gclk_chan_disable+0x8c>)
    96b8:	8853      	ldrh	r3, [r2, #2]
    96ba:	4919      	ldr	r1, [pc, #100]	; (9720 <system_gclk_chan_disable+0x90>)
    96bc:	400b      	ands	r3, r1
    96be:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    96c0:	4a16      	ldr	r2, [pc, #88]	; (971c <system_gclk_chan_disable+0x8c>)
    96c2:	4b16      	ldr	r3, [pc, #88]	; (971c <system_gclk_chan_disable+0x8c>)
    96c4:	885b      	ldrh	r3, [r3, #2]
    96c6:	b29b      	uxth	r3, r3
    96c8:	4916      	ldr	r1, [pc, #88]	; (9724 <system_gclk_chan_disable+0x94>)
    96ca:	400b      	ands	r3, r1
    96cc:	b29b      	uxth	r3, r3
    96ce:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    96d0:	46c0      	nop			; (mov r8, r8)
    96d2:	4b12      	ldr	r3, [pc, #72]	; (971c <system_gclk_chan_disable+0x8c>)
    96d4:	885b      	ldrh	r3, [r3, #2]
    96d6:	b29b      	uxth	r3, r3
    96d8:	001a      	movs	r2, r3
    96da:	2380      	movs	r3, #128	; 0x80
    96dc:	01db      	lsls	r3, r3, #7
    96de:	4013      	ands	r3, r2
    96e0:	d1f7      	bne.n	96d2 <system_gclk_chan_disable+0x42>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    96e2:	4a0e      	ldr	r2, [pc, #56]	; (971c <system_gclk_chan_disable+0x8c>)
    96e4:	68fb      	ldr	r3, [r7, #12]
    96e6:	b2db      	uxtb	r3, r3
    96e8:	1c19      	adds	r1, r3, #0
    96ea:	230f      	movs	r3, #15
    96ec:	400b      	ands	r3, r1
    96ee:	b2d9      	uxtb	r1, r3
    96f0:	8853      	ldrh	r3, [r2, #2]
    96f2:	1c08      	adds	r0, r1, #0
    96f4:	210f      	movs	r1, #15
    96f6:	4001      	ands	r1, r0
    96f8:	0208      	lsls	r0, r1, #8
    96fa:	4909      	ldr	r1, [pc, #36]	; (9720 <system_gclk_chan_disable+0x90>)
    96fc:	400b      	ands	r3, r1
    96fe:	1c19      	adds	r1, r3, #0
    9700:	1c03      	adds	r3, r0, #0
    9702:	430b      	orrs	r3, r1
    9704:	8053      	strh	r3, [r2, #2]

	system_interrupt_leave_critical_section();
    9706:	4b08      	ldr	r3, [pc, #32]	; (9728 <system_gclk_chan_disable+0x98>)
    9708:	447b      	add	r3, pc
    970a:	4798      	blx	r3
}
    970c:	46c0      	nop			; (mov r8, r8)
    970e:	46bd      	mov	sp, r7
    9710:	b004      	add	sp, #16
    9712:	bd80      	pop	{r7, pc}
    9714:	fffffc33 	.word	0xfffffc33
    9718:	40000c02 	.word	0x40000c02
    971c:	40000c00 	.word	0x40000c00
    9720:	fffff0ff 	.word	0xfffff0ff
    9724:	ffffbfff 	.word	0xffffbfff
    9728:	fffffbe5 	.word	0xfffffbe5

0000972c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    972c:	b590      	push	{r4, r7, lr}
    972e:	b085      	sub	sp, #20
    9730:	af00      	add	r7, sp, #0
    9732:	0002      	movs	r2, r0
    9734:	1dfb      	adds	r3, r7, #7
    9736:	701a      	strb	r2, [r3, #0]
    9738:	4c0f      	ldr	r4, [pc, #60]	; (9778 <system_gclk_chan_get_hz+0x4c>)
    973a:	447c      	add	r4, pc
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
    973c:	4b0f      	ldr	r3, [pc, #60]	; (977c <system_gclk_chan_get_hz+0x50>)
    973e:	447b      	add	r3, pc
    9740:	4798      	blx	r3

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    9742:	4a0f      	ldr	r2, [pc, #60]	; (9780 <system_gclk_chan_get_hz+0x54>)
    9744:	1dfb      	adds	r3, r7, #7
    9746:	781b      	ldrb	r3, [r3, #0]
    9748:	7013      	strb	r3, [r2, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    974a:	4b0e      	ldr	r3, [pc, #56]	; (9784 <system_gclk_chan_get_hz+0x58>)
    974c:	885b      	ldrh	r3, [r3, #2]
    974e:	051b      	lsls	r3, r3, #20
    9750:	0f1b      	lsrs	r3, r3, #28
    9752:	b2da      	uxtb	r2, r3
    9754:	230f      	movs	r3, #15
    9756:	18fb      	adds	r3, r7, r3
    9758:	701a      	strb	r2, [r3, #0]

	system_interrupt_leave_critical_section();
    975a:	4b0b      	ldr	r3, [pc, #44]	; (9788 <system_gclk_chan_get_hz+0x5c>)
    975c:	447b      	add	r3, pc
    975e:	4798      	blx	r3

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    9760:	230f      	movs	r3, #15
    9762:	18fb      	adds	r3, r7, r3
    9764:	781b      	ldrb	r3, [r3, #0]
    9766:	0018      	movs	r0, r3
    9768:	4b08      	ldr	r3, [pc, #32]	; (978c <system_gclk_chan_get_hz+0x60>)
    976a:	58e3      	ldr	r3, [r4, r3]
    976c:	4798      	blx	r3
    976e:	0003      	movs	r3, r0
}
    9770:	0018      	movs	r0, r3
    9772:	46bd      	mov	sp, r7
    9774:	b005      	add	sp, #20
    9776:	bd90      	pop	{r4, r7, pc}
    9778:	00005cf6 	.word	0x00005cf6
    977c:	fffffb93 	.word	0xfffffb93
    9780:	40000c02 	.word	0x40000c02
    9784:	40000c00 	.word	0x40000c00
    9788:	fffffb91 	.word	0xfffffb91
    978c:	0000010c 	.word	0x0000010c

00009790 <system_interrupt_set_priority>:
 * \retval STATUS_INVALID_ARG  If an unsupported interrupt vector number was given
 */
enum status_code system_interrupt_set_priority(
		const enum system_interrupt_vector vector,
		const enum system_interrupt_priority_level priority_level)
{
    9790:	b590      	push	{r4, r7, lr}
    9792:	b085      	sub	sp, #20
    9794:	af00      	add	r7, sp, #0
    9796:	0002      	movs	r2, r0
    9798:	1dfb      	adds	r3, r7, #7
    979a:	701a      	strb	r2, [r3, #0]
    979c:	1dbb      	adds	r3, r7, #6
    979e:	1c0a      	adds	r2, r1, #0
    97a0:	701a      	strb	r2, [r3, #0]
	enum status_code status = STATUS_OK;
    97a2:	230f      	movs	r3, #15
    97a4:	18fb      	adds	r3, r7, r3
    97a6:	2200      	movs	r2, #0
    97a8:	701a      	strb	r2, [r3, #0]

	if (vector >= _SYSTEM_INTERRUPT_EXTERNAL_VECTOR_START) {
    97aa:	1dfb      	adds	r3, r7, #7
    97ac:	781b      	ldrb	r3, [r3, #0]
    97ae:	2b7f      	cmp	r3, #127	; 0x7f
    97b0:	d83c      	bhi.n	982c <system_interrupt_set_priority+0x9c>
		uint8_t register_num = vector / 4;
    97b2:	1dfb      	adds	r3, r7, #7
    97b4:	781b      	ldrb	r3, [r3, #0]
    97b6:	b25b      	sxtb	r3, r3
    97b8:	2b00      	cmp	r3, #0
    97ba:	da00      	bge.n	97be <system_interrupt_set_priority+0x2e>
    97bc:	3303      	adds	r3, #3
    97be:	109b      	asrs	r3, r3, #2
    97c0:	b25a      	sxtb	r2, r3
    97c2:	230e      	movs	r3, #14
    97c4:	18fb      	adds	r3, r7, r3
    97c6:	701a      	strb	r2, [r3, #0]
		uint8_t priority_pos = ((vector % 4) * 8) + (8 - __NVIC_PRIO_BITS);
    97c8:	1dfb      	adds	r3, r7, #7
    97ca:	781b      	ldrb	r3, [r3, #0]
    97cc:	b25b      	sxtb	r3, r3
    97ce:	4a22      	ldr	r2, [pc, #136]	; (9858 <system_interrupt_set_priority+0xc8>)
    97d0:	4013      	ands	r3, r2
    97d2:	d504      	bpl.n	97de <system_interrupt_set_priority+0x4e>
    97d4:	3b01      	subs	r3, #1
    97d6:	2204      	movs	r2, #4
    97d8:	4252      	negs	r2, r2
    97da:	4313      	orrs	r3, r2
    97dc:	3301      	adds	r3, #1
    97de:	b25b      	sxtb	r3, r3
    97e0:	b2db      	uxtb	r3, r3
    97e2:	00db      	lsls	r3, r3, #3
    97e4:	b2da      	uxtb	r2, r3
    97e6:	230d      	movs	r3, #13
    97e8:	18fb      	adds	r3, r7, r3
    97ea:	3206      	adds	r2, #6
    97ec:	701a      	strb	r2, [r3, #0]

		NVIC->IP[register_num] =
    97ee:	4c1b      	ldr	r4, [pc, #108]	; (985c <system_interrupt_set_priority+0xcc>)
    97f0:	230e      	movs	r3, #14
    97f2:	18fb      	adds	r3, r7, r3
    97f4:	781b      	ldrb	r3, [r3, #0]
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    97f6:	4919      	ldr	r1, [pc, #100]	; (985c <system_interrupt_set_priority+0xcc>)
    97f8:	220e      	movs	r2, #14
    97fa:	18ba      	adds	r2, r7, r2
    97fc:	7812      	ldrb	r2, [r2, #0]
    97fe:	32c0      	adds	r2, #192	; 0xc0
    9800:	0092      	lsls	r2, r2, #2
    9802:	5852      	ldr	r2, [r2, r1]
    9804:	210d      	movs	r1, #13
    9806:	1879      	adds	r1, r7, r1
    9808:	7809      	ldrb	r1, [r1, #0]
    980a:	2003      	movs	r0, #3
    980c:	4088      	lsls	r0, r1
    980e:	0001      	movs	r1, r0
    9810:	43c9      	mvns	r1, r1
    9812:	400a      	ands	r2, r1
				(priority_level << priority_pos);
    9814:	1db9      	adds	r1, r7, #6
    9816:	7808      	ldrb	r0, [r1, #0]
    9818:	210d      	movs	r1, #13
    981a:	1879      	adds	r1, r7, r1
    981c:	7809      	ldrb	r1, [r1, #0]
    981e:	4088      	lsls	r0, r1
    9820:	0001      	movs	r1, r0
				(NVIC->IP[register_num] & ~(_SYSTEM_INTERRUPT_PRIORITY_MASK << priority_pos)) |
    9822:	430a      	orrs	r2, r1
		NVIC->IP[register_num] =
    9824:	33c0      	adds	r3, #192	; 0xc0
    9826:	009b      	lsls	r3, r3, #2
    9828:	511a      	str	r2, [r3, r4]
    982a:	e00e      	b.n	984a <system_interrupt_set_priority+0xba>

	} else if (vector == SYSTEM_INTERRUPT_SYSTICK) {
    982c:	1dfb      	adds	r3, r7, #7
    982e:	781b      	ldrb	r3, [r3, #0]
    9830:	b25b      	sxtb	r3, r3
    9832:	3301      	adds	r3, #1
    9834:	d105      	bne.n	9842 <system_interrupt_set_priority+0xb2>
		SCB->SHP[1] = (priority_level << _SYSTEM_INTERRUPT_SYSTICK_PRI_POS);
    9836:	4b0a      	ldr	r3, [pc, #40]	; (9860 <system_interrupt_set_priority+0xd0>)
    9838:	1dba      	adds	r2, r7, #6
    983a:	7812      	ldrb	r2, [r2, #0]
    983c:	0792      	lsls	r2, r2, #30
    983e:	621a      	str	r2, [r3, #32]
    9840:	e003      	b.n	984a <system_interrupt_set_priority+0xba>
	} else {
		Assert(false);
		status = STATUS_ERR_INVALID_ARG;
    9842:	230f      	movs	r3, #15
    9844:	18fb      	adds	r3, r7, r3
    9846:	2217      	movs	r2, #23
    9848:	701a      	strb	r2, [r3, #0]
	}

	return status;
    984a:	230f      	movs	r3, #15
    984c:	18fb      	adds	r3, r7, r3
    984e:	781b      	ldrb	r3, [r3, #0]
}
    9850:	0018      	movs	r0, r3
    9852:	46bd      	mov	sp, r7
    9854:	b005      	add	sp, #20
    9856:	bd90      	pop	{r4, r7, pc}
    9858:	80000003 	.word	0x80000003
    985c:	e000e100 	.word	0xe000e100
    9860:	e000ed00 	.word	0xe000ed00

00009864 <system_pinmux_get_group_from_gpio_pin>:
{
    9864:	b580      	push	{r7, lr}
    9866:	b084      	sub	sp, #16
    9868:	af00      	add	r7, sp, #0
    986a:	0002      	movs	r2, r0
    986c:	1dfb      	adds	r3, r7, #7
    986e:	701a      	strb	r2, [r3, #0]
	uint8_t port_index  = (gpio_pin / 128);
    9870:	230f      	movs	r3, #15
    9872:	18fb      	adds	r3, r7, r3
    9874:	1dfa      	adds	r2, r7, #7
    9876:	7812      	ldrb	r2, [r2, #0]
    9878:	09d2      	lsrs	r2, r2, #7
    987a:	701a      	strb	r2, [r3, #0]
	uint8_t group_index = (gpio_pin / 32);
    987c:	230e      	movs	r3, #14
    987e:	18fb      	adds	r3, r7, r3
    9880:	1dfa      	adds	r2, r7, #7
    9882:	7812      	ldrb	r2, [r2, #0]
    9884:	0952      	lsrs	r2, r2, #5
    9886:	701a      	strb	r2, [r3, #0]
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;
    9888:	4b0d      	ldr	r3, [pc, #52]	; (98c0 <system_pinmux_get_group_from_gpio_pin+0x5c>)
    988a:	60bb      	str	r3, [r7, #8]
	if (port_index < PORT_INST_NUM) {
    988c:	230f      	movs	r3, #15
    988e:	18fb      	adds	r3, r7, r3
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	2b00      	cmp	r3, #0
    9894:	d10f      	bne.n	98b6 <system_pinmux_get_group_from_gpio_pin+0x52>
		return &(ports[port_index]->Group[group_index]);
    9896:	230f      	movs	r3, #15
    9898:	18fb      	adds	r3, r7, r3
    989a:	781b      	ldrb	r3, [r3, #0]
    989c:	009b      	lsls	r3, r3, #2
    989e:	2210      	movs	r2, #16
    98a0:	4694      	mov	ip, r2
    98a2:	44bc      	add	ip, r7
    98a4:	4463      	add	r3, ip
    98a6:	3b08      	subs	r3, #8
    98a8:	681a      	ldr	r2, [r3, #0]
    98aa:	230e      	movs	r3, #14
    98ac:	18fb      	adds	r3, r7, r3
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	01db      	lsls	r3, r3, #7
    98b2:	18d3      	adds	r3, r2, r3
    98b4:	e000      	b.n	98b8 <system_pinmux_get_group_from_gpio_pin+0x54>
		return NULL;
    98b6:	2300      	movs	r3, #0
}
    98b8:	0018      	movs	r0, r3
    98ba:	46bd      	mov	sp, r7
    98bc:	b004      	add	sp, #16
    98be:	bd80      	pop	{r7, pc}
    98c0:	41004400 	.word	0x41004400

000098c4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    98c4:	b580      	push	{r7, lr}
    98c6:	b088      	sub	sp, #32
    98c8:	af00      	add	r7, sp, #0
    98ca:	60f8      	str	r0, [r7, #12]
    98cc:	60b9      	str	r1, [r7, #8]
    98ce:	607a      	str	r2, [r7, #4]
	Assert(port);
	Assert(config);

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;
    98d0:	2300      	movs	r3, #0
    98d2:	61fb      	str	r3, [r7, #28]

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    98d4:	687b      	ldr	r3, [r7, #4]
    98d6:	78db      	ldrb	r3, [r3, #3]
    98d8:	2201      	movs	r2, #1
    98da:	4053      	eors	r3, r2
    98dc:	b2db      	uxtb	r3, r3
    98de:	2b00      	cmp	r3, #0
    98e0:	d035      	beq.n	994e <_system_pinmux_config+0x8a>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    98e2:	687b      	ldr	r3, [r7, #4]
    98e4:	781b      	ldrb	r3, [r3, #0]
    98e6:	2b80      	cmp	r3, #128	; 0x80
    98e8:	d00b      	beq.n	9902 <_system_pinmux_config+0x3e>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
    98ea:	69fb      	ldr	r3, [r7, #28]
    98ec:	2280      	movs	r2, #128	; 0x80
    98ee:	0252      	lsls	r2, r2, #9
    98f0:	4313      	orrs	r3, r2
    98f2:	61fb      	str	r3, [r7, #28]
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    98f4:	687b      	ldr	r3, [r7, #4]
    98f6:	781b      	ldrb	r3, [r3, #0]
    98f8:	061b      	lsls	r3, r3, #24
    98fa:	001a      	movs	r2, r3
    98fc:	69fb      	ldr	r3, [r7, #28]
    98fe:	4313      	orrs	r3, r2
    9900:	61fb      	str	r3, [r7, #28]
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    9902:	687b      	ldr	r3, [r7, #4]
    9904:	785b      	ldrb	r3, [r3, #1]
    9906:	2b00      	cmp	r3, #0
    9908:	d003      	beq.n	9912 <_system_pinmux_config+0x4e>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    990a:	687b      	ldr	r3, [r7, #4]
    990c:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    990e:	2b02      	cmp	r3, #2
    9910:	d110      	bne.n	9934 <_system_pinmux_config+0x70>
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;
    9912:	69fb      	ldr	r3, [r7, #28]
    9914:	2280      	movs	r2, #128	; 0x80
    9916:	0292      	lsls	r2, r2, #10
    9918:	4313      	orrs	r3, r2
    991a:	61fb      	str	r3, [r7, #28]

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    991c:	687b      	ldr	r3, [r7, #4]
    991e:	789b      	ldrb	r3, [r3, #2]
    9920:	2b00      	cmp	r3, #0
    9922:	d004      	beq.n	992e <_system_pinmux_config+0x6a>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    9924:	69fb      	ldr	r3, [r7, #28]
    9926:	2280      	movs	r2, #128	; 0x80
    9928:	02d2      	lsls	r2, r2, #11
    992a:	4313      	orrs	r3, r2
    992c:	61fb      	str	r3, [r7, #28]
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    992e:	68fb      	ldr	r3, [r7, #12]
    9930:	68ba      	ldr	r2, [r7, #8]
    9932:	605a      	str	r2, [r3, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9934:	687b      	ldr	r3, [r7, #4]
    9936:	785b      	ldrb	r3, [r3, #1]
    9938:	2b01      	cmp	r3, #1
    993a:	d003      	beq.n	9944 <_system_pinmux_config+0x80>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    993c:	687b      	ldr	r3, [r7, #4]
    993e:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    9940:	2b02      	cmp	r3, #2
    9942:	d107      	bne.n	9954 <_system_pinmux_config+0x90>
			/* Cannot use a pull-up if the output driver is enabled,
			 * if requested the input buffer can only sample the current
			 * output state */
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    9944:	69fb      	ldr	r3, [r7, #28]
    9946:	4a22      	ldr	r2, [pc, #136]	; (99d0 <_system_pinmux_config+0x10c>)
    9948:	4013      	ands	r3, r2
    994a:	61fb      	str	r3, [r7, #28]
    994c:	e002      	b.n	9954 <_system_pinmux_config+0x90>
		}
	} else {
		port->DIRCLR.reg = pin_mask;
    994e:	68fb      	ldr	r3, [r7, #12]
    9950:	68ba      	ldr	r2, [r7, #8]
    9952:	605a      	str	r2, [r3, #4]
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    9954:	68bb      	ldr	r3, [r7, #8]
    9956:	041b      	lsls	r3, r3, #16
    9958:	0c1b      	lsrs	r3, r3, #16
    995a:	61bb      	str	r3, [r7, #24]
	uint32_t upper_pin_mask = (pin_mask >> 16);
    995c:	68bb      	ldr	r3, [r7, #8]
    995e:	0c1b      	lsrs	r3, r3, #16
    9960:	617b      	str	r3, [r7, #20]

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9962:	69ba      	ldr	r2, [r7, #24]
    9964:	69fb      	ldr	r3, [r7, #28]
    9966:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    9968:	22a0      	movs	r2, #160	; 0xa0
    996a:	05d2      	lsls	r2, r2, #23
    996c:	431a      	orrs	r2, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    996e:	68fb      	ldr	r3, [r7, #12]
    9970:	629a      	str	r2, [r3, #40]	; 0x28

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    9972:	697a      	ldr	r2, [r7, #20]
    9974:	69fb      	ldr	r3, [r7, #28]
    9976:	4313      	orrs	r3, r2
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    9978:	22d0      	movs	r2, #208	; 0xd0
    997a:	0612      	lsls	r2, r2, #24
    997c:	431a      	orrs	r2, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    997e:	68fb      	ldr	r3, [r7, #12]
    9980:	629a      	str	r2, [r3, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    9982:	687b      	ldr	r3, [r7, #4]
    9984:	78db      	ldrb	r3, [r3, #3]
    9986:	2201      	movs	r2, #1
    9988:	4053      	eors	r3, r2
    998a:	b2db      	uxtb	r3, r3
    998c:	2b00      	cmp	r3, #0
    998e:	d01a      	beq.n	99c6 <_system_pinmux_config+0x102>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    9990:	69fa      	ldr	r2, [r7, #28]
    9992:	2380      	movs	r3, #128	; 0x80
    9994:	02db      	lsls	r3, r3, #11
    9996:	4013      	ands	r3, r2
    9998:	d00a      	beq.n	99b0 <_system_pinmux_config+0xec>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    999a:	687b      	ldr	r3, [r7, #4]
    999c:	789b      	ldrb	r3, [r3, #2]
    999e:	2b01      	cmp	r3, #1
    99a0:	d103      	bne.n	99aa <_system_pinmux_config+0xe6>
				port->OUTSET.reg = pin_mask;
    99a2:	68fb      	ldr	r3, [r7, #12]
    99a4:	68ba      	ldr	r2, [r7, #8]
    99a6:	619a      	str	r2, [r3, #24]
    99a8:	e002      	b.n	99b0 <_system_pinmux_config+0xec>
			} else {
				port->OUTCLR.reg = pin_mask;
    99aa:	68fb      	ldr	r3, [r7, #12]
    99ac:	68ba      	ldr	r2, [r7, #8]
    99ae:	615a      	str	r2, [r3, #20]
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    99b0:	687b      	ldr	r3, [r7, #4]
    99b2:	785b      	ldrb	r3, [r3, #1]
    99b4:	2b01      	cmp	r3, #1
    99b6:	d003      	beq.n	99c0 <_system_pinmux_config+0xfc>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
    99b8:	687b      	ldr	r3, [r7, #4]
    99ba:	785b      	ldrb	r3, [r3, #1]
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    99bc:	2b02      	cmp	r3, #2
    99be:	d102      	bne.n	99c6 <_system_pinmux_config+0x102>
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
    99c0:	68fb      	ldr	r3, [r7, #12]
    99c2:	68ba      	ldr	r2, [r7, #8]
    99c4:	609a      	str	r2, [r3, #8]
		}
	}
}
    99c6:	46c0      	nop			; (mov r8, r8)
    99c8:	46bd      	mov	sp, r7
    99ca:	b008      	add	sp, #32
    99cc:	bd80      	pop	{r7, pc}
    99ce:	46c0      	nop			; (mov r8, r8)
    99d0:	fffbffff 	.word	0xfffbffff

000099d4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    99d4:	b580      	push	{r7, lr}
    99d6:	b084      	sub	sp, #16
    99d8:	af00      	add	r7, sp, #0
    99da:	0002      	movs	r2, r0
    99dc:	6039      	str	r1, [r7, #0]
    99de:	1dfb      	adds	r3, r7, #7
    99e0:	701a      	strb	r2, [r3, #0]
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
    99e2:	1dfb      	adds	r3, r7, #7
    99e4:	781b      	ldrb	r3, [r3, #0]
    99e6:	0018      	movs	r0, r3
    99e8:	4b0b      	ldr	r3, [pc, #44]	; (9a18 <system_pinmux_pin_set_config+0x44>)
    99ea:	447b      	add	r3, pc
    99ec:	4798      	blx	r3
    99ee:	0003      	movs	r3, r0
    99f0:	60fb      	str	r3, [r7, #12]
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    99f2:	1dfb      	adds	r3, r7, #7
    99f4:	781b      	ldrb	r3, [r3, #0]
    99f6:	221f      	movs	r2, #31
    99f8:	4013      	ands	r3, r2
    99fa:	2201      	movs	r2, #1
    99fc:	409a      	lsls	r2, r3
    99fe:	0013      	movs	r3, r2
    9a00:	60bb      	str	r3, [r7, #8]

	_system_pinmux_config(port, pin_mask, config);
    9a02:	683a      	ldr	r2, [r7, #0]
    9a04:	68b9      	ldr	r1, [r7, #8]
    9a06:	68fb      	ldr	r3, [r7, #12]
    9a08:	0018      	movs	r0, r3
    9a0a:	4b04      	ldr	r3, [pc, #16]	; (9a1c <system_pinmux_pin_set_config+0x48>)
    9a0c:	447b      	add	r3, pc
    9a0e:	4798      	blx	r3
}
    9a10:	46c0      	nop			; (mov r8, r8)
    9a12:	46bd      	mov	sp, r7
    9a14:	b004      	add	sp, #16
    9a16:	bd80      	pop	{r7, pc}
    9a18:	fffffe77 	.word	0xfffffe77
    9a1c:	fffffeb5 	.word	0xfffffeb5

00009a20 <_system_dummy_init>:
 * Dummy initialization function, used as a weak alias target for the various
 * init functions called by \ref system_init().
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
    9a20:	b580      	push	{r7, lr}
    9a22:	af00      	add	r7, sp, #0
	return;
    9a24:	46c0      	nop			; (mov r8, r8)
}
    9a26:	46bd      	mov	sp, r7
    9a28:	bd80      	pop	{r7, pc}
	...

00009a2c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    9a2c:	b5b0      	push	{r4, r5, r7, lr}
    9a2e:	af00      	add	r7, sp, #0
    9a30:	4c09      	ldr	r4, [pc, #36]	; (9a58 <system_init+0x2c>)
    9a32:	447c      	add	r4, pc
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    9a34:	4b09      	ldr	r3, [pc, #36]	; (9a5c <system_init+0x30>)
    9a36:	58e3      	ldr	r3, [r4, r3]
    9a38:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    9a3a:	4b09      	ldr	r3, [pc, #36]	; (9a60 <system_init+0x34>)
    9a3c:	58e3      	ldr	r3, [r4, r3]
    9a3e:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    9a40:	4b08      	ldr	r3, [pc, #32]	; (9a64 <system_init+0x38>)
    9a42:	58e3      	ldr	r3, [r4, r3]
    9a44:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    9a46:	4b08      	ldr	r3, [pc, #32]	; (9a68 <system_init+0x3c>)
    9a48:	58e3      	ldr	r3, [r4, r3]
    9a4a:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    9a4c:	4b07      	ldr	r3, [pc, #28]	; (9a6c <system_init+0x40>)
    9a4e:	58e3      	ldr	r3, [r4, r3]
    9a50:	4798      	blx	r3
}
    9a52:	46c0      	nop			; (mov r8, r8)
    9a54:	46bd      	mov	sp, r7
    9a56:	bdb0      	pop	{r4, r5, r7, pc}
    9a58:	000059fe 	.word	0x000059fe
    9a5c:	00000278 	.word	0x00000278
    9a60:	000001ec 	.word	0x000001ec
    9a64:	0000026c 	.word	0x0000026c
    9a68:	000001a4 	.word	0x000001a4
    9a6c:	00000100 	.word	0x00000100

00009a70 <cpu_irq_save>:
{
    9a70:	b580      	push	{r7, lr}
    9a72:	b082      	sub	sp, #8
    9a74:	af00      	add	r7, sp, #0
    9a76:	4a0b      	ldr	r2, [pc, #44]	; (9aa4 <cpu_irq_save+0x34>)
    9a78:	447a      	add	r2, pc
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    9a7a:	f3ef 8310 	mrs	r3, PRIMASK
    9a7e:	607b      	str	r3, [r7, #4]
  return(result);
    9a80:	687b      	ldr	r3, [r7, #4]
	volatile irqflags_t flags = cpu_irq_is_enabled();
    9a82:	4259      	negs	r1, r3
    9a84:	414b      	adcs	r3, r1
    9a86:	b2db      	uxtb	r3, r3
    9a88:	603b      	str	r3, [r7, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    9a8a:	b672      	cpsid	i
    9a8c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    9a90:	4b05      	ldr	r3, [pc, #20]	; (9aa8 <cpu_irq_save+0x38>)
    9a92:	58d3      	ldr	r3, [r2, r3]
    9a94:	2200      	movs	r2, #0
    9a96:	701a      	strb	r2, [r3, #0]
	return flags;
    9a98:	683b      	ldr	r3, [r7, #0]
}
    9a9a:	0018      	movs	r0, r3
    9a9c:	46bd      	mov	sp, r7
    9a9e:	b002      	add	sp, #8
    9aa0:	bd80      	pop	{r7, pc}
    9aa2:	46c0      	nop			; (mov r8, r8)
    9aa4:	000059b8 	.word	0x000059b8
    9aa8:	00000118 	.word	0x00000118

00009aac <cpu_irq_is_enabled_flags>:
{
    9aac:	b580      	push	{r7, lr}
    9aae:	b082      	sub	sp, #8
    9ab0:	af00      	add	r7, sp, #0
    9ab2:	6078      	str	r0, [r7, #4]
	return (flags);
    9ab4:	687b      	ldr	r3, [r7, #4]
    9ab6:	1e5a      	subs	r2, r3, #1
    9ab8:	4193      	sbcs	r3, r2
    9aba:	b2db      	uxtb	r3, r3
}
    9abc:	0018      	movs	r0, r3
    9abe:	46bd      	mov	sp, r7
    9ac0:	b002      	add	sp, #8
    9ac2:	bd80      	pop	{r7, pc}

00009ac4 <cpu_irq_restore>:
{
    9ac4:	b590      	push	{r4, r7, lr}
    9ac6:	b083      	sub	sp, #12
    9ac8:	af00      	add	r7, sp, #0
    9aca:	6078      	str	r0, [r7, #4]
    9acc:	4c09      	ldr	r4, [pc, #36]	; (9af4 <cpu_irq_restore+0x30>)
    9ace:	447c      	add	r4, pc
	if (cpu_irq_is_enabled_flags(flags))
    9ad0:	687b      	ldr	r3, [r7, #4]
    9ad2:	0018      	movs	r0, r3
    9ad4:	4b08      	ldr	r3, [pc, #32]	; (9af8 <cpu_irq_restore+0x34>)
    9ad6:	447b      	add	r3, pc
    9ad8:	4798      	blx	r3
    9ada:	1e03      	subs	r3, r0, #0
    9adc:	d006      	beq.n	9aec <cpu_irq_restore+0x28>
		cpu_irq_enable();
    9ade:	4b07      	ldr	r3, [pc, #28]	; (9afc <cpu_irq_restore+0x38>)
    9ae0:	58e3      	ldr	r3, [r4, r3]
    9ae2:	2201      	movs	r2, #1
    9ae4:	701a      	strb	r2, [r3, #0]
    9ae6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    9aea:	b662      	cpsie	i
}
    9aec:	46c0      	nop			; (mov r8, r8)
    9aee:	46bd      	mov	sp, r7
    9af0:	b003      	add	sp, #12
    9af2:	bd90      	pop	{r4, r7, pc}
    9af4:	00005962 	.word	0x00005962
    9af8:	ffffffd3 	.word	0xffffffd3
    9afc:	00000118 	.word	0x00000118

00009b00 <usb_device_attach>:
 * \brief Attach USB device to the bus
 *
 * \param module_inst Pointer to USB device module instance
 */
static inline void usb_device_attach(struct usb_module *module_inst)
{
    9b00:	b580      	push	{r7, lr}
    9b02:	b082      	sub	sp, #8
    9b04:	af00      	add	r7, sp, #0
    9b06:	6078      	str	r0, [r7, #4]
	module_inst->hw->DEVICE.CTRLB.reg &= ~USB_DEVICE_CTRLB_DETACH;
    9b08:	687b      	ldr	r3, [r7, #4]
    9b0a:	681a      	ldr	r2, [r3, #0]
    9b0c:	687b      	ldr	r3, [r7, #4]
    9b0e:	681b      	ldr	r3, [r3, #0]
    9b10:	891b      	ldrh	r3, [r3, #8]
    9b12:	b29b      	uxth	r3, r3
    9b14:	2101      	movs	r1, #1
    9b16:	438b      	bics	r3, r1
    9b18:	b29b      	uxth	r3, r3
    9b1a:	8113      	strh	r3, [r2, #8]
}
    9b1c:	46c0      	nop			; (mov r8, r8)
    9b1e:	46bd      	mov	sp, r7
    9b20:	b002      	add	sp, #8
    9b22:	bd80      	pop	{r7, pc}

00009b24 <usb_device_get_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device address value.
 */
static inline uint8_t usb_device_get_address(struct usb_module *module_inst)
{
    9b24:	b580      	push	{r7, lr}
    9b26:	b082      	sub	sp, #8
    9b28:	af00      	add	r7, sp, #0
    9b2a:	6078      	str	r0, [r7, #4]
	return ((uint8_t)(module_inst->hw->DEVICE.DADD.bit.DADD));
    9b2c:	687b      	ldr	r3, [r7, #4]
    9b2e:	681b      	ldr	r3, [r3, #0]
    9b30:	7a9b      	ldrb	r3, [r3, #10]
    9b32:	065b      	lsls	r3, r3, #25
    9b34:	0e5b      	lsrs	r3, r3, #25
    9b36:	b2db      	uxtb	r3, r3
}
    9b38:	0018      	movs	r0, r3
    9b3a:	46bd      	mov	sp, r7
    9b3c:	b002      	add	sp, #8
    9b3e:	bd80      	pop	{r7, pc}

00009b40 <usb_device_set_address>:
 *
 * \param module_inst Pointer to USB device module instance
 * \param address     USB device address value
 */
static inline void usb_device_set_address(struct usb_module *module_inst, uint8_t address)
{
    9b40:	b580      	push	{r7, lr}
    9b42:	b082      	sub	sp, #8
    9b44:	af00      	add	r7, sp, #0
    9b46:	6078      	str	r0, [r7, #4]
    9b48:	000a      	movs	r2, r1
    9b4a:	1cfb      	adds	r3, r7, #3
    9b4c:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.DADD.reg = USB_DEVICE_DADD_ADDEN | address;
    9b4e:	687b      	ldr	r3, [r7, #4]
    9b50:	681b      	ldr	r3, [r3, #0]
    9b52:	1cfa      	adds	r2, r7, #3
    9b54:	7812      	ldrb	r2, [r2, #0]
    9b56:	2180      	movs	r1, #128	; 0x80
    9b58:	4249      	negs	r1, r1
    9b5a:	430a      	orrs	r2, r1
    9b5c:	b2d2      	uxtb	r2, r2
    9b5e:	729a      	strb	r2, [r3, #10]
}
    9b60:	46c0      	nop			; (mov r8, r8)
    9b62:	46bd      	mov	sp, r7
    9b64:	b002      	add	sp, #8
    9b66:	bd80      	pop	{r7, pc}

00009b68 <usb_device_get_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device frame number value.
 */
static inline uint16_t usb_device_get_frame_number(struct usb_module *module_inst)
{
    9b68:	b580      	push	{r7, lr}
    9b6a:	b082      	sub	sp, #8
    9b6c:	af00      	add	r7, sp, #0
    9b6e:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.bit.FNUM));
    9b70:	687b      	ldr	r3, [r7, #4]
    9b72:	681b      	ldr	r3, [r3, #0]
    9b74:	8a1b      	ldrh	r3, [r3, #16]
    9b76:	049b      	lsls	r3, r3, #18
    9b78:	0d5b      	lsrs	r3, r3, #21
    9b7a:	b29b      	uxth	r3, r3
}
    9b7c:	0018      	movs	r0, r3
    9b7e:	46bd      	mov	sp, r7
    9b80:	b002      	add	sp, #8
    9b82:	bd80      	pop	{r7, pc}

00009b84 <usb_device_get_micro_frame_number>:
 *
 * \param module_inst Pointer to USB device module instance
 * \return USB device micro-frame number value.
 */
static inline uint16_t usb_device_get_micro_frame_number(struct usb_module *module_inst)
{
    9b84:	b580      	push	{r7, lr}
    9b86:	b082      	sub	sp, #8
    9b88:	af00      	add	r7, sp, #0
    9b8a:	6078      	str	r0, [r7, #4]
	return ((uint16_t)(module_inst->hw->DEVICE.FNUM.reg));
    9b8c:	687b      	ldr	r3, [r7, #4]
    9b8e:	681b      	ldr	r3, [r3, #0]
    9b90:	8a1b      	ldrh	r3, [r3, #16]
    9b92:	b29b      	uxth	r3, r3
}
    9b94:	0018      	movs	r0, r3
    9b96:	46bd      	mov	sp, r7
    9b98:	b002      	add	sp, #8
    9b9a:	bd80      	pop	{r7, pc}

00009b9c <usb_device_set_lpm_mode>:
 * \param module_inst Pointer to USB device module instance
 * \param lpm_mode    LPM mode
 */
static inline void usb_device_set_lpm_mode(struct usb_module *module_inst,
		enum usb_device_lpm_mode lpm_mode)
{
    9b9c:	b580      	push	{r7, lr}
    9b9e:	b082      	sub	sp, #8
    9ba0:	af00      	add	r7, sp, #0
    9ba2:	6078      	str	r0, [r7, #4]
    9ba4:	000a      	movs	r2, r1
    9ba6:	1cfb      	adds	r3, r7, #3
    9ba8:	701a      	strb	r2, [r3, #0]
	module_inst->hw->DEVICE.CTRLB.bit.LPMHDSK = lpm_mode;
    9baa:	687b      	ldr	r3, [r7, #4]
    9bac:	681a      	ldr	r2, [r3, #0]
    9bae:	1cfb      	adds	r3, r7, #3
    9bb0:	781b      	ldrb	r3, [r3, #0]
    9bb2:	2103      	movs	r1, #3
    9bb4:	400b      	ands	r3, r1
    9bb6:	b2d9      	uxtb	r1, r3
    9bb8:	8913      	ldrh	r3, [r2, #8]
    9bba:	1c08      	adds	r0, r1, #0
    9bbc:	2103      	movs	r1, #3
    9bbe:	4001      	ands	r1, r0
    9bc0:	0288      	lsls	r0, r1, #10
    9bc2:	4905      	ldr	r1, [pc, #20]	; (9bd8 <usb_device_set_lpm_mode+0x3c>)
    9bc4:	400b      	ands	r3, r1
    9bc6:	1c19      	adds	r1, r3, #0
    9bc8:	1c03      	adds	r3, r0, #0
    9bca:	430b      	orrs	r3, r1
    9bcc:	8113      	strh	r3, [r2, #8]
}
    9bce:	46c0      	nop			; (mov r8, r8)
    9bd0:	46bd      	mov	sp, r7
    9bd2:	b002      	add	sp, #8
    9bd4:	bd80      	pop	{r7, pc}
    9bd6:	46c0      	nop			; (mov r8, r8)
    9bd8:	fffff3ff 	.word	0xfffff3ff

00009bdc <sleepmgr_lock_mode>:
 * not put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to lock.
 */
static inline void sleepmgr_lock_mode(enum sleepmgr_mode mode)
{
    9bdc:	b590      	push	{r4, r7, lr}
    9bde:	b085      	sub	sp, #20
    9be0:	af00      	add	r7, sp, #0
    9be2:	0002      	movs	r2, r0
    9be4:	1dfb      	adds	r3, r7, #7
    9be6:	701a      	strb	r2, [r3, #0]
    9be8:	4c10      	ldr	r4, [pc, #64]	; (9c2c <sleepmgr_lock_mode+0x50>)
    9bea:	447c      	add	r4, pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] >= 0xff) {
    9bec:	1dfb      	adds	r3, r7, #7
    9bee:	781b      	ldrb	r3, [r3, #0]
    9bf0:	4a0f      	ldr	r2, [pc, #60]	; (9c30 <sleepmgr_lock_mode+0x54>)
    9bf2:	58a2      	ldr	r2, [r4, r2]
    9bf4:	5cd3      	ldrb	r3, [r2, r3]
    9bf6:	2bff      	cmp	r3, #255	; 0xff
    9bf8:	d100      	bne.n	9bfc <sleepmgr_lock_mode+0x20>
		while (true) {
    9bfa:	e7fe      	b.n	9bfa <sleepmgr_lock_mode+0x1e>
			// Check APP or change the data type to uint16_t.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    9bfc:	4b0d      	ldr	r3, [pc, #52]	; (9c34 <sleepmgr_lock_mode+0x58>)
    9bfe:	447b      	add	r3, pc
    9c00:	4798      	blx	r3
    9c02:	0003      	movs	r3, r0
    9c04:	60fb      	str	r3, [r7, #12]

	++sleepmgr_locks[mode];
    9c06:	1dfb      	adds	r3, r7, #7
    9c08:	781b      	ldrb	r3, [r3, #0]
    9c0a:	4a09      	ldr	r2, [pc, #36]	; (9c30 <sleepmgr_lock_mode+0x54>)
    9c0c:	58a2      	ldr	r2, [r4, r2]
    9c0e:	5cd2      	ldrb	r2, [r2, r3]
    9c10:	3201      	adds	r2, #1
    9c12:	b2d1      	uxtb	r1, r2
    9c14:	4a06      	ldr	r2, [pc, #24]	; (9c30 <sleepmgr_lock_mode+0x54>)
    9c16:	58a2      	ldr	r2, [r4, r2]
    9c18:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    9c1a:	68fb      	ldr	r3, [r7, #12]
    9c1c:	0018      	movs	r0, r3
    9c1e:	4b06      	ldr	r3, [pc, #24]	; (9c38 <sleepmgr_lock_mode+0x5c>)
    9c20:	447b      	add	r3, pc
    9c22:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    9c24:	46c0      	nop			; (mov r8, r8)
    9c26:	46bd      	mov	sp, r7
    9c28:	b005      	add	sp, #20
    9c2a:	bd90      	pop	{r4, r7, pc}
    9c2c:	00005846 	.word	0x00005846
    9c30:	00000248 	.word	0x00000248
    9c34:	fffffe6f 	.word	0xfffffe6f
    9c38:	fffffea1 	.word	0xfffffea1

00009c3c <sleepmgr_unlock_mode>:
 * manager can put the device to sleep in the deeper sleep modes.
 *
 * \param mode Sleep mode to unlock.
 */
static inline void sleepmgr_unlock_mode(enum sleepmgr_mode mode)
{
    9c3c:	b590      	push	{r4, r7, lr}
    9c3e:	b085      	sub	sp, #20
    9c40:	af00      	add	r7, sp, #0
    9c42:	0002      	movs	r2, r0
    9c44:	1dfb      	adds	r3, r7, #7
    9c46:	701a      	strb	r2, [r3, #0]
    9c48:	4c10      	ldr	r4, [pc, #64]	; (9c8c <sleepmgr_unlock_mode+0x50>)
    9c4a:	447c      	add	r4, pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	irqflags_t flags;

	if(sleepmgr_locks[mode] == 0) {
    9c4c:	1dfb      	adds	r3, r7, #7
    9c4e:	781b      	ldrb	r3, [r3, #0]
    9c50:	4a0f      	ldr	r2, [pc, #60]	; (9c90 <sleepmgr_unlock_mode+0x54>)
    9c52:	58a2      	ldr	r2, [r4, r2]
    9c54:	5cd3      	ldrb	r3, [r2, r3]
    9c56:	2b00      	cmp	r3, #0
    9c58:	d100      	bne.n	9c5c <sleepmgr_unlock_mode+0x20>
		while (true) {
    9c5a:	e7fe      	b.n	9c5a <sleepmgr_unlock_mode+0x1e>
			// Check APP.
		}
	}

	// Enter a critical section
	flags = cpu_irq_save();
    9c5c:	4b0d      	ldr	r3, [pc, #52]	; (9c94 <sleepmgr_unlock_mode+0x58>)
    9c5e:	447b      	add	r3, pc
    9c60:	4798      	blx	r3
    9c62:	0003      	movs	r3, r0
    9c64:	60fb      	str	r3, [r7, #12]

	--sleepmgr_locks[mode];
    9c66:	1dfb      	adds	r3, r7, #7
    9c68:	781b      	ldrb	r3, [r3, #0]
    9c6a:	4a09      	ldr	r2, [pc, #36]	; (9c90 <sleepmgr_unlock_mode+0x54>)
    9c6c:	58a2      	ldr	r2, [r4, r2]
    9c6e:	5cd2      	ldrb	r2, [r2, r3]
    9c70:	3a01      	subs	r2, #1
    9c72:	b2d1      	uxtb	r1, r2
    9c74:	4a06      	ldr	r2, [pc, #24]	; (9c90 <sleepmgr_unlock_mode+0x54>)
    9c76:	58a2      	ldr	r2, [r4, r2]
    9c78:	54d1      	strb	r1, [r2, r3]

	// Leave the critical section
	cpu_irq_restore(flags);
    9c7a:	68fb      	ldr	r3, [r7, #12]
    9c7c:	0018      	movs	r0, r3
    9c7e:	4b06      	ldr	r3, [pc, #24]	; (9c98 <sleepmgr_unlock_mode+0x5c>)
    9c80:	447b      	add	r3, pc
    9c82:	4798      	blx	r3
#else
	UNUSED(mode);
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
    9c84:	46c0      	nop			; (mov r8, r8)
    9c86:	46bd      	mov	sp, r7
    9c88:	b005      	add	sp, #20
    9c8a:	bd90      	pop	{r4, r7, pc}
    9c8c:	000057e6 	.word	0x000057e6
    9c90:	00000248 	.word	0x00000248
    9c94:	fffffe0f 	.word	0xfffffe0f
    9c98:	fffffe41 	.word	0xfffffe41

00009c9c <udd_wait_clock_ready>:
#endif
#ifndef UDD_CLOCK_SOURCE
#  define UDD_CLOCK_SOURCE   SYSTEM_CLOCK_SOURCE_DFLL
#endif
static inline void udd_wait_clock_ready(void)
{
    9c9c:	b580      	push	{r7, lr}
    9c9e:	af00      	add	r7, sp, #0
#else
#define DFLL_READY_FLAG (SYSCTRL_PCLKSR_DFLLRDY | \
		SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC)

		/* In USB recovery mode the status is not checked */
		if (!(SYSCTRL->DFLLCTRL.reg & SYSCTRL_DFLLCTRL_USBCRM)) {
    9ca0:	4b0c      	ldr	r3, [pc, #48]	; (9cd4 <udd_wait_clock_ready+0x38>)
    9ca2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
    9ca4:	b29b      	uxth	r3, r3
    9ca6:	001a      	movs	r2, r3
    9ca8:	2320      	movs	r3, #32
    9caa:	4013      	ands	r3, r2
    9cac:	d107      	bne.n	9cbe <udd_wait_clock_ready+0x22>
			while((SYSCTRL->PCLKSR.reg & DFLL_READY_FLAG) != DFLL_READY_FLAG);
    9cae:	46c0      	nop			; (mov r8, r8)
    9cb0:	4b08      	ldr	r3, [pc, #32]	; (9cd4 <udd_wait_clock_ready+0x38>)
    9cb2:	68db      	ldr	r3, [r3, #12]
    9cb4:	22d0      	movs	r2, #208	; 0xd0
    9cb6:	4013      	ands	r3, r2
    9cb8:	2bd0      	cmp	r3, #208	; 0xd0
    9cba:	d1f9      	bne.n	9cb0 <udd_wait_clock_ready+0x14>
		} else {
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
		}
	}
#endif
}
    9cbc:	e006      	b.n	9ccc <udd_wait_clock_ready+0x30>
			while((SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) != SYSCTRL_PCLKSR_DFLLRDY);
    9cbe:	46c0      	nop			; (mov r8, r8)
    9cc0:	4b04      	ldr	r3, [pc, #16]	; (9cd4 <udd_wait_clock_ready+0x38>)
    9cc2:	68db      	ldr	r3, [r3, #12]
    9cc4:	2210      	movs	r2, #16
    9cc6:	4013      	ands	r3, r2
    9cc8:	2b10      	cmp	r3, #16
    9cca:	d1f9      	bne.n	9cc0 <udd_wait_clock_ready+0x24>
}
    9ccc:	46c0      	nop			; (mov r8, r8)
    9cce:	46bd      	mov	sp, r7
    9cd0:	bd80      	pop	{r7, pc}
    9cd2:	46c0      	nop			; (mov r8, r8)
    9cd4:	40000800 	.word	0x40000800

00009cd8 <udd_sleep_mode>:
/** \brief Manages the sleep mode following the USB state
 *
 * \param new_state  New USB state
 */
static void udd_sleep_mode(enum udd_usb_state_enum new_state)
{
    9cd8:	b590      	push	{r4, r7, lr}
    9cda:	b085      	sub	sp, #20
    9cdc:	af00      	add	r7, sp, #0
    9cde:	0002      	movs	r2, r0
    9ce0:	1dfb      	adds	r3, r7, #7
    9ce2:	701a      	strb	r2, [r3, #0]
    9ce4:	4c1d      	ldr	r4, [pc, #116]	; (9d5c <udd_sleep_mode+0x84>)
    9ce6:	447c      	add	r4, pc
	enum sleepmgr_mode sleep_mode[] = {
    9ce8:	230c      	movs	r3, #12
    9cea:	18fa      	adds	r2, r7, r3
    9cec:	4b1c      	ldr	r3, [pc, #112]	; (9d60 <udd_sleep_mode+0x88>)
    9cee:	447b      	add	r3, pc
    9cf0:	0010      	movs	r0, r2
    9cf2:	0019      	movs	r1, r3
    9cf4:	2304      	movs	r3, #4
    9cf6:	001a      	movs	r2, r3
    9cf8:	4b1a      	ldr	r3, [pc, #104]	; (9d64 <udd_sleep_mode+0x8c>)
    9cfa:	58e3      	ldr	r3, [r4, r3]
    9cfc:	4798      	blx	r3
	#endif	
	};

	static enum udd_usb_state_enum udd_state = UDD_STATE_OFF;

	if (udd_state == new_state) {
    9cfe:	4b1a      	ldr	r3, [pc, #104]	; (9d68 <udd_sleep_mode+0x90>)
    9d00:	447b      	add	r3, pc
    9d02:	781b      	ldrb	r3, [r3, #0]
    9d04:	1dfa      	adds	r2, r7, #7
    9d06:	7812      	ldrb	r2, [r2, #0]
    9d08:	429a      	cmp	r2, r3
    9d0a:	d022      	beq.n	9d52 <udd_sleep_mode+0x7a>
		return; // No change
	}
	if (new_state != UDD_STATE_OFF) {
    9d0c:	1dfb      	adds	r3, r7, #7
    9d0e:	781b      	ldrb	r3, [r3, #0]
    9d10:	2b00      	cmp	r3, #0
    9d12:	d008      	beq.n	9d26 <udd_sleep_mode+0x4e>
		/* Lock new limit */
		sleepmgr_lock_mode(sleep_mode[new_state]);
    9d14:	1dfb      	adds	r3, r7, #7
    9d16:	781b      	ldrb	r3, [r3, #0]
    9d18:	220c      	movs	r2, #12
    9d1a:	18ba      	adds	r2, r7, r2
    9d1c:	5cd3      	ldrb	r3, [r2, r3]
    9d1e:	0018      	movs	r0, r3
    9d20:	4b12      	ldr	r3, [pc, #72]	; (9d6c <udd_sleep_mode+0x94>)
    9d22:	447b      	add	r3, pc
    9d24:	4798      	blx	r3
	}
	if (udd_state != UDD_STATE_OFF) {
    9d26:	4b12      	ldr	r3, [pc, #72]	; (9d70 <udd_sleep_mode+0x98>)
    9d28:	447b      	add	r3, pc
    9d2a:	781b      	ldrb	r3, [r3, #0]
    9d2c:	2b00      	cmp	r3, #0
    9d2e:	d00a      	beq.n	9d46 <udd_sleep_mode+0x6e>
		/* Unlock old limit */
		sleepmgr_unlock_mode(sleep_mode[udd_state]);
    9d30:	4b10      	ldr	r3, [pc, #64]	; (9d74 <udd_sleep_mode+0x9c>)
    9d32:	447b      	add	r3, pc
    9d34:	781b      	ldrb	r3, [r3, #0]
    9d36:	001a      	movs	r2, r3
    9d38:	230c      	movs	r3, #12
    9d3a:	18fb      	adds	r3, r7, r3
    9d3c:	5c9b      	ldrb	r3, [r3, r2]
    9d3e:	0018      	movs	r0, r3
    9d40:	4b0d      	ldr	r3, [pc, #52]	; (9d78 <udd_sleep_mode+0xa0>)
    9d42:	447b      	add	r3, pc
    9d44:	4798      	blx	r3
	}
	udd_state = new_state;
    9d46:	4b0d      	ldr	r3, [pc, #52]	; (9d7c <udd_sleep_mode+0xa4>)
    9d48:	447b      	add	r3, pc
    9d4a:	1dfa      	adds	r2, r7, #7
    9d4c:	7812      	ldrb	r2, [r2, #0]
    9d4e:	701a      	strb	r2, [r3, #0]
    9d50:	e000      	b.n	9d54 <udd_sleep_mode+0x7c>
		return; // No change
    9d52:	46c0      	nop			; (mov r8, r8)
}
    9d54:	46bd      	mov	sp, r7
    9d56:	b005      	add	sp, #20
    9d58:	bd90      	pop	{r4, r7, pc}
    9d5a:	46c0      	nop			; (mov r8, r8)
    9d5c:	0000574a 	.word	0x0000574a
    9d60:	00005672 	.word	0x00005672
    9d64:	000000bc 	.word	0x000000bc
    9d68:	1fff672c 	.word	0x1fff672c
    9d6c:	fffffeb7 	.word	0xfffffeb7
    9d70:	1fff6704 	.word	0x1fff6704
    9d74:	1fff66fa 	.word	0x1fff66fa
    9d78:	fffffef7 	.word	0xfffffef7
    9d7c:	1fff66e4 	.word	0x1fff66e4

00009d80 <udd_ep_get_job>:
 * \brief     Get the detailed job by endpoint number
 * \param[in] ep  Endpoint Address
 * \retval    pointer to an udd_ep_job_t structure instance
 */
static udd_ep_job_t* udd_ep_get_job(udd_ep_id_t ep)
{
    9d80:	b580      	push	{r7, lr}
    9d82:	b082      	sub	sp, #8
    9d84:	af00      	add	r7, sp, #0
    9d86:	0002      	movs	r2, r0
    9d88:	1dfb      	adds	r3, r7, #7
    9d8a:	701a      	strb	r2, [r3, #0]
	if ((ep == 0) || (ep == 0x80)) {
    9d8c:	1dfb      	adds	r3, r7, #7
    9d8e:	781b      	ldrb	r3, [r3, #0]
    9d90:	2b00      	cmp	r3, #0
    9d92:	d003      	beq.n	9d9c <udd_ep_get_job+0x1c>
    9d94:	1dfb      	adds	r3, r7, #7
    9d96:	781b      	ldrb	r3, [r3, #0]
    9d98:	2b80      	cmp	r3, #128	; 0x80
    9d9a:	d101      	bne.n	9da0 <udd_ep_get_job+0x20>
		return NULL;
    9d9c:	2300      	movs	r3, #0
    9d9e:	e013      	b.n	9dc8 <udd_ep_get_job+0x48>
	} else {
		return &udd_ep_job[(2 * (ep & USB_EP_ADDR_MASK) + ((ep & USB_EP_DIR_IN) ? 1 : 0)) - 2];
    9da0:	1dfb      	adds	r3, r7, #7
    9da2:	781b      	ldrb	r3, [r3, #0]
    9da4:	220f      	movs	r2, #15
    9da6:	4013      	ands	r3, r2
    9da8:	005b      	lsls	r3, r3, #1
    9daa:	1dfa      	adds	r2, r7, #7
    9dac:	7812      	ldrb	r2, [r2, #0]
    9dae:	b252      	sxtb	r2, r2
    9db0:	b2d2      	uxtb	r2, r2
    9db2:	09d2      	lsrs	r2, r2, #7
    9db4:	b2d2      	uxtb	r2, r2
    9db6:	189b      	adds	r3, r3, r2
    9db8:	1e9a      	subs	r2, r3, #2
    9dba:	0013      	movs	r3, r2
    9dbc:	009b      	lsls	r3, r3, #2
    9dbe:	189b      	adds	r3, r3, r2
    9dc0:	009b      	lsls	r3, r3, #2
    9dc2:	4a03      	ldr	r2, [pc, #12]	; (9dd0 <udd_ep_get_job+0x50>)
    9dc4:	447a      	add	r2, pc
    9dc6:	189b      	adds	r3, r3, r2
	}
}
    9dc8:	0018      	movs	r0, r3
    9dca:	46bd      	mov	sp, r7
    9dcc:	b002      	add	sp, #8
    9dce:	bd80      	pop	{r7, pc}
    9dd0:	1fff65f0 	.word	0x1fff65f0

00009dd4 <udd_ep_trans_in_next>:
/**
 * \brief     Endpoint IN process, continue to send packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_in_next(void* pointer)
{
    9dd4:	b5b0      	push	{r4, r5, r7, lr}
    9dd6:	b088      	sub	sp, #32
    9dd8:	af00      	add	r7, sp, #0
    9dda:	6078      	str	r0, [r7, #4]
    9ddc:	4c5f      	ldr	r4, [pc, #380]	; (9f5c <udd_ep_trans_in_next+0x188>)
    9dde:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    9de0:	687b      	ldr	r3, [r7, #4]
    9de2:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    9de4:	2317      	movs	r3, #23
    9de6:	18fb      	adds	r3, r7, r3
    9de8:	69ba      	ldr	r2, [r7, #24]
    9dea:	7992      	ldrb	r2, [r2, #6]
    9dec:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    9dee:	2317      	movs	r3, #23
    9df0:	18fb      	adds	r3, r7, r3
    9df2:	781b      	ldrb	r3, [r3, #0]
    9df4:	0018      	movs	r0, r3
    9df6:	4b5a      	ldr	r3, [pc, #360]	; (9f60 <udd_ep_trans_in_next+0x18c>)
    9df8:	447b      	add	r3, pc
    9dfa:	4798      	blx	r3
    9dfc:	0003      	movs	r3, r0
    9dfe:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    9e00:	230f      	movs	r3, #15
    9e02:	18fb      	adds	r3, r7, r3
    9e04:	2217      	movs	r2, #23
    9e06:	18ba      	adds	r2, r7, r2
    9e08:	7812      	ldrb	r2, [r2, #0]
    9e0a:	210f      	movs	r1, #15
    9e0c:	400a      	ands	r2, r1
    9e0e:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    9e10:	230c      	movs	r3, #12
    9e12:	18fb      	adds	r3, r7, r3
    9e14:	693a      	ldr	r2, [r7, #16]
    9e16:	8a12      	ldrh	r2, [r2, #16]
    9e18:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->sent_bytes;
    9e1a:	230a      	movs	r3, #10
    9e1c:	18fb      	adds	r3, r7, r3
    9e1e:	69ba      	ldr	r2, [r7, #24]
    9e20:	8852      	ldrh	r2, [r2, #2]
    9e22:	801a      	strh	r2, [r3, #0]
	ptr_job->nb_trans += nb_trans;
    9e24:	693b      	ldr	r3, [r7, #16]
    9e26:	68da      	ldr	r2, [r3, #12]
    9e28:	230a      	movs	r3, #10
    9e2a:	18fb      	adds	r3, r7, r3
    9e2c:	881b      	ldrh	r3, [r3, #0]
    9e2e:	18d2      	adds	r2, r2, r3
    9e30:	693b      	ldr	r3, [r7, #16]
    9e32:	60da      	str	r2, [r3, #12]

	/* Need to send other data */
	if (ptr_job->nb_trans != ptr_job->buf_size) {
    9e34:	693b      	ldr	r3, [r7, #16]
    9e36:	68da      	ldr	r2, [r3, #12]
    9e38:	693b      	ldr	r3, [r7, #16]
    9e3a:	689b      	ldr	r3, [r3, #8]
    9e3c:	429a      	cmp	r2, r3
    9e3e:	d05a      	beq.n	9ef6 <udd_ep_trans_in_next+0x122>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    9e40:	693b      	ldr	r3, [r7, #16]
    9e42:	689b      	ldr	r3, [r3, #8]
    9e44:	b299      	uxth	r1, r3
    9e46:	693b      	ldr	r3, [r7, #16]
    9e48:	68db      	ldr	r3, [r3, #12]
    9e4a:	b29a      	uxth	r2, r3
    9e4c:	231e      	movs	r3, #30
    9e4e:	18fb      	adds	r3, r7, r3
    9e50:	1a8a      	subs	r2, r1, r2
    9e52:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    9e54:	231e      	movs	r3, #30
    9e56:	18fb      	adds	r3, r7, r3
    9e58:	881b      	ldrh	r3, [r3, #0]
    9e5a:	4a42      	ldr	r2, [pc, #264]	; (9f64 <udd_ep_trans_in_next+0x190>)
    9e5c:	4293      	cmp	r3, r2
    9e5e:	d90e      	bls.n	9e7e <udd_ep_trans_in_next+0xaa>
		/* The USB hardware support a maximum
		 * transfer size of UDD_ENDPOINT_MAX_TRANS Bytes */
			next_trans = UDD_ENDPOINT_MAX_TRANS -(UDD_ENDPOINT_MAX_TRANS % ep_size);
    9e60:	230c      	movs	r3, #12
    9e62:	18fb      	adds	r3, r7, r3
    9e64:	881a      	ldrh	r2, [r3, #0]
    9e66:	483f      	ldr	r0, [pc, #252]	; (9f64 <udd_ep_trans_in_next+0x190>)
    9e68:	4b3f      	ldr	r3, [pc, #252]	; (9f68 <udd_ep_trans_in_next+0x194>)
    9e6a:	58e3      	ldr	r3, [r4, r3]
    9e6c:	0011      	movs	r1, r2
    9e6e:	4798      	blx	r3
    9e70:	000b      	movs	r3, r1
    9e72:	b29a      	uxth	r2, r3
    9e74:	231e      	movs	r3, #30
    9e76:	18fb      	adds	r3, r7, r3
    9e78:	493a      	ldr	r1, [pc, #232]	; (9f64 <udd_ep_trans_in_next+0x190>)
    9e7a:	1a8a      	subs	r2, r1, r2
    9e7c:	801a      	strh	r2, [r3, #0]
		}
		/* Need ZLP, if requested and last packet is not a short packet */
		ptr_job->b_shortpacket = ptr_job->b_shortpacket && (0 == (next_trans % ep_size));
    9e7e:	693b      	ldr	r3, [r7, #16]
    9e80:	7c9b      	ldrb	r3, [r3, #18]
    9e82:	2202      	movs	r2, #2
    9e84:	4013      	ands	r3, r2
    9e86:	b2db      	uxtb	r3, r3
    9e88:	2b00      	cmp	r3, #0
    9e8a:	d00f      	beq.n	9eac <udd_ep_trans_in_next+0xd8>
    9e8c:	231e      	movs	r3, #30
    9e8e:	18fa      	adds	r2, r7, r3
    9e90:	230c      	movs	r3, #12
    9e92:	18fb      	adds	r3, r7, r3
    9e94:	8812      	ldrh	r2, [r2, #0]
    9e96:	8819      	ldrh	r1, [r3, #0]
    9e98:	4b34      	ldr	r3, [pc, #208]	; (9f6c <udd_ep_trans_in_next+0x198>)
    9e9a:	58e3      	ldr	r3, [r4, r3]
    9e9c:	0010      	movs	r0, r2
    9e9e:	4798      	blx	r3
    9ea0:	000b      	movs	r3, r1
    9ea2:	b29b      	uxth	r3, r3
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d101      	bne.n	9eac <udd_ep_trans_in_next+0xd8>
    9ea8:	2301      	movs	r3, #1
    9eaa:	e000      	b.n	9eae <udd_ep_trans_in_next+0xda>
    9eac:	2300      	movs	r3, #0
    9eae:	b2db      	uxtb	r3, r3
    9eb0:	1c1a      	adds	r2, r3, #0
    9eb2:	2301      	movs	r3, #1
    9eb4:	4013      	ands	r3, r2
    9eb6:	b2da      	uxtb	r2, r3
    9eb8:	693b      	ldr	r3, [r7, #16]
    9eba:	2101      	movs	r1, #1
    9ebc:	400a      	ands	r2, r1
    9ebe:	1890      	adds	r0, r2, r2
    9ec0:	7c9a      	ldrb	r2, [r3, #18]
    9ec2:	2102      	movs	r1, #2
    9ec4:	438a      	bics	r2, r1
    9ec6:	1c11      	adds	r1, r2, #0
    9ec8:	1c02      	adds	r2, r0, #0
    9eca:	430a      	orrs	r2, r1
    9ecc:	749a      	strb	r2, [r3, #18]
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    9ece:	693b      	ldr	r3, [r7, #16]
    9ed0:	685a      	ldr	r2, [r3, #4]
    9ed2:	693b      	ldr	r3, [r7, #16]
    9ed4:	68db      	ldr	r3, [r3, #12]
    9ed6:	18d2      	adds	r2, r2, r3
    9ed8:	231e      	movs	r3, #30
    9eda:	18fb      	adds	r3, r7, r3
    9edc:	8818      	ldrh	r0, [r3, #0]
    9ede:	230f      	movs	r3, #15
    9ee0:	18fb      	adds	r3, r7, r3
    9ee2:	7819      	ldrb	r1, [r3, #0]
    9ee4:	4b22      	ldr	r3, [pc, #136]	; (9f70 <udd_ep_trans_in_next+0x19c>)
    9ee6:	58e3      	ldr	r3, [r4, r3]
    9ee8:	001d      	movs	r5, r3
    9eea:	0003      	movs	r3, r0
    9eec:	0028      	movs	r0, r5
    9eee:	4d21      	ldr	r5, [pc, #132]	; (9f74 <udd_ep_trans_in_next+0x1a0>)
    9ef0:	5964      	ldr	r4, [r4, r5]
    9ef2:	47a0      	blx	r4
		return;
    9ef4:	e02e      	b.n	9f54 <udd_ep_trans_in_next+0x180>
	}

	/* Need to send a ZLP after all data transfer */
	if (ptr_job->b_shortpacket) {
    9ef6:	693b      	ldr	r3, [r7, #16]
    9ef8:	7c9b      	ldrb	r3, [r3, #18]
    9efa:	2202      	movs	r2, #2
    9efc:	4013      	ands	r3, r2
    9efe:	b2db      	uxtb	r3, r3
    9f00:	2b00      	cmp	r3, #0
    9f02:	d014      	beq.n	9f2e <udd_ep_trans_in_next+0x15a>
		ptr_job->b_shortpacket = false;
    9f04:	693b      	ldr	r3, [r7, #16]
    9f06:	7c9a      	ldrb	r2, [r3, #18]
    9f08:	2102      	movs	r1, #2
    9f0a:	438a      	bics	r2, r1
    9f0c:	749a      	strb	r2, [r3, #18]
		/* Start new transfer */
		usb_device_endpoint_write_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],0);
    9f0e:	693b      	ldr	r3, [r7, #16]
    9f10:	685a      	ldr	r2, [r3, #4]
    9f12:	693b      	ldr	r3, [r7, #16]
    9f14:	68db      	ldr	r3, [r3, #12]
    9f16:	18d2      	adds	r2, r2, r3
    9f18:	230f      	movs	r3, #15
    9f1a:	18fb      	adds	r3, r7, r3
    9f1c:	7819      	ldrb	r1, [r3, #0]
    9f1e:	4b14      	ldr	r3, [pc, #80]	; (9f70 <udd_ep_trans_in_next+0x19c>)
    9f20:	58e3      	ldr	r3, [r4, r3]
    9f22:	0018      	movs	r0, r3
    9f24:	2300      	movs	r3, #0
    9f26:	4d13      	ldr	r5, [pc, #76]	; (9f74 <udd_ep_trans_in_next+0x1a0>)
    9f28:	5964      	ldr	r4, [r4, r5]
    9f2a:	47a0      	blx	r4
		return;
    9f2c:	e012      	b.n	9f54 <udd_ep_trans_in_next+0x180>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    9f2e:	693b      	ldr	r3, [r7, #16]
    9f30:	7c9a      	ldrb	r2, [r3, #18]
    9f32:	2101      	movs	r1, #1
    9f34:	438a      	bics	r2, r1
    9f36:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    9f38:	693b      	ldr	r3, [r7, #16]
    9f3a:	681b      	ldr	r3, [r3, #0]
    9f3c:	2b00      	cmp	r3, #0
    9f3e:	d009      	beq.n	9f54 <udd_ep_trans_in_next+0x180>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    9f40:	693b      	ldr	r3, [r7, #16]
    9f42:	681c      	ldr	r4, [r3, #0]
    9f44:	693b      	ldr	r3, [r7, #16]
    9f46:	68d9      	ldr	r1, [r3, #12]
    9f48:	2317      	movs	r3, #23
    9f4a:	18fb      	adds	r3, r7, r3
    9f4c:	781b      	ldrb	r3, [r3, #0]
    9f4e:	001a      	movs	r2, r3
    9f50:	2000      	movs	r0, #0
    9f52:	47a0      	blx	r4
	}
}
    9f54:	46bd      	mov	sp, r7
    9f56:	b008      	add	sp, #32
    9f58:	bdb0      	pop	{r4, r5, r7, pc}
    9f5a:	46c0      	nop			; (mov r8, r8)
    9f5c:	00005652 	.word	0x00005652
    9f60:	ffffff85 	.word	0xffffff85
    9f64:	00001fff 	.word	0x00001fff
    9f68:	00000314 	.word	0x00000314
    9f6c:	00000290 	.word	0x00000290
    9f70:	000000ac 	.word	0x000000ac
    9f74:	00000324 	.word	0x00000324

00009f78 <udd_ep_trans_out_next>:
/**
 * \brief     Endpoint OUT process, continue to receive packets or zero length packet
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_trans_out_next(void* pointer)
{
    9f78:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f7a:	b089      	sub	sp, #36	; 0x24
    9f7c:	af00      	add	r7, sp, #0
    9f7e:	6078      	str	r0, [r7, #4]
    9f80:	4c74      	ldr	r4, [pc, #464]	; (a154 <udd_ep_trans_out_next+0x1dc>)
    9f82:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    9f84:	687b      	ldr	r3, [r7, #4]
    9f86:	61bb      	str	r3, [r7, #24]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    9f88:	2317      	movs	r3, #23
    9f8a:	18fb      	adds	r3, r7, r3
    9f8c:	69ba      	ldr	r2, [r7, #24]
    9f8e:	7992      	ldrb	r2, [r2, #6]
    9f90:	701a      	strb	r2, [r3, #0]
	uint16_t ep_size, nb_trans;
	uint16_t next_trans;
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;

	ptr_job = udd_ep_get_job(ep);
    9f92:	2317      	movs	r3, #23
    9f94:	18fb      	adds	r3, r7, r3
    9f96:	781b      	ldrb	r3, [r3, #0]
    9f98:	0018      	movs	r0, r3
    9f9a:	4b6f      	ldr	r3, [pc, #444]	; (a158 <udd_ep_trans_out_next+0x1e0>)
    9f9c:	447b      	add	r3, pc
    9f9e:	4798      	blx	r3
    9fa0:	0003      	movs	r3, r0
    9fa2:	613b      	str	r3, [r7, #16]
	ep_num = ep & USB_EP_ADDR_MASK;
    9fa4:	230f      	movs	r3, #15
    9fa6:	18fb      	adds	r3, r7, r3
    9fa8:	2217      	movs	r2, #23
    9faa:	18ba      	adds	r2, r7, r2
    9fac:	7812      	ldrb	r2, [r2, #0]
    9fae:	210f      	movs	r1, #15
    9fb0:	400a      	ands	r2, r1
    9fb2:	701a      	strb	r2, [r3, #0]

	ep_size = ptr_job->ep_size;
    9fb4:	230c      	movs	r3, #12
    9fb6:	18fb      	adds	r3, r7, r3
    9fb8:	693a      	ldr	r2, [r7, #16]
    9fba:	8a12      	ldrh	r2, [r2, #16]
    9fbc:	801a      	strh	r2, [r3, #0]
	/* Update number of data transferred */
	nb_trans = ep_callback_para->received_bytes;
    9fbe:	230a      	movs	r3, #10
    9fc0:	18fb      	adds	r3, r7, r3
    9fc2:	69ba      	ldr	r2, [r7, #24]
    9fc4:	8812      	ldrh	r2, [r2, #0]
    9fc6:	801a      	strh	r2, [r3, #0]

	/* Can be necessary to copy data receive from cache buffer to user buffer */
	if (ptr_job->b_use_out_cache_buffer) {
    9fc8:	693b      	ldr	r3, [r7, #16]
    9fca:	7c9b      	ldrb	r3, [r3, #18]
    9fcc:	2204      	movs	r2, #4
    9fce:	4013      	ands	r3, r2
    9fd0:	b2db      	uxtb	r3, r3
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	d01c      	beq.n	a010 <udd_ep_trans_out_next+0x98>
		memcpy(&ptr_job->buf[ptr_job->nb_trans], udd_ep_out_cache_buffer[ep_num - 1], ptr_job->buf_size % ep_size);
    9fd6:	693b      	ldr	r3, [r7, #16]
    9fd8:	685a      	ldr	r2, [r3, #4]
    9fda:	693b      	ldr	r3, [r7, #16]
    9fdc:	68db      	ldr	r3, [r3, #12]
    9fde:	18d5      	adds	r5, r2, r3
    9fe0:	230f      	movs	r3, #15
    9fe2:	18fb      	adds	r3, r7, r3
    9fe4:	781b      	ldrb	r3, [r3, #0]
    9fe6:	3b01      	subs	r3, #1
    9fe8:	019b      	lsls	r3, r3, #6
    9fea:	4a5c      	ldr	r2, [pc, #368]	; (a15c <udd_ep_trans_out_next+0x1e4>)
    9fec:	58a2      	ldr	r2, [r4, r2]
    9fee:	189e      	adds	r6, r3, r2
    9ff0:	693b      	ldr	r3, [r7, #16]
    9ff2:	689a      	ldr	r2, [r3, #8]
    9ff4:	230c      	movs	r3, #12
    9ff6:	18fb      	adds	r3, r7, r3
    9ff8:	8819      	ldrh	r1, [r3, #0]
    9ffa:	4b59      	ldr	r3, [pc, #356]	; (a160 <udd_ep_trans_out_next+0x1e8>)
    9ffc:	58e3      	ldr	r3, [r4, r3]
    9ffe:	0010      	movs	r0, r2
    a000:	4798      	blx	r3
    a002:	000b      	movs	r3, r1
    a004:	001a      	movs	r2, r3
    a006:	0031      	movs	r1, r6
    a008:	0028      	movs	r0, r5
    a00a:	4b56      	ldr	r3, [pc, #344]	; (a164 <udd_ep_trans_out_next+0x1ec>)
    a00c:	58e3      	ldr	r3, [r4, r3]
    a00e:	4798      	blx	r3
	}

	/* Update number of data transferred */
	ptr_job->nb_trans += nb_trans;
    a010:	693b      	ldr	r3, [r7, #16]
    a012:	68da      	ldr	r2, [r3, #12]
    a014:	230a      	movs	r3, #10
    a016:	18fb      	adds	r3, r7, r3
    a018:	881b      	ldrh	r3, [r3, #0]
    a01a:	18d2      	adds	r2, r2, r3
    a01c:	693b      	ldr	r3, [r7, #16]
    a01e:	60da      	str	r2, [r3, #12]
	if (ptr_job->nb_trans > ptr_job->buf_size) {
    a020:	693b      	ldr	r3, [r7, #16]
    a022:	68da      	ldr	r2, [r3, #12]
    a024:	693b      	ldr	r3, [r7, #16]
    a026:	689b      	ldr	r3, [r3, #8]
    a028:	429a      	cmp	r2, r3
    a02a:	d903      	bls.n	a034 <udd_ep_trans_out_next+0xbc>
		ptr_job->nb_trans = ptr_job->buf_size;
    a02c:	693b      	ldr	r3, [r7, #16]
    a02e:	689a      	ldr	r2, [r3, #8]
    a030:	693b      	ldr	r3, [r7, #16]
    a032:	60da      	str	r2, [r3, #12]
	}

	/* If all previous data requested are received and user buffer not full
	 * then need to receive other data */
	if ((nb_trans == ep_callback_para->out_buffer_size) && (ptr_job->nb_trans != ptr_job->buf_size)) {
    a034:	69bb      	ldr	r3, [r7, #24]
    a036:	889b      	ldrh	r3, [r3, #4]
    a038:	220a      	movs	r2, #10
    a03a:	18ba      	adds	r2, r7, r2
    a03c:	8812      	ldrh	r2, [r2, #0]
    a03e:	429a      	cmp	r2, r3
    a040:	d000      	beq.n	a044 <udd_ep_trans_out_next+0xcc>
    a042:	e071      	b.n	a128 <udd_ep_trans_out_next+0x1b0>
    a044:	693b      	ldr	r3, [r7, #16]
    a046:	68da      	ldr	r2, [r3, #12]
    a048:	693b      	ldr	r3, [r7, #16]
    a04a:	689b      	ldr	r3, [r3, #8]
    a04c:	429a      	cmp	r2, r3
    a04e:	d100      	bne.n	a052 <udd_ep_trans_out_next+0xda>
    a050:	e06a      	b.n	a128 <udd_ep_trans_out_next+0x1b0>
		next_trans = ptr_job->buf_size - ptr_job->nb_trans;
    a052:	693b      	ldr	r3, [r7, #16]
    a054:	689b      	ldr	r3, [r3, #8]
    a056:	b299      	uxth	r1, r3
    a058:	693b      	ldr	r3, [r7, #16]
    a05a:	68db      	ldr	r3, [r3, #12]
    a05c:	b29a      	uxth	r2, r3
    a05e:	231e      	movs	r3, #30
    a060:	18fb      	adds	r3, r7, r3
    a062:	1a8a      	subs	r2, r1, r2
    a064:	801a      	strh	r2, [r3, #0]
		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    a066:	231e      	movs	r3, #30
    a068:	18fb      	adds	r3, r7, r3
    a06a:	881b      	ldrh	r3, [r3, #0]
    a06c:	4a3e      	ldr	r2, [pc, #248]	; (a168 <udd_ep_trans_out_next+0x1f0>)
    a06e:	4293      	cmp	r3, r2
    a070:	d90f      	bls.n	a092 <udd_ep_trans_out_next+0x11a>
		/* The USB hardware support a maximum transfer size
		 * of UDD_ENDPOINT_MAX_TRANS Bytes */
		next_trans = UDD_ENDPOINT_MAX_TRANS - (UDD_ENDPOINT_MAX_TRANS % ep_size);
    a072:	230c      	movs	r3, #12
    a074:	18fb      	adds	r3, r7, r3
    a076:	881a      	ldrh	r2, [r3, #0]
    a078:	483b      	ldr	r0, [pc, #236]	; (a168 <udd_ep_trans_out_next+0x1f0>)
    a07a:	4b3c      	ldr	r3, [pc, #240]	; (a16c <udd_ep_trans_out_next+0x1f4>)
    a07c:	58e3      	ldr	r3, [r4, r3]
    a07e:	0011      	movs	r1, r2
    a080:	4798      	blx	r3
    a082:	000b      	movs	r3, r1
    a084:	b29a      	uxth	r2, r3
    a086:	231e      	movs	r3, #30
    a088:	18fb      	adds	r3, r7, r3
    a08a:	4937      	ldr	r1, [pc, #220]	; (a168 <udd_ep_trans_out_next+0x1f0>)
    a08c:	1a8a      	subs	r2, r1, r2
    a08e:	801a      	strh	r2, [r3, #0]
    a090:	e012      	b.n	a0b8 <udd_ep_trans_out_next+0x140>
		} else {
			next_trans -= next_trans % ep_size;
    a092:	231e      	movs	r3, #30
    a094:	18fa      	adds	r2, r7, r3
    a096:	230c      	movs	r3, #12
    a098:	18fb      	adds	r3, r7, r3
    a09a:	8812      	ldrh	r2, [r2, #0]
    a09c:	8819      	ldrh	r1, [r3, #0]
    a09e:	4b30      	ldr	r3, [pc, #192]	; (a160 <udd_ep_trans_out_next+0x1e8>)
    a0a0:	58e3      	ldr	r3, [r4, r3]
    a0a2:	0010      	movs	r0, r2
    a0a4:	4798      	blx	r3
    a0a6:	000b      	movs	r3, r1
    a0a8:	b29a      	uxth	r2, r3
    a0aa:	231e      	movs	r3, #30
    a0ac:	18fb      	adds	r3, r7, r3
    a0ae:	211e      	movs	r1, #30
    a0b0:	1879      	adds	r1, r7, r1
    a0b2:	8809      	ldrh	r1, [r1, #0]
    a0b4:	1a8a      	subs	r2, r1, r2
    a0b6:	801a      	strh	r2, [r3, #0]
		}

		if (next_trans < ep_size) {
    a0b8:	231e      	movs	r3, #30
    a0ba:	18fa      	adds	r2, r7, r3
    a0bc:	230c      	movs	r3, #12
    a0be:	18fb      	adds	r3, r7, r3
    a0c0:	8812      	ldrh	r2, [r2, #0]
    a0c2:	881b      	ldrh	r3, [r3, #0]
    a0c4:	429a      	cmp	r2, r3
    a0c6:	d21b      	bcs.n	a100 <udd_ep_trans_out_next+0x188>
			/* Use the cache buffer for Bulk or Interrupt size endpoint */
			ptr_job->b_use_out_cache_buffer = true;
    a0c8:	693b      	ldr	r3, [r7, #16]
    a0ca:	7c9a      	ldrb	r2, [r3, #18]
    a0cc:	2104      	movs	r1, #4
    a0ce:	430a      	orrs	r2, r1
    a0d0:	749a      	strb	r2, [r3, #18]
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,udd_ep_out_cache_buffer[ep_num - 1],ep_size);
    a0d2:	230f      	movs	r3, #15
    a0d4:	18fb      	adds	r3, r7, r3
    a0d6:	781b      	ldrb	r3, [r3, #0]
    a0d8:	3b01      	subs	r3, #1
    a0da:	019b      	lsls	r3, r3, #6
    a0dc:	4a1f      	ldr	r2, [pc, #124]	; (a15c <udd_ep_trans_out_next+0x1e4>)
    a0de:	58a2      	ldr	r2, [r4, r2]
    a0e0:	189a      	adds	r2, r3, r2
    a0e2:	230c      	movs	r3, #12
    a0e4:	18fb      	adds	r3, r7, r3
    a0e6:	8818      	ldrh	r0, [r3, #0]
    a0e8:	230f      	movs	r3, #15
    a0ea:	18fb      	adds	r3, r7, r3
    a0ec:	7819      	ldrb	r1, [r3, #0]
    a0ee:	4b20      	ldr	r3, [pc, #128]	; (a170 <udd_ep_trans_out_next+0x1f8>)
    a0f0:	58e3      	ldr	r3, [r4, r3]
    a0f2:	001d      	movs	r5, r3
    a0f4:	0003      	movs	r3, r0
    a0f6:	0028      	movs	r0, r5
    a0f8:	4d1e      	ldr	r5, [pc, #120]	; (a174 <udd_ep_trans_out_next+0x1fc>)
    a0fa:	5964      	ldr	r4, [r4, r5]
    a0fc:	47a0      	blx	r4
		} else {
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
		}
		return;
    a0fe:	e026      	b.n	a14e <udd_ep_trans_out_next+0x1d6>
			usb_device_endpoint_read_buffer_job(&usb_device,ep_num,&ptr_job->buf[ptr_job->nb_trans],next_trans);
    a100:	693b      	ldr	r3, [r7, #16]
    a102:	685a      	ldr	r2, [r3, #4]
    a104:	693b      	ldr	r3, [r7, #16]
    a106:	68db      	ldr	r3, [r3, #12]
    a108:	18d2      	adds	r2, r2, r3
    a10a:	231e      	movs	r3, #30
    a10c:	18fb      	adds	r3, r7, r3
    a10e:	8818      	ldrh	r0, [r3, #0]
    a110:	230f      	movs	r3, #15
    a112:	18fb      	adds	r3, r7, r3
    a114:	7819      	ldrb	r1, [r3, #0]
    a116:	4b16      	ldr	r3, [pc, #88]	; (a170 <udd_ep_trans_out_next+0x1f8>)
    a118:	58e3      	ldr	r3, [r4, r3]
    a11a:	001d      	movs	r5, r3
    a11c:	0003      	movs	r3, r0
    a11e:	0028      	movs	r0, r5
    a120:	4d14      	ldr	r5, [pc, #80]	; (a174 <udd_ep_trans_out_next+0x1fc>)
    a122:	5964      	ldr	r4, [r4, r5]
    a124:	47a0      	blx	r4
		return;
    a126:	e012      	b.n	a14e <udd_ep_trans_out_next+0x1d6>
	}

	/* Job complete then call callback */
	ptr_job->busy = false;
    a128:	693b      	ldr	r3, [r7, #16]
    a12a:	7c9a      	ldrb	r2, [r3, #18]
    a12c:	2101      	movs	r1, #1
    a12e:	438a      	bics	r2, r1
    a130:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    a132:	693b      	ldr	r3, [r7, #16]
    a134:	681b      	ldr	r3, [r3, #0]
    a136:	2b00      	cmp	r3, #0
    a138:	d009      	beq.n	a14e <udd_ep_trans_out_next+0x1d6>
		ptr_job->call_trans(UDD_EP_TRANSFER_OK, ptr_job->nb_trans, ep);
    a13a:	693b      	ldr	r3, [r7, #16]
    a13c:	681c      	ldr	r4, [r3, #0]
    a13e:	693b      	ldr	r3, [r7, #16]
    a140:	68d9      	ldr	r1, [r3, #12]
    a142:	2317      	movs	r3, #23
    a144:	18fb      	adds	r3, r7, r3
    a146:	781b      	ldrb	r3, [r3, #0]
    a148:	001a      	movs	r2, r3
    a14a:	2000      	movs	r0, #0
    a14c:	47a0      	blx	r4
	}
}
    a14e:	46bd      	mov	sp, r7
    a150:	b009      	add	sp, #36	; 0x24
    a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a154:	000054ae 	.word	0x000054ae
    a158:	fffffde1 	.word	0xfffffde1
    a15c:	00000020 	.word	0x00000020
    a160:	00000290 	.word	0x00000290
    a164:	000000bc 	.word	0x000000bc
    a168:	00001fff 	.word	0x00001fff
    a16c:	00000314 	.word	0x00000314
    a170:	000000ac 	.word	0x000000ac
    a174:	00000168 	.word	0x00000168

0000a178 <udd_ep_transfer_process>:
 * \brief     Endpoint Transfer Complete callback function, to do the next transfer depends on the direction(IN or OUT)
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ep_transfer_process(struct usb_module *module_inst, void* pointer)
{
    a178:	b580      	push	{r7, lr}
    a17a:	b084      	sub	sp, #16
    a17c:	af00      	add	r7, sp, #0
    a17e:	6078      	str	r0, [r7, #4]
    a180:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    a182:	683b      	ldr	r3, [r7, #0]
    a184:	60fb      	str	r3, [r7, #12]
	udd_ep_id_t ep = ep_callback_para->endpoint_address;
    a186:	230b      	movs	r3, #11
    a188:	18fb      	adds	r3, r7, r3
    a18a:	68fa      	ldr	r2, [r7, #12]
    a18c:	7992      	ldrb	r2, [r2, #6]
    a18e:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    a190:	230b      	movs	r3, #11
    a192:	18fb      	adds	r3, r7, r3
    a194:	781b      	ldrb	r3, [r3, #0]
    a196:	b25b      	sxtb	r3, r3
    a198:	2b00      	cmp	r3, #0
    a19a:	da05      	bge.n	a1a8 <udd_ep_transfer_process+0x30>
		udd_ep_trans_in_next(pointer);
    a19c:	683b      	ldr	r3, [r7, #0]
    a19e:	0018      	movs	r0, r3
    a1a0:	4b06      	ldr	r3, [pc, #24]	; (a1bc <udd_ep_transfer_process+0x44>)
    a1a2:	447b      	add	r3, pc
    a1a4:	4798      	blx	r3
	} else {
		udd_ep_trans_out_next(pointer);
	}
}
    a1a6:	e004      	b.n	a1b2 <udd_ep_transfer_process+0x3a>
		udd_ep_trans_out_next(pointer);
    a1a8:	683b      	ldr	r3, [r7, #0]
    a1aa:	0018      	movs	r0, r3
    a1ac:	4b04      	ldr	r3, [pc, #16]	; (a1c0 <udd_ep_transfer_process+0x48>)
    a1ae:	447b      	add	r3, pc
    a1b0:	4798      	blx	r3
}
    a1b2:	46c0      	nop			; (mov r8, r8)
    a1b4:	46bd      	mov	sp, r7
    a1b6:	b004      	add	sp, #16
    a1b8:	bd80      	pop	{r7, pc}
    a1ba:	46c0      	nop			; (mov r8, r8)
    a1bc:	fffffc2f 	.word	0xfffffc2f
    a1c0:	fffffdc7 	.word	0xfffffdc7

0000a1c4 <udd_ep_abort>:

void udd_ep_abort(udd_ep_id_t ep)
{
    a1c4:	b590      	push	{r4, r7, lr}
    a1c6:	b085      	sub	sp, #20
    a1c8:	af00      	add	r7, sp, #0
    a1ca:	0002      	movs	r2, r0
    a1cc:	1dfb      	adds	r3, r7, #7
    a1ce:	701a      	strb	r2, [r3, #0]
    a1d0:	4b17      	ldr	r3, [pc, #92]	; (a230 <udd_ep_abort+0x6c>)
    a1d2:	447b      	add	r3, pc
	udd_ep_job_t *ptr_job;

	usb_device_endpoint_abort_job(&usb_device, ep);
    a1d4:	1dfa      	adds	r2, r7, #7
    a1d6:	7811      	ldrb	r1, [r2, #0]
    a1d8:	4a16      	ldr	r2, [pc, #88]	; (a234 <udd_ep_abort+0x70>)
    a1da:	589a      	ldr	r2, [r3, r2]
    a1dc:	0010      	movs	r0, r2
    a1de:	4a16      	ldr	r2, [pc, #88]	; (a238 <udd_ep_abort+0x74>)
    a1e0:	589b      	ldr	r3, [r3, r2]
    a1e2:	4798      	blx	r3

	/* Job complete then call callback */
	ptr_job = udd_ep_get_job(ep);
    a1e4:	1dfb      	adds	r3, r7, #7
    a1e6:	781b      	ldrb	r3, [r3, #0]
    a1e8:	0018      	movs	r0, r3
    a1ea:	4b14      	ldr	r3, [pc, #80]	; (a23c <udd_ep_abort+0x78>)
    a1ec:	447b      	add	r3, pc
    a1ee:	4798      	blx	r3
    a1f0:	0003      	movs	r3, r0
    a1f2:	60fb      	str	r3, [r7, #12]
	if (!ptr_job->busy) {
    a1f4:	68fb      	ldr	r3, [r7, #12]
    a1f6:	7c9b      	ldrb	r3, [r3, #18]
    a1f8:	2201      	movs	r2, #1
    a1fa:	4013      	ands	r3, r2
    a1fc:	b2db      	uxtb	r3, r3
    a1fe:	2b00      	cmp	r3, #0
    a200:	d012      	beq.n	a228 <udd_ep_abort+0x64>
		return;
	}
	ptr_job->busy = false;
    a202:	68fb      	ldr	r3, [r7, #12]
    a204:	7c9a      	ldrb	r2, [r3, #18]
    a206:	2101      	movs	r1, #1
    a208:	438a      	bics	r2, r1
    a20a:	749a      	strb	r2, [r3, #18]
	if (NULL != ptr_job->call_trans) {
    a20c:	68fb      	ldr	r3, [r7, #12]
    a20e:	681b      	ldr	r3, [r3, #0]
    a210:	2b00      	cmp	r3, #0
    a212:	d00a      	beq.n	a22a <udd_ep_abort+0x66>
		/* It can be a Transfer or stall callback */
		ptr_job->call_trans(UDD_EP_TRANSFER_ABORT, ptr_job->nb_trans, ep);
    a214:	68fb      	ldr	r3, [r7, #12]
    a216:	681c      	ldr	r4, [r3, #0]
    a218:	68fb      	ldr	r3, [r7, #12]
    a21a:	68d9      	ldr	r1, [r3, #12]
    a21c:	1dfb      	adds	r3, r7, #7
    a21e:	781b      	ldrb	r3, [r3, #0]
    a220:	001a      	movs	r2, r3
    a222:	2001      	movs	r0, #1
    a224:	47a0      	blx	r4
    a226:	e000      	b.n	a22a <udd_ep_abort+0x66>
		return;
    a228:	46c0      	nop			; (mov r8, r8)
	}
}
    a22a:	46bd      	mov	sp, r7
    a22c:	b005      	add	sp, #20
    a22e:	bd90      	pop	{r4, r7, pc}
    a230:	0000525e 	.word	0x0000525e
    a234:	000000ac 	.word	0x000000ac
    a238:	00000008 	.word	0x00000008
    a23c:	fffffb91 	.word	0xfffffb91

0000a240 <udd_is_high_speed>:

bool udd_is_high_speed(void)
{
    a240:	b580      	push	{r7, lr}
    a242:	af00      	add	r7, sp, #0
#if SAMD21 || SAMR21 || SAMD11 || SAML21  || SAML22 || SAMDA1 || SAMR30
	return false;
    a244:	2300      	movs	r3, #0
#endif
}
    a246:	0018      	movs	r0, r3
    a248:	46bd      	mov	sp, r7
    a24a:	bd80      	pop	{r7, pc}

0000a24c <udd_get_frame_number>:

uint16_t udd_get_frame_number(void)
{
    a24c:	b580      	push	{r7, lr}
    a24e:	af00      	add	r7, sp, #0
    a250:	4a05      	ldr	r2, [pc, #20]	; (a268 <udd_get_frame_number+0x1c>)
    a252:	447a      	add	r2, pc
	return usb_device_get_frame_number(&usb_device);
    a254:	4b05      	ldr	r3, [pc, #20]	; (a26c <udd_get_frame_number+0x20>)
    a256:	58d3      	ldr	r3, [r2, r3]
    a258:	0018      	movs	r0, r3
    a25a:	4b05      	ldr	r3, [pc, #20]	; (a270 <udd_get_frame_number+0x24>)
    a25c:	447b      	add	r3, pc
    a25e:	4798      	blx	r3
    a260:	0003      	movs	r3, r0
}
    a262:	0018      	movs	r0, r3
    a264:	46bd      	mov	sp, r7
    a266:	bd80      	pop	{r7, pc}
    a268:	000051de 	.word	0x000051de
    a26c:	000000ac 	.word	0x000000ac
    a270:	fffff909 	.word	0xfffff909

0000a274 <udd_get_micro_frame_number>:

uint16_t udd_get_micro_frame_number(void)
{
    a274:	b580      	push	{r7, lr}
    a276:	af00      	add	r7, sp, #0
    a278:	4a05      	ldr	r2, [pc, #20]	; (a290 <udd_get_micro_frame_number+0x1c>)
    a27a:	447a      	add	r2, pc
	return usb_device_get_micro_frame_number(&usb_device);
    a27c:	4b05      	ldr	r3, [pc, #20]	; (a294 <udd_get_micro_frame_number+0x20>)
    a27e:	58d3      	ldr	r3, [r2, r3]
    a280:	0018      	movs	r0, r3
    a282:	4b05      	ldr	r3, [pc, #20]	; (a298 <udd_get_micro_frame_number+0x24>)
    a284:	447b      	add	r3, pc
    a286:	4798      	blx	r3
    a288:	0003      	movs	r3, r0
}
    a28a:	0018      	movs	r0, r3
    a28c:	46bd      	mov	sp, r7
    a28e:	bd80      	pop	{r7, pc}
    a290:	000051b6 	.word	0x000051b6
    a294:	000000ac 	.word	0x000000ac
    a298:	fffff8fd 	.word	0xfffff8fd

0000a29c <udd_ep_free>:

void udd_ep_free(udd_ep_id_t ep)
{
    a29c:	b590      	push	{r4, r7, lr}
    a29e:	b085      	sub	sp, #20
    a2a0:	af00      	add	r7, sp, #0
    a2a2:	0002      	movs	r2, r0
    a2a4:	1dfb      	adds	r3, r7, #7
    a2a6:	701a      	strb	r2, [r3, #0]
    a2a8:	4c1e      	ldr	r4, [pc, #120]	; (a324 <udd_ep_free+0x88>)
    a2aa:	447c      	add	r4, pc
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    a2ac:	2308      	movs	r3, #8
    a2ae:	18fb      	adds	r3, r7, r3
    a2b0:	0018      	movs	r0, r3
    a2b2:	4b1d      	ldr	r3, [pc, #116]	; (a328 <udd_ep_free+0x8c>)
    a2b4:	58e3      	ldr	r3, [r4, r3]
    a2b6:	4798      	blx	r3

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    a2b8:	230f      	movs	r3, #15
    a2ba:	18fb      	adds	r3, r7, r3
    a2bc:	1dfa      	adds	r2, r7, #7
    a2be:	7812      	ldrb	r2, [r2, #0]
    a2c0:	210f      	movs	r1, #15
    a2c2:	400a      	ands	r2, r1
    a2c4:	701a      	strb	r2, [r3, #0]
	udd_ep_abort(ep);
    a2c6:	1dfb      	adds	r3, r7, #7
    a2c8:	781b      	ldrb	r3, [r3, #0]
    a2ca:	0018      	movs	r0, r3
    a2cc:	4b17      	ldr	r3, [pc, #92]	; (a32c <udd_ep_free+0x90>)
    a2ce:	58e3      	ldr	r3, [r4, r3]
    a2d0:	4798      	blx	r3

	config_ep.ep_address = ep;
    a2d2:	2308      	movs	r3, #8
    a2d4:	18fb      	adds	r3, r7, r3
    a2d6:	1dfa      	adds	r2, r7, #7
    a2d8:	7812      	ldrb	r2, [r2, #0]
    a2da:	701a      	strb	r2, [r3, #0]
	config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_DISABLE;
    a2dc:	2308      	movs	r3, #8
    a2de:	18fb      	adds	r3, r7, r3
    a2e0:	2200      	movs	r2, #0
    a2e2:	70da      	strb	r2, [r3, #3]
	usb_device_endpoint_set_config(&usb_device, &config_ep);
    a2e4:	2308      	movs	r3, #8
    a2e6:	18fa      	adds	r2, r7, r3
    a2e8:	4b11      	ldr	r3, [pc, #68]	; (a330 <udd_ep_free+0x94>)
    a2ea:	58e3      	ldr	r3, [r4, r3]
    a2ec:	0011      	movs	r1, r2
    a2ee:	0018      	movs	r0, r3
    a2f0:	4b10      	ldr	r3, [pc, #64]	; (a334 <udd_ep_free+0x98>)
    a2f2:	58e3      	ldr	r3, [r4, r3]
    a2f4:	4798      	blx	r3
	usb_device_endpoint_unregister_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    a2f6:	230f      	movs	r3, #15
    a2f8:	18fb      	adds	r3, r7, r3
    a2fa:	7819      	ldrb	r1, [r3, #0]
    a2fc:	4b0c      	ldr	r3, [pc, #48]	; (a330 <udd_ep_free+0x94>)
    a2fe:	58e3      	ldr	r3, [r4, r3]
    a300:	2200      	movs	r2, #0
    a302:	0018      	movs	r0, r3
    a304:	4b0c      	ldr	r3, [pc, #48]	; (a338 <udd_ep_free+0x9c>)
    a306:	58e3      	ldr	r3, [r4, r3]
    a308:	4798      	blx	r3
	usb_device_endpoint_disable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    a30a:	1dfb      	adds	r3, r7, #7
    a30c:	7819      	ldrb	r1, [r3, #0]
    a30e:	4b08      	ldr	r3, [pc, #32]	; (a330 <udd_ep_free+0x94>)
    a310:	58e3      	ldr	r3, [r4, r3]
    a312:	2200      	movs	r2, #0
    a314:	0018      	movs	r0, r3
    a316:	4b09      	ldr	r3, [pc, #36]	; (a33c <udd_ep_free+0xa0>)
    a318:	58e3      	ldr	r3, [r4, r3]
    a31a:	4798      	blx	r3
}
    a31c:	46c0      	nop			; (mov r8, r8)
    a31e:	46bd      	mov	sp, r7
    a320:	b005      	add	sp, #20
    a322:	bd90      	pop	{r4, r7, pc}
    a324:	00005186 	.word	0x00005186
    a328:	00000128 	.word	0x00000128
    a32c:	000001d8 	.word	0x000001d8
    a330:	000000ac 	.word	0x000000ac
    a334:	0000009c 	.word	0x0000009c
    a338:	00000164 	.word	0x00000164
    a33c:	000001fc 	.word	0x000001fc

0000a340 <udd_ep_alloc>:

bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes, uint16_t MaxEndpointSize)
{
    a340:	b5b0      	push	{r4, r5, r7, lr}
    a342:	b086      	sub	sp, #24
    a344:	af00      	add	r7, sp, #0
    a346:	0004      	movs	r4, r0
    a348:	0008      	movs	r0, r1
    a34a:	0011      	movs	r1, r2
    a34c:	1dfb      	adds	r3, r7, #7
    a34e:	1c22      	adds	r2, r4, #0
    a350:	701a      	strb	r2, [r3, #0]
    a352:	1dbb      	adds	r3, r7, #6
    a354:	1c02      	adds	r2, r0, #0
    a356:	701a      	strb	r2, [r3, #0]
    a358:	1d3b      	adds	r3, r7, #4
    a35a:	1c0a      	adds	r2, r1, #0
    a35c:	801a      	strh	r2, [r3, #0]
    a35e:	4c62      	ldr	r4, [pc, #392]	; (a4e8 <udd_ep_alloc+0x1a8>)
    a360:	447c      	add	r4, pc
	struct usb_device_endpoint_config config_ep;
	usb_device_endpoint_get_config_defaults(&config_ep);
    a362:	230c      	movs	r3, #12
    a364:	18fb      	adds	r3, r7, r3
    a366:	0018      	movs	r0, r3
    a368:	4b60      	ldr	r3, [pc, #384]	; (a4ec <udd_ep_alloc+0x1ac>)
    a36a:	58e3      	ldr	r3, [r4, r3]
    a36c:	4798      	blx	r3

	config_ep.ep_address = ep;
    a36e:	230c      	movs	r3, #12
    a370:	18fb      	adds	r3, r7, r3
    a372:	1dfa      	adds	r2, r7, #7
    a374:	7812      	ldrb	r2, [r2, #0]
    a376:	701a      	strb	r2, [r3, #0]

	if(MaxEndpointSize <= 8) {
    a378:	1d3b      	adds	r3, r7, #4
    a37a:	881b      	ldrh	r3, [r3, #0]
    a37c:	2b08      	cmp	r3, #8
    a37e:	d804      	bhi.n	a38a <udd_ep_alloc+0x4a>
		config_ep.ep_size = USB_ENDPOINT_8_BYTE;
    a380:	230c      	movs	r3, #12
    a382:	18fb      	adds	r3, r7, r3
    a384:	2200      	movs	r2, #0
    a386:	705a      	strb	r2, [r3, #1]
    a388:	e045      	b.n	a416 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 16) {
    a38a:	1d3b      	adds	r3, r7, #4
    a38c:	881b      	ldrh	r3, [r3, #0]
    a38e:	2b10      	cmp	r3, #16
    a390:	d804      	bhi.n	a39c <udd_ep_alloc+0x5c>
		config_ep.ep_size = USB_ENDPOINT_16_BYTE;
    a392:	230c      	movs	r3, #12
    a394:	18fb      	adds	r3, r7, r3
    a396:	2201      	movs	r2, #1
    a398:	705a      	strb	r2, [r3, #1]
    a39a:	e03c      	b.n	a416 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 32) {
    a39c:	1d3b      	adds	r3, r7, #4
    a39e:	881b      	ldrh	r3, [r3, #0]
    a3a0:	2b20      	cmp	r3, #32
    a3a2:	d804      	bhi.n	a3ae <udd_ep_alloc+0x6e>
		config_ep.ep_size = USB_ENDPOINT_32_BYTE;
    a3a4:	230c      	movs	r3, #12
    a3a6:	18fb      	adds	r3, r7, r3
    a3a8:	2202      	movs	r2, #2
    a3aa:	705a      	strb	r2, [r3, #1]
    a3ac:	e033      	b.n	a416 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 64) {
    a3ae:	1d3b      	adds	r3, r7, #4
    a3b0:	881b      	ldrh	r3, [r3, #0]
    a3b2:	2b40      	cmp	r3, #64	; 0x40
    a3b4:	d804      	bhi.n	a3c0 <udd_ep_alloc+0x80>
		config_ep.ep_size = USB_ENDPOINT_64_BYTE;
    a3b6:	230c      	movs	r3, #12
    a3b8:	18fb      	adds	r3, r7, r3
    a3ba:	2203      	movs	r2, #3
    a3bc:	705a      	strb	r2, [r3, #1]
    a3be:	e02a      	b.n	a416 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 128) {
    a3c0:	1d3b      	adds	r3, r7, #4
    a3c2:	881b      	ldrh	r3, [r3, #0]
    a3c4:	2b80      	cmp	r3, #128	; 0x80
    a3c6:	d804      	bhi.n	a3d2 <udd_ep_alloc+0x92>
		config_ep.ep_size = USB_ENDPOINT_128_BYTE;
    a3c8:	230c      	movs	r3, #12
    a3ca:	18fb      	adds	r3, r7, r3
    a3cc:	2204      	movs	r2, #4
    a3ce:	705a      	strb	r2, [r3, #1]
    a3d0:	e021      	b.n	a416 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 256) {
    a3d2:	1d3b      	adds	r3, r7, #4
    a3d4:	881a      	ldrh	r2, [r3, #0]
    a3d6:	2380      	movs	r3, #128	; 0x80
    a3d8:	005b      	lsls	r3, r3, #1
    a3da:	429a      	cmp	r2, r3
    a3dc:	d804      	bhi.n	a3e8 <udd_ep_alloc+0xa8>
		config_ep.ep_size = USB_ENDPOINT_256_BYTE;
    a3de:	230c      	movs	r3, #12
    a3e0:	18fb      	adds	r3, r7, r3
    a3e2:	2205      	movs	r2, #5
    a3e4:	705a      	strb	r2, [r3, #1]
    a3e6:	e016      	b.n	a416 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 512) {
    a3e8:	1d3b      	adds	r3, r7, #4
    a3ea:	881a      	ldrh	r2, [r3, #0]
    a3ec:	2380      	movs	r3, #128	; 0x80
    a3ee:	009b      	lsls	r3, r3, #2
    a3f0:	429a      	cmp	r2, r3
    a3f2:	d804      	bhi.n	a3fe <udd_ep_alloc+0xbe>
		config_ep.ep_size = USB_ENDPOINT_512_BYTE;
    a3f4:	230c      	movs	r3, #12
    a3f6:	18fb      	adds	r3, r7, r3
    a3f8:	2206      	movs	r2, #6
    a3fa:	705a      	strb	r2, [r3, #1]
    a3fc:	e00b      	b.n	a416 <udd_ep_alloc+0xd6>
	} else if(MaxEndpointSize <= 1023) {
    a3fe:	1d3b      	adds	r3, r7, #4
    a400:	881b      	ldrh	r3, [r3, #0]
    a402:	4a3b      	ldr	r2, [pc, #236]	; (a4f0 <udd_ep_alloc+0x1b0>)
    a404:	4293      	cmp	r3, r2
    a406:	d804      	bhi.n	a412 <udd_ep_alloc+0xd2>
		config_ep.ep_size = USB_ENDPOINT_1023_BYTE;
    a408:	230c      	movs	r3, #12
    a40a:	18fb      	adds	r3, r7, r3
    a40c:	2207      	movs	r2, #7
    a40e:	705a      	strb	r2, [r3, #1]
    a410:	e001      	b.n	a416 <udd_ep_alloc+0xd6>
	} else {
		return false;
    a412:	2300      	movs	r3, #0
    a414:	e063      	b.n	a4de <udd_ep_alloc+0x19e>
	}
	udd_ep_job_t *ptr_job = udd_ep_get_job(ep);
    a416:	1dfb      	adds	r3, r7, #7
    a418:	781b      	ldrb	r3, [r3, #0]
    a41a:	0018      	movs	r0, r3
    a41c:	4b35      	ldr	r3, [pc, #212]	; (a4f4 <udd_ep_alloc+0x1b4>)
    a41e:	447b      	add	r3, pc
    a420:	4798      	blx	r3
    a422:	0003      	movs	r3, r0
    a424:	617b      	str	r3, [r7, #20]
	ptr_job->ep_size = MaxEndpointSize;
    a426:	697b      	ldr	r3, [r7, #20]
    a428:	1d3a      	adds	r2, r7, #4
    a42a:	8812      	ldrh	r2, [r2, #0]
    a42c:	821a      	strh	r2, [r3, #16]

	bmAttributes = bmAttributes & USB_EP_TYPE_MASK;
    a42e:	1dbb      	adds	r3, r7, #6
    a430:	1dba      	adds	r2, r7, #6
    a432:	7812      	ldrb	r2, [r2, #0]
    a434:	2103      	movs	r1, #3
    a436:	400a      	ands	r2, r1
    a438:	701a      	strb	r2, [r3, #0]

	/* Check endpoint type */
	if(USB_EP_TYPE_ISOCHRONOUS == bmAttributes) {
    a43a:	1dbb      	adds	r3, r7, #6
    a43c:	781b      	ldrb	r3, [r3, #0]
    a43e:	2b01      	cmp	r3, #1
    a440:	d104      	bne.n	a44c <udd_ep_alloc+0x10c>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS;
    a442:	230c      	movs	r3, #12
    a444:	18fb      	adds	r3, r7, r3
    a446:	2202      	movs	r2, #2
    a448:	70da      	strb	r2, [r3, #3]
    a44a:	e013      	b.n	a474 <udd_ep_alloc+0x134>
	} else if (USB_EP_TYPE_BULK == bmAttributes) {
    a44c:	1dbb      	adds	r3, r7, #6
    a44e:	781b      	ldrb	r3, [r3, #0]
    a450:	2b02      	cmp	r3, #2
    a452:	d104      	bne.n	a45e <udd_ep_alloc+0x11e>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_BULK;
    a454:	230c      	movs	r3, #12
    a456:	18fb      	adds	r3, r7, r3
    a458:	2203      	movs	r2, #3
    a45a:	70da      	strb	r2, [r3, #3]
    a45c:	e00a      	b.n	a474 <udd_ep_alloc+0x134>
	} else if (USB_EP_TYPE_INTERRUPT == bmAttributes) {
    a45e:	1dbb      	adds	r3, r7, #6
    a460:	781b      	ldrb	r3, [r3, #0]
    a462:	2b03      	cmp	r3, #3
    a464:	d104      	bne.n	a470 <udd_ep_alloc+0x130>
		config_ep.ep_type = USB_DEVICE_ENDPOINT_TYPE_INTERRUPT;
    a466:	230c      	movs	r3, #12
    a468:	18fb      	adds	r3, r7, r3
    a46a:	2204      	movs	r2, #4
    a46c:	70da      	strb	r2, [r3, #3]
    a46e:	e001      	b.n	a474 <udd_ep_alloc+0x134>
	} else {
		return false;
    a470:	2300      	movs	r3, #0
    a472:	e034      	b.n	a4de <udd_ep_alloc+0x19e>
	}

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    a474:	2313      	movs	r3, #19
    a476:	18fb      	adds	r3, r7, r3
    a478:	1dfa      	adds	r2, r7, #7
    a47a:	7812      	ldrb	r2, [r2, #0]
    a47c:	210f      	movs	r1, #15
    a47e:	400a      	ands	r2, r1
    a480:	701a      	strb	r2, [r3, #0]

	if (STATUS_OK != usb_device_endpoint_set_config(&usb_device, &config_ep)) {
    a482:	230c      	movs	r3, #12
    a484:	18fa      	adds	r2, r7, r3
    a486:	4b1c      	ldr	r3, [pc, #112]	; (a4f8 <udd_ep_alloc+0x1b8>)
    a488:	58e3      	ldr	r3, [r4, r3]
    a48a:	0011      	movs	r1, r2
    a48c:	0018      	movs	r0, r3
    a48e:	4b1b      	ldr	r3, [pc, #108]	; (a4fc <udd_ep_alloc+0x1bc>)
    a490:	58e3      	ldr	r3, [r4, r3]
    a492:	4798      	blx	r3
    a494:	1e03      	subs	r3, r0, #0
    a496:	d001      	beq.n	a49c <udd_ep_alloc+0x15c>
		return false;
    a498:	2300      	movs	r3, #0
    a49a:	e020      	b.n	a4de <udd_ep_alloc+0x19e>
	}
	usb_device_endpoint_register_callback(&usb_device,ep_num,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,udd_ep_transfer_process);
    a49c:	4b18      	ldr	r3, [pc, #96]	; (a500 <udd_ep_alloc+0x1c0>)
    a49e:	447b      	add	r3, pc
    a4a0:	001a      	movs	r2, r3
    a4a2:	2313      	movs	r3, #19
    a4a4:	18fb      	adds	r3, r7, r3
    a4a6:	7819      	ldrb	r1, [r3, #0]
    a4a8:	4b13      	ldr	r3, [pc, #76]	; (a4f8 <udd_ep_alloc+0x1b8>)
    a4aa:	58e3      	ldr	r3, [r4, r3]
    a4ac:	0018      	movs	r0, r3
    a4ae:	0013      	movs	r3, r2
    a4b0:	2200      	movs	r2, #0
    a4b2:	4d14      	ldr	r5, [pc, #80]	; (a504 <udd_ep_alloc+0x1c4>)
    a4b4:	5965      	ldr	r5, [r4, r5]
    a4b6:	47a8      	blx	r5
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    a4b8:	1dfb      	adds	r3, r7, #7
    a4ba:	7819      	ldrb	r1, [r3, #0]
    a4bc:	4b0e      	ldr	r3, [pc, #56]	; (a4f8 <udd_ep_alloc+0x1b8>)
    a4be:	58e3      	ldr	r3, [r4, r3]
    a4c0:	2200      	movs	r2, #0
    a4c2:	0018      	movs	r0, r3
    a4c4:	4b10      	ldr	r3, [pc, #64]	; (a508 <udd_ep_alloc+0x1c8>)
    a4c6:	58e3      	ldr	r3, [r4, r3]
    a4c8:	4798      	blx	r3
	usb_device_endpoint_enable_callback(&usb_device,ep,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    a4ca:	1dfb      	adds	r3, r7, #7
    a4cc:	7819      	ldrb	r1, [r3, #0]
    a4ce:	4b0a      	ldr	r3, [pc, #40]	; (a4f8 <udd_ep_alloc+0x1b8>)
    a4d0:	58e3      	ldr	r3, [r4, r3]
    a4d2:	2201      	movs	r2, #1
    a4d4:	0018      	movs	r0, r3
    a4d6:	4b0c      	ldr	r3, [pc, #48]	; (a508 <udd_ep_alloc+0x1c8>)
    a4d8:	58e3      	ldr	r3, [r4, r3]
    a4da:	4798      	blx	r3

	return true;
    a4dc:	2301      	movs	r3, #1
}
    a4de:	0018      	movs	r0, r3
    a4e0:	46bd      	mov	sp, r7
    a4e2:	b006      	add	sp, #24
    a4e4:	bdb0      	pop	{r4, r5, r7, pc}
    a4e6:	46c0      	nop			; (mov r8, r8)
    a4e8:	000050d0 	.word	0x000050d0
    a4ec:	00000128 	.word	0x00000128
    a4f0:	000003ff 	.word	0x000003ff
    a4f4:	fffff95f 	.word	0xfffff95f
    a4f8:	000000ac 	.word	0x000000ac
    a4fc:	0000009c 	.word	0x0000009c
    a500:	fffffcd7 	.word	0xfffffcd7
    a504:	00000178 	.word	0x00000178
    a508:	000002cc 	.word	0x000002cc

0000a50c <udd_ep_is_halted>:

bool udd_ep_is_halted(udd_ep_id_t ep)
{
    a50c:	b580      	push	{r7, lr}
    a50e:	b082      	sub	sp, #8
    a510:	af00      	add	r7, sp, #0
    a512:	0002      	movs	r2, r0
    a514:	1dfb      	adds	r3, r7, #7
    a516:	701a      	strb	r2, [r3, #0]
    a518:	4b07      	ldr	r3, [pc, #28]	; (a538 <udd_ep_is_halted+0x2c>)
    a51a:	447b      	add	r3, pc
	return usb_device_endpoint_is_halted(&usb_device, ep);
    a51c:	1dfa      	adds	r2, r7, #7
    a51e:	7811      	ldrb	r1, [r2, #0]
    a520:	4a06      	ldr	r2, [pc, #24]	; (a53c <udd_ep_is_halted+0x30>)
    a522:	589a      	ldr	r2, [r3, r2]
    a524:	0010      	movs	r0, r2
    a526:	4a06      	ldr	r2, [pc, #24]	; (a540 <udd_ep_is_halted+0x34>)
    a528:	589b      	ldr	r3, [r3, r2]
    a52a:	4798      	blx	r3
    a52c:	0003      	movs	r3, r0
}
    a52e:	0018      	movs	r0, r3
    a530:	46bd      	mov	sp, r7
    a532:	b002      	add	sp, #8
    a534:	bd80      	pop	{r7, pc}
    a536:	46c0      	nop			; (mov r8, r8)
    a538:	00004f16 	.word	0x00004f16
    a53c:	000000ac 	.word	0x000000ac
    a540:	00000150 	.word	0x00000150

0000a544 <udd_ep_set_halt>:

bool udd_ep_set_halt(udd_ep_id_t ep)
{
    a544:	b590      	push	{r4, r7, lr}
    a546:	b085      	sub	sp, #20
    a548:	af00      	add	r7, sp, #0
    a54a:	0002      	movs	r2, r0
    a54c:	1dfb      	adds	r3, r7, #7
    a54e:	701a      	strb	r2, [r3, #0]
    a550:	4c11      	ldr	r4, [pc, #68]	; (a598 <udd_ep_set_halt+0x54>)
    a552:	447c      	add	r4, pc
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    a554:	230f      	movs	r3, #15
    a556:	18fb      	adds	r3, r7, r3
    a558:	1dfa      	adds	r2, r7, #7
    a55a:	7812      	ldrb	r2, [r2, #0]
    a55c:	210f      	movs	r1, #15
    a55e:	400a      	ands	r2, r1
    a560:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    a562:	230f      	movs	r3, #15
    a564:	18fb      	adds	r3, r7, r3
    a566:	781b      	ldrb	r3, [r3, #0]
    a568:	2b03      	cmp	r3, #3
    a56a:	d901      	bls.n	a570 <udd_ep_set_halt+0x2c>
		return false;
    a56c:	2300      	movs	r3, #0
    a56e:	e00f      	b.n	a590 <udd_ep_set_halt+0x4c>
	}

	usb_device_endpoint_set_halt(&usb_device, ep);
    a570:	1dfb      	adds	r3, r7, #7
    a572:	781a      	ldrb	r2, [r3, #0]
    a574:	4b09      	ldr	r3, [pc, #36]	; (a59c <udd_ep_set_halt+0x58>)
    a576:	58e3      	ldr	r3, [r4, r3]
    a578:	0011      	movs	r1, r2
    a57a:	0018      	movs	r0, r3
    a57c:	4b08      	ldr	r3, [pc, #32]	; (a5a0 <udd_ep_set_halt+0x5c>)
    a57e:	58e3      	ldr	r3, [r4, r3]
    a580:	4798      	blx	r3

	udd_ep_abort(ep);
    a582:	1dfb      	adds	r3, r7, #7
    a584:	781b      	ldrb	r3, [r3, #0]
    a586:	0018      	movs	r0, r3
    a588:	4b06      	ldr	r3, [pc, #24]	; (a5a4 <udd_ep_set_halt+0x60>)
    a58a:	58e3      	ldr	r3, [r4, r3]
    a58c:	4798      	blx	r3
	return true;
    a58e:	2301      	movs	r3, #1
}
    a590:	0018      	movs	r0, r3
    a592:	46bd      	mov	sp, r7
    a594:	b005      	add	sp, #20
    a596:	bd90      	pop	{r4, r7, pc}
    a598:	00004ede 	.word	0x00004ede
    a59c:	000000ac 	.word	0x000000ac
    a5a0:	00000298 	.word	0x00000298
    a5a4:	000001d8 	.word	0x000001d8

0000a5a8 <udd_ep_clear_halt>:

bool udd_ep_clear_halt(udd_ep_id_t ep)
{
    a5a8:	b590      	push	{r4, r7, lr}
    a5aa:	b085      	sub	sp, #20
    a5ac:	af00      	add	r7, sp, #0
    a5ae:	0002      	movs	r2, r0
    a5b0:	1dfb      	adds	r3, r7, #7
    a5b2:	701a      	strb	r2, [r3, #0]
    a5b4:	4c1a      	ldr	r4, [pc, #104]	; (a620 <udd_ep_clear_halt+0x78>)
    a5b6:	447c      	add	r4, pc
	udd_ep_job_t *ptr_job;
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    a5b8:	230f      	movs	r3, #15
    a5ba:	18fb      	adds	r3, r7, r3
    a5bc:	1dfa      	adds	r2, r7, #7
    a5be:	7812      	ldrb	r2, [r2, #0]
    a5c0:	210f      	movs	r1, #15
    a5c2:	400a      	ands	r2, r1
    a5c4:	701a      	strb	r2, [r3, #0]

	if (USB_DEVICE_MAX_EP < ep_num) {
    a5c6:	230f      	movs	r3, #15
    a5c8:	18fb      	adds	r3, r7, r3
    a5ca:	781b      	ldrb	r3, [r3, #0]
    a5cc:	2b03      	cmp	r3, #3
    a5ce:	d901      	bls.n	a5d4 <udd_ep_clear_halt+0x2c>
		return false;
    a5d0:	2300      	movs	r3, #0
    a5d2:	e020      	b.n	a616 <udd_ep_clear_halt+0x6e>
	}
	ptr_job = udd_ep_get_job(ep);
    a5d4:	1dfb      	adds	r3, r7, #7
    a5d6:	781b      	ldrb	r3, [r3, #0]
    a5d8:	0018      	movs	r0, r3
    a5da:	4b12      	ldr	r3, [pc, #72]	; (a624 <udd_ep_clear_halt+0x7c>)
    a5dc:	447b      	add	r3, pc
    a5de:	4798      	blx	r3
    a5e0:	0003      	movs	r3, r0
    a5e2:	60bb      	str	r3, [r7, #8]

	usb_device_endpoint_clear_halt(&usb_device, ep);
    a5e4:	1dfb      	adds	r3, r7, #7
    a5e6:	781a      	ldrb	r2, [r3, #0]
    a5e8:	4b0f      	ldr	r3, [pc, #60]	; (a628 <udd_ep_clear_halt+0x80>)
    a5ea:	58e3      	ldr	r3, [r4, r3]
    a5ec:	0011      	movs	r1, r2
    a5ee:	0018      	movs	r0, r3
    a5f0:	4b0e      	ldr	r3, [pc, #56]	; (a62c <udd_ep_clear_halt+0x84>)
    a5f2:	58e3      	ldr	r3, [r4, r3]
    a5f4:	4798      	blx	r3

	/* If a job is register on clear halt action then execute callback */
	if (ptr_job->busy == true) {
    a5f6:	68bb      	ldr	r3, [r7, #8]
    a5f8:	7c9b      	ldrb	r3, [r3, #18]
    a5fa:	2201      	movs	r2, #1
    a5fc:	4013      	ands	r3, r2
    a5fe:	b2db      	uxtb	r3, r3
    a600:	2b00      	cmp	r3, #0
    a602:	d007      	beq.n	a614 <udd_ep_clear_halt+0x6c>
		ptr_job->busy = false;
    a604:	68bb      	ldr	r3, [r7, #8]
    a606:	7c9a      	ldrb	r2, [r3, #18]
    a608:	2101      	movs	r1, #1
    a60a:	438a      	bics	r2, r1
    a60c:	749a      	strb	r2, [r3, #18]
		ptr_job->call_nohalt();
    a60e:	68bb      	ldr	r3, [r7, #8]
    a610:	681b      	ldr	r3, [r3, #0]
    a612:	4798      	blx	r3
	}

	return true;
    a614:	2301      	movs	r3, #1
}
    a616:	0018      	movs	r0, r3
    a618:	46bd      	mov	sp, r7
    a61a:	b005      	add	sp, #20
    a61c:	bd90      	pop	{r4, r7, pc}
    a61e:	46c0      	nop			; (mov r8, r8)
    a620:	00004e7a 	.word	0x00004e7a
    a624:	fffff7a1 	.word	0xfffff7a1
    a628:	000000ac 	.word	0x000000ac
    a62c:	00000250 	.word	0x00000250

0000a630 <udd_ctrl_stall_data>:

/**
 * \brief Control Endpoint stall sending data
 */
static void udd_ctrl_stall_data(void)
{
    a630:	b5b0      	push	{r4, r5, r7, lr}
    a632:	af00      	add	r7, sp, #0
    a634:	4c0b      	ldr	r4, [pc, #44]	; (a664 <udd_ctrl_stall_data+0x34>)
    a636:	447c      	add	r4, pc
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    a638:	4b0b      	ldr	r3, [pc, #44]	; (a668 <udd_ctrl_stall_data+0x38>)
    a63a:	447b      	add	r3, pc
    a63c:	2205      	movs	r2, #5
    a63e:	701a      	strb	r2, [r3, #0]

	usb_device_endpoint_set_halt(&usb_device, USB_EP_DIR_IN);
    a640:	4b0a      	ldr	r3, [pc, #40]	; (a66c <udd_ctrl_stall_data+0x3c>)
    a642:	58e3      	ldr	r3, [r4, r3]
    a644:	2180      	movs	r1, #128	; 0x80
    a646:	0018      	movs	r0, r3
    a648:	4b09      	ldr	r3, [pc, #36]	; (a670 <udd_ctrl_stall_data+0x40>)
    a64a:	58e3      	ldr	r3, [r4, r3]
    a64c:	4798      	blx	r3
	usb_device_endpoint_clear_halt(&usb_device, USB_EP_DIR_OUT);
    a64e:	4b07      	ldr	r3, [pc, #28]	; (a66c <udd_ctrl_stall_data+0x3c>)
    a650:	58e3      	ldr	r3, [r4, r3]
    a652:	2100      	movs	r1, #0
    a654:	0018      	movs	r0, r3
    a656:	4b07      	ldr	r3, [pc, #28]	; (a674 <udd_ctrl_stall_data+0x44>)
    a658:	58e3      	ldr	r3, [r4, r3]
    a65a:	4798      	blx	r3
}
    a65c:	46c0      	nop			; (mov r8, r8)
    a65e:	46bd      	mov	sp, r7
    a660:	bdb0      	pop	{r4, r5, r7, pc}
    a662:	46c0      	nop			; (mov r8, r8)
    a664:	00004dfa 	.word	0x00004dfa
    a668:	1fff5d72 	.word	0x1fff5d72
    a66c:	000000ac 	.word	0x000000ac
    a670:	00000298 	.word	0x00000298
    a674:	00000250 	.word	0x00000250

0000a678 <udd_ep_run>:

bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket, uint8_t * buf, iram_size_t buf_size, udd_callback_trans_t callback)
{
    a678:	b5b0      	push	{r4, r5, r7, lr}
    a67a:	b088      	sub	sp, #32
    a67c:	af00      	add	r7, sp, #0
    a67e:	60ba      	str	r2, [r7, #8]
    a680:	607b      	str	r3, [r7, #4]
    a682:	230f      	movs	r3, #15
    a684:	18fb      	adds	r3, r7, r3
    a686:	1c02      	adds	r2, r0, #0
    a688:	701a      	strb	r2, [r3, #0]
    a68a:	230e      	movs	r3, #14
    a68c:	18fb      	adds	r3, r7, r3
    a68e:	1c0a      	adds	r2, r1, #0
    a690:	701a      	strb	r2, [r3, #0]
    a692:	4cb3      	ldr	r4, [pc, #716]	; (a960 <udd_ep_run+0x2e8>)
    a694:	447c      	add	r4, pc
	udd_ep_id_t ep_num;
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep_num = ep & USB_EP_ADDR_MASK;
    a696:	231d      	movs	r3, #29
    a698:	18fb      	adds	r3, r7, r3
    a69a:	220f      	movs	r2, #15
    a69c:	18ba      	adds	r2, r7, r2
    a69e:	7812      	ldrb	r2, [r2, #0]
    a6a0:	210f      	movs	r1, #15
    a6a2:	400a      	ands	r2, r1
    a6a4:	701a      	strb	r2, [r3, #0]

	if ((USB_DEVICE_MAX_EP < ep_num) || (udd_ep_is_halted(ep))) {
    a6a6:	231d      	movs	r3, #29
    a6a8:	18fb      	adds	r3, r7, r3
    a6aa:	781b      	ldrb	r3, [r3, #0]
    a6ac:	2b03      	cmp	r3, #3
    a6ae:	d808      	bhi.n	a6c2 <udd_ep_run+0x4a>
    a6b0:	230f      	movs	r3, #15
    a6b2:	18fb      	adds	r3, r7, r3
    a6b4:	781b      	ldrb	r3, [r3, #0]
    a6b6:	0018      	movs	r0, r3
    a6b8:	4baa      	ldr	r3, [pc, #680]	; (a964 <udd_ep_run+0x2ec>)
    a6ba:	58e3      	ldr	r3, [r4, r3]
    a6bc:	4798      	blx	r3
    a6be:	1e03      	subs	r3, r0, #0
    a6c0:	d001      	beq.n	a6c6 <udd_ep_run+0x4e>
		return false;
    a6c2:	2300      	movs	r3, #0
    a6c4:	e148      	b.n	a958 <udd_ep_run+0x2e0>
	}

	ptr_job = udd_ep_get_job(ep);
    a6c6:	230f      	movs	r3, #15
    a6c8:	18fb      	adds	r3, r7, r3
    a6ca:	781b      	ldrb	r3, [r3, #0]
    a6cc:	0018      	movs	r0, r3
    a6ce:	4ba6      	ldr	r3, [pc, #664]	; (a968 <udd_ep_run+0x2f0>)
    a6d0:	447b      	add	r3, pc
    a6d2:	4798      	blx	r3
    a6d4:	0003      	movs	r3, r0
    a6d6:	61bb      	str	r3, [r7, #24]

	flags = cpu_irq_save();
    a6d8:	4ba4      	ldr	r3, [pc, #656]	; (a96c <udd_ep_run+0x2f4>)
    a6da:	447b      	add	r3, pc
    a6dc:	4798      	blx	r3
    a6de:	0003      	movs	r3, r0
    a6e0:	617b      	str	r3, [r7, #20]
	if (ptr_job->busy == true) {
    a6e2:	69bb      	ldr	r3, [r7, #24]
    a6e4:	7c9b      	ldrb	r3, [r3, #18]
    a6e6:	2201      	movs	r2, #1
    a6e8:	4013      	ands	r3, r2
    a6ea:	b2db      	uxtb	r3, r3
    a6ec:	2b00      	cmp	r3, #0
    a6ee:	d006      	beq.n	a6fe <udd_ep_run+0x86>
		cpu_irq_restore(flags);
    a6f0:	697b      	ldr	r3, [r7, #20]
    a6f2:	0018      	movs	r0, r3
    a6f4:	4b9e      	ldr	r3, [pc, #632]	; (a970 <udd_ep_run+0x2f8>)
    a6f6:	447b      	add	r3, pc
    a6f8:	4798      	blx	r3
		return false; /* Job already on going */
    a6fa:	2300      	movs	r3, #0
    a6fc:	e12c      	b.n	a958 <udd_ep_run+0x2e0>
	}
	ptr_job->busy = true;
    a6fe:	69bb      	ldr	r3, [r7, #24]
    a700:	7c9a      	ldrb	r2, [r3, #18]
    a702:	2101      	movs	r1, #1
    a704:	430a      	orrs	r2, r1
    a706:	749a      	strb	r2, [r3, #18]
	cpu_irq_restore(flags);
    a708:	697b      	ldr	r3, [r7, #20]
    a70a:	0018      	movs	r0, r3
    a70c:	4b99      	ldr	r3, [pc, #612]	; (a974 <udd_ep_run+0x2fc>)
    a70e:	447b      	add	r3, pc
    a710:	4798      	blx	r3

	/* No job running, set up a new one */
	ptr_job->buf = buf;
    a712:	69bb      	ldr	r3, [r7, #24]
    a714:	68ba      	ldr	r2, [r7, #8]
    a716:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
    a718:	69bb      	ldr	r3, [r7, #24]
    a71a:	687a      	ldr	r2, [r7, #4]
    a71c:	609a      	str	r2, [r3, #8]
	ptr_job->nb_trans = 0;
    a71e:	69bb      	ldr	r3, [r7, #24]
    a720:	2200      	movs	r2, #0
    a722:	60da      	str	r2, [r3, #12]
	ptr_job->call_trans = callback;
    a724:	69bb      	ldr	r3, [r7, #24]
    a726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    a728:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket;
    a72a:	69bb      	ldr	r3, [r7, #24]
    a72c:	220e      	movs	r2, #14
    a72e:	18ba      	adds	r2, r7, r2
    a730:	7812      	ldrb	r2, [r2, #0]
    a732:	2101      	movs	r1, #1
    a734:	400a      	ands	r2, r1
    a736:	1890      	adds	r0, r2, r2
    a738:	7c9a      	ldrb	r2, [r3, #18]
    a73a:	2102      	movs	r1, #2
    a73c:	438a      	bics	r2, r1
    a73e:	1c11      	adds	r1, r2, #0
    a740:	1c02      	adds	r2, r0, #0
    a742:	430a      	orrs	r2, r1
    a744:	749a      	strb	r2, [r3, #18]
	ptr_job->b_use_out_cache_buffer = false;
    a746:	69bb      	ldr	r3, [r7, #24]
    a748:	7c9a      	ldrb	r2, [r3, #18]
    a74a:	2104      	movs	r1, #4
    a74c:	438a      	bics	r2, r1
    a74e:	749a      	strb	r2, [r3, #18]

	/* Initialize value to simulate a empty transfer */
	uint16_t next_trans;

	if (ep & USB_EP_DIR_IN) {
    a750:	230f      	movs	r3, #15
    a752:	18fb      	adds	r3, r7, r3
    a754:	781b      	ldrb	r3, [r3, #0]
    a756:	b25b      	sxtb	r3, r3
    a758:	2b00      	cmp	r3, #0
    a75a:	db00      	blt.n	a75e <udd_ep_run+0xe6>
    a75c:	e07e      	b.n	a85c <udd_ep_run+0x1e4>
		if (0 != ptr_job->buf_size) {
    a75e:	69bb      	ldr	r3, [r7, #24]
    a760:	689b      	ldr	r3, [r3, #8]
    a762:	2b00      	cmp	r3, #0
    a764:	d041      	beq.n	a7ea <udd_ep_run+0x172>
			next_trans = ptr_job->buf_size;
    a766:	69bb      	ldr	r3, [r7, #24]
    a768:	689a      	ldr	r2, [r3, #8]
    a76a:	231e      	movs	r3, #30
    a76c:	18fb      	adds	r3, r7, r3
    a76e:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    a770:	231e      	movs	r3, #30
    a772:	18fb      	adds	r3, r7, r3
    a774:	881b      	ldrh	r3, [r3, #0]
    a776:	4a80      	ldr	r2, [pc, #512]	; (a978 <udd_ep_run+0x300>)
    a778:	4293      	cmp	r3, r2
    a77a:	d90e      	bls.n	a79a <udd_ep_run+0x122>
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    a77c:	69bb      	ldr	r3, [r7, #24]
    a77e:	8a1b      	ldrh	r3, [r3, #16]
    a780:	0019      	movs	r1, r3
    a782:	4a7d      	ldr	r2, [pc, #500]	; (a978 <udd_ep_run+0x300>)
    a784:	4b7d      	ldr	r3, [pc, #500]	; (a97c <udd_ep_run+0x304>)
    a786:	58e3      	ldr	r3, [r4, r3]
    a788:	0010      	movs	r0, r2
    a78a:	4798      	blx	r3
    a78c:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    a78e:	b29a      	uxth	r2, r3
    a790:	231e      	movs	r3, #30
    a792:	18fb      	adds	r3, r7, r3
    a794:	4978      	ldr	r1, [pc, #480]	; (a978 <udd_ep_run+0x300>)
    a796:	1a8a      	subs	r2, r1, r2
    a798:	801a      	strh	r2, [r3, #0]
			}
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    a79a:	69bb      	ldr	r3, [r7, #24]
    a79c:	7c9b      	ldrb	r3, [r3, #18]
    a79e:	2202      	movs	r2, #2
    a7a0:	4013      	ands	r3, r2
    a7a2:	b2db      	uxtb	r3, r3
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	d00e      	beq.n	a7c6 <udd_ep_run+0x14e>
					(0 == (next_trans % ptr_job->ep_size));
    a7a8:	69bb      	ldr	r3, [r7, #24]
    a7aa:	8a19      	ldrh	r1, [r3, #16]
    a7ac:	231e      	movs	r3, #30
    a7ae:	18fb      	adds	r3, r7, r3
    a7b0:	881a      	ldrh	r2, [r3, #0]
    a7b2:	4b73      	ldr	r3, [pc, #460]	; (a980 <udd_ep_run+0x308>)
    a7b4:	58e3      	ldr	r3, [r4, r3]
    a7b6:	0010      	movs	r0, r2
    a7b8:	4798      	blx	r3
    a7ba:	000b      	movs	r3, r1
    a7bc:	b29b      	uxth	r3, r3
			ptr_job->b_shortpacket = ptr_job->b_shortpacket &&
    a7be:	2b00      	cmp	r3, #0
    a7c0:	d101      	bne.n	a7c6 <udd_ep_run+0x14e>
    a7c2:	2301      	movs	r3, #1
    a7c4:	e000      	b.n	a7c8 <udd_ep_run+0x150>
    a7c6:	2300      	movs	r3, #0
    a7c8:	b2db      	uxtb	r3, r3
    a7ca:	1c1a      	adds	r2, r3, #0
    a7cc:	2301      	movs	r3, #1
    a7ce:	4013      	ands	r3, r2
    a7d0:	b2da      	uxtb	r2, r3
    a7d2:	69bb      	ldr	r3, [r7, #24]
    a7d4:	2101      	movs	r1, #1
    a7d6:	400a      	ands	r2, r1
    a7d8:	1890      	adds	r0, r2, r2
    a7da:	7c9a      	ldrb	r2, [r3, #18]
    a7dc:	2102      	movs	r1, #2
    a7de:	438a      	bics	r2, r1
    a7e0:	1c11      	adds	r1, r2, #0
    a7e2:	1c02      	adds	r2, r0, #0
    a7e4:	430a      	orrs	r2, r1
    a7e6:	749a      	strb	r2, [r3, #18]
    a7e8:	e023      	b.n	a832 <udd_ep_run+0x1ba>
		} else if (true == ptr_job->b_shortpacket) {
    a7ea:	69bb      	ldr	r3, [r7, #24]
    a7ec:	7c9b      	ldrb	r3, [r3, #18]
    a7ee:	2202      	movs	r2, #2
    a7f0:	4013      	ands	r3, r2
    a7f2:	b2db      	uxtb	r3, r3
    a7f4:	2b00      	cmp	r3, #0
    a7f6:	d009      	beq.n	a80c <udd_ep_run+0x194>
			ptr_job->b_shortpacket = false; /* avoid to send zero length packet again */
    a7f8:	69bb      	ldr	r3, [r7, #24]
    a7fa:	7c9a      	ldrb	r2, [r3, #18]
    a7fc:	2102      	movs	r1, #2
    a7fe:	438a      	bics	r2, r1
    a800:	749a      	strb	r2, [r3, #18]
			next_trans = 0;
    a802:	231e      	movs	r3, #30
    a804:	18fb      	adds	r3, r7, r3
    a806:	2200      	movs	r2, #0
    a808:	801a      	strh	r2, [r3, #0]
    a80a:	e012      	b.n	a832 <udd_ep_run+0x1ba>
		} else {
			ptr_job->busy = false;
    a80c:	69bb      	ldr	r3, [r7, #24]
    a80e:	7c9a      	ldrb	r2, [r3, #18]
    a810:	2101      	movs	r1, #1
    a812:	438a      	bics	r2, r1
    a814:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    a816:	69bb      	ldr	r3, [r7, #24]
    a818:	681b      	ldr	r3, [r3, #0]
    a81a:	2b00      	cmp	r3, #0
    a81c:	d007      	beq.n	a82e <udd_ep_run+0x1b6>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    a81e:	69bb      	ldr	r3, [r7, #24]
    a820:	681b      	ldr	r3, [r3, #0]
    a822:	220f      	movs	r2, #15
    a824:	18ba      	adds	r2, r7, r2
    a826:	7812      	ldrb	r2, [r2, #0]
    a828:	2100      	movs	r1, #0
    a82a:	2000      	movs	r0, #0
    a82c:	4798      	blx	r3
			}
			return true;
    a82e:	2301      	movs	r3, #1
    a830:	e092      	b.n	a958 <udd_ep_run+0x2e0>
		}
		return (STATUS_OK ==
				usb_device_endpoint_write_buffer_job(&usb_device,
    a832:	69bb      	ldr	r3, [r7, #24]
    a834:	685a      	ldr	r2, [r3, #4]
    a836:	231e      	movs	r3, #30
    a838:	18fb      	adds	r3, r7, r3
    a83a:	8818      	ldrh	r0, [r3, #0]
    a83c:	231d      	movs	r3, #29
    a83e:	18fb      	adds	r3, r7, r3
    a840:	7819      	ldrb	r1, [r3, #0]
    a842:	4b50      	ldr	r3, [pc, #320]	; (a984 <udd_ep_run+0x30c>)
    a844:	58e3      	ldr	r3, [r4, r3]
    a846:	001d      	movs	r5, r3
    a848:	0003      	movs	r3, r0
    a84a:	0028      	movs	r0, r5
    a84c:	4d4e      	ldr	r5, [pc, #312]	; (a988 <udd_ep_run+0x310>)
    a84e:	5964      	ldr	r4, [r4, r5]
    a850:	47a0      	blx	r4
    a852:	0003      	movs	r3, r0
		return (STATUS_OK ==
    a854:	425a      	negs	r2, r3
    a856:	4153      	adcs	r3, r2
    a858:	b2db      	uxtb	r3, r3
    a85a:	e07d      	b.n	a958 <udd_ep_run+0x2e0>
						ep_num,&ptr_job->buf[0],next_trans));
	} else {
		if (0 != ptr_job->buf_size) {
    a85c:	69bb      	ldr	r3, [r7, #24]
    a85e:	689b      	ldr	r3, [r3, #8]
    a860:	2b00      	cmp	r3, #0
    a862:	d067      	beq.n	a934 <udd_ep_run+0x2bc>
			next_trans = ptr_job->buf_size;
    a864:	69bb      	ldr	r3, [r7, #24]
    a866:	689a      	ldr	r2, [r3, #8]
    a868:	231e      	movs	r3, #30
    a86a:	18fb      	adds	r3, r7, r3
    a86c:	801a      	strh	r2, [r3, #0]
			if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
    a86e:	231e      	movs	r3, #30
    a870:	18fb      	adds	r3, r7, r3
    a872:	881b      	ldrh	r3, [r3, #0]
    a874:	4a40      	ldr	r2, [pc, #256]	; (a978 <udd_ep_run+0x300>)
    a876:	4293      	cmp	r3, r2
    a878:	d90f      	bls.n	a89a <udd_ep_run+0x222>
				/* The USB hardware support a maximum transfer size
				 * of UDD_ENDPOINT_MAX_TRANS Bytes */
				next_trans = UDD_ENDPOINT_MAX_TRANS -
						(UDD_ENDPOINT_MAX_TRANS % ptr_job->ep_size);
    a87a:	69bb      	ldr	r3, [r7, #24]
    a87c:	8a1b      	ldrh	r3, [r3, #16]
    a87e:	0019      	movs	r1, r3
    a880:	4a3d      	ldr	r2, [pc, #244]	; (a978 <udd_ep_run+0x300>)
    a882:	4b3e      	ldr	r3, [pc, #248]	; (a97c <udd_ep_run+0x304>)
    a884:	58e3      	ldr	r3, [r4, r3]
    a886:	0010      	movs	r0, r2
    a888:	4798      	blx	r3
    a88a:	000b      	movs	r3, r1
				next_trans = UDD_ENDPOINT_MAX_TRANS -
    a88c:	b29a      	uxth	r2, r3
    a88e:	231e      	movs	r3, #30
    a890:	18fb      	adds	r3, r7, r3
    a892:	4939      	ldr	r1, [pc, #228]	; (a978 <udd_ep_run+0x300>)
    a894:	1a8a      	subs	r2, r1, r2
    a896:	801a      	strh	r2, [r3, #0]
    a898:	e011      	b.n	a8be <udd_ep_run+0x246>
			} else {
				next_trans -= next_trans % ptr_job->ep_size;
    a89a:	69bb      	ldr	r3, [r7, #24]
    a89c:	8a19      	ldrh	r1, [r3, #16]
    a89e:	231e      	movs	r3, #30
    a8a0:	18fb      	adds	r3, r7, r3
    a8a2:	881a      	ldrh	r2, [r3, #0]
    a8a4:	4b36      	ldr	r3, [pc, #216]	; (a980 <udd_ep_run+0x308>)
    a8a6:	58e3      	ldr	r3, [r4, r3]
    a8a8:	0010      	movs	r0, r2
    a8aa:	4798      	blx	r3
    a8ac:	000b      	movs	r3, r1
    a8ae:	b29a      	uxth	r2, r3
    a8b0:	231e      	movs	r3, #30
    a8b2:	18fb      	adds	r3, r7, r3
    a8b4:	211e      	movs	r1, #30
    a8b6:	1879      	adds	r1, r7, r1
    a8b8:	8809      	ldrh	r1, [r1, #0]
    a8ba:	1a8a      	subs	r2, r1, r2
    a8bc:	801a      	strh	r2, [r3, #0]
			}
			if (next_trans < ptr_job->ep_size) {
    a8be:	69bb      	ldr	r3, [r7, #24]
    a8c0:	8a1b      	ldrh	r3, [r3, #16]
    a8c2:	221e      	movs	r2, #30
    a8c4:	18ba      	adds	r2, r7, r2
    a8c6:	8812      	ldrh	r2, [r2, #0]
    a8c8:	429a      	cmp	r2, r3
    a8ca:	d21e      	bcs.n	a90a <udd_ep_run+0x292>
				ptr_job->b_use_out_cache_buffer = true;
    a8cc:	69bb      	ldr	r3, [r7, #24]
    a8ce:	7c9a      	ldrb	r2, [r3, #18]
    a8d0:	2104      	movs	r1, #4
    a8d2:	430a      	orrs	r2, r1
    a8d4:	749a      	strb	r2, [r3, #18]
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
								udd_ep_out_cache_buffer[ep_num - 1],
    a8d6:	231d      	movs	r3, #29
    a8d8:	18fb      	adds	r3, r7, r3
    a8da:	781b      	ldrb	r3, [r3, #0]
    a8dc:	3b01      	subs	r3, #1
    a8de:	019b      	lsls	r3, r3, #6
    a8e0:	4a2a      	ldr	r2, [pc, #168]	; (a98c <udd_ep_run+0x314>)
    a8e2:	58a2      	ldr	r2, [r4, r2]
    a8e4:	189a      	adds	r2, r3, r2
								ptr_job->ep_size));
    a8e6:	69bb      	ldr	r3, [r7, #24]
    a8e8:	8a1b      	ldrh	r3, [r3, #16]
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    a8ea:	001d      	movs	r5, r3
    a8ec:	231d      	movs	r3, #29
    a8ee:	18fb      	adds	r3, r7, r3
    a8f0:	7819      	ldrb	r1, [r3, #0]
    a8f2:	4b24      	ldr	r3, [pc, #144]	; (a984 <udd_ep_run+0x30c>)
    a8f4:	58e3      	ldr	r3, [r4, r3]
    a8f6:	0018      	movs	r0, r3
    a8f8:	002b      	movs	r3, r5
    a8fa:	4d25      	ldr	r5, [pc, #148]	; (a990 <udd_ep_run+0x318>)
    a8fc:	5964      	ldr	r4, [r4, r5]
    a8fe:	47a0      	blx	r4
    a900:	0003      	movs	r3, r0
				return (STATUS_OK ==
    a902:	425a      	negs	r2, r3
    a904:	4153      	adcs	r3, r2
    a906:	b2db      	uxtb	r3, r3
    a908:	e026      	b.n	a958 <udd_ep_run+0x2e0>
			} else {
				return (STATUS_OK ==
						usb_device_endpoint_read_buffer_job(&usb_device, ep_num,
    a90a:	69bb      	ldr	r3, [r7, #24]
    a90c:	685a      	ldr	r2, [r3, #4]
    a90e:	231e      	movs	r3, #30
    a910:	18fb      	adds	r3, r7, r3
    a912:	8818      	ldrh	r0, [r3, #0]
    a914:	231d      	movs	r3, #29
    a916:	18fb      	adds	r3, r7, r3
    a918:	7819      	ldrb	r1, [r3, #0]
    a91a:	4b1a      	ldr	r3, [pc, #104]	; (a984 <udd_ep_run+0x30c>)
    a91c:	58e3      	ldr	r3, [r4, r3]
    a91e:	001d      	movs	r5, r3
    a920:	0003      	movs	r3, r0
    a922:	0028      	movs	r0, r5
    a924:	4d1a      	ldr	r5, [pc, #104]	; (a990 <udd_ep_run+0x318>)
    a926:	5964      	ldr	r4, [r4, r5]
    a928:	47a0      	blx	r4
    a92a:	0003      	movs	r3, r0
				return (STATUS_OK ==
    a92c:	425a      	negs	r2, r3
    a92e:	4153      	adcs	r3, r2
    a930:	b2db      	uxtb	r3, r3
    a932:	e011      	b.n	a958 <udd_ep_run+0x2e0>
								&ptr_job->buf[0],next_trans));
			}
		} else {
			ptr_job->busy = false;
    a934:	69bb      	ldr	r3, [r7, #24]
    a936:	7c9a      	ldrb	r2, [r3, #18]
    a938:	2101      	movs	r1, #1
    a93a:	438a      	bics	r2, r1
    a93c:	749a      	strb	r2, [r3, #18]
			if (NULL != ptr_job->call_trans) {
    a93e:	69bb      	ldr	r3, [r7, #24]
    a940:	681b      	ldr	r3, [r3, #0]
    a942:	2b00      	cmp	r3, #0
    a944:	d007      	beq.n	a956 <udd_ep_run+0x2de>
				ptr_job->call_trans(UDD_EP_TRANSFER_OK, 0, ep);
    a946:	69bb      	ldr	r3, [r7, #24]
    a948:	681b      	ldr	r3, [r3, #0]
    a94a:	220f      	movs	r2, #15
    a94c:	18ba      	adds	r2, r7, r2
    a94e:	7812      	ldrb	r2, [r2, #0]
    a950:	2100      	movs	r1, #0
    a952:	2000      	movs	r0, #0
    a954:	4798      	blx	r3
			}
			return true;
    a956:	2301      	movs	r3, #1
		}
	}
}
    a958:	0018      	movs	r0, r3
    a95a:	46bd      	mov	sp, r7
    a95c:	b008      	add	sp, #32
    a95e:	bdb0      	pop	{r4, r5, r7, pc}
    a960:	00004d9c 	.word	0x00004d9c
    a964:	000001c8 	.word	0x000001c8
    a968:	fffff6ad 	.word	0xfffff6ad
    a96c:	fffff393 	.word	0xfffff393
    a970:	fffff3cb 	.word	0xfffff3cb
    a974:	fffff3b3 	.word	0xfffff3b3
    a978:	00001fff 	.word	0x00001fff
    a97c:	00000314 	.word	0x00000314
    a980:	00000290 	.word	0x00000290
    a984:	000000ac 	.word	0x000000ac
    a988:	00000324 	.word	0x00000324
    a98c:	00000020 	.word	0x00000020
    a990:	00000168 	.word	0x00000168

0000a994 <udd_set_address>:

void udd_set_address(uint8_t address)
{
    a994:	b580      	push	{r7, lr}
    a996:	b082      	sub	sp, #8
    a998:	af00      	add	r7, sp, #0
    a99a:	0002      	movs	r2, r0
    a99c:	1dfb      	adds	r3, r7, #7
    a99e:	701a      	strb	r2, [r3, #0]
    a9a0:	4a06      	ldr	r2, [pc, #24]	; (a9bc <udd_set_address+0x28>)
    a9a2:	447a      	add	r2, pc
	usb_device_set_address(&usb_device,address);
    a9a4:	1dfb      	adds	r3, r7, #7
    a9a6:	7819      	ldrb	r1, [r3, #0]
    a9a8:	4b05      	ldr	r3, [pc, #20]	; (a9c0 <udd_set_address+0x2c>)
    a9aa:	58d3      	ldr	r3, [r2, r3]
    a9ac:	0018      	movs	r0, r3
    a9ae:	4b05      	ldr	r3, [pc, #20]	; (a9c4 <udd_set_address+0x30>)
    a9b0:	447b      	add	r3, pc
    a9b2:	4798      	blx	r3
}
    a9b4:	46c0      	nop			; (mov r8, r8)
    a9b6:	46bd      	mov	sp, r7
    a9b8:	b002      	add	sp, #8
    a9ba:	bd80      	pop	{r7, pc}
    a9bc:	00004a8e 	.word	0x00004a8e
    a9c0:	000000ac 	.word	0x000000ac
    a9c4:	fffff18d 	.word	0xfffff18d

0000a9c8 <udd_getaddress>:

uint8_t udd_getaddress(void)
{
    a9c8:	b580      	push	{r7, lr}
    a9ca:	af00      	add	r7, sp, #0
    a9cc:	4a05      	ldr	r2, [pc, #20]	; (a9e4 <udd_getaddress+0x1c>)
    a9ce:	447a      	add	r2, pc
	return usb_device_get_address(&usb_device);
    a9d0:	4b05      	ldr	r3, [pc, #20]	; (a9e8 <udd_getaddress+0x20>)
    a9d2:	58d3      	ldr	r3, [r2, r3]
    a9d4:	0018      	movs	r0, r3
    a9d6:	4b05      	ldr	r3, [pc, #20]	; (a9ec <udd_getaddress+0x24>)
    a9d8:	447b      	add	r3, pc
    a9da:	4798      	blx	r3
    a9dc:	0003      	movs	r3, r0
}
    a9de:	0018      	movs	r0, r3
    a9e0:	46bd      	mov	sp, r7
    a9e2:	bd80      	pop	{r7, pc}
    a9e4:	00004a62 	.word	0x00004a62
    a9e8:	000000ac 	.word	0x000000ac
    a9ec:	fffff149 	.word	0xfffff149

0000a9f0 <udd_set_setup_payload>:
		usb_device_send_remote_wake_up(&usb_device);
	}
}

void udd_set_setup_payload( uint8_t *payload, uint16_t payload_size )
{
    a9f0:	b580      	push	{r7, lr}
    a9f2:	b082      	sub	sp, #8
    a9f4:	af00      	add	r7, sp, #0
    a9f6:	6078      	str	r0, [r7, #4]
    a9f8:	000a      	movs	r2, r1
    a9fa:	1cbb      	adds	r3, r7, #2
    a9fc:	801a      	strh	r2, [r3, #0]
    a9fe:	4b07      	ldr	r3, [pc, #28]	; (aa1c <udd_set_setup_payload+0x2c>)
    aa00:	447b      	add	r3, pc
	udd_g_ctrlreq.payload = payload;
    aa02:	4a07      	ldr	r2, [pc, #28]	; (aa20 <udd_set_setup_payload+0x30>)
    aa04:	589a      	ldr	r2, [r3, r2]
    aa06:	6879      	ldr	r1, [r7, #4]
    aa08:	6091      	str	r1, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
    aa0a:	4a05      	ldr	r2, [pc, #20]	; (aa20 <udd_set_setup_payload+0x30>)
    aa0c:	589b      	ldr	r3, [r3, r2]
    aa0e:	1cba      	adds	r2, r7, #2
    aa10:	8812      	ldrh	r2, [r2, #0]
    aa12:	819a      	strh	r2, [r3, #12]
}
    aa14:	46c0      	nop			; (mov r8, r8)
    aa16:	46bd      	mov	sp, r7
    aa18:	b002      	add	sp, #8
    aa1a:	bd80      	pop	{r7, pc}
    aa1c:	00004a30 	.word	0x00004a30
    aa20:	00000208 	.word	0x00000208

0000aa24 <udd_ctrl_fetch_ram>:

/**
 * \brief Control Endpoint translate the data in buffer into Device Request Struct
 */
static void udd_ctrl_fetch_ram(void)
{
    aa24:	b580      	push	{r7, lr}
    aa26:	af00      	add	r7, sp, #0
    aa28:	4b1f      	ldr	r3, [pc, #124]	; (aaa8 <udd_ctrl_fetch_ram+0x84>)
    aa2a:	447b      	add	r3, pc
	udd_g_ctrlreq.req.bmRequestType = udd_ctrl_buffer[0];
    aa2c:	4a1f      	ldr	r2, [pc, #124]	; (aaac <udd_ctrl_fetch_ram+0x88>)
    aa2e:	589a      	ldr	r2, [r3, r2]
    aa30:	7811      	ldrb	r1, [r2, #0]
    aa32:	4a1f      	ldr	r2, [pc, #124]	; (aab0 <udd_ctrl_fetch_ram+0x8c>)
    aa34:	589a      	ldr	r2, [r3, r2]
    aa36:	7011      	strb	r1, [r2, #0]
	udd_g_ctrlreq.req.bRequest = udd_ctrl_buffer[1];
    aa38:	4a1c      	ldr	r2, [pc, #112]	; (aaac <udd_ctrl_fetch_ram+0x88>)
    aa3a:	589a      	ldr	r2, [r3, r2]
    aa3c:	7851      	ldrb	r1, [r2, #1]
    aa3e:	4a1c      	ldr	r2, [pc, #112]	; (aab0 <udd_ctrl_fetch_ram+0x8c>)
    aa40:	589a      	ldr	r2, [r3, r2]
    aa42:	7051      	strb	r1, [r2, #1]
	udd_g_ctrlreq.req.wValue = ((uint16_t)(udd_ctrl_buffer[3]) << 8) + udd_ctrl_buffer[2];
    aa44:	4a19      	ldr	r2, [pc, #100]	; (aaac <udd_ctrl_fetch_ram+0x88>)
    aa46:	589a      	ldr	r2, [r3, r2]
    aa48:	78d2      	ldrb	r2, [r2, #3]
    aa4a:	b292      	uxth	r2, r2
    aa4c:	0212      	lsls	r2, r2, #8
    aa4e:	b291      	uxth	r1, r2
    aa50:	4a16      	ldr	r2, [pc, #88]	; (aaac <udd_ctrl_fetch_ram+0x88>)
    aa52:	589a      	ldr	r2, [r3, r2]
    aa54:	7892      	ldrb	r2, [r2, #2]
    aa56:	b292      	uxth	r2, r2
    aa58:	188a      	adds	r2, r1, r2
    aa5a:	b291      	uxth	r1, r2
    aa5c:	4a14      	ldr	r2, [pc, #80]	; (aab0 <udd_ctrl_fetch_ram+0x8c>)
    aa5e:	589a      	ldr	r2, [r3, r2]
    aa60:	8051      	strh	r1, [r2, #2]
	udd_g_ctrlreq.req.wIndex = ((uint16_t)(udd_ctrl_buffer[5]) << 8) + udd_ctrl_buffer[4];
    aa62:	4a12      	ldr	r2, [pc, #72]	; (aaac <udd_ctrl_fetch_ram+0x88>)
    aa64:	589a      	ldr	r2, [r3, r2]
    aa66:	7952      	ldrb	r2, [r2, #5]
    aa68:	b292      	uxth	r2, r2
    aa6a:	0212      	lsls	r2, r2, #8
    aa6c:	b291      	uxth	r1, r2
    aa6e:	4a0f      	ldr	r2, [pc, #60]	; (aaac <udd_ctrl_fetch_ram+0x88>)
    aa70:	589a      	ldr	r2, [r3, r2]
    aa72:	7912      	ldrb	r2, [r2, #4]
    aa74:	b292      	uxth	r2, r2
    aa76:	188a      	adds	r2, r1, r2
    aa78:	b291      	uxth	r1, r2
    aa7a:	4a0d      	ldr	r2, [pc, #52]	; (aab0 <udd_ctrl_fetch_ram+0x8c>)
    aa7c:	589a      	ldr	r2, [r3, r2]
    aa7e:	8091      	strh	r1, [r2, #4]
	udd_g_ctrlreq.req.wLength = ((uint16_t)(udd_ctrl_buffer[7]) << 8) + udd_ctrl_buffer[6];
    aa80:	4a0a      	ldr	r2, [pc, #40]	; (aaac <udd_ctrl_fetch_ram+0x88>)
    aa82:	589a      	ldr	r2, [r3, r2]
    aa84:	79d2      	ldrb	r2, [r2, #7]
    aa86:	b292      	uxth	r2, r2
    aa88:	0212      	lsls	r2, r2, #8
    aa8a:	b291      	uxth	r1, r2
    aa8c:	4a07      	ldr	r2, [pc, #28]	; (aaac <udd_ctrl_fetch_ram+0x88>)
    aa8e:	589a      	ldr	r2, [r3, r2]
    aa90:	7992      	ldrb	r2, [r2, #6]
    aa92:	b292      	uxth	r2, r2
    aa94:	188a      	adds	r2, r1, r2
    aa96:	b291      	uxth	r1, r2
    aa98:	4a05      	ldr	r2, [pc, #20]	; (aab0 <udd_ctrl_fetch_ram+0x8c>)
    aa9a:	589b      	ldr	r3, [r3, r2]
    aa9c:	1c0a      	adds	r2, r1, #0
    aa9e:	80da      	strh	r2, [r3, #6]
}
    aaa0:	46c0      	nop			; (mov r8, r8)
    aaa2:	46bd      	mov	sp, r7
    aaa4:	bd80      	pop	{r7, pc}
    aaa6:	46c0      	nop			; (mov r8, r8)
    aaa8:	00004a06 	.word	0x00004a06
    aaac:	000002e4 	.word	0x000002e4
    aab0:	00000208 	.word	0x00000208

0000aab4 <udd_ctrl_send_zlp_in>:

/**
 * \brief Control Endpoint send out zero length packet
 */
static void udd_ctrl_send_zlp_in(void)
{
    aab4:	b5b0      	push	{r4, r5, r7, lr}
    aab6:	af00      	add	r7, sp, #0
    aab8:	4c0e      	ldr	r4, [pc, #56]	; (aaf4 <udd_ctrl_send_zlp_in+0x40>)
    aaba:	447c      	add	r4, pc
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
    aabc:	4b0e      	ldr	r3, [pc, #56]	; (aaf8 <udd_ctrl_send_zlp_in+0x44>)
    aabe:	447b      	add	r3, pc
    aac0:	2203      	movs	r2, #3
    aac2:	701a      	strb	r2, [r3, #0]
	usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    aac4:	4b0d      	ldr	r3, [pc, #52]	; (aafc <udd_ctrl_send_zlp_in+0x48>)
    aac6:	58e3      	ldr	r3, [r4, r3]
    aac8:	001a      	movs	r2, r3
    aaca:	4b0d      	ldr	r3, [pc, #52]	; (ab00 <udd_ctrl_send_zlp_in+0x4c>)
    aacc:	58e3      	ldr	r3, [r4, r3]
    aace:	0011      	movs	r1, r2
    aad0:	0018      	movs	r0, r3
    aad2:	4b0c      	ldr	r3, [pc, #48]	; (ab04 <udd_ctrl_send_zlp_in+0x50>)
    aad4:	58e3      	ldr	r3, [r4, r3]
    aad6:	4798      	blx	r3
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload,0);
    aad8:	4b0b      	ldr	r3, [pc, #44]	; (ab08 <udd_ctrl_send_zlp_in+0x54>)
    aada:	58e3      	ldr	r3, [r4, r3]
    aadc:	689a      	ldr	r2, [r3, #8]
    aade:	4b08      	ldr	r3, [pc, #32]	; (ab00 <udd_ctrl_send_zlp_in+0x4c>)
    aae0:	58e3      	ldr	r3, [r4, r3]
    aae2:	0018      	movs	r0, r3
    aae4:	2300      	movs	r3, #0
    aae6:	2100      	movs	r1, #0
    aae8:	4d08      	ldr	r5, [pc, #32]	; (ab0c <udd_ctrl_send_zlp_in+0x58>)
    aaea:	5964      	ldr	r4, [r4, r5]
    aaec:	47a0      	blx	r4
}
    aaee:	46c0      	nop			; (mov r8, r8)
    aaf0:	46bd      	mov	sp, r7
    aaf2:	bdb0      	pop	{r4, r5, r7, pc}
    aaf4:	00004976 	.word	0x00004976
    aaf8:	1fff58ee 	.word	0x1fff58ee
    aafc:	000002e4 	.word	0x000002e4
    ab00:	000000ac 	.word	0x000000ac
    ab04:	000000e8 	.word	0x000000e8
    ab08:	00000208 	.word	0x00000208
    ab0c:	00000324 	.word	0x00000324

0000ab10 <udd_ctrl_in_sent>:

/**
 * \brief Process control endpoint IN transaction
 */
static void udd_ctrl_in_sent(void)
{
    ab10:	b5b0      	push	{r4, r5, r7, lr}
    ab12:	b082      	sub	sp, #8
    ab14:	af00      	add	r7, sp, #0
    ab16:	4c3e      	ldr	r4, [pc, #248]	; (ac10 <udd_ctrl_in_sent+0x100>)
    ab18:	447c      	add	r4, pc
	static bool b_shortpacket = false;
	uint16_t nb_remain;

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    ab1a:	4b3e      	ldr	r3, [pc, #248]	; (ac14 <udd_ctrl_in_sent+0x104>)
    ab1c:	58e3      	ldr	r3, [r4, r3]
    ab1e:	8999      	ldrh	r1, [r3, #12]
    ab20:	4b3d      	ldr	r3, [pc, #244]	; (ac18 <udd_ctrl_in_sent+0x108>)
    ab22:	447b      	add	r3, pc
    ab24:	881a      	ldrh	r2, [r3, #0]
    ab26:	1dbb      	adds	r3, r7, #6
    ab28:	1a8a      	subs	r2, r1, r2
    ab2a:	801a      	strh	r2, [r3, #0]

	if (0 == nb_remain) {
    ab2c:	1dbb      	adds	r3, r7, #6
    ab2e:	881b      	ldrh	r3, [r3, #0]
    ab30:	2b00      	cmp	r3, #0
    ab32:	d13f      	bne.n	abb4 <udd_ctrl_in_sent+0xa4>
		/* All content of current buffer payload are sent Update number of total data sending by previous payload buffer */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    ab34:	4b39      	ldr	r3, [pc, #228]	; (ac1c <udd_ctrl_in_sent+0x10c>)
    ab36:	447b      	add	r3, pc
    ab38:	881a      	ldrh	r2, [r3, #0]
    ab3a:	4b39      	ldr	r3, [pc, #228]	; (ac20 <udd_ctrl_in_sent+0x110>)
    ab3c:	447b      	add	r3, pc
    ab3e:	881b      	ldrh	r3, [r3, #0]
    ab40:	18d3      	adds	r3, r2, r3
    ab42:	b29a      	uxth	r2, r3
    ab44:	4b37      	ldr	r3, [pc, #220]	; (ac24 <udd_ctrl_in_sent+0x114>)
    ab46:	447b      	add	r3, pc
    ab48:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_nb_trans) || b_shortpacket) {
    ab4a:	4b32      	ldr	r3, [pc, #200]	; (ac14 <udd_ctrl_in_sent+0x104>)
    ab4c:	58e3      	ldr	r3, [r4, r3]
    ab4e:	88da      	ldrh	r2, [r3, #6]
    ab50:	4b35      	ldr	r3, [pc, #212]	; (ac28 <udd_ctrl_in_sent+0x118>)
    ab52:	447b      	add	r3, pc
    ab54:	881b      	ldrh	r3, [r3, #0]
    ab56:	429a      	cmp	r2, r3
    ab58:	d004      	beq.n	ab64 <udd_ctrl_in_sent+0x54>
    ab5a:	4b34      	ldr	r3, [pc, #208]	; (ac2c <udd_ctrl_in_sent+0x11c>)
    ab5c:	447b      	add	r3, pc
    ab5e:	781b      	ldrb	r3, [r3, #0]
    ab60:	2b00      	cmp	r3, #0
    ab62:	d00e      	beq.n	ab82 <udd_ctrl_in_sent+0x72>
			/* All data requested are transferred or a short packet has been sent, then it is the end of data phase.
			 * Generate an OUT ZLP for handshake phase */
			udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    ab64:	4b32      	ldr	r3, [pc, #200]	; (ac30 <udd_ctrl_in_sent+0x120>)
    ab66:	447b      	add	r3, pc
    ab68:	2204      	movs	r2, #4
    ab6a:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_setup_buffer_job(&usb_device,udd_ctrl_buffer);
    ab6c:	4b31      	ldr	r3, [pc, #196]	; (ac34 <udd_ctrl_in_sent+0x124>)
    ab6e:	58e3      	ldr	r3, [r4, r3]
    ab70:	001a      	movs	r2, r3
    ab72:	4b31      	ldr	r3, [pc, #196]	; (ac38 <udd_ctrl_in_sent+0x128>)
    ab74:	58e3      	ldr	r3, [r4, r3]
    ab76:	0011      	movs	r1, r2
    ab78:	0018      	movs	r0, r3
    ab7a:	4b30      	ldr	r3, [pc, #192]	; (ac3c <udd_ctrl_in_sent+0x12c>)
    ab7c:	58e3      	ldr	r3, [r4, r3]
    ab7e:	4798      	blx	r3
			return;
    ab80:	e043      	b.n	ac0a <udd_ctrl_in_sent+0xfa>
		}
		/* Need of new buffer because the data phase is not complete */
		if ((!udd_g_ctrlreq.over_under_run) || (!udd_g_ctrlreq.over_under_run())) {
    ab82:	4b24      	ldr	r3, [pc, #144]	; (ac14 <udd_ctrl_in_sent+0x104>)
    ab84:	58e3      	ldr	r3, [r4, r3]
    ab86:	695b      	ldr	r3, [r3, #20]
    ab88:	2b00      	cmp	r3, #0
    ab8a:	d013      	beq.n	abb4 <udd_ctrl_in_sent+0xa4>
    ab8c:	4b21      	ldr	r3, [pc, #132]	; (ac14 <udd_ctrl_in_sent+0x104>)
    ab8e:	58e3      	ldr	r3, [r4, r3]
    ab90:	695b      	ldr	r3, [r3, #20]
    ab92:	4798      	blx	r3
    ab94:	0003      	movs	r3, r0
    ab96:	001a      	movs	r2, r3
    ab98:	2301      	movs	r3, #1
    ab9a:	4053      	eors	r3, r2
    ab9c:	b2db      	uxtb	r3, r3
    ab9e:	2b00      	cmp	r3, #0
    aba0:	d108      	bne.n	abb4 <udd_ctrl_in_sent+0xa4>
			/* Under run then send zlp on IN
			 * Here nb_remain=0, this allows to send a IN ZLP */
		} else {
			/* A new payload buffer is given */
			udd_ctrl_payload_nb_trans = 0;
    aba2:	4b27      	ldr	r3, [pc, #156]	; (ac40 <udd_ctrl_in_sent+0x130>)
    aba4:	447b      	add	r3, pc
    aba6:	2200      	movs	r2, #0
    aba8:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
    abaa:	1dbb      	adds	r3, r7, #6
    abac:	4a19      	ldr	r2, [pc, #100]	; (ac14 <udd_ctrl_in_sent+0x104>)
    abae:	58a2      	ldr	r2, [r4, r2]
    abb0:	8992      	ldrh	r2, [r2, #12]
    abb2:	801a      	strh	r2, [r3, #0]
		}
	}

	/* Continue transfer and send next data */
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
    abb4:	1dbb      	adds	r3, r7, #6
    abb6:	881b      	ldrh	r3, [r3, #0]
    abb8:	2b3f      	cmp	r3, #63	; 0x3f
    abba:	d907      	bls.n	abcc <udd_ctrl_in_sent+0xbc>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
    abbc:	1dbb      	adds	r3, r7, #6
    abbe:	2240      	movs	r2, #64	; 0x40
    abc0:	801a      	strh	r2, [r3, #0]
		b_shortpacket = false;
    abc2:	4b20      	ldr	r3, [pc, #128]	; (ac44 <udd_ctrl_in_sent+0x134>)
    abc4:	447b      	add	r3, pc
    abc6:	2200      	movs	r2, #0
    abc8:	701a      	strb	r2, [r3, #0]
    abca:	e003      	b.n	abd4 <udd_ctrl_in_sent+0xc4>
	} else {
		b_shortpacket = true;
    abcc:	4b1e      	ldr	r3, [pc, #120]	; (ac48 <udd_ctrl_in_sent+0x138>)
    abce:	447b      	add	r3, pc
    abd0:	2201      	movs	r2, #1
    abd2:	701a      	strb	r2, [r3, #0]
	}

	/* Link payload buffer directly on USB hardware */
	usb_device_endpoint_write_buffer_job(&usb_device,0,udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans,nb_remain);
    abd4:	4b0f      	ldr	r3, [pc, #60]	; (ac14 <udd_ctrl_in_sent+0x104>)
    abd6:	58e3      	ldr	r3, [r4, r3]
    abd8:	689b      	ldr	r3, [r3, #8]
    abda:	4a1c      	ldr	r2, [pc, #112]	; (ac4c <udd_ctrl_in_sent+0x13c>)
    abdc:	447a      	add	r2, pc
    abde:	8812      	ldrh	r2, [r2, #0]
    abe0:	189a      	adds	r2, r3, r2
    abe2:	1dbb      	adds	r3, r7, #6
    abe4:	8819      	ldrh	r1, [r3, #0]
    abe6:	4b14      	ldr	r3, [pc, #80]	; (ac38 <udd_ctrl_in_sent+0x128>)
    abe8:	58e3      	ldr	r3, [r4, r3]
    abea:	0018      	movs	r0, r3
    abec:	000b      	movs	r3, r1
    abee:	2100      	movs	r1, #0
    abf0:	4d17      	ldr	r5, [pc, #92]	; (ac50 <udd_ctrl_in_sent+0x140>)
    abf2:	5964      	ldr	r4, [r4, r5]
    abf4:	47a0      	blx	r4

	udd_ctrl_payload_nb_trans += nb_remain;
    abf6:	4b17      	ldr	r3, [pc, #92]	; (ac54 <udd_ctrl_in_sent+0x144>)
    abf8:	447b      	add	r3, pc
    abfa:	881a      	ldrh	r2, [r3, #0]
    abfc:	1dbb      	adds	r3, r7, #6
    abfe:	881b      	ldrh	r3, [r3, #0]
    ac00:	18d3      	adds	r3, r2, r3
    ac02:	b29a      	uxth	r2, r3
    ac04:	4b14      	ldr	r3, [pc, #80]	; (ac58 <udd_ctrl_in_sent+0x148>)
    ac06:	447b      	add	r3, pc
    ac08:	801a      	strh	r2, [r3, #0]
}
    ac0a:	46bd      	mov	sp, r7
    ac0c:	b002      	add	sp, #8
    ac0e:	bdb0      	pop	{r4, r5, r7, pc}
    ac10:	00004918 	.word	0x00004918
    ac14:	00000208 	.word	0x00000208
    ac18:	1fff588e 	.word	0x1fff588e
    ac1c:	1fff5878 	.word	0x1fff5878
    ac20:	1fff5874 	.word	0x1fff5874
    ac24:	1fff5868 	.word	0x1fff5868
    ac28:	1fff585c 	.word	0x1fff585c
    ac2c:	1fff58d1 	.word	0x1fff58d1
    ac30:	1fff5846 	.word	0x1fff5846
    ac34:	000002e4 	.word	0x000002e4
    ac38:	000000ac 	.word	0x000000ac
    ac3c:	000000e8 	.word	0x000000e8
    ac40:	1fff580c 	.word	0x1fff580c
    ac44:	1fff5869 	.word	0x1fff5869
    ac48:	1fff585f 	.word	0x1fff585f
    ac4c:	1fff57d4 	.word	0x1fff57d4
    ac50:	00000324 	.word	0x00000324
    ac54:	1fff57b8 	.word	0x1fff57b8
    ac58:	1fff57aa 	.word	0x1fff57aa

0000ac5c <udd_ctrl_out_received>:
/**
 * \brief Process control endpoint OUT transaction
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_out_received(void* pointer)
{
    ac5c:	b5b0      	push	{r4, r5, r7, lr}
    ac5e:	b084      	sub	sp, #16
    ac60:	af00      	add	r7, sp, #0
    ac62:	6078      	str	r0, [r7, #4]
    ac64:	4c5c      	ldr	r4, [pc, #368]	; (add8 <udd_ctrl_out_received+0x17c>)
    ac66:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    ac68:	687b      	ldr	r3, [r7, #4]
    ac6a:	60bb      	str	r3, [r7, #8]

	uint16_t nb_data;
	nb_data = ep_callback_para->received_bytes; /* Read data received during OUT phase */
    ac6c:	230e      	movs	r3, #14
    ac6e:	18fb      	adds	r3, r7, r3
    ac70:	68ba      	ldr	r2, [r7, #8]
    ac72:	8812      	ldrh	r2, [r2, #0]
    ac74:	801a      	strh	r2, [r3, #0]

	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_nb_trans + nb_data)) {
    ac76:	4b59      	ldr	r3, [pc, #356]	; (addc <udd_ctrl_out_received+0x180>)
    ac78:	58e3      	ldr	r3, [r4, r3]
    ac7a:	899b      	ldrh	r3, [r3, #12]
    ac7c:	001a      	movs	r2, r3
    ac7e:	4b58      	ldr	r3, [pc, #352]	; (ade0 <udd_ctrl_out_received+0x184>)
    ac80:	447b      	add	r3, pc
    ac82:	881b      	ldrh	r3, [r3, #0]
    ac84:	0019      	movs	r1, r3
    ac86:	230e      	movs	r3, #14
    ac88:	18fb      	adds	r3, r7, r3
    ac8a:	881b      	ldrh	r3, [r3, #0]
    ac8c:	18cb      	adds	r3, r1, r3
    ac8e:	429a      	cmp	r2, r3
    ac90:	da09      	bge.n	aca6 <udd_ctrl_out_received+0x4a>
		/* Payload buffer too small */
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_nb_trans;
    ac92:	4b52      	ldr	r3, [pc, #328]	; (addc <udd_ctrl_out_received+0x180>)
    ac94:	58e3      	ldr	r3, [r4, r3]
    ac96:	8999      	ldrh	r1, [r3, #12]
    ac98:	4b52      	ldr	r3, [pc, #328]	; (ade4 <udd_ctrl_out_received+0x188>)
    ac9a:	447b      	add	r3, pc
    ac9c:	881a      	ldrh	r2, [r3, #0]
    ac9e:	230e      	movs	r3, #14
    aca0:	18fb      	adds	r3, r7, r3
    aca2:	1a8a      	subs	r2, r1, r2
    aca4:	801a      	strh	r2, [r3, #0]
	}

	memcpy((uint8_t *) (udd_g_ctrlreq.payload + udd_ctrl_payload_nb_trans), udd_ctrl_buffer, nb_data);
    aca6:	4b4d      	ldr	r3, [pc, #308]	; (addc <udd_ctrl_out_received+0x180>)
    aca8:	58e3      	ldr	r3, [r4, r3]
    acaa:	689b      	ldr	r3, [r3, #8]
    acac:	4a4e      	ldr	r2, [pc, #312]	; (ade8 <udd_ctrl_out_received+0x18c>)
    acae:	447a      	add	r2, pc
    acb0:	8812      	ldrh	r2, [r2, #0]
    acb2:	1898      	adds	r0, r3, r2
    acb4:	230e      	movs	r3, #14
    acb6:	18fb      	adds	r3, r7, r3
    acb8:	881a      	ldrh	r2, [r3, #0]
    acba:	4b4c      	ldr	r3, [pc, #304]	; (adec <udd_ctrl_out_received+0x190>)
    acbc:	58e3      	ldr	r3, [r4, r3]
    acbe:	0019      	movs	r1, r3
    acc0:	4b4b      	ldr	r3, [pc, #300]	; (adf0 <udd_ctrl_out_received+0x194>)
    acc2:	58e3      	ldr	r3, [r4, r3]
    acc4:	4798      	blx	r3
	udd_ctrl_payload_nb_trans += nb_data;
    acc6:	4b4b      	ldr	r3, [pc, #300]	; (adf4 <udd_ctrl_out_received+0x198>)
    acc8:	447b      	add	r3, pc
    acca:	881a      	ldrh	r2, [r3, #0]
    accc:	230e      	movs	r3, #14
    acce:	18fb      	adds	r3, r7, r3
    acd0:	881b      	ldrh	r3, [r3, #0]
    acd2:	18d3      	adds	r3, r2, r3
    acd4:	b29a      	uxth	r2, r3
    acd6:	4b48      	ldr	r3, [pc, #288]	; (adf8 <udd_ctrl_out_received+0x19c>)
    acd8:	447b      	add	r3, pc
    acda:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    acdc:	230e      	movs	r3, #14
    acde:	18fb      	adds	r3, r7, r3
    ace0:	881b      	ldrh	r3, [r3, #0]
    ace2:	2b40      	cmp	r3, #64	; 0x40
    ace4:	d10d      	bne.n	ad02 <udd_ctrl_out_received+0xa6>
	(udd_g_ctrlreq.req.wLength <= (udd_ctrl_prev_payload_nb_trans + udd_ctrl_payload_nb_trans))) {
    ace6:	4b3d      	ldr	r3, [pc, #244]	; (addc <udd_ctrl_out_received+0x180>)
    ace8:	58e3      	ldr	r3, [r4, r3]
    acea:	88db      	ldrh	r3, [r3, #6]
    acec:	001a      	movs	r2, r3
    acee:	4b43      	ldr	r3, [pc, #268]	; (adfc <udd_ctrl_out_received+0x1a0>)
    acf0:	447b      	add	r3, pc
    acf2:	881b      	ldrh	r3, [r3, #0]
    acf4:	0019      	movs	r1, r3
    acf6:	4b42      	ldr	r3, [pc, #264]	; (ae00 <udd_ctrl_out_received+0x1a4>)
    acf8:	447b      	add	r3, pc
    acfa:	881b      	ldrh	r3, [r3, #0]
    acfc:	18cb      	adds	r3, r1, r3
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data) || \
    acfe:	429a      	cmp	r2, r3
    ad00:	dc22      	bgt.n	ad48 <udd_ctrl_out_received+0xec>
		/* End of reception because it is a short packet
		 * or all data are transferred */

		/* Before send ZLP, call intermediate callback
		 * in case of data receive generate a stall */
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_nb_trans;
    ad02:	4b40      	ldr	r3, [pc, #256]	; (ae04 <udd_ctrl_out_received+0x1a8>)
    ad04:	447b      	add	r3, pc
    ad06:	881a      	ldrh	r2, [r3, #0]
    ad08:	4b34      	ldr	r3, [pc, #208]	; (addc <udd_ctrl_out_received+0x180>)
    ad0a:	58e3      	ldr	r3, [r4, r3]
    ad0c:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
    ad0e:	4b33      	ldr	r3, [pc, #204]	; (addc <udd_ctrl_out_received+0x180>)
    ad10:	58e3      	ldr	r3, [r4, r3]
    ad12:	695b      	ldr	r3, [r3, #20]
    ad14:	2b00      	cmp	r3, #0
    ad16:	d013      	beq.n	ad40 <udd_ctrl_out_received+0xe4>
			if (!udd_g_ctrlreq.over_under_run()) {
    ad18:	4b30      	ldr	r3, [pc, #192]	; (addc <udd_ctrl_out_received+0x180>)
    ad1a:	58e3      	ldr	r3, [r4, r3]
    ad1c:	695b      	ldr	r3, [r3, #20]
    ad1e:	4798      	blx	r3
    ad20:	0003      	movs	r3, r0
    ad22:	001a      	movs	r2, r3
    ad24:	2301      	movs	r3, #1
    ad26:	4053      	eors	r3, r2
    ad28:	b2db      	uxtb	r3, r3
    ad2a:	2b00      	cmp	r3, #0
    ad2c:	d008      	beq.n	ad40 <udd_ctrl_out_received+0xe4>
				/* Stall ZLP */
				udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    ad2e:	4b36      	ldr	r3, [pc, #216]	; (ae08 <udd_ctrl_out_received+0x1ac>)
    ad30:	447b      	add	r3, pc
    ad32:	2205      	movs	r2, #5
    ad34:	701a      	strb	r2, [r3, #0]
				/* Stall all packets on IN & OUT control endpoint */
				udd_ep_set_halt(0);
    ad36:	2000      	movs	r0, #0
    ad38:	4b34      	ldr	r3, [pc, #208]	; (ae0c <udd_ctrl_out_received+0x1b0>)
    ad3a:	58e3      	ldr	r3, [r4, r3]
    ad3c:	4798      	blx	r3
				/* Ack reception of OUT to replace NAK by a STALL */
				return;
    ad3e:	e047      	b.n	add0 <udd_ctrl_out_received+0x174>
			}
		}
		/* Send IN ZLP to ACK setup request */
		udd_ctrl_send_zlp_in();
    ad40:	4b33      	ldr	r3, [pc, #204]	; (ae10 <udd_ctrl_out_received+0x1b4>)
    ad42:	447b      	add	r3, pc
    ad44:	4798      	blx	r3
		return;
    ad46:	e043      	b.n	add0 <udd_ctrl_out_received+0x174>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_nb_trans) {
    ad48:	4b24      	ldr	r3, [pc, #144]	; (addc <udd_ctrl_out_received+0x180>)
    ad4a:	58e3      	ldr	r3, [r4, r3]
    ad4c:	899a      	ldrh	r2, [r3, #12]
    ad4e:	4b31      	ldr	r3, [pc, #196]	; (ae14 <udd_ctrl_out_received+0x1b8>)
    ad50:	447b      	add	r3, pc
    ad52:	881b      	ldrh	r3, [r3, #0]
    ad54:	429a      	cmp	r2, r3
    ad56:	d130      	bne.n	adba <udd_ctrl_out_received+0x15e>
		/* Overrun then request a new payload buffer */
		if (!udd_g_ctrlreq.over_under_run) {
    ad58:	4b20      	ldr	r3, [pc, #128]	; (addc <udd_ctrl_out_received+0x180>)
    ad5a:	58e3      	ldr	r3, [r4, r3]
    ad5c:	695b      	ldr	r3, [r3, #20]
    ad5e:	2b00      	cmp	r3, #0
    ad60:	d108      	bne.n	ad74 <udd_ctrl_out_received+0x118>
			/* No callback available to request a new payload buffer
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    ad62:	4b2d      	ldr	r3, [pc, #180]	; (ae18 <udd_ctrl_out_received+0x1bc>)
    ad64:	447b      	add	r3, pc
    ad66:	2205      	movs	r2, #5
    ad68:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    ad6a:	2000      	movs	r0, #0
    ad6c:	4b27      	ldr	r3, [pc, #156]	; (ae0c <udd_ctrl_out_received+0x1b0>)
    ad6e:	58e3      	ldr	r3, [r4, r3]
    ad70:	4798      	blx	r3
			return;
    ad72:	e02d      	b.n	add0 <udd_ctrl_out_received+0x174>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
    ad74:	4b19      	ldr	r3, [pc, #100]	; (addc <udd_ctrl_out_received+0x180>)
    ad76:	58e3      	ldr	r3, [r4, r3]
    ad78:	695b      	ldr	r3, [r3, #20]
    ad7a:	4798      	blx	r3
    ad7c:	0003      	movs	r3, r0
    ad7e:	001a      	movs	r2, r3
    ad80:	2301      	movs	r3, #1
    ad82:	4053      	eors	r3, r2
    ad84:	b2db      	uxtb	r3, r3
    ad86:	2b00      	cmp	r3, #0
    ad88:	d008      	beq.n	ad9c <udd_ctrl_out_received+0x140>
			/* No new payload buffer delivered
			 * Stall ZLP */
			udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
    ad8a:	4b24      	ldr	r3, [pc, #144]	; (ae1c <udd_ctrl_out_received+0x1c0>)
    ad8c:	447b      	add	r3, pc
    ad8e:	2205      	movs	r2, #5
    ad90:	701a      	strb	r2, [r3, #0]
			/* Stall all packets on IN & OUT control endpoint */
			udd_ep_set_halt(0);
    ad92:	2000      	movs	r0, #0
    ad94:	4b1d      	ldr	r3, [pc, #116]	; (ae0c <udd_ctrl_out_received+0x1b0>)
    ad96:	58e3      	ldr	r3, [r4, r3]
    ad98:	4798      	blx	r3
			return;
    ad9a:	e019      	b.n	add0 <udd_ctrl_out_received+0x174>
		}
		/* New payload buffer available
		 * Update number of total data received */
		udd_ctrl_prev_payload_nb_trans += udd_ctrl_payload_nb_trans;
    ad9c:	4b20      	ldr	r3, [pc, #128]	; (ae20 <udd_ctrl_out_received+0x1c4>)
    ad9e:	447b      	add	r3, pc
    ada0:	881a      	ldrh	r2, [r3, #0]
    ada2:	4b20      	ldr	r3, [pc, #128]	; (ae24 <udd_ctrl_out_received+0x1c8>)
    ada4:	447b      	add	r3, pc
    ada6:	881b      	ldrh	r3, [r3, #0]
    ada8:	18d3      	adds	r3, r2, r3
    adaa:	b29a      	uxth	r2, r3
    adac:	4b1e      	ldr	r3, [pc, #120]	; (ae28 <udd_ctrl_out_received+0x1cc>)
    adae:	447b      	add	r3, pc
    adb0:	801a      	strh	r2, [r3, #0]

		/* Reinitialize reception on payload buffer */
		udd_ctrl_payload_nb_trans = 0;
    adb2:	4b1e      	ldr	r3, [pc, #120]	; (ae2c <udd_ctrl_out_received+0x1d0>)
    adb4:	447b      	add	r3, pc
    adb6:	2200      	movs	r2, #0
    adb8:	801a      	strh	r2, [r3, #0]
	}
	usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    adba:	4b0c      	ldr	r3, [pc, #48]	; (adec <udd_ctrl_out_received+0x190>)
    adbc:	58e3      	ldr	r3, [r4, r3]
    adbe:	001a      	movs	r2, r3
    adc0:	4b1b      	ldr	r3, [pc, #108]	; (ae30 <udd_ctrl_out_received+0x1d4>)
    adc2:	58e3      	ldr	r3, [r4, r3]
    adc4:	0018      	movs	r0, r3
    adc6:	2340      	movs	r3, #64	; 0x40
    adc8:	2100      	movs	r1, #0
    adca:	4d1a      	ldr	r5, [pc, #104]	; (ae34 <udd_ctrl_out_received+0x1d8>)
    adcc:	5964      	ldr	r4, [r4, r5]
    adce:	47a0      	blx	r4
}
    add0:	46bd      	mov	sp, r7
    add2:	b004      	add	sp, #16
    add4:	bdb0      	pop	{r4, r5, r7, pc}
    add6:	46c0      	nop			; (mov r8, r8)
    add8:	000047ca 	.word	0x000047ca
    addc:	00000208 	.word	0x00000208
    ade0:	1fff5730 	.word	0x1fff5730
    ade4:	1fff5716 	.word	0x1fff5716
    ade8:	1fff5702 	.word	0x1fff5702
    adec:	000002e4 	.word	0x000002e4
    adf0:	000000bc 	.word	0x000000bc
    adf4:	1fff56e8 	.word	0x1fff56e8
    adf8:	1fff56d8 	.word	0x1fff56d8
    adfc:	1fff56be 	.word	0x1fff56be
    ae00:	1fff56b8 	.word	0x1fff56b8
    ae04:	1fff56ac 	.word	0x1fff56ac
    ae08:	1fff567c 	.word	0x1fff567c
    ae0c:	0000014c 	.word	0x0000014c
    ae10:	fffffd6f 	.word	0xfffffd6f
    ae14:	1fff5660 	.word	0x1fff5660
    ae18:	1fff5648 	.word	0x1fff5648
    ae1c:	1fff5620 	.word	0x1fff5620
    ae20:	1fff5610 	.word	0x1fff5610
    ae24:	1fff560c 	.word	0x1fff560c
    ae28:	1fff5600 	.word	0x1fff5600
    ae2c:	1fff55fc 	.word	0x1fff55fc
    ae30:	000000ac 	.word	0x000000ac
    ae34:	00000168 	.word	0x00000168

0000ae38 <_usb_ep0_on_setup>:
 * \brief     Endpoint 0 (control) SETUP received callback
 * \param[in] module_inst pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_setup(struct usb_module *module_inst, void* pointer)
{
    ae38:	b5b0      	push	{r4, r5, r7, lr}
    ae3a:	b084      	sub	sp, #16
    ae3c:	af00      	add	r7, sp, #0
    ae3e:	6078      	str	r0, [r7, #4]
    ae40:	6039      	str	r1, [r7, #0]
    ae42:	4c39      	ldr	r4, [pc, #228]	; (af28 <_usb_ep0_on_setup+0xf0>)
    ae44:	447c      	add	r4, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    ae46:	683b      	ldr	r3, [r7, #0]
    ae48:	60fb      	str	r3, [r7, #12]

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
    ae4a:	4b38      	ldr	r3, [pc, #224]	; (af2c <_usb_ep0_on_setup+0xf4>)
    ae4c:	447b      	add	r3, pc
    ae4e:	781b      	ldrb	r3, [r3, #0]
    ae50:	2b00      	cmp	r3, #0
    ae52:	d00c      	beq.n	ae6e <_usb_ep0_on_setup+0x36>
		if (NULL != udd_g_ctrlreq.callback) {
    ae54:	4b36      	ldr	r3, [pc, #216]	; (af30 <_usb_ep0_on_setup+0xf8>)
    ae56:	58e3      	ldr	r3, [r4, r3]
    ae58:	691b      	ldr	r3, [r3, #16]
    ae5a:	2b00      	cmp	r3, #0
    ae5c:	d003      	beq.n	ae66 <_usb_ep0_on_setup+0x2e>
			udd_g_ctrlreq.callback();
    ae5e:	4b34      	ldr	r3, [pc, #208]	; (af30 <_usb_ep0_on_setup+0xf8>)
    ae60:	58e3      	ldr	r3, [r4, r3]
    ae62:	691b      	ldr	r3, [r3, #16]
    ae64:	4798      	blx	r3
		}
		udd_ep_control_state = UDD_EPCTRL_SETUP;
    ae66:	4b33      	ldr	r3, [pc, #204]	; (af34 <_usb_ep0_on_setup+0xfc>)
    ae68:	447b      	add	r3, pc
    ae6a:	2200      	movs	r2, #0
    ae6c:	701a      	strb	r2, [r3, #0]
	}
	if ( 8 != ep_callback_para->received_bytes) {
    ae6e:	68fb      	ldr	r3, [r7, #12]
    ae70:	881b      	ldrh	r3, [r3, #0]
    ae72:	2b08      	cmp	r3, #8
    ae74:	d003      	beq.n	ae7e <_usb_ep0_on_setup+0x46>
		udd_ctrl_stall_data();
    ae76:	4b30      	ldr	r3, [pc, #192]	; (af38 <_usb_ep0_on_setup+0x100>)
    ae78:	447b      	add	r3, pc
    ae7a:	4798      	blx	r3
		return;
    ae7c:	e051      	b.n	af22 <_usb_ep0_on_setup+0xea>
	} else {
		udd_ctrl_fetch_ram();
    ae7e:	4b2f      	ldr	r3, [pc, #188]	; (af3c <_usb_ep0_on_setup+0x104>)
    ae80:	447b      	add	r3, pc
    ae82:	4798      	blx	r3
		if (false == udc_process_setup()) {
    ae84:	4b2e      	ldr	r3, [pc, #184]	; (af40 <_usb_ep0_on_setup+0x108>)
    ae86:	58e3      	ldr	r3, [r4, r3]
    ae88:	4798      	blx	r3
    ae8a:	0003      	movs	r3, r0
    ae8c:	001a      	movs	r2, r3
    ae8e:	2301      	movs	r3, #1
    ae90:	4053      	eors	r3, r2
    ae92:	b2db      	uxtb	r3, r3
    ae94:	2b00      	cmp	r3, #0
    ae96:	d003      	beq.n	aea0 <_usb_ep0_on_setup+0x68>
			udd_ctrl_stall_data();
    ae98:	4b2a      	ldr	r3, [pc, #168]	; (af44 <_usb_ep0_on_setup+0x10c>)
    ae9a:	447b      	add	r3, pc
    ae9c:	4798      	blx	r3
			return;
    ae9e:	e040      	b.n	af22 <_usb_ep0_on_setup+0xea>
		} else if (Udd_setup_is_in()) {
    aea0:	4b23      	ldr	r3, [pc, #140]	; (af30 <_usb_ep0_on_setup+0xf8>)
    aea2:	58e3      	ldr	r3, [r4, r3]
    aea4:	781b      	ldrb	r3, [r3, #0]
    aea6:	b25b      	sxtb	r3, r3
    aea8:	2b00      	cmp	r3, #0
    aeaa:	da1a      	bge.n	aee2 <_usb_ep0_on_setup+0xaa>
			udd_ctrl_prev_payload_nb_trans = 0;
    aeac:	4b26      	ldr	r3, [pc, #152]	; (af48 <_usb_ep0_on_setup+0x110>)
    aeae:	447b      	add	r3, pc
    aeb0:	2200      	movs	r2, #0
    aeb2:	801a      	strh	r2, [r3, #0]
			udd_ctrl_payload_nb_trans = 0;
    aeb4:	4b25      	ldr	r3, [pc, #148]	; (af4c <_usb_ep0_on_setup+0x114>)
    aeb6:	447b      	add	r3, pc
    aeb8:	2200      	movs	r2, #0
    aeba:	801a      	strh	r2, [r3, #0]
			udd_ep_control_state = UDD_EPCTRL_DATA_IN;
    aebc:	4b24      	ldr	r3, [pc, #144]	; (af50 <_usb_ep0_on_setup+0x118>)
    aebe:	447b      	add	r3, pc
    aec0:	2202      	movs	r2, #2
    aec2:	701a      	strb	r2, [r3, #0]
			usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    aec4:	4b23      	ldr	r3, [pc, #140]	; (af54 <_usb_ep0_on_setup+0x11c>)
    aec6:	58e3      	ldr	r3, [r4, r3]
    aec8:	001a      	movs	r2, r3
    aeca:	4b23      	ldr	r3, [pc, #140]	; (af58 <_usb_ep0_on_setup+0x120>)
    aecc:	58e3      	ldr	r3, [r4, r3]
    aece:	0018      	movs	r0, r3
    aed0:	2340      	movs	r3, #64	; 0x40
    aed2:	2100      	movs	r1, #0
    aed4:	4d21      	ldr	r5, [pc, #132]	; (af5c <_usb_ep0_on_setup+0x124>)
    aed6:	5964      	ldr	r4, [r4, r5]
    aed8:	47a0      	blx	r4
			udd_ctrl_in_sent();
    aeda:	4b21      	ldr	r3, [pc, #132]	; (af60 <_usb_ep0_on_setup+0x128>)
    aedc:	447b      	add	r3, pc
    aede:	4798      	blx	r3
    aee0:	e01f      	b.n	af22 <_usb_ep0_on_setup+0xea>
		} else {
			if(0 == udd_g_ctrlreq.req.wLength) {
    aee2:	4b13      	ldr	r3, [pc, #76]	; (af30 <_usb_ep0_on_setup+0xf8>)
    aee4:	58e3      	ldr	r3, [r4, r3]
    aee6:	88db      	ldrh	r3, [r3, #6]
    aee8:	2b00      	cmp	r3, #0
    aeea:	d103      	bne.n	aef4 <_usb_ep0_on_setup+0xbc>
				udd_ctrl_send_zlp_in();
    aeec:	4b1d      	ldr	r3, [pc, #116]	; (af64 <_usb_ep0_on_setup+0x12c>)
    aeee:	447b      	add	r3, pc
    aef0:	4798      	blx	r3
				return;
    aef2:	e016      	b.n	af22 <_usb_ep0_on_setup+0xea>
			} else {
				udd_ctrl_prev_payload_nb_trans = 0;
    aef4:	4b1c      	ldr	r3, [pc, #112]	; (af68 <_usb_ep0_on_setup+0x130>)
    aef6:	447b      	add	r3, pc
    aef8:	2200      	movs	r2, #0
    aefa:	801a      	strh	r2, [r3, #0]
				udd_ctrl_payload_nb_trans = 0;
    aefc:	4b1b      	ldr	r3, [pc, #108]	; (af6c <_usb_ep0_on_setup+0x134>)
    aefe:	447b      	add	r3, pc
    af00:	2200      	movs	r2, #0
    af02:	801a      	strh	r2, [r3, #0]
				udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
    af04:	4b1a      	ldr	r3, [pc, #104]	; (af70 <_usb_ep0_on_setup+0x138>)
    af06:	447b      	add	r3, pc
    af08:	2201      	movs	r2, #1
    af0a:	701a      	strb	r2, [r3, #0]
				/* Initialize buffer size and enable OUT bank */
				usb_device_endpoint_read_buffer_job(&usb_device,0,udd_ctrl_buffer,USB_DEVICE_EP_CTRL_SIZE);
    af0c:	4b11      	ldr	r3, [pc, #68]	; (af54 <_usb_ep0_on_setup+0x11c>)
    af0e:	58e3      	ldr	r3, [r4, r3]
    af10:	001a      	movs	r2, r3
    af12:	4b11      	ldr	r3, [pc, #68]	; (af58 <_usb_ep0_on_setup+0x120>)
    af14:	58e3      	ldr	r3, [r4, r3]
    af16:	0018      	movs	r0, r3
    af18:	2340      	movs	r3, #64	; 0x40
    af1a:	2100      	movs	r1, #0
    af1c:	4d0f      	ldr	r5, [pc, #60]	; (af5c <_usb_ep0_on_setup+0x124>)
    af1e:	5964      	ldr	r4, [r4, r5]
    af20:	47a0      	blx	r4
			}
		}
	}
}
    af22:	46bd      	mov	sp, r7
    af24:	b004      	add	sp, #16
    af26:	bdb0      	pop	{r4, r5, r7, pc}
    af28:	000045ec 	.word	0x000045ec
    af2c:	1fff5560 	.word	0x1fff5560
    af30:	00000208 	.word	0x00000208
    af34:	1fff5544 	.word	0x1fff5544
    af38:	fffff7b5 	.word	0xfffff7b5
    af3c:	fffffba1 	.word	0xfffffba1
    af40:	0000015c 	.word	0x0000015c
    af44:	fffff793 	.word	0xfffff793
    af48:	1fff5500 	.word	0x1fff5500
    af4c:	1fff54fa 	.word	0x1fff54fa
    af50:	1fff54ee 	.word	0x1fff54ee
    af54:	000002e4 	.word	0x000002e4
    af58:	000000ac 	.word	0x000000ac
    af5c:	00000168 	.word	0x00000168
    af60:	fffffc31 	.word	0xfffffc31
    af64:	fffffbc3 	.word	0xfffffbc3
    af68:	1fff54b8 	.word	0x1fff54b8
    af6c:	1fff54b2 	.word	0x1fff54b2
    af70:	1fff54a6 	.word	0x1fff54a6

0000af74 <udd_ctrl_underflow>:
/**
 * \brief Control Endpoint Process when underflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_underflow(void* pointer)
{
    af74:	b580      	push	{r7, lr}
    af76:	b084      	sub	sp, #16
    af78:	af00      	add	r7, sp, #0
    af7a:	6078      	str	r0, [r7, #4]
    af7c:	4b0e      	ldr	r3, [pc, #56]	; (afb8 <udd_ctrl_underflow+0x44>)
    af7e:	447b      	add	r3, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    af80:	687a      	ldr	r2, [r7, #4]
    af82:	60fa      	str	r2, [r7, #12]

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
    af84:	4a0d      	ldr	r2, [pc, #52]	; (afbc <udd_ctrl_underflow+0x48>)
    af86:	447a      	add	r2, pc
    af88:	7812      	ldrb	r2, [r2, #0]
    af8a:	2a01      	cmp	r2, #1
    af8c:	d103      	bne.n	af96 <udd_ctrl_underflow+0x22>
		/* Host want to stop OUT transaction
		 * then stop to wait OUT data phase and wait IN ZLP handshake */
		udd_ctrl_send_zlp_in();
    af8e:	4b0c      	ldr	r3, [pc, #48]	; (afc0 <udd_ctrl_underflow+0x4c>)
    af90:	447b      	add	r3, pc
    af92:	4798      	blx	r3
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
		/* A OUT handshake is waiting by device,
		 * but host want extra IN data then stall extra IN data */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    af94:	e00c      	b.n	afb0 <udd_ctrl_underflow+0x3c>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
    af96:	4a0b      	ldr	r2, [pc, #44]	; (afc4 <udd_ctrl_underflow+0x50>)
    af98:	447a      	add	r2, pc
    af9a:	7812      	ldrb	r2, [r2, #0]
    af9c:	2a04      	cmp	r2, #4
    af9e:	d107      	bne.n	afb0 <udd_ctrl_underflow+0x3c>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    afa0:	68fa      	ldr	r2, [r7, #12]
    afa2:	7991      	ldrb	r1, [r2, #6]
    afa4:	4a08      	ldr	r2, [pc, #32]	; (afc8 <udd_ctrl_underflow+0x54>)
    afa6:	589a      	ldr	r2, [r3, r2]
    afa8:	0010      	movs	r0, r2
    afaa:	4a08      	ldr	r2, [pc, #32]	; (afcc <udd_ctrl_underflow+0x58>)
    afac:	589b      	ldr	r3, [r3, r2]
    afae:	4798      	blx	r3
}
    afb0:	46c0      	nop			; (mov r8, r8)
    afb2:	46bd      	mov	sp, r7
    afb4:	b004      	add	sp, #16
    afb6:	bd80      	pop	{r7, pc}
    afb8:	000044b2 	.word	0x000044b2
    afbc:	1fff5426 	.word	0x1fff5426
    afc0:	fffffb21 	.word	0xfffffb21
    afc4:	1fff5414 	.word	0x1fff5414
    afc8:	000000ac 	.word	0x000000ac
    afcc:	00000298 	.word	0x00000298

0000afd0 <udd_ctrl_overflow>:
/**
 * \brief Control Endpoint Process when overflow condition has occurred
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void udd_ctrl_overflow(void* pointer)
{
    afd0:	b580      	push	{r7, lr}
    afd2:	b084      	sub	sp, #16
    afd4:	af00      	add	r7, sp, #0
    afd6:	6078      	str	r0, [r7, #4]
    afd8:	4b0f      	ldr	r3, [pc, #60]	; (b018 <udd_ctrl_overflow+0x48>)
    afda:	447b      	add	r3, pc
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    afdc:	687a      	ldr	r2, [r7, #4]
    afde:	60fa      	str	r2, [r7, #12]

	if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) {
    afe0:	4a0e      	ldr	r2, [pc, #56]	; (b01c <udd_ctrl_overflow+0x4c>)
    afe2:	447a      	add	r2, pc
    afe4:	7812      	ldrb	r2, [r2, #0]
    afe6:	2a02      	cmp	r2, #2
    afe8:	d104      	bne.n	aff4 <udd_ctrl_overflow+0x24>
		/* Host want to stop IN transaction
		 * then stop to wait IN data phase and wait OUT ZLP handshake */
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
    afea:	4b0d      	ldr	r3, [pc, #52]	; (b020 <udd_ctrl_overflow+0x50>)
    afec:	447b      	add	r3, pc
    afee:	2204      	movs	r2, #4
    aff0:	701a      	strb	r2, [r3, #0]
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
		/* A IN handshake is waiting by device,
		 * but host want extra OUT data then stall extra OUT data and following status stage */
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
	}
}
    aff2:	e00c      	b.n	b00e <udd_ctrl_overflow+0x3e>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
    aff4:	4a0b      	ldr	r2, [pc, #44]	; (b024 <udd_ctrl_overflow+0x54>)
    aff6:	447a      	add	r2, pc
    aff8:	7812      	ldrb	r2, [r2, #0]
    affa:	2a03      	cmp	r2, #3
    affc:	d107      	bne.n	b00e <udd_ctrl_overflow+0x3e>
		usb_device_endpoint_set_halt(&usb_device, ep_callback_para->endpoint_address);
    affe:	68fa      	ldr	r2, [r7, #12]
    b000:	7991      	ldrb	r1, [r2, #6]
    b002:	4a09      	ldr	r2, [pc, #36]	; (b028 <udd_ctrl_overflow+0x58>)
    b004:	589a      	ldr	r2, [r3, r2]
    b006:	0010      	movs	r0, r2
    b008:	4a08      	ldr	r2, [pc, #32]	; (b02c <udd_ctrl_overflow+0x5c>)
    b00a:	589b      	ldr	r3, [r3, r2]
    b00c:	4798      	blx	r3
}
    b00e:	46c0      	nop			; (mov r8, r8)
    b010:	46bd      	mov	sp, r7
    b012:	b004      	add	sp, #16
    b014:	bd80      	pop	{r7, pc}
    b016:	46c0      	nop			; (mov r8, r8)
    b018:	00004456 	.word	0x00004456
    b01c:	1fff53ca 	.word	0x1fff53ca
    b020:	1fff53c0 	.word	0x1fff53c0
    b024:	1fff53b6 	.word	0x1fff53b6
    b028:	000000ac 	.word	0x000000ac
    b02c:	00000298 	.word	0x00000298

0000b030 <_usb_ep0_on_tansfer_fail>:
 * \brief Control endpoint transfer fail callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_fail(struct usb_module *module_inst, void* pointer)
{
    b030:	b580      	push	{r7, lr}
    b032:	b084      	sub	sp, #16
    b034:	af00      	add	r7, sp, #0
    b036:	6078      	str	r0, [r7, #4]
    b038:	6039      	str	r1, [r7, #0]
	struct usb_endpoint_callback_parameter *ep_callback_para = (struct usb_endpoint_callback_parameter*)pointer;
    b03a:	683b      	ldr	r3, [r7, #0]
    b03c:	60fb      	str	r3, [r7, #12]

	if(ep_callback_para->endpoint_address & USB_EP_DIR_IN) {
    b03e:	68fb      	ldr	r3, [r7, #12]
    b040:	799b      	ldrb	r3, [r3, #6]
    b042:	b25b      	sxtb	r3, r3
    b044:	2b00      	cmp	r3, #0
    b046:	da05      	bge.n	b054 <_usb_ep0_on_tansfer_fail+0x24>
		udd_ctrl_underflow(pointer);
    b048:	683b      	ldr	r3, [r7, #0]
    b04a:	0018      	movs	r0, r3
    b04c:	4b06      	ldr	r3, [pc, #24]	; (b068 <_usb_ep0_on_tansfer_fail+0x38>)
    b04e:	447b      	add	r3, pc
    b050:	4798      	blx	r3
	} else {
		udd_ctrl_overflow(pointer);
	}
}
    b052:	e004      	b.n	b05e <_usb_ep0_on_tansfer_fail+0x2e>
		udd_ctrl_overflow(pointer);
    b054:	683b      	ldr	r3, [r7, #0]
    b056:	0018      	movs	r0, r3
    b058:	4b04      	ldr	r3, [pc, #16]	; (b06c <_usb_ep0_on_tansfer_fail+0x3c>)
    b05a:	447b      	add	r3, pc
    b05c:	4798      	blx	r3
}
    b05e:	46c0      	nop			; (mov r8, r8)
    b060:	46bd      	mov	sp, r7
    b062:	b004      	add	sp, #16
    b064:	bd80      	pop	{r7, pc}
    b066:	46c0      	nop			; (mov r8, r8)
    b068:	ffffff23 	.word	0xffffff23
    b06c:	ffffff73 	.word	0xffffff73

0000b070 <_usb_ep0_on_tansfer_ok>:
 * \brief Control endpoint transfer complete callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the endpoint transfer status parameter struct from driver layer.
 */
static void _usb_ep0_on_tansfer_ok(struct usb_module *module_inst, void * pointer)
{
    b070:	b580      	push	{r7, lr}
    b072:	b082      	sub	sp, #8
    b074:	af00      	add	r7, sp, #0
    b076:	6078      	str	r0, [r7, #4]
    b078:	6039      	str	r1, [r7, #0]
    b07a:	4b13      	ldr	r3, [pc, #76]	; (b0c8 <_usb_ep0_on_tansfer_ok+0x58>)
    b07c:	447b      	add	r3, pc
		if (UDD_EPCTRL_DATA_OUT  == udd_ep_control_state) { /* handshake Out for status stage */
    b07e:	4a13      	ldr	r2, [pc, #76]	; (b0cc <_usb_ep0_on_tansfer_ok+0x5c>)
    b080:	447a      	add	r2, pc
    b082:	7812      	ldrb	r2, [r2, #0]
    b084:	2a01      	cmp	r2, #1
    b086:	d105      	bne.n	b094 <_usb_ep0_on_tansfer_ok+0x24>
			udd_ctrl_out_received(pointer);
    b088:	683b      	ldr	r3, [r7, #0]
    b08a:	0018      	movs	r0, r3
    b08c:	4b10      	ldr	r3, [pc, #64]	; (b0d0 <_usb_ep0_on_tansfer_ok+0x60>)
    b08e:	447b      	add	r3, pc
    b090:	4798      	blx	r3
			if (NULL != udd_g_ctrlreq.callback) {
				udd_g_ctrlreq.callback();
			}
			udd_ep_control_state = UDD_EPCTRL_SETUP;
		}
}
    b092:	e015      	b.n	b0c0 <_usb_ep0_on_tansfer_ok+0x50>
		} else if (UDD_EPCTRL_DATA_IN == udd_ep_control_state) { /* handshake In for status stage */
    b094:	4a0f      	ldr	r2, [pc, #60]	; (b0d4 <_usb_ep0_on_tansfer_ok+0x64>)
    b096:	447a      	add	r2, pc
    b098:	7812      	ldrb	r2, [r2, #0]
    b09a:	2a02      	cmp	r2, #2
    b09c:	d103      	bne.n	b0a6 <_usb_ep0_on_tansfer_ok+0x36>
			udd_ctrl_in_sent();
    b09e:	4b0e      	ldr	r3, [pc, #56]	; (b0d8 <_usb_ep0_on_tansfer_ok+0x68>)
    b0a0:	447b      	add	r3, pc
    b0a2:	4798      	blx	r3
}
    b0a4:	e00c      	b.n	b0c0 <_usb_ep0_on_tansfer_ok+0x50>
			if (NULL != udd_g_ctrlreq.callback) {
    b0a6:	4a0d      	ldr	r2, [pc, #52]	; (b0dc <_usb_ep0_on_tansfer_ok+0x6c>)
    b0a8:	589a      	ldr	r2, [r3, r2]
    b0aa:	6912      	ldr	r2, [r2, #16]
    b0ac:	2a00      	cmp	r2, #0
    b0ae:	d003      	beq.n	b0b8 <_usb_ep0_on_tansfer_ok+0x48>
				udd_g_ctrlreq.callback();
    b0b0:	4a0a      	ldr	r2, [pc, #40]	; (b0dc <_usb_ep0_on_tansfer_ok+0x6c>)
    b0b2:	589b      	ldr	r3, [r3, r2]
    b0b4:	691b      	ldr	r3, [r3, #16]
    b0b6:	4798      	blx	r3
			udd_ep_control_state = UDD_EPCTRL_SETUP;
    b0b8:	4b09      	ldr	r3, [pc, #36]	; (b0e0 <_usb_ep0_on_tansfer_ok+0x70>)
    b0ba:	447b      	add	r3, pc
    b0bc:	2200      	movs	r2, #0
    b0be:	701a      	strb	r2, [r3, #0]
}
    b0c0:	46c0      	nop			; (mov r8, r8)
    b0c2:	46bd      	mov	sp, r7
    b0c4:	b002      	add	sp, #8
    b0c6:	bd80      	pop	{r7, pc}
    b0c8:	000043b4 	.word	0x000043b4
    b0cc:	1fff532c 	.word	0x1fff532c
    b0d0:	fffffbcb 	.word	0xfffffbcb
    b0d4:	1fff5316 	.word	0x1fff5316
    b0d8:	fffffa6d 	.word	0xfffffa6d
    b0dc:	00000208 	.word	0x00000208
    b0e0:	1fff52f2 	.word	0x1fff52f2

0000b0e4 <udd_ctrl_ep_enable>:
/**
 * \brief Enable Control Endpoint
 * \param[in] module_inst Pointer to USB module instance
 */
static void udd_ctrl_ep_enable(struct usb_module *module_inst)
{
    b0e4:	b5b0      	push	{r4, r5, r7, lr}
    b0e6:	b084      	sub	sp, #16
    b0e8:	af00      	add	r7, sp, #0
    b0ea:	6078      	str	r0, [r7, #4]
    b0ec:	4c2b      	ldr	r4, [pc, #172]	; (b19c <udd_ctrl_ep_enable+0xb8>)
    b0ee:	447c      	add	r4, pc
	/* USB Device Endpoint0 Configuration */
	 struct usb_device_endpoint_config config_ep0;

	 usb_device_endpoint_get_config_defaults(&config_ep0);
    b0f0:	230c      	movs	r3, #12
    b0f2:	18fb      	adds	r3, r7, r3
    b0f4:	0018      	movs	r0, r3
    b0f6:	4b2a      	ldr	r3, [pc, #168]	; (b1a0 <udd_ctrl_ep_enable+0xbc>)
    b0f8:	58e3      	ldr	r3, [r4, r3]
    b0fa:	4798      	blx	r3
	 config_ep0.ep_size = (enum usb_endpoint_size)(32 - clz(((uint32_t)Min(Max(USB_DEVICE_EP_CTRL_SIZE, 8), 1024) << 1) - 1) - 1 - 3);
    b0fc:	230c      	movs	r3, #12
    b0fe:	18fb      	adds	r3, r7, r3
    b100:	2203      	movs	r2, #3
    b102:	705a      	strb	r2, [r3, #1]
	 usb_device_endpoint_set_config(module_inst,&config_ep0);
    b104:	230c      	movs	r3, #12
    b106:	18fa      	adds	r2, r7, r3
    b108:	687b      	ldr	r3, [r7, #4]
    b10a:	0011      	movs	r1, r2
    b10c:	0018      	movs	r0, r3
    b10e:	4b25      	ldr	r3, [pc, #148]	; (b1a4 <udd_ctrl_ep_enable+0xc0>)
    b110:	58e3      	ldr	r3, [r4, r3]
    b112:	4798      	blx	r3

	 usb_device_endpoint_setup_buffer_job(module_inst,udd_ctrl_buffer);
    b114:	4b24      	ldr	r3, [pc, #144]	; (b1a8 <udd_ctrl_ep_enable+0xc4>)
    b116:	58e3      	ldr	r3, [r4, r3]
    b118:	001a      	movs	r2, r3
    b11a:	687b      	ldr	r3, [r7, #4]
    b11c:	0011      	movs	r1, r2
    b11e:	0018      	movs	r0, r3
    b120:	4b22      	ldr	r3, [pc, #136]	; (b1ac <udd_ctrl_ep_enable+0xc8>)
    b122:	58e3      	ldr	r3, [r4, r3]
    b124:	4798      	blx	r3

	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP, _usb_ep0_on_setup );
    b126:	4b22      	ldr	r3, [pc, #136]	; (b1b0 <udd_ctrl_ep_enable+0xcc>)
    b128:	447b      	add	r3, pc
    b12a:	6878      	ldr	r0, [r7, #4]
    b12c:	2202      	movs	r2, #2
    b12e:	2100      	movs	r1, #0
    b130:	4d20      	ldr	r5, [pc, #128]	; (b1b4 <udd_ctrl_ep_enable+0xd0>)
    b132:	5965      	ldr	r5, [r4, r5]
    b134:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT,_usb_ep0_on_tansfer_ok );
    b136:	4b20      	ldr	r3, [pc, #128]	; (b1b8 <udd_ctrl_ep_enable+0xd4>)
    b138:	447b      	add	r3, pc
    b13a:	6878      	ldr	r0, [r7, #4]
    b13c:	2200      	movs	r2, #0
    b13e:	2100      	movs	r1, #0
    b140:	4d1c      	ldr	r5, [pc, #112]	; (b1b4 <udd_ctrl_ep_enable+0xd0>)
    b142:	5965      	ldr	r5, [r4, r5]
    b144:	47a8      	blx	r5
	 usb_device_endpoint_register_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL,_usb_ep0_on_tansfer_fail );
    b146:	4b1d      	ldr	r3, [pc, #116]	; (b1bc <udd_ctrl_ep_enable+0xd8>)
    b148:	447b      	add	r3, pc
    b14a:	6878      	ldr	r0, [r7, #4]
    b14c:	2201      	movs	r2, #1
    b14e:	2100      	movs	r1, #0
    b150:	4d18      	ldr	r5, [pc, #96]	; (b1b4 <udd_ctrl_ep_enable+0xd0>)
    b152:	5965      	ldr	r5, [r4, r5]
    b154:	47a8      	blx	r5
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_RXSTP);
    b156:	687b      	ldr	r3, [r7, #4]
    b158:	2202      	movs	r2, #2
    b15a:	2100      	movs	r1, #0
    b15c:	0018      	movs	r0, r3
    b15e:	4b18      	ldr	r3, [pc, #96]	; (b1c0 <udd_ctrl_ep_enable+0xdc>)
    b160:	58e3      	ldr	r3, [r4, r3]
    b162:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRCPT);
    b164:	687b      	ldr	r3, [r7, #4]
    b166:	2200      	movs	r2, #0
    b168:	2100      	movs	r1, #0
    b16a:	0018      	movs	r0, r3
    b16c:	4b14      	ldr	r3, [pc, #80]	; (b1c0 <udd_ctrl_ep_enable+0xdc>)
    b16e:	58e3      	ldr	r3, [r4, r3]
    b170:	4798      	blx	r3
	 usb_device_endpoint_enable_callback(module_inst,0,USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL);
    b172:	687b      	ldr	r3, [r7, #4]
    b174:	2201      	movs	r2, #1
    b176:	2100      	movs	r1, #0
    b178:	0018      	movs	r0, r3
    b17a:	4b11      	ldr	r3, [pc, #68]	; (b1c0 <udd_ctrl_ep_enable+0xdc>)
    b17c:	58e3      	ldr	r3, [r4, r3]
    b17e:	4798      	blx	r3

#ifdef  USB_DEVICE_LPM_SUPPORT
	 // Enable LPM feature
	 usb_device_set_lpm_mode(module_inst, USB_DEVICE_LPM_ACK);
    b180:	687b      	ldr	r3, [r7, #4]
    b182:	2101      	movs	r1, #1
    b184:	0018      	movs	r0, r3
    b186:	4b0f      	ldr	r3, [pc, #60]	; (b1c4 <udd_ctrl_ep_enable+0xe0>)
    b188:	447b      	add	r3, pc
    b18a:	4798      	blx	r3
#endif

	 udd_ep_control_state = UDD_EPCTRL_SETUP;
    b18c:	4b0e      	ldr	r3, [pc, #56]	; (b1c8 <udd_ctrl_ep_enable+0xe4>)
    b18e:	447b      	add	r3, pc
    b190:	2200      	movs	r2, #0
    b192:	701a      	strb	r2, [r3, #0]
}
    b194:	46c0      	nop			; (mov r8, r8)
    b196:	46bd      	mov	sp, r7
    b198:	b004      	add	sp, #16
    b19a:	bdb0      	pop	{r4, r5, r7, pc}
    b19c:	00004342 	.word	0x00004342
    b1a0:	00000128 	.word	0x00000128
    b1a4:	0000009c 	.word	0x0000009c
    b1a8:	000002e4 	.word	0x000002e4
    b1ac:	000000e8 	.word	0x000000e8
    b1b0:	fffffd0d 	.word	0xfffffd0d
    b1b4:	00000178 	.word	0x00000178
    b1b8:	ffffff35 	.word	0xffffff35
    b1bc:	fffffee5 	.word	0xfffffee5
    b1c0:	000002cc 	.word	0x000002cc
    b1c4:	ffffea11 	.word	0xffffea11
    b1c8:	1fff521e 	.word	0x1fff521e

0000b1cc <_usb_on_suspend>:
 * \brief Control endpoint Suspend callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_suspend(struct usb_module *module_inst, void *pointer)
{
    b1cc:	b590      	push	{r4, r7, lr}
    b1ce:	b083      	sub	sp, #12
    b1d0:	af00      	add	r7, sp, #0
    b1d2:	6078      	str	r0, [r7, #4]
    b1d4:	6039      	str	r1, [r7, #0]
    b1d6:	4c0c      	ldr	r4, [pc, #48]	; (b208 <_usb_on_suspend+0x3c>)
    b1d8:	447c      	add	r4, pc
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    b1da:	4b0c      	ldr	r3, [pc, #48]	; (b20c <_usb_on_suspend+0x40>)
    b1dc:	58e3      	ldr	r3, [r4, r3]
    b1de:	2104      	movs	r1, #4
    b1e0:	0018      	movs	r0, r3
    b1e2:	4b0b      	ldr	r3, [pc, #44]	; (b210 <_usb_on_suspend+0x44>)
    b1e4:	58e3      	ldr	r3, [r4, r3]
    b1e6:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    b1e8:	4b08      	ldr	r3, [pc, #32]	; (b20c <_usb_on_suspend+0x40>)
    b1ea:	58e3      	ldr	r3, [r4, r3]
    b1ec:	2102      	movs	r1, #2
    b1ee:	0018      	movs	r0, r3
    b1f0:	4b08      	ldr	r3, [pc, #32]	; (b214 <_usb_on_suspend+0x48>)
    b1f2:	58e3      	ldr	r3, [r4, r3]
    b1f4:	4798      	blx	r3
	udd_sleep_mode(UDD_STATE_SUSPEND);
    b1f6:	2001      	movs	r0, #1
    b1f8:	4b07      	ldr	r3, [pc, #28]	; (b218 <_usb_on_suspend+0x4c>)
    b1fa:	447b      	add	r3, pc
    b1fc:	4798      	blx	r3
#ifdef UDC_SUSPEND_EVENT
	UDC_SUSPEND_EVENT();
#endif
}
    b1fe:	46c0      	nop			; (mov r8, r8)
    b200:	46bd      	mov	sp, r7
    b202:	b003      	add	sp, #12
    b204:	bd90      	pop	{r4, r7, pc}
    b206:	46c0      	nop			; (mov r8, r8)
    b208:	00004258 	.word	0x00004258
    b20c:	000000ac 	.word	0x000000ac
    b210:	00000078 	.word	0x00000078
    b214:	000001a0 	.word	0x000001a0
    b218:	ffffeadb 	.word	0xffffeadb

0000b21c <_usb_device_lpm_suspend>:

#ifdef  USB_DEVICE_LPM_SUPPORT
static void _usb_device_lpm_suspend(struct usb_module *module_inst, void *pointer)
{
    b21c:	b590      	push	{r4, r7, lr}
    b21e:	b085      	sub	sp, #20
    b220:	af00      	add	r7, sp, #0
    b222:	6078      	str	r0, [r7, #4]
    b224:	6039      	str	r1, [r7, #0]
    b226:	4c10      	ldr	r4, [pc, #64]	; (b268 <_usb_device_lpm_suspend+0x4c>)
    b228:	447c      	add	r4, pc
	dbg_print("LPM_SUSP\n");

	uint32_t *lpm_wakeup_enable;
	lpm_wakeup_enable = (uint32_t *)pointer;
    b22a:	683b      	ldr	r3, [r7, #0]
    b22c:	60fb      	str	r3, [r7, #12]

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    b22e:	4b0f      	ldr	r3, [pc, #60]	; (b26c <_usb_device_lpm_suspend+0x50>)
    b230:	58e3      	ldr	r3, [r4, r3]
    b232:	2106      	movs	r1, #6
    b234:	0018      	movs	r0, r3
    b236:	4b0e      	ldr	r3, [pc, #56]	; (b270 <_usb_device_lpm_suspend+0x54>)
    b238:	58e3      	ldr	r3, [r4, r3]
    b23a:	4798      	blx	r3
	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    b23c:	4b0b      	ldr	r3, [pc, #44]	; (b26c <_usb_device_lpm_suspend+0x50>)
    b23e:	58e3      	ldr	r3, [r4, r3]
    b240:	2104      	movs	r1, #4
    b242:	0018      	movs	r0, r3
    b244:	4b0a      	ldr	r3, [pc, #40]	; (b270 <_usb_device_lpm_suspend+0x54>)
    b246:	58e3      	ldr	r3, [r4, r3]
    b248:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    b24a:	4b08      	ldr	r3, [pc, #32]	; (b26c <_usb_device_lpm_suspend+0x50>)
    b24c:	58e3      	ldr	r3, [r4, r3]
    b24e:	2102      	movs	r1, #2
    b250:	0018      	movs	r0, r3
    b252:	4b08      	ldr	r3, [pc, #32]	; (b274 <_usb_device_lpm_suspend+0x58>)
    b254:	58e3      	ldr	r3, [r4, r3]
    b256:	4798      	blx	r3

//#warning Here the sleep mode must be choose to have a DFLL startup time < bmAttribut.HIRD
	udd_sleep_mode(UDD_STATE_SUSPEND_LPM);  // Enter in LPM SUSPEND mode
    b258:	2002      	movs	r0, #2
    b25a:	4b07      	ldr	r3, [pc, #28]	; (b278 <_usb_device_lpm_suspend+0x5c>)
    b25c:	447b      	add	r3, pc
    b25e:	4798      	blx	r3
	}
	if (!(*lpm_wakeup_enable)) {
		UDC_REMOTEWAKEUP_LPM_DISABLE();
	}
	UDC_SUSPEND_LPM_EVENT();
}
    b260:	46c0      	nop			; (mov r8, r8)
    b262:	46bd      	mov	sp, r7
    b264:	b005      	add	sp, #20
    b266:	bd90      	pop	{r4, r7, pc}
    b268:	00004208 	.word	0x00004208
    b26c:	000000ac 	.word	0x000000ac
    b270:	00000078 	.word	0x00000078
    b274:	000001a0 	.word	0x000001a0
    b278:	ffffea79 	.word	0xffffea79

0000b27c <_usb_on_sof_notify>:
 * \brief Control endpoint SOF callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_sof_notify(struct usb_module *module_inst, void *pointer)
{
    b27c:	b580      	push	{r7, lr}
    b27e:	b082      	sub	sp, #8
    b280:	af00      	add	r7, sp, #0
    b282:	6078      	str	r0, [r7, #4]
    b284:	6039      	str	r1, [r7, #0]
    b286:	4a04      	ldr	r2, [pc, #16]	; (b298 <_usb_on_sof_notify+0x1c>)
    b288:	447a      	add	r2, pc
	udc_sof_notify();
    b28a:	4b04      	ldr	r3, [pc, #16]	; (b29c <_usb_on_sof_notify+0x20>)
    b28c:	58d3      	ldr	r3, [r2, r3]
    b28e:	4798      	blx	r3
#ifdef UDC_SOF_EVENT
	UDC_SOF_EVENT();
#endif
}
    b290:	46c0      	nop			; (mov r8, r8)
    b292:	46bd      	mov	sp, r7
    b294:	b002      	add	sp, #8
    b296:	bd80      	pop	{r7, pc}
    b298:	000041a8 	.word	0x000041a8
    b29c:	000001b4 	.word	0x000001b4

0000b2a0 <_usb_on_bus_reset>:
 * \brief Control endpoint Reset callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_bus_reset(struct usb_module *module_inst, void *pointer)
{
    b2a0:	b580      	push	{r7, lr}
    b2a2:	b082      	sub	sp, #8
    b2a4:	af00      	add	r7, sp, #0
    b2a6:	6078      	str	r0, [r7, #4]
    b2a8:	6039      	str	r1, [r7, #0]
    b2aa:	4a0a      	ldr	r2, [pc, #40]	; (b2d4 <_usb_on_bus_reset+0x34>)
    b2ac:	447a      	add	r2, pc
	// Reset USB Device Stack Core
	udc_reset();
    b2ae:	4b0a      	ldr	r3, [pc, #40]	; (b2d8 <_usb_on_bus_reset+0x38>)
    b2b0:	58d3      	ldr	r3, [r2, r3]
    b2b2:	4798      	blx	r3
	usb_device_set_address(module_inst,0);
    b2b4:	687b      	ldr	r3, [r7, #4]
    b2b6:	2100      	movs	r1, #0
    b2b8:	0018      	movs	r0, r3
    b2ba:	4b08      	ldr	r3, [pc, #32]	; (b2dc <_usb_on_bus_reset+0x3c>)
    b2bc:	447b      	add	r3, pc
    b2be:	4798      	blx	r3
	udd_ctrl_ep_enable(module_inst);
    b2c0:	687b      	ldr	r3, [r7, #4]
    b2c2:	0018      	movs	r0, r3
    b2c4:	4b06      	ldr	r3, [pc, #24]	; (b2e0 <_usb_on_bus_reset+0x40>)
    b2c6:	447b      	add	r3, pc
    b2c8:	4798      	blx	r3
}
    b2ca:	46c0      	nop			; (mov r8, r8)
    b2cc:	46bd      	mov	sp, r7
    b2ce:	b002      	add	sp, #8
    b2d0:	bd80      	pop	{r7, pc}
    b2d2:	46c0      	nop			; (mov r8, r8)
    b2d4:	00004184 	.word	0x00004184
    b2d8:	000000c8 	.word	0x000000c8
    b2dc:	ffffe881 	.word	0xffffe881
    b2e0:	fffffe1b 	.word	0xfffffe1b

0000b2e4 <_usb_on_wakeup>:
 * \brief Control endpoint Wakeup callback function
 * \param[in] module_inst Pointer to USB module instance
 * \param[in] pointer Pointer to the callback parameter from driver layer.
 */
static void _usb_on_wakeup(struct usb_module *module_inst, void *pointer)
{
    b2e4:	b590      	push	{r4, r7, lr}
    b2e6:	b083      	sub	sp, #12
    b2e8:	af00      	add	r7, sp, #0
    b2ea:	6078      	str	r0, [r7, #4]
    b2ec:	6039      	str	r1, [r7, #0]
    b2ee:	4c16      	ldr	r4, [pc, #88]	; (b348 <_usb_on_wakeup+0x64>)
    b2f0:	447c      	add	r4, pc
	udd_wait_clock_ready();
    b2f2:	4b16      	ldr	r3, [pc, #88]	; (b34c <_usb_on_wakeup+0x68>)
    b2f4:	447b      	add	r3, pc
    b2f6:	4798      	blx	r3

	usb_device_disable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    b2f8:	4b15      	ldr	r3, [pc, #84]	; (b350 <_usb_on_wakeup+0x6c>)
    b2fa:	58e3      	ldr	r3, [r4, r3]
    b2fc:	2102      	movs	r1, #2
    b2fe:	0018      	movs	r0, r3
    b300:	4b14      	ldr	r3, [pc, #80]	; (b354 <_usb_on_wakeup+0x70>)
    b302:	58e3      	ldr	r3, [r4, r3]
    b304:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    b306:	4b12      	ldr	r3, [pc, #72]	; (b350 <_usb_on_wakeup+0x6c>)
    b308:	58e3      	ldr	r3, [r4, r3]
    b30a:	2104      	movs	r1, #4
    b30c:	0018      	movs	r0, r3
    b30e:	4b12      	ldr	r3, [pc, #72]	; (b358 <_usb_on_wakeup+0x74>)
    b310:	58e3      	ldr	r3, [r4, r3]
    b312:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    b314:	4b11      	ldr	r3, [pc, #68]	; (b35c <_usb_on_wakeup+0x78>)
    b316:	447b      	add	r3, pc
    b318:	001a      	movs	r2, r3
    b31a:	4b0d      	ldr	r3, [pc, #52]	; (b350 <_usb_on_wakeup+0x6c>)
    b31c:	58e3      	ldr	r3, [r4, r3]
    b31e:	2106      	movs	r1, #6
    b320:	0018      	movs	r0, r3
    b322:	4b0f      	ldr	r3, [pc, #60]	; (b360 <_usb_on_wakeup+0x7c>)
    b324:	58e3      	ldr	r3, [r4, r3]
    b326:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    b328:	4b09      	ldr	r3, [pc, #36]	; (b350 <_usb_on_wakeup+0x6c>)
    b32a:	58e3      	ldr	r3, [r4, r3]
    b32c:	2106      	movs	r1, #6
    b32e:	0018      	movs	r0, r3
    b330:	4b09      	ldr	r3, [pc, #36]	; (b358 <_usb_on_wakeup+0x74>)
    b332:	58e3      	ldr	r3, [r4, r3]
    b334:	4798      	blx	r3
#endif
	udd_sleep_mode(UDD_STATE_IDLE);
    b336:	2003      	movs	r0, #3
    b338:	4b0a      	ldr	r3, [pc, #40]	; (b364 <_usb_on_wakeup+0x80>)
    b33a:	447b      	add	r3, pc
    b33c:	4798      	blx	r3
#ifdef UDC_RESUME_EVENT
	UDC_RESUME_EVENT();
#endif
}
    b33e:	46c0      	nop			; (mov r8, r8)
    b340:	46bd      	mov	sp, r7
    b342:	b003      	add	sp, #12
    b344:	bd90      	pop	{r4, r7, pc}
    b346:	46c0      	nop			; (mov r8, r8)
    b348:	00004140 	.word	0x00004140
    b34c:	ffffe9a5 	.word	0xffffe9a5
    b350:	000000ac 	.word	0x000000ac
    b354:	00000078 	.word	0x00000078
    b358:	000001a0 	.word	0x000001a0
    b35c:	ffffff03 	.word	0xffffff03
    b360:	0000005c 	.word	0x0000005c
    b364:	ffffe99b 	.word	0xffffe99b

0000b368 <udd_attach>:
	usb_device_detach(&usb_device);
	udd_sleep_mode(UDD_STATE_SUSPEND);
}

void udd_attach(void)
{
    b368:	b5b0      	push	{r4, r5, r7, lr}
    b36a:	af00      	add	r7, sp, #0
    b36c:	4c31      	ldr	r4, [pc, #196]	; (b434 <udd_attach+0xcc>)
    b36e:	447c      	add	r4, pc
	udd_sleep_mode(UDD_STATE_IDLE);
    b370:	2003      	movs	r0, #3
    b372:	4b31      	ldr	r3, [pc, #196]	; (b438 <udd_attach+0xd0>)
    b374:	447b      	add	r3, pc
    b376:	4798      	blx	r3
	usb_device_attach(&usb_device);
    b378:	4b30      	ldr	r3, [pc, #192]	; (b43c <udd_attach+0xd4>)
    b37a:	58e3      	ldr	r3, [r4, r3]
    b37c:	0018      	movs	r0, r3
    b37e:	4b30      	ldr	r3, [pc, #192]	; (b440 <udd_attach+0xd8>)
    b380:	447b      	add	r3, pc
    b382:	4798      	blx	r3

	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND, _usb_on_suspend);
    b384:	4b2f      	ldr	r3, [pc, #188]	; (b444 <udd_attach+0xdc>)
    b386:	447b      	add	r3, pc
    b388:	001a      	movs	r2, r3
    b38a:	4b2c      	ldr	r3, [pc, #176]	; (b43c <udd_attach+0xd4>)
    b38c:	58e3      	ldr	r3, [r4, r3]
    b38e:	2104      	movs	r1, #4
    b390:	0018      	movs	r0, r3
    b392:	4b2d      	ldr	r3, [pc, #180]	; (b448 <udd_attach+0xe0>)
    b394:	58e3      	ldr	r3, [r4, r3]
    b396:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_SOF, _usb_on_sof_notify);
    b398:	4b2c      	ldr	r3, [pc, #176]	; (b44c <udd_attach+0xe4>)
    b39a:	447b      	add	r3, pc
    b39c:	001a      	movs	r2, r3
    b39e:	4b27      	ldr	r3, [pc, #156]	; (b43c <udd_attach+0xd4>)
    b3a0:	58e3      	ldr	r3, [r4, r3]
    b3a2:	2100      	movs	r1, #0
    b3a4:	0018      	movs	r0, r3
    b3a6:	4b28      	ldr	r3, [pc, #160]	; (b448 <udd_attach+0xe0>)
    b3a8:	58e3      	ldr	r3, [r4, r3]
    b3aa:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_RESET, _usb_on_bus_reset);
    b3ac:	4b28      	ldr	r3, [pc, #160]	; (b450 <udd_attach+0xe8>)
    b3ae:	447b      	add	r3, pc
    b3b0:	001a      	movs	r2, r3
    b3b2:	4b22      	ldr	r3, [pc, #136]	; (b43c <udd_attach+0xd4>)
    b3b4:	58e3      	ldr	r3, [r4, r3]
    b3b6:	2101      	movs	r1, #1
    b3b8:	0018      	movs	r0, r3
    b3ba:	4b23      	ldr	r3, [pc, #140]	; (b448 <udd_attach+0xe0>)
    b3bc:	58e3      	ldr	r3, [r4, r3]
    b3be:	4798      	blx	r3
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP, _usb_on_wakeup);
    b3c0:	4b24      	ldr	r3, [pc, #144]	; (b454 <udd_attach+0xec>)
    b3c2:	447b      	add	r3, pc
    b3c4:	001a      	movs	r2, r3
    b3c6:	4b1d      	ldr	r3, [pc, #116]	; (b43c <udd_attach+0xd4>)
    b3c8:	58e3      	ldr	r3, [r4, r3]
    b3ca:	2102      	movs	r1, #2
    b3cc:	0018      	movs	r0, r3
    b3ce:	4b1e      	ldr	r3, [pc, #120]	; (b448 <udd_attach+0xe0>)
    b3d0:	58e3      	ldr	r3, [r4, r3]
    b3d2:	4798      	blx	r3

	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SUSPEND);
    b3d4:	4b19      	ldr	r3, [pc, #100]	; (b43c <udd_attach+0xd4>)
    b3d6:	58e3      	ldr	r3, [r4, r3]
    b3d8:	2104      	movs	r1, #4
    b3da:	0018      	movs	r0, r3
    b3dc:	4b1e      	ldr	r3, [pc, #120]	; (b458 <udd_attach+0xf0>)
    b3de:	58e3      	ldr	r3, [r4, r3]
    b3e0:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_SOF);
    b3e2:	4b16      	ldr	r3, [pc, #88]	; (b43c <udd_attach+0xd4>)
    b3e4:	58e3      	ldr	r3, [r4, r3]
    b3e6:	2100      	movs	r1, #0
    b3e8:	0018      	movs	r0, r3
    b3ea:	4b1b      	ldr	r3, [pc, #108]	; (b458 <udd_attach+0xf0>)
    b3ec:	58e3      	ldr	r3, [r4, r3]
    b3ee:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_RESET);
    b3f0:	4b12      	ldr	r3, [pc, #72]	; (b43c <udd_attach+0xd4>)
    b3f2:	58e3      	ldr	r3, [r4, r3]
    b3f4:	2101      	movs	r1, #1
    b3f6:	0018      	movs	r0, r3
    b3f8:	4b17      	ldr	r3, [pc, #92]	; (b458 <udd_attach+0xf0>)
    b3fa:	58e3      	ldr	r3, [r4, r3]
    b3fc:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_WAKEUP);
    b3fe:	4b0f      	ldr	r3, [pc, #60]	; (b43c <udd_attach+0xd4>)
    b400:	58e3      	ldr	r3, [r4, r3]
    b402:	2102      	movs	r1, #2
    b404:	0018      	movs	r0, r3
    b406:	4b14      	ldr	r3, [pc, #80]	; (b458 <udd_attach+0xf0>)
    b408:	58e3      	ldr	r3, [r4, r3]
    b40a:	4798      	blx	r3
#ifdef  USB_DEVICE_LPM_SUPPORT
	usb_device_register_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP, _usb_device_lpm_suspend);
    b40c:	4b13      	ldr	r3, [pc, #76]	; (b45c <udd_attach+0xf4>)
    b40e:	447b      	add	r3, pc
    b410:	001a      	movs	r2, r3
    b412:	4b0a      	ldr	r3, [pc, #40]	; (b43c <udd_attach+0xd4>)
    b414:	58e3      	ldr	r3, [r4, r3]
    b416:	2106      	movs	r1, #6
    b418:	0018      	movs	r0, r3
    b41a:	4b0b      	ldr	r3, [pc, #44]	; (b448 <udd_attach+0xe0>)
    b41c:	58e3      	ldr	r3, [r4, r3]
    b41e:	4798      	blx	r3
	usb_device_enable_callback(&usb_device, USB_DEVICE_CALLBACK_LPMSUSP);
    b420:	4b06      	ldr	r3, [pc, #24]	; (b43c <udd_attach+0xd4>)
    b422:	58e3      	ldr	r3, [r4, r3]
    b424:	2106      	movs	r1, #6
    b426:	0018      	movs	r0, r3
    b428:	4b0b      	ldr	r3, [pc, #44]	; (b458 <udd_attach+0xf0>)
    b42a:	58e3      	ldr	r3, [r4, r3]
    b42c:	4798      	blx	r3
#endif
}
    b42e:	46c0      	nop			; (mov r8, r8)
    b430:	46bd      	mov	sp, r7
    b432:	bdb0      	pop	{r4, r5, r7, pc}
    b434:	000040c2 	.word	0x000040c2
    b438:	ffffe961 	.word	0xffffe961
    b43c:	000000ac 	.word	0x000000ac
    b440:	ffffe77d 	.word	0xffffe77d
    b444:	fffffe43 	.word	0xfffffe43
    b448:	0000005c 	.word	0x0000005c
    b44c:	fffffedf 	.word	0xfffffedf
    b450:	fffffeef 	.word	0xfffffeef
    b454:	ffffff1f 	.word	0xffffff1f
    b458:	000001a0 	.word	0x000001a0
    b45c:	fffffe0b 	.word	0xfffffe0b

0000b460 <udd_enable>:
	return false;
#endif
}

void udd_enable(void)
{
    b460:	b590      	push	{r4, r7, lr}
    b462:	b083      	sub	sp, #12
    b464:	af00      	add	r7, sp, #0
    b466:	4c18      	ldr	r4, [pc, #96]	; (b4c8 <udd_enable+0x68>)
    b468:	447c      	add	r4, pc
	irqflags_t flags;

	/* To avoid USB interrupt before end of initialization */
	flags = cpu_irq_save();
    b46a:	4b18      	ldr	r3, [pc, #96]	; (b4cc <udd_enable+0x6c>)
    b46c:	447b      	add	r3, pc
    b46e:	4798      	blx	r3
    b470:	0003      	movs	r3, r0
    b472:	607b      	str	r3, [r7, #4]
	}
#endif
	struct usb_config config_usb;

	/* USB Module configuration */
	usb_get_config_defaults(&config_usb);
    b474:	003b      	movs	r3, r7
    b476:	0018      	movs	r0, r3
    b478:	4b15      	ldr	r3, [pc, #84]	; (b4d0 <udd_enable+0x70>)
    b47a:	58e3      	ldr	r3, [r4, r3]
    b47c:	4798      	blx	r3
	config_usb.source_generator = UDD_CLOCK_GEN;
    b47e:	003b      	movs	r3, r7
    b480:	2200      	movs	r2, #0
    b482:	709a      	strb	r2, [r3, #2]
	usb_init(&usb_device, USB, &config_usb);
    b484:	003a      	movs	r2, r7
    b486:	4913      	ldr	r1, [pc, #76]	; (b4d4 <udd_enable+0x74>)
    b488:	4b13      	ldr	r3, [pc, #76]	; (b4d8 <udd_enable+0x78>)
    b48a:	58e3      	ldr	r3, [r4, r3]
    b48c:	0018      	movs	r0, r3
    b48e:	4b13      	ldr	r3, [pc, #76]	; (b4dc <udd_enable+0x7c>)
    b490:	58e3      	ldr	r3, [r4, r3]
    b492:	4798      	blx	r3

	/* USB Module Enable */
	usb_enable(&usb_device);
    b494:	4b10      	ldr	r3, [pc, #64]	; (b4d8 <udd_enable+0x78>)
    b496:	58e3      	ldr	r3, [r4, r3]
    b498:	0018      	movs	r0, r3
    b49a:	4b11      	ldr	r3, [pc, #68]	; (b4e0 <udd_enable+0x80>)
    b49c:	58e3      	ldr	r3, [r4, r3]
    b49e:	4798      	blx	r3

	/* Check clock after enable module, request the clock */
	udd_wait_clock_ready();
    b4a0:	4b10      	ldr	r3, [pc, #64]	; (b4e4 <udd_enable+0x84>)
    b4a2:	447b      	add	r3, pc
    b4a4:	4798      	blx	r3

	udd_sleep_mode(UDD_STATE_SUSPEND);
    b4a6:	2001      	movs	r0, #1
    b4a8:	4b0f      	ldr	r3, [pc, #60]	; (b4e8 <udd_enable+0x88>)
    b4aa:	447b      	add	r3, pc
    b4ac:	4798      	blx	r3
		_uhd_vbus_handler();
	}
#else
	// No VBus detect, assume always high
# ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
    b4ae:	4b0f      	ldr	r3, [pc, #60]	; (b4ec <udd_enable+0x8c>)
    b4b0:	58e3      	ldr	r3, [r4, r3]
    b4b2:	4798      	blx	r3
# endif
#endif

	cpu_irq_restore(flags);
    b4b4:	687b      	ldr	r3, [r7, #4]
    b4b6:	0018      	movs	r0, r3
    b4b8:	4b0d      	ldr	r3, [pc, #52]	; (b4f0 <udd_enable+0x90>)
    b4ba:	447b      	add	r3, pc
    b4bc:	4798      	blx	r3
}
    b4be:	46c0      	nop			; (mov r8, r8)
    b4c0:	46bd      	mov	sp, r7
    b4c2:	b003      	add	sp, #12
    b4c4:	bd90      	pop	{r4, r7, pc}
    b4c6:	46c0      	nop			; (mov r8, r8)
    b4c8:	00003fc8 	.word	0x00003fc8
    b4cc:	ffffe601 	.word	0xffffe601
    b4d0:	000000d8 	.word	0x000000d8
    b4d4:	41005000 	.word	0x41005000
    b4d8:	000000ac 	.word	0x000000ac
    b4dc:	000000e0 	.word	0x000000e0
    b4e0:	0000030c 	.word	0x0000030c
    b4e4:	ffffe7f7 	.word	0xffffe7f7
    b4e8:	ffffe82b 	.word	0xffffe82b
    b4ec:	00000268 	.word	0x00000268
    b4f0:	ffffe607 	.word	0xffffe607

0000b4f4 <system_gclk_chan_get_config_defaults>:
{
    b4f4:	b580      	push	{r7, lr}
    b4f6:	b082      	sub	sp, #8
    b4f8:	af00      	add	r7, sp, #0
    b4fa:	6078      	str	r0, [r7, #4]
	config->source_generator = GCLK_GENERATOR_0;
    b4fc:	687b      	ldr	r3, [r7, #4]
    b4fe:	2200      	movs	r2, #0
    b500:	701a      	strb	r2, [r3, #0]
}
    b502:	46c0      	nop			; (mov r8, r8)
    b504:	46bd      	mov	sp, r7
    b506:	b002      	add	sp, #8
    b508:	bd80      	pop	{r7, pc}
	...

0000b50c <system_apb_clock_set_mask>:
{
    b50c:	b580      	push	{r7, lr}
    b50e:	b082      	sub	sp, #8
    b510:	af00      	add	r7, sp, #0
    b512:	0002      	movs	r2, r0
    b514:	6039      	str	r1, [r7, #0]
    b516:	1dfb      	adds	r3, r7, #7
    b518:	701a      	strb	r2, [r3, #0]
	switch (bus) {
    b51a:	1dfb      	adds	r3, r7, #7
    b51c:	781b      	ldrb	r3, [r3, #0]
    b51e:	2b01      	cmp	r3, #1
    b520:	d00a      	beq.n	b538 <system_apb_clock_set_mask+0x2c>
    b522:	2b02      	cmp	r3, #2
    b524:	d00f      	beq.n	b546 <system_apb_clock_set_mask+0x3a>
    b526:	2b00      	cmp	r3, #0
    b528:	d114      	bne.n	b554 <system_apb_clock_set_mask+0x48>
			PM->APBAMASK.reg |= mask;
    b52a:	4b0e      	ldr	r3, [pc, #56]	; (b564 <system_apb_clock_set_mask+0x58>)
    b52c:	4a0d      	ldr	r2, [pc, #52]	; (b564 <system_apb_clock_set_mask+0x58>)
    b52e:	6991      	ldr	r1, [r2, #24]
    b530:	683a      	ldr	r2, [r7, #0]
    b532:	430a      	orrs	r2, r1
    b534:	619a      	str	r2, [r3, #24]
			break;
    b536:	e00f      	b.n	b558 <system_apb_clock_set_mask+0x4c>
			PM->APBBMASK.reg |= mask;
    b538:	4b0a      	ldr	r3, [pc, #40]	; (b564 <system_apb_clock_set_mask+0x58>)
    b53a:	4a0a      	ldr	r2, [pc, #40]	; (b564 <system_apb_clock_set_mask+0x58>)
    b53c:	69d1      	ldr	r1, [r2, #28]
    b53e:	683a      	ldr	r2, [r7, #0]
    b540:	430a      	orrs	r2, r1
    b542:	61da      	str	r2, [r3, #28]
			break;
    b544:	e008      	b.n	b558 <system_apb_clock_set_mask+0x4c>
			PM->APBCMASK.reg |= mask;
    b546:	4b07      	ldr	r3, [pc, #28]	; (b564 <system_apb_clock_set_mask+0x58>)
    b548:	4a06      	ldr	r2, [pc, #24]	; (b564 <system_apb_clock_set_mask+0x58>)
    b54a:	6a11      	ldr	r1, [r2, #32]
    b54c:	683a      	ldr	r2, [r7, #0]
    b54e:	430a      	orrs	r2, r1
    b550:	621a      	str	r2, [r3, #32]
			break;
    b552:	e001      	b.n	b558 <system_apb_clock_set_mask+0x4c>
			return STATUS_ERR_INVALID_ARG;
    b554:	2317      	movs	r3, #23
    b556:	e000      	b.n	b55a <system_apb_clock_set_mask+0x4e>
	return STATUS_OK;
    b558:	2300      	movs	r3, #0
}
    b55a:	0018      	movs	r0, r3
    b55c:	46bd      	mov	sp, r7
    b55e:	b002      	add	sp, #8
    b560:	bd80      	pop	{r7, pc}
    b562:	46c0      	nop			; (mov r8, r8)
    b564:	40000400 	.word	0x40000400

0000b568 <system_pinmux_get_config_defaults>:
{
    b568:	b580      	push	{r7, lr}
    b56a:	b082      	sub	sp, #8
    b56c:	af00      	add	r7, sp, #0
    b56e:	6078      	str	r0, [r7, #4]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    b570:	687b      	ldr	r3, [r7, #4]
    b572:	2280      	movs	r2, #128	; 0x80
    b574:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    b576:	687b      	ldr	r3, [r7, #4]
    b578:	2200      	movs	r2, #0
    b57a:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    b57c:	687b      	ldr	r3, [r7, #4]
    b57e:	2201      	movs	r2, #1
    b580:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
    b582:	687b      	ldr	r3, [r7, #4]
    b584:	2200      	movs	r2, #0
    b586:	70da      	strb	r2, [r3, #3]
}
    b588:	46c0      	nop			; (mov r8, r8)
    b58a:	46bd      	mov	sp, r7
    b58c:	b002      	add	sp, #8
    b58e:	bd80      	pop	{r7, pc}

0000b590 <system_interrupt_enable>:
{
    b590:	b580      	push	{r7, lr}
    b592:	b082      	sub	sp, #8
    b594:	af00      	add	r7, sp, #0
    b596:	0002      	movs	r2, r0
    b598:	1dfb      	adds	r3, r7, #7
    b59a:	701a      	strb	r2, [r3, #0]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    b59c:	4b06      	ldr	r3, [pc, #24]	; (b5b8 <system_interrupt_enable+0x28>)
    b59e:	1dfa      	adds	r2, r7, #7
    b5a0:	7812      	ldrb	r2, [r2, #0]
    b5a2:	0011      	movs	r1, r2
    b5a4:	221f      	movs	r2, #31
    b5a6:	400a      	ands	r2, r1
    b5a8:	2101      	movs	r1, #1
    b5aa:	4091      	lsls	r1, r2
    b5ac:	000a      	movs	r2, r1
    b5ae:	601a      	str	r2, [r3, #0]
}
    b5b0:	46c0      	nop			; (mov r8, r8)
    b5b2:	46bd      	mov	sp, r7
    b5b4:	b002      	add	sp, #8
    b5b6:	bd80      	pop	{r7, pc}
    b5b8:	e000e100 	.word	0xe000e100

0000b5bc <_usb_host_interrupt_handler>:
 *   (Device dis/connection, SOF, reset, resume, wakeup, error)
 * - Pipe events
 *   (End of data transfer, setup, stall, error)
 */
static void _usb_host_interrupt_handler(void)
{
    b5bc:	b590      	push	{r4, r7, lr}
    b5be:	b083      	sub	sp, #12
    b5c0:	af00      	add	r7, sp, #0
    b5c2:	4c44      	ldr	r4, [pc, #272]	; (b6d4 <_usb_host_interrupt_handler+0x118>)
    b5c4:	447c      	add	r4, pc
	uint32_t pipe_int;
	uint32_t flags;

	/* Manage pipe interrupts */
	pipe_int = ctz(_usb_instances->hw->HOST.PINTSMRY.reg);
    b5c6:	4b44      	ldr	r3, [pc, #272]	; (b6d8 <_usb_host_interrupt_handler+0x11c>)
    b5c8:	447b      	add	r3, pc
    b5ca:	681b      	ldr	r3, [r3, #0]
    b5cc:	681b      	ldr	r3, [r3, #0]
    b5ce:	8c1b      	ldrh	r3, [r3, #32]
    b5d0:	b29b      	uxth	r3, r3
    b5d2:	2b00      	cmp	r3, #0
    b5d4:	d00c      	beq.n	b5f0 <_usb_host_interrupt_handler+0x34>
    b5d6:	4b41      	ldr	r3, [pc, #260]	; (b6dc <_usb_host_interrupt_handler+0x120>)
    b5d8:	447b      	add	r3, pc
    b5da:	681b      	ldr	r3, [r3, #0]
    b5dc:	681b      	ldr	r3, [r3, #0]
    b5de:	8c1b      	ldrh	r3, [r3, #32]
    b5e0:	b29b      	uxth	r3, r3
    b5e2:	001a      	movs	r2, r3
    b5e4:	4b3e      	ldr	r3, [pc, #248]	; (b6e0 <_usb_host_interrupt_handler+0x124>)
    b5e6:	58e3      	ldr	r3, [r4, r3]
    b5e8:	0010      	movs	r0, r2
    b5ea:	4798      	blx	r3
    b5ec:	0003      	movs	r3, r0
    b5ee:	e000      	b.n	b5f2 <_usb_host_interrupt_handler+0x36>
    b5f0:	2320      	movs	r3, #32
    b5f2:	607b      	str	r3, [r7, #4]
	if (pipe_int < 32) {
    b5f4:	687b      	ldr	r3, [r7, #4]
    b5f6:	2b1f      	cmp	r3, #31
    b5f8:	d900      	bls.n	b5fc <_usb_host_interrupt_handler+0x40>
    b5fa:	e1f5      	b.n	b9e8 <_usb_host_interrupt_handler+0x42c>
		/* pipe interrupts */

		/* get interrupt flags */
		flags = _usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg;
    b5fc:	4b39      	ldr	r3, [pc, #228]	; (b6e4 <_usb_host_interrupt_handler+0x128>)
    b5fe:	447b      	add	r3, pc
    b600:	681b      	ldr	r3, [r3, #0]
    b602:	681a      	ldr	r2, [r3, #0]
    b604:	687b      	ldr	r3, [r7, #4]
    b606:	3308      	adds	r3, #8
    b608:	015b      	lsls	r3, r3, #5
    b60a:	18d3      	adds	r3, r2, r3
    b60c:	3307      	adds	r3, #7
    b60e:	781b      	ldrb	r3, [r3, #0]
    b610:	b2db      	uxtb	r3, r3
    b612:	603b      	str	r3, [r7, #0]

		/* host pipe transfer complete interrupt */
		if (flags & USB_HOST_PINTFLAG_TRCPT_Msk) {
    b614:	683b      	ldr	r3, [r7, #0]
    b616:	2203      	movs	r2, #3
    b618:	4013      	ands	r3, r2
    b61a:	d100      	bne.n	b61e <_usb_host_interrupt_handler+0x62>
    b61c:	e0b9      	b.n	b792 <_usb_host_interrupt_handler+0x1d6>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    b61e:	2201      	movs	r2, #1
    b620:	687b      	ldr	r3, [r7, #4]
    b622:	409a      	lsls	r2, r3
    b624:	0013      	movs	r3, r2
    b626:	43db      	mvns	r3, r3
    b628:	001a      	movs	r2, r3
    b62a:	4b2f      	ldr	r3, [pc, #188]	; (b6e8 <_usb_host_interrupt_handler+0x12c>)
    b62c:	58e3      	ldr	r3, [r4, r3]
    b62e:	681b      	ldr	r3, [r3, #0]
    b630:	401a      	ands	r2, r3
    b632:	4b2d      	ldr	r3, [pc, #180]	; (b6e8 <_usb_host_interrupt_handler+0x12c>)
    b634:	58e3      	ldr	r3, [r4, r3]
    b636:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    b638:	4b2c      	ldr	r3, [pc, #176]	; (b6ec <_usb_host_interrupt_handler+0x130>)
    b63a:	447b      	add	r3, pc
    b63c:	681b      	ldr	r3, [r3, #0]
    b63e:	681a      	ldr	r2, [r3, #0]
    b640:	687b      	ldr	r3, [r7, #4]
    b642:	3308      	adds	r3, #8
    b644:	015b      	lsls	r3, r3, #5
    b646:	18d3      	adds	r3, r2, r3
    b648:	3307      	adds	r3, #7
    b64a:	2203      	movs	r2, #3
    b64c:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRCPT_Msk;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    b64e:	4b28      	ldr	r3, [pc, #160]	; (b6f0 <_usb_host_interrupt_handler+0x134>)
    b650:	447b      	add	r3, pc
    b652:	681a      	ldr	r2, [r3, #0]
    b654:	21ae      	movs	r1, #174	; 0xae
    b656:	687b      	ldr	r3, [r7, #4]
    b658:	18d3      	adds	r3, r2, r3
    b65a:	185b      	adds	r3, r3, r1
    b65c:	781b      	ldrb	r3, [r3, #0]
    b65e:	001a      	movs	r2, r3
    b660:	2301      	movs	r3, #1
    b662:	4013      	ands	r3, r2
    b664:	d100      	bne.n	b668 <_usb_host_interrupt_handler+0xac>
    b666:	e094      	b.n	b792 <_usb_host_interrupt_handler+0x1d6>
					(1 << USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE)) {
				pipe_callback_para.pipe_num = pipe_int;
    b668:	687b      	ldr	r3, [r7, #4]
    b66a:	b2da      	uxtb	r2, r3
    b66c:	4b21      	ldr	r3, [pc, #132]	; (b6f4 <_usb_host_interrupt_handler+0x138>)
    b66e:	447b      	add	r3, pc
    b670:	701a      	strb	r2, [r3, #0]
				if (_usb_instances->hw->HOST.HostPipe[pipe_int].PCFG.bit.PTOKEN ==
    b672:	4b21      	ldr	r3, [pc, #132]	; (b6f8 <_usb_host_interrupt_handler+0x13c>)
    b674:	447b      	add	r3, pc
    b676:	681b      	ldr	r3, [r3, #0]
    b678:	681b      	ldr	r3, [r3, #0]
    b67a:	687a      	ldr	r2, [r7, #4]
    b67c:	3208      	adds	r2, #8
    b67e:	0152      	lsls	r2, r2, #5
    b680:	5cd3      	ldrb	r3, [r2, r3]
    b682:	079b      	lsls	r3, r3, #30
    b684:	0f9b      	lsrs	r3, r3, #30
    b686:	b2db      	uxtb	r3, r3
    b688:	2b01      	cmp	r3, #1
    b68a:	d13d      	bne.n	b708 <_usb_host_interrupt_handler+0x14c>
							USB_HOST_PIPE_TOKEN_IN) {
					/* in  */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    b68c:	4b1b      	ldr	r3, [pc, #108]	; (b6fc <_usb_host_interrupt_handler+0x140>)
    b68e:	58e2      	ldr	r2, [r4, r3]
    b690:	687b      	ldr	r3, [r7, #4]
    b692:	015b      	lsls	r3, r3, #5
    b694:	18d3      	adds	r3, r2, r3
    b696:	685b      	ldr	r3, [r3, #4]
    b698:	049b      	lsls	r3, r3, #18
    b69a:	0c9b      	lsrs	r3, r3, #18
    b69c:	b29b      	uxth	r3, r3
    b69e:	001a      	movs	r2, r3
    b6a0:	4b17      	ldr	r3, [pc, #92]	; (b700 <_usb_host_interrupt_handler+0x144>)
    b6a2:	447b      	add	r3, pc
    b6a4:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    b6a6:	4b15      	ldr	r3, [pc, #84]	; (b6fc <_usb_host_interrupt_handler+0x140>)
    b6a8:	58e2      	ldr	r2, [r4, r3]
    b6aa:	687b      	ldr	r3, [r7, #4]
    b6ac:	015b      	lsls	r3, r3, #5
    b6ae:	18d3      	adds	r3, r2, r3
    b6b0:	685b      	ldr	r3, [r3, #4]
    b6b2:	011b      	lsls	r3, r3, #4
    b6b4:	0c9b      	lsrs	r3, r3, #18
    b6b6:	b29b      	uxth	r3, r3
    b6b8:	001a      	movs	r2, r3
    b6ba:	4b12      	ldr	r3, [pc, #72]	; (b704 <_usb_host_interrupt_handler+0x148>)
    b6bc:	447b      	add	r3, pc
    b6be:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    b6c0:	4b0e      	ldr	r3, [pc, #56]	; (b6fc <_usb_host_interrupt_handler+0x140>)
    b6c2:	58e2      	ldr	r2, [r4, r3]
    b6c4:	687b      	ldr	r3, [r7, #4]
    b6c6:	015b      	lsls	r3, r3, #5
    b6c8:	18d3      	adds	r3, r2, r3
    b6ca:	685a      	ldr	r2, [r3, #4]
    b6cc:	0b92      	lsrs	r2, r2, #14
    b6ce:	0392      	lsls	r2, r2, #14
    b6d0:	605a      	str	r2, [r3, #4]
    b6d2:	e04e      	b.n	b772 <_usb_host_interrupt_handler+0x1b6>
    b6d4:	00003e6c 	.word	0x00003e6c
    b6d8:	1fff4e68 	.word	0x1fff4e68
    b6dc:	1fff4e58 	.word	0x1fff4e58
    b6e0:	0000029c 	.word	0x0000029c
    b6e4:	1fff4e32 	.word	0x1fff4e32
    b6e8:	000000d0 	.word	0x000000d0
    b6ec:	1fff4df6 	.word	0x1fff4df6
    b6f0:	1fff4de0 	.word	0x1fff4de0
    b6f4:	1fff4dc6 	.word	0x1fff4dc6
    b6f8:	1fff4dbc 	.word	0x1fff4dbc
    b6fc:	00000024 	.word	0x00000024
    b700:	1fff4d92 	.word	0x1fff4d92
    b704:	1fff4d78 	.word	0x1fff4d78
				} else {
					/* out */
					pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    b708:	4b99      	ldr	r3, [pc, #612]	; (b970 <_usb_host_interrupt_handler+0x3b4>)
    b70a:	58e2      	ldr	r2, [r4, r3]
    b70c:	687b      	ldr	r3, [r7, #4]
    b70e:	015b      	lsls	r3, r3, #5
    b710:	18d3      	adds	r3, r2, r3
    b712:	685b      	ldr	r3, [r3, #4]
    b714:	011b      	lsls	r3, r3, #4
    b716:	0c9b      	lsrs	r3, r3, #18
    b718:	b29b      	uxth	r3, r3
    b71a:	001a      	movs	r2, r3
    b71c:	4b95      	ldr	r3, [pc, #596]	; (b974 <_usb_host_interrupt_handler+0x3b8>)
    b71e:	447b      	add	r3, pc
    b720:	805a      	strh	r2, [r3, #2]
					pipe_callback_para.required_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    b722:	4b93      	ldr	r3, [pc, #588]	; (b970 <_usb_host_interrupt_handler+0x3b4>)
    b724:	58e2      	ldr	r2, [r4, r3]
    b726:	687b      	ldr	r3, [r7, #4]
    b728:	015b      	lsls	r3, r3, #5
    b72a:	18d3      	adds	r3, r2, r3
    b72c:	685b      	ldr	r3, [r3, #4]
    b72e:	049b      	lsls	r3, r3, #18
    b730:	0c9b      	lsrs	r3, r3, #18
    b732:	b29b      	uxth	r3, r3
    b734:	001a      	movs	r2, r3
    b736:	4b90      	ldr	r3, [pc, #576]	; (b978 <_usb_host_interrupt_handler+0x3bc>)
    b738:	447b      	add	r3, pc
    b73a:	809a      	strh	r2, [r3, #4]
					usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    b73c:	4b8c      	ldr	r3, [pc, #560]	; (b970 <_usb_host_interrupt_handler+0x3b4>)
    b73e:	58e2      	ldr	r2, [r4, r3]
    b740:	687b      	ldr	r3, [r7, #4]
    b742:	015b      	lsls	r3, r3, #5
    b744:	18d3      	adds	r3, r2, r3
    b746:	685a      	ldr	r2, [r3, #4]
    b748:	498c      	ldr	r1, [pc, #560]	; (b97c <_usb_host_interrupt_handler+0x3c0>)
    b74a:	400a      	ands	r2, r1
    b74c:	605a      	str	r2, [r3, #4]
					if (0 == pipe_callback_para.transfered_size) {
    b74e:	4b8c      	ldr	r3, [pc, #560]	; (b980 <_usb_host_interrupt_handler+0x3c4>)
    b750:	447b      	add	r3, pc
    b752:	885b      	ldrh	r3, [r3, #2]
    b754:	2b00      	cmp	r3, #0
    b756:	d10c      	bne.n	b772 <_usb_host_interrupt_handler+0x1b6>
						pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.BYTE_COUNT;
    b758:	4b85      	ldr	r3, [pc, #532]	; (b970 <_usb_host_interrupt_handler+0x3b4>)
    b75a:	58e2      	ldr	r2, [r4, r3]
    b75c:	687b      	ldr	r3, [r7, #4]
    b75e:	015b      	lsls	r3, r3, #5
    b760:	18d3      	adds	r3, r2, r3
    b762:	685b      	ldr	r3, [r3, #4]
    b764:	049b      	lsls	r3, r3, #18
    b766:	0c9b      	lsrs	r3, r3, #18
    b768:	b29b      	uxth	r3, r3
    b76a:	001a      	movs	r2, r3
    b76c:	4b85      	ldr	r3, [pc, #532]	; (b984 <_usb_host_interrupt_handler+0x3c8>)
    b76e:	447b      	add	r3, pc
    b770:	805a      	strh	r2, [r3, #2]
					}
				}
				(_usb_instances->host_pipe_callback[pipe_int]
    b772:	4b85      	ldr	r3, [pc, #532]	; (b988 <_usb_host_interrupt_handler+0x3cc>)
    b774:	447b      	add	r3, pc
    b776:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_TRANSFER_COMPLETE])(_usb_instances, &pipe_callback_para);
    b778:	687b      	ldr	r3, [r7, #4]
    b77a:	3302      	adds	r3, #2
    b77c:	011b      	lsls	r3, r3, #4
    b77e:	18d3      	adds	r3, r2, r3
    b780:	3304      	adds	r3, #4
    b782:	681a      	ldr	r2, [r3, #0]
    b784:	4b81      	ldr	r3, [pc, #516]	; (b98c <_usb_host_interrupt_handler+0x3d0>)
    b786:	447b      	add	r3, pc
    b788:	681b      	ldr	r3, [r3, #0]
    b78a:	4981      	ldr	r1, [pc, #516]	; (b990 <_usb_host_interrupt_handler+0x3d4>)
    b78c:	4479      	add	r1, pc
    b78e:	0018      	movs	r0, r3
    b790:	4790      	blx	r2
			}
		}

		/* host pipe transfer fail interrupt */
		if (flags & USB_HOST_PINTFLAG_TRFAIL) {
    b792:	683b      	ldr	r3, [r7, #0]
    b794:	2204      	movs	r2, #4
    b796:	4013      	ands	r3, r2
    b798:	d017      	beq.n	b7ca <_usb_host_interrupt_handler+0x20e>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    b79a:	2201      	movs	r2, #1
    b79c:	687b      	ldr	r3, [r7, #4]
    b79e:	409a      	lsls	r2, r3
    b7a0:	0013      	movs	r3, r2
    b7a2:	43db      	mvns	r3, r3
    b7a4:	001a      	movs	r2, r3
    b7a6:	4b7b      	ldr	r3, [pc, #492]	; (b994 <_usb_host_interrupt_handler+0x3d8>)
    b7a8:	58e3      	ldr	r3, [r4, r3]
    b7aa:	681b      	ldr	r3, [r3, #0]
    b7ac:	401a      	ands	r2, r3
    b7ae:	4b79      	ldr	r3, [pc, #484]	; (b994 <_usb_host_interrupt_handler+0x3d8>)
    b7b0:	58e3      	ldr	r3, [r4, r3]
    b7b2:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    b7b4:	4b78      	ldr	r3, [pc, #480]	; (b998 <_usb_host_interrupt_handler+0x3dc>)
    b7b6:	447b      	add	r3, pc
    b7b8:	681b      	ldr	r3, [r3, #0]
    b7ba:	681a      	ldr	r2, [r3, #0]
    b7bc:	687b      	ldr	r3, [r7, #4]
    b7be:	3308      	adds	r3, #8
    b7c0:	015b      	lsls	r3, r3, #5
    b7c2:	18d3      	adds	r3, r2, r3
    b7c4:	3307      	adds	r3, #7
    b7c6:	2204      	movs	r2, #4
    b7c8:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TRFAIL;
		}

		/* host pipe error interrupt */
		if (flags & USB_HOST_PINTFLAG_PERR) {
    b7ca:	683b      	ldr	r3, [r7, #0]
    b7cc:	2208      	movs	r2, #8
    b7ce:	4013      	ands	r3, r2
    b7d0:	d046      	beq.n	b860 <_usb_host_interrupt_handler+0x2a4>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    b7d2:	2201      	movs	r2, #1
    b7d4:	687b      	ldr	r3, [r7, #4]
    b7d6:	409a      	lsls	r2, r3
    b7d8:	0013      	movs	r3, r2
    b7da:	43db      	mvns	r3, r3
    b7dc:	001a      	movs	r2, r3
    b7de:	4b6d      	ldr	r3, [pc, #436]	; (b994 <_usb_host_interrupt_handler+0x3d8>)
    b7e0:	58e3      	ldr	r3, [r4, r3]
    b7e2:	681b      	ldr	r3, [r3, #0]
    b7e4:	401a      	ands	r2, r3
    b7e6:	4b6b      	ldr	r3, [pc, #428]	; (b994 <_usb_host_interrupt_handler+0x3d8>)
    b7e8:	58e3      	ldr	r3, [r4, r3]
    b7ea:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    b7ec:	4b6b      	ldr	r3, [pc, #428]	; (b99c <_usb_host_interrupt_handler+0x3e0>)
    b7ee:	447b      	add	r3, pc
    b7f0:	681b      	ldr	r3, [r3, #0]
    b7f2:	681a      	ldr	r2, [r3, #0]
    b7f4:	687b      	ldr	r3, [r7, #4]
    b7f6:	3308      	adds	r3, #8
    b7f8:	015b      	lsls	r3, r3, #5
    b7fa:	18d3      	adds	r3, r2, r3
    b7fc:	3307      	adds	r3, #7
    b7fe:	2208      	movs	r2, #8
    b800:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_PERR;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    b802:	4b67      	ldr	r3, [pc, #412]	; (b9a0 <_usb_host_interrupt_handler+0x3e4>)
    b804:	447b      	add	r3, pc
    b806:	681a      	ldr	r2, [r3, #0]
    b808:	21ae      	movs	r1, #174	; 0xae
    b80a:	687b      	ldr	r3, [r7, #4]
    b80c:	18d3      	adds	r3, r2, r3
    b80e:	185b      	adds	r3, r3, r1
    b810:	781b      	ldrb	r3, [r3, #0]
    b812:	001a      	movs	r2, r3
    b814:	2302      	movs	r3, #2
    b816:	4013      	ands	r3, r2
    b818:	d022      	beq.n	b860 <_usb_host_interrupt_handler+0x2a4>
					(1 << USB_HOST_PIPE_CALLBACK_ERROR)) {
				pipe_callback_para.pipe_num = pipe_int;
    b81a:	687b      	ldr	r3, [r7, #4]
    b81c:	b2da      	uxtb	r2, r3
    b81e:	4b61      	ldr	r3, [pc, #388]	; (b9a4 <_usb_host_interrupt_handler+0x3e8>)
    b820:	447b      	add	r3, pc
    b822:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.pipe_error_status =
						usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].STATUS_PIPE.reg & 0x1F;
    b824:	4b52      	ldr	r3, [pc, #328]	; (b970 <_usb_host_interrupt_handler+0x3b4>)
    b826:	58e2      	ldr	r2, [r4, r3]
    b828:	687b      	ldr	r3, [r7, #4]
    b82a:	015b      	lsls	r3, r3, #5
    b82c:	18d3      	adds	r3, r2, r3
    b82e:	330e      	adds	r3, #14
    b830:	881b      	ldrh	r3, [r3, #0]
    b832:	b29b      	uxth	r3, r3
    b834:	b2db      	uxtb	r3, r3
    b836:	221f      	movs	r2, #31
    b838:	4013      	ands	r3, r2
    b83a:	b2da      	uxtb	r2, r3
				pipe_callback_para.pipe_error_status =
    b83c:	4b5a      	ldr	r3, [pc, #360]	; (b9a8 <_usb_host_interrupt_handler+0x3ec>)
    b83e:	447b      	add	r3, pc
    b840:	705a      	strb	r2, [r3, #1]
				(_usb_instances->host_pipe_callback[pipe_int]
    b842:	4b5a      	ldr	r3, [pc, #360]	; (b9ac <_usb_host_interrupt_handler+0x3f0>)
    b844:	447b      	add	r3, pc
    b846:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_ERROR])(_usb_instances, &pipe_callback_para);
    b848:	687b      	ldr	r3, [r7, #4]
    b84a:	011b      	lsls	r3, r3, #4
    b84c:	18d3      	adds	r3, r2, r3
    b84e:	3328      	adds	r3, #40	; 0x28
    b850:	681a      	ldr	r2, [r3, #0]
    b852:	4b57      	ldr	r3, [pc, #348]	; (b9b0 <_usb_host_interrupt_handler+0x3f4>)
    b854:	447b      	add	r3, pc
    b856:	681b      	ldr	r3, [r3, #0]
    b858:	4956      	ldr	r1, [pc, #344]	; (b9b4 <_usb_host_interrupt_handler+0x3f8>)
    b85a:	4479      	add	r1, pc
    b85c:	0018      	movs	r0, r3
    b85e:	4790      	blx	r2
			}
		}

		/* host pipe transmitted setup interrupt */
		if (flags & USB_HOST_PINTFLAG_TXSTP) {
    b860:	683b      	ldr	r3, [r7, #0]
    b862:	2210      	movs	r2, #16
    b864:	4013      	ands	r3, r2
    b866:	d043      	beq.n	b8f0 <_usb_host_interrupt_handler+0x334>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    b868:	2201      	movs	r2, #1
    b86a:	687b      	ldr	r3, [r7, #4]
    b86c:	409a      	lsls	r2, r3
    b86e:	0013      	movs	r3, r2
    b870:	43db      	mvns	r3, r3
    b872:	001a      	movs	r2, r3
    b874:	4b47      	ldr	r3, [pc, #284]	; (b994 <_usb_host_interrupt_handler+0x3d8>)
    b876:	58e3      	ldr	r3, [r4, r3]
    b878:	681b      	ldr	r3, [r3, #0]
    b87a:	401a      	ands	r2, r3
    b87c:	4b45      	ldr	r3, [pc, #276]	; (b994 <_usb_host_interrupt_handler+0x3d8>)
    b87e:	58e3      	ldr	r3, [r4, r3]
    b880:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    b882:	4b4d      	ldr	r3, [pc, #308]	; (b9b8 <_usb_host_interrupt_handler+0x3fc>)
    b884:	447b      	add	r3, pc
    b886:	681b      	ldr	r3, [r3, #0]
    b888:	681a      	ldr	r2, [r3, #0]
    b88a:	687b      	ldr	r3, [r7, #4]
    b88c:	3308      	adds	r3, #8
    b88e:	015b      	lsls	r3, r3, #5
    b890:	18d3      	adds	r3, r2, r3
    b892:	3307      	adds	r3, #7
    b894:	2210      	movs	r2, #16
    b896:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_TXSTP;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    b898:	4b48      	ldr	r3, [pc, #288]	; (b9bc <_usb_host_interrupt_handler+0x400>)
    b89a:	447b      	add	r3, pc
    b89c:	681a      	ldr	r2, [r3, #0]
    b89e:	21ae      	movs	r1, #174	; 0xae
    b8a0:	687b      	ldr	r3, [r7, #4]
    b8a2:	18d3      	adds	r3, r2, r3
    b8a4:	185b      	adds	r3, r3, r1
    b8a6:	781b      	ldrb	r3, [r3, #0]
    b8a8:	001a      	movs	r2, r3
    b8aa:	2304      	movs	r3, #4
    b8ac:	4013      	ands	r3, r2
    b8ae:	d01f      	beq.n	b8f0 <_usb_host_interrupt_handler+0x334>
					(1 << USB_HOST_PIPE_CALLBACK_SETUP)) {
				pipe_callback_para.pipe_num = pipe_int;
    b8b0:	687b      	ldr	r3, [r7, #4]
    b8b2:	b2da      	uxtb	r2, r3
    b8b4:	4b42      	ldr	r3, [pc, #264]	; (b9c0 <_usb_host_interrupt_handler+0x404>)
    b8b6:	447b      	add	r3, pc
    b8b8:	701a      	strb	r2, [r3, #0]
				pipe_callback_para.transfered_size = usb_descriptor_table.usb_pipe_table[pipe_int].HostDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE;
    b8ba:	4b2d      	ldr	r3, [pc, #180]	; (b970 <_usb_host_interrupt_handler+0x3b4>)
    b8bc:	58e2      	ldr	r2, [r4, r3]
    b8be:	687b      	ldr	r3, [r7, #4]
    b8c0:	015b      	lsls	r3, r3, #5
    b8c2:	18d3      	adds	r3, r2, r3
    b8c4:	685b      	ldr	r3, [r3, #4]
    b8c6:	011b      	lsls	r3, r3, #4
    b8c8:	0c9b      	lsrs	r3, r3, #18
    b8ca:	b29b      	uxth	r3, r3
    b8cc:	001a      	movs	r2, r3
    b8ce:	4b3d      	ldr	r3, [pc, #244]	; (b9c4 <_usb_host_interrupt_handler+0x408>)
    b8d0:	447b      	add	r3, pc
    b8d2:	805a      	strh	r2, [r3, #2]
				(_usb_instances->host_pipe_callback[pipe_int]
    b8d4:	4b3c      	ldr	r3, [pc, #240]	; (b9c8 <_usb_host_interrupt_handler+0x40c>)
    b8d6:	447b      	add	r3, pc
    b8d8:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_SETUP])(_usb_instances, NULL);
    b8da:	687b      	ldr	r3, [r7, #4]
    b8dc:	011b      	lsls	r3, r3, #4
    b8de:	18d3      	adds	r3, r2, r3
    b8e0:	332c      	adds	r3, #44	; 0x2c
    b8e2:	681a      	ldr	r2, [r3, #0]
    b8e4:	4b39      	ldr	r3, [pc, #228]	; (b9cc <_usb_host_interrupt_handler+0x410>)
    b8e6:	447b      	add	r3, pc
    b8e8:	681b      	ldr	r3, [r3, #0]
    b8ea:	2100      	movs	r1, #0
    b8ec:	0018      	movs	r0, r3
    b8ee:	4790      	blx	r2
			}
		}

		/* host pipe stall interrupt */
		if (flags & USB_HOST_PINTFLAG_STALL) {
    b8f0:	683b      	ldr	r3, [r7, #0]
    b8f2:	2220      	movs	r2, #32
    b8f4:	4013      	ands	r3, r2
    b8f6:	d100      	bne.n	b8fa <_usb_host_interrupt_handler+0x33e>
    b8f8:	e170      	b.n	bbdc <_usb_host_interrupt_handler+0x620>
			/* Clear busy status */
			host_pipe_job_busy_status &= ~(1 << pipe_int);
    b8fa:	2201      	movs	r2, #1
    b8fc:	687b      	ldr	r3, [r7, #4]
    b8fe:	409a      	lsls	r2, r3
    b900:	0013      	movs	r3, r2
    b902:	43db      	mvns	r3, r3
    b904:	001a      	movs	r2, r3
    b906:	4b23      	ldr	r3, [pc, #140]	; (b994 <_usb_host_interrupt_handler+0x3d8>)
    b908:	58e3      	ldr	r3, [r4, r3]
    b90a:	681b      	ldr	r3, [r3, #0]
    b90c:	401a      	ands	r2, r3
    b90e:	4b21      	ldr	r3, [pc, #132]	; (b994 <_usb_host_interrupt_handler+0x3d8>)
    b910:	58e3      	ldr	r3, [r4, r3]
    b912:	601a      	str	r2, [r3, #0]
			/* clear the flag */
			_usb_instances->hw->HOST.HostPipe[pipe_int].PINTFLAG.reg =
    b914:	4b2e      	ldr	r3, [pc, #184]	; (b9d0 <_usb_host_interrupt_handler+0x414>)
    b916:	447b      	add	r3, pc
    b918:	681b      	ldr	r3, [r3, #0]
    b91a:	681a      	ldr	r2, [r3, #0]
    b91c:	687b      	ldr	r3, [r7, #4]
    b91e:	3308      	adds	r3, #8
    b920:	015b      	lsls	r3, r3, #5
    b922:	18d3      	adds	r3, r2, r3
    b924:	3307      	adds	r3, #7
    b926:	2220      	movs	r2, #32
    b928:	701a      	strb	r2, [r3, #0]
					USB_HOST_PINTFLAG_STALL;
			if(_usb_instances->host_pipe_enabled_callback_mask[pipe_int] &
    b92a:	4b2a      	ldr	r3, [pc, #168]	; (b9d4 <_usb_host_interrupt_handler+0x418>)
    b92c:	447b      	add	r3, pc
    b92e:	681a      	ldr	r2, [r3, #0]
    b930:	21ae      	movs	r1, #174	; 0xae
    b932:	687b      	ldr	r3, [r7, #4]
    b934:	18d3      	adds	r3, r2, r3
    b936:	185b      	adds	r3, r3, r1
    b938:	781b      	ldrb	r3, [r3, #0]
    b93a:	001a      	movs	r2, r3
    b93c:	2308      	movs	r3, #8
    b93e:	4013      	ands	r3, r2
    b940:	d100      	bne.n	b944 <_usb_host_interrupt_handler+0x388>
    b942:	e14b      	b.n	bbdc <_usb_host_interrupt_handler+0x620>
					(1 << USB_HOST_PIPE_CALLBACK_STALL)) {
				pipe_callback_para.pipe_num = pipe_int;
    b944:	687b      	ldr	r3, [r7, #4]
    b946:	b2da      	uxtb	r2, r3
    b948:	4b23      	ldr	r3, [pc, #140]	; (b9d8 <_usb_host_interrupt_handler+0x41c>)
    b94a:	447b      	add	r3, pc
    b94c:	701a      	strb	r2, [r3, #0]
				(_usb_instances->host_pipe_callback[pipe_int]
    b94e:	4b23      	ldr	r3, [pc, #140]	; (b9dc <_usb_host_interrupt_handler+0x420>)
    b950:	447b      	add	r3, pc
    b952:	681a      	ldr	r2, [r3, #0]
						[USB_HOST_PIPE_CALLBACK_STALL])(_usb_instances, &pipe_callback_para);
    b954:	687b      	ldr	r3, [r7, #4]
    b956:	011b      	lsls	r3, r3, #4
    b958:	18d3      	adds	r3, r2, r3
    b95a:	3330      	adds	r3, #48	; 0x30
    b95c:	681a      	ldr	r2, [r3, #0]
    b95e:	4b20      	ldr	r3, [pc, #128]	; (b9e0 <_usb_host_interrupt_handler+0x424>)
    b960:	447b      	add	r3, pc
    b962:	681b      	ldr	r3, [r3, #0]
    b964:	491f      	ldr	r1, [pc, #124]	; (b9e4 <_usb_host_interrupt_handler+0x428>)
    b966:	4479      	add	r1, pc
    b968:	0018      	movs	r0, r3
    b96a:	4790      	blx	r2
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
			}
		}

	}
}
    b96c:	e136      	b.n	bbdc <_usb_host_interrupt_handler+0x620>
    b96e:	46c0      	nop			; (mov r8, r8)
    b970:	00000024 	.word	0x00000024
    b974:	1fff4d16 	.word	0x1fff4d16
    b978:	1fff4cfc 	.word	0x1fff4cfc
    b97c:	f0003fff 	.word	0xf0003fff
    b980:	1fff4ce4 	.word	0x1fff4ce4
    b984:	1fff4cc6 	.word	0x1fff4cc6
    b988:	1fff4cbc 	.word	0x1fff4cbc
    b98c:	1fff4caa 	.word	0x1fff4caa
    b990:	1fff4ca8 	.word	0x1fff4ca8
    b994:	000000d0 	.word	0x000000d0
    b998:	1fff4c7a 	.word	0x1fff4c7a
    b99c:	1fff4c42 	.word	0x1fff4c42
    b9a0:	1fff4c2c 	.word	0x1fff4c2c
    b9a4:	1fff4c14 	.word	0x1fff4c14
    b9a8:	1fff4bf6 	.word	0x1fff4bf6
    b9ac:	1fff4bec 	.word	0x1fff4bec
    b9b0:	1fff4bdc 	.word	0x1fff4bdc
    b9b4:	1fff4bda 	.word	0x1fff4bda
    b9b8:	1fff4bac 	.word	0x1fff4bac
    b9bc:	1fff4b96 	.word	0x1fff4b96
    b9c0:	1fff4b7e 	.word	0x1fff4b7e
    b9c4:	1fff4b64 	.word	0x1fff4b64
    b9c8:	1fff4b5a 	.word	0x1fff4b5a
    b9cc:	1fff4b4a 	.word	0x1fff4b4a
    b9d0:	1fff4b1a 	.word	0x1fff4b1a
    b9d4:	1fff4b04 	.word	0x1fff4b04
    b9d8:	1fff4aea 	.word	0x1fff4aea
    b9dc:	1fff4ae0 	.word	0x1fff4ae0
    b9e0:	1fff4ad0 	.word	0x1fff4ad0
    b9e4:	1fff4ace 	.word	0x1fff4ace
		flags = _usb_instances->hw->HOST.INTFLAG.reg;
    b9e8:	4b7e      	ldr	r3, [pc, #504]	; (bbe4 <_usb_host_interrupt_handler+0x628>)
    b9ea:	447b      	add	r3, pc
    b9ec:	681b      	ldr	r3, [r3, #0]
    b9ee:	681b      	ldr	r3, [r3, #0]
    b9f0:	8b9b      	ldrh	r3, [r3, #28]
    b9f2:	b29b      	uxth	r3, r3
    b9f4:	603b      	str	r3, [r7, #0]
		if (flags & USB_HOST_INTFLAG_HSOF) {
    b9f6:	683b      	ldr	r3, [r7, #0]
    b9f8:	2204      	movs	r2, #4
    b9fa:	4013      	ands	r3, r2
    b9fc:	d017      	beq.n	ba2e <_usb_host_interrupt_handler+0x472>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_HSOF;
    b9fe:	4b7a      	ldr	r3, [pc, #488]	; (bbe8 <_usb_host_interrupt_handler+0x62c>)
    ba00:	447b      	add	r3, pc
    ba02:	681b      	ldr	r3, [r3, #0]
    ba04:	681b      	ldr	r3, [r3, #0]
    ba06:	2204      	movs	r2, #4
    ba08:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_SOF)) {
    ba0a:	4b78      	ldr	r3, [pc, #480]	; (bbec <_usb_host_interrupt_handler+0x630>)
    ba0c:	447b      	add	r3, pc
    ba0e:	681b      	ldr	r3, [r3, #0]
    ba10:	22a5      	movs	r2, #165	; 0xa5
    ba12:	5c9b      	ldrb	r3, [r3, r2]
    ba14:	001a      	movs	r2, r3
    ba16:	2301      	movs	r3, #1
    ba18:	4013      	ands	r3, r2
    ba1a:	d008      	beq.n	ba2e <_usb_host_interrupt_handler+0x472>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_SOF])(_usb_instances);
    ba1c:	4b74      	ldr	r3, [pc, #464]	; (bbf0 <_usb_host_interrupt_handler+0x634>)
    ba1e:	447b      	add	r3, pc
    ba20:	681b      	ldr	r3, [r3, #0]
    ba22:	685a      	ldr	r2, [r3, #4]
    ba24:	4b73      	ldr	r3, [pc, #460]	; (bbf4 <_usb_host_interrupt_handler+0x638>)
    ba26:	447b      	add	r3, pc
    ba28:	681b      	ldr	r3, [r3, #0]
    ba2a:	0018      	movs	r0, r3
    ba2c:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RST) {
    ba2e:	683b      	ldr	r3, [r7, #0]
    ba30:	2208      	movs	r2, #8
    ba32:	4013      	ands	r3, r2
    ba34:	d01b      	beq.n	ba6e <_usb_host_interrupt_handler+0x4b2>
			host_pipe_job_busy_status = 0;
    ba36:	4b70      	ldr	r3, [pc, #448]	; (bbf8 <_usb_host_interrupt_handler+0x63c>)
    ba38:	58e3      	ldr	r3, [r4, r3]
    ba3a:	2200      	movs	r2, #0
    ba3c:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RST;
    ba3e:	4b6f      	ldr	r3, [pc, #444]	; (bbfc <_usb_host_interrupt_handler+0x640>)
    ba40:	447b      	add	r3, pc
    ba42:	681b      	ldr	r3, [r3, #0]
    ba44:	681b      	ldr	r3, [r3, #0]
    ba46:	2208      	movs	r2, #8
    ba48:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RESET)) {
    ba4a:	4b6d      	ldr	r3, [pc, #436]	; (bc00 <_usb_host_interrupt_handler+0x644>)
    ba4c:	447b      	add	r3, pc
    ba4e:	681b      	ldr	r3, [r3, #0]
    ba50:	22a5      	movs	r2, #165	; 0xa5
    ba52:	5c9b      	ldrb	r3, [r3, r2]
    ba54:	001a      	movs	r2, r3
    ba56:	2302      	movs	r3, #2
    ba58:	4013      	ands	r3, r2
    ba5a:	d008      	beq.n	ba6e <_usb_host_interrupt_handler+0x4b2>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RESET])(_usb_instances);
    ba5c:	4b69      	ldr	r3, [pc, #420]	; (bc04 <_usb_host_interrupt_handler+0x648>)
    ba5e:	447b      	add	r3, pc
    ba60:	681b      	ldr	r3, [r3, #0]
    ba62:	689a      	ldr	r2, [r3, #8]
    ba64:	4b68      	ldr	r3, [pc, #416]	; (bc08 <_usb_host_interrupt_handler+0x64c>)
    ba66:	447b      	add	r3, pc
    ba68:	681b      	ldr	r3, [r3, #0]
    ba6a:	0018      	movs	r0, r3
    ba6c:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_UPRSM) {
    ba6e:	683b      	ldr	r3, [r7, #0]
    ba70:	2240      	movs	r2, #64	; 0x40
    ba72:	4013      	ands	r3, r2
    ba74:	d017      	beq.n	baa6 <_usb_host_interrupt_handler+0x4ea>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_UPRSM;
    ba76:	4b65      	ldr	r3, [pc, #404]	; (bc0c <_usb_host_interrupt_handler+0x650>)
    ba78:	447b      	add	r3, pc
    ba7a:	681b      	ldr	r3, [r3, #0]
    ba7c:	681b      	ldr	r3, [r3, #0]
    ba7e:	2240      	movs	r2, #64	; 0x40
    ba80:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_UPRSM)) {
    ba82:	4b63      	ldr	r3, [pc, #396]	; (bc10 <_usb_host_interrupt_handler+0x654>)
    ba84:	447b      	add	r3, pc
    ba86:	681b      	ldr	r3, [r3, #0]
    ba88:	22a5      	movs	r2, #165	; 0xa5
    ba8a:	5c9b      	ldrb	r3, [r3, r2]
    ba8c:	001a      	movs	r2, r3
    ba8e:	2310      	movs	r3, #16
    ba90:	4013      	ands	r3, r2
    ba92:	d008      	beq.n	baa6 <_usb_host_interrupt_handler+0x4ea>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_UPRSM])(_usb_instances);
    ba94:	4b5f      	ldr	r3, [pc, #380]	; (bc14 <_usb_host_interrupt_handler+0x658>)
    ba96:	447b      	add	r3, pc
    ba98:	681b      	ldr	r3, [r3, #0]
    ba9a:	695a      	ldr	r2, [r3, #20]
    ba9c:	4b5e      	ldr	r3, [pc, #376]	; (bc18 <_usb_host_interrupt_handler+0x65c>)
    ba9e:	447b      	add	r3, pc
    baa0:	681b      	ldr	r3, [r3, #0]
    baa2:	0018      	movs	r0, r3
    baa4:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DNRSM) {
    baa6:	683b      	ldr	r3, [r7, #0]
    baa8:	2220      	movs	r2, #32
    baaa:	4013      	ands	r3, r2
    baac:	d017      	beq.n	bade <_usb_host_interrupt_handler+0x522>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DNRSM;
    baae:	4b5b      	ldr	r3, [pc, #364]	; (bc1c <_usb_host_interrupt_handler+0x660>)
    bab0:	447b      	add	r3, pc
    bab2:	681b      	ldr	r3, [r3, #0]
    bab4:	681b      	ldr	r3, [r3, #0]
    bab6:	2220      	movs	r2, #32
    bab8:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DNRSM)) {
    baba:	4b59      	ldr	r3, [pc, #356]	; (bc20 <_usb_host_interrupt_handler+0x664>)
    babc:	447b      	add	r3, pc
    babe:	681b      	ldr	r3, [r3, #0]
    bac0:	22a5      	movs	r2, #165	; 0xa5
    bac2:	5c9b      	ldrb	r3, [r3, r2]
    bac4:	001a      	movs	r2, r3
    bac6:	2308      	movs	r3, #8
    bac8:	4013      	ands	r3, r2
    baca:	d008      	beq.n	bade <_usb_host_interrupt_handler+0x522>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DNRSM])(_usb_instances);
    bacc:	4b55      	ldr	r3, [pc, #340]	; (bc24 <_usb_host_interrupt_handler+0x668>)
    bace:	447b      	add	r3, pc
    bad0:	681b      	ldr	r3, [r3, #0]
    bad2:	691a      	ldr	r2, [r3, #16]
    bad4:	4b54      	ldr	r3, [pc, #336]	; (bc28 <_usb_host_interrupt_handler+0x66c>)
    bad6:	447b      	add	r3, pc
    bad8:	681b      	ldr	r3, [r3, #0]
    bada:	0018      	movs	r0, r3
    badc:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_WAKEUP) {
    bade:	683b      	ldr	r3, [r7, #0]
    bae0:	2210      	movs	r2, #16
    bae2:	4013      	ands	r3, r2
    bae4:	d017      	beq.n	bb16 <_usb_host_interrupt_handler+0x55a>
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_WAKEUP;
    bae6:	4b51      	ldr	r3, [pc, #324]	; (bc2c <_usb_host_interrupt_handler+0x670>)
    bae8:	447b      	add	r3, pc
    baea:	681b      	ldr	r3, [r3, #0]
    baec:	681b      	ldr	r3, [r3, #0]
    baee:	2210      	movs	r2, #16
    baf0:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_WAKEUP)) {
    baf2:	4b4f      	ldr	r3, [pc, #316]	; (bc30 <_usb_host_interrupt_handler+0x674>)
    baf4:	447b      	add	r3, pc
    baf6:	681b      	ldr	r3, [r3, #0]
    baf8:	22a5      	movs	r2, #165	; 0xa5
    bafa:	5c9b      	ldrb	r3, [r3, r2]
    bafc:	001a      	movs	r2, r3
    bafe:	2304      	movs	r3, #4
    bb00:	4013      	ands	r3, r2
    bb02:	d008      	beq.n	bb16 <_usb_host_interrupt_handler+0x55a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_WAKEUP])(_usb_instances);
    bb04:	4b4b      	ldr	r3, [pc, #300]	; (bc34 <_usb_host_interrupt_handler+0x678>)
    bb06:	447b      	add	r3, pc
    bb08:	681b      	ldr	r3, [r3, #0]
    bb0a:	68da      	ldr	r2, [r3, #12]
    bb0c:	4b4a      	ldr	r3, [pc, #296]	; (bc38 <_usb_host_interrupt_handler+0x67c>)
    bb0e:	447b      	add	r3, pc
    bb10:	681b      	ldr	r3, [r3, #0]
    bb12:	0018      	movs	r0, r3
    bb14:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_RAMACER) {
    bb16:	683b      	ldr	r3, [r7, #0]
    bb18:	2280      	movs	r2, #128	; 0x80
    bb1a:	4013      	ands	r3, r2
    bb1c:	d01b      	beq.n	bb56 <_usb_host_interrupt_handler+0x59a>
			host_pipe_job_busy_status = 0;
    bb1e:	4b36      	ldr	r3, [pc, #216]	; (bbf8 <_usb_host_interrupt_handler+0x63c>)
    bb20:	58e3      	ldr	r3, [r4, r3]
    bb22:	2200      	movs	r2, #0
    bb24:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_RAMACER;
    bb26:	4b45      	ldr	r3, [pc, #276]	; (bc3c <_usb_host_interrupt_handler+0x680>)
    bb28:	447b      	add	r3, pc
    bb2a:	681b      	ldr	r3, [r3, #0]
    bb2c:	681b      	ldr	r3, [r3, #0]
    bb2e:	2280      	movs	r2, #128	; 0x80
    bb30:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_RAMACER)) {
    bb32:	4b43      	ldr	r3, [pc, #268]	; (bc40 <_usb_host_interrupt_handler+0x684>)
    bb34:	447b      	add	r3, pc
    bb36:	681b      	ldr	r3, [r3, #0]
    bb38:	22a5      	movs	r2, #165	; 0xa5
    bb3a:	5c9b      	ldrb	r3, [r3, r2]
    bb3c:	001a      	movs	r2, r3
    bb3e:	2320      	movs	r3, #32
    bb40:	4013      	ands	r3, r2
    bb42:	d008      	beq.n	bb56 <_usb_host_interrupt_handler+0x59a>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_RAMACER])(_usb_instances);
    bb44:	4b3f      	ldr	r3, [pc, #252]	; (bc44 <_usb_host_interrupt_handler+0x688>)
    bb46:	447b      	add	r3, pc
    bb48:	681b      	ldr	r3, [r3, #0]
    bb4a:	699a      	ldr	r2, [r3, #24]
    bb4c:	4b3e      	ldr	r3, [pc, #248]	; (bc48 <_usb_host_interrupt_handler+0x68c>)
    bb4e:	447b      	add	r3, pc
    bb50:	681b      	ldr	r3, [r3, #0]
    bb52:	0018      	movs	r0, r3
    bb54:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DCONN) {
    bb56:	683a      	ldr	r2, [r7, #0]
    bb58:	2380      	movs	r3, #128	; 0x80
    bb5a:	005b      	lsls	r3, r3, #1
    bb5c:	4013      	ands	r3, r2
    bb5e:	d01c      	beq.n	bb9a <_usb_host_interrupt_handler+0x5de>
			host_pipe_job_busy_status = 0;
    bb60:	4b25      	ldr	r3, [pc, #148]	; (bbf8 <_usb_host_interrupt_handler+0x63c>)
    bb62:	58e3      	ldr	r3, [r4, r3]
    bb64:	2200      	movs	r2, #0
    bb66:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DCONN;
    bb68:	4b38      	ldr	r3, [pc, #224]	; (bc4c <_usb_host_interrupt_handler+0x690>)
    bb6a:	447b      	add	r3, pc
    bb6c:	681b      	ldr	r3, [r3, #0]
    bb6e:	681b      	ldr	r3, [r3, #0]
    bb70:	2280      	movs	r2, #128	; 0x80
    bb72:	0052      	lsls	r2, r2, #1
    bb74:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_CONNECT)) {
    bb76:	4b36      	ldr	r3, [pc, #216]	; (bc50 <_usb_host_interrupt_handler+0x694>)
    bb78:	447b      	add	r3, pc
    bb7a:	681b      	ldr	r3, [r3, #0]
    bb7c:	22a5      	movs	r2, #165	; 0xa5
    bb7e:	5c9b      	ldrb	r3, [r3, r2]
    bb80:	001a      	movs	r2, r3
    bb82:	2340      	movs	r3, #64	; 0x40
    bb84:	4013      	ands	r3, r2
    bb86:	d008      	beq.n	bb9a <_usb_host_interrupt_handler+0x5de>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_CONNECT])(_usb_instances);
    bb88:	4b32      	ldr	r3, [pc, #200]	; (bc54 <_usb_host_interrupt_handler+0x698>)
    bb8a:	447b      	add	r3, pc
    bb8c:	681b      	ldr	r3, [r3, #0]
    bb8e:	69da      	ldr	r2, [r3, #28]
    bb90:	4b31      	ldr	r3, [pc, #196]	; (bc58 <_usb_host_interrupt_handler+0x69c>)
    bb92:	447b      	add	r3, pc
    bb94:	681b      	ldr	r3, [r3, #0]
    bb96:	0018      	movs	r0, r3
    bb98:	4790      	blx	r2
		if (flags & USB_HOST_INTFLAG_DDISC) {
    bb9a:	683a      	ldr	r2, [r7, #0]
    bb9c:	2380      	movs	r3, #128	; 0x80
    bb9e:	009b      	lsls	r3, r3, #2
    bba0:	4013      	ands	r3, r2
    bba2:	d01b      	beq.n	bbdc <_usb_host_interrupt_handler+0x620>
			host_pipe_job_busy_status = 0;
    bba4:	4b14      	ldr	r3, [pc, #80]	; (bbf8 <_usb_host_interrupt_handler+0x63c>)
    bba6:	58e3      	ldr	r3, [r4, r3]
    bba8:	2200      	movs	r2, #0
    bbaa:	601a      	str	r2, [r3, #0]
			_usb_instances->hw->HOST.INTFLAG.reg = USB_HOST_INTFLAG_DDISC;
    bbac:	4b2b      	ldr	r3, [pc, #172]	; (bc5c <_usb_host_interrupt_handler+0x6a0>)
    bbae:	447b      	add	r3, pc
    bbb0:	681b      	ldr	r3, [r3, #0]
    bbb2:	681b      	ldr	r3, [r3, #0]
    bbb4:	2280      	movs	r2, #128	; 0x80
    bbb6:	0092      	lsls	r2, r2, #2
    bbb8:	839a      	strh	r2, [r3, #28]
			if(_usb_instances->host_enabled_callback_mask & (1 << USB_HOST_CALLBACK_DISCONNECT)) {
    bbba:	4b29      	ldr	r3, [pc, #164]	; (bc60 <_usb_host_interrupt_handler+0x6a4>)
    bbbc:	447b      	add	r3, pc
    bbbe:	681b      	ldr	r3, [r3, #0]
    bbc0:	22a5      	movs	r2, #165	; 0xa5
    bbc2:	5c9b      	ldrb	r3, [r3, r2]
    bbc4:	b25b      	sxtb	r3, r3
    bbc6:	2b00      	cmp	r3, #0
    bbc8:	da08      	bge.n	bbdc <_usb_host_interrupt_handler+0x620>
				(_usb_instances->host_callback[USB_HOST_CALLBACK_DISCONNECT])(_usb_instances);
    bbca:	4b26      	ldr	r3, [pc, #152]	; (bc64 <_usb_host_interrupt_handler+0x6a8>)
    bbcc:	447b      	add	r3, pc
    bbce:	681b      	ldr	r3, [r3, #0]
    bbd0:	6a1a      	ldr	r2, [r3, #32]
    bbd2:	4b25      	ldr	r3, [pc, #148]	; (bc68 <_usb_host_interrupt_handler+0x6ac>)
    bbd4:	447b      	add	r3, pc
    bbd6:	681b      	ldr	r3, [r3, #0]
    bbd8:	0018      	movs	r0, r3
    bbda:	4790      	blx	r2
}
    bbdc:	46c0      	nop			; (mov r8, r8)
    bbde:	46bd      	mov	sp, r7
    bbe0:	b003      	add	sp, #12
    bbe2:	bd90      	pop	{r4, r7, pc}
    bbe4:	1fff4a46 	.word	0x1fff4a46
    bbe8:	1fff4a30 	.word	0x1fff4a30
    bbec:	1fff4a24 	.word	0x1fff4a24
    bbf0:	1fff4a12 	.word	0x1fff4a12
    bbf4:	1fff4a0a 	.word	0x1fff4a0a
    bbf8:	000000d0 	.word	0x000000d0
    bbfc:	1fff49f0 	.word	0x1fff49f0
    bc00:	1fff49e4 	.word	0x1fff49e4
    bc04:	1fff49d2 	.word	0x1fff49d2
    bc08:	1fff49ca 	.word	0x1fff49ca
    bc0c:	1fff49b8 	.word	0x1fff49b8
    bc10:	1fff49ac 	.word	0x1fff49ac
    bc14:	1fff499a 	.word	0x1fff499a
    bc18:	1fff4992 	.word	0x1fff4992
    bc1c:	1fff4980 	.word	0x1fff4980
    bc20:	1fff4974 	.word	0x1fff4974
    bc24:	1fff4962 	.word	0x1fff4962
    bc28:	1fff495a 	.word	0x1fff495a
    bc2c:	1fff4948 	.word	0x1fff4948
    bc30:	1fff493c 	.word	0x1fff493c
    bc34:	1fff492a 	.word	0x1fff492a
    bc38:	1fff4922 	.word	0x1fff4922
    bc3c:	1fff4908 	.word	0x1fff4908
    bc40:	1fff48fc 	.word	0x1fff48fc
    bc44:	1fff48ea 	.word	0x1fff48ea
    bc48:	1fff48e2 	.word	0x1fff48e2
    bc4c:	1fff48c6 	.word	0x1fff48c6
    bc50:	1fff48b8 	.word	0x1fff48b8
    bc54:	1fff48a6 	.word	0x1fff48a6
    bc58:	1fff489e 	.word	0x1fff489e
    bc5c:	1fff4882 	.word	0x1fff4882
    bc60:	1fff4874 	.word	0x1fff4874
    bc64:	1fff4864 	.word	0x1fff4864
    bc68:	1fff485c 	.word	0x1fff485c

0000bc6c <usb_device_register_callback>:
 * \retval STATUS_OK    The callback was registered successfully.
 */
enum status_code usb_device_register_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type,
		usb_device_callback_t callback_func)
{
    bc6c:	b580      	push	{r7, lr}
    bc6e:	b084      	sub	sp, #16
    bc70:	af00      	add	r7, sp, #0
    bc72:	60f8      	str	r0, [r7, #12]
    bc74:	607a      	str	r2, [r7, #4]
    bc76:	230b      	movs	r3, #11
    bc78:	18fb      	adds	r3, r7, r3
    bc7a:	1c0a      	adds	r2, r1, #0
    bc7c:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_callback[callback_type] = callback_func;
    bc7e:	230b      	movs	r3, #11
    bc80:	18fb      	adds	r3, r7, r3
    bc82:	781a      	ldrb	r2, [r3, #0]
    bc84:	68fb      	ldr	r3, [r7, #12]
    bc86:	322e      	adds	r2, #46	; 0x2e
    bc88:	0092      	lsls	r2, r2, #2
    bc8a:	6879      	ldr	r1, [r7, #4]
    bc8c:	50d1      	str	r1, [r2, r3]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_registered_callback_mask |= _usb_device_irq_bits[callback_type];
    bc8e:	68fa      	ldr	r2, [r7, #12]
    bc90:	23aa      	movs	r3, #170	; 0xaa
    bc92:	005b      	lsls	r3, r3, #1
    bc94:	5ad2      	ldrh	r2, [r2, r3]
    bc96:	230b      	movs	r3, #11
    bc98:	18fb      	adds	r3, r7, r3
    bc9a:	7819      	ldrb	r1, [r3, #0]
    bc9c:	4b07      	ldr	r3, [pc, #28]	; (bcbc <usb_device_register_callback+0x50>)
    bc9e:	447b      	add	r3, pc
    bca0:	0049      	lsls	r1, r1, #1
    bca2:	5acb      	ldrh	r3, [r1, r3]
    bca4:	4313      	orrs	r3, r2
    bca6:	b299      	uxth	r1, r3
    bca8:	68fa      	ldr	r2, [r7, #12]
    bcaa:	23aa      	movs	r3, #170	; 0xaa
    bcac:	005b      	lsls	r3, r3, #1
    bcae:	52d1      	strh	r1, [r2, r3]

	return STATUS_OK;
    bcb0:	2300      	movs	r3, #0
}
    bcb2:	0018      	movs	r0, r3
    bcb4:	46bd      	mov	sp, r7
    bcb6:	b004      	add	sp, #16
    bcb8:	bd80      	pop	{r7, pc}
    bcba:	46c0      	nop			; (mov r8, r8)
    bcbc:	000036c6 	.word	0x000036c6

0000bcc0 <usb_device_enable_callback>:
 * \return Status of the callback enable operation.
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_enable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    bcc0:	b580      	push	{r7, lr}
    bcc2:	b082      	sub	sp, #8
    bcc4:	af00      	add	r7, sp, #0
    bcc6:	6078      	str	r0, [r7, #4]
    bcc8:	000a      	movs	r2, r1
    bcca:	1cfb      	adds	r3, r7, #3
    bccc:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* clear related flag */
	module_inst->hw->DEVICE.INTFLAG.reg = _usb_device_irq_bits[callback_type];
    bcce:	687b      	ldr	r3, [r7, #4]
    bcd0:	681b      	ldr	r3, [r3, #0]
    bcd2:	1cfa      	adds	r2, r7, #3
    bcd4:	7811      	ldrb	r1, [r2, #0]
    bcd6:	4a11      	ldr	r2, [pc, #68]	; (bd1c <usb_device_enable_callback+0x5c>)
    bcd8:	447a      	add	r2, pc
    bcda:	0049      	lsls	r1, r1, #1
    bcdc:	5a8a      	ldrh	r2, [r1, r2]
    bcde:	839a      	strh	r2, [r3, #28]

	/* Enable callback */
	module_inst->device_enabled_callback_mask |= _usb_device_irq_bits[callback_type];
    bce0:	687a      	ldr	r2, [r7, #4]
    bce2:	23ab      	movs	r3, #171	; 0xab
    bce4:	005b      	lsls	r3, r3, #1
    bce6:	5ad2      	ldrh	r2, [r2, r3]
    bce8:	1cfb      	adds	r3, r7, #3
    bcea:	7819      	ldrb	r1, [r3, #0]
    bcec:	4b0c      	ldr	r3, [pc, #48]	; (bd20 <usb_device_enable_callback+0x60>)
    bcee:	447b      	add	r3, pc
    bcf0:	0049      	lsls	r1, r1, #1
    bcf2:	5acb      	ldrh	r3, [r1, r3]
    bcf4:	4313      	orrs	r3, r2
    bcf6:	b299      	uxth	r1, r3
    bcf8:	687a      	ldr	r2, [r7, #4]
    bcfa:	23ab      	movs	r3, #171	; 0xab
    bcfc:	005b      	lsls	r3, r3, #1
    bcfe:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENSET.reg = _usb_device_irq_bits[callback_type];
    bd00:	687b      	ldr	r3, [r7, #4]
    bd02:	681b      	ldr	r3, [r3, #0]
    bd04:	1cfa      	adds	r2, r7, #3
    bd06:	7811      	ldrb	r1, [r2, #0]
    bd08:	4a06      	ldr	r2, [pc, #24]	; (bd24 <usb_device_enable_callback+0x64>)
    bd0a:	447a      	add	r2, pc
    bd0c:	0049      	lsls	r1, r1, #1
    bd0e:	5a8a      	ldrh	r2, [r1, r2]
    bd10:	831a      	strh	r2, [r3, #24]

	return STATUS_OK;
    bd12:	2300      	movs	r3, #0
}
    bd14:	0018      	movs	r0, r3
    bd16:	46bd      	mov	sp, r7
    bd18:	b002      	add	sp, #8
    bd1a:	bd80      	pop	{r7, pc}
    bd1c:	0000368c 	.word	0x0000368c
    bd20:	00003676 	.word	0x00003676
    bd24:	0000365a 	.word	0x0000365a

0000bd28 <usb_device_disable_callback>:
 * \return Status of the callback disable operation.
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_disable_callback(struct usb_module *module_inst,
		enum usb_device_callback callback_type)
{
    bd28:	b580      	push	{r7, lr}
    bd2a:	b082      	sub	sp, #8
    bd2c:	af00      	add	r7, sp, #0
    bd2e:	6078      	str	r0, [r7, #4]
    bd30:	000a      	movs	r2, r1
    bd32:	1cfb      	adds	r3, r7, #3
    bd34:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Disable callback */
	module_inst->device_enabled_callback_mask &= ~_usb_device_irq_bits[callback_type];
    bd36:	687a      	ldr	r2, [r7, #4]
    bd38:	23ab      	movs	r3, #171	; 0xab
    bd3a:	005b      	lsls	r3, r3, #1
    bd3c:	5ad3      	ldrh	r3, [r2, r3]
    bd3e:	b21b      	sxth	r3, r3
    bd40:	1cfa      	adds	r2, r7, #3
    bd42:	7811      	ldrb	r1, [r2, #0]
    bd44:	4a0d      	ldr	r2, [pc, #52]	; (bd7c <usb_device_disable_callback+0x54>)
    bd46:	447a      	add	r2, pc
    bd48:	0049      	lsls	r1, r1, #1
    bd4a:	5a8a      	ldrh	r2, [r1, r2]
    bd4c:	b212      	sxth	r2, r2
    bd4e:	43d2      	mvns	r2, r2
    bd50:	b212      	sxth	r2, r2
    bd52:	4013      	ands	r3, r2
    bd54:	b21b      	sxth	r3, r3
    bd56:	b299      	uxth	r1, r3
    bd58:	687a      	ldr	r2, [r7, #4]
    bd5a:	23ab      	movs	r3, #171	; 0xab
    bd5c:	005b      	lsls	r3, r3, #1
    bd5e:	52d1      	strh	r1, [r2, r3]

	module_inst->hw->DEVICE.INTENCLR.reg = _usb_device_irq_bits[callback_type];
    bd60:	687b      	ldr	r3, [r7, #4]
    bd62:	681b      	ldr	r3, [r3, #0]
    bd64:	1cfa      	adds	r2, r7, #3
    bd66:	7811      	ldrb	r1, [r2, #0]
    bd68:	4a05      	ldr	r2, [pc, #20]	; (bd80 <usb_device_disable_callback+0x58>)
    bd6a:	447a      	add	r2, pc
    bd6c:	0049      	lsls	r1, r1, #1
    bd6e:	5a8a      	ldrh	r2, [r1, r2]
    bd70:	829a      	strh	r2, [r3, #20]

	return STATUS_OK;
    bd72:	2300      	movs	r3, #0
}
    bd74:	0018      	movs	r0, r3
    bd76:	46bd      	mov	sp, r7
    bd78:	b002      	add	sp, #8
    bd7a:	bd80      	pop	{r7, pc}
    bd7c:	0000361e 	.word	0x0000361e
    bd80:	000035fa 	.word	0x000035fa

0000bd84 <usb_device_endpoint_register_callback>:
 */
enum status_code usb_device_endpoint_register_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type,
		usb_device_endpoint_callback_t callback_func)
{
    bd84:	b580      	push	{r7, lr}
    bd86:	b084      	sub	sp, #16
    bd88:	af00      	add	r7, sp, #0
    bd8a:	60f8      	str	r0, [r7, #12]
    bd8c:	0008      	movs	r0, r1
    bd8e:	0011      	movs	r1, r2
    bd90:	607b      	str	r3, [r7, #4]
    bd92:	230b      	movs	r3, #11
    bd94:	18fb      	adds	r3, r7, r3
    bd96:	1c02      	adds	r2, r0, #0
    bd98:	701a      	strb	r2, [r3, #0]
    bd9a:	230a      	movs	r3, #10
    bd9c:	18fb      	adds	r3, r7, r3
    bd9e:	1c0a      	adds	r2, r1, #0
    bda0:	701a      	strb	r2, [r3, #0]
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);
	Assert(callback_func);

	/* Register callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = callback_func;
    bda2:	230b      	movs	r3, #11
    bda4:	18fb      	adds	r3, r7, r3
    bda6:	7819      	ldrb	r1, [r3, #0]
    bda8:	230a      	movs	r3, #10
    bdaa:	18fb      	adds	r3, r7, r3
    bdac:	781b      	ldrb	r3, [r3, #0]
    bdae:	68fa      	ldr	r2, [r7, #12]
    bdb0:	0089      	lsls	r1, r1, #2
    bdb2:	18cb      	adds	r3, r1, r3
    bdb4:	3334      	adds	r3, #52	; 0x34
    bdb6:	009b      	lsls	r3, r3, #2
    bdb8:	18d3      	adds	r3, r2, r3
    bdba:	3304      	adds	r3, #4
    bdbc:	687a      	ldr	r2, [r7, #4]
    bdbe:	601a      	str	r2, [r3, #0]

	/* Set the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    bdc0:	230b      	movs	r3, #11
    bdc2:	18fb      	adds	r3, r7, r3
    bdc4:	781a      	ldrb	r2, [r3, #0]
    bdc6:	230b      	movs	r3, #11
    bdc8:	18fb      	adds	r3, r7, r3
    bdca:	7819      	ldrb	r1, [r3, #0]
    bdcc:	68f8      	ldr	r0, [r7, #12]
    bdce:	23ac      	movs	r3, #172	; 0xac
    bdd0:	005b      	lsls	r3, r3, #1
    bdd2:	1841      	adds	r1, r0, r1
    bdd4:	18cb      	adds	r3, r1, r3
    bdd6:	7819      	ldrb	r1, [r3, #0]
    bdd8:	230a      	movs	r3, #10
    bdda:	18fb      	adds	r3, r7, r3
    bddc:	781b      	ldrb	r3, [r3, #0]
    bdde:	4808      	ldr	r0, [pc, #32]	; (be00 <usb_device_endpoint_register_callback+0x7c>)
    bde0:	4478      	add	r0, pc
    bde2:	5cc3      	ldrb	r3, [r0, r3]
    bde4:	430b      	orrs	r3, r1
    bde6:	b2d8      	uxtb	r0, r3
    bde8:	68f9      	ldr	r1, [r7, #12]
    bdea:	23ac      	movs	r3, #172	; 0xac
    bdec:	005b      	lsls	r3, r3, #1
    bdee:	188a      	adds	r2, r1, r2
    bdf0:	18d3      	adds	r3, r2, r3
    bdf2:	1c02      	adds	r2, r0, #0
    bdf4:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    bdf6:	2300      	movs	r3, #0
}
    bdf8:	0018      	movs	r0, r3
    bdfa:	46bd      	mov	sp, r7
    bdfc:	b004      	add	sp, #16
    bdfe:	bd80      	pop	{r7, pc}
    be00:	00003594 	.word	0x00003594

0000be04 <usb_device_endpoint_unregister_callback>:
 * \retval STATUS_OK    The callback was unregistered successfully.
 */
enum status_code usb_device_endpoint_unregister_callback(
		struct usb_module *module_inst, uint8_t ep_num,
		enum usb_device_endpoint_callback callback_type)
{
    be04:	b580      	push	{r7, lr}
    be06:	b082      	sub	sp, #8
    be08:	af00      	add	r7, sp, #0
    be0a:	6078      	str	r0, [r7, #4]
    be0c:	0008      	movs	r0, r1
    be0e:	0011      	movs	r1, r2
    be10:	1cfb      	adds	r3, r7, #3
    be12:	1c02      	adds	r2, r0, #0
    be14:	701a      	strb	r2, [r3, #0]
    be16:	1cbb      	adds	r3, r7, #2
    be18:	1c0a      	adds	r2, r1, #0
    be1a:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_num < USB_EPT_NUM);

	/* Unregister callback function */
	module_inst->device_endpoint_callback[ep_num][callback_type] = NULL;
    be1c:	1cfb      	adds	r3, r7, #3
    be1e:	7819      	ldrb	r1, [r3, #0]
    be20:	1cbb      	adds	r3, r7, #2
    be22:	781b      	ldrb	r3, [r3, #0]
    be24:	687a      	ldr	r2, [r7, #4]
    be26:	0089      	lsls	r1, r1, #2
    be28:	18cb      	adds	r3, r1, r3
    be2a:	3334      	adds	r3, #52	; 0x34
    be2c:	009b      	lsls	r3, r3, #2
    be2e:	18d3      	adds	r3, r2, r3
    be30:	3304      	adds	r3, #4
    be32:	2200      	movs	r2, #0
    be34:	601a      	str	r2, [r3, #0]

	/* Clear the bit corresponding to the callback_type */
	module_inst->device_endpoint_registered_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    be36:	1cfb      	adds	r3, r7, #3
    be38:	781a      	ldrb	r2, [r3, #0]
    be3a:	1cfb      	adds	r3, r7, #3
    be3c:	7819      	ldrb	r1, [r3, #0]
    be3e:	6878      	ldr	r0, [r7, #4]
    be40:	23ac      	movs	r3, #172	; 0xac
    be42:	005b      	lsls	r3, r3, #1
    be44:	1841      	adds	r1, r0, r1
    be46:	18cb      	adds	r3, r1, r3
    be48:	781b      	ldrb	r3, [r3, #0]
    be4a:	b25b      	sxtb	r3, r3
    be4c:	1cb9      	adds	r1, r7, #2
    be4e:	7809      	ldrb	r1, [r1, #0]
    be50:	480a      	ldr	r0, [pc, #40]	; (be7c <usb_device_endpoint_unregister_callback+0x78>)
    be52:	4478      	add	r0, pc
    be54:	5c41      	ldrb	r1, [r0, r1]
    be56:	b249      	sxtb	r1, r1
    be58:	43c9      	mvns	r1, r1
    be5a:	b249      	sxtb	r1, r1
    be5c:	400b      	ands	r3, r1
    be5e:	b25b      	sxtb	r3, r3
    be60:	b2d8      	uxtb	r0, r3
    be62:	6879      	ldr	r1, [r7, #4]
    be64:	23ac      	movs	r3, #172	; 0xac
    be66:	005b      	lsls	r3, r3, #1
    be68:	188a      	adds	r2, r1, r2
    be6a:	18d3      	adds	r3, r2, r3
    be6c:	1c02      	adds	r2, r0, #0
    be6e:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    be70:	2300      	movs	r3, #0
}
    be72:	0018      	movs	r0, r3
    be74:	46bd      	mov	sp, r7
    be76:	b002      	add	sp, #8
    be78:	bd80      	pop	{r7, pc}
    be7a:	46c0      	nop			; (mov r8, r8)
    be7c:	00003522 	.word	0x00003522

0000be80 <usb_device_endpoint_enable_callback>:
 * \retval STATUS_OK    The callback was enabled successfully.
 */
enum status_code usb_device_endpoint_enable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    be80:	b580      	push	{r7, lr}
    be82:	b084      	sub	sp, #16
    be84:	af00      	add	r7, sp, #0
    be86:	6078      	str	r0, [r7, #4]
    be88:	0008      	movs	r0, r1
    be8a:	0011      	movs	r1, r2
    be8c:	1cfb      	adds	r3, r7, #3
    be8e:	1c02      	adds	r2, r0, #0
    be90:	701a      	strb	r2, [r3, #0]
    be92:	1cbb      	adds	r3, r7, #2
    be94:	1c0a      	adds	r2, r1, #0
    be96:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    be98:	230f      	movs	r3, #15
    be9a:	18fb      	adds	r3, r7, r3
    be9c:	1cfa      	adds	r2, r7, #3
    be9e:	7812      	ldrb	r2, [r2, #0]
    bea0:	210f      	movs	r1, #15
    bea2:	400a      	ands	r2, r1
    bea4:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] |= _usb_endpoint_irq_bits[callback_type];
    bea6:	230f      	movs	r3, #15
    bea8:	18fb      	adds	r3, r7, r3
    beaa:	781a      	ldrb	r2, [r3, #0]
    beac:	230f      	movs	r3, #15
    beae:	18fb      	adds	r3, r7, r3
    beb0:	7819      	ldrb	r1, [r3, #0]
    beb2:	6878      	ldr	r0, [r7, #4]
    beb4:	23b0      	movs	r3, #176	; 0xb0
    beb6:	005b      	lsls	r3, r3, #1
    beb8:	1841      	adds	r1, r0, r1
    beba:	18cb      	adds	r3, r1, r3
    bebc:	7819      	ldrb	r1, [r3, #0]
    bebe:	1cbb      	adds	r3, r7, #2
    bec0:	781b      	ldrb	r3, [r3, #0]
    bec2:	4855      	ldr	r0, [pc, #340]	; (c018 <usb_device_endpoint_enable_callback+0x198>)
    bec4:	4478      	add	r0, pc
    bec6:	5cc3      	ldrb	r3, [r0, r3]
    bec8:	430b      	orrs	r3, r1
    beca:	b2d8      	uxtb	r0, r3
    becc:	6879      	ldr	r1, [r7, #4]
    bece:	23b0      	movs	r3, #176	; 0xb0
    bed0:	005b      	lsls	r3, r3, #1
    bed2:	188a      	adds	r2, r1, r2
    bed4:	18d3      	adds	r3, r2, r3
    bed6:	1c02      	adds	r2, r0, #0
    bed8:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    beda:	1cbb      	adds	r3, r7, #2
    bedc:	781b      	ldrb	r3, [r3, #0]
    bede:	2b00      	cmp	r3, #0
    bee0:	d12f      	bne.n	bf42 <usb_device_endpoint_enable_callback+0xc2>
		if (ep_num == 0) { // control endpoint
    bee2:	230f      	movs	r3, #15
    bee4:	18fb      	adds	r3, r7, r3
    bee6:	781b      	ldrb	r3, [r3, #0]
    bee8:	2b00      	cmp	r3, #0
    beea:	d10c      	bne.n	bf06 <usb_device_endpoint_enable_callback+0x86>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0 | USB_DEVICE_EPINTENSET_TRCPT1;
    beec:	687b      	ldr	r3, [r7, #4]
    beee:	6819      	ldr	r1, [r3, #0]
    bef0:	230f      	movs	r3, #15
    bef2:	18fb      	adds	r3, r7, r3
    bef4:	781a      	ldrb	r2, [r3, #0]
    bef6:	230a      	movs	r3, #10
    bef8:	33ff      	adds	r3, #255	; 0xff
    befa:	0152      	lsls	r2, r2, #5
    befc:	188a      	adds	r2, r1, r2
    befe:	18d3      	adds	r3, r2, r3
    bf00:	2203      	movs	r2, #3
    bf02:	701a      	strb	r2, [r3, #0]
    bf04:	e01d      	b.n	bf42 <usb_device_endpoint_enable_callback+0xc2>
		} else if (ep & USB_EP_DIR_IN) {
    bf06:	1cfb      	adds	r3, r7, #3
    bf08:	781b      	ldrb	r3, [r3, #0]
    bf0a:	b25b      	sxtb	r3, r3
    bf0c:	2b00      	cmp	r3, #0
    bf0e:	da0c      	bge.n	bf2a <usb_device_endpoint_enable_callback+0xaa>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT1;
    bf10:	687b      	ldr	r3, [r7, #4]
    bf12:	6819      	ldr	r1, [r3, #0]
    bf14:	230f      	movs	r3, #15
    bf16:	18fb      	adds	r3, r7, r3
    bf18:	781a      	ldrb	r2, [r3, #0]
    bf1a:	230a      	movs	r3, #10
    bf1c:	33ff      	adds	r3, #255	; 0xff
    bf1e:	0152      	lsls	r2, r2, #5
    bf20:	188a      	adds	r2, r1, r2
    bf22:	18d3      	adds	r3, r2, r3
    bf24:	2202      	movs	r2, #2
    bf26:	701a      	strb	r2, [r3, #0]
    bf28:	e00b      	b.n	bf42 <usb_device_endpoint_enable_callback+0xc2>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRCPT0;
    bf2a:	687b      	ldr	r3, [r7, #4]
    bf2c:	6819      	ldr	r1, [r3, #0]
    bf2e:	230f      	movs	r3, #15
    bf30:	18fb      	adds	r3, r7, r3
    bf32:	781a      	ldrb	r2, [r3, #0]
    bf34:	230a      	movs	r3, #10
    bf36:	33ff      	adds	r3, #255	; 0xff
    bf38:	0152      	lsls	r2, r2, #5
    bf3a:	188a      	adds	r2, r1, r2
    bf3c:	18d3      	adds	r3, r2, r3
    bf3e:	2201      	movs	r2, #1
    bf40:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    bf42:	1cbb      	adds	r3, r7, #2
    bf44:	781b      	ldrb	r3, [r3, #0]
    bf46:	2b01      	cmp	r3, #1
    bf48:	d12f      	bne.n	bfaa <usb_device_endpoint_enable_callback+0x12a>
		if (ep_num == 0) { // control endpoint
    bf4a:	230f      	movs	r3, #15
    bf4c:	18fb      	adds	r3, r7, r3
    bf4e:	781b      	ldrb	r3, [r3, #0]
    bf50:	2b00      	cmp	r3, #0
    bf52:	d10c      	bne.n	bf6e <usb_device_endpoint_enable_callback+0xee>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0 | USB_DEVICE_EPINTENSET_TRFAIL1;
    bf54:	687b      	ldr	r3, [r7, #4]
    bf56:	6819      	ldr	r1, [r3, #0]
    bf58:	230f      	movs	r3, #15
    bf5a:	18fb      	adds	r3, r7, r3
    bf5c:	781a      	ldrb	r2, [r3, #0]
    bf5e:	230a      	movs	r3, #10
    bf60:	33ff      	adds	r3, #255	; 0xff
    bf62:	0152      	lsls	r2, r2, #5
    bf64:	188a      	adds	r2, r1, r2
    bf66:	18d3      	adds	r3, r2, r3
    bf68:	220c      	movs	r2, #12
    bf6a:	701a      	strb	r2, [r3, #0]
    bf6c:	e01d      	b.n	bfaa <usb_device_endpoint_enable_callback+0x12a>
		} else if (ep & USB_EP_DIR_IN) {
    bf6e:	1cfb      	adds	r3, r7, #3
    bf70:	781b      	ldrb	r3, [r3, #0]
    bf72:	b25b      	sxtb	r3, r3
    bf74:	2b00      	cmp	r3, #0
    bf76:	da0c      	bge.n	bf92 <usb_device_endpoint_enable_callback+0x112>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL1;
    bf78:	687b      	ldr	r3, [r7, #4]
    bf7a:	6819      	ldr	r1, [r3, #0]
    bf7c:	230f      	movs	r3, #15
    bf7e:	18fb      	adds	r3, r7, r3
    bf80:	781a      	ldrb	r2, [r3, #0]
    bf82:	230a      	movs	r3, #10
    bf84:	33ff      	adds	r3, #255	; 0xff
    bf86:	0152      	lsls	r2, r2, #5
    bf88:	188a      	adds	r2, r1, r2
    bf8a:	18d3      	adds	r3, r2, r3
    bf8c:	2208      	movs	r2, #8
    bf8e:	701a      	strb	r2, [r3, #0]
    bf90:	e00b      	b.n	bfaa <usb_device_endpoint_enable_callback+0x12a>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_TRFAIL0;
    bf92:	687b      	ldr	r3, [r7, #4]
    bf94:	6819      	ldr	r1, [r3, #0]
    bf96:	230f      	movs	r3, #15
    bf98:	18fb      	adds	r3, r7, r3
    bf9a:	781a      	ldrb	r2, [r3, #0]
    bf9c:	230a      	movs	r3, #10
    bf9e:	33ff      	adds	r3, #255	; 0xff
    bfa0:	0152      	lsls	r2, r2, #5
    bfa2:	188a      	adds	r2, r1, r2
    bfa4:	18d3      	adds	r3, r2, r3
    bfa6:	2204      	movs	r2, #4
    bfa8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    bfaa:	1cbb      	adds	r3, r7, #2
    bfac:	781b      	ldrb	r3, [r3, #0]
    bfae:	2b02      	cmp	r3, #2
    bfb0:	d10b      	bne.n	bfca <usb_device_endpoint_enable_callback+0x14a>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_RXSTP;
    bfb2:	687b      	ldr	r3, [r7, #4]
    bfb4:	6819      	ldr	r1, [r3, #0]
    bfb6:	230f      	movs	r3, #15
    bfb8:	18fb      	adds	r3, r7, r3
    bfba:	781a      	ldrb	r2, [r3, #0]
    bfbc:	230a      	movs	r3, #10
    bfbe:	33ff      	adds	r3, #255	; 0xff
    bfc0:	0152      	lsls	r2, r2, #5
    bfc2:	188a      	adds	r2, r1, r2
    bfc4:	18d3      	adds	r3, r2, r3
    bfc6:	2210      	movs	r2, #16
    bfc8:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    bfca:	1cbb      	adds	r3, r7, #2
    bfcc:	781b      	ldrb	r3, [r3, #0]
    bfce:	2b03      	cmp	r3, #3
    bfd0:	d11d      	bne.n	c00e <usb_device_endpoint_enable_callback+0x18e>
		if (ep & USB_EP_DIR_IN) {
    bfd2:	1cfb      	adds	r3, r7, #3
    bfd4:	781b      	ldrb	r3, [r3, #0]
    bfd6:	b25b      	sxtb	r3, r3
    bfd8:	2b00      	cmp	r3, #0
    bfda:	da0c      	bge.n	bff6 <usb_device_endpoint_enable_callback+0x176>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL1;
    bfdc:	687b      	ldr	r3, [r7, #4]
    bfde:	6819      	ldr	r1, [r3, #0]
    bfe0:	230f      	movs	r3, #15
    bfe2:	18fb      	adds	r3, r7, r3
    bfe4:	781a      	ldrb	r2, [r3, #0]
    bfe6:	230a      	movs	r3, #10
    bfe8:	33ff      	adds	r3, #255	; 0xff
    bfea:	0152      	lsls	r2, r2, #5
    bfec:	188a      	adds	r2, r1, r2
    bfee:	18d3      	adds	r3, r2, r3
    bff0:	2240      	movs	r2, #64	; 0x40
    bff2:	701a      	strb	r2, [r3, #0]
    bff4:	e00b      	b.n	c00e <usb_device_endpoint_enable_callback+0x18e>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENSET.reg = USB_DEVICE_EPINTENSET_STALL0;
    bff6:	687b      	ldr	r3, [r7, #4]
    bff8:	6819      	ldr	r1, [r3, #0]
    bffa:	230f      	movs	r3, #15
    bffc:	18fb      	adds	r3, r7, r3
    bffe:	781a      	ldrb	r2, [r3, #0]
    c000:	230a      	movs	r3, #10
    c002:	33ff      	adds	r3, #255	; 0xff
    c004:	0152      	lsls	r2, r2, #5
    c006:	188a      	adds	r2, r1, r2
    c008:	18d3      	adds	r3, r2, r3
    c00a:	2220      	movs	r2, #32
    c00c:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    c00e:	2300      	movs	r3, #0
}
    c010:	0018      	movs	r0, r3
    c012:	46bd      	mov	sp, r7
    c014:	b004      	add	sp, #16
    c016:	bd80      	pop	{r7, pc}
    c018:	000034b0 	.word	0x000034b0

0000c01c <usb_device_endpoint_disable_callback>:
 * \retval STATUS_OK    The callback was disabled successfully.
 */
enum status_code usb_device_endpoint_disable_callback(
		struct usb_module *module_inst, uint8_t ep,
		enum usb_device_endpoint_callback callback_type)
{
    c01c:	b580      	push	{r7, lr}
    c01e:	b084      	sub	sp, #16
    c020:	af00      	add	r7, sp, #0
    c022:	6078      	str	r0, [r7, #4]
    c024:	0008      	movs	r0, r1
    c026:	0011      	movs	r1, r2
    c028:	1cfb      	adds	r3, r7, #3
    c02a:	1c02      	adds	r2, r0, #0
    c02c:	701a      	strb	r2, [r3, #0]
    c02e:	1cbb      	adds	r3, r7, #2
    c030:	1c0a      	adds	r2, r1, #0
    c032:	701a      	strb	r2, [r3, #0]
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    c034:	230f      	movs	r3, #15
    c036:	18fb      	adds	r3, r7, r3
    c038:	1cfa      	adds	r2, r7, #3
    c03a:	7812      	ldrb	r2, [r2, #0]
    c03c:	210f      	movs	r1, #15
    c03e:	400a      	ands	r2, r1
    c040:	701a      	strb	r2, [r3, #0]
	Assert(ep_num < USB_EPT_NUM);

	/* Enable callback */
	module_inst->device_endpoint_enabled_callback_mask[ep_num] &= ~_usb_endpoint_irq_bits[callback_type];
    c042:	230f      	movs	r3, #15
    c044:	18fb      	adds	r3, r7, r3
    c046:	781a      	ldrb	r2, [r3, #0]
    c048:	230f      	movs	r3, #15
    c04a:	18fb      	adds	r3, r7, r3
    c04c:	7819      	ldrb	r1, [r3, #0]
    c04e:	6878      	ldr	r0, [r7, #4]
    c050:	23b0      	movs	r3, #176	; 0xb0
    c052:	005b      	lsls	r3, r3, #1
    c054:	1841      	adds	r1, r0, r1
    c056:	18cb      	adds	r3, r1, r3
    c058:	781b      	ldrb	r3, [r3, #0]
    c05a:	b25b      	sxtb	r3, r3
    c05c:	1cb9      	adds	r1, r7, #2
    c05e:	7809      	ldrb	r1, [r1, #0]
    c060:	4857      	ldr	r0, [pc, #348]	; (c1c0 <usb_device_endpoint_disable_callback+0x1a4>)
    c062:	4478      	add	r0, pc
    c064:	5c41      	ldrb	r1, [r0, r1]
    c066:	b249      	sxtb	r1, r1
    c068:	43c9      	mvns	r1, r1
    c06a:	b249      	sxtb	r1, r1
    c06c:	400b      	ands	r3, r1
    c06e:	b25b      	sxtb	r3, r3
    c070:	b2d8      	uxtb	r0, r3
    c072:	6879      	ldr	r1, [r7, #4]
    c074:	23b0      	movs	r3, #176	; 0xb0
    c076:	005b      	lsls	r3, r3, #1
    c078:	188a      	adds	r2, r1, r2
    c07a:	18d3      	adds	r3, r2, r3
    c07c:	1c02      	adds	r2, r0, #0
    c07e:	701a      	strb	r2, [r3, #0]

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRCPT) {
    c080:	1cbb      	adds	r3, r7, #2
    c082:	781b      	ldrb	r3, [r3, #0]
    c084:	2b00      	cmp	r3, #0
    c086:	d12f      	bne.n	c0e8 <usb_device_endpoint_disable_callback+0xcc>
		if (ep_num == 0) { // control endpoint
    c088:	230f      	movs	r3, #15
    c08a:	18fb      	adds	r3, r7, r3
    c08c:	781b      	ldrb	r3, [r3, #0]
    c08e:	2b00      	cmp	r3, #0
    c090:	d10c      	bne.n	c0ac <usb_device_endpoint_disable_callback+0x90>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0 | USB_DEVICE_EPINTENCLR_TRCPT1;
    c092:	687b      	ldr	r3, [r7, #4]
    c094:	6819      	ldr	r1, [r3, #0]
    c096:	230f      	movs	r3, #15
    c098:	18fb      	adds	r3, r7, r3
    c09a:	781a      	ldrb	r2, [r3, #0]
    c09c:	2384      	movs	r3, #132	; 0x84
    c09e:	005b      	lsls	r3, r3, #1
    c0a0:	0152      	lsls	r2, r2, #5
    c0a2:	188a      	adds	r2, r1, r2
    c0a4:	18d3      	adds	r3, r2, r3
    c0a6:	2203      	movs	r2, #3
    c0a8:	701a      	strb	r2, [r3, #0]
    c0aa:	e01d      	b.n	c0e8 <usb_device_endpoint_disable_callback+0xcc>
		} else if (ep & USB_EP_DIR_IN) {
    c0ac:	1cfb      	adds	r3, r7, #3
    c0ae:	781b      	ldrb	r3, [r3, #0]
    c0b0:	b25b      	sxtb	r3, r3
    c0b2:	2b00      	cmp	r3, #0
    c0b4:	da0c      	bge.n	c0d0 <usb_device_endpoint_disable_callback+0xb4>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT1;
    c0b6:	687b      	ldr	r3, [r7, #4]
    c0b8:	6819      	ldr	r1, [r3, #0]
    c0ba:	230f      	movs	r3, #15
    c0bc:	18fb      	adds	r3, r7, r3
    c0be:	781a      	ldrb	r2, [r3, #0]
    c0c0:	2384      	movs	r3, #132	; 0x84
    c0c2:	005b      	lsls	r3, r3, #1
    c0c4:	0152      	lsls	r2, r2, #5
    c0c6:	188a      	adds	r2, r1, r2
    c0c8:	18d3      	adds	r3, r2, r3
    c0ca:	2202      	movs	r2, #2
    c0cc:	701a      	strb	r2, [r3, #0]
    c0ce:	e00b      	b.n	c0e8 <usb_device_endpoint_disable_callback+0xcc>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg =  USB_DEVICE_EPINTENCLR_TRCPT0;
    c0d0:	687b      	ldr	r3, [r7, #4]
    c0d2:	6819      	ldr	r1, [r3, #0]
    c0d4:	230f      	movs	r3, #15
    c0d6:	18fb      	adds	r3, r7, r3
    c0d8:	781a      	ldrb	r2, [r3, #0]
    c0da:	2384      	movs	r3, #132	; 0x84
    c0dc:	005b      	lsls	r3, r3, #1
    c0de:	0152      	lsls	r2, r2, #5
    c0e0:	188a      	adds	r2, r1, r2
    c0e2:	18d3      	adds	r3, r2, r3
    c0e4:	2201      	movs	r2, #1
    c0e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL) {
    c0e8:	1cbb      	adds	r3, r7, #2
    c0ea:	781b      	ldrb	r3, [r3, #0]
    c0ec:	2b01      	cmp	r3, #1
    c0ee:	d12f      	bne.n	c150 <usb_device_endpoint_disable_callback+0x134>
		if (ep_num == 0) { // control endpoint
    c0f0:	230f      	movs	r3, #15
    c0f2:	18fb      	adds	r3, r7, r3
    c0f4:	781b      	ldrb	r3, [r3, #0]
    c0f6:	2b00      	cmp	r3, #0
    c0f8:	d10c      	bne.n	c114 <usb_device_endpoint_disable_callback+0xf8>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0 | USB_DEVICE_EPINTENCLR_TRFAIL1;
    c0fa:	687b      	ldr	r3, [r7, #4]
    c0fc:	6819      	ldr	r1, [r3, #0]
    c0fe:	230f      	movs	r3, #15
    c100:	18fb      	adds	r3, r7, r3
    c102:	781a      	ldrb	r2, [r3, #0]
    c104:	2384      	movs	r3, #132	; 0x84
    c106:	005b      	lsls	r3, r3, #1
    c108:	0152      	lsls	r2, r2, #5
    c10a:	188a      	adds	r2, r1, r2
    c10c:	18d3      	adds	r3, r2, r3
    c10e:	220c      	movs	r2, #12
    c110:	701a      	strb	r2, [r3, #0]
    c112:	e01d      	b.n	c150 <usb_device_endpoint_disable_callback+0x134>
		} else if (ep & USB_EP_DIR_IN) {
    c114:	1cfb      	adds	r3, r7, #3
    c116:	781b      	ldrb	r3, [r3, #0]
    c118:	b25b      	sxtb	r3, r3
    c11a:	2b00      	cmp	r3, #0
    c11c:	da0c      	bge.n	c138 <usb_device_endpoint_disable_callback+0x11c>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL1;
    c11e:	687b      	ldr	r3, [r7, #4]
    c120:	6819      	ldr	r1, [r3, #0]
    c122:	230f      	movs	r3, #15
    c124:	18fb      	adds	r3, r7, r3
    c126:	781a      	ldrb	r2, [r3, #0]
    c128:	2384      	movs	r3, #132	; 0x84
    c12a:	005b      	lsls	r3, r3, #1
    c12c:	0152      	lsls	r2, r2, #5
    c12e:	188a      	adds	r2, r1, r2
    c130:	18d3      	adds	r3, r2, r3
    c132:	2208      	movs	r2, #8
    c134:	701a      	strb	r2, [r3, #0]
    c136:	e00b      	b.n	c150 <usb_device_endpoint_disable_callback+0x134>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_TRFAIL0;
    c138:	687b      	ldr	r3, [r7, #4]
    c13a:	6819      	ldr	r1, [r3, #0]
    c13c:	230f      	movs	r3, #15
    c13e:	18fb      	adds	r3, r7, r3
    c140:	781a      	ldrb	r2, [r3, #0]
    c142:	2384      	movs	r3, #132	; 0x84
    c144:	005b      	lsls	r3, r3, #1
    c146:	0152      	lsls	r2, r2, #5
    c148:	188a      	adds	r2, r1, r2
    c14a:	18d3      	adds	r3, r2, r3
    c14c:	2204      	movs	r2, #4
    c14e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_RXSTP) {
    c150:	1cbb      	adds	r3, r7, #2
    c152:	781b      	ldrb	r3, [r3, #0]
    c154:	2b02      	cmp	r3, #2
    c156:	d10b      	bne.n	c170 <usb_device_endpoint_disable_callback+0x154>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_RXSTP;
    c158:	687b      	ldr	r3, [r7, #4]
    c15a:	6819      	ldr	r1, [r3, #0]
    c15c:	230f      	movs	r3, #15
    c15e:	18fb      	adds	r3, r7, r3
    c160:	781a      	ldrb	r2, [r3, #0]
    c162:	2384      	movs	r3, #132	; 0x84
    c164:	005b      	lsls	r3, r3, #1
    c166:	0152      	lsls	r2, r2, #5
    c168:	188a      	adds	r2, r1, r2
    c16a:	18d3      	adds	r3, r2, r3
    c16c:	2210      	movs	r2, #16
    c16e:	701a      	strb	r2, [r3, #0]
	}

	if (callback_type == USB_DEVICE_ENDPOINT_CALLBACK_STALL) {
    c170:	1cbb      	adds	r3, r7, #2
    c172:	781b      	ldrb	r3, [r3, #0]
    c174:	2b03      	cmp	r3, #3
    c176:	d11d      	bne.n	c1b4 <usb_device_endpoint_disable_callback+0x198>
		if (ep & USB_EP_DIR_IN) {
    c178:	1cfb      	adds	r3, r7, #3
    c17a:	781b      	ldrb	r3, [r3, #0]
    c17c:	b25b      	sxtb	r3, r3
    c17e:	2b00      	cmp	r3, #0
    c180:	da0c      	bge.n	c19c <usb_device_endpoint_disable_callback+0x180>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL1;
    c182:	687b      	ldr	r3, [r7, #4]
    c184:	6819      	ldr	r1, [r3, #0]
    c186:	230f      	movs	r3, #15
    c188:	18fb      	adds	r3, r7, r3
    c18a:	781a      	ldrb	r2, [r3, #0]
    c18c:	2384      	movs	r3, #132	; 0x84
    c18e:	005b      	lsls	r3, r3, #1
    c190:	0152      	lsls	r2, r2, #5
    c192:	188a      	adds	r2, r1, r2
    c194:	18d3      	adds	r3, r2, r3
    c196:	2240      	movs	r2, #64	; 0x40
    c198:	701a      	strb	r2, [r3, #0]
    c19a:	e00b      	b.n	c1b4 <usb_device_endpoint_disable_callback+0x198>
		} else {
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTENCLR.reg = USB_DEVICE_EPINTENCLR_STALL0;
    c19c:	687b      	ldr	r3, [r7, #4]
    c19e:	6819      	ldr	r1, [r3, #0]
    c1a0:	230f      	movs	r3, #15
    c1a2:	18fb      	adds	r3, r7, r3
    c1a4:	781a      	ldrb	r2, [r3, #0]
    c1a6:	2384      	movs	r3, #132	; 0x84
    c1a8:	005b      	lsls	r3, r3, #1
    c1aa:	0152      	lsls	r2, r2, #5
    c1ac:	188a      	adds	r2, r1, r2
    c1ae:	18d3      	adds	r3, r2, r3
    c1b0:	2220      	movs	r2, #32
    c1b2:	701a      	strb	r2, [r3, #0]
		}
	}

	return STATUS_OK;
    c1b4:	2300      	movs	r3, #0
}
    c1b6:	0018      	movs	r0, r3
    c1b8:	46bd      	mov	sp, r7
    c1ba:	b004      	add	sp, #16
    c1bc:	bd80      	pop	{r7, pc}
    c1be:	46c0      	nop			; (mov r8, r8)
    c1c0:	00003312 	.word	0x00003312

0000c1c4 <usb_device_endpoint_get_config_defaults>:
 * \li endpoint type is control
 *
 * \param[out] ep_config  Configuration structure to initialize to default values
 */
void usb_device_endpoint_get_config_defaults(struct usb_device_endpoint_config *ep_config)
{
    c1c4:	b580      	push	{r7, lr}
    c1c6:	b082      	sub	sp, #8
    c1c8:	af00      	add	r7, sp, #0
    c1ca:	6078      	str	r0, [r7, #4]
	/* Sanity check arguments */
	Assert(ep_config);

	/* Write default config to config struct */
	ep_config->ep_address = 0;
    c1cc:	687b      	ldr	r3, [r7, #4]
    c1ce:	2200      	movs	r2, #0
    c1d0:	701a      	strb	r2, [r3, #0]
	ep_config->ep_size = USB_ENDPOINT_8_BYTE;
    c1d2:	687b      	ldr	r3, [r7, #4]
    c1d4:	2200      	movs	r2, #0
    c1d6:	705a      	strb	r2, [r3, #1]
	ep_config->auto_zlp = false;
    c1d8:	687b      	ldr	r3, [r7, #4]
    c1da:	2200      	movs	r2, #0
    c1dc:	709a      	strb	r2, [r3, #2]
	ep_config->ep_type = USB_DEVICE_ENDPOINT_TYPE_CONTROL;
    c1de:	687b      	ldr	r3, [r7, #4]
    c1e0:	2201      	movs	r2, #1
    c1e2:	70da      	strb	r2, [r3, #3]
}
    c1e4:	46c0      	nop			; (mov r8, r8)
    c1e6:	46bd      	mov	sp, r7
    c1e8:	b002      	add	sp, #8
    c1ea:	bd80      	pop	{r7, pc}

0000c1ec <usb_device_endpoint_set_config>:
 * \retval STATUS_OK         The device endpoint was configured successfully
 * \retval STATUS_ERR_DENIED The endpoint address is already configured
 */
enum status_code usb_device_endpoint_set_config(struct usb_module *module_inst,
		struct usb_device_endpoint_config *ep_config)
{
    c1ec:	b5b0      	push	{r4, r5, r7, lr}
    c1ee:	b084      	sub	sp, #16
    c1f0:	af00      	add	r7, sp, #0
    c1f2:	6078      	str	r0, [r7, #4]
    c1f4:	6039      	str	r1, [r7, #0]
    c1f6:	4bdf      	ldr	r3, [pc, #892]	; (c574 <usb_device_endpoint_set_config+0x388>)
    c1f8:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(ep_config);

	uint8_t ep_num = ep_config->ep_address & USB_EP_ADDR_MASK;
    c1fa:	683a      	ldr	r2, [r7, #0]
    c1fc:	7811      	ldrb	r1, [r2, #0]
    c1fe:	220f      	movs	r2, #15
    c200:	18ba      	adds	r2, r7, r2
    c202:	200f      	movs	r0, #15
    c204:	4001      	ands	r1, r0
    c206:	7011      	strb	r1, [r2, #0]
	uint8_t ep_bank = (ep_config->ep_address & USB_EP_DIR_IN) ? 1 : 0;
    c208:	683a      	ldr	r2, [r7, #0]
    c20a:	7812      	ldrb	r2, [r2, #0]
    c20c:	b252      	sxtb	r2, r2
    c20e:	b2d2      	uxtb	r2, r2
    c210:	09d2      	lsrs	r2, r2, #7
    c212:	b2d1      	uxtb	r1, r2
    c214:	220e      	movs	r2, #14
    c216:	18ba      	adds	r2, r7, r2
    c218:	7011      	strb	r1, [r2, #0]

	switch (ep_config->ep_type) {
    c21a:	683a      	ldr	r2, [r7, #0]
    c21c:	78d2      	ldrb	r2, [r2, #3]
    c21e:	2a04      	cmp	r2, #4
    c220:	d900      	bls.n	c224 <usb_device_endpoint_set_config+0x38>
    c222:	e214      	b.n	c64e <usb_device_endpoint_set_config+0x462>
    c224:	0010      	movs	r0, r2
    c226:	f001 fb69 	bl	d8fc <__gnu_thumb1_case_si>
    c22a:	46c0      	nop			; (mov r8, r8)
    c22c:	00000014 	.word	0x00000014
    c230:	0000002a 	.word	0x0000002a
    c234:	000001aa 	.word	0x000001aa
    c238:	00000278 	.word	0x00000278
    c23c:	00000354 	.word	0x00000354
		case USB_DEVICE_ENDPOINT_TYPE_DISABLE:
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(0) |  USB_DEVICE_EPCFG_EPTYPE1(0);
    c240:	687b      	ldr	r3, [r7, #4]
    c242:	681b      	ldr	r3, [r3, #0]
    c244:	220f      	movs	r2, #15
    c246:	18ba      	adds	r2, r7, r2
    c248:	7812      	ldrb	r2, [r2, #0]
    c24a:	3208      	adds	r2, #8
    c24c:	0152      	lsls	r2, r2, #5
    c24e:	2100      	movs	r1, #0
    c250:	54d1      	strb	r1, [r2, r3]
			return STATUS_OK;
    c252:	2300      	movs	r3, #0
    c254:	e259      	b.n	c70a <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_CONTROL:
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    c256:	687a      	ldr	r2, [r7, #4]
    c258:	6812      	ldr	r2, [r2, #0]
    c25a:	210f      	movs	r1, #15
    c25c:	1879      	adds	r1, r7, r1
    c25e:	7809      	ldrb	r1, [r1, #0]
    c260:	3108      	adds	r1, #8
    c262:	0149      	lsls	r1, r1, #5
    c264:	5c8a      	ldrb	r2, [r1, r2]
    c266:	b2d2      	uxtb	r2, r2
    c268:	0011      	movs	r1, r2
    c26a:	2207      	movs	r2, #7
    c26c:	400a      	ands	r2, r1
    c26e:	d130      	bne.n	c2d2 <usb_device_endpoint_set_config+0xe6>
				(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0) {
    c270:	687a      	ldr	r2, [r7, #4]
    c272:	6812      	ldr	r2, [r2, #0]
    c274:	210f      	movs	r1, #15
    c276:	1879      	adds	r1, r7, r1
    c278:	7809      	ldrb	r1, [r1, #0]
    c27a:	3108      	adds	r1, #8
    c27c:	0149      	lsls	r1, r1, #5
    c27e:	5c8a      	ldrb	r2, [r1, r2]
    c280:	b2d2      	uxtb	r2, r2
    c282:	0011      	movs	r1, r2
    c284:	2270      	movs	r2, #112	; 0x70
    c286:	400a      	ands	r2, r1
			if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0 && \
    c288:	d123      	bne.n	c2d2 <usb_device_endpoint_set_config+0xe6>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg = USB_DEVICE_EPCFG_EPTYPE0(1) | USB_DEVICE_EPCFG_EPTYPE1(1);
    c28a:	687a      	ldr	r2, [r7, #4]
    c28c:	6812      	ldr	r2, [r2, #0]
    c28e:	210f      	movs	r1, #15
    c290:	1879      	adds	r1, r7, r1
    c292:	7809      	ldrb	r1, [r1, #0]
    c294:	3108      	adds	r1, #8
    c296:	0149      	lsls	r1, r1, #5
    c298:	2011      	movs	r0, #17
    c29a:	5488      	strb	r0, [r1, r2]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    c29c:	687a      	ldr	r2, [r7, #4]
    c29e:	6811      	ldr	r1, [r2, #0]
    c2a0:	220f      	movs	r2, #15
    c2a2:	18ba      	adds	r2, r7, r2
    c2a4:	7812      	ldrb	r2, [r2, #0]
    c2a6:	3208      	adds	r2, #8
    c2a8:	0152      	lsls	r2, r2, #5
    c2aa:	188a      	adds	r2, r1, r2
    c2ac:	3205      	adds	r2, #5
    c2ae:	2140      	movs	r1, #64	; 0x40
    c2b0:	7011      	strb	r1, [r2, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    c2b2:	687a      	ldr	r2, [r7, #4]
    c2b4:	6811      	ldr	r1, [r2, #0]
    c2b6:	220f      	movs	r2, #15
    c2b8:	18ba      	adds	r2, r7, r2
    c2ba:	7812      	ldrb	r2, [r2, #0]
    c2bc:	3208      	adds	r2, #8
    c2be:	0152      	lsls	r2, r2, #5
    c2c0:	188a      	adds	r2, r1, r2
    c2c2:	3204      	adds	r2, #4
    c2c4:	2180      	movs	r1, #128	; 0x80
    c2c6:	7011      	strb	r1, [r2, #0]
			} else {
				return STATUS_ERR_DENIED;
			}
			if (true == ep_config->auto_zlp) {
    c2c8:	683a      	ldr	r2, [r7, #0]
    c2ca:	7892      	ldrb	r2, [r2, #2]
    c2cc:	2a00      	cmp	r2, #0
    c2ce:	d102      	bne.n	c2d6 <usb_device_endpoint_set_config+0xea>
    c2d0:	e02c      	b.n	c32c <usb_device_endpoint_set_config+0x140>
				return STATUS_ERR_DENIED;
    c2d2:	231c      	movs	r3, #28
    c2d4:	e219      	b.n	c70a <usb_device_endpoint_set_config+0x51e>
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    c2d6:	220f      	movs	r2, #15
    c2d8:	18ba      	adds	r2, r7, r2
    c2da:	7814      	ldrb	r4, [r2, #0]
    c2dc:	220f      	movs	r2, #15
    c2de:	18ba      	adds	r2, r7, r2
    c2e0:	7812      	ldrb	r2, [r2, #0]
    c2e2:	49a5      	ldr	r1, [pc, #660]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c2e4:	5859      	ldr	r1, [r3, r1]
    c2e6:	0152      	lsls	r2, r2, #5
    c2e8:	188a      	adds	r2, r1, r2
    c2ea:	3204      	adds	r2, #4
    c2ec:	6812      	ldr	r2, [r2, #0]
    c2ee:	2180      	movs	r1, #128	; 0x80
    c2f0:	0609      	lsls	r1, r1, #24
    c2f2:	4311      	orrs	r1, r2
    c2f4:	4aa0      	ldr	r2, [pc, #640]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c2f6:	5898      	ldr	r0, [r3, r2]
    c2f8:	0162      	lsls	r2, r4, #5
    c2fa:	1882      	adds	r2, r0, r2
    c2fc:	3204      	adds	r2, #4
    c2fe:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    c300:	220f      	movs	r2, #15
    c302:	18ba      	adds	r2, r7, r2
    c304:	7814      	ldrb	r4, [r2, #0]
    c306:	220f      	movs	r2, #15
    c308:	18ba      	adds	r2, r7, r2
    c30a:	7812      	ldrb	r2, [r2, #0]
    c30c:	499a      	ldr	r1, [pc, #616]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c30e:	5859      	ldr	r1, [r3, r1]
    c310:	0152      	lsls	r2, r2, #5
    c312:	188a      	adds	r2, r1, r2
    c314:	3214      	adds	r2, #20
    c316:	6812      	ldr	r2, [r2, #0]
    c318:	2180      	movs	r1, #128	; 0x80
    c31a:	0609      	lsls	r1, r1, #24
    c31c:	4311      	orrs	r1, r2
    c31e:	4a96      	ldr	r2, [pc, #600]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c320:	5898      	ldr	r0, [r3, r2]
    c322:	0162      	lsls	r2, r4, #5
    c324:	1882      	adds	r2, r0, r2
    c326:	3214      	adds	r2, #20
    c328:	6011      	str	r1, [r2, #0]
    c32a:	e027      	b.n	c37c <usb_device_endpoint_set_config+0x190>
			} else {
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    c32c:	220f      	movs	r2, #15
    c32e:	18ba      	adds	r2, r7, r2
    c330:	7814      	ldrb	r4, [r2, #0]
    c332:	220f      	movs	r2, #15
    c334:	18ba      	adds	r2, r7, r2
    c336:	7812      	ldrb	r2, [r2, #0]
    c338:	498f      	ldr	r1, [pc, #572]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c33a:	5859      	ldr	r1, [r3, r1]
    c33c:	0152      	lsls	r2, r2, #5
    c33e:	188a      	adds	r2, r1, r2
    c340:	3204      	adds	r2, #4
    c342:	6812      	ldr	r2, [r2, #0]
    c344:	0052      	lsls	r2, r2, #1
    c346:	0851      	lsrs	r1, r2, #1
    c348:	4a8b      	ldr	r2, [pc, #556]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c34a:	5898      	ldr	r0, [r3, r2]
    c34c:	0162      	lsls	r2, r4, #5
    c34e:	1882      	adds	r2, r0, r2
    c350:	3204      	adds	r2, #4
    c352:	6011      	str	r1, [r2, #0]
				usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    c354:	220f      	movs	r2, #15
    c356:	18ba      	adds	r2, r7, r2
    c358:	7814      	ldrb	r4, [r2, #0]
    c35a:	220f      	movs	r2, #15
    c35c:	18ba      	adds	r2, r7, r2
    c35e:	7812      	ldrb	r2, [r2, #0]
    c360:	4985      	ldr	r1, [pc, #532]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c362:	5859      	ldr	r1, [r3, r1]
    c364:	0152      	lsls	r2, r2, #5
    c366:	188a      	adds	r2, r1, r2
    c368:	3214      	adds	r2, #20
    c36a:	6812      	ldr	r2, [r2, #0]
    c36c:	0052      	lsls	r2, r2, #1
    c36e:	0851      	lsrs	r1, r2, #1
    c370:	4a81      	ldr	r2, [pc, #516]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c372:	5898      	ldr	r0, [r3, r2]
    c374:	0162      	lsls	r2, r4, #5
    c376:	1882      	adds	r2, r0, r2
    c378:	3214      	adds	r2, #20
    c37a:	6011      	str	r1, [r2, #0]
			}
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.SIZE = ep_config->ep_size;
    c37c:	220f      	movs	r2, #15
    c37e:	18ba      	adds	r2, r7, r2
    c380:	7812      	ldrb	r2, [r2, #0]
    c382:	6839      	ldr	r1, [r7, #0]
    c384:	7849      	ldrb	r1, [r1, #1]
    c386:	1c08      	adds	r0, r1, #0
    c388:	2107      	movs	r1, #7
    c38a:	4001      	ands	r1, r0
    c38c:	b2c8      	uxtb	r0, r1
    c38e:	497a      	ldr	r1, [pc, #488]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c390:	5859      	ldr	r1, [r3, r1]
    c392:	0152      	lsls	r2, r2, #5
    c394:	188a      	adds	r2, r1, r2
    c396:	6851      	ldr	r1, [r2, #4]
    c398:	2407      	movs	r4, #7
    c39a:	4020      	ands	r0, r4
    c39c:	0700      	lsls	r0, r0, #28
    c39e:	4c77      	ldr	r4, [pc, #476]	; (c57c <usb_device_endpoint_set_config+0x390>)
    c3a0:	4021      	ands	r1, r4
    c3a2:	4301      	orrs	r1, r0
    c3a4:	6051      	str	r1, [r2, #4]
			usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.SIZE = ep_config->ep_size;
    c3a6:	220f      	movs	r2, #15
    c3a8:	18ba      	adds	r2, r7, r2
    c3aa:	7810      	ldrb	r0, [r2, #0]
    c3ac:	683a      	ldr	r2, [r7, #0]
    c3ae:	7852      	ldrb	r2, [r2, #1]
    c3b0:	1c11      	adds	r1, r2, #0
    c3b2:	2207      	movs	r2, #7
    c3b4:	400a      	ands	r2, r1
    c3b6:	b2d1      	uxtb	r1, r2
    c3b8:	4a6f      	ldr	r2, [pc, #444]	; (c578 <usb_device_endpoint_set_config+0x38c>)
    c3ba:	589a      	ldr	r2, [r3, r2]
    c3bc:	0143      	lsls	r3, r0, #5
    c3be:	18d3      	adds	r3, r2, r3
    c3c0:	3310      	adds	r3, #16
    c3c2:	685a      	ldr	r2, [r3, #4]
    c3c4:	2007      	movs	r0, #7
    c3c6:	4001      	ands	r1, r0
    c3c8:	0709      	lsls	r1, r1, #28
    c3ca:	486c      	ldr	r0, [pc, #432]	; (c57c <usb_device_endpoint_set_config+0x390>)
    c3cc:	4002      	ands	r2, r0
    c3ce:	430a      	orrs	r2, r1
    c3d0:	605a      	str	r2, [r3, #4]
			return STATUS_OK;
    c3d2:	2300      	movs	r3, #0
    c3d4:	e199      	b.n	c70a <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_ISOCHRONOUS:
			if (ep_bank) {
    c3d6:	220e      	movs	r2, #14
    c3d8:	18ba      	adds	r2, r7, r2
    c3da:	7812      	ldrb	r2, [r2, #0]
    c3dc:	2a00      	cmp	r2, #0
    c3de:	d030      	beq.n	c442 <usb_device_endpoint_set_config+0x256>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    c3e0:	687a      	ldr	r2, [r7, #4]
    c3e2:	6812      	ldr	r2, [r2, #0]
    c3e4:	210f      	movs	r1, #15
    c3e6:	1879      	adds	r1, r7, r1
    c3e8:	7809      	ldrb	r1, [r1, #0]
    c3ea:	3108      	adds	r1, #8
    c3ec:	0149      	lsls	r1, r1, #5
    c3ee:	5c8a      	ldrb	r2, [r1, r2]
    c3f0:	b2d2      	uxtb	r2, r2
    c3f2:	0011      	movs	r1, r2
    c3f4:	2270      	movs	r2, #112	; 0x70
    c3f6:	400a      	ands	r2, r1
    c3f8:	d121      	bne.n	c43e <usb_device_endpoint_set_config+0x252>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(2);
    c3fa:	687a      	ldr	r2, [r7, #4]
    c3fc:	6811      	ldr	r1, [r2, #0]
    c3fe:	220f      	movs	r2, #15
    c400:	18ba      	adds	r2, r7, r2
    c402:	7810      	ldrb	r0, [r2, #0]
    c404:	687a      	ldr	r2, [r7, #4]
    c406:	6812      	ldr	r2, [r2, #0]
    c408:	240f      	movs	r4, #15
    c40a:	193c      	adds	r4, r7, r4
    c40c:	7824      	ldrb	r4, [r4, #0]
    c40e:	3408      	adds	r4, #8
    c410:	0164      	lsls	r4, r4, #5
    c412:	5ca2      	ldrb	r2, [r4, r2]
    c414:	b2d2      	uxtb	r2, r2
    c416:	2420      	movs	r4, #32
    c418:	4322      	orrs	r2, r4
    c41a:	b2d4      	uxtb	r4, r2
    c41c:	0002      	movs	r2, r0
    c41e:	3208      	adds	r2, #8
    c420:	0152      	lsls	r2, r2, #5
    c422:	1c20      	adds	r0, r4, #0
    c424:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    c426:	687a      	ldr	r2, [r7, #4]
    c428:	6811      	ldr	r1, [r2, #0]
    c42a:	220f      	movs	r2, #15
    c42c:	18ba      	adds	r2, r7, r2
    c42e:	7812      	ldrb	r2, [r2, #0]
    c430:	3208      	adds	r2, #8
    c432:	0152      	lsls	r2, r2, #5
    c434:	188a      	adds	r2, r1, r2
    c436:	3204      	adds	r2, #4
    c438:	2180      	movs	r1, #128	; 0x80
    c43a:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    c43c:	e108      	b.n	c650 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    c43e:	231c      	movs	r3, #28
    c440:	e163      	b.n	c70a <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    c442:	687a      	ldr	r2, [r7, #4]
    c444:	6812      	ldr	r2, [r2, #0]
    c446:	210f      	movs	r1, #15
    c448:	1879      	adds	r1, r7, r1
    c44a:	7809      	ldrb	r1, [r1, #0]
    c44c:	3108      	adds	r1, #8
    c44e:	0149      	lsls	r1, r1, #5
    c450:	5c8a      	ldrb	r2, [r1, r2]
    c452:	b2d2      	uxtb	r2, r2
    c454:	0011      	movs	r1, r2
    c456:	2207      	movs	r2, #7
    c458:	400a      	ands	r2, r1
    c45a:	d121      	bne.n	c4a0 <usb_device_endpoint_set_config+0x2b4>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(2);
    c45c:	687a      	ldr	r2, [r7, #4]
    c45e:	6811      	ldr	r1, [r2, #0]
    c460:	220f      	movs	r2, #15
    c462:	18ba      	adds	r2, r7, r2
    c464:	7810      	ldrb	r0, [r2, #0]
    c466:	687a      	ldr	r2, [r7, #4]
    c468:	6812      	ldr	r2, [r2, #0]
    c46a:	240f      	movs	r4, #15
    c46c:	193c      	adds	r4, r7, r4
    c46e:	7824      	ldrb	r4, [r4, #0]
    c470:	3408      	adds	r4, #8
    c472:	0164      	lsls	r4, r4, #5
    c474:	5ca2      	ldrb	r2, [r4, r2]
    c476:	b2d2      	uxtb	r2, r2
    c478:	2402      	movs	r4, #2
    c47a:	4322      	orrs	r2, r4
    c47c:	b2d4      	uxtb	r4, r2
    c47e:	0002      	movs	r2, r0
    c480:	3208      	adds	r2, #8
    c482:	0152      	lsls	r2, r2, #5
    c484:	1c20      	adds	r0, r4, #0
    c486:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    c488:	687a      	ldr	r2, [r7, #4]
    c48a:	6811      	ldr	r1, [r2, #0]
    c48c:	220f      	movs	r2, #15
    c48e:	18ba      	adds	r2, r7, r2
    c490:	7812      	ldrb	r2, [r2, #0]
    c492:	3208      	adds	r2, #8
    c494:	0152      	lsls	r2, r2, #5
    c496:	188a      	adds	r2, r1, r2
    c498:	3205      	adds	r2, #5
    c49a:	2140      	movs	r1, #64	; 0x40
    c49c:	7011      	strb	r1, [r2, #0]
			break;
    c49e:	e0d7      	b.n	c650 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    c4a0:	231c      	movs	r3, #28
    c4a2:	e132      	b.n	c70a <usb_device_endpoint_set_config+0x51e>

		case USB_DEVICE_ENDPOINT_TYPE_BULK:
			if (ep_bank) {
    c4a4:	220e      	movs	r2, #14
    c4a6:	18ba      	adds	r2, r7, r2
    c4a8:	7812      	ldrb	r2, [r2, #0]
    c4aa:	2a00      	cmp	r2, #0
    c4ac:	d030      	beq.n	c510 <usb_device_endpoint_set_config+0x324>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    c4ae:	687a      	ldr	r2, [r7, #4]
    c4b0:	6812      	ldr	r2, [r2, #0]
    c4b2:	210f      	movs	r1, #15
    c4b4:	1879      	adds	r1, r7, r1
    c4b6:	7809      	ldrb	r1, [r1, #0]
    c4b8:	3108      	adds	r1, #8
    c4ba:	0149      	lsls	r1, r1, #5
    c4bc:	5c8a      	ldrb	r2, [r1, r2]
    c4be:	b2d2      	uxtb	r2, r2
    c4c0:	0011      	movs	r1, r2
    c4c2:	2270      	movs	r2, #112	; 0x70
    c4c4:	400a      	ands	r2, r1
    c4c6:	d121      	bne.n	c50c <usb_device_endpoint_set_config+0x320>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(3);
    c4c8:	687a      	ldr	r2, [r7, #4]
    c4ca:	6811      	ldr	r1, [r2, #0]
    c4cc:	220f      	movs	r2, #15
    c4ce:	18ba      	adds	r2, r7, r2
    c4d0:	7810      	ldrb	r0, [r2, #0]
    c4d2:	687a      	ldr	r2, [r7, #4]
    c4d4:	6812      	ldr	r2, [r2, #0]
    c4d6:	240f      	movs	r4, #15
    c4d8:	193c      	adds	r4, r7, r4
    c4da:	7824      	ldrb	r4, [r4, #0]
    c4dc:	3408      	adds	r4, #8
    c4de:	0164      	lsls	r4, r4, #5
    c4e0:	5ca2      	ldrb	r2, [r4, r2]
    c4e2:	b2d2      	uxtb	r2, r2
    c4e4:	2430      	movs	r4, #48	; 0x30
    c4e6:	4322      	orrs	r2, r4
    c4e8:	b2d4      	uxtb	r4, r2
    c4ea:	0002      	movs	r2, r0
    c4ec:	3208      	adds	r2, #8
    c4ee:	0152      	lsls	r2, r2, #5
    c4f0:	1c20      	adds	r0, r4, #0
    c4f2:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    c4f4:	687a      	ldr	r2, [r7, #4]
    c4f6:	6811      	ldr	r1, [r2, #0]
    c4f8:	220f      	movs	r2, #15
    c4fa:	18ba      	adds	r2, r7, r2
    c4fc:	7812      	ldrb	r2, [r2, #0]
    c4fe:	3208      	adds	r2, #8
    c500:	0152      	lsls	r2, r2, #5
    c502:	188a      	adds	r2, r1, r2
    c504:	3204      	adds	r2, #4
    c506:	2180      	movs	r1, #128	; 0x80
    c508:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    c50a:	e0a1      	b.n	c650 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    c50c:	231c      	movs	r3, #28
    c50e:	e0fc      	b.n	c70a <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    c510:	687a      	ldr	r2, [r7, #4]
    c512:	6812      	ldr	r2, [r2, #0]
    c514:	210f      	movs	r1, #15
    c516:	1879      	adds	r1, r7, r1
    c518:	7809      	ldrb	r1, [r1, #0]
    c51a:	3108      	adds	r1, #8
    c51c:	0149      	lsls	r1, r1, #5
    c51e:	5c8a      	ldrb	r2, [r1, r2]
    c520:	b2d2      	uxtb	r2, r2
    c522:	0011      	movs	r1, r2
    c524:	2207      	movs	r2, #7
    c526:	400a      	ands	r2, r1
    c528:	d121      	bne.n	c56e <usb_device_endpoint_set_config+0x382>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(3);
    c52a:	687a      	ldr	r2, [r7, #4]
    c52c:	6811      	ldr	r1, [r2, #0]
    c52e:	220f      	movs	r2, #15
    c530:	18ba      	adds	r2, r7, r2
    c532:	7810      	ldrb	r0, [r2, #0]
    c534:	687a      	ldr	r2, [r7, #4]
    c536:	6812      	ldr	r2, [r2, #0]
    c538:	240f      	movs	r4, #15
    c53a:	193c      	adds	r4, r7, r4
    c53c:	7824      	ldrb	r4, [r4, #0]
    c53e:	3408      	adds	r4, #8
    c540:	0164      	lsls	r4, r4, #5
    c542:	5ca2      	ldrb	r2, [r4, r2]
    c544:	b2d2      	uxtb	r2, r2
    c546:	2403      	movs	r4, #3
    c548:	4322      	orrs	r2, r4
    c54a:	b2d4      	uxtb	r4, r2
    c54c:	0002      	movs	r2, r0
    c54e:	3208      	adds	r2, #8
    c550:	0152      	lsls	r2, r2, #5
    c552:	1c20      	adds	r0, r4, #0
    c554:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    c556:	687a      	ldr	r2, [r7, #4]
    c558:	6811      	ldr	r1, [r2, #0]
    c55a:	220f      	movs	r2, #15
    c55c:	18ba      	adds	r2, r7, r2
    c55e:	7812      	ldrb	r2, [r2, #0]
    c560:	3208      	adds	r2, #8
    c562:	0152      	lsls	r2, r2, #5
    c564:	188a      	adds	r2, r1, r2
    c566:	3205      	adds	r2, #5
    c568:	2140      	movs	r1, #64	; 0x40
    c56a:	7011      	strb	r1, [r2, #0]
			break;
    c56c:	e070      	b.n	c650 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    c56e:	231c      	movs	r3, #28
    c570:	e0cb      	b.n	c70a <usb_device_endpoint_set_config+0x51e>
    c572:	46c0      	nop			; (mov r8, r8)
    c574:	00003238 	.word	0x00003238
    c578:	00000024 	.word	0x00000024
    c57c:	8fffffff 	.word	0x8fffffff

		case USB_DEVICE_ENDPOINT_TYPE_INTERRUPT:
			if (ep_bank) {
    c580:	220e      	movs	r2, #14
    c582:	18ba      	adds	r2, r7, r2
    c584:	7812      	ldrb	r2, [r2, #0]
    c586:	2a00      	cmp	r2, #0
    c588:	d030      	beq.n	c5ec <usb_device_endpoint_set_config+0x400>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE1_Msk) == 0){
    c58a:	687a      	ldr	r2, [r7, #4]
    c58c:	6812      	ldr	r2, [r2, #0]
    c58e:	210f      	movs	r1, #15
    c590:	1879      	adds	r1, r7, r1
    c592:	7809      	ldrb	r1, [r1, #0]
    c594:	3108      	adds	r1, #8
    c596:	0149      	lsls	r1, r1, #5
    c598:	5c8a      	ldrb	r2, [r1, r2]
    c59a:	b2d2      	uxtb	r2, r2
    c59c:	0011      	movs	r1, r2
    c59e:	2270      	movs	r2, #112	; 0x70
    c5a0:	400a      	ands	r2, r1
    c5a2:	d121      	bne.n	c5e8 <usb_device_endpoint_set_config+0x3fc>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE1(4);
    c5a4:	687a      	ldr	r2, [r7, #4]
    c5a6:	6811      	ldr	r1, [r2, #0]
    c5a8:	220f      	movs	r2, #15
    c5aa:	18ba      	adds	r2, r7, r2
    c5ac:	7810      	ldrb	r0, [r2, #0]
    c5ae:	687a      	ldr	r2, [r7, #4]
    c5b0:	6812      	ldr	r2, [r2, #0]
    c5b2:	240f      	movs	r4, #15
    c5b4:	193c      	adds	r4, r7, r4
    c5b6:	7824      	ldrb	r4, [r4, #0]
    c5b8:	3408      	adds	r4, #8
    c5ba:	0164      	lsls	r4, r4, #5
    c5bc:	5ca2      	ldrb	r2, [r4, r2]
    c5be:	b2d2      	uxtb	r2, r2
    c5c0:	2440      	movs	r4, #64	; 0x40
    c5c2:	4322      	orrs	r2, r4
    c5c4:	b2d4      	uxtb	r4, r2
    c5c6:	0002      	movs	r2, r0
    c5c8:	3208      	adds	r2, #8
    c5ca:	0152      	lsls	r2, r2, #5
    c5cc:	1c20      	adds	r0, r4, #0
    c5ce:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    c5d0:	687a      	ldr	r2, [r7, #4]
    c5d2:	6811      	ldr	r1, [r2, #0]
    c5d4:	220f      	movs	r2, #15
    c5d6:	18ba      	adds	r2, r7, r2
    c5d8:	7812      	ldrb	r2, [r2, #0]
    c5da:	3208      	adds	r2, #8
    c5dc:	0152      	lsls	r2, r2, #5
    c5de:	188a      	adds	r2, r1, r2
    c5e0:	3204      	adds	r2, #4
    c5e2:	2180      	movs	r1, #128	; 0x80
    c5e4:	7011      	strb	r1, [r2, #0]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
				} else {
					return STATUS_ERR_DENIED;
				}
			}
			break;
    c5e6:	e033      	b.n	c650 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    c5e8:	231c      	movs	r3, #28
    c5ea:	e08e      	b.n	c70a <usb_device_endpoint_set_config+0x51e>
				if ((module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg & USB_DEVICE_EPCFG_EPTYPE0_Msk) == 0){
    c5ec:	687a      	ldr	r2, [r7, #4]
    c5ee:	6812      	ldr	r2, [r2, #0]
    c5f0:	210f      	movs	r1, #15
    c5f2:	1879      	adds	r1, r7, r1
    c5f4:	7809      	ldrb	r1, [r1, #0]
    c5f6:	3108      	adds	r1, #8
    c5f8:	0149      	lsls	r1, r1, #5
    c5fa:	5c8a      	ldrb	r2, [r1, r2]
    c5fc:	b2d2      	uxtb	r2, r2
    c5fe:	0011      	movs	r1, r2
    c600:	2207      	movs	r2, #7
    c602:	400a      	ands	r2, r1
    c604:	d121      	bne.n	c64a <usb_device_endpoint_set_config+0x45e>
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.reg |= USB_DEVICE_EPCFG_EPTYPE0(4);
    c606:	687a      	ldr	r2, [r7, #4]
    c608:	6811      	ldr	r1, [r2, #0]
    c60a:	220f      	movs	r2, #15
    c60c:	18ba      	adds	r2, r7, r2
    c60e:	7810      	ldrb	r0, [r2, #0]
    c610:	687a      	ldr	r2, [r7, #4]
    c612:	6812      	ldr	r2, [r2, #0]
    c614:	240f      	movs	r4, #15
    c616:	193c      	adds	r4, r7, r4
    c618:	7824      	ldrb	r4, [r4, #0]
    c61a:	3408      	adds	r4, #8
    c61c:	0164      	lsls	r4, r4, #5
    c61e:	5ca2      	ldrb	r2, [r4, r2]
    c620:	b2d2      	uxtb	r2, r2
    c622:	2404      	movs	r4, #4
    c624:	4322      	orrs	r2, r4
    c626:	b2d4      	uxtb	r4, r2
    c628:	0002      	movs	r2, r0
    c62a:	3208      	adds	r2, #8
    c62c:	0152      	lsls	r2, r2, #5
    c62e:	1c20      	adds	r0, r4, #0
    c630:	5450      	strb	r0, [r2, r1]
					module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    c632:	687a      	ldr	r2, [r7, #4]
    c634:	6811      	ldr	r1, [r2, #0]
    c636:	220f      	movs	r2, #15
    c638:	18ba      	adds	r2, r7, r2
    c63a:	7812      	ldrb	r2, [r2, #0]
    c63c:	3208      	adds	r2, #8
    c63e:	0152      	lsls	r2, r2, #5
    c640:	188a      	adds	r2, r1, r2
    c642:	3205      	adds	r2, #5
    c644:	2140      	movs	r1, #64	; 0x40
    c646:	7011      	strb	r1, [r2, #0]
			break;
    c648:	e002      	b.n	c650 <usb_device_endpoint_set_config+0x464>
					return STATUS_ERR_DENIED;
    c64a:	231c      	movs	r3, #28
    c64c:	e05d      	b.n	c70a <usb_device_endpoint_set_config+0x51e>

		default:
			break;
    c64e:	46c0      	nop			; (mov r8, r8)
	}

	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.bit.SIZE = ep_config->ep_size;
    c650:	220f      	movs	r2, #15
    c652:	18ba      	adds	r2, r7, r2
    c654:	7814      	ldrb	r4, [r2, #0]
    c656:	220e      	movs	r2, #14
    c658:	18ba      	adds	r2, r7, r2
    c65a:	7812      	ldrb	r2, [r2, #0]
    c65c:	6839      	ldr	r1, [r7, #0]
    c65e:	7849      	ldrb	r1, [r1, #1]
    c660:	1c08      	adds	r0, r1, #0
    c662:	2107      	movs	r1, #7
    c664:	4001      	ands	r1, r0
    c666:	b2c8      	uxtb	r0, r1
    c668:	492a      	ldr	r1, [pc, #168]	; (c714 <usb_device_endpoint_set_config+0x528>)
    c66a:	5859      	ldr	r1, [r3, r1]
    c66c:	0064      	lsls	r4, r4, #1
    c66e:	18a2      	adds	r2, r4, r2
    c670:	0112      	lsls	r2, r2, #4
    c672:	188a      	adds	r2, r1, r2
    c674:	6851      	ldr	r1, [r2, #4]
    c676:	2407      	movs	r4, #7
    c678:	4020      	ands	r0, r4
    c67a:	0700      	lsls	r0, r0, #28
    c67c:	4c26      	ldr	r4, [pc, #152]	; (c718 <usb_device_endpoint_set_config+0x52c>)
    c67e:	4021      	ands	r1, r4
    c680:	4301      	orrs	r1, r0
    c682:	6051      	str	r1, [r2, #4]

	if (true == ep_config->auto_zlp) {
    c684:	683a      	ldr	r2, [r7, #0]
    c686:	7892      	ldrb	r2, [r2, #2]
    c688:	2a00      	cmp	r2, #0
    c68a:	d01f      	beq.n	c6cc <usb_device_endpoint_set_config+0x4e0>
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg |= USB_DEVICE_PCKSIZE_AUTO_ZLP;
    c68c:	220f      	movs	r2, #15
    c68e:	18ba      	adds	r2, r7, r2
    c690:	7814      	ldrb	r4, [r2, #0]
    c692:	220e      	movs	r2, #14
    c694:	18ba      	adds	r2, r7, r2
    c696:	7810      	ldrb	r0, [r2, #0]
    c698:	220f      	movs	r2, #15
    c69a:	18ba      	adds	r2, r7, r2
    c69c:	7815      	ldrb	r5, [r2, #0]
    c69e:	220e      	movs	r2, #14
    c6a0:	18ba      	adds	r2, r7, r2
    c6a2:	7812      	ldrb	r2, [r2, #0]
    c6a4:	491b      	ldr	r1, [pc, #108]	; (c714 <usb_device_endpoint_set_config+0x528>)
    c6a6:	5859      	ldr	r1, [r3, r1]
    c6a8:	006d      	lsls	r5, r5, #1
    c6aa:	18aa      	adds	r2, r5, r2
    c6ac:	0112      	lsls	r2, r2, #4
    c6ae:	188a      	adds	r2, r1, r2
    c6b0:	3204      	adds	r2, #4
    c6b2:	6812      	ldr	r2, [r2, #0]
    c6b4:	2180      	movs	r1, #128	; 0x80
    c6b6:	0609      	lsls	r1, r1, #24
    c6b8:	430a      	orrs	r2, r1
    c6ba:	4916      	ldr	r1, [pc, #88]	; (c714 <usb_device_endpoint_set_config+0x528>)
    c6bc:	5859      	ldr	r1, [r3, r1]
    c6be:	0063      	lsls	r3, r4, #1
    c6c0:	181b      	adds	r3, r3, r0
    c6c2:	011b      	lsls	r3, r3, #4
    c6c4:	18cb      	adds	r3, r1, r3
    c6c6:	3304      	adds	r3, #4
    c6c8:	601a      	str	r2, [r3, #0]
    c6ca:	e01d      	b.n	c708 <usb_device_endpoint_set_config+0x51c>
		} else {
		usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[ep_bank].PCKSIZE.reg &= ~USB_DEVICE_PCKSIZE_AUTO_ZLP;
    c6cc:	220f      	movs	r2, #15
    c6ce:	18ba      	adds	r2, r7, r2
    c6d0:	7814      	ldrb	r4, [r2, #0]
    c6d2:	220e      	movs	r2, #14
    c6d4:	18ba      	adds	r2, r7, r2
    c6d6:	7810      	ldrb	r0, [r2, #0]
    c6d8:	220f      	movs	r2, #15
    c6da:	18ba      	adds	r2, r7, r2
    c6dc:	7815      	ldrb	r5, [r2, #0]
    c6de:	220e      	movs	r2, #14
    c6e0:	18ba      	adds	r2, r7, r2
    c6e2:	7812      	ldrb	r2, [r2, #0]
    c6e4:	490b      	ldr	r1, [pc, #44]	; (c714 <usb_device_endpoint_set_config+0x528>)
    c6e6:	5859      	ldr	r1, [r3, r1]
    c6e8:	006d      	lsls	r5, r5, #1
    c6ea:	18aa      	adds	r2, r5, r2
    c6ec:	0112      	lsls	r2, r2, #4
    c6ee:	188a      	adds	r2, r1, r2
    c6f0:	3204      	adds	r2, #4
    c6f2:	6812      	ldr	r2, [r2, #0]
    c6f4:	0052      	lsls	r2, r2, #1
    c6f6:	0852      	lsrs	r2, r2, #1
    c6f8:	4906      	ldr	r1, [pc, #24]	; (c714 <usb_device_endpoint_set_config+0x528>)
    c6fa:	5859      	ldr	r1, [r3, r1]
    c6fc:	0063      	lsls	r3, r4, #1
    c6fe:	181b      	adds	r3, r3, r0
    c700:	011b      	lsls	r3, r3, #4
    c702:	18cb      	adds	r3, r1, r3
    c704:	3304      	adds	r3, #4
    c706:	601a      	str	r2, [r3, #0]
	}

	return STATUS_OK;
    c708:	2300      	movs	r3, #0
}
    c70a:	0018      	movs	r0, r3
    c70c:	46bd      	mov	sp, r7
    c70e:	b004      	add	sp, #16
    c710:	bdb0      	pop	{r4, r5, r7, pc}
    c712:	46c0      	nop			; (mov r8, r8)
    c714:	00000024 	.word	0x00000024
    c718:	8fffffff 	.word	0x8fffffff

0000c71c <usb_device_endpoint_abort_job>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_abort_job(struct usb_module *module_inst, uint8_t ep)
{
    c71c:	b580      	push	{r7, lr}
    c71e:	b084      	sub	sp, #16
    c720:	af00      	add	r7, sp, #0
    c722:	6078      	str	r0, [r7, #4]
    c724:	000a      	movs	r2, r1
    c726:	1cfb      	adds	r3, r7, #3
    c728:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num;
	ep_num = ep & USB_EP_ADDR_MASK;
    c72a:	230f      	movs	r3, #15
    c72c:	18fb      	adds	r3, r7, r3
    c72e:	1cfa      	adds	r2, r7, #3
    c730:	7812      	ldrb	r2, [r2, #0]
    c732:	210f      	movs	r1, #15
    c734:	400a      	ands	r2, r1
    c736:	701a      	strb	r2, [r3, #0]

	// Stop transfer
	if (ep & USB_EP_DIR_IN) {
    c738:	1cfb      	adds	r3, r7, #3
    c73a:	781b      	ldrb	r3, [r3, #0]
    c73c:	b25b      	sxtb	r3, r3
    c73e:	2b00      	cmp	r3, #0
    c740:	da16      	bge.n	c770 <usb_device_endpoint_abort_job+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK1RDY;
    c742:	687b      	ldr	r3, [r7, #4]
    c744:	681a      	ldr	r2, [r3, #0]
    c746:	230f      	movs	r3, #15
    c748:	18fb      	adds	r3, r7, r3
    c74a:	781b      	ldrb	r3, [r3, #0]
    c74c:	3308      	adds	r3, #8
    c74e:	015b      	lsls	r3, r3, #5
    c750:	18d3      	adds	r3, r2, r3
    c752:	3304      	adds	r3, #4
    c754:	2280      	movs	r2, #128	; 0x80
    c756:	701a      	strb	r2, [r3, #0]
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    c758:	687b      	ldr	r3, [r7, #4]
    c75a:	681a      	ldr	r2, [r3, #0]
    c75c:	230f      	movs	r3, #15
    c75e:	18fb      	adds	r3, r7, r3
    c760:	781b      	ldrb	r3, [r3, #0]
    c762:	3308      	adds	r3, #8
    c764:	015b      	lsls	r3, r3, #5
    c766:	18d3      	adds	r3, r2, r3
    c768:	3307      	adds	r3, #7
    c76a:	2202      	movs	r2, #2
    c76c:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
		// Eventually ack a transfer occur during abort
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
	}
}
    c76e:	e015      	b.n	c79c <usb_device_endpoint_abort_job+0x80>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK0RDY;
    c770:	687b      	ldr	r3, [r7, #4]
    c772:	681a      	ldr	r2, [r3, #0]
    c774:	230f      	movs	r3, #15
    c776:	18fb      	adds	r3, r7, r3
    c778:	781b      	ldrb	r3, [r3, #0]
    c77a:	3308      	adds	r3, #8
    c77c:	015b      	lsls	r3, r3, #5
    c77e:	18d3      	adds	r3, r2, r3
    c780:	3305      	adds	r3, #5
    c782:	2240      	movs	r2, #64	; 0x40
    c784:	701a      	strb	r2, [r3, #0]
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    c786:	687b      	ldr	r3, [r7, #4]
    c788:	681a      	ldr	r2, [r3, #0]
    c78a:	230f      	movs	r3, #15
    c78c:	18fb      	adds	r3, r7, r3
    c78e:	781b      	ldrb	r3, [r3, #0]
    c790:	3308      	adds	r3, #8
    c792:	015b      	lsls	r3, r3, #5
    c794:	18d3      	adds	r3, r2, r3
    c796:	3307      	adds	r3, #7
    c798:	2201      	movs	r2, #1
    c79a:	701a      	strb	r2, [r3, #0]
}
    c79c:	46c0      	nop			; (mov r8, r8)
    c79e:	46bd      	mov	sp, r7
    c7a0:	b004      	add	sp, #16
    c7a2:	bd80      	pop	{r7, pc}

0000c7a4 <usb_device_endpoint_is_halted>:
 * \param ep          Endpoint address
 *
 * \return \c true if the endpoint is halted
 */
bool usb_device_endpoint_is_halted(struct usb_module *module_inst, uint8_t ep)
{
    c7a4:	b580      	push	{r7, lr}
    c7a6:	b084      	sub	sp, #16
    c7a8:	af00      	add	r7, sp, #0
    c7aa:	6078      	str	r0, [r7, #4]
    c7ac:	000a      	movs	r2, r1
    c7ae:	1cfb      	adds	r3, r7, #3
    c7b0:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    c7b2:	230f      	movs	r3, #15
    c7b4:	18fb      	adds	r3, r7, r3
    c7b6:	1cfa      	adds	r2, r7, #3
    c7b8:	7812      	ldrb	r2, [r2, #0]
    c7ba:	210f      	movs	r1, #15
    c7bc:	400a      	ands	r2, r1
    c7be:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    c7c0:	1cfb      	adds	r3, r7, #3
    c7c2:	781b      	ldrb	r3, [r3, #0]
    c7c4:	b25b      	sxtb	r3, r3
    c7c6:	2b00      	cmp	r3, #0
    c7c8:	da11      	bge.n	c7ee <usb_device_endpoint_is_halted+0x4a>
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1);
    c7ca:	687b      	ldr	r3, [r7, #4]
    c7cc:	681a      	ldr	r2, [r3, #0]
    c7ce:	230f      	movs	r3, #15
    c7d0:	18fb      	adds	r3, r7, r3
    c7d2:	781b      	ldrb	r3, [r3, #0]
    c7d4:	3308      	adds	r3, #8
    c7d6:	015b      	lsls	r3, r3, #5
    c7d8:	18d3      	adds	r3, r2, r3
    c7da:	3306      	adds	r3, #6
    c7dc:	781b      	ldrb	r3, [r3, #0]
    c7de:	b2db      	uxtb	r3, r3
    c7e0:	001a      	movs	r2, r3
    c7e2:	2320      	movs	r3, #32
    c7e4:	4013      	ands	r3, r2
    c7e6:	1e5a      	subs	r2, r3, #1
    c7e8:	4193      	sbcs	r3, r2
    c7ea:	b2db      	uxtb	r3, r3
    c7ec:	e010      	b.n	c810 <usb_device_endpoint_is_halted+0x6c>
	} else {
		return (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0);
    c7ee:	687b      	ldr	r3, [r7, #4]
    c7f0:	681a      	ldr	r2, [r3, #0]
    c7f2:	230f      	movs	r3, #15
    c7f4:	18fb      	adds	r3, r7, r3
    c7f6:	781b      	ldrb	r3, [r3, #0]
    c7f8:	3308      	adds	r3, #8
    c7fa:	015b      	lsls	r3, r3, #5
    c7fc:	18d3      	adds	r3, r2, r3
    c7fe:	3306      	adds	r3, #6
    c800:	781b      	ldrb	r3, [r3, #0]
    c802:	b2db      	uxtb	r3, r3
    c804:	001a      	movs	r2, r3
    c806:	2310      	movs	r3, #16
    c808:	4013      	ands	r3, r2
    c80a:	1e5a      	subs	r2, r3, #1
    c80c:	4193      	sbcs	r3, r2
    c80e:	b2db      	uxtb	r3, r3
	}
}
    c810:	0018      	movs	r0, r3
    c812:	46bd      	mov	sp, r7
    c814:	b004      	add	sp, #16
    c816:	bd80      	pop	{r7, pc}

0000c818 <usb_device_endpoint_set_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_set_halt(struct usb_module *module_inst, uint8_t ep)
{
    c818:	b580      	push	{r7, lr}
    c81a:	b084      	sub	sp, #16
    c81c:	af00      	add	r7, sp, #0
    c81e:	6078      	str	r0, [r7, #4]
    c820:	000a      	movs	r2, r1
    c822:	1cfb      	adds	r3, r7, #3
    c824:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    c826:	230f      	movs	r3, #15
    c828:	18fb      	adds	r3, r7, r3
    c82a:	1cfa      	adds	r2, r7, #3
    c82c:	7812      	ldrb	r2, [r2, #0]
    c82e:	210f      	movs	r1, #15
    c830:	400a      	ands	r2, r1
    c832:	701a      	strb	r2, [r3, #0]

	// Stall endpoint
	if (ep & USB_EP_DIR_IN) {
    c834:	1cfb      	adds	r3, r7, #3
    c836:	781b      	ldrb	r3, [r3, #0]
    c838:	b25b      	sxtb	r3, r3
    c83a:	2b00      	cmp	r3, #0
    c83c:	da0b      	bge.n	c856 <usb_device_endpoint_set_halt+0x3e>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ1;
    c83e:	687b      	ldr	r3, [r7, #4]
    c840:	681a      	ldr	r2, [r3, #0]
    c842:	230f      	movs	r3, #15
    c844:	18fb      	adds	r3, r7, r3
    c846:	781b      	ldrb	r3, [r3, #0]
    c848:	3308      	adds	r3, #8
    c84a:	015b      	lsls	r3, r3, #5
    c84c:	18d3      	adds	r3, r2, r3
    c84e:	3305      	adds	r3, #5
    c850:	2220      	movs	r2, #32
    c852:	701a      	strb	r2, [r3, #0]
	} else {
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
	}
}
    c854:	e00a      	b.n	c86c <usb_device_endpoint_set_halt+0x54>
		module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_STALLRQ0;
    c856:	687b      	ldr	r3, [r7, #4]
    c858:	681a      	ldr	r2, [r3, #0]
    c85a:	230f      	movs	r3, #15
    c85c:	18fb      	adds	r3, r7, r3
    c85e:	781b      	ldrb	r3, [r3, #0]
    c860:	3308      	adds	r3, #8
    c862:	015b      	lsls	r3, r3, #5
    c864:	18d3      	adds	r3, r2, r3
    c866:	3305      	adds	r3, #5
    c868:	2210      	movs	r2, #16
    c86a:	701a      	strb	r2, [r3, #0]
}
    c86c:	46c0      	nop			; (mov r8, r8)
    c86e:	46bd      	mov	sp, r7
    c870:	b004      	add	sp, #16
    c872:	bd80      	pop	{r7, pc}

0000c874 <usb_device_endpoint_clear_halt>:
 *
 * \param module_inst Pointer to USB software instance struct
 * \param ep          Endpoint address
 */
void usb_device_endpoint_clear_halt(struct usb_module *module_inst, uint8_t ep)
{
    c874:	b580      	push	{r7, lr}
    c876:	b084      	sub	sp, #16
    c878:	af00      	add	r7, sp, #0
    c87a:	6078      	str	r0, [r7, #4]
    c87c:	000a      	movs	r2, r1
    c87e:	1cfb      	adds	r3, r7, #3
    c880:	701a      	strb	r2, [r3, #0]
	uint8_t ep_num = ep & USB_EP_ADDR_MASK;
    c882:	230f      	movs	r3, #15
    c884:	18fb      	adds	r3, r7, r3
    c886:	1cfa      	adds	r2, r7, #3
    c888:	7812      	ldrb	r2, [r2, #0]
    c88a:	210f      	movs	r1, #15
    c88c:	400a      	ands	r2, r1
    c88e:	701a      	strb	r2, [r3, #0]

	if (ep & USB_EP_DIR_IN) {
    c890:	1cfb      	adds	r3, r7, #3
    c892:	781b      	ldrb	r3, [r3, #0]
    c894:	b25b      	sxtb	r3, r3
    c896:	2b00      	cmp	r3, #0
    c898:	da3f      	bge.n	c91a <usb_device_endpoint_clear_halt+0xa6>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ1) {
    c89a:	687b      	ldr	r3, [r7, #4]
    c89c:	681a      	ldr	r2, [r3, #0]
    c89e:	230f      	movs	r3, #15
    c8a0:	18fb      	adds	r3, r7, r3
    c8a2:	781b      	ldrb	r3, [r3, #0]
    c8a4:	3308      	adds	r3, #8
    c8a6:	015b      	lsls	r3, r3, #5
    c8a8:	18d3      	adds	r3, r2, r3
    c8aa:	3306      	adds	r3, #6
    c8ac:	781b      	ldrb	r3, [r3, #0]
    c8ae:	b2db      	uxtb	r3, r3
    c8b0:	001a      	movs	r2, r3
    c8b2:	2320      	movs	r3, #32
    c8b4:	4013      	ands	r3, r2
    c8b6:	d06f      	beq.n	c998 <usb_device_endpoint_clear_halt+0x124>
			// Remove stall request
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ1;
    c8b8:	687b      	ldr	r3, [r7, #4]
    c8ba:	681a      	ldr	r2, [r3, #0]
    c8bc:	230f      	movs	r3, #15
    c8be:	18fb      	adds	r3, r7, r3
    c8c0:	781b      	ldrb	r3, [r3, #0]
    c8c2:	3308      	adds	r3, #8
    c8c4:	015b      	lsls	r3, r3, #5
    c8c6:	18d3      	adds	r3, r2, r3
    c8c8:	3304      	adds	r3, #4
    c8ca:	2220      	movs	r2, #32
    c8cc:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    c8ce:	687b      	ldr	r3, [r7, #4]
    c8d0:	681a      	ldr	r2, [r3, #0]
    c8d2:	230f      	movs	r3, #15
    c8d4:	18fb      	adds	r3, r7, r3
    c8d6:	781b      	ldrb	r3, [r3, #0]
    c8d8:	3308      	adds	r3, #8
    c8da:	015b      	lsls	r3, r3, #5
    c8dc:	18d3      	adds	r3, r2, r3
    c8de:	3307      	adds	r3, #7
    c8e0:	781b      	ldrb	r3, [r3, #0]
    c8e2:	b2db      	uxtb	r3, r3
    c8e4:	001a      	movs	r2, r3
    c8e6:	2340      	movs	r3, #64	; 0x40
    c8e8:	4013      	ands	r3, r2
    c8ea:	d055      	beq.n	c998 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    c8ec:	687b      	ldr	r3, [r7, #4]
    c8ee:	681a      	ldr	r2, [r3, #0]
    c8f0:	230f      	movs	r3, #15
    c8f2:	18fb      	adds	r3, r7, r3
    c8f4:	781b      	ldrb	r3, [r3, #0]
    c8f6:	3308      	adds	r3, #8
    c8f8:	015b      	lsls	r3, r3, #5
    c8fa:	18d3      	adds	r3, r2, r3
    c8fc:	3307      	adds	r3, #7
    c8fe:	2240      	movs	r2, #64	; 0x40
    c900:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLIN;
    c902:	687b      	ldr	r3, [r7, #4]
    c904:	681a      	ldr	r2, [r3, #0]
    c906:	230f      	movs	r3, #15
    c908:	18fb      	adds	r3, r7, r3
    c90a:	781b      	ldrb	r3, [r3, #0]
    c90c:	3308      	adds	r3, #8
    c90e:	015b      	lsls	r3, r3, #5
    c910:	18d3      	adds	r3, r2, r3
    c912:	3304      	adds	r3, #4
    c914:	2202      	movs	r2, #2
    c916:	701a      	strb	r2, [r3, #0]
				// The Stall has occurred, then reset data toggle
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
			}
		}
	}
}
    c918:	e03e      	b.n	c998 <usb_device_endpoint_clear_halt+0x124>
		if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUS.reg & USB_DEVICE_EPSTATUSSET_STALLRQ0) {
    c91a:	687b      	ldr	r3, [r7, #4]
    c91c:	681a      	ldr	r2, [r3, #0]
    c91e:	230f      	movs	r3, #15
    c920:	18fb      	adds	r3, r7, r3
    c922:	781b      	ldrb	r3, [r3, #0]
    c924:	3308      	adds	r3, #8
    c926:	015b      	lsls	r3, r3, #5
    c928:	18d3      	adds	r3, r2, r3
    c92a:	3306      	adds	r3, #6
    c92c:	781b      	ldrb	r3, [r3, #0]
    c92e:	b2db      	uxtb	r3, r3
    c930:	001a      	movs	r2, r3
    c932:	2310      	movs	r3, #16
    c934:	4013      	ands	r3, r2
    c936:	d02f      	beq.n	c998 <usb_device_endpoint_clear_halt+0x124>
			module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_STALLRQ0;
    c938:	687b      	ldr	r3, [r7, #4]
    c93a:	681a      	ldr	r2, [r3, #0]
    c93c:	230f      	movs	r3, #15
    c93e:	18fb      	adds	r3, r7, r3
    c940:	781b      	ldrb	r3, [r3, #0]
    c942:	3308      	adds	r3, #8
    c944:	015b      	lsls	r3, r3, #5
    c946:	18d3      	adds	r3, r2, r3
    c948:	3304      	adds	r3, #4
    c94a:	2210      	movs	r2, #16
    c94c:	701a      	strb	r2, [r3, #0]
			if (module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    c94e:	687b      	ldr	r3, [r7, #4]
    c950:	681a      	ldr	r2, [r3, #0]
    c952:	230f      	movs	r3, #15
    c954:	18fb      	adds	r3, r7, r3
    c956:	781b      	ldrb	r3, [r3, #0]
    c958:	3308      	adds	r3, #8
    c95a:	015b      	lsls	r3, r3, #5
    c95c:	18d3      	adds	r3, r2, r3
    c95e:	3307      	adds	r3, #7
    c960:	781b      	ldrb	r3, [r3, #0]
    c962:	b2db      	uxtb	r3, r3
    c964:	001a      	movs	r2, r3
    c966:	2320      	movs	r3, #32
    c968:	4013      	ands	r3, r2
    c96a:	d015      	beq.n	c998 <usb_device_endpoint_clear_halt+0x124>
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    c96c:	687b      	ldr	r3, [r7, #4]
    c96e:	681a      	ldr	r2, [r3, #0]
    c970:	230f      	movs	r3, #15
    c972:	18fb      	adds	r3, r7, r3
    c974:	781b      	ldrb	r3, [r3, #0]
    c976:	3308      	adds	r3, #8
    c978:	015b      	lsls	r3, r3, #5
    c97a:	18d3      	adds	r3, r2, r3
    c97c:	3307      	adds	r3, #7
    c97e:	2220      	movs	r2, #32
    c980:	701a      	strb	r2, [r3, #0]
				module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSSET_DTGLOUT;
    c982:	687b      	ldr	r3, [r7, #4]
    c984:	681a      	ldr	r2, [r3, #0]
    c986:	230f      	movs	r3, #15
    c988:	18fb      	adds	r3, r7, r3
    c98a:	781b      	ldrb	r3, [r3, #0]
    c98c:	3308      	adds	r3, #8
    c98e:	015b      	lsls	r3, r3, #5
    c990:	18d3      	adds	r3, r2, r3
    c992:	3304      	adds	r3, #4
    c994:	2201      	movs	r2, #1
    c996:	701a      	strb	r2, [r3, #0]
}
    c998:	46c0      	nop			; (mov r8, r8)
    c99a:	46bd      	mov	sp, r7
    c99c:	b004      	add	sp, #16
    c99e:	bd80      	pop	{r7, pc}

0000c9a0 <usb_device_endpoint_write_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_write_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    c9a0:	b580      	push	{r7, lr}
    c9a2:	b086      	sub	sp, #24
    c9a4:	af00      	add	r7, sp, #0
    c9a6:	60f8      	str	r0, [r7, #12]
    c9a8:	607a      	str	r2, [r7, #4]
    c9aa:	603b      	str	r3, [r7, #0]
    c9ac:	230b      	movs	r3, #11
    c9ae:	18fb      	adds	r3, r7, r3
    c9b0:	1c0a      	adds	r2, r1, #0
    c9b2:	701a      	strb	r2, [r3, #0]
    c9b4:	4b28      	ldr	r3, [pc, #160]	; (ca58 <usb_device_endpoint_write_buffer_job+0xb8>)
    c9b6:	447b      	add	r3, pc
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE1);
    c9b8:	68fa      	ldr	r2, [r7, #12]
    c9ba:	6812      	ldr	r2, [r2, #0]
    c9bc:	210b      	movs	r1, #11
    c9be:	1879      	adds	r1, r7, r1
    c9c0:	7809      	ldrb	r1, [r1, #0]
    c9c2:	3108      	adds	r1, #8
    c9c4:	0149      	lsls	r1, r1, #5
    c9c6:	5c8a      	ldrb	r2, [r1, r2]
    c9c8:	0652      	lsls	r2, r2, #25
    c9ca:	0f52      	lsrs	r2, r2, #29
    c9cc:	b2d1      	uxtb	r1, r2
    c9ce:	2217      	movs	r2, #23
    c9d0:	18ba      	adds	r2, r7, r2
    c9d2:	7011      	strb	r1, [r2, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    c9d4:	2217      	movs	r2, #23
    c9d6:	18ba      	adds	r2, r7, r2
    c9d8:	7812      	ldrb	r2, [r2, #0]
    c9da:	2a00      	cmp	r2, #0
    c9dc:	d101      	bne.n	c9e2 <usb_device_endpoint_write_buffer_job+0x42>
		return STATUS_ERR_DENIED;
    c9de:	231c      	movs	r3, #28
    c9e0:	e035      	b.n	ca4e <usb_device_endpoint_write_buffer_job+0xae>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].ADDR.reg = (uint32_t)pbuf;
    c9e2:	220b      	movs	r2, #11
    c9e4:	18ba      	adds	r2, r7, r2
    c9e6:	7812      	ldrb	r2, [r2, #0]
    c9e8:	6879      	ldr	r1, [r7, #4]
    c9ea:	481c      	ldr	r0, [pc, #112]	; (ca5c <usb_device_endpoint_write_buffer_job+0xbc>)
    c9ec:	5818      	ldr	r0, [r3, r0]
    c9ee:	0152      	lsls	r2, r2, #5
    c9f0:	1882      	adds	r2, r0, r2
    c9f2:	3210      	adds	r2, #16
    c9f4:	6011      	str	r1, [r2, #0]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.MULTI_PACKET_SIZE = 0;
    c9f6:	220b      	movs	r2, #11
    c9f8:	18ba      	adds	r2, r7, r2
    c9fa:	7812      	ldrb	r2, [r2, #0]
    c9fc:	4917      	ldr	r1, [pc, #92]	; (ca5c <usb_device_endpoint_write_buffer_job+0xbc>)
    c9fe:	5859      	ldr	r1, [r3, r1]
    ca00:	0152      	lsls	r2, r2, #5
    ca02:	188a      	adds	r2, r1, r2
    ca04:	3210      	adds	r2, #16
    ca06:	6851      	ldr	r1, [r2, #4]
    ca08:	4815      	ldr	r0, [pc, #84]	; (ca60 <usb_device_endpoint_write_buffer_job+0xc0>)
    ca0a:	4001      	ands	r1, r0
    ca0c:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT = buf_size;
    ca0e:	220b      	movs	r2, #11
    ca10:	18ba      	adds	r2, r7, r2
    ca12:	7810      	ldrb	r0, [r2, #0]
    ca14:	683a      	ldr	r2, [r7, #0]
    ca16:	b292      	uxth	r2, r2
    ca18:	0492      	lsls	r2, r2, #18
    ca1a:	0c92      	lsrs	r2, r2, #18
    ca1c:	b291      	uxth	r1, r2
    ca1e:	4a0f      	ldr	r2, [pc, #60]	; (ca5c <usb_device_endpoint_write_buffer_job+0xbc>)
    ca20:	589a      	ldr	r2, [r3, r2]
    ca22:	0143      	lsls	r3, r0, #5
    ca24:	18d3      	adds	r3, r2, r3
    ca26:	3310      	adds	r3, #16
    ca28:	685a      	ldr	r2, [r3, #4]
    ca2a:	0489      	lsls	r1, r1, #18
    ca2c:	0c89      	lsrs	r1, r1, #18
    ca2e:	0b92      	lsrs	r2, r2, #14
    ca30:	0392      	lsls	r2, r2, #14
    ca32:	430a      	orrs	r2, r1
    ca34:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSSET.reg = USB_DEVICE_EPSTATUSSET_BK1RDY;
    ca36:	68fb      	ldr	r3, [r7, #12]
    ca38:	681a      	ldr	r2, [r3, #0]
    ca3a:	230b      	movs	r3, #11
    ca3c:	18fb      	adds	r3, r7, r3
    ca3e:	781b      	ldrb	r3, [r3, #0]
    ca40:	3308      	adds	r3, #8
    ca42:	015b      	lsls	r3, r3, #5
    ca44:	18d3      	adds	r3, r2, r3
    ca46:	3305      	adds	r3, #5
    ca48:	2280      	movs	r2, #128	; 0x80
    ca4a:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    ca4c:	2300      	movs	r3, #0
}
    ca4e:	0018      	movs	r0, r3
    ca50:	46bd      	mov	sp, r7
    ca52:	b006      	add	sp, #24
    ca54:	bd80      	pop	{r7, pc}
    ca56:	46c0      	nop			; (mov r8, r8)
    ca58:	00002a7a 	.word	0x00002a7a
    ca5c:	00000024 	.word	0x00000024
    ca60:	f0003fff 	.word	0xf0003fff

0000ca64 <usb_device_endpoint_read_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_read_buffer_job(struct usb_module *module_inst,uint8_t ep_num,
		uint8_t* pbuf, uint32_t buf_size)
{
    ca64:	b590      	push	{r4, r7, lr}
    ca66:	b087      	sub	sp, #28
    ca68:	af00      	add	r7, sp, #0
    ca6a:	60f8      	str	r0, [r7, #12]
    ca6c:	607a      	str	r2, [r7, #4]
    ca6e:	603b      	str	r3, [r7, #0]
    ca70:	230b      	movs	r3, #11
    ca72:	18fb      	adds	r3, r7, r3
    ca74:	1c0a      	adds	r2, r1, #0
    ca76:	701a      	strb	r2, [r3, #0]
    ca78:	4b26      	ldr	r3, [pc, #152]	; (cb14 <usb_device_endpoint_read_buffer_job+0xb0>)
    ca7a:	447b      	add	r3, pc
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(ep_num < USB_EPT_NUM);

	uint8_t flag;
	flag = (uint8_t)(module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPCFG.bit.EPTYPE0);
    ca7c:	68fa      	ldr	r2, [r7, #12]
    ca7e:	6812      	ldr	r2, [r2, #0]
    ca80:	210b      	movs	r1, #11
    ca82:	1879      	adds	r1, r7, r1
    ca84:	7809      	ldrb	r1, [r1, #0]
    ca86:	3108      	adds	r1, #8
    ca88:	0149      	lsls	r1, r1, #5
    ca8a:	5c8a      	ldrb	r2, [r1, r2]
    ca8c:	0752      	lsls	r2, r2, #29
    ca8e:	0f52      	lsrs	r2, r2, #29
    ca90:	b2d1      	uxtb	r1, r2
    ca92:	2217      	movs	r2, #23
    ca94:	18ba      	adds	r2, r7, r2
    ca96:	7011      	strb	r1, [r2, #0]
	if ((enum usb_device_endpoint_type)(flag) == USB_DEVICE_ENDPOINT_TYPE_DISABLE) {
    ca98:	2217      	movs	r2, #23
    ca9a:	18ba      	adds	r2, r7, r2
    ca9c:	7812      	ldrb	r2, [r2, #0]
    ca9e:	2a00      	cmp	r2, #0
    caa0:	d101      	bne.n	caa6 <usb_device_endpoint_read_buffer_job+0x42>
		return STATUS_ERR_DENIED;
    caa2:	231c      	movs	r3, #28
    caa4:	e032      	b.n	cb0c <usb_device_endpoint_read_buffer_job+0xa8>
	};

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    caa6:	220b      	movs	r2, #11
    caa8:	18ba      	adds	r2, r7, r2
    caaa:	7811      	ldrb	r1, [r2, #0]
    caac:	6878      	ldr	r0, [r7, #4]
    caae:	4a1a      	ldr	r2, [pc, #104]	; (cb18 <usb_device_endpoint_read_buffer_job+0xb4>)
    cab0:	589a      	ldr	r2, [r3, r2]
    cab2:	0149      	lsls	r1, r1, #5
    cab4:	5088      	str	r0, [r1, r2]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = buf_size;
    cab6:	220b      	movs	r2, #11
    cab8:	18ba      	adds	r2, r7, r2
    caba:	7812      	ldrb	r2, [r2, #0]
    cabc:	6839      	ldr	r1, [r7, #0]
    cabe:	b289      	uxth	r1, r1
    cac0:	0489      	lsls	r1, r1, #18
    cac2:	0c89      	lsrs	r1, r1, #18
    cac4:	b288      	uxth	r0, r1
    cac6:	4914      	ldr	r1, [pc, #80]	; (cb18 <usb_device_endpoint_read_buffer_job+0xb4>)
    cac8:	5859      	ldr	r1, [r3, r1]
    caca:	0152      	lsls	r2, r2, #5
    cacc:	188a      	adds	r2, r1, r2
    cace:	6851      	ldr	r1, [r2, #4]
    cad0:	0480      	lsls	r0, r0, #18
    cad2:	0c80      	lsrs	r0, r0, #18
    cad4:	0380      	lsls	r0, r0, #14
    cad6:	4c11      	ldr	r4, [pc, #68]	; (cb1c <usb_device_endpoint_read_buffer_job+0xb8>)
    cad8:	4021      	ands	r1, r4
    cada:	4301      	orrs	r1, r0
    cadc:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[ep_num].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    cade:	220b      	movs	r2, #11
    cae0:	18ba      	adds	r2, r7, r2
    cae2:	7811      	ldrb	r1, [r2, #0]
    cae4:	4a0c      	ldr	r2, [pc, #48]	; (cb18 <usb_device_endpoint_read_buffer_job+0xb4>)
    cae6:	589a      	ldr	r2, [r3, r2]
    cae8:	014b      	lsls	r3, r1, #5
    caea:	18d3      	adds	r3, r2, r3
    caec:	685a      	ldr	r2, [r3, #4]
    caee:	0b92      	lsrs	r2, r2, #14
    caf0:	0392      	lsls	r2, r2, #14
    caf2:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[ep_num].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    caf4:	68fb      	ldr	r3, [r7, #12]
    caf6:	681a      	ldr	r2, [r3, #0]
    caf8:	230b      	movs	r3, #11
    cafa:	18fb      	adds	r3, r7, r3
    cafc:	781b      	ldrb	r3, [r3, #0]
    cafe:	3308      	adds	r3, #8
    cb00:	015b      	lsls	r3, r3, #5
    cb02:	18d3      	adds	r3, r2, r3
    cb04:	3304      	adds	r3, #4
    cb06:	2240      	movs	r2, #64	; 0x40
    cb08:	701a      	strb	r2, [r3, #0]

	return STATUS_OK;
    cb0a:	2300      	movs	r3, #0
}
    cb0c:	0018      	movs	r0, r3
    cb0e:	46bd      	mov	sp, r7
    cb10:	b007      	add	sp, #28
    cb12:	bd90      	pop	{r4, r7, pc}
    cb14:	000029b6 	.word	0x000029b6
    cb18:	00000024 	.word	0x00000024
    cb1c:	f0003fff 	.word	0xf0003fff

0000cb20 <usb_device_endpoint_setup_buffer_job>:
 * \retval STATUS_OK Job started successfully
 * \retval STATUS_ERR_DENIED Endpoint is not ready
 */
enum status_code usb_device_endpoint_setup_buffer_job(struct usb_module *module_inst,
		uint8_t* pbuf)
{
    cb20:	b580      	push	{r7, lr}
    cb22:	b082      	sub	sp, #8
    cb24:	af00      	add	r7, sp, #0
    cb26:	6078      	str	r0, [r7, #4]
    cb28:	6039      	str	r1, [r7, #0]
    cb2a:	4b10      	ldr	r3, [pc, #64]	; (cb6c <usb_device_endpoint_setup_buffer_job+0x4c>)
    cb2c:	447b      	add	r3, pc
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* get endpoint configuration from setting register */
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].ADDR.reg = (uint32_t)pbuf;
    cb2e:	6839      	ldr	r1, [r7, #0]
    cb30:	4a0f      	ldr	r2, [pc, #60]	; (cb70 <usb_device_endpoint_setup_buffer_job+0x50>)
    cb32:	589a      	ldr	r2, [r3, r2]
    cb34:	6011      	str	r1, [r2, #0]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE = 8;
    cb36:	4a0e      	ldr	r2, [pc, #56]	; (cb70 <usb_device_endpoint_setup_buffer_job+0x50>)
    cb38:	589a      	ldr	r2, [r3, r2]
    cb3a:	6851      	ldr	r1, [r2, #4]
    cb3c:	480d      	ldr	r0, [pc, #52]	; (cb74 <usb_device_endpoint_setup_buffer_job+0x54>)
    cb3e:	4001      	ands	r1, r0
    cb40:	2080      	movs	r0, #128	; 0x80
    cb42:	0280      	lsls	r0, r0, #10
    cb44:	4301      	orrs	r1, r0
    cb46:	6051      	str	r1, [r2, #4]
	usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT = 0;
    cb48:	4a09      	ldr	r2, [pc, #36]	; (cb70 <usb_device_endpoint_setup_buffer_job+0x50>)
    cb4a:	589b      	ldr	r3, [r3, r2]
    cb4c:	685a      	ldr	r2, [r3, #4]
    cb4e:	0b92      	lsrs	r2, r2, #14
    cb50:	0392      	lsls	r2, r2, #14
    cb52:	605a      	str	r2, [r3, #4]
	module_inst->hw->DEVICE.DeviceEndpoint[0].EPSTATUSCLR.reg = USB_DEVICE_EPSTATUSCLR_BK0RDY;
    cb54:	687b      	ldr	r3, [r7, #4]
    cb56:	681a      	ldr	r2, [r3, #0]
    cb58:	2382      	movs	r3, #130	; 0x82
    cb5a:	005b      	lsls	r3, r3, #1
    cb5c:	2140      	movs	r1, #64	; 0x40
    cb5e:	54d1      	strb	r1, [r2, r3]

	return STATUS_OK;
    cb60:	2300      	movs	r3, #0
}
    cb62:	0018      	movs	r0, r3
    cb64:	46bd      	mov	sp, r7
    cb66:	b002      	add	sp, #8
    cb68:	bd80      	pop	{r7, pc}
    cb6a:	46c0      	nop			; (mov r8, r8)
    cb6c:	00002904 	.word	0x00002904
    cb70:	00000024 	.word	0x00000024
    cb74:	f0003fff 	.word	0xf0003fff

0000cb78 <_usb_device_interrupt_handler>:

static void _usb_device_interrupt_handler(void)
{
    cb78:	b590      	push	{r4, r7, lr}
    cb7a:	b085      	sub	sp, #20
    cb7c:	af00      	add	r7, sp, #0
    cb7e:	4cb2      	ldr	r4, [pc, #712]	; (ce48 <_usb_device_interrupt_handler+0x2d0>)
    cb80:	447c      	add	r4, pc
	uint16_t ep_inst;
	uint16_t flags, flags_run;
	ep_inst = _usb_instances->hw->DEVICE.EPINTSMRY.reg;
    cb82:	4bb2      	ldr	r3, [pc, #712]	; (ce4c <_usb_device_interrupt_handler+0x2d4>)
    cb84:	447b      	add	r3, pc
    cb86:	681b      	ldr	r3, [r3, #0]
    cb88:	681a      	ldr	r2, [r3, #0]
    cb8a:	2308      	movs	r3, #8
    cb8c:	18fb      	adds	r3, r7, r3
    cb8e:	8c12      	ldrh	r2, [r2, #32]
    cb90:	801a      	strh	r2, [r3, #0]

	/* device interrupt */
	if (0 == ep_inst) {
    cb92:	2308      	movs	r3, #8
    cb94:	18fb      	adds	r3, r7, r3
    cb96:	881b      	ldrh	r3, [r3, #0]
    cb98:	2b00      	cmp	r3, #0
    cb9a:	d000      	beq.n	cb9e <_usb_device_interrupt_handler+0x26>
    cb9c:	e061      	b.n	cc62 <_usb_device_interrupt_handler+0xea>
		int i;

		/* get interrupt flags */
		flags = _usb_instances->hw->DEVICE.INTFLAG.reg;
    cb9e:	4bac      	ldr	r3, [pc, #688]	; (ce50 <_usb_device_interrupt_handler+0x2d8>)
    cba0:	447b      	add	r3, pc
    cba2:	681b      	ldr	r3, [r3, #0]
    cba4:	681a      	ldr	r2, [r3, #0]
    cba6:	1dbb      	adds	r3, r7, #6
    cba8:	8b92      	ldrh	r2, [r2, #28]
    cbaa:	801a      	strh	r2, [r3, #0]
		flags_run = flags &
				_usb_instances->device_enabled_callback_mask &
    cbac:	4ba9      	ldr	r3, [pc, #676]	; (ce54 <_usb_device_interrupt_handler+0x2dc>)
    cbae:	447b      	add	r3, pc
    cbb0:	681a      	ldr	r2, [r3, #0]
    cbb2:	23ab      	movs	r3, #171	; 0xab
    cbb4:	005b      	lsls	r3, r3, #1
    cbb6:	5ad3      	ldrh	r3, [r2, r3]
		flags_run = flags &
    cbb8:	1dba      	adds	r2, r7, #6
    cbba:	8812      	ldrh	r2, [r2, #0]
    cbbc:	4013      	ands	r3, r2
    cbbe:	b29a      	uxth	r2, r3
				_usb_instances->device_registered_callback_mask;
    cbc0:	4ba5      	ldr	r3, [pc, #660]	; (ce58 <_usb_device_interrupt_handler+0x2e0>)
    cbc2:	447b      	add	r3, pc
    cbc4:	6819      	ldr	r1, [r3, #0]
    cbc6:	23aa      	movs	r3, #170	; 0xaa
    cbc8:	005b      	lsls	r3, r3, #1
    cbca:	5ac9      	ldrh	r1, [r1, r3]
		flags_run = flags &
    cbcc:	1d3b      	adds	r3, r7, #4
    cbce:	400a      	ands	r2, r1
    cbd0:	801a      	strh	r2, [r3, #0]

		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    cbd2:	2300      	movs	r3, #0
    cbd4:	60fb      	str	r3, [r7, #12]
    cbd6:	e040      	b.n	cc5a <_usb_device_interrupt_handler+0xe2>
			if (flags & _usb_device_irq_bits[i]) {
    cbd8:	4ba0      	ldr	r3, [pc, #640]	; (ce5c <_usb_device_interrupt_handler+0x2e4>)
    cbda:	447b      	add	r3, pc
    cbdc:	68fa      	ldr	r2, [r7, #12]
    cbde:	0052      	lsls	r2, r2, #1
    cbe0:	5ad3      	ldrh	r3, [r2, r3]
    cbe2:	1dba      	adds	r2, r7, #6
    cbe4:	8812      	ldrh	r2, [r2, #0]
    cbe6:	4013      	ands	r3, r2
    cbe8:	b29b      	uxth	r3, r3
    cbea:	2b00      	cmp	r3, #0
    cbec:	d009      	beq.n	cc02 <_usb_device_interrupt_handler+0x8a>
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    cbee:	4b9c      	ldr	r3, [pc, #624]	; (ce60 <_usb_device_interrupt_handler+0x2e8>)
    cbf0:	447b      	add	r3, pc
    cbf2:	681b      	ldr	r3, [r3, #0]
    cbf4:	681b      	ldr	r3, [r3, #0]
						_usb_device_irq_bits[i];
    cbf6:	4a9b      	ldr	r2, [pc, #620]	; (ce64 <_usb_device_interrupt_handler+0x2ec>)
    cbf8:	447a      	add	r2, pc
    cbfa:	68f9      	ldr	r1, [r7, #12]
    cbfc:	0049      	lsls	r1, r1, #1
    cbfe:	5a8a      	ldrh	r2, [r1, r2]
				_usb_instances->hw->DEVICE.INTFLAG.reg =
    cc00:	839a      	strh	r2, [r3, #28]
			}
			if (flags_run & _usb_device_irq_bits[i]) {
    cc02:	4b99      	ldr	r3, [pc, #612]	; (ce68 <_usb_device_interrupt_handler+0x2f0>)
    cc04:	447b      	add	r3, pc
    cc06:	68fa      	ldr	r2, [r7, #12]
    cc08:	0052      	lsls	r2, r2, #1
    cc0a:	5ad3      	ldrh	r3, [r2, r3]
    cc0c:	1d3a      	adds	r2, r7, #4
    cc0e:	8812      	ldrh	r2, [r2, #0]
    cc10:	4013      	ands	r3, r2
    cc12:	b29b      	uxth	r3, r3
    cc14:	2b00      	cmp	r3, #0
    cc16:	d01d      	beq.n	cc54 <_usb_device_interrupt_handler+0xdc>
				if (i == USB_DEVICE_CALLBACK_LPMSUSP) {
    cc18:	68fb      	ldr	r3, [r7, #12]
    cc1a:	2b06      	cmp	r3, #6
    cc1c:	d10c      	bne.n	cc38 <_usb_device_interrupt_handler+0xc0>
					device_callback_lpm_wakeup_enable =
							usb_descriptor_table.usb_endpoint_table[0].DeviceDescBank[0].EXTREG.bit.VARIABLE
    cc1e:	4b93      	ldr	r3, [pc, #588]	; (ce6c <_usb_device_interrupt_handler+0x2f4>)
    cc20:	58e3      	ldr	r3, [r4, r3]
    cc22:	891b      	ldrh	r3, [r3, #8]
    cc24:	045b      	lsls	r3, r3, #17
    cc26:	0d5b      	lsrs	r3, r3, #21
    cc28:	b29b      	uxth	r3, r3
							& USB_LPM_ATTRIBUT_REMOTEWAKE_MASK;
    cc2a:	001a      	movs	r2, r3
    cc2c:	2380      	movs	r3, #128	; 0x80
    cc2e:	005b      	lsls	r3, r3, #1
    cc30:	401a      	ands	r2, r3
					device_callback_lpm_wakeup_enable =
    cc32:	4b8f      	ldr	r3, [pc, #572]	; (ce70 <_usb_device_interrupt_handler+0x2f8>)
    cc34:	447b      	add	r3, pc
    cc36:	601a      	str	r2, [r3, #0]
				}
				(_usb_instances->device_callback[i])(_usb_instances, &device_callback_lpm_wakeup_enable);
    cc38:	4b8e      	ldr	r3, [pc, #568]	; (ce74 <_usb_device_interrupt_handler+0x2fc>)
    cc3a:	447b      	add	r3, pc
    cc3c:	681b      	ldr	r3, [r3, #0]
    cc3e:	68fa      	ldr	r2, [r7, #12]
    cc40:	322e      	adds	r2, #46	; 0x2e
    cc42:	0092      	lsls	r2, r2, #2
    cc44:	58d2      	ldr	r2, [r2, r3]
    cc46:	4b8c      	ldr	r3, [pc, #560]	; (ce78 <_usb_device_interrupt_handler+0x300>)
    cc48:	447b      	add	r3, pc
    cc4a:	681b      	ldr	r3, [r3, #0]
    cc4c:	498b      	ldr	r1, [pc, #556]	; (ce7c <_usb_device_interrupt_handler+0x304>)
    cc4e:	4479      	add	r1, pc
    cc50:	0018      	movs	r0, r3
    cc52:	4790      	blx	r2
		for (i = 0; i < USB_DEVICE_CALLBACK_N; i ++) {
    cc54:	68fb      	ldr	r3, [r7, #12]
    cc56:	3301      	adds	r3, #1
    cc58:	60fb      	str	r3, [r7, #12]
    cc5a:	68fb      	ldr	r3, [r7, #12]
    cc5c:	2b06      	cmp	r3, #6
    cc5e:	ddbb      	ble.n	cbd8 <_usb_device_interrupt_handler+0x60>
    cc60:	e2ba      	b.n	d1d8 <_usb_device_interrupt_handler+0x660>
		}

	} else {
		/* endpoint interrupt */

		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    cc62:	230b      	movs	r3, #11
    cc64:	18fb      	adds	r3, r7, r3
    cc66:	2200      	movs	r2, #0
    cc68:	701a      	strb	r2, [r3, #0]
    cc6a:	e2a5      	b.n	d1b8 <_usb_device_interrupt_handler+0x640>

			if (ep_inst & (1 << i)) {
    cc6c:	2308      	movs	r3, #8
    cc6e:	18fb      	adds	r3, r7, r3
    cc70:	881a      	ldrh	r2, [r3, #0]
    cc72:	230b      	movs	r3, #11
    cc74:	18fb      	adds	r3, r7, r3
    cc76:	781b      	ldrb	r3, [r3, #0]
    cc78:	411a      	asrs	r2, r3
    cc7a:	0013      	movs	r3, r2
    cc7c:	2201      	movs	r2, #1
    cc7e:	4013      	ands	r3, r2
    cc80:	d100      	bne.n	cc84 <_usb_device_interrupt_handler+0x10c>
    cc82:	e292      	b.n	d1aa <_usb_device_interrupt_handler+0x632>
				flags = _usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg;
    cc84:	4b7e      	ldr	r3, [pc, #504]	; (ce80 <_usb_device_interrupt_handler+0x308>)
    cc86:	447b      	add	r3, pc
    cc88:	681b      	ldr	r3, [r3, #0]
    cc8a:	681a      	ldr	r2, [r3, #0]
    cc8c:	230b      	movs	r3, #11
    cc8e:	18fb      	adds	r3, r7, r3
    cc90:	781b      	ldrb	r3, [r3, #0]
    cc92:	3308      	adds	r3, #8
    cc94:	015b      	lsls	r3, r3, #5
    cc96:	18d3      	adds	r3, r2, r3
    cc98:	3307      	adds	r3, #7
    cc9a:	781b      	ldrb	r3, [r3, #0]
    cc9c:	b2da      	uxtb	r2, r3
    cc9e:	1dbb      	adds	r3, r7, #6
    cca0:	801a      	strh	r2, [r3, #0]
				flags_run = flags &
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    cca2:	4b78      	ldr	r3, [pc, #480]	; (ce84 <_usb_device_interrupt_handler+0x30c>)
    cca4:	447b      	add	r3, pc
    cca6:	6819      	ldr	r1, [r3, #0]
    cca8:	230b      	movs	r3, #11
    ccaa:	18fb      	adds	r3, r7, r3
    ccac:	781a      	ldrb	r2, [r3, #0]
    ccae:	23b0      	movs	r3, #176	; 0xb0
    ccb0:	005b      	lsls	r3, r3, #1
    ccb2:	188a      	adds	r2, r1, r2
    ccb4:	18d3      	adds	r3, r2, r3
    ccb6:	781b      	ldrb	r3, [r3, #0]
    ccb8:	b29b      	uxth	r3, r3
				flags_run = flags &
    ccba:	1dba      	adds	r2, r7, #6
    ccbc:	8812      	ldrh	r2, [r2, #0]
    ccbe:	4013      	ands	r3, r2
    ccc0:	b29b      	uxth	r3, r3
    ccc2:	b21a      	sxth	r2, r3
						_usb_instances->device_endpoint_registered_callback_mask[i];
    ccc4:	4b70      	ldr	r3, [pc, #448]	; (ce88 <_usb_device_interrupt_handler+0x310>)
    ccc6:	447b      	add	r3, pc
    ccc8:	6818      	ldr	r0, [r3, #0]
    ccca:	230b      	movs	r3, #11
    cccc:	18fb      	adds	r3, r7, r3
    ccce:	7819      	ldrb	r1, [r3, #0]
    ccd0:	23ac      	movs	r3, #172	; 0xac
    ccd2:	005b      	lsls	r3, r3, #1
    ccd4:	1841      	adds	r1, r0, r1
    ccd6:	18cb      	adds	r3, r1, r3
    ccd8:	781b      	ldrb	r3, [r3, #0]
    ccda:	b21b      	sxth	r3, r3
						_usb_instances->device_endpoint_enabled_callback_mask[i] &
    ccdc:	4013      	ands	r3, r2
    ccde:	b21a      	sxth	r2, r3
				flags_run = flags &
    cce0:	1d3b      	adds	r3, r7, #4
    cce2:	801a      	strh	r2, [r3, #0]

				// endpoint transfer stall interrupt
				if (flags & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    cce4:	1dbb      	adds	r3, r7, #6
    cce6:	881b      	ldrh	r3, [r3, #0]
    cce8:	2260      	movs	r2, #96	; 0x60
    ccea:	4013      	ands	r3, r2
    ccec:	d065      	beq.n	cdba <_usb_device_interrupt_handler+0x242>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL1) {
    ccee:	4b67      	ldr	r3, [pc, #412]	; (ce8c <_usb_device_interrupt_handler+0x314>)
    ccf0:	447b      	add	r3, pc
    ccf2:	681b      	ldr	r3, [r3, #0]
    ccf4:	681a      	ldr	r2, [r3, #0]
    ccf6:	230b      	movs	r3, #11
    ccf8:	18fb      	adds	r3, r7, r3
    ccfa:	781b      	ldrb	r3, [r3, #0]
    ccfc:	3308      	adds	r3, #8
    ccfe:	015b      	lsls	r3, r3, #5
    cd00:	18d3      	adds	r3, r2, r3
    cd02:	3307      	adds	r3, #7
    cd04:	781b      	ldrb	r3, [r3, #0]
    cd06:	b2db      	uxtb	r3, r3
    cd08:	001a      	movs	r2, r3
    cd0a:	2340      	movs	r3, #64	; 0x40
    cd0c:	4013      	ands	r3, r2
    cd0e:	d017      	beq.n	cd40 <_usb_device_interrupt_handler+0x1c8>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL1;
    cd10:	4b5f      	ldr	r3, [pc, #380]	; (ce90 <_usb_device_interrupt_handler+0x318>)
    cd12:	447b      	add	r3, pc
    cd14:	681b      	ldr	r3, [r3, #0]
    cd16:	681a      	ldr	r2, [r3, #0]
    cd18:	230b      	movs	r3, #11
    cd1a:	18fb      	adds	r3, r7, r3
    cd1c:	781b      	ldrb	r3, [r3, #0]
    cd1e:	3308      	adds	r3, #8
    cd20:	015b      	lsls	r3, r3, #5
    cd22:	18d3      	adds	r3, r2, r3
    cd24:	3307      	adds	r3, #7
    cd26:	2240      	movs	r2, #64	; 0x40
    cd28:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    cd2a:	230b      	movs	r3, #11
    cd2c:	18fb      	adds	r3, r7, r3
    cd2e:	781b      	ldrb	r3, [r3, #0]
    cd30:	2280      	movs	r2, #128	; 0x80
    cd32:	4252      	negs	r2, r2
    cd34:	4313      	orrs	r3, r2
    cd36:	b2da      	uxtb	r2, r3
    cd38:	4b56      	ldr	r3, [pc, #344]	; (ce94 <_usb_device_interrupt_handler+0x31c>)
    cd3a:	447b      	add	r3, pc
    cd3c:	719a      	strb	r2, [r3, #6]
    cd3e:	e023      	b.n	cd88 <_usb_device_interrupt_handler+0x210>
					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_STALL0) {
    cd40:	4b55      	ldr	r3, [pc, #340]	; (ce98 <_usb_device_interrupt_handler+0x320>)
    cd42:	447b      	add	r3, pc
    cd44:	681b      	ldr	r3, [r3, #0]
    cd46:	681a      	ldr	r2, [r3, #0]
    cd48:	230b      	movs	r3, #11
    cd4a:	18fb      	adds	r3, r7, r3
    cd4c:	781b      	ldrb	r3, [r3, #0]
    cd4e:	3308      	adds	r3, #8
    cd50:	015b      	lsls	r3, r3, #5
    cd52:	18d3      	adds	r3, r2, r3
    cd54:	3307      	adds	r3, #7
    cd56:	781b      	ldrb	r3, [r3, #0]
    cd58:	b2db      	uxtb	r3, r3
    cd5a:	001a      	movs	r2, r3
    cd5c:	2320      	movs	r3, #32
    cd5e:	4013      	ands	r3, r2
    cd60:	d012      	beq.n	cd88 <_usb_device_interrupt_handler+0x210>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_STALL0;
    cd62:	4b4e      	ldr	r3, [pc, #312]	; (ce9c <_usb_device_interrupt_handler+0x324>)
    cd64:	447b      	add	r3, pc
    cd66:	681b      	ldr	r3, [r3, #0]
    cd68:	681a      	ldr	r2, [r3, #0]
    cd6a:	230b      	movs	r3, #11
    cd6c:	18fb      	adds	r3, r7, r3
    cd6e:	781b      	ldrb	r3, [r3, #0]
    cd70:	3308      	adds	r3, #8
    cd72:	015b      	lsls	r3, r3, #5
    cd74:	18d3      	adds	r3, r2, r3
    cd76:	3307      	adds	r3, #7
    cd78:	2220      	movs	r2, #32
    cd7a:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    cd7c:	4b48      	ldr	r3, [pc, #288]	; (cea0 <_usb_device_interrupt_handler+0x328>)
    cd7e:	447b      	add	r3, pc
    cd80:	220b      	movs	r2, #11
    cd82:	18ba      	adds	r2, r7, r2
    cd84:	7812      	ldrb	r2, [r2, #0]
    cd86:	719a      	strb	r2, [r3, #6]
					}

					if (flags_run & USB_DEVICE_EPINTFLAG_STALL_Msk) {
    cd88:	1d3b      	adds	r3, r7, #4
    cd8a:	881b      	ldrh	r3, [r3, #0]
    cd8c:	2260      	movs	r2, #96	; 0x60
    cd8e:	4013      	ands	r3, r2
    cd90:	d100      	bne.n	cd94 <_usb_device_interrupt_handler+0x21c>
    cd92:	e218      	b.n	d1c6 <_usb_device_interrupt_handler+0x64e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_STALL])(_usb_instances,&ep_callback_para);
    cd94:	4b43      	ldr	r3, [pc, #268]	; (cea4 <_usb_device_interrupt_handler+0x32c>)
    cd96:	447b      	add	r3, pc
    cd98:	681a      	ldr	r2, [r3, #0]
    cd9a:	230b      	movs	r3, #11
    cd9c:	18fb      	adds	r3, r7, r3
    cd9e:	781b      	ldrb	r3, [r3, #0]
    cda0:	21e0      	movs	r1, #224	; 0xe0
    cda2:	011b      	lsls	r3, r3, #4
    cda4:	18d3      	adds	r3, r2, r3
    cda6:	185b      	adds	r3, r3, r1
    cda8:	681a      	ldr	r2, [r3, #0]
    cdaa:	4b3f      	ldr	r3, [pc, #252]	; (cea8 <_usb_device_interrupt_handler+0x330>)
    cdac:	447b      	add	r3, pc
    cdae:	681b      	ldr	r3, [r3, #0]
    cdb0:	493e      	ldr	r1, [pc, #248]	; (ceac <_usb_device_interrupt_handler+0x334>)
    cdb2:	4479      	add	r1, pc
    cdb4:	0018      	movs	r0, r3
    cdb6:	4790      	blx	r2
					}
					return;
    cdb8:	e205      	b.n	d1c6 <_usb_device_interrupt_handler+0x64e>
				}

				// endpoint received setup interrupt
				if (flags & USB_DEVICE_EPINTFLAG_RXSTP) {
    cdba:	1dbb      	adds	r3, r7, #6
    cdbc:	881b      	ldrh	r3, [r3, #0]
    cdbe:	2210      	movs	r2, #16
    cdc0:	4013      	ands	r3, r2
    cdc2:	d100      	bne.n	cdc6 <_usb_device_interrupt_handler+0x24e>
    cdc4:	e080      	b.n	cec8 <_usb_device_interrupt_handler+0x350>
					_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_RXSTP;
    cdc6:	4b3a      	ldr	r3, [pc, #232]	; (ceb0 <_usb_device_interrupt_handler+0x338>)
    cdc8:	447b      	add	r3, pc
    cdca:	681b      	ldr	r3, [r3, #0]
    cdcc:	681a      	ldr	r2, [r3, #0]
    cdce:	230b      	movs	r3, #11
    cdd0:	18fb      	adds	r3, r7, r3
    cdd2:	781b      	ldrb	r3, [r3, #0]
    cdd4:	3308      	adds	r3, #8
    cdd6:	015b      	lsls	r3, r3, #5
    cdd8:	18d3      	adds	r3, r2, r3
    cdda:	3307      	adds	r3, #7
    cddc:	2210      	movs	r2, #16
    cdde:	701a      	strb	r2, [r3, #0]
					if(_usb_instances->device_endpoint_enabled_callback_mask[i] & _usb_endpoint_irq_bits[USB_DEVICE_ENDPOINT_CALLBACK_RXSTP]) {
    cde0:	4b34      	ldr	r3, [pc, #208]	; (ceb4 <_usb_device_interrupt_handler+0x33c>)
    cde2:	447b      	add	r3, pc
    cde4:	6819      	ldr	r1, [r3, #0]
    cde6:	230b      	movs	r3, #11
    cde8:	18fb      	adds	r3, r7, r3
    cdea:	781a      	ldrb	r2, [r3, #0]
    cdec:	23b0      	movs	r3, #176	; 0xb0
    cdee:	005b      	lsls	r3, r3, #1
    cdf0:	188a      	adds	r2, r1, r2
    cdf2:	18d3      	adds	r3, r2, r3
    cdf4:	781b      	ldrb	r3, [r3, #0]
    cdf6:	2210      	movs	r2, #16
    cdf8:	4013      	ands	r3, r2
    cdfa:	b2db      	uxtb	r3, r3
    cdfc:	2b00      	cmp	r3, #0
    cdfe:	d100      	bne.n	ce02 <_usb_device_interrupt_handler+0x28a>
    ce00:	e1e3      	b.n	d1ca <_usb_device_interrupt_handler+0x652>
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    ce02:	230b      	movs	r3, #11
    ce04:	18fb      	adds	r3, r7, r3
    ce06:	781b      	ldrb	r3, [r3, #0]
    ce08:	4a18      	ldr	r2, [pc, #96]	; (ce6c <_usb_device_interrupt_handler+0x2f4>)
    ce0a:	58a2      	ldr	r2, [r4, r2]
    ce0c:	015b      	lsls	r3, r3, #5
    ce0e:	18d3      	adds	r3, r2, r3
    ce10:	685b      	ldr	r3, [r3, #4]
    ce12:	049b      	lsls	r3, r3, #18
    ce14:	0c9b      	lsrs	r3, r3, #18
    ce16:	b29b      	uxth	r3, r3
    ce18:	001a      	movs	r2, r3
    ce1a:	4b27      	ldr	r3, [pc, #156]	; (ceb8 <_usb_device_interrupt_handler+0x340>)
    ce1c:	447b      	add	r3, pc
    ce1e:	801a      	strh	r2, [r3, #0]
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_RXSTP])(_usb_instances,&ep_callback_para);
    ce20:	4b26      	ldr	r3, [pc, #152]	; (cebc <_usb_device_interrupt_handler+0x344>)
    ce22:	447b      	add	r3, pc
    ce24:	681a      	ldr	r2, [r3, #0]
    ce26:	230b      	movs	r3, #11
    ce28:	18fb      	adds	r3, r7, r3
    ce2a:	781b      	ldrb	r3, [r3, #0]
    ce2c:	21dc      	movs	r1, #220	; 0xdc
    ce2e:	011b      	lsls	r3, r3, #4
    ce30:	18d3      	adds	r3, r2, r3
    ce32:	185b      	adds	r3, r3, r1
    ce34:	681a      	ldr	r2, [r3, #0]
    ce36:	4b22      	ldr	r3, [pc, #136]	; (cec0 <_usb_device_interrupt_handler+0x348>)
    ce38:	447b      	add	r3, pc
    ce3a:	681b      	ldr	r3, [r3, #0]
    ce3c:	4921      	ldr	r1, [pc, #132]	; (cec4 <_usb_device_interrupt_handler+0x34c>)
    ce3e:	4479      	add	r1, pc
    ce40:	0018      	movs	r0, r3
    ce42:	4790      	blx	r2
					}
					return;
    ce44:	e1c1      	b.n	d1ca <_usb_device_interrupt_handler+0x652>
    ce46:	46c0      	nop			; (mov r8, r8)
    ce48:	000028b0 	.word	0x000028b0
    ce4c:	1fff38ac 	.word	0x1fff38ac
    ce50:	1fff3890 	.word	0x1fff3890
    ce54:	1fff3882 	.word	0x1fff3882
    ce58:	1fff386e 	.word	0x1fff386e
    ce5c:	0000278a 	.word	0x0000278a
    ce60:	1fff3840 	.word	0x1fff3840
    ce64:	0000276c 	.word	0x0000276c
    ce68:	00002760 	.word	0x00002760
    ce6c:	00000024 	.word	0x00000024
    ce70:	1fff3808 	.word	0x1fff3808
    ce74:	1fff37f6 	.word	0x1fff37f6
    ce78:	1fff37e8 	.word	0x1fff37e8
    ce7c:	1fff37ee 	.word	0x1fff37ee
    ce80:	1fff37aa 	.word	0x1fff37aa
    ce84:	1fff378c 	.word	0x1fff378c
    ce88:	1fff376a 	.word	0x1fff376a
    ce8c:	1fff3740 	.word	0x1fff3740
    ce90:	1fff371e 	.word	0x1fff371e
    ce94:	1fff3706 	.word	0x1fff3706
    ce98:	1fff36ee 	.word	0x1fff36ee
    ce9c:	1fff36cc 	.word	0x1fff36cc
    cea0:	1fff36c2 	.word	0x1fff36c2
    cea4:	1fff369a 	.word	0x1fff369a
    cea8:	1fff3684 	.word	0x1fff3684
    ceac:	1fff368e 	.word	0x1fff368e
    ceb0:	1fff3668 	.word	0x1fff3668
    ceb4:	1fff364e 	.word	0x1fff364e
    ceb8:	1fff3624 	.word	0x1fff3624
    cebc:	1fff360e 	.word	0x1fff360e
    cec0:	1fff35f8 	.word	0x1fff35f8
    cec4:	1fff3602 	.word	0x1fff3602
				}

				// endpoint transfer complete interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    cec8:	1dbb      	adds	r3, r7, #6
    ceca:	881b      	ldrh	r3, [r3, #0]
    cecc:	2203      	movs	r2, #3
    cece:	4013      	ands	r3, r2
    ced0:	d100      	bne.n	ced4 <_usb_device_interrupt_handler+0x35c>
    ced2:	e093      	b.n	cffc <_usb_device_interrupt_handler+0x484>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    ced4:	4bc2      	ldr	r3, [pc, #776]	; (d1e0 <_usb_device_interrupt_handler+0x668>)
    ced6:	447b      	add	r3, pc
    ced8:	681b      	ldr	r3, [r3, #0]
    ceda:	681a      	ldr	r2, [r3, #0]
    cedc:	230b      	movs	r3, #11
    cede:	18fb      	adds	r3, r7, r3
    cee0:	781b      	ldrb	r3, [r3, #0]
    cee2:	3308      	adds	r3, #8
    cee4:	015b      	lsls	r3, r3, #5
    cee6:	18d3      	adds	r3, r2, r3
    cee8:	3307      	adds	r3, #7
    ceea:	781b      	ldrb	r3, [r3, #0]
    ceec:	b2db      	uxtb	r3, r3
    ceee:	001a      	movs	r2, r3
    cef0:	2302      	movs	r3, #2
    cef2:	4013      	ands	r3, r2
    cef4:	d027      	beq.n	cf46 <_usb_device_interrupt_handler+0x3ce>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT1;
    cef6:	4bbb      	ldr	r3, [pc, #748]	; (d1e4 <_usb_device_interrupt_handler+0x66c>)
    cef8:	447b      	add	r3, pc
    cefa:	681b      	ldr	r3, [r3, #0]
    cefc:	681a      	ldr	r2, [r3, #0]
    cefe:	230b      	movs	r3, #11
    cf00:	18fb      	adds	r3, r7, r3
    cf02:	781b      	ldrb	r3, [r3, #0]
    cf04:	3308      	adds	r3, #8
    cf06:	015b      	lsls	r3, r3, #5
    cf08:	18d3      	adds	r3, r2, r3
    cf0a:	3307      	adds	r3, #7
    cf0c:	2202      	movs	r2, #2
    cf0e:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    cf10:	230b      	movs	r3, #11
    cf12:	18fb      	adds	r3, r7, r3
    cf14:	781b      	ldrb	r3, [r3, #0]
    cf16:	2280      	movs	r2, #128	; 0x80
    cf18:	4252      	negs	r2, r2
    cf1a:	4313      	orrs	r3, r2
    cf1c:	b2da      	uxtb	r2, r3
    cf1e:	4bb2      	ldr	r3, [pc, #712]	; (d1e8 <_usb_device_interrupt_handler+0x670>)
    cf20:	447b      	add	r3, pc
    cf22:	719a      	strb	r2, [r3, #6]
						ep_callback_para.sent_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].PCKSIZE.bit.BYTE_COUNT);
    cf24:	230b      	movs	r3, #11
    cf26:	18fb      	adds	r3, r7, r3
    cf28:	781b      	ldrb	r3, [r3, #0]
    cf2a:	4ab0      	ldr	r2, [pc, #704]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    cf2c:	58a2      	ldr	r2, [r4, r2]
    cf2e:	015b      	lsls	r3, r3, #5
    cf30:	18d3      	adds	r3, r2, r3
    cf32:	3310      	adds	r3, #16
    cf34:	685b      	ldr	r3, [r3, #4]
    cf36:	049b      	lsls	r3, r3, #18
    cf38:	0c9b      	lsrs	r3, r3, #18
    cf3a:	b29b      	uxth	r3, r3
    cf3c:	001a      	movs	r2, r3
    cf3e:	4bac      	ldr	r3, [pc, #688]	; (d1f0 <_usb_device_interrupt_handler+0x678>)
    cf40:	447b      	add	r3, pc
    cf42:	805a      	strh	r2, [r3, #2]
    cf44:	e041      	b.n	cfca <_usb_device_interrupt_handler+0x452>

					} else if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    cf46:	4bab      	ldr	r3, [pc, #684]	; (d1f4 <_usb_device_interrupt_handler+0x67c>)
    cf48:	447b      	add	r3, pc
    cf4a:	681b      	ldr	r3, [r3, #0]
    cf4c:	681a      	ldr	r2, [r3, #0]
    cf4e:	230b      	movs	r3, #11
    cf50:	18fb      	adds	r3, r7, r3
    cf52:	781b      	ldrb	r3, [r3, #0]
    cf54:	3308      	adds	r3, #8
    cf56:	015b      	lsls	r3, r3, #5
    cf58:	18d3      	adds	r3, r2, r3
    cf5a:	3307      	adds	r3, #7
    cf5c:	781b      	ldrb	r3, [r3, #0]
    cf5e:	b2db      	uxtb	r3, r3
    cf60:	001a      	movs	r2, r3
    cf62:	2301      	movs	r3, #1
    cf64:	4013      	ands	r3, r2
    cf66:	d030      	beq.n	cfca <_usb_device_interrupt_handler+0x452>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRCPT0;
    cf68:	4ba3      	ldr	r3, [pc, #652]	; (d1f8 <_usb_device_interrupt_handler+0x680>)
    cf6a:	447b      	add	r3, pc
    cf6c:	681b      	ldr	r3, [r3, #0]
    cf6e:	681a      	ldr	r2, [r3, #0]
    cf70:	230b      	movs	r3, #11
    cf72:	18fb      	adds	r3, r7, r3
    cf74:	781b      	ldrb	r3, [r3, #0]
    cf76:	3308      	adds	r3, #8
    cf78:	015b      	lsls	r3, r3, #5
    cf7a:	18d3      	adds	r3, r2, r3
    cf7c:	3307      	adds	r3, #7
    cf7e:	2201      	movs	r2, #1
    cf80:	701a      	strb	r2, [r3, #0]
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    cf82:	4b9e      	ldr	r3, [pc, #632]	; (d1fc <_usb_device_interrupt_handler+0x684>)
    cf84:	447b      	add	r3, pc
    cf86:	220b      	movs	r2, #11
    cf88:	18ba      	adds	r2, r7, r2
    cf8a:	7812      	ldrb	r2, [r2, #0]
    cf8c:	719a      	strb	r2, [r3, #6]
						ep_callback_para.received_bytes = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.BYTE_COUNT);
    cf8e:	230b      	movs	r3, #11
    cf90:	18fb      	adds	r3, r7, r3
    cf92:	781b      	ldrb	r3, [r3, #0]
    cf94:	4a95      	ldr	r2, [pc, #596]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    cf96:	58a2      	ldr	r2, [r4, r2]
    cf98:	015b      	lsls	r3, r3, #5
    cf9a:	18d3      	adds	r3, r2, r3
    cf9c:	685b      	ldr	r3, [r3, #4]
    cf9e:	049b      	lsls	r3, r3, #18
    cfa0:	0c9b      	lsrs	r3, r3, #18
    cfa2:	b29b      	uxth	r3, r3
    cfa4:	001a      	movs	r2, r3
    cfa6:	4b96      	ldr	r3, [pc, #600]	; (d200 <_usb_device_interrupt_handler+0x688>)
    cfa8:	447b      	add	r3, pc
    cfaa:	801a      	strh	r2, [r3, #0]
						ep_callback_para.out_buffer_size = (uint16_t)(usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].PCKSIZE.bit.MULTI_PACKET_SIZE);
    cfac:	230b      	movs	r3, #11
    cfae:	18fb      	adds	r3, r7, r3
    cfb0:	781b      	ldrb	r3, [r3, #0]
    cfb2:	4a8e      	ldr	r2, [pc, #568]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    cfb4:	58a2      	ldr	r2, [r4, r2]
    cfb6:	015b      	lsls	r3, r3, #5
    cfb8:	18d3      	adds	r3, r2, r3
    cfba:	685b      	ldr	r3, [r3, #4]
    cfbc:	011b      	lsls	r3, r3, #4
    cfbe:	0c9b      	lsrs	r3, r3, #18
    cfc0:	b29b      	uxth	r3, r3
    cfc2:	001a      	movs	r2, r3
    cfc4:	4b8f      	ldr	r3, [pc, #572]	; (d204 <_usb_device_interrupt_handler+0x68c>)
    cfc6:	447b      	add	r3, pc
    cfc8:	809a      	strh	r2, [r3, #4]
					}
					if(flags_run & USB_DEVICE_EPINTFLAG_TRCPT_Msk) {
    cfca:	1d3b      	adds	r3, r7, #4
    cfcc:	881b      	ldrh	r3, [r3, #0]
    cfce:	2203      	movs	r2, #3
    cfd0:	4013      	ands	r3, r2
    cfd2:	d100      	bne.n	cfd6 <_usb_device_interrupt_handler+0x45e>
    cfd4:	e0fb      	b.n	d1ce <_usb_device_interrupt_handler+0x656>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRCPT])(_usb_instances,&ep_callback_para);
    cfd6:	4b8c      	ldr	r3, [pc, #560]	; (d208 <_usb_device_interrupt_handler+0x690>)
    cfd8:	447b      	add	r3, pc
    cfda:	681a      	ldr	r2, [r3, #0]
    cfdc:	230b      	movs	r3, #11
    cfde:	18fb      	adds	r3, r7, r3
    cfe0:	781b      	ldrb	r3, [r3, #0]
    cfe2:	330d      	adds	r3, #13
    cfe4:	011b      	lsls	r3, r3, #4
    cfe6:	18d3      	adds	r3, r2, r3
    cfe8:	3304      	adds	r3, #4
    cfea:	681a      	ldr	r2, [r3, #0]
    cfec:	4b87      	ldr	r3, [pc, #540]	; (d20c <_usb_device_interrupt_handler+0x694>)
    cfee:	447b      	add	r3, pc
    cff0:	681b      	ldr	r3, [r3, #0]
    cff2:	4987      	ldr	r1, [pc, #540]	; (d210 <_usb_device_interrupt_handler+0x698>)
    cff4:	4479      	add	r1, pc
    cff6:	0018      	movs	r0, r3
    cff8:	4790      	blx	r2
					}
					return;
    cffa:	e0e8      	b.n	d1ce <_usb_device_interrupt_handler+0x656>
				}

				// endpoint transfer fail interrupt
				if (flags & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    cffc:	1dbb      	adds	r3, r7, #6
    cffe:	881b      	ldrh	r3, [r3, #0]
    d000:	220c      	movs	r2, #12
    d002:	4013      	ands	r3, r2
    d004:	d100      	bne.n	d008 <_usb_device_interrupt_handler+0x490>
    d006:	e0d0      	b.n	d1aa <_usb_device_interrupt_handler+0x632>
					if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL1) {
    d008:	4b82      	ldr	r3, [pc, #520]	; (d214 <_usb_device_interrupt_handler+0x69c>)
    d00a:	447b      	add	r3, pc
    d00c:	681b      	ldr	r3, [r3, #0]
    d00e:	681a      	ldr	r2, [r3, #0]
    d010:	230b      	movs	r3, #11
    d012:	18fb      	adds	r3, r7, r3
    d014:	781b      	ldrb	r3, [r3, #0]
    d016:	3308      	adds	r3, #8
    d018:	015b      	lsls	r3, r3, #5
    d01a:	18d3      	adds	r3, r2, r3
    d01c:	3307      	adds	r3, #7
    d01e:	781b      	ldrb	r3, [r3, #0]
    d020:	b2db      	uxtb	r3, r3
    d022:	001a      	movs	r2, r3
    d024:	2308      	movs	r3, #8
    d026:	4013      	ands	r3, r2
    d028:	d04d      	beq.n	d0c6 <_usb_device_interrupt_handler+0x54e>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL1;
    d02a:	4b7b      	ldr	r3, [pc, #492]	; (d218 <_usb_device_interrupt_handler+0x6a0>)
    d02c:	447b      	add	r3, pc
    d02e:	681b      	ldr	r3, [r3, #0]
    d030:	681a      	ldr	r2, [r3, #0]
    d032:	230b      	movs	r3, #11
    d034:	18fb      	adds	r3, r7, r3
    d036:	781b      	ldrb	r3, [r3, #0]
    d038:	3308      	adds	r3, #8
    d03a:	015b      	lsls	r3, r3, #5
    d03c:	18d3      	adds	r3, r2, r3
    d03e:	3307      	adds	r3, #7
    d040:	2208      	movs	r2, #8
    d042:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    d044:	230b      	movs	r3, #11
    d046:	18fb      	adds	r3, r7, r3
    d048:	781b      	ldrb	r3, [r3, #0]
    d04a:	4a68      	ldr	r2, [pc, #416]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    d04c:	58a2      	ldr	r2, [r4, r2]
    d04e:	015b      	lsls	r3, r3, #5
    d050:	18d3      	adds	r3, r2, r3
    d052:	331a      	adds	r3, #26
    d054:	781b      	ldrb	r3, [r3, #0]
    d056:	b2db      	uxtb	r3, r3
    d058:	001a      	movs	r2, r3
    d05a:	2302      	movs	r3, #2
    d05c:	4013      	ands	r3, r2
    d05e:	d016      	beq.n	d08e <_usb_device_interrupt_handler+0x516>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[1].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    d060:	230b      	movs	r3, #11
    d062:	18fb      	adds	r3, r7, r3
    d064:	781b      	ldrb	r3, [r3, #0]
    d066:	220b      	movs	r2, #11
    d068:	18ba      	adds	r2, r7, r2
    d06a:	7812      	ldrb	r2, [r2, #0]
    d06c:	495f      	ldr	r1, [pc, #380]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    d06e:	5861      	ldr	r1, [r4, r1]
    d070:	0152      	lsls	r2, r2, #5
    d072:	188a      	adds	r2, r1, r2
    d074:	321a      	adds	r2, #26
    d076:	7812      	ldrb	r2, [r2, #0]
    d078:	b2d2      	uxtb	r2, r2
    d07a:	2102      	movs	r1, #2
    d07c:	438a      	bics	r2, r1
    d07e:	b2d1      	uxtb	r1, r2
    d080:	4a5a      	ldr	r2, [pc, #360]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    d082:	58a2      	ldr	r2, [r4, r2]
    d084:	015b      	lsls	r3, r3, #5
    d086:	18d3      	adds	r3, r2, r3
    d088:	331a      	adds	r3, #26
    d08a:	1c0a      	adds	r2, r1, #0
    d08c:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_IN | i;
    d08e:	230b      	movs	r3, #11
    d090:	18fb      	adds	r3, r7, r3
    d092:	781b      	ldrb	r3, [r3, #0]
    d094:	2280      	movs	r2, #128	; 0x80
    d096:	4252      	negs	r2, r2
    d098:	4313      	orrs	r3, r2
    d09a:	b2da      	uxtb	r2, r3
    d09c:	4b5f      	ldr	r3, [pc, #380]	; (d21c <_usb_device_interrupt_handler+0x6a4>)
    d09e:	447b      	add	r3, pc
    d0a0:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT1) {
    d0a2:	4b5f      	ldr	r3, [pc, #380]	; (d220 <_usb_device_interrupt_handler+0x6a8>)
    d0a4:	447b      	add	r3, pc
    d0a6:	681b      	ldr	r3, [r3, #0]
    d0a8:	681a      	ldr	r2, [r3, #0]
    d0aa:	230b      	movs	r3, #11
    d0ac:	18fb      	adds	r3, r7, r3
    d0ae:	781b      	ldrb	r3, [r3, #0]
    d0b0:	3308      	adds	r3, #8
    d0b2:	015b      	lsls	r3, r3, #5
    d0b4:	18d3      	adds	r3, r2, r3
    d0b6:	3307      	adds	r3, #7
    d0b8:	781b      	ldrb	r3, [r3, #0]
    d0ba:	b2db      	uxtb	r3, r3
    d0bc:	001a      	movs	r2, r3
    d0be:	2302      	movs	r3, #2
    d0c0:	4013      	ands	r3, r2
    d0c2:	d05a      	beq.n	d17a <_usb_device_interrupt_handler+0x602>
							return;
    d0c4:	e088      	b.n	d1d8 <_usb_device_interrupt_handler+0x660>
						}
					} else if(_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRFAIL0) {
    d0c6:	4b57      	ldr	r3, [pc, #348]	; (d224 <_usb_device_interrupt_handler+0x6ac>)
    d0c8:	447b      	add	r3, pc
    d0ca:	681b      	ldr	r3, [r3, #0]
    d0cc:	681a      	ldr	r2, [r3, #0]
    d0ce:	230b      	movs	r3, #11
    d0d0:	18fb      	adds	r3, r7, r3
    d0d2:	781b      	ldrb	r3, [r3, #0]
    d0d4:	3308      	adds	r3, #8
    d0d6:	015b      	lsls	r3, r3, #5
    d0d8:	18d3      	adds	r3, r2, r3
    d0da:	3307      	adds	r3, #7
    d0dc:	781b      	ldrb	r3, [r3, #0]
    d0de:	b2db      	uxtb	r3, r3
    d0e0:	001a      	movs	r2, r3
    d0e2:	2304      	movs	r3, #4
    d0e4:	4013      	ands	r3, r2
    d0e6:	d048      	beq.n	d17a <_usb_device_interrupt_handler+0x602>
						_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg = USB_DEVICE_EPINTFLAG_TRFAIL0;
    d0e8:	4b4f      	ldr	r3, [pc, #316]	; (d228 <_usb_device_interrupt_handler+0x6b0>)
    d0ea:	447b      	add	r3, pc
    d0ec:	681b      	ldr	r3, [r3, #0]
    d0ee:	681a      	ldr	r2, [r3, #0]
    d0f0:	230b      	movs	r3, #11
    d0f2:	18fb      	adds	r3, r7, r3
    d0f4:	781b      	ldrb	r3, [r3, #0]
    d0f6:	3308      	adds	r3, #8
    d0f8:	015b      	lsls	r3, r3, #5
    d0fa:	18d3      	adds	r3, r2, r3
    d0fc:	3307      	adds	r3, #7
    d0fe:	2204      	movs	r2, #4
    d100:	701a      	strb	r2, [r3, #0]
						if (usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg & USB_DEVICE_STATUS_BK_ERRORFLOW) {
    d102:	230b      	movs	r3, #11
    d104:	18fb      	adds	r3, r7, r3
    d106:	781b      	ldrb	r3, [r3, #0]
    d108:	4a38      	ldr	r2, [pc, #224]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    d10a:	58a2      	ldr	r2, [r4, r2]
    d10c:	015b      	lsls	r3, r3, #5
    d10e:	18d3      	adds	r3, r2, r3
    d110:	330a      	adds	r3, #10
    d112:	781b      	ldrb	r3, [r3, #0]
    d114:	b2db      	uxtb	r3, r3
    d116:	001a      	movs	r2, r3
    d118:	2302      	movs	r3, #2
    d11a:	4013      	ands	r3, r2
    d11c:	d016      	beq.n	d14c <_usb_device_interrupt_handler+0x5d4>
							usb_descriptor_table.usb_endpoint_table[i].DeviceDescBank[0].STATUS_BK.reg &= ~USB_DEVICE_STATUS_BK_ERRORFLOW;
    d11e:	230b      	movs	r3, #11
    d120:	18fb      	adds	r3, r7, r3
    d122:	781b      	ldrb	r3, [r3, #0]
    d124:	220b      	movs	r2, #11
    d126:	18ba      	adds	r2, r7, r2
    d128:	7812      	ldrb	r2, [r2, #0]
    d12a:	4930      	ldr	r1, [pc, #192]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    d12c:	5861      	ldr	r1, [r4, r1]
    d12e:	0152      	lsls	r2, r2, #5
    d130:	188a      	adds	r2, r1, r2
    d132:	320a      	adds	r2, #10
    d134:	7812      	ldrb	r2, [r2, #0]
    d136:	b2d2      	uxtb	r2, r2
    d138:	2102      	movs	r1, #2
    d13a:	438a      	bics	r2, r1
    d13c:	b2d1      	uxtb	r1, r2
    d13e:	4a2b      	ldr	r2, [pc, #172]	; (d1ec <_usb_device_interrupt_handler+0x674>)
    d140:	58a2      	ldr	r2, [r4, r2]
    d142:	015b      	lsls	r3, r3, #5
    d144:	18d3      	adds	r3, r2, r3
    d146:	330a      	adds	r3, #10
    d148:	1c0a      	adds	r2, r1, #0
    d14a:	701a      	strb	r2, [r3, #0]
						}
						ep_callback_para.endpoint_address = USB_EP_DIR_OUT | i;
    d14c:	4b37      	ldr	r3, [pc, #220]	; (d22c <_usb_device_interrupt_handler+0x6b4>)
    d14e:	447b      	add	r3, pc
    d150:	220b      	movs	r2, #11
    d152:	18ba      	adds	r2, r7, r2
    d154:	7812      	ldrb	r2, [r2, #0]
    d156:	719a      	strb	r2, [r3, #6]
						if (_usb_instances->hw->DEVICE.DeviceEndpoint[i].EPINTFLAG.reg & USB_DEVICE_EPINTFLAG_TRCPT0) {
    d158:	4b35      	ldr	r3, [pc, #212]	; (d230 <_usb_device_interrupt_handler+0x6b8>)
    d15a:	447b      	add	r3, pc
    d15c:	681b      	ldr	r3, [r3, #0]
    d15e:	681a      	ldr	r2, [r3, #0]
    d160:	230b      	movs	r3, #11
    d162:	18fb      	adds	r3, r7, r3
    d164:	781b      	ldrb	r3, [r3, #0]
    d166:	3308      	adds	r3, #8
    d168:	015b      	lsls	r3, r3, #5
    d16a:	18d3      	adds	r3, r2, r3
    d16c:	3307      	adds	r3, #7
    d16e:	781b      	ldrb	r3, [r3, #0]
    d170:	b2db      	uxtb	r3, r3
    d172:	001a      	movs	r2, r3
    d174:	2301      	movs	r3, #1
    d176:	4013      	ands	r3, r2
    d178:	d12b      	bne.n	d1d2 <_usb_device_interrupt_handler+0x65a>
							return;
						}
					}

					if(flags_run & USB_DEVICE_EPINTFLAG_TRFAIL_Msk) {
    d17a:	1d3b      	adds	r3, r7, #4
    d17c:	881b      	ldrh	r3, [r3, #0]
    d17e:	220c      	movs	r2, #12
    d180:	4013      	ands	r3, r2
    d182:	d028      	beq.n	d1d6 <_usb_device_interrupt_handler+0x65e>
						(_usb_instances->device_endpoint_callback[i][USB_DEVICE_ENDPOINT_CALLBACK_TRFAIL])(_usb_instances,&ep_callback_para);
    d184:	4b2b      	ldr	r3, [pc, #172]	; (d234 <_usb_device_interrupt_handler+0x6bc>)
    d186:	447b      	add	r3, pc
    d188:	681a      	ldr	r2, [r3, #0]
    d18a:	230b      	movs	r3, #11
    d18c:	18fb      	adds	r3, r7, r3
    d18e:	781b      	ldrb	r3, [r3, #0]
    d190:	21d8      	movs	r1, #216	; 0xd8
    d192:	011b      	lsls	r3, r3, #4
    d194:	18d3      	adds	r3, r2, r3
    d196:	185b      	adds	r3, r3, r1
    d198:	681a      	ldr	r2, [r3, #0]
    d19a:	4b27      	ldr	r3, [pc, #156]	; (d238 <_usb_device_interrupt_handler+0x6c0>)
    d19c:	447b      	add	r3, pc
    d19e:	681b      	ldr	r3, [r3, #0]
    d1a0:	4926      	ldr	r1, [pc, #152]	; (d23c <_usb_device_interrupt_handler+0x6c4>)
    d1a2:	4479      	add	r1, pc
    d1a4:	0018      	movs	r0, r3
    d1a6:	4790      	blx	r2
					}
					return;
    d1a8:	e015      	b.n	d1d6 <_usb_device_interrupt_handler+0x65e>
		for (uint8_t i = 0; i < USB_EPT_NUM; i++) {
    d1aa:	230b      	movs	r3, #11
    d1ac:	18fb      	adds	r3, r7, r3
    d1ae:	781a      	ldrb	r2, [r3, #0]
    d1b0:	230b      	movs	r3, #11
    d1b2:	18fb      	adds	r3, r7, r3
    d1b4:	3201      	adds	r2, #1
    d1b6:	701a      	strb	r2, [r3, #0]
    d1b8:	230b      	movs	r3, #11
    d1ba:	18fb      	adds	r3, r7, r3
    d1bc:	781b      	ldrb	r3, [r3, #0]
    d1be:	2b07      	cmp	r3, #7
    d1c0:	d800      	bhi.n	d1c4 <_usb_device_interrupt_handler+0x64c>
    d1c2:	e553      	b.n	cc6c <_usb_device_interrupt_handler+0xf4>
    d1c4:	e008      	b.n	d1d8 <_usb_device_interrupt_handler+0x660>
					return;
    d1c6:	46c0      	nop			; (mov r8, r8)
    d1c8:	e006      	b.n	d1d8 <_usb_device_interrupt_handler+0x660>
					return;
    d1ca:	46c0      	nop			; (mov r8, r8)
    d1cc:	e004      	b.n	d1d8 <_usb_device_interrupt_handler+0x660>
					return;
    d1ce:	46c0      	nop			; (mov r8, r8)
    d1d0:	e002      	b.n	d1d8 <_usb_device_interrupt_handler+0x660>
							return;
    d1d2:	46c0      	nop			; (mov r8, r8)
    d1d4:	e000      	b.n	d1d8 <_usb_device_interrupt_handler+0x660>
					return;
    d1d6:	46c0      	nop			; (mov r8, r8)
				}
			}
		}
	}
}
    d1d8:	46bd      	mov	sp, r7
    d1da:	b005      	add	sp, #20
    d1dc:	bd90      	pop	{r4, r7, pc}
    d1de:	46c0      	nop			; (mov r8, r8)
    d1e0:	1fff355a 	.word	0x1fff355a
    d1e4:	1fff3538 	.word	0x1fff3538
    d1e8:	1fff3520 	.word	0x1fff3520
    d1ec:	00000024 	.word	0x00000024
    d1f0:	1fff3500 	.word	0x1fff3500
    d1f4:	1fff34e8 	.word	0x1fff34e8
    d1f8:	1fff34c6 	.word	0x1fff34c6
    d1fc:	1fff34bc 	.word	0x1fff34bc
    d200:	1fff3498 	.word	0x1fff3498
    d204:	1fff347a 	.word	0x1fff347a
    d208:	1fff3458 	.word	0x1fff3458
    d20c:	1fff3442 	.word	0x1fff3442
    d210:	1fff344c 	.word	0x1fff344c
    d214:	1fff3426 	.word	0x1fff3426
    d218:	1fff3404 	.word	0x1fff3404
    d21c:	1fff33a2 	.word	0x1fff33a2
    d220:	1fff338c 	.word	0x1fff338c
    d224:	1fff3368 	.word	0x1fff3368
    d228:	1fff3346 	.word	0x1fff3346
    d22c:	1fff32f2 	.word	0x1fff32f2
    d230:	1fff32d6 	.word	0x1fff32d6
    d234:	1fff32aa 	.word	0x1fff32aa
    d238:	1fff3294 	.word	0x1fff3294
    d23c:	1fff329e 	.word	0x1fff329e

0000d240 <usb_enable>:
 * \brief Enable the USB module peripheral
 *
 * \param module_inst pointer to USB module instance
 */
void usb_enable(struct usb_module *module_inst)
{
    d240:	b580      	push	{r7, lr}
    d242:	b082      	sub	sp, #8
    d244:	af00      	add	r7, sp, #0
    d246:	6078      	str	r0, [r7, #4]
	Assert(module_inst);
	Assert(module_inst->hw);

	module_inst->hw->DEVICE.CTRLA.reg |= USB_CTRLA_ENABLE;
    d248:	687b      	ldr	r3, [r7, #4]
    d24a:	681a      	ldr	r2, [r3, #0]
    d24c:	687b      	ldr	r3, [r7, #4]
    d24e:	681b      	ldr	r3, [r3, #0]
    d250:	781b      	ldrb	r3, [r3, #0]
    d252:	b2db      	uxtb	r3, r3
    d254:	2102      	movs	r1, #2
    d256:	430b      	orrs	r3, r1
    d258:	b2db      	uxtb	r3, r3
    d25a:	7013      	strb	r3, [r2, #0]
	while (module_inst->hw->DEVICE.SYNCBUSY.reg == USB_SYNCBUSY_ENABLE);
    d25c:	46c0      	nop			; (mov r8, r8)
    d25e:	687b      	ldr	r3, [r7, #4]
    d260:	681b      	ldr	r3, [r3, #0]
    d262:	789b      	ldrb	r3, [r3, #2]
    d264:	b2db      	uxtb	r3, r3
    d266:	2b02      	cmp	r3, #2
    d268:	d0f9      	beq.n	d25e <usb_enable+0x1e>
}
    d26a:	46c0      	nop			; (mov r8, r8)
    d26c:	46bd      	mov	sp, r7
    d26e:	b002      	add	sp, #8
    d270:	bd80      	pop	{r7, pc}
	...

0000d274 <USB_Handler>:

/**
 * \brief Interrupt handler for the USB module.
 */
void USB_Handler(void)
{
    d274:	b580      	push	{r7, lr}
    d276:	af00      	add	r7, sp, #0
	if (_usb_instances->hw->DEVICE.CTRLA.bit.MODE) {
    d278:	4b09      	ldr	r3, [pc, #36]	; (d2a0 <USB_Handler+0x2c>)
    d27a:	447b      	add	r3, pc
    d27c:	681b      	ldr	r3, [r3, #0]
    d27e:	681b      	ldr	r3, [r3, #0]
    d280:	781b      	ldrb	r3, [r3, #0]
    d282:	061b      	lsls	r3, r3, #24
    d284:	0fdb      	lsrs	r3, r3, #31
    d286:	b2db      	uxtb	r3, r3
    d288:	2b00      	cmp	r3, #0
    d28a:	d003      	beq.n	d294 <USB_Handler+0x20>
#if !SAMD11
		/*host mode ISR */
		_usb_host_interrupt_handler();
    d28c:	4b05      	ldr	r3, [pc, #20]	; (d2a4 <USB_Handler+0x30>)
    d28e:	447b      	add	r3, pc
    d290:	4798      	blx	r3
#endif
	} else {
		/*device mode ISR */
		_usb_device_interrupt_handler();
	}
}
    d292:	e002      	b.n	d29a <USB_Handler+0x26>
		_usb_device_interrupt_handler();
    d294:	4b04      	ldr	r3, [pc, #16]	; (d2a8 <USB_Handler+0x34>)
    d296:	447b      	add	r3, pc
    d298:	4798      	blx	r3
}
    d29a:	46c0      	nop			; (mov r8, r8)
    d29c:	46bd      	mov	sp, r7
    d29e:	bd80      	pop	{r7, pc}
    d2a0:	1fff31b6 	.word	0x1fff31b6
    d2a4:	ffffe32b 	.word	0xffffe32b
    d2a8:	fffff8df 	.word	0xfffff8df

0000d2ac <usb_get_config_defaults>:
 * \brief Get the default USB module settings
 *
 * \param[out] module_config  Configuration structure to initialize to default values
 */
void usb_get_config_defaults(struct usb_config *module_config)
{
    d2ac:	b580      	push	{r7, lr}
    d2ae:	b082      	sub	sp, #8
    d2b0:	af00      	add	r7, sp, #0
    d2b2:	6078      	str	r0, [r7, #4]
	Assert(module_config);

	/* Sanity check arguments */
	Assert(module_config);
	/* Write default configuration to config struct */
	module_config->select_host_mode = 0;
    d2b4:	687b      	ldr	r3, [r7, #4]
    d2b6:	2200      	movs	r2, #0
    d2b8:	701a      	strb	r2, [r3, #0]
	module_config->run_in_standby = 1;
    d2ba:	687b      	ldr	r3, [r7, #4]
    d2bc:	2201      	movs	r2, #1
    d2be:	705a      	strb	r2, [r3, #1]
	module_config->source_generator = GCLK_GENERATOR_0;
    d2c0:	687b      	ldr	r3, [r7, #4]
    d2c2:	2200      	movs	r2, #0
    d2c4:	709a      	strb	r2, [r3, #2]
	module_config->speed_mode = USB_SPEED_FULL;
    d2c6:	687b      	ldr	r3, [r7, #4]
    d2c8:	2201      	movs	r2, #1
    d2ca:	70da      	strb	r2, [r3, #3]
}
    d2cc:	46c0      	nop			; (mov r8, r8)
    d2ce:	46bd      	mov	sp, r7
    d2d0:	b002      	add	sp, #8
    d2d2:	bd80      	pop	{r7, pc}

0000d2d4 <usb_init>:
 *
 * \retval STATUS_OK           The module was initialized successfully
 */
enum status_code usb_init(struct usb_module *module_inst, Usb *const hw,
		struct usb_config *module_config)
{
    d2d4:	b590      	push	{r4, r7, lr}
    d2d6:	b08d      	sub	sp, #52	; 0x34
    d2d8:	af00      	add	r7, sp, #0
    d2da:	60f8      	str	r0, [r7, #12]
    d2dc:	60b9      	str	r1, [r7, #8]
    d2de:	607a      	str	r2, [r7, #4]
    d2e0:	4ccc      	ldr	r4, [pc, #816]	; (d614 <usb_init+0x340>)
    d2e2:	447c      	add	r4, pc
	uint32_t pad_transn, pad_transp, pad_trim;
	struct system_pinmux_config pin_config;
	struct system_gclk_chan_config gclk_chan_config;

#if !SAMD11
	host_pipe_job_busy_status = 0;
    d2e4:	4bcc      	ldr	r3, [pc, #816]	; (d618 <usb_init+0x344>)
    d2e6:	58e3      	ldr	r3, [r4, r3]
    d2e8:	2200      	movs	r2, #0
    d2ea:	601a      	str	r2, [r3, #0]
#endif

	_usb_instances = module_inst;
    d2ec:	4bcb      	ldr	r3, [pc, #812]	; (d61c <usb_init+0x348>)
    d2ee:	447b      	add	r3, pc
    d2f0:	68fa      	ldr	r2, [r7, #12]
    d2f2:	601a      	str	r2, [r3, #0]

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
    d2f4:	68fb      	ldr	r3, [r7, #12]
    d2f6:	68ba      	ldr	r2, [r7, #8]
    d2f8:	601a      	str	r2, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_USB);
    d2fa:	2120      	movs	r1, #32
    d2fc:	2001      	movs	r0, #1
    d2fe:	4bc8      	ldr	r3, [pc, #800]	; (d620 <usb_init+0x34c>)
    d300:	447b      	add	r3, pc
    d302:	4798      	blx	r3

	/* Set up the USB DP/DN pins */
	system_pinmux_get_config_defaults(&pin_config);
    d304:	2318      	movs	r3, #24
    d306:	18fb      	adds	r3, r7, r3
    d308:	0018      	movs	r0, r3
    d30a:	4bc6      	ldr	r3, [pc, #792]	; (d624 <usb_init+0x350>)
    d30c:	447b      	add	r3, pc
    d30e:	4798      	blx	r3
	pin_config.mux_position = MUX_PA24G_USB_DM;
    d310:	2318      	movs	r3, #24
    d312:	18fb      	adds	r3, r7, r3
    d314:	2206      	movs	r2, #6
    d316:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA24G_USB_DM, &pin_config);
    d318:	2318      	movs	r3, #24
    d31a:	18fb      	adds	r3, r7, r3
    d31c:	0019      	movs	r1, r3
    d31e:	2018      	movs	r0, #24
    d320:	4bc1      	ldr	r3, [pc, #772]	; (d628 <usb_init+0x354>)
    d322:	58e3      	ldr	r3, [r4, r3]
    d324:	4798      	blx	r3
	pin_config.mux_position = MUX_PA25G_USB_DP;
    d326:	2318      	movs	r3, #24
    d328:	18fb      	adds	r3, r7, r3
    d32a:	2206      	movs	r2, #6
    d32c:	701a      	strb	r2, [r3, #0]
	system_pinmux_pin_set_config(PIN_PA25G_USB_DP, &pin_config);
    d32e:	2318      	movs	r3, #24
    d330:	18fb      	adds	r3, r7, r3
    d332:	0019      	movs	r1, r3
    d334:	2019      	movs	r0, #25
    d336:	4bbc      	ldr	r3, [pc, #752]	; (d628 <usb_init+0x354>)
    d338:	58e3      	ldr	r3, [r4, r3]
    d33a:	4798      	blx	r3

	/* Setup clock for module */
	system_gclk_chan_get_config_defaults(&gclk_chan_config);
    d33c:	2314      	movs	r3, #20
    d33e:	18fb      	adds	r3, r7, r3
    d340:	0018      	movs	r0, r3
    d342:	4bba      	ldr	r3, [pc, #744]	; (d62c <usb_init+0x358>)
    d344:	447b      	add	r3, pc
    d346:	4798      	blx	r3
	gclk_chan_config.source_generator = module_config->source_generator;
    d348:	687b      	ldr	r3, [r7, #4]
    d34a:	789a      	ldrb	r2, [r3, #2]
    d34c:	2314      	movs	r3, #20
    d34e:	18fb      	adds	r3, r7, r3
    d350:	701a      	strb	r2, [r3, #0]
	system_gclk_chan_set_config(USB_GCLK_ID, &gclk_chan_config);
    d352:	2314      	movs	r3, #20
    d354:	18fb      	adds	r3, r7, r3
    d356:	0019      	movs	r1, r3
    d358:	2006      	movs	r0, #6
    d35a:	4bb5      	ldr	r3, [pc, #724]	; (d630 <usb_init+0x35c>)
    d35c:	58e3      	ldr	r3, [r4, r3]
    d35e:	4798      	blx	r3
	system_gclk_chan_enable(USB_GCLK_ID);
    d360:	2006      	movs	r0, #6
    d362:	4bb4      	ldr	r3, [pc, #720]	; (d634 <usb_init+0x360>)
    d364:	58e3      	ldr	r3, [r4, r3]
    d366:	4798      	blx	r3

	/* Reset */
	hw->DEVICE.CTRLA.bit.SWRST = 1;
    d368:	68ba      	ldr	r2, [r7, #8]
    d36a:	7813      	ldrb	r3, [r2, #0]
    d36c:	2101      	movs	r1, #1
    d36e:	430b      	orrs	r3, r1
    d370:	7013      	strb	r3, [r2, #0]
	while (hw->DEVICE.SYNCBUSY.bit.SWRST) {
    d372:	46c0      	nop			; (mov r8, r8)
    d374:	68bb      	ldr	r3, [r7, #8]
    d376:	789b      	ldrb	r3, [r3, #2]
    d378:	07db      	lsls	r3, r3, #31
    d37a:	0fdb      	lsrs	r3, r3, #31
    d37c:	b2db      	uxtb	r3, r3
    d37e:	2b00      	cmp	r3, #0
    d380:	d1f8      	bne.n	d374 <usb_init+0xa0>
		/* Sync wait */
	}

	/* Change QOS values to have the best performance and correct USB behaviour */
	USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    d382:	4aad      	ldr	r2, [pc, #692]	; (d638 <usb_init+0x364>)
    d384:	78d3      	ldrb	r3, [r2, #3]
    d386:	2103      	movs	r1, #3
    d388:	438b      	bics	r3, r1
    d38a:	1c19      	adds	r1, r3, #0
    d38c:	2302      	movs	r3, #2
    d38e:	430b      	orrs	r3, r1
    d390:	70d3      	strb	r3, [r2, #3]
	USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    d392:	4aa9      	ldr	r2, [pc, #676]	; (d638 <usb_init+0x364>)
    d394:	78d3      	ldrb	r3, [r2, #3]
    d396:	210c      	movs	r1, #12
    d398:	438b      	bics	r3, r1
    d39a:	1c19      	adds	r1, r3, #0
    d39c:	2308      	movs	r3, #8
    d39e:	430b      	orrs	r3, r1
    d3a0:	70d3      	strb	r3, [r2, #3]

	/* Load Pad Calibration */
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    d3a2:	4ba6      	ldr	r3, [pc, #664]	; (d63c <usb_init+0x368>)
    d3a4:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSN_POS / 32))
		>> (NVM_USB_PAD_TRANSN_POS % 32))
    d3a6:	0b5b      	lsrs	r3, r3, #13
	pad_transn =( *((uint32_t *)(NVMCTRL_OTP4)
    d3a8:	221f      	movs	r2, #31
    d3aa:	4013      	ands	r3, r2
    d3ac:	627b      	str	r3, [r7, #36]	; 0x24
		& ((1 << NVM_USB_PAD_TRANSN_SIZE) - 1);

	if (pad_transn == 0x1F) {
    d3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d3b0:	2b1f      	cmp	r3, #31
    d3b2:	d101      	bne.n	d3b8 <usb_init+0xe4>
		pad_transn = 5;
    d3b4:	2305      	movs	r3, #5
    d3b6:	627b      	str	r3, [r7, #36]	; 0x24
	}

	hw->DEVICE.PADCAL.bit.TRANSN = pad_transn;
    d3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    d3ba:	b2db      	uxtb	r3, r3
    d3bc:	1c1a      	adds	r2, r3, #0
    d3be:	231f      	movs	r3, #31
    d3c0:	4013      	ands	r3, r2
    d3c2:	b2d9      	uxtb	r1, r3
    d3c4:	68ba      	ldr	r2, [r7, #8]
    d3c6:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    d3c8:	1c08      	adds	r0, r1, #0
    d3ca:	211f      	movs	r1, #31
    d3cc:	4001      	ands	r1, r0
    d3ce:	0188      	lsls	r0, r1, #6
    d3d0:	499b      	ldr	r1, [pc, #620]	; (d640 <usb_init+0x36c>)
    d3d2:	400b      	ands	r3, r1
    d3d4:	1c19      	adds	r1, r3, #0
    d3d6:	1c03      	adds	r3, r0, #0
    d3d8:	430b      	orrs	r3, r1
    d3da:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    d3dc:	4b97      	ldr	r3, [pc, #604]	; (d63c <usb_init+0x368>)
    d3de:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRANSP_POS / 32))
			>> (NVM_USB_PAD_TRANSP_POS % 32))
    d3e0:	0c9b      	lsrs	r3, r3, #18
	pad_transp =( *((uint32_t *)(NVMCTRL_OTP4)
    d3e2:	221f      	movs	r2, #31
    d3e4:	4013      	ands	r3, r2
    d3e6:	623b      	str	r3, [r7, #32]
			& ((1 << NVM_USB_PAD_TRANSP_SIZE) - 1);

	if (pad_transp == 0x1F) {
    d3e8:	6a3b      	ldr	r3, [r7, #32]
    d3ea:	2b1f      	cmp	r3, #31
    d3ec:	d101      	bne.n	d3f2 <usb_init+0x11e>
		pad_transp = 29;
    d3ee:	231d      	movs	r3, #29
    d3f0:	623b      	str	r3, [r7, #32]
	}

	hw->DEVICE.PADCAL.bit.TRANSP = pad_transp;
    d3f2:	6a3b      	ldr	r3, [r7, #32]
    d3f4:	b2db      	uxtb	r3, r3
    d3f6:	1c1a      	adds	r2, r3, #0
    d3f8:	231f      	movs	r3, #31
    d3fa:	4013      	ands	r3, r2
    d3fc:	b2d9      	uxtb	r1, r3
    d3fe:	68ba      	ldr	r2, [r7, #8]
    d400:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    d402:	1c08      	adds	r0, r1, #0
    d404:	211f      	movs	r1, #31
    d406:	4008      	ands	r0, r1
    d408:	211f      	movs	r1, #31
    d40a:	438b      	bics	r3, r1
    d40c:	1c19      	adds	r1, r3, #0
    d40e:	1c03      	adds	r3, r0, #0
    d410:	430b      	orrs	r3, r1
    d412:	8513      	strh	r3, [r2, #40]	; 0x28

	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    d414:	4b89      	ldr	r3, [pc, #548]	; (d63c <usb_init+0x368>)
    d416:	681b      	ldr	r3, [r3, #0]
			+ (NVM_USB_PAD_TRIM_POS / 32))
			>> (NVM_USB_PAD_TRIM_POS % 32))
    d418:	0ddb      	lsrs	r3, r3, #23
	pad_trim =( *((uint32_t *)(NVMCTRL_OTP4)
    d41a:	2207      	movs	r2, #7
    d41c:	4013      	ands	r3, r2
    d41e:	61fb      	str	r3, [r7, #28]
			& ((1 << NVM_USB_PAD_TRIM_SIZE) - 1);

	if (pad_trim == 0x7) {
    d420:	69fb      	ldr	r3, [r7, #28]
    d422:	2b07      	cmp	r3, #7
    d424:	d101      	bne.n	d42a <usb_init+0x156>
		pad_trim = 3;
    d426:	2303      	movs	r3, #3
    d428:	61fb      	str	r3, [r7, #28]
	}

	hw->DEVICE.PADCAL.bit.TRIM = pad_trim;
    d42a:	69fb      	ldr	r3, [r7, #28]
    d42c:	b2db      	uxtb	r3, r3
    d42e:	1c1a      	adds	r2, r3, #0
    d430:	2307      	movs	r3, #7
    d432:	4013      	ands	r3, r2
    d434:	b2d9      	uxtb	r1, r3
    d436:	68ba      	ldr	r2, [r7, #8]
    d438:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    d43a:	1c08      	adds	r0, r1, #0
    d43c:	2107      	movs	r1, #7
    d43e:	4001      	ands	r1, r0
    d440:	0308      	lsls	r0, r1, #12
    d442:	4980      	ldr	r1, [pc, #512]	; (d644 <usb_init+0x370>)
    d444:	400b      	ands	r3, r1
    d446:	1c19      	adds	r1, r3, #0
    d448:	1c03      	adds	r3, r0, #0
    d44a:	430b      	orrs	r3, r1
    d44c:	8513      	strh	r3, [r2, #40]	; 0x28

	/* Set the configuration */
	hw->DEVICE.CTRLA.bit.MODE = module_config->select_host_mode;
    d44e:	687b      	ldr	r3, [r7, #4]
    d450:	7819      	ldrb	r1, [r3, #0]
    d452:	68ba      	ldr	r2, [r7, #8]
    d454:	7813      	ldrb	r3, [r2, #0]
    d456:	01c8      	lsls	r0, r1, #7
    d458:	217f      	movs	r1, #127	; 0x7f
    d45a:	400b      	ands	r3, r1
    d45c:	1c19      	adds	r1, r3, #0
    d45e:	1c03      	adds	r3, r0, #0
    d460:	430b      	orrs	r3, r1
    d462:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.CTRLA.bit.RUNSTDBY = module_config->run_in_standby;
    d464:	687b      	ldr	r3, [r7, #4]
    d466:	7859      	ldrb	r1, [r3, #1]
    d468:	68ba      	ldr	r2, [r7, #8]
    d46a:	7813      	ldrb	r3, [r2, #0]
    d46c:	2001      	movs	r0, #1
    d46e:	4001      	ands	r1, r0
    d470:	0088      	lsls	r0, r1, #2
    d472:	2104      	movs	r1, #4
    d474:	438b      	bics	r3, r1
    d476:	1c19      	adds	r1, r3, #0
    d478:	1c03      	adds	r3, r0, #0
    d47a:	430b      	orrs	r3, r1
    d47c:	7013      	strb	r3, [r2, #0]
	hw->DEVICE.DESCADD.reg = (uint32_t)(&usb_descriptor_table.usb_endpoint_table[0]);
    d47e:	4b72      	ldr	r3, [pc, #456]	; (d648 <usb_init+0x374>)
    d480:	58e3      	ldr	r3, [r4, r3]
    d482:	001a      	movs	r2, r3
    d484:	68bb      	ldr	r3, [r7, #8]
    d486:	625a      	str	r2, [r3, #36]	; 0x24
	if (USB_SPEED_FULL == module_config->speed_mode) {
    d488:	687b      	ldr	r3, [r7, #4]
    d48a:	78db      	ldrb	r3, [r3, #3]
    d48c:	2b01      	cmp	r3, #1
    d48e:	d106      	bne.n	d49e <usb_init+0x1ca>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_FS_Val;
    d490:	68fb      	ldr	r3, [r7, #12]
    d492:	681a      	ldr	r2, [r3, #0]
    d494:	8913      	ldrh	r3, [r2, #8]
    d496:	210c      	movs	r1, #12
    d498:	438b      	bics	r3, r1
    d49a:	8113      	strh	r3, [r2, #8]
    d49c:	e00c      	b.n	d4b8 <usb_init+0x1e4>
	} else if(USB_SPEED_LOW == module_config->speed_mode) {
    d49e:	687b      	ldr	r3, [r7, #4]
    d4a0:	78db      	ldrb	r3, [r3, #3]
    d4a2:	2b00      	cmp	r3, #0
    d4a4:	d108      	bne.n	d4b8 <usb_init+0x1e4>
		module_inst->hw->DEVICE.CTRLB.bit.SPDCONF = USB_DEVICE_CTRLB_SPDCONF_LS_Val;
    d4a6:	68fb      	ldr	r3, [r7, #12]
    d4a8:	681a      	ldr	r2, [r3, #0]
    d4aa:	8913      	ldrh	r3, [r2, #8]
    d4ac:	210c      	movs	r1, #12
    d4ae:	438b      	bics	r3, r1
    d4b0:	1c19      	adds	r1, r3, #0
    d4b2:	2304      	movs	r3, #4
    d4b4:	430b      	orrs	r3, r1
    d4b6:	8113      	strh	r3, [r2, #8]
	}

	memset((uint8_t *)(&usb_descriptor_table.usb_endpoint_table[0]), 0,
    d4b8:	2380      	movs	r3, #128	; 0x80
    d4ba:	005a      	lsls	r2, r3, #1
    d4bc:	4b62      	ldr	r3, [pc, #392]	; (d648 <usb_init+0x374>)
    d4be:	58e3      	ldr	r3, [r4, r3]
    d4c0:	2100      	movs	r1, #0
    d4c2:	0018      	movs	r0, r3
    d4c4:	4b61      	ldr	r3, [pc, #388]	; (d64c <usb_init+0x378>)
    d4c6:	58e3      	ldr	r3, [r4, r3]
    d4c8:	4798      	blx	r3
			sizeof(usb_descriptor_table.usb_endpoint_table));

#if !SAMD11
	/* callback related init */
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    d4ca:	2300      	movs	r3, #0
    d4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    d4ce:	e009      	b.n	d4e4 <usb_init+0x210>
		module_inst->host_callback[i] = NULL;
    d4d0:	68fa      	ldr	r2, [r7, #12]
    d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4d4:	009b      	lsls	r3, r3, #2
    d4d6:	18d3      	adds	r3, r2, r3
    d4d8:	3304      	adds	r3, #4
    d4da:	2200      	movs	r2, #0
    d4dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < USB_HOST_CALLBACK_N; i++) {
    d4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4e0:	3301      	adds	r3, #1
    d4e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    d4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4e6:	2b07      	cmp	r3, #7
    d4e8:	d9f2      	bls.n	d4d0 <usb_init+0x1fc>
	};
	for (i = 0; i < USB_PIPE_NUM; i++) {
    d4ea:	2300      	movs	r3, #0
    d4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    d4ee:	e016      	b.n	d51e <usb_init+0x24a>
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    d4f0:	2300      	movs	r3, #0
    d4f2:	62bb      	str	r3, [r7, #40]	; 0x28
    d4f4:	e00d      	b.n	d512 <usb_init+0x23e>
			module_inst->host_pipe_callback[i][j] = NULL;
    d4f6:	68fa      	ldr	r2, [r7, #12]
    d4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d4fa:	0099      	lsls	r1, r3, #2
    d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d4fe:	18cb      	adds	r3, r1, r3
    d500:	3308      	adds	r3, #8
    d502:	009b      	lsls	r3, r3, #2
    d504:	18d3      	adds	r3, r2, r3
    d506:	3304      	adds	r3, #4
    d508:	2200      	movs	r2, #0
    d50a:	601a      	str	r2, [r3, #0]
		for (j = 0; j < USB_HOST_PIPE_CALLBACK_N; j++) {
    d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d50e:	3301      	adds	r3, #1
    d510:	62bb      	str	r3, [r7, #40]	; 0x28
    d512:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d514:	2b03      	cmp	r3, #3
    d516:	d9ee      	bls.n	d4f6 <usb_init+0x222>
	for (i = 0; i < USB_PIPE_NUM; i++) {
    d518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d51a:	3301      	adds	r3, #1
    d51c:	62fb      	str	r3, [r7, #44]	; 0x2c
    d51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d520:	2b07      	cmp	r3, #7
    d522:	d9e5      	bls.n	d4f0 <usb_init+0x21c>
		}
	};
	module_inst->host_registered_callback_mask = 0;
    d524:	68fb      	ldr	r3, [r7, #12]
    d526:	22a4      	movs	r2, #164	; 0xa4
    d528:	2100      	movs	r1, #0
    d52a:	5499      	strb	r1, [r3, r2]
	module_inst->host_enabled_callback_mask = 0;
    d52c:	68fb      	ldr	r3, [r7, #12]
    d52e:	22a5      	movs	r2, #165	; 0xa5
    d530:	2100      	movs	r1, #0
    d532:	5499      	strb	r1, [r3, r2]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    d534:	2300      	movs	r3, #0
    d536:	62fb      	str	r3, [r7, #44]	; 0x2c
    d538:	e010      	b.n	d55c <usb_init+0x288>
		module_inst->host_pipe_registered_callback_mask[i] = 0;
    d53a:	68fa      	ldr	r2, [r7, #12]
    d53c:	21a6      	movs	r1, #166	; 0xa6
    d53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d540:	18d3      	adds	r3, r2, r3
    d542:	185b      	adds	r3, r3, r1
    d544:	2200      	movs	r2, #0
    d546:	701a      	strb	r2, [r3, #0]
		module_inst->host_pipe_enabled_callback_mask[i] = 0;
    d548:	68fa      	ldr	r2, [r7, #12]
    d54a:	21ae      	movs	r1, #174	; 0xae
    d54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d54e:	18d3      	adds	r3, r2, r3
    d550:	185b      	adds	r3, r3, r1
    d552:	2200      	movs	r2, #0
    d554:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < USB_PIPE_NUM; i++) {
    d556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d558:	3301      	adds	r3, #1
    d55a:	62fb      	str	r3, [r7, #44]	; 0x2c
    d55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d55e:	2b07      	cmp	r3, #7
    d560:	d9eb      	bls.n	d53a <usb_init+0x266>
	}
#endif

	/*  device callback related */
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    d562:	2300      	movs	r3, #0
    d564:	62fb      	str	r3, [r7, #44]	; 0x2c
    d566:	e008      	b.n	d57a <usb_init+0x2a6>
		module_inst->device_callback[i] = NULL;
    d568:	68fb      	ldr	r3, [r7, #12]
    d56a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    d56c:	322e      	adds	r2, #46	; 0x2e
    d56e:	0092      	lsls	r2, r2, #2
    d570:	2100      	movs	r1, #0
    d572:	50d1      	str	r1, [r2, r3]
	for (i = 0; i < USB_DEVICE_CALLBACK_N; i++) {
    d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d576:	3301      	adds	r3, #1
    d578:	62fb      	str	r3, [r7, #44]	; 0x2c
    d57a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d57c:	2b06      	cmp	r3, #6
    d57e:	d9f3      	bls.n	d568 <usb_init+0x294>
	}
	for (i = 0; i < USB_EPT_NUM; i++) {
    d580:	2300      	movs	r3, #0
    d582:	62fb      	str	r3, [r7, #44]	; 0x2c
    d584:	e016      	b.n	d5b4 <usb_init+0x2e0>
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    d586:	2300      	movs	r3, #0
    d588:	62bb      	str	r3, [r7, #40]	; 0x28
    d58a:	e00d      	b.n	d5a8 <usb_init+0x2d4>
			module_inst->device_endpoint_callback[i][j] = NULL;
    d58c:	68fa      	ldr	r2, [r7, #12]
    d58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d590:	0099      	lsls	r1, r3, #2
    d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d594:	18cb      	adds	r3, r1, r3
    d596:	3334      	adds	r3, #52	; 0x34
    d598:	009b      	lsls	r3, r3, #2
    d59a:	18d3      	adds	r3, r2, r3
    d59c:	3304      	adds	r3, #4
    d59e:	2200      	movs	r2, #0
    d5a0:	601a      	str	r2, [r3, #0]
		for(j = 0; j < USB_DEVICE_EP_CALLBACK_N; j++) {
    d5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5a4:	3301      	adds	r3, #1
    d5a6:	62bb      	str	r3, [r7, #40]	; 0x28
    d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5aa:	2b03      	cmp	r3, #3
    d5ac:	d9ee      	bls.n	d58c <usb_init+0x2b8>
	for (i = 0; i < USB_EPT_NUM; i++) {
    d5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5b0:	3301      	adds	r3, #1
    d5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    d5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    d5b6:	2b07      	cmp	r3, #7
    d5b8:	d9e5      	bls.n	d586 <usb_init+0x2b2>
		}
	}
	module_inst->device_registered_callback_mask = 0;
    d5ba:	68fa      	ldr	r2, [r7, #12]
    d5bc:	23aa      	movs	r3, #170	; 0xaa
    d5be:	005b      	lsls	r3, r3, #1
    d5c0:	2100      	movs	r1, #0
    d5c2:	52d1      	strh	r1, [r2, r3]
	module_inst->device_enabled_callback_mask = 0;
    d5c4:	68fa      	ldr	r2, [r7, #12]
    d5c6:	23ab      	movs	r3, #171	; 0xab
    d5c8:	005b      	lsls	r3, r3, #1
    d5ca:	2100      	movs	r1, #0
    d5cc:	52d1      	strh	r1, [r2, r3]
	for (j = 0; j < USB_EPT_NUM; j++) {
    d5ce:	2300      	movs	r3, #0
    d5d0:	62bb      	str	r3, [r7, #40]	; 0x28
    d5d2:	e012      	b.n	d5fa <usb_init+0x326>
		module_inst->device_endpoint_registered_callback_mask[j] = 0;
    d5d4:	68f9      	ldr	r1, [r7, #12]
    d5d6:	23ac      	movs	r3, #172	; 0xac
    d5d8:	005b      	lsls	r3, r3, #1
    d5da:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d5dc:	188a      	adds	r2, r1, r2
    d5de:	18d3      	adds	r3, r2, r3
    d5e0:	2200      	movs	r2, #0
    d5e2:	701a      	strb	r2, [r3, #0]
		module_inst->device_endpoint_enabled_callback_mask[j] = 0;
    d5e4:	68f9      	ldr	r1, [r7, #12]
    d5e6:	23b0      	movs	r3, #176	; 0xb0
    d5e8:	005b      	lsls	r3, r3, #1
    d5ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
    d5ec:	188a      	adds	r2, r1, r2
    d5ee:	18d3      	adds	r3, r2, r3
    d5f0:	2200      	movs	r2, #0
    d5f2:	701a      	strb	r2, [r3, #0]
	for (j = 0; j < USB_EPT_NUM; j++) {
    d5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5f6:	3301      	adds	r3, #1
    d5f8:	62bb      	str	r3, [r7, #40]	; 0x28
    d5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    d5fc:	2b07      	cmp	r3, #7
    d5fe:	d9e9      	bls.n	d5d4 <usb_init+0x300>
	}

	/* Enable interrupts for this USB module */
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_USB);
    d600:	2007      	movs	r0, #7
    d602:	4b13      	ldr	r3, [pc, #76]	; (d650 <usb_init+0x37c>)
    d604:	447b      	add	r3, pc
    d606:	4798      	blx	r3

	return STATUS_OK;
    d608:	2300      	movs	r3, #0
}
    d60a:	0018      	movs	r0, r3
    d60c:	46bd      	mov	sp, r7
    d60e:	b00d      	add	sp, #52	; 0x34
    d610:	bd90      	pop	{r4, r7, pc}
    d612:	46c0      	nop			; (mov r8, r8)
    d614:	0000214e 	.word	0x0000214e
    d618:	000000d0 	.word	0x000000d0
    d61c:	1fff3142 	.word	0x1fff3142
    d620:	ffffe209 	.word	0xffffe209
    d624:	ffffe259 	.word	0xffffe259
    d628:	000002dc 	.word	0x000002dc
    d62c:	ffffe1ad 	.word	0xffffe1ad
    d630:	000000d4 	.word	0x000000d4
    d634:	00000260 	.word	0x00000260
    d638:	41005000 	.word	0x41005000
    d63c:	00806024 	.word	0x00806024
    d640:	fffff83f 	.word	0xfffff83f
    d644:	ffff8fff 	.word	0xffff8fff
    d648:	00000024 	.word	0x00000024
    d64c:	00000220 	.word	0x00000220
    d650:	ffffdf89 	.word	0xffffdf89

0000d654 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    d654:	b590      	push	{r4, r7, lr}
    d656:	b083      	sub	sp, #12
    d658:	af00      	add	r7, sp, #0
    d65a:	4c34      	ldr	r4, [pc, #208]	; (d72c <Reset_Handler+0xd8>)
    d65c:	447c      	add	r4, pc
        uint32_t *pSrc, *pDest;

        /* Initialize the relocate segment */
        pSrc = &_etext;
    d65e:	4b34      	ldr	r3, [pc, #208]	; (d730 <Reset_Handler+0xdc>)
    d660:	58e3      	ldr	r3, [r4, r3]
    d662:	607b      	str	r3, [r7, #4]
        pDest = &_srelocate;
    d664:	4b33      	ldr	r3, [pc, #204]	; (d734 <Reset_Handler+0xe0>)
    d666:	58e3      	ldr	r3, [r4, r3]
    d668:	603b      	str	r3, [r7, #0]

        if (pSrc != pDest) {
    d66a:	687a      	ldr	r2, [r7, #4]
    d66c:	683b      	ldr	r3, [r7, #0]
    d66e:	429a      	cmp	r2, r3
    d670:	d00d      	beq.n	d68e <Reset_Handler+0x3a>
                for (; pDest < &_erelocate;) {
    d672:	e007      	b.n	d684 <Reset_Handler+0x30>
                        *pDest++ = *pSrc++;
    d674:	683b      	ldr	r3, [r7, #0]
    d676:	1d1a      	adds	r2, r3, #4
    d678:	603a      	str	r2, [r7, #0]
    d67a:	687a      	ldr	r2, [r7, #4]
    d67c:	1d11      	adds	r1, r2, #4
    d67e:	6079      	str	r1, [r7, #4]
    d680:	6812      	ldr	r2, [r2, #0]
    d682:	601a      	str	r2, [r3, #0]
                for (; pDest < &_erelocate;) {
    d684:	683b      	ldr	r3, [r7, #0]
    d686:	4a2c      	ldr	r2, [pc, #176]	; (d738 <Reset_Handler+0xe4>)
    d688:	58a2      	ldr	r2, [r4, r2]
    d68a:	4293      	cmp	r3, r2
    d68c:	d3f2      	bcc.n	d674 <Reset_Handler+0x20>
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    d68e:	4b2b      	ldr	r3, [pc, #172]	; (d73c <Reset_Handler+0xe8>)
    d690:	58e3      	ldr	r3, [r4, r3]
    d692:	603b      	str	r3, [r7, #0]
    d694:	e004      	b.n	d6a0 <Reset_Handler+0x4c>
                *pDest++ = 0;
    d696:	683b      	ldr	r3, [r7, #0]
    d698:	1d1a      	adds	r2, r3, #4
    d69a:	603a      	str	r2, [r7, #0]
    d69c:	2200      	movs	r2, #0
    d69e:	601a      	str	r2, [r3, #0]
        for (pDest = &_szero; pDest < &_ezero;) {
    d6a0:	683b      	ldr	r3, [r7, #0]
    d6a2:	4a27      	ldr	r2, [pc, #156]	; (d740 <Reset_Handler+0xec>)
    d6a4:	58a2      	ldr	r2, [r4, r2]
    d6a6:	4293      	cmp	r3, r2
    d6a8:	d3f5      	bcc.n	d696 <Reset_Handler+0x42>
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
    d6aa:	4b26      	ldr	r3, [pc, #152]	; (d744 <Reset_Handler+0xf0>)
    d6ac:	58e3      	ldr	r3, [r4, r3]
    d6ae:	607b      	str	r3, [r7, #4]
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    d6b0:	4b25      	ldr	r3, [pc, #148]	; (d748 <Reset_Handler+0xf4>)
    d6b2:	687a      	ldr	r2, [r7, #4]
    d6b4:	21ff      	movs	r1, #255	; 0xff
    d6b6:	438a      	bics	r2, r1
    d6b8:	609a      	str	r2, [r3, #8]

        /* Change default QOS values to have the best performance and correct USB behaviour */
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    d6ba:	4a24      	ldr	r2, [pc, #144]	; (d74c <Reset_Handler+0xf8>)
    d6bc:	2390      	movs	r3, #144	; 0x90
    d6be:	005b      	lsls	r3, r3, #1
    d6c0:	2102      	movs	r1, #2
    d6c2:	50d1      	str	r1, [r2, r3]
#if defined(ID_USB)
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    d6c4:	4a22      	ldr	r2, [pc, #136]	; (d750 <Reset_Handler+0xfc>)
    d6c6:	78d3      	ldrb	r3, [r2, #3]
    d6c8:	2103      	movs	r1, #3
    d6ca:	438b      	bics	r3, r1
    d6cc:	1c19      	adds	r1, r3, #0
    d6ce:	2302      	movs	r3, #2
    d6d0:	430b      	orrs	r3, r1
    d6d2:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    d6d4:	4a1e      	ldr	r2, [pc, #120]	; (d750 <Reset_Handler+0xfc>)
    d6d6:	78d3      	ldrb	r3, [r2, #3]
    d6d8:	210c      	movs	r1, #12
    d6da:	438b      	bics	r3, r1
    d6dc:	1c19      	adds	r1, r3, #0
    d6de:	2308      	movs	r3, #8
    d6e0:	430b      	orrs	r3, r1
    d6e2:	70d3      	strb	r3, [r2, #3]
#endif
        DMAC->QOSCTRL.bit.DQOS = 2;
    d6e4:	4a1b      	ldr	r2, [pc, #108]	; (d754 <Reset_Handler+0x100>)
    d6e6:	7b93      	ldrb	r3, [r2, #14]
    d6e8:	2130      	movs	r1, #48	; 0x30
    d6ea:	438b      	bics	r3, r1
    d6ec:	1c19      	adds	r1, r3, #0
    d6ee:	2320      	movs	r3, #32
    d6f0:	430b      	orrs	r3, r1
    d6f2:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    d6f4:	4a17      	ldr	r2, [pc, #92]	; (d754 <Reset_Handler+0x100>)
    d6f6:	7b93      	ldrb	r3, [r2, #14]
    d6f8:	210c      	movs	r1, #12
    d6fa:	438b      	bics	r3, r1
    d6fc:	1c19      	adds	r1, r3, #0
    d6fe:	2308      	movs	r3, #8
    d700:	430b      	orrs	r3, r1
    d702:	7393      	strb	r3, [r2, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    d704:	4a13      	ldr	r2, [pc, #76]	; (d754 <Reset_Handler+0x100>)
    d706:	7b93      	ldrb	r3, [r2, #14]
    d708:	2103      	movs	r1, #3
    d70a:	438b      	bics	r3, r1
    d70c:	1c19      	adds	r1, r3, #0
    d70e:	2302      	movs	r3, #2
    d710:	430b      	orrs	r3, r1
    d712:	7393      	strb	r3, [r2, #14]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    d714:	4a10      	ldr	r2, [pc, #64]	; (d758 <Reset_Handler+0x104>)
    d716:	6853      	ldr	r3, [r2, #4]
    d718:	2180      	movs	r1, #128	; 0x80
    d71a:	430b      	orrs	r3, r1
    d71c:	6053      	str	r3, [r2, #4]

        /* Initialize the C library */
        __libc_init_array();
    d71e:	4b0f      	ldr	r3, [pc, #60]	; (d75c <Reset_Handler+0x108>)
    d720:	58e3      	ldr	r3, [r4, r3]
    d722:	4798      	blx	r3

        /* Branch to main function */
        main();
    d724:	4b0e      	ldr	r3, [pc, #56]	; (d760 <Reset_Handler+0x10c>)
    d726:	58e3      	ldr	r3, [r4, r3]
    d728:	4798      	blx	r3

        /* Infinite loop */
        while (1);
    d72a:	e7fe      	b.n	d72a <Reset_Handler+0xd6>
    d72c:	00001dd4 	.word	0x00001dd4
    d730:	0000008c 	.word	0x0000008c
    d734:	000000c0 	.word	0x000000c0
    d738:	000002a0 	.word	0x000002a0
    d73c:	000000b0 	.word	0x000000b0
    d740:	00000238 	.word	0x00000238
    d744:	00000070 	.word	0x00000070
    d748:	e000ed00 	.word	0xe000ed00
    d74c:	41007000 	.word	0x41007000
    d750:	41005000 	.word	0x41005000
    d754:	41004800 	.word	0x41004800
    d758:	41004000 	.word	0x41004000
    d75c:	00000124 	.word	0x00000124
    d760:	00000228 	.word	0x00000228

0000d764 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    d764:	b580      	push	{r7, lr}
    d766:	af00      	add	r7, sp, #0
        while (1) {
    d768:	e7fe      	b.n	d768 <Dummy_Handler+0x4>
	...

0000d76c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    d76c:	b590      	push	{r4, r7, lr}
    d76e:	b087      	sub	sp, #28
    d770:	af00      	add	r7, sp, #0
    d772:	60f8      	str	r0, [r7, #12]
    d774:	60b9      	str	r1, [r7, #8]
    d776:	607a      	str	r2, [r7, #4]
    d778:	4c11      	ldr	r4, [pc, #68]	; (d7c0 <_read+0x54>)
    d77a:	447c      	add	r4, pc
	int nChars = 0;
    d77c:	2300      	movs	r3, #0
    d77e:	617b      	str	r3, [r7, #20]

	if (file != 0) {
    d780:	68fb      	ldr	r3, [r7, #12]
    d782:	2b00      	cmp	r3, #0
    d784:	d014      	beq.n	d7b0 <_read+0x44>
		return -1;
    d786:	2301      	movs	r3, #1
    d788:	425b      	negs	r3, r3
    d78a:	e015      	b.n	d7b8 <_read+0x4c>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
    d78c:	4b0d      	ldr	r3, [pc, #52]	; (d7c4 <_read+0x58>)
    d78e:	58e3      	ldr	r3, [r4, r3]
    d790:	681a      	ldr	r2, [r3, #0]
    d792:	4b0d      	ldr	r3, [pc, #52]	; (d7c8 <_read+0x5c>)
    d794:	58e3      	ldr	r3, [r4, r3]
    d796:	681b      	ldr	r3, [r3, #0]
    d798:	68b9      	ldr	r1, [r7, #8]
    d79a:	0018      	movs	r0, r3
    d79c:	4790      	blx	r2
		ptr++;
    d79e:	68bb      	ldr	r3, [r7, #8]
    d7a0:	3301      	adds	r3, #1
    d7a2:	60bb      	str	r3, [r7, #8]
		nChars++;
    d7a4:	697b      	ldr	r3, [r7, #20]
    d7a6:	3301      	adds	r3, #1
    d7a8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
    d7aa:	687b      	ldr	r3, [r7, #4]
    d7ac:	3b01      	subs	r3, #1
    d7ae:	607b      	str	r3, [r7, #4]
    d7b0:	687b      	ldr	r3, [r7, #4]
    d7b2:	2b00      	cmp	r3, #0
    d7b4:	dcea      	bgt.n	d78c <_read+0x20>
	}
	return nChars;
    d7b6:	697b      	ldr	r3, [r7, #20]
}
    d7b8:	0018      	movs	r0, r3
    d7ba:	46bd      	mov	sp, r7
    d7bc:	b007      	add	sp, #28
    d7be:	bd90      	pop	{r4, r7, pc}
    d7c0:	00001cb6 	.word	0x00001cb6
    d7c4:	0000011c 	.word	0x0000011c
    d7c8:	0000022c 	.word	0x0000022c

0000d7cc <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    d7cc:	b590      	push	{r4, r7, lr}
    d7ce:	b087      	sub	sp, #28
    d7d0:	af00      	add	r7, sp, #0
    d7d2:	60f8      	str	r0, [r7, #12]
    d7d4:	60b9      	str	r1, [r7, #8]
    d7d6:	607a      	str	r2, [r7, #4]
    d7d8:	4c17      	ldr	r4, [pc, #92]	; (d838 <_write+0x6c>)
    d7da:	447c      	add	r4, pc
	int nChars = 0;
    d7dc:	2300      	movs	r3, #0
    d7de:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
    d7e0:	68fb      	ldr	r3, [r7, #12]
    d7e2:	2b01      	cmp	r3, #1
    d7e4:	d01f      	beq.n	d826 <_write+0x5a>
    d7e6:	68fb      	ldr	r3, [r7, #12]
    d7e8:	2b02      	cmp	r3, #2
    d7ea:	d01c      	beq.n	d826 <_write+0x5a>
    d7ec:	68fb      	ldr	r3, [r7, #12]
    d7ee:	2b03      	cmp	r3, #3
    d7f0:	d019      	beq.n	d826 <_write+0x5a>
		return -1;
    d7f2:	2301      	movs	r3, #1
    d7f4:	425b      	negs	r3, r3
    d7f6:	e01a      	b.n	d82e <_write+0x62>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
    d7f8:	4b10      	ldr	r3, [pc, #64]	; (d83c <_write+0x70>)
    d7fa:	58e3      	ldr	r3, [r4, r3]
    d7fc:	681a      	ldr	r2, [r3, #0]
    d7fe:	4b10      	ldr	r3, [pc, #64]	; (d840 <_write+0x74>)
    d800:	58e3      	ldr	r3, [r4, r3]
    d802:	6818      	ldr	r0, [r3, #0]
    d804:	68bb      	ldr	r3, [r7, #8]
    d806:	1c59      	adds	r1, r3, #1
    d808:	60b9      	str	r1, [r7, #8]
    d80a:	781b      	ldrb	r3, [r3, #0]
    d80c:	0019      	movs	r1, r3
    d80e:	4790      	blx	r2
    d810:	1e03      	subs	r3, r0, #0
    d812:	da02      	bge.n	d81a <_write+0x4e>
			return -1;
    d814:	2301      	movs	r3, #1
    d816:	425b      	negs	r3, r3
    d818:	e009      	b.n	d82e <_write+0x62>
		}
		++nChars;
    d81a:	697b      	ldr	r3, [r7, #20]
    d81c:	3301      	adds	r3, #1
    d81e:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
    d820:	687b      	ldr	r3, [r7, #4]
    d822:	3b01      	subs	r3, #1
    d824:	607b      	str	r3, [r7, #4]
    d826:	687b      	ldr	r3, [r7, #4]
    d828:	2b00      	cmp	r3, #0
    d82a:	d1e5      	bne.n	d7f8 <_write+0x2c>
	}
	return nChars;
    d82c:	697b      	ldr	r3, [r7, #20]
}
    d82e:	0018      	movs	r0, r3
    d830:	46bd      	mov	sp, r7
    d832:	b007      	add	sp, #28
    d834:	bd90      	pop	{r4, r7, pc}
    d836:	46c0      	nop			; (mov r8, r8)
    d838:	00001c56 	.word	0x00001c56
    d83c:	00000138 	.word	0x00000138
    d840:	0000022c 	.word	0x0000022c

0000d844 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    d844:	b580      	push	{r7, lr}
    d846:	b084      	sub	sp, #16
    d848:	af00      	add	r7, sp, #0
    d84a:	6078      	str	r0, [r7, #4]
    d84c:	490e      	ldr	r1, [pc, #56]	; (d888 <_sbrk+0x44>)
    d84e:	4479      	add	r1, pc
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    d850:	4b0e      	ldr	r3, [pc, #56]	; (d88c <_sbrk+0x48>)
    d852:	447b      	add	r3, pc
    d854:	681b      	ldr	r3, [r3, #0]
    d856:	2b00      	cmp	r3, #0
    d858:	d104      	bne.n	d864 <_sbrk+0x20>
		heap = (unsigned char *)&_end;
    d85a:	4b0d      	ldr	r3, [pc, #52]	; (d890 <_sbrk+0x4c>)
    d85c:	447b      	add	r3, pc
    d85e:	4a0d      	ldr	r2, [pc, #52]	; (d894 <_sbrk+0x50>)
    d860:	588a      	ldr	r2, [r1, r2]
    d862:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    d864:	4b0c      	ldr	r3, [pc, #48]	; (d898 <_sbrk+0x54>)
    d866:	447b      	add	r3, pc
    d868:	681b      	ldr	r3, [r3, #0]
    d86a:	60fb      	str	r3, [r7, #12]

	heap += incr;
    d86c:	4b0b      	ldr	r3, [pc, #44]	; (d89c <_sbrk+0x58>)
    d86e:	447b      	add	r3, pc
    d870:	681a      	ldr	r2, [r3, #0]
    d872:	687b      	ldr	r3, [r7, #4]
    d874:	18d2      	adds	r2, r2, r3
    d876:	4b0a      	ldr	r3, [pc, #40]	; (d8a0 <_sbrk+0x5c>)
    d878:	447b      	add	r3, pc
    d87a:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap;
    d87c:	68fb      	ldr	r3, [r7, #12]
}
    d87e:	0018      	movs	r0, r3
    d880:	46bd      	mov	sp, r7
    d882:	b004      	add	sp, #16
    d884:	bd80      	pop	{r7, pc}
    d886:	46c0      	nop			; (mov r8, r8)
    d888:	00001be2 	.word	0x00001be2
    d88c:	1fff2bfa 	.word	0x1fff2bfa
    d890:	1fff2bf0 	.word	0x1fff2bf0
    d894:	000002ac 	.word	0x000002ac
    d898:	1fff2be6 	.word	0x1fff2be6
    d89c:	1fff2bde 	.word	0x1fff2bde
    d8a0:	1fff2bd4 	.word	0x1fff2bd4

0000d8a4 <_close>:
{
	return -1;
}

extern int _close(int file)
{
    d8a4:	b580      	push	{r7, lr}
    d8a6:	b082      	sub	sp, #8
    d8a8:	af00      	add	r7, sp, #0
    d8aa:	6078      	str	r0, [r7, #4]
	return -1;
    d8ac:	2301      	movs	r3, #1
    d8ae:	425b      	negs	r3, r3
}
    d8b0:	0018      	movs	r0, r3
    d8b2:	46bd      	mov	sp, r7
    d8b4:	b002      	add	sp, #8
    d8b6:	bd80      	pop	{r7, pc}

0000d8b8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
    d8b8:	b580      	push	{r7, lr}
    d8ba:	b082      	sub	sp, #8
    d8bc:	af00      	add	r7, sp, #0
    d8be:	6078      	str	r0, [r7, #4]
    d8c0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
    d8c2:	683b      	ldr	r3, [r7, #0]
    d8c4:	2280      	movs	r2, #128	; 0x80
    d8c6:	0192      	lsls	r2, r2, #6
    d8c8:	605a      	str	r2, [r3, #4]

	return 0;
    d8ca:	2300      	movs	r3, #0
}
    d8cc:	0018      	movs	r0, r3
    d8ce:	46bd      	mov	sp, r7
    d8d0:	b002      	add	sp, #8
    d8d2:	bd80      	pop	{r7, pc}

0000d8d4 <_isatty>:

extern int _isatty(int file)
{
    d8d4:	b580      	push	{r7, lr}
    d8d6:	b082      	sub	sp, #8
    d8d8:	af00      	add	r7, sp, #0
    d8da:	6078      	str	r0, [r7, #4]
	return 1;
    d8dc:	2301      	movs	r3, #1
}
    d8de:	0018      	movs	r0, r3
    d8e0:	46bd      	mov	sp, r7
    d8e2:	b002      	add	sp, #8
    d8e4:	bd80      	pop	{r7, pc}

0000d8e6 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
    d8e6:	b580      	push	{r7, lr}
    d8e8:	b084      	sub	sp, #16
    d8ea:	af00      	add	r7, sp, #0
    d8ec:	60f8      	str	r0, [r7, #12]
    d8ee:	60b9      	str	r1, [r7, #8]
    d8f0:	607a      	str	r2, [r7, #4]
	return 0;
    d8f2:	2300      	movs	r3, #0
}
    d8f4:	0018      	movs	r0, r3
    d8f6:	46bd      	mov	sp, r7
    d8f8:	b004      	add	sp, #16
    d8fa:	bd80      	pop	{r7, pc}

0000d8fc <__gnu_thumb1_case_si>:
    d8fc:	b403      	push	{r0, r1}
    d8fe:	4671      	mov	r1, lr
    d900:	3102      	adds	r1, #2
    d902:	0889      	lsrs	r1, r1, #2
    d904:	0080      	lsls	r0, r0, #2
    d906:	0089      	lsls	r1, r1, #2
    d908:	5808      	ldr	r0, [r1, r0]
    d90a:	1840      	adds	r0, r0, r1
    d90c:	4686      	mov	lr, r0
    d90e:	bc03      	pop	{r0, r1}
    d910:	46f7      	mov	pc, lr
    d912:	46c0      	nop			; (mov r8, r8)

0000d914 <__udivsi3>:
    d914:	2200      	movs	r2, #0
    d916:	0843      	lsrs	r3, r0, #1
    d918:	428b      	cmp	r3, r1
    d91a:	d374      	bcc.n	da06 <__udivsi3+0xf2>
    d91c:	0903      	lsrs	r3, r0, #4
    d91e:	428b      	cmp	r3, r1
    d920:	d35f      	bcc.n	d9e2 <__udivsi3+0xce>
    d922:	0a03      	lsrs	r3, r0, #8
    d924:	428b      	cmp	r3, r1
    d926:	d344      	bcc.n	d9b2 <__udivsi3+0x9e>
    d928:	0b03      	lsrs	r3, r0, #12
    d92a:	428b      	cmp	r3, r1
    d92c:	d328      	bcc.n	d980 <__udivsi3+0x6c>
    d92e:	0c03      	lsrs	r3, r0, #16
    d930:	428b      	cmp	r3, r1
    d932:	d30d      	bcc.n	d950 <__udivsi3+0x3c>
    d934:	22ff      	movs	r2, #255	; 0xff
    d936:	0209      	lsls	r1, r1, #8
    d938:	ba12      	rev	r2, r2
    d93a:	0c03      	lsrs	r3, r0, #16
    d93c:	428b      	cmp	r3, r1
    d93e:	d302      	bcc.n	d946 <__udivsi3+0x32>
    d940:	1212      	asrs	r2, r2, #8
    d942:	0209      	lsls	r1, r1, #8
    d944:	d065      	beq.n	da12 <__udivsi3+0xfe>
    d946:	0b03      	lsrs	r3, r0, #12
    d948:	428b      	cmp	r3, r1
    d94a:	d319      	bcc.n	d980 <__udivsi3+0x6c>
    d94c:	e000      	b.n	d950 <__udivsi3+0x3c>
    d94e:	0a09      	lsrs	r1, r1, #8
    d950:	0bc3      	lsrs	r3, r0, #15
    d952:	428b      	cmp	r3, r1
    d954:	d301      	bcc.n	d95a <__udivsi3+0x46>
    d956:	03cb      	lsls	r3, r1, #15
    d958:	1ac0      	subs	r0, r0, r3
    d95a:	4152      	adcs	r2, r2
    d95c:	0b83      	lsrs	r3, r0, #14
    d95e:	428b      	cmp	r3, r1
    d960:	d301      	bcc.n	d966 <__udivsi3+0x52>
    d962:	038b      	lsls	r3, r1, #14
    d964:	1ac0      	subs	r0, r0, r3
    d966:	4152      	adcs	r2, r2
    d968:	0b43      	lsrs	r3, r0, #13
    d96a:	428b      	cmp	r3, r1
    d96c:	d301      	bcc.n	d972 <__udivsi3+0x5e>
    d96e:	034b      	lsls	r3, r1, #13
    d970:	1ac0      	subs	r0, r0, r3
    d972:	4152      	adcs	r2, r2
    d974:	0b03      	lsrs	r3, r0, #12
    d976:	428b      	cmp	r3, r1
    d978:	d301      	bcc.n	d97e <__udivsi3+0x6a>
    d97a:	030b      	lsls	r3, r1, #12
    d97c:	1ac0      	subs	r0, r0, r3
    d97e:	4152      	adcs	r2, r2
    d980:	0ac3      	lsrs	r3, r0, #11
    d982:	428b      	cmp	r3, r1
    d984:	d301      	bcc.n	d98a <__udivsi3+0x76>
    d986:	02cb      	lsls	r3, r1, #11
    d988:	1ac0      	subs	r0, r0, r3
    d98a:	4152      	adcs	r2, r2
    d98c:	0a83      	lsrs	r3, r0, #10
    d98e:	428b      	cmp	r3, r1
    d990:	d301      	bcc.n	d996 <__udivsi3+0x82>
    d992:	028b      	lsls	r3, r1, #10
    d994:	1ac0      	subs	r0, r0, r3
    d996:	4152      	adcs	r2, r2
    d998:	0a43      	lsrs	r3, r0, #9
    d99a:	428b      	cmp	r3, r1
    d99c:	d301      	bcc.n	d9a2 <__udivsi3+0x8e>
    d99e:	024b      	lsls	r3, r1, #9
    d9a0:	1ac0      	subs	r0, r0, r3
    d9a2:	4152      	adcs	r2, r2
    d9a4:	0a03      	lsrs	r3, r0, #8
    d9a6:	428b      	cmp	r3, r1
    d9a8:	d301      	bcc.n	d9ae <__udivsi3+0x9a>
    d9aa:	020b      	lsls	r3, r1, #8
    d9ac:	1ac0      	subs	r0, r0, r3
    d9ae:	4152      	adcs	r2, r2
    d9b0:	d2cd      	bcs.n	d94e <__udivsi3+0x3a>
    d9b2:	09c3      	lsrs	r3, r0, #7
    d9b4:	428b      	cmp	r3, r1
    d9b6:	d301      	bcc.n	d9bc <__udivsi3+0xa8>
    d9b8:	01cb      	lsls	r3, r1, #7
    d9ba:	1ac0      	subs	r0, r0, r3
    d9bc:	4152      	adcs	r2, r2
    d9be:	0983      	lsrs	r3, r0, #6
    d9c0:	428b      	cmp	r3, r1
    d9c2:	d301      	bcc.n	d9c8 <__udivsi3+0xb4>
    d9c4:	018b      	lsls	r3, r1, #6
    d9c6:	1ac0      	subs	r0, r0, r3
    d9c8:	4152      	adcs	r2, r2
    d9ca:	0943      	lsrs	r3, r0, #5
    d9cc:	428b      	cmp	r3, r1
    d9ce:	d301      	bcc.n	d9d4 <__udivsi3+0xc0>
    d9d0:	014b      	lsls	r3, r1, #5
    d9d2:	1ac0      	subs	r0, r0, r3
    d9d4:	4152      	adcs	r2, r2
    d9d6:	0903      	lsrs	r3, r0, #4
    d9d8:	428b      	cmp	r3, r1
    d9da:	d301      	bcc.n	d9e0 <__udivsi3+0xcc>
    d9dc:	010b      	lsls	r3, r1, #4
    d9de:	1ac0      	subs	r0, r0, r3
    d9e0:	4152      	adcs	r2, r2
    d9e2:	08c3      	lsrs	r3, r0, #3
    d9e4:	428b      	cmp	r3, r1
    d9e6:	d301      	bcc.n	d9ec <__udivsi3+0xd8>
    d9e8:	00cb      	lsls	r3, r1, #3
    d9ea:	1ac0      	subs	r0, r0, r3
    d9ec:	4152      	adcs	r2, r2
    d9ee:	0883      	lsrs	r3, r0, #2
    d9f0:	428b      	cmp	r3, r1
    d9f2:	d301      	bcc.n	d9f8 <__udivsi3+0xe4>
    d9f4:	008b      	lsls	r3, r1, #2
    d9f6:	1ac0      	subs	r0, r0, r3
    d9f8:	4152      	adcs	r2, r2
    d9fa:	0843      	lsrs	r3, r0, #1
    d9fc:	428b      	cmp	r3, r1
    d9fe:	d301      	bcc.n	da04 <__udivsi3+0xf0>
    da00:	004b      	lsls	r3, r1, #1
    da02:	1ac0      	subs	r0, r0, r3
    da04:	4152      	adcs	r2, r2
    da06:	1a41      	subs	r1, r0, r1
    da08:	d200      	bcs.n	da0c <__udivsi3+0xf8>
    da0a:	4601      	mov	r1, r0
    da0c:	4152      	adcs	r2, r2
    da0e:	4610      	mov	r0, r2
    da10:	4770      	bx	lr
    da12:	e7ff      	b.n	da14 <__udivsi3+0x100>
    da14:	b501      	push	{r0, lr}
    da16:	2000      	movs	r0, #0
    da18:	f000 f8f0 	bl	dbfc <__aeabi_idiv0>
    da1c:	bd02      	pop	{r1, pc}
    da1e:	46c0      	nop			; (mov r8, r8)

0000da20 <__aeabi_uidivmod>:
    da20:	2900      	cmp	r1, #0
    da22:	d0f7      	beq.n	da14 <__udivsi3+0x100>
    da24:	e776      	b.n	d914 <__udivsi3>
    da26:	4770      	bx	lr

0000da28 <__divsi3>:
    da28:	4603      	mov	r3, r0
    da2a:	430b      	orrs	r3, r1
    da2c:	d47f      	bmi.n	db2e <__divsi3+0x106>
    da2e:	2200      	movs	r2, #0
    da30:	0843      	lsrs	r3, r0, #1
    da32:	428b      	cmp	r3, r1
    da34:	d374      	bcc.n	db20 <__divsi3+0xf8>
    da36:	0903      	lsrs	r3, r0, #4
    da38:	428b      	cmp	r3, r1
    da3a:	d35f      	bcc.n	dafc <__divsi3+0xd4>
    da3c:	0a03      	lsrs	r3, r0, #8
    da3e:	428b      	cmp	r3, r1
    da40:	d344      	bcc.n	dacc <__divsi3+0xa4>
    da42:	0b03      	lsrs	r3, r0, #12
    da44:	428b      	cmp	r3, r1
    da46:	d328      	bcc.n	da9a <__divsi3+0x72>
    da48:	0c03      	lsrs	r3, r0, #16
    da4a:	428b      	cmp	r3, r1
    da4c:	d30d      	bcc.n	da6a <__divsi3+0x42>
    da4e:	22ff      	movs	r2, #255	; 0xff
    da50:	0209      	lsls	r1, r1, #8
    da52:	ba12      	rev	r2, r2
    da54:	0c03      	lsrs	r3, r0, #16
    da56:	428b      	cmp	r3, r1
    da58:	d302      	bcc.n	da60 <__divsi3+0x38>
    da5a:	1212      	asrs	r2, r2, #8
    da5c:	0209      	lsls	r1, r1, #8
    da5e:	d065      	beq.n	db2c <__divsi3+0x104>
    da60:	0b03      	lsrs	r3, r0, #12
    da62:	428b      	cmp	r3, r1
    da64:	d319      	bcc.n	da9a <__divsi3+0x72>
    da66:	e000      	b.n	da6a <__divsi3+0x42>
    da68:	0a09      	lsrs	r1, r1, #8
    da6a:	0bc3      	lsrs	r3, r0, #15
    da6c:	428b      	cmp	r3, r1
    da6e:	d301      	bcc.n	da74 <__divsi3+0x4c>
    da70:	03cb      	lsls	r3, r1, #15
    da72:	1ac0      	subs	r0, r0, r3
    da74:	4152      	adcs	r2, r2
    da76:	0b83      	lsrs	r3, r0, #14
    da78:	428b      	cmp	r3, r1
    da7a:	d301      	bcc.n	da80 <__divsi3+0x58>
    da7c:	038b      	lsls	r3, r1, #14
    da7e:	1ac0      	subs	r0, r0, r3
    da80:	4152      	adcs	r2, r2
    da82:	0b43      	lsrs	r3, r0, #13
    da84:	428b      	cmp	r3, r1
    da86:	d301      	bcc.n	da8c <__divsi3+0x64>
    da88:	034b      	lsls	r3, r1, #13
    da8a:	1ac0      	subs	r0, r0, r3
    da8c:	4152      	adcs	r2, r2
    da8e:	0b03      	lsrs	r3, r0, #12
    da90:	428b      	cmp	r3, r1
    da92:	d301      	bcc.n	da98 <__divsi3+0x70>
    da94:	030b      	lsls	r3, r1, #12
    da96:	1ac0      	subs	r0, r0, r3
    da98:	4152      	adcs	r2, r2
    da9a:	0ac3      	lsrs	r3, r0, #11
    da9c:	428b      	cmp	r3, r1
    da9e:	d301      	bcc.n	daa4 <__divsi3+0x7c>
    daa0:	02cb      	lsls	r3, r1, #11
    daa2:	1ac0      	subs	r0, r0, r3
    daa4:	4152      	adcs	r2, r2
    daa6:	0a83      	lsrs	r3, r0, #10
    daa8:	428b      	cmp	r3, r1
    daaa:	d301      	bcc.n	dab0 <__divsi3+0x88>
    daac:	028b      	lsls	r3, r1, #10
    daae:	1ac0      	subs	r0, r0, r3
    dab0:	4152      	adcs	r2, r2
    dab2:	0a43      	lsrs	r3, r0, #9
    dab4:	428b      	cmp	r3, r1
    dab6:	d301      	bcc.n	dabc <__divsi3+0x94>
    dab8:	024b      	lsls	r3, r1, #9
    daba:	1ac0      	subs	r0, r0, r3
    dabc:	4152      	adcs	r2, r2
    dabe:	0a03      	lsrs	r3, r0, #8
    dac0:	428b      	cmp	r3, r1
    dac2:	d301      	bcc.n	dac8 <__divsi3+0xa0>
    dac4:	020b      	lsls	r3, r1, #8
    dac6:	1ac0      	subs	r0, r0, r3
    dac8:	4152      	adcs	r2, r2
    daca:	d2cd      	bcs.n	da68 <__divsi3+0x40>
    dacc:	09c3      	lsrs	r3, r0, #7
    dace:	428b      	cmp	r3, r1
    dad0:	d301      	bcc.n	dad6 <__divsi3+0xae>
    dad2:	01cb      	lsls	r3, r1, #7
    dad4:	1ac0      	subs	r0, r0, r3
    dad6:	4152      	adcs	r2, r2
    dad8:	0983      	lsrs	r3, r0, #6
    dada:	428b      	cmp	r3, r1
    dadc:	d301      	bcc.n	dae2 <__divsi3+0xba>
    dade:	018b      	lsls	r3, r1, #6
    dae0:	1ac0      	subs	r0, r0, r3
    dae2:	4152      	adcs	r2, r2
    dae4:	0943      	lsrs	r3, r0, #5
    dae6:	428b      	cmp	r3, r1
    dae8:	d301      	bcc.n	daee <__divsi3+0xc6>
    daea:	014b      	lsls	r3, r1, #5
    daec:	1ac0      	subs	r0, r0, r3
    daee:	4152      	adcs	r2, r2
    daf0:	0903      	lsrs	r3, r0, #4
    daf2:	428b      	cmp	r3, r1
    daf4:	d301      	bcc.n	dafa <__divsi3+0xd2>
    daf6:	010b      	lsls	r3, r1, #4
    daf8:	1ac0      	subs	r0, r0, r3
    dafa:	4152      	adcs	r2, r2
    dafc:	08c3      	lsrs	r3, r0, #3
    dafe:	428b      	cmp	r3, r1
    db00:	d301      	bcc.n	db06 <__divsi3+0xde>
    db02:	00cb      	lsls	r3, r1, #3
    db04:	1ac0      	subs	r0, r0, r3
    db06:	4152      	adcs	r2, r2
    db08:	0883      	lsrs	r3, r0, #2
    db0a:	428b      	cmp	r3, r1
    db0c:	d301      	bcc.n	db12 <__divsi3+0xea>
    db0e:	008b      	lsls	r3, r1, #2
    db10:	1ac0      	subs	r0, r0, r3
    db12:	4152      	adcs	r2, r2
    db14:	0843      	lsrs	r3, r0, #1
    db16:	428b      	cmp	r3, r1
    db18:	d301      	bcc.n	db1e <__divsi3+0xf6>
    db1a:	004b      	lsls	r3, r1, #1
    db1c:	1ac0      	subs	r0, r0, r3
    db1e:	4152      	adcs	r2, r2
    db20:	1a41      	subs	r1, r0, r1
    db22:	d200      	bcs.n	db26 <__divsi3+0xfe>
    db24:	4601      	mov	r1, r0
    db26:	4152      	adcs	r2, r2
    db28:	4610      	mov	r0, r2
    db2a:	4770      	bx	lr
    db2c:	e05d      	b.n	dbea <__divsi3+0x1c2>
    db2e:	0fca      	lsrs	r2, r1, #31
    db30:	d000      	beq.n	db34 <__divsi3+0x10c>
    db32:	4249      	negs	r1, r1
    db34:	1003      	asrs	r3, r0, #32
    db36:	d300      	bcc.n	db3a <__divsi3+0x112>
    db38:	4240      	negs	r0, r0
    db3a:	4053      	eors	r3, r2
    db3c:	2200      	movs	r2, #0
    db3e:	469c      	mov	ip, r3
    db40:	0903      	lsrs	r3, r0, #4
    db42:	428b      	cmp	r3, r1
    db44:	d32d      	bcc.n	dba2 <__divsi3+0x17a>
    db46:	0a03      	lsrs	r3, r0, #8
    db48:	428b      	cmp	r3, r1
    db4a:	d312      	bcc.n	db72 <__divsi3+0x14a>
    db4c:	22fc      	movs	r2, #252	; 0xfc
    db4e:	0189      	lsls	r1, r1, #6
    db50:	ba12      	rev	r2, r2
    db52:	0a03      	lsrs	r3, r0, #8
    db54:	428b      	cmp	r3, r1
    db56:	d30c      	bcc.n	db72 <__divsi3+0x14a>
    db58:	0189      	lsls	r1, r1, #6
    db5a:	1192      	asrs	r2, r2, #6
    db5c:	428b      	cmp	r3, r1
    db5e:	d308      	bcc.n	db72 <__divsi3+0x14a>
    db60:	0189      	lsls	r1, r1, #6
    db62:	1192      	asrs	r2, r2, #6
    db64:	428b      	cmp	r3, r1
    db66:	d304      	bcc.n	db72 <__divsi3+0x14a>
    db68:	0189      	lsls	r1, r1, #6
    db6a:	d03a      	beq.n	dbe2 <__divsi3+0x1ba>
    db6c:	1192      	asrs	r2, r2, #6
    db6e:	e000      	b.n	db72 <__divsi3+0x14a>
    db70:	0989      	lsrs	r1, r1, #6
    db72:	09c3      	lsrs	r3, r0, #7
    db74:	428b      	cmp	r3, r1
    db76:	d301      	bcc.n	db7c <__divsi3+0x154>
    db78:	01cb      	lsls	r3, r1, #7
    db7a:	1ac0      	subs	r0, r0, r3
    db7c:	4152      	adcs	r2, r2
    db7e:	0983      	lsrs	r3, r0, #6
    db80:	428b      	cmp	r3, r1
    db82:	d301      	bcc.n	db88 <__divsi3+0x160>
    db84:	018b      	lsls	r3, r1, #6
    db86:	1ac0      	subs	r0, r0, r3
    db88:	4152      	adcs	r2, r2
    db8a:	0943      	lsrs	r3, r0, #5
    db8c:	428b      	cmp	r3, r1
    db8e:	d301      	bcc.n	db94 <__divsi3+0x16c>
    db90:	014b      	lsls	r3, r1, #5
    db92:	1ac0      	subs	r0, r0, r3
    db94:	4152      	adcs	r2, r2
    db96:	0903      	lsrs	r3, r0, #4
    db98:	428b      	cmp	r3, r1
    db9a:	d301      	bcc.n	dba0 <__divsi3+0x178>
    db9c:	010b      	lsls	r3, r1, #4
    db9e:	1ac0      	subs	r0, r0, r3
    dba0:	4152      	adcs	r2, r2
    dba2:	08c3      	lsrs	r3, r0, #3
    dba4:	428b      	cmp	r3, r1
    dba6:	d301      	bcc.n	dbac <__divsi3+0x184>
    dba8:	00cb      	lsls	r3, r1, #3
    dbaa:	1ac0      	subs	r0, r0, r3
    dbac:	4152      	adcs	r2, r2
    dbae:	0883      	lsrs	r3, r0, #2
    dbb0:	428b      	cmp	r3, r1
    dbb2:	d301      	bcc.n	dbb8 <__divsi3+0x190>
    dbb4:	008b      	lsls	r3, r1, #2
    dbb6:	1ac0      	subs	r0, r0, r3
    dbb8:	4152      	adcs	r2, r2
    dbba:	d2d9      	bcs.n	db70 <__divsi3+0x148>
    dbbc:	0843      	lsrs	r3, r0, #1
    dbbe:	428b      	cmp	r3, r1
    dbc0:	d301      	bcc.n	dbc6 <__divsi3+0x19e>
    dbc2:	004b      	lsls	r3, r1, #1
    dbc4:	1ac0      	subs	r0, r0, r3
    dbc6:	4152      	adcs	r2, r2
    dbc8:	1a41      	subs	r1, r0, r1
    dbca:	d200      	bcs.n	dbce <__divsi3+0x1a6>
    dbcc:	4601      	mov	r1, r0
    dbce:	4663      	mov	r3, ip
    dbd0:	4152      	adcs	r2, r2
    dbd2:	105b      	asrs	r3, r3, #1
    dbd4:	4610      	mov	r0, r2
    dbd6:	d301      	bcc.n	dbdc <__divsi3+0x1b4>
    dbd8:	4240      	negs	r0, r0
    dbda:	2b00      	cmp	r3, #0
    dbdc:	d500      	bpl.n	dbe0 <__divsi3+0x1b8>
    dbde:	4249      	negs	r1, r1
    dbe0:	4770      	bx	lr
    dbe2:	4663      	mov	r3, ip
    dbe4:	105b      	asrs	r3, r3, #1
    dbe6:	d300      	bcc.n	dbea <__divsi3+0x1c2>
    dbe8:	4240      	negs	r0, r0
    dbea:	b501      	push	{r0, lr}
    dbec:	2000      	movs	r0, #0
    dbee:	f000 f805 	bl	dbfc <__aeabi_idiv0>
    dbf2:	bd02      	pop	{r1, pc}

0000dbf4 <__aeabi_idivmod>:
    dbf4:	2900      	cmp	r1, #0
    dbf6:	d0f8      	beq.n	dbea <__divsi3+0x1c2>
    dbf8:	e716      	b.n	da28 <__divsi3>
    dbfa:	4770      	bx	lr

0000dbfc <__aeabi_idiv0>:
    dbfc:	4770      	bx	lr
    dbfe:	46c0      	nop			; (mov r8, r8)

0000dc00 <__ctzsi2>:
    dc00:	4241      	negs	r1, r0
    dc02:	4008      	ands	r0, r1
    dc04:	211c      	movs	r1, #28
    dc06:	2301      	movs	r3, #1
    dc08:	041b      	lsls	r3, r3, #16
    dc0a:	4298      	cmp	r0, r3
    dc0c:	d301      	bcc.n	dc12 <__ctzsi2+0x12>
    dc0e:	0c00      	lsrs	r0, r0, #16
    dc10:	3910      	subs	r1, #16
    dc12:	0a1b      	lsrs	r3, r3, #8
    dc14:	4298      	cmp	r0, r3
    dc16:	d301      	bcc.n	dc1c <__ctzsi2+0x1c>
    dc18:	0a00      	lsrs	r0, r0, #8
    dc1a:	3908      	subs	r1, #8
    dc1c:	091b      	lsrs	r3, r3, #4
    dc1e:	4298      	cmp	r0, r3
    dc20:	d301      	bcc.n	dc26 <__ctzsi2+0x26>
    dc22:	0900      	lsrs	r0, r0, #4
    dc24:	3904      	subs	r1, #4
    dc26:	a202      	add	r2, pc, #8	; (adr r2, dc30 <__ctzsi2+0x30>)
    dc28:	5c10      	ldrb	r0, [r2, r0]
    dc2a:	1a40      	subs	r0, r0, r1
    dc2c:	4770      	bx	lr
    dc2e:	46c0      	nop			; (mov r8, r8)
    dc30:	1d1d1c1b 	.word	0x1d1d1c1b
    dc34:	1e1e1e1e 	.word	0x1e1e1e1e
    dc38:	1f1f1f1f 	.word	0x1f1f1f1f
    dc3c:	1f1f1f1f 	.word	0x1f1f1f1f

0000dc40 <__libc_init_array>:
    dc40:	b570      	push	{r4, r5, r6, lr}
    dc42:	2600      	movs	r6, #0
    dc44:	4d0c      	ldr	r5, [pc, #48]	; (dc78 <__libc_init_array+0x38>)
    dc46:	4c0d      	ldr	r4, [pc, #52]	; (dc7c <__libc_init_array+0x3c>)
    dc48:	1b64      	subs	r4, r4, r5
    dc4a:	10a4      	asrs	r4, r4, #2
    dc4c:	42a6      	cmp	r6, r4
    dc4e:	d109      	bne.n	dc64 <__libc_init_array+0x24>
    dc50:	2600      	movs	r6, #0
    dc52:	f001 fbdf 	bl	f414 <_init>
    dc56:	4d0a      	ldr	r5, [pc, #40]	; (dc80 <__libc_init_array+0x40>)
    dc58:	4c0a      	ldr	r4, [pc, #40]	; (dc84 <__libc_init_array+0x44>)
    dc5a:	1b64      	subs	r4, r4, r5
    dc5c:	10a4      	asrs	r4, r4, #2
    dc5e:	42a6      	cmp	r6, r4
    dc60:	d105      	bne.n	dc6e <__libc_init_array+0x2e>
    dc62:	bd70      	pop	{r4, r5, r6, pc}
    dc64:	00b3      	lsls	r3, r6, #2
    dc66:	58eb      	ldr	r3, [r5, r3]
    dc68:	4798      	blx	r3
    dc6a:	3601      	adds	r6, #1
    dc6c:	e7ee      	b.n	dc4c <__libc_init_array+0xc>
    dc6e:	00b3      	lsls	r3, r6, #2
    dc70:	58eb      	ldr	r3, [r5, r3]
    dc72:	4798      	blx	r3
    dc74:	3601      	adds	r6, #1
    dc76:	e7f2      	b.n	dc5e <__libc_init_array+0x1e>
    dc78:	0000f420 	.word	0x0000f420
    dc7c:	0000f420 	.word	0x0000f420
    dc80:	0000f420 	.word	0x0000f420
    dc84:	0000f424 	.word	0x0000f424

0000dc88 <malloc>:
    dc88:	b510      	push	{r4, lr}
    dc8a:	4b03      	ldr	r3, [pc, #12]	; (dc98 <malloc+0x10>)
    dc8c:	0001      	movs	r1, r0
    dc8e:	6818      	ldr	r0, [r3, #0]
    dc90:	f000 f860 	bl	dd54 <_malloc_r>
    dc94:	bd10      	pop	{r4, pc}
    dc96:	46c0      	nop			; (mov r8, r8)
    dc98:	20000120 	.word	0x20000120

0000dc9c <memcpy>:
    dc9c:	2300      	movs	r3, #0
    dc9e:	b510      	push	{r4, lr}
    dca0:	429a      	cmp	r2, r3
    dca2:	d100      	bne.n	dca6 <memcpy+0xa>
    dca4:	bd10      	pop	{r4, pc}
    dca6:	5ccc      	ldrb	r4, [r1, r3]
    dca8:	54c4      	strb	r4, [r0, r3]
    dcaa:	3301      	adds	r3, #1
    dcac:	e7f8      	b.n	dca0 <memcpy+0x4>

0000dcae <memset>:
    dcae:	0003      	movs	r3, r0
    dcb0:	1882      	adds	r2, r0, r2
    dcb2:	4293      	cmp	r3, r2
    dcb4:	d100      	bne.n	dcb8 <memset+0xa>
    dcb6:	4770      	bx	lr
    dcb8:	7019      	strb	r1, [r3, #0]
    dcba:	3301      	adds	r3, #1
    dcbc:	e7f9      	b.n	dcb2 <memset+0x4>
	...

0000dcc0 <_free_r>:
    dcc0:	b570      	push	{r4, r5, r6, lr}
    dcc2:	0005      	movs	r5, r0
    dcc4:	2900      	cmp	r1, #0
    dcc6:	d010      	beq.n	dcea <_free_r+0x2a>
    dcc8:	1f0c      	subs	r4, r1, #4
    dcca:	6823      	ldr	r3, [r4, #0]
    dccc:	2b00      	cmp	r3, #0
    dcce:	da00      	bge.n	dcd2 <_free_r+0x12>
    dcd0:	18e4      	adds	r4, r4, r3
    dcd2:	0028      	movs	r0, r5
    dcd4:	f000 fc54 	bl	e580 <__malloc_lock>
    dcd8:	4a1d      	ldr	r2, [pc, #116]	; (dd50 <_free_r+0x90>)
    dcda:	6813      	ldr	r3, [r2, #0]
    dcdc:	2b00      	cmp	r3, #0
    dcde:	d105      	bne.n	dcec <_free_r+0x2c>
    dce0:	6063      	str	r3, [r4, #4]
    dce2:	6014      	str	r4, [r2, #0]
    dce4:	0028      	movs	r0, r5
    dce6:	f000 fc4c 	bl	e582 <__malloc_unlock>
    dcea:	bd70      	pop	{r4, r5, r6, pc}
    dcec:	42a3      	cmp	r3, r4
    dcee:	d909      	bls.n	dd04 <_free_r+0x44>
    dcf0:	6821      	ldr	r1, [r4, #0]
    dcf2:	1860      	adds	r0, r4, r1
    dcf4:	4283      	cmp	r3, r0
    dcf6:	d1f3      	bne.n	dce0 <_free_r+0x20>
    dcf8:	6818      	ldr	r0, [r3, #0]
    dcfa:	685b      	ldr	r3, [r3, #4]
    dcfc:	1841      	adds	r1, r0, r1
    dcfe:	6021      	str	r1, [r4, #0]
    dd00:	e7ee      	b.n	dce0 <_free_r+0x20>
    dd02:	0013      	movs	r3, r2
    dd04:	685a      	ldr	r2, [r3, #4]
    dd06:	2a00      	cmp	r2, #0
    dd08:	d001      	beq.n	dd0e <_free_r+0x4e>
    dd0a:	42a2      	cmp	r2, r4
    dd0c:	d9f9      	bls.n	dd02 <_free_r+0x42>
    dd0e:	6819      	ldr	r1, [r3, #0]
    dd10:	1858      	adds	r0, r3, r1
    dd12:	42a0      	cmp	r0, r4
    dd14:	d10b      	bne.n	dd2e <_free_r+0x6e>
    dd16:	6820      	ldr	r0, [r4, #0]
    dd18:	1809      	adds	r1, r1, r0
    dd1a:	1858      	adds	r0, r3, r1
    dd1c:	6019      	str	r1, [r3, #0]
    dd1e:	4282      	cmp	r2, r0
    dd20:	d1e0      	bne.n	dce4 <_free_r+0x24>
    dd22:	6810      	ldr	r0, [r2, #0]
    dd24:	6852      	ldr	r2, [r2, #4]
    dd26:	1841      	adds	r1, r0, r1
    dd28:	6019      	str	r1, [r3, #0]
    dd2a:	605a      	str	r2, [r3, #4]
    dd2c:	e7da      	b.n	dce4 <_free_r+0x24>
    dd2e:	42a0      	cmp	r0, r4
    dd30:	d902      	bls.n	dd38 <_free_r+0x78>
    dd32:	230c      	movs	r3, #12
    dd34:	602b      	str	r3, [r5, #0]
    dd36:	e7d5      	b.n	dce4 <_free_r+0x24>
    dd38:	6821      	ldr	r1, [r4, #0]
    dd3a:	1860      	adds	r0, r4, r1
    dd3c:	4282      	cmp	r2, r0
    dd3e:	d103      	bne.n	dd48 <_free_r+0x88>
    dd40:	6810      	ldr	r0, [r2, #0]
    dd42:	6852      	ldr	r2, [r2, #4]
    dd44:	1841      	adds	r1, r0, r1
    dd46:	6021      	str	r1, [r4, #0]
    dd48:	6062      	str	r2, [r4, #4]
    dd4a:	605c      	str	r4, [r3, #4]
    dd4c:	e7ca      	b.n	dce4 <_free_r+0x24>
    dd4e:	46c0      	nop			; (mov r8, r8)
    dd50:	20000454 	.word	0x20000454

0000dd54 <_malloc_r>:
    dd54:	2303      	movs	r3, #3
    dd56:	b570      	push	{r4, r5, r6, lr}
    dd58:	1ccd      	adds	r5, r1, #3
    dd5a:	439d      	bics	r5, r3
    dd5c:	3508      	adds	r5, #8
    dd5e:	0006      	movs	r6, r0
    dd60:	2d0c      	cmp	r5, #12
    dd62:	d21e      	bcs.n	dda2 <_malloc_r+0x4e>
    dd64:	250c      	movs	r5, #12
    dd66:	42a9      	cmp	r1, r5
    dd68:	d81d      	bhi.n	dda6 <_malloc_r+0x52>
    dd6a:	0030      	movs	r0, r6
    dd6c:	f000 fc08 	bl	e580 <__malloc_lock>
    dd70:	4a25      	ldr	r2, [pc, #148]	; (de08 <_malloc_r+0xb4>)
    dd72:	6814      	ldr	r4, [r2, #0]
    dd74:	0021      	movs	r1, r4
    dd76:	2900      	cmp	r1, #0
    dd78:	d119      	bne.n	ddae <_malloc_r+0x5a>
    dd7a:	4c24      	ldr	r4, [pc, #144]	; (de0c <_malloc_r+0xb8>)
    dd7c:	6823      	ldr	r3, [r4, #0]
    dd7e:	2b00      	cmp	r3, #0
    dd80:	d103      	bne.n	dd8a <_malloc_r+0x36>
    dd82:	0030      	movs	r0, r6
    dd84:	f000 f85e 	bl	de44 <_sbrk_r>
    dd88:	6020      	str	r0, [r4, #0]
    dd8a:	0029      	movs	r1, r5
    dd8c:	0030      	movs	r0, r6
    dd8e:	f000 f859 	bl	de44 <_sbrk_r>
    dd92:	1c43      	adds	r3, r0, #1
    dd94:	d12c      	bne.n	ddf0 <_malloc_r+0x9c>
    dd96:	230c      	movs	r3, #12
    dd98:	0030      	movs	r0, r6
    dd9a:	6033      	str	r3, [r6, #0]
    dd9c:	f000 fbf1 	bl	e582 <__malloc_unlock>
    dda0:	e003      	b.n	ddaa <_malloc_r+0x56>
    dda2:	2d00      	cmp	r5, #0
    dda4:	dadf      	bge.n	dd66 <_malloc_r+0x12>
    dda6:	230c      	movs	r3, #12
    dda8:	6033      	str	r3, [r6, #0]
    ddaa:	2000      	movs	r0, #0
    ddac:	bd70      	pop	{r4, r5, r6, pc}
    ddae:	680b      	ldr	r3, [r1, #0]
    ddb0:	1b5b      	subs	r3, r3, r5
    ddb2:	d41a      	bmi.n	ddea <_malloc_r+0x96>
    ddb4:	2b0b      	cmp	r3, #11
    ddb6:	d903      	bls.n	ddc0 <_malloc_r+0x6c>
    ddb8:	600b      	str	r3, [r1, #0]
    ddba:	18cc      	adds	r4, r1, r3
    ddbc:	6025      	str	r5, [r4, #0]
    ddbe:	e003      	b.n	ddc8 <_malloc_r+0x74>
    ddc0:	428c      	cmp	r4, r1
    ddc2:	d10e      	bne.n	dde2 <_malloc_r+0x8e>
    ddc4:	6863      	ldr	r3, [r4, #4]
    ddc6:	6013      	str	r3, [r2, #0]
    ddc8:	0030      	movs	r0, r6
    ddca:	f000 fbda 	bl	e582 <__malloc_unlock>
    ddce:	0020      	movs	r0, r4
    ddd0:	2207      	movs	r2, #7
    ddd2:	300b      	adds	r0, #11
    ddd4:	1d23      	adds	r3, r4, #4
    ddd6:	4390      	bics	r0, r2
    ddd8:	1ac3      	subs	r3, r0, r3
    ddda:	d0e7      	beq.n	ddac <_malloc_r+0x58>
    dddc:	425a      	negs	r2, r3
    ddde:	50e2      	str	r2, [r4, r3]
    dde0:	e7e4      	b.n	ddac <_malloc_r+0x58>
    dde2:	684b      	ldr	r3, [r1, #4]
    dde4:	6063      	str	r3, [r4, #4]
    dde6:	000c      	movs	r4, r1
    dde8:	e7ee      	b.n	ddc8 <_malloc_r+0x74>
    ddea:	000c      	movs	r4, r1
    ddec:	6849      	ldr	r1, [r1, #4]
    ddee:	e7c2      	b.n	dd76 <_malloc_r+0x22>
    ddf0:	2303      	movs	r3, #3
    ddf2:	1cc4      	adds	r4, r0, #3
    ddf4:	439c      	bics	r4, r3
    ddf6:	42a0      	cmp	r0, r4
    ddf8:	d0e0      	beq.n	ddbc <_malloc_r+0x68>
    ddfa:	1a21      	subs	r1, r4, r0
    ddfc:	0030      	movs	r0, r6
    ddfe:	f000 f821 	bl	de44 <_sbrk_r>
    de02:	1c43      	adds	r3, r0, #1
    de04:	d1da      	bne.n	ddbc <_malloc_r+0x68>
    de06:	e7c6      	b.n	dd96 <_malloc_r+0x42>
    de08:	20000454 	.word	0x20000454
    de0c:	20000458 	.word	0x20000458

0000de10 <iprintf>:
    de10:	b40f      	push	{r0, r1, r2, r3}
    de12:	4b0b      	ldr	r3, [pc, #44]	; (de40 <iprintf+0x30>)
    de14:	b513      	push	{r0, r1, r4, lr}
    de16:	681c      	ldr	r4, [r3, #0]
    de18:	2c00      	cmp	r4, #0
    de1a:	d005      	beq.n	de28 <iprintf+0x18>
    de1c:	69a3      	ldr	r3, [r4, #24]
    de1e:	2b00      	cmp	r3, #0
    de20:	d102      	bne.n	de28 <iprintf+0x18>
    de22:	0020      	movs	r0, r4
    de24:	f000 fab0 	bl	e388 <__sinit>
    de28:	ab05      	add	r3, sp, #20
    de2a:	9a04      	ldr	r2, [sp, #16]
    de2c:	68a1      	ldr	r1, [r4, #8]
    de2e:	0020      	movs	r0, r4
    de30:	9301      	str	r3, [sp, #4]
    de32:	f000 fbcf 	bl	e5d4 <_vfiprintf_r>
    de36:	bc16      	pop	{r1, r2, r4}
    de38:	bc08      	pop	{r3}
    de3a:	b004      	add	sp, #16
    de3c:	4718      	bx	r3
    de3e:	46c0      	nop			; (mov r8, r8)
    de40:	20000120 	.word	0x20000120

0000de44 <_sbrk_r>:
    de44:	2300      	movs	r3, #0
    de46:	b570      	push	{r4, r5, r6, lr}
    de48:	4c06      	ldr	r4, [pc, #24]	; (de64 <_sbrk_r+0x20>)
    de4a:	0005      	movs	r5, r0
    de4c:	0008      	movs	r0, r1
    de4e:	6023      	str	r3, [r4, #0]
    de50:	f7ff fcf8 	bl	d844 <_sbrk>
    de54:	1c43      	adds	r3, r0, #1
    de56:	d103      	bne.n	de60 <_sbrk_r+0x1c>
    de58:	6823      	ldr	r3, [r4, #0]
    de5a:	2b00      	cmp	r3, #0
    de5c:	d000      	beq.n	de60 <_sbrk_r+0x1c>
    de5e:	602b      	str	r3, [r5, #0]
    de60:	bd70      	pop	{r4, r5, r6, pc}
    de62:	46c0      	nop			; (mov r8, r8)
    de64:	20002b70 	.word	0x20002b70

0000de68 <setbuf>:
    de68:	424a      	negs	r2, r1
    de6a:	414a      	adcs	r2, r1
    de6c:	2380      	movs	r3, #128	; 0x80
    de6e:	b510      	push	{r4, lr}
    de70:	0052      	lsls	r2, r2, #1
    de72:	00db      	lsls	r3, r3, #3
    de74:	f000 f802 	bl	de7c <setvbuf>
    de78:	bd10      	pop	{r4, pc}
	...

0000de7c <setvbuf>:
    de7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    de7e:	001d      	movs	r5, r3
    de80:	4b4f      	ldr	r3, [pc, #316]	; (dfc0 <setvbuf+0x144>)
    de82:	b085      	sub	sp, #20
    de84:	681e      	ldr	r6, [r3, #0]
    de86:	0004      	movs	r4, r0
    de88:	000f      	movs	r7, r1
    de8a:	9200      	str	r2, [sp, #0]
    de8c:	2e00      	cmp	r6, #0
    de8e:	d005      	beq.n	de9c <setvbuf+0x20>
    de90:	69b3      	ldr	r3, [r6, #24]
    de92:	2b00      	cmp	r3, #0
    de94:	d102      	bne.n	de9c <setvbuf+0x20>
    de96:	0030      	movs	r0, r6
    de98:	f000 fa76 	bl	e388 <__sinit>
    de9c:	4b49      	ldr	r3, [pc, #292]	; (dfc4 <setvbuf+0x148>)
    de9e:	429c      	cmp	r4, r3
    dea0:	d150      	bne.n	df44 <setvbuf+0xc8>
    dea2:	6874      	ldr	r4, [r6, #4]
    dea4:	9b00      	ldr	r3, [sp, #0]
    dea6:	2b02      	cmp	r3, #2
    dea8:	d005      	beq.n	deb6 <setvbuf+0x3a>
    deaa:	2b01      	cmp	r3, #1
    deac:	d900      	bls.n	deb0 <setvbuf+0x34>
    deae:	e084      	b.n	dfba <setvbuf+0x13e>
    deb0:	2d00      	cmp	r5, #0
    deb2:	da00      	bge.n	deb6 <setvbuf+0x3a>
    deb4:	e081      	b.n	dfba <setvbuf+0x13e>
    deb6:	0021      	movs	r1, r4
    deb8:	0030      	movs	r0, r6
    deba:	f000 f9f7 	bl	e2ac <_fflush_r>
    debe:	6b61      	ldr	r1, [r4, #52]	; 0x34
    dec0:	2900      	cmp	r1, #0
    dec2:	d008      	beq.n	ded6 <setvbuf+0x5a>
    dec4:	0023      	movs	r3, r4
    dec6:	3344      	adds	r3, #68	; 0x44
    dec8:	4299      	cmp	r1, r3
    deca:	d002      	beq.n	ded2 <setvbuf+0x56>
    decc:	0030      	movs	r0, r6
    dece:	f7ff fef7 	bl	dcc0 <_free_r>
    ded2:	2300      	movs	r3, #0
    ded4:	6363      	str	r3, [r4, #52]	; 0x34
    ded6:	2300      	movs	r3, #0
    ded8:	61a3      	str	r3, [r4, #24]
    deda:	6063      	str	r3, [r4, #4]
    dedc:	89a3      	ldrh	r3, [r4, #12]
    dede:	061b      	lsls	r3, r3, #24
    dee0:	d503      	bpl.n	deea <setvbuf+0x6e>
    dee2:	6921      	ldr	r1, [r4, #16]
    dee4:	0030      	movs	r0, r6
    dee6:	f7ff feeb 	bl	dcc0 <_free_r>
    deea:	89a3      	ldrh	r3, [r4, #12]
    deec:	4a36      	ldr	r2, [pc, #216]	; (dfc8 <setvbuf+0x14c>)
    deee:	4013      	ands	r3, r2
    def0:	81a3      	strh	r3, [r4, #12]
    def2:	9b00      	ldr	r3, [sp, #0]
    def4:	2b02      	cmp	r3, #2
    def6:	d05a      	beq.n	dfae <setvbuf+0x132>
    def8:	ab03      	add	r3, sp, #12
    defa:	aa02      	add	r2, sp, #8
    defc:	0021      	movs	r1, r4
    defe:	0030      	movs	r0, r6
    df00:	f000 fad8 	bl	e4b4 <__swhatbuf_r>
    df04:	89a3      	ldrh	r3, [r4, #12]
    df06:	4318      	orrs	r0, r3
    df08:	81a0      	strh	r0, [r4, #12]
    df0a:	2d00      	cmp	r5, #0
    df0c:	d124      	bne.n	df58 <setvbuf+0xdc>
    df0e:	9d02      	ldr	r5, [sp, #8]
    df10:	0028      	movs	r0, r5
    df12:	f7ff feb9 	bl	dc88 <malloc>
    df16:	9501      	str	r5, [sp, #4]
    df18:	1e07      	subs	r7, r0, #0
    df1a:	d142      	bne.n	dfa2 <setvbuf+0x126>
    df1c:	9b02      	ldr	r3, [sp, #8]
    df1e:	9301      	str	r3, [sp, #4]
    df20:	42ab      	cmp	r3, r5
    df22:	d139      	bne.n	df98 <setvbuf+0x11c>
    df24:	2001      	movs	r0, #1
    df26:	4240      	negs	r0, r0
    df28:	2302      	movs	r3, #2
    df2a:	89a2      	ldrh	r2, [r4, #12]
    df2c:	4313      	orrs	r3, r2
    df2e:	81a3      	strh	r3, [r4, #12]
    df30:	2300      	movs	r3, #0
    df32:	60a3      	str	r3, [r4, #8]
    df34:	0023      	movs	r3, r4
    df36:	3347      	adds	r3, #71	; 0x47
    df38:	6023      	str	r3, [r4, #0]
    df3a:	6123      	str	r3, [r4, #16]
    df3c:	2301      	movs	r3, #1
    df3e:	6163      	str	r3, [r4, #20]
    df40:	b005      	add	sp, #20
    df42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df44:	4b21      	ldr	r3, [pc, #132]	; (dfcc <setvbuf+0x150>)
    df46:	429c      	cmp	r4, r3
    df48:	d101      	bne.n	df4e <setvbuf+0xd2>
    df4a:	68b4      	ldr	r4, [r6, #8]
    df4c:	e7aa      	b.n	dea4 <setvbuf+0x28>
    df4e:	4b20      	ldr	r3, [pc, #128]	; (dfd0 <setvbuf+0x154>)
    df50:	429c      	cmp	r4, r3
    df52:	d1a7      	bne.n	dea4 <setvbuf+0x28>
    df54:	68f4      	ldr	r4, [r6, #12]
    df56:	e7a5      	b.n	dea4 <setvbuf+0x28>
    df58:	2f00      	cmp	r7, #0
    df5a:	d0d9      	beq.n	df10 <setvbuf+0x94>
    df5c:	69b3      	ldr	r3, [r6, #24]
    df5e:	2b00      	cmp	r3, #0
    df60:	d102      	bne.n	df68 <setvbuf+0xec>
    df62:	0030      	movs	r0, r6
    df64:	f000 fa10 	bl	e388 <__sinit>
    df68:	9b00      	ldr	r3, [sp, #0]
    df6a:	2b01      	cmp	r3, #1
    df6c:	d103      	bne.n	df76 <setvbuf+0xfa>
    df6e:	89a3      	ldrh	r3, [r4, #12]
    df70:	9a00      	ldr	r2, [sp, #0]
    df72:	431a      	orrs	r2, r3
    df74:	81a2      	strh	r2, [r4, #12]
    df76:	2008      	movs	r0, #8
    df78:	89a3      	ldrh	r3, [r4, #12]
    df7a:	6027      	str	r7, [r4, #0]
    df7c:	6127      	str	r7, [r4, #16]
    df7e:	6165      	str	r5, [r4, #20]
    df80:	4018      	ands	r0, r3
    df82:	d018      	beq.n	dfb6 <setvbuf+0x13a>
    df84:	2001      	movs	r0, #1
    df86:	4018      	ands	r0, r3
    df88:	2300      	movs	r3, #0
    df8a:	4298      	cmp	r0, r3
    df8c:	d011      	beq.n	dfb2 <setvbuf+0x136>
    df8e:	426d      	negs	r5, r5
    df90:	60a3      	str	r3, [r4, #8]
    df92:	61a5      	str	r5, [r4, #24]
    df94:	0018      	movs	r0, r3
    df96:	e7d3      	b.n	df40 <setvbuf+0xc4>
    df98:	9801      	ldr	r0, [sp, #4]
    df9a:	f7ff fe75 	bl	dc88 <malloc>
    df9e:	1e07      	subs	r7, r0, #0
    dfa0:	d0c0      	beq.n	df24 <setvbuf+0xa8>
    dfa2:	2380      	movs	r3, #128	; 0x80
    dfa4:	89a2      	ldrh	r2, [r4, #12]
    dfa6:	9d01      	ldr	r5, [sp, #4]
    dfa8:	4313      	orrs	r3, r2
    dfaa:	81a3      	strh	r3, [r4, #12]
    dfac:	e7d6      	b.n	df5c <setvbuf+0xe0>
    dfae:	2000      	movs	r0, #0
    dfb0:	e7ba      	b.n	df28 <setvbuf+0xac>
    dfb2:	60a5      	str	r5, [r4, #8]
    dfb4:	e7c4      	b.n	df40 <setvbuf+0xc4>
    dfb6:	60a0      	str	r0, [r4, #8]
    dfb8:	e7c2      	b.n	df40 <setvbuf+0xc4>
    dfba:	2001      	movs	r0, #1
    dfbc:	4240      	negs	r0, r0
    dfbe:	e7bf      	b.n	df40 <setvbuf+0xc4>
    dfc0:	20000120 	.word	0x20000120
    dfc4:	0000f3a0 	.word	0x0000f3a0
    dfc8:	fffff35c 	.word	0xfffff35c
    dfcc:	0000f3c0 	.word	0x0000f3c0
    dfd0:	0000f380 	.word	0x0000f380

0000dfd4 <viprintf>:
    dfd4:	4b09      	ldr	r3, [pc, #36]	; (dffc <viprintf+0x28>)
    dfd6:	b570      	push	{r4, r5, r6, lr}
    dfd8:	681c      	ldr	r4, [r3, #0]
    dfda:	0005      	movs	r5, r0
    dfdc:	000e      	movs	r6, r1
    dfde:	2c00      	cmp	r4, #0
    dfe0:	d005      	beq.n	dfee <viprintf+0x1a>
    dfe2:	69a3      	ldr	r3, [r4, #24]
    dfe4:	2b00      	cmp	r3, #0
    dfe6:	d102      	bne.n	dfee <viprintf+0x1a>
    dfe8:	0020      	movs	r0, r4
    dfea:	f000 f9cd 	bl	e388 <__sinit>
    dfee:	0033      	movs	r3, r6
    dff0:	002a      	movs	r2, r5
    dff2:	68a1      	ldr	r1, [r4, #8]
    dff4:	0020      	movs	r0, r4
    dff6:	f000 faed 	bl	e5d4 <_vfiprintf_r>
    dffa:	bd70      	pop	{r4, r5, r6, pc}
    dffc:	20000120 	.word	0x20000120

0000e000 <__swbuf_r>:
    e000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e002:	0005      	movs	r5, r0
    e004:	000e      	movs	r6, r1
    e006:	0014      	movs	r4, r2
    e008:	2800      	cmp	r0, #0
    e00a:	d004      	beq.n	e016 <__swbuf_r+0x16>
    e00c:	6983      	ldr	r3, [r0, #24]
    e00e:	2b00      	cmp	r3, #0
    e010:	d101      	bne.n	e016 <__swbuf_r+0x16>
    e012:	f000 f9b9 	bl	e388 <__sinit>
    e016:	4b22      	ldr	r3, [pc, #136]	; (e0a0 <__swbuf_r+0xa0>)
    e018:	429c      	cmp	r4, r3
    e01a:	d12d      	bne.n	e078 <__swbuf_r+0x78>
    e01c:	686c      	ldr	r4, [r5, #4]
    e01e:	69a3      	ldr	r3, [r4, #24]
    e020:	60a3      	str	r3, [r4, #8]
    e022:	89a3      	ldrh	r3, [r4, #12]
    e024:	071b      	lsls	r3, r3, #28
    e026:	d531      	bpl.n	e08c <__swbuf_r+0x8c>
    e028:	6923      	ldr	r3, [r4, #16]
    e02a:	2b00      	cmp	r3, #0
    e02c:	d02e      	beq.n	e08c <__swbuf_r+0x8c>
    e02e:	6823      	ldr	r3, [r4, #0]
    e030:	6922      	ldr	r2, [r4, #16]
    e032:	b2f7      	uxtb	r7, r6
    e034:	1a98      	subs	r0, r3, r2
    e036:	6963      	ldr	r3, [r4, #20]
    e038:	b2f6      	uxtb	r6, r6
    e03a:	4298      	cmp	r0, r3
    e03c:	db05      	blt.n	e04a <__swbuf_r+0x4a>
    e03e:	0021      	movs	r1, r4
    e040:	0028      	movs	r0, r5
    e042:	f000 f933 	bl	e2ac <_fflush_r>
    e046:	2800      	cmp	r0, #0
    e048:	d126      	bne.n	e098 <__swbuf_r+0x98>
    e04a:	68a3      	ldr	r3, [r4, #8]
    e04c:	3001      	adds	r0, #1
    e04e:	3b01      	subs	r3, #1
    e050:	60a3      	str	r3, [r4, #8]
    e052:	6823      	ldr	r3, [r4, #0]
    e054:	1c5a      	adds	r2, r3, #1
    e056:	6022      	str	r2, [r4, #0]
    e058:	701f      	strb	r7, [r3, #0]
    e05a:	6963      	ldr	r3, [r4, #20]
    e05c:	4298      	cmp	r0, r3
    e05e:	d004      	beq.n	e06a <__swbuf_r+0x6a>
    e060:	89a3      	ldrh	r3, [r4, #12]
    e062:	07db      	lsls	r3, r3, #31
    e064:	d51a      	bpl.n	e09c <__swbuf_r+0x9c>
    e066:	2e0a      	cmp	r6, #10
    e068:	d118      	bne.n	e09c <__swbuf_r+0x9c>
    e06a:	0021      	movs	r1, r4
    e06c:	0028      	movs	r0, r5
    e06e:	f000 f91d 	bl	e2ac <_fflush_r>
    e072:	2800      	cmp	r0, #0
    e074:	d012      	beq.n	e09c <__swbuf_r+0x9c>
    e076:	e00f      	b.n	e098 <__swbuf_r+0x98>
    e078:	4b0a      	ldr	r3, [pc, #40]	; (e0a4 <__swbuf_r+0xa4>)
    e07a:	429c      	cmp	r4, r3
    e07c:	d101      	bne.n	e082 <__swbuf_r+0x82>
    e07e:	68ac      	ldr	r4, [r5, #8]
    e080:	e7cd      	b.n	e01e <__swbuf_r+0x1e>
    e082:	4b09      	ldr	r3, [pc, #36]	; (e0a8 <__swbuf_r+0xa8>)
    e084:	429c      	cmp	r4, r3
    e086:	d1ca      	bne.n	e01e <__swbuf_r+0x1e>
    e088:	68ec      	ldr	r4, [r5, #12]
    e08a:	e7c8      	b.n	e01e <__swbuf_r+0x1e>
    e08c:	0021      	movs	r1, r4
    e08e:	0028      	movs	r0, r5
    e090:	f000 f80c 	bl	e0ac <__swsetup_r>
    e094:	2800      	cmp	r0, #0
    e096:	d0ca      	beq.n	e02e <__swbuf_r+0x2e>
    e098:	2601      	movs	r6, #1
    e09a:	4276      	negs	r6, r6
    e09c:	0030      	movs	r0, r6
    e09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e0a0:	0000f3a0 	.word	0x0000f3a0
    e0a4:	0000f3c0 	.word	0x0000f3c0
    e0a8:	0000f380 	.word	0x0000f380

0000e0ac <__swsetup_r>:
    e0ac:	4b36      	ldr	r3, [pc, #216]	; (e188 <__swsetup_r+0xdc>)
    e0ae:	b570      	push	{r4, r5, r6, lr}
    e0b0:	681d      	ldr	r5, [r3, #0]
    e0b2:	0006      	movs	r6, r0
    e0b4:	000c      	movs	r4, r1
    e0b6:	2d00      	cmp	r5, #0
    e0b8:	d005      	beq.n	e0c6 <__swsetup_r+0x1a>
    e0ba:	69ab      	ldr	r3, [r5, #24]
    e0bc:	2b00      	cmp	r3, #0
    e0be:	d102      	bne.n	e0c6 <__swsetup_r+0x1a>
    e0c0:	0028      	movs	r0, r5
    e0c2:	f000 f961 	bl	e388 <__sinit>
    e0c6:	4b31      	ldr	r3, [pc, #196]	; (e18c <__swsetup_r+0xe0>)
    e0c8:	429c      	cmp	r4, r3
    e0ca:	d10f      	bne.n	e0ec <__swsetup_r+0x40>
    e0cc:	686c      	ldr	r4, [r5, #4]
    e0ce:	230c      	movs	r3, #12
    e0d0:	5ee2      	ldrsh	r2, [r4, r3]
    e0d2:	b293      	uxth	r3, r2
    e0d4:	0719      	lsls	r1, r3, #28
    e0d6:	d42d      	bmi.n	e134 <__swsetup_r+0x88>
    e0d8:	06d9      	lsls	r1, r3, #27
    e0da:	d411      	bmi.n	e100 <__swsetup_r+0x54>
    e0dc:	2309      	movs	r3, #9
    e0de:	2001      	movs	r0, #1
    e0e0:	6033      	str	r3, [r6, #0]
    e0e2:	3337      	adds	r3, #55	; 0x37
    e0e4:	4313      	orrs	r3, r2
    e0e6:	81a3      	strh	r3, [r4, #12]
    e0e8:	4240      	negs	r0, r0
    e0ea:	bd70      	pop	{r4, r5, r6, pc}
    e0ec:	4b28      	ldr	r3, [pc, #160]	; (e190 <__swsetup_r+0xe4>)
    e0ee:	429c      	cmp	r4, r3
    e0f0:	d101      	bne.n	e0f6 <__swsetup_r+0x4a>
    e0f2:	68ac      	ldr	r4, [r5, #8]
    e0f4:	e7eb      	b.n	e0ce <__swsetup_r+0x22>
    e0f6:	4b27      	ldr	r3, [pc, #156]	; (e194 <__swsetup_r+0xe8>)
    e0f8:	429c      	cmp	r4, r3
    e0fa:	d1e8      	bne.n	e0ce <__swsetup_r+0x22>
    e0fc:	68ec      	ldr	r4, [r5, #12]
    e0fe:	e7e6      	b.n	e0ce <__swsetup_r+0x22>
    e100:	075b      	lsls	r3, r3, #29
    e102:	d513      	bpl.n	e12c <__swsetup_r+0x80>
    e104:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e106:	2900      	cmp	r1, #0
    e108:	d008      	beq.n	e11c <__swsetup_r+0x70>
    e10a:	0023      	movs	r3, r4
    e10c:	3344      	adds	r3, #68	; 0x44
    e10e:	4299      	cmp	r1, r3
    e110:	d002      	beq.n	e118 <__swsetup_r+0x6c>
    e112:	0030      	movs	r0, r6
    e114:	f7ff fdd4 	bl	dcc0 <_free_r>
    e118:	2300      	movs	r3, #0
    e11a:	6363      	str	r3, [r4, #52]	; 0x34
    e11c:	2224      	movs	r2, #36	; 0x24
    e11e:	89a3      	ldrh	r3, [r4, #12]
    e120:	4393      	bics	r3, r2
    e122:	81a3      	strh	r3, [r4, #12]
    e124:	2300      	movs	r3, #0
    e126:	6063      	str	r3, [r4, #4]
    e128:	6923      	ldr	r3, [r4, #16]
    e12a:	6023      	str	r3, [r4, #0]
    e12c:	2308      	movs	r3, #8
    e12e:	89a2      	ldrh	r2, [r4, #12]
    e130:	4313      	orrs	r3, r2
    e132:	81a3      	strh	r3, [r4, #12]
    e134:	6923      	ldr	r3, [r4, #16]
    e136:	2b00      	cmp	r3, #0
    e138:	d10b      	bne.n	e152 <__swsetup_r+0xa6>
    e13a:	21a0      	movs	r1, #160	; 0xa0
    e13c:	2280      	movs	r2, #128	; 0x80
    e13e:	89a3      	ldrh	r3, [r4, #12]
    e140:	0089      	lsls	r1, r1, #2
    e142:	0092      	lsls	r2, r2, #2
    e144:	400b      	ands	r3, r1
    e146:	4293      	cmp	r3, r2
    e148:	d003      	beq.n	e152 <__swsetup_r+0xa6>
    e14a:	0021      	movs	r1, r4
    e14c:	0030      	movs	r0, r6
    e14e:	f000 f9d9 	bl	e504 <__smakebuf_r>
    e152:	2301      	movs	r3, #1
    e154:	89a2      	ldrh	r2, [r4, #12]
    e156:	4013      	ands	r3, r2
    e158:	d011      	beq.n	e17e <__swsetup_r+0xd2>
    e15a:	2300      	movs	r3, #0
    e15c:	60a3      	str	r3, [r4, #8]
    e15e:	6963      	ldr	r3, [r4, #20]
    e160:	425b      	negs	r3, r3
    e162:	61a3      	str	r3, [r4, #24]
    e164:	2000      	movs	r0, #0
    e166:	6923      	ldr	r3, [r4, #16]
    e168:	4283      	cmp	r3, r0
    e16a:	d1be      	bne.n	e0ea <__swsetup_r+0x3e>
    e16c:	230c      	movs	r3, #12
    e16e:	5ee2      	ldrsh	r2, [r4, r3]
    e170:	0613      	lsls	r3, r2, #24
    e172:	d5ba      	bpl.n	e0ea <__swsetup_r+0x3e>
    e174:	2340      	movs	r3, #64	; 0x40
    e176:	4313      	orrs	r3, r2
    e178:	81a3      	strh	r3, [r4, #12]
    e17a:	3801      	subs	r0, #1
    e17c:	e7b5      	b.n	e0ea <__swsetup_r+0x3e>
    e17e:	0792      	lsls	r2, r2, #30
    e180:	d400      	bmi.n	e184 <__swsetup_r+0xd8>
    e182:	6963      	ldr	r3, [r4, #20]
    e184:	60a3      	str	r3, [r4, #8]
    e186:	e7ed      	b.n	e164 <__swsetup_r+0xb8>
    e188:	20000120 	.word	0x20000120
    e18c:	0000f3a0 	.word	0x0000f3a0
    e190:	0000f3c0 	.word	0x0000f3c0
    e194:	0000f380 	.word	0x0000f380

0000e198 <__sflush_r>:
    e198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e19a:	898a      	ldrh	r2, [r1, #12]
    e19c:	0005      	movs	r5, r0
    e19e:	000c      	movs	r4, r1
    e1a0:	0713      	lsls	r3, r2, #28
    e1a2:	d460      	bmi.n	e266 <__sflush_r+0xce>
    e1a4:	684b      	ldr	r3, [r1, #4]
    e1a6:	2b00      	cmp	r3, #0
    e1a8:	dc04      	bgt.n	e1b4 <__sflush_r+0x1c>
    e1aa:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    e1ac:	2b00      	cmp	r3, #0
    e1ae:	dc01      	bgt.n	e1b4 <__sflush_r+0x1c>
    e1b0:	2000      	movs	r0, #0
    e1b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e1b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    e1b6:	2f00      	cmp	r7, #0
    e1b8:	d0fa      	beq.n	e1b0 <__sflush_r+0x18>
    e1ba:	2300      	movs	r3, #0
    e1bc:	682e      	ldr	r6, [r5, #0]
    e1be:	602b      	str	r3, [r5, #0]
    e1c0:	2380      	movs	r3, #128	; 0x80
    e1c2:	015b      	lsls	r3, r3, #5
    e1c4:	401a      	ands	r2, r3
    e1c6:	d034      	beq.n	e232 <__sflush_r+0x9a>
    e1c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    e1ca:	89a3      	ldrh	r3, [r4, #12]
    e1cc:	075b      	lsls	r3, r3, #29
    e1ce:	d506      	bpl.n	e1de <__sflush_r+0x46>
    e1d0:	6863      	ldr	r3, [r4, #4]
    e1d2:	1ac0      	subs	r0, r0, r3
    e1d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e1d6:	2b00      	cmp	r3, #0
    e1d8:	d001      	beq.n	e1de <__sflush_r+0x46>
    e1da:	6c23      	ldr	r3, [r4, #64]	; 0x40
    e1dc:	1ac0      	subs	r0, r0, r3
    e1de:	0002      	movs	r2, r0
    e1e0:	6a21      	ldr	r1, [r4, #32]
    e1e2:	2300      	movs	r3, #0
    e1e4:	0028      	movs	r0, r5
    e1e6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    e1e8:	47b8      	blx	r7
    e1ea:	89a1      	ldrh	r1, [r4, #12]
    e1ec:	1c43      	adds	r3, r0, #1
    e1ee:	d106      	bne.n	e1fe <__sflush_r+0x66>
    e1f0:	682b      	ldr	r3, [r5, #0]
    e1f2:	2b1d      	cmp	r3, #29
    e1f4:	d831      	bhi.n	e25a <__sflush_r+0xc2>
    e1f6:	4a2c      	ldr	r2, [pc, #176]	; (e2a8 <__sflush_r+0x110>)
    e1f8:	40da      	lsrs	r2, r3
    e1fa:	07d3      	lsls	r3, r2, #31
    e1fc:	d52d      	bpl.n	e25a <__sflush_r+0xc2>
    e1fe:	2300      	movs	r3, #0
    e200:	6063      	str	r3, [r4, #4]
    e202:	6923      	ldr	r3, [r4, #16]
    e204:	6023      	str	r3, [r4, #0]
    e206:	04cb      	lsls	r3, r1, #19
    e208:	d505      	bpl.n	e216 <__sflush_r+0x7e>
    e20a:	1c43      	adds	r3, r0, #1
    e20c:	d102      	bne.n	e214 <__sflush_r+0x7c>
    e20e:	682b      	ldr	r3, [r5, #0]
    e210:	2b00      	cmp	r3, #0
    e212:	d100      	bne.n	e216 <__sflush_r+0x7e>
    e214:	6560      	str	r0, [r4, #84]	; 0x54
    e216:	6b61      	ldr	r1, [r4, #52]	; 0x34
    e218:	602e      	str	r6, [r5, #0]
    e21a:	2900      	cmp	r1, #0
    e21c:	d0c8      	beq.n	e1b0 <__sflush_r+0x18>
    e21e:	0023      	movs	r3, r4
    e220:	3344      	adds	r3, #68	; 0x44
    e222:	4299      	cmp	r1, r3
    e224:	d002      	beq.n	e22c <__sflush_r+0x94>
    e226:	0028      	movs	r0, r5
    e228:	f7ff fd4a 	bl	dcc0 <_free_r>
    e22c:	2000      	movs	r0, #0
    e22e:	6360      	str	r0, [r4, #52]	; 0x34
    e230:	e7bf      	b.n	e1b2 <__sflush_r+0x1a>
    e232:	2301      	movs	r3, #1
    e234:	6a21      	ldr	r1, [r4, #32]
    e236:	0028      	movs	r0, r5
    e238:	47b8      	blx	r7
    e23a:	1c43      	adds	r3, r0, #1
    e23c:	d1c5      	bne.n	e1ca <__sflush_r+0x32>
    e23e:	682b      	ldr	r3, [r5, #0]
    e240:	2b00      	cmp	r3, #0
    e242:	d0c2      	beq.n	e1ca <__sflush_r+0x32>
    e244:	2b1d      	cmp	r3, #29
    e246:	d001      	beq.n	e24c <__sflush_r+0xb4>
    e248:	2b16      	cmp	r3, #22
    e24a:	d101      	bne.n	e250 <__sflush_r+0xb8>
    e24c:	602e      	str	r6, [r5, #0]
    e24e:	e7af      	b.n	e1b0 <__sflush_r+0x18>
    e250:	2340      	movs	r3, #64	; 0x40
    e252:	89a2      	ldrh	r2, [r4, #12]
    e254:	4313      	orrs	r3, r2
    e256:	81a3      	strh	r3, [r4, #12]
    e258:	e7ab      	b.n	e1b2 <__sflush_r+0x1a>
    e25a:	2340      	movs	r3, #64	; 0x40
    e25c:	430b      	orrs	r3, r1
    e25e:	2001      	movs	r0, #1
    e260:	81a3      	strh	r3, [r4, #12]
    e262:	4240      	negs	r0, r0
    e264:	e7a5      	b.n	e1b2 <__sflush_r+0x1a>
    e266:	690f      	ldr	r7, [r1, #16]
    e268:	2f00      	cmp	r7, #0
    e26a:	d0a1      	beq.n	e1b0 <__sflush_r+0x18>
    e26c:	680b      	ldr	r3, [r1, #0]
    e26e:	600f      	str	r7, [r1, #0]
    e270:	1bdb      	subs	r3, r3, r7
    e272:	9301      	str	r3, [sp, #4]
    e274:	2300      	movs	r3, #0
    e276:	0792      	lsls	r2, r2, #30
    e278:	d100      	bne.n	e27c <__sflush_r+0xe4>
    e27a:	694b      	ldr	r3, [r1, #20]
    e27c:	60a3      	str	r3, [r4, #8]
    e27e:	9b01      	ldr	r3, [sp, #4]
    e280:	2b00      	cmp	r3, #0
    e282:	dc00      	bgt.n	e286 <__sflush_r+0xee>
    e284:	e794      	b.n	e1b0 <__sflush_r+0x18>
    e286:	9b01      	ldr	r3, [sp, #4]
    e288:	003a      	movs	r2, r7
    e28a:	6a21      	ldr	r1, [r4, #32]
    e28c:	0028      	movs	r0, r5
    e28e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    e290:	47b0      	blx	r6
    e292:	2800      	cmp	r0, #0
    e294:	dc03      	bgt.n	e29e <__sflush_r+0x106>
    e296:	2340      	movs	r3, #64	; 0x40
    e298:	89a2      	ldrh	r2, [r4, #12]
    e29a:	4313      	orrs	r3, r2
    e29c:	e7df      	b.n	e25e <__sflush_r+0xc6>
    e29e:	9b01      	ldr	r3, [sp, #4]
    e2a0:	183f      	adds	r7, r7, r0
    e2a2:	1a1b      	subs	r3, r3, r0
    e2a4:	9301      	str	r3, [sp, #4]
    e2a6:	e7ea      	b.n	e27e <__sflush_r+0xe6>
    e2a8:	20400001 	.word	0x20400001

0000e2ac <_fflush_r>:
    e2ac:	690b      	ldr	r3, [r1, #16]
    e2ae:	b570      	push	{r4, r5, r6, lr}
    e2b0:	0005      	movs	r5, r0
    e2b2:	000c      	movs	r4, r1
    e2b4:	2b00      	cmp	r3, #0
    e2b6:	d101      	bne.n	e2bc <_fflush_r+0x10>
    e2b8:	2000      	movs	r0, #0
    e2ba:	bd70      	pop	{r4, r5, r6, pc}
    e2bc:	2800      	cmp	r0, #0
    e2be:	d004      	beq.n	e2ca <_fflush_r+0x1e>
    e2c0:	6983      	ldr	r3, [r0, #24]
    e2c2:	2b00      	cmp	r3, #0
    e2c4:	d101      	bne.n	e2ca <_fflush_r+0x1e>
    e2c6:	f000 f85f 	bl	e388 <__sinit>
    e2ca:	4b0b      	ldr	r3, [pc, #44]	; (e2f8 <_fflush_r+0x4c>)
    e2cc:	429c      	cmp	r4, r3
    e2ce:	d109      	bne.n	e2e4 <_fflush_r+0x38>
    e2d0:	686c      	ldr	r4, [r5, #4]
    e2d2:	220c      	movs	r2, #12
    e2d4:	5ea3      	ldrsh	r3, [r4, r2]
    e2d6:	2b00      	cmp	r3, #0
    e2d8:	d0ee      	beq.n	e2b8 <_fflush_r+0xc>
    e2da:	0021      	movs	r1, r4
    e2dc:	0028      	movs	r0, r5
    e2de:	f7ff ff5b 	bl	e198 <__sflush_r>
    e2e2:	e7ea      	b.n	e2ba <_fflush_r+0xe>
    e2e4:	4b05      	ldr	r3, [pc, #20]	; (e2fc <_fflush_r+0x50>)
    e2e6:	429c      	cmp	r4, r3
    e2e8:	d101      	bne.n	e2ee <_fflush_r+0x42>
    e2ea:	68ac      	ldr	r4, [r5, #8]
    e2ec:	e7f1      	b.n	e2d2 <_fflush_r+0x26>
    e2ee:	4b04      	ldr	r3, [pc, #16]	; (e300 <_fflush_r+0x54>)
    e2f0:	429c      	cmp	r4, r3
    e2f2:	d1ee      	bne.n	e2d2 <_fflush_r+0x26>
    e2f4:	68ec      	ldr	r4, [r5, #12]
    e2f6:	e7ec      	b.n	e2d2 <_fflush_r+0x26>
    e2f8:	0000f3a0 	.word	0x0000f3a0
    e2fc:	0000f3c0 	.word	0x0000f3c0
    e300:	0000f380 	.word	0x0000f380

0000e304 <_cleanup_r>:
    e304:	b510      	push	{r4, lr}
    e306:	4902      	ldr	r1, [pc, #8]	; (e310 <_cleanup_r+0xc>)
    e308:	f000 f8b2 	bl	e470 <_fwalk_reent>
    e30c:	bd10      	pop	{r4, pc}
    e30e:	46c0      	nop			; (mov r8, r8)
    e310:	0000e2ad 	.word	0x0000e2ad

0000e314 <std.isra.0>:
    e314:	2300      	movs	r3, #0
    e316:	b510      	push	{r4, lr}
    e318:	0004      	movs	r4, r0
    e31a:	6003      	str	r3, [r0, #0]
    e31c:	6043      	str	r3, [r0, #4]
    e31e:	6083      	str	r3, [r0, #8]
    e320:	8181      	strh	r1, [r0, #12]
    e322:	6643      	str	r3, [r0, #100]	; 0x64
    e324:	81c2      	strh	r2, [r0, #14]
    e326:	6103      	str	r3, [r0, #16]
    e328:	6143      	str	r3, [r0, #20]
    e32a:	6183      	str	r3, [r0, #24]
    e32c:	0019      	movs	r1, r3
    e32e:	2208      	movs	r2, #8
    e330:	305c      	adds	r0, #92	; 0x5c
    e332:	f7ff fcbc 	bl	dcae <memset>
    e336:	4b05      	ldr	r3, [pc, #20]	; (e34c <std.isra.0+0x38>)
    e338:	6224      	str	r4, [r4, #32]
    e33a:	6263      	str	r3, [r4, #36]	; 0x24
    e33c:	4b04      	ldr	r3, [pc, #16]	; (e350 <std.isra.0+0x3c>)
    e33e:	62a3      	str	r3, [r4, #40]	; 0x28
    e340:	4b04      	ldr	r3, [pc, #16]	; (e354 <std.isra.0+0x40>)
    e342:	62e3      	str	r3, [r4, #44]	; 0x2c
    e344:	4b04      	ldr	r3, [pc, #16]	; (e358 <std.isra.0+0x44>)
    e346:	6323      	str	r3, [r4, #48]	; 0x30
    e348:	bd10      	pop	{r4, pc}
    e34a:	46c0      	nop			; (mov r8, r8)
    e34c:	0000eb1d 	.word	0x0000eb1d
    e350:	0000eb45 	.word	0x0000eb45
    e354:	0000eb7d 	.word	0x0000eb7d
    e358:	0000eba9 	.word	0x0000eba9

0000e35c <__sfmoreglue>:
    e35c:	b570      	push	{r4, r5, r6, lr}
    e35e:	2568      	movs	r5, #104	; 0x68
    e360:	1e4a      	subs	r2, r1, #1
    e362:	4355      	muls	r5, r2
    e364:	000e      	movs	r6, r1
    e366:	0029      	movs	r1, r5
    e368:	3174      	adds	r1, #116	; 0x74
    e36a:	f7ff fcf3 	bl	dd54 <_malloc_r>
    e36e:	1e04      	subs	r4, r0, #0
    e370:	d008      	beq.n	e384 <__sfmoreglue+0x28>
    e372:	2100      	movs	r1, #0
    e374:	002a      	movs	r2, r5
    e376:	6001      	str	r1, [r0, #0]
    e378:	6046      	str	r6, [r0, #4]
    e37a:	300c      	adds	r0, #12
    e37c:	60a0      	str	r0, [r4, #8]
    e37e:	3268      	adds	r2, #104	; 0x68
    e380:	f7ff fc95 	bl	dcae <memset>
    e384:	0020      	movs	r0, r4
    e386:	bd70      	pop	{r4, r5, r6, pc}

0000e388 <__sinit>:
    e388:	6983      	ldr	r3, [r0, #24]
    e38a:	b513      	push	{r0, r1, r4, lr}
    e38c:	0004      	movs	r4, r0
    e38e:	2b00      	cmp	r3, #0
    e390:	d128      	bne.n	e3e4 <__sinit+0x5c>
    e392:	6483      	str	r3, [r0, #72]	; 0x48
    e394:	64c3      	str	r3, [r0, #76]	; 0x4c
    e396:	6503      	str	r3, [r0, #80]	; 0x50
    e398:	4b13      	ldr	r3, [pc, #76]	; (e3e8 <__sinit+0x60>)
    e39a:	4a14      	ldr	r2, [pc, #80]	; (e3ec <__sinit+0x64>)
    e39c:	681b      	ldr	r3, [r3, #0]
    e39e:	6282      	str	r2, [r0, #40]	; 0x28
    e3a0:	9301      	str	r3, [sp, #4]
    e3a2:	4298      	cmp	r0, r3
    e3a4:	d101      	bne.n	e3aa <__sinit+0x22>
    e3a6:	2301      	movs	r3, #1
    e3a8:	6183      	str	r3, [r0, #24]
    e3aa:	0020      	movs	r0, r4
    e3ac:	f000 f820 	bl	e3f0 <__sfp>
    e3b0:	6060      	str	r0, [r4, #4]
    e3b2:	0020      	movs	r0, r4
    e3b4:	f000 f81c 	bl	e3f0 <__sfp>
    e3b8:	60a0      	str	r0, [r4, #8]
    e3ba:	0020      	movs	r0, r4
    e3bc:	f000 f818 	bl	e3f0 <__sfp>
    e3c0:	2200      	movs	r2, #0
    e3c2:	60e0      	str	r0, [r4, #12]
    e3c4:	2104      	movs	r1, #4
    e3c6:	6860      	ldr	r0, [r4, #4]
    e3c8:	f7ff ffa4 	bl	e314 <std.isra.0>
    e3cc:	2201      	movs	r2, #1
    e3ce:	2109      	movs	r1, #9
    e3d0:	68a0      	ldr	r0, [r4, #8]
    e3d2:	f7ff ff9f 	bl	e314 <std.isra.0>
    e3d6:	2202      	movs	r2, #2
    e3d8:	2112      	movs	r1, #18
    e3da:	68e0      	ldr	r0, [r4, #12]
    e3dc:	f7ff ff9a 	bl	e314 <std.isra.0>
    e3e0:	2301      	movs	r3, #1
    e3e2:	61a3      	str	r3, [r4, #24]
    e3e4:	bd13      	pop	{r0, r1, r4, pc}
    e3e6:	46c0      	nop			; (mov r8, r8)
    e3e8:	0000f37c 	.word	0x0000f37c
    e3ec:	0000e305 	.word	0x0000e305

0000e3f0 <__sfp>:
    e3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3f2:	4b1e      	ldr	r3, [pc, #120]	; (e46c <__sfp+0x7c>)
    e3f4:	0007      	movs	r7, r0
    e3f6:	681e      	ldr	r6, [r3, #0]
    e3f8:	69b3      	ldr	r3, [r6, #24]
    e3fa:	2b00      	cmp	r3, #0
    e3fc:	d102      	bne.n	e404 <__sfp+0x14>
    e3fe:	0030      	movs	r0, r6
    e400:	f7ff ffc2 	bl	e388 <__sinit>
    e404:	3648      	adds	r6, #72	; 0x48
    e406:	68b4      	ldr	r4, [r6, #8]
    e408:	6873      	ldr	r3, [r6, #4]
    e40a:	3b01      	subs	r3, #1
    e40c:	d504      	bpl.n	e418 <__sfp+0x28>
    e40e:	6833      	ldr	r3, [r6, #0]
    e410:	2b00      	cmp	r3, #0
    e412:	d007      	beq.n	e424 <__sfp+0x34>
    e414:	6836      	ldr	r6, [r6, #0]
    e416:	e7f6      	b.n	e406 <__sfp+0x16>
    e418:	220c      	movs	r2, #12
    e41a:	5ea5      	ldrsh	r5, [r4, r2]
    e41c:	2d00      	cmp	r5, #0
    e41e:	d00d      	beq.n	e43c <__sfp+0x4c>
    e420:	3468      	adds	r4, #104	; 0x68
    e422:	e7f2      	b.n	e40a <__sfp+0x1a>
    e424:	2104      	movs	r1, #4
    e426:	0038      	movs	r0, r7
    e428:	f7ff ff98 	bl	e35c <__sfmoreglue>
    e42c:	6030      	str	r0, [r6, #0]
    e42e:	2800      	cmp	r0, #0
    e430:	d1f0      	bne.n	e414 <__sfp+0x24>
    e432:	230c      	movs	r3, #12
    e434:	0004      	movs	r4, r0
    e436:	603b      	str	r3, [r7, #0]
    e438:	0020      	movs	r0, r4
    e43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e43c:	2301      	movs	r3, #1
    e43e:	0020      	movs	r0, r4
    e440:	425b      	negs	r3, r3
    e442:	81e3      	strh	r3, [r4, #14]
    e444:	3302      	adds	r3, #2
    e446:	81a3      	strh	r3, [r4, #12]
    e448:	6665      	str	r5, [r4, #100]	; 0x64
    e44a:	6025      	str	r5, [r4, #0]
    e44c:	60a5      	str	r5, [r4, #8]
    e44e:	6065      	str	r5, [r4, #4]
    e450:	6125      	str	r5, [r4, #16]
    e452:	6165      	str	r5, [r4, #20]
    e454:	61a5      	str	r5, [r4, #24]
    e456:	2208      	movs	r2, #8
    e458:	0029      	movs	r1, r5
    e45a:	305c      	adds	r0, #92	; 0x5c
    e45c:	f7ff fc27 	bl	dcae <memset>
    e460:	6365      	str	r5, [r4, #52]	; 0x34
    e462:	63a5      	str	r5, [r4, #56]	; 0x38
    e464:	64a5      	str	r5, [r4, #72]	; 0x48
    e466:	64e5      	str	r5, [r4, #76]	; 0x4c
    e468:	e7e6      	b.n	e438 <__sfp+0x48>
    e46a:	46c0      	nop			; (mov r8, r8)
    e46c:	0000f37c 	.word	0x0000f37c

0000e470 <_fwalk_reent>:
    e470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e472:	0004      	movs	r4, r0
    e474:	0007      	movs	r7, r0
    e476:	2600      	movs	r6, #0
    e478:	9101      	str	r1, [sp, #4]
    e47a:	3448      	adds	r4, #72	; 0x48
    e47c:	2c00      	cmp	r4, #0
    e47e:	d101      	bne.n	e484 <_fwalk_reent+0x14>
    e480:	0030      	movs	r0, r6
    e482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e484:	6863      	ldr	r3, [r4, #4]
    e486:	68a5      	ldr	r5, [r4, #8]
    e488:	9300      	str	r3, [sp, #0]
    e48a:	9b00      	ldr	r3, [sp, #0]
    e48c:	3b01      	subs	r3, #1
    e48e:	9300      	str	r3, [sp, #0]
    e490:	d501      	bpl.n	e496 <_fwalk_reent+0x26>
    e492:	6824      	ldr	r4, [r4, #0]
    e494:	e7f2      	b.n	e47c <_fwalk_reent+0xc>
    e496:	89ab      	ldrh	r3, [r5, #12]
    e498:	2b01      	cmp	r3, #1
    e49a:	d908      	bls.n	e4ae <_fwalk_reent+0x3e>
    e49c:	220e      	movs	r2, #14
    e49e:	5eab      	ldrsh	r3, [r5, r2]
    e4a0:	3301      	adds	r3, #1
    e4a2:	d004      	beq.n	e4ae <_fwalk_reent+0x3e>
    e4a4:	0029      	movs	r1, r5
    e4a6:	0038      	movs	r0, r7
    e4a8:	9b01      	ldr	r3, [sp, #4]
    e4aa:	4798      	blx	r3
    e4ac:	4306      	orrs	r6, r0
    e4ae:	3568      	adds	r5, #104	; 0x68
    e4b0:	e7eb      	b.n	e48a <_fwalk_reent+0x1a>
	...

0000e4b4 <__swhatbuf_r>:
    e4b4:	b570      	push	{r4, r5, r6, lr}
    e4b6:	000e      	movs	r6, r1
    e4b8:	001d      	movs	r5, r3
    e4ba:	230e      	movs	r3, #14
    e4bc:	5ec9      	ldrsh	r1, [r1, r3]
    e4be:	b090      	sub	sp, #64	; 0x40
    e4c0:	0014      	movs	r4, r2
    e4c2:	2900      	cmp	r1, #0
    e4c4:	da07      	bge.n	e4d6 <__swhatbuf_r+0x22>
    e4c6:	2300      	movs	r3, #0
    e4c8:	602b      	str	r3, [r5, #0]
    e4ca:	89b3      	ldrh	r3, [r6, #12]
    e4cc:	061b      	lsls	r3, r3, #24
    e4ce:	d411      	bmi.n	e4f4 <__swhatbuf_r+0x40>
    e4d0:	2380      	movs	r3, #128	; 0x80
    e4d2:	00db      	lsls	r3, r3, #3
    e4d4:	e00f      	b.n	e4f6 <__swhatbuf_r+0x42>
    e4d6:	aa01      	add	r2, sp, #4
    e4d8:	f000 fb92 	bl	ec00 <_fstat_r>
    e4dc:	2800      	cmp	r0, #0
    e4de:	dbf2      	blt.n	e4c6 <__swhatbuf_r+0x12>
    e4e0:	22f0      	movs	r2, #240	; 0xf0
    e4e2:	9b02      	ldr	r3, [sp, #8]
    e4e4:	0212      	lsls	r2, r2, #8
    e4e6:	4013      	ands	r3, r2
    e4e8:	4a05      	ldr	r2, [pc, #20]	; (e500 <__swhatbuf_r+0x4c>)
    e4ea:	189b      	adds	r3, r3, r2
    e4ec:	425a      	negs	r2, r3
    e4ee:	4153      	adcs	r3, r2
    e4f0:	602b      	str	r3, [r5, #0]
    e4f2:	e7ed      	b.n	e4d0 <__swhatbuf_r+0x1c>
    e4f4:	2340      	movs	r3, #64	; 0x40
    e4f6:	2000      	movs	r0, #0
    e4f8:	6023      	str	r3, [r4, #0]
    e4fa:	b010      	add	sp, #64	; 0x40
    e4fc:	bd70      	pop	{r4, r5, r6, pc}
    e4fe:	46c0      	nop			; (mov r8, r8)
    e500:	ffffe000 	.word	0xffffe000

0000e504 <__smakebuf_r>:
    e504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e506:	2602      	movs	r6, #2
    e508:	898b      	ldrh	r3, [r1, #12]
    e50a:	0005      	movs	r5, r0
    e50c:	000c      	movs	r4, r1
    e50e:	4233      	tst	r3, r6
    e510:	d006      	beq.n	e520 <__smakebuf_r+0x1c>
    e512:	0023      	movs	r3, r4
    e514:	3347      	adds	r3, #71	; 0x47
    e516:	6023      	str	r3, [r4, #0]
    e518:	6123      	str	r3, [r4, #16]
    e51a:	2301      	movs	r3, #1
    e51c:	6163      	str	r3, [r4, #20]
    e51e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    e520:	ab01      	add	r3, sp, #4
    e522:	466a      	mov	r2, sp
    e524:	f7ff ffc6 	bl	e4b4 <__swhatbuf_r>
    e528:	9900      	ldr	r1, [sp, #0]
    e52a:	0007      	movs	r7, r0
    e52c:	0028      	movs	r0, r5
    e52e:	f7ff fc11 	bl	dd54 <_malloc_r>
    e532:	2800      	cmp	r0, #0
    e534:	d106      	bne.n	e544 <__smakebuf_r+0x40>
    e536:	220c      	movs	r2, #12
    e538:	5ea3      	ldrsh	r3, [r4, r2]
    e53a:	059a      	lsls	r2, r3, #22
    e53c:	d4ef      	bmi.n	e51e <__smakebuf_r+0x1a>
    e53e:	431e      	orrs	r6, r3
    e540:	81a6      	strh	r6, [r4, #12]
    e542:	e7e6      	b.n	e512 <__smakebuf_r+0xe>
    e544:	4b0d      	ldr	r3, [pc, #52]	; (e57c <__smakebuf_r+0x78>)
    e546:	62ab      	str	r3, [r5, #40]	; 0x28
    e548:	2380      	movs	r3, #128	; 0x80
    e54a:	89a2      	ldrh	r2, [r4, #12]
    e54c:	6020      	str	r0, [r4, #0]
    e54e:	4313      	orrs	r3, r2
    e550:	81a3      	strh	r3, [r4, #12]
    e552:	9b00      	ldr	r3, [sp, #0]
    e554:	6120      	str	r0, [r4, #16]
    e556:	6163      	str	r3, [r4, #20]
    e558:	9b01      	ldr	r3, [sp, #4]
    e55a:	2b00      	cmp	r3, #0
    e55c:	d00a      	beq.n	e574 <__smakebuf_r+0x70>
    e55e:	230e      	movs	r3, #14
    e560:	5ee1      	ldrsh	r1, [r4, r3]
    e562:	0028      	movs	r0, r5
    e564:	f000 fb5e 	bl	ec24 <_isatty_r>
    e568:	2800      	cmp	r0, #0
    e56a:	d003      	beq.n	e574 <__smakebuf_r+0x70>
    e56c:	2301      	movs	r3, #1
    e56e:	89a2      	ldrh	r2, [r4, #12]
    e570:	4313      	orrs	r3, r2
    e572:	81a3      	strh	r3, [r4, #12]
    e574:	89a0      	ldrh	r0, [r4, #12]
    e576:	4338      	orrs	r0, r7
    e578:	81a0      	strh	r0, [r4, #12]
    e57a:	e7d0      	b.n	e51e <__smakebuf_r+0x1a>
    e57c:	0000e305 	.word	0x0000e305

0000e580 <__malloc_lock>:
    e580:	4770      	bx	lr

0000e582 <__malloc_unlock>:
    e582:	4770      	bx	lr

0000e584 <__sfputc_r>:
    e584:	6893      	ldr	r3, [r2, #8]
    e586:	b510      	push	{r4, lr}
    e588:	3b01      	subs	r3, #1
    e58a:	6093      	str	r3, [r2, #8]
    e58c:	2b00      	cmp	r3, #0
    e58e:	da05      	bge.n	e59c <__sfputc_r+0x18>
    e590:	6994      	ldr	r4, [r2, #24]
    e592:	42a3      	cmp	r3, r4
    e594:	db08      	blt.n	e5a8 <__sfputc_r+0x24>
    e596:	b2cb      	uxtb	r3, r1
    e598:	2b0a      	cmp	r3, #10
    e59a:	d005      	beq.n	e5a8 <__sfputc_r+0x24>
    e59c:	6813      	ldr	r3, [r2, #0]
    e59e:	1c58      	adds	r0, r3, #1
    e5a0:	6010      	str	r0, [r2, #0]
    e5a2:	7019      	strb	r1, [r3, #0]
    e5a4:	b2c8      	uxtb	r0, r1
    e5a6:	bd10      	pop	{r4, pc}
    e5a8:	f7ff fd2a 	bl	e000 <__swbuf_r>
    e5ac:	e7fb      	b.n	e5a6 <__sfputc_r+0x22>

0000e5ae <__sfputs_r>:
    e5ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e5b0:	0006      	movs	r6, r0
    e5b2:	000f      	movs	r7, r1
    e5b4:	0014      	movs	r4, r2
    e5b6:	18d5      	adds	r5, r2, r3
    e5b8:	42ac      	cmp	r4, r5
    e5ba:	d101      	bne.n	e5c0 <__sfputs_r+0x12>
    e5bc:	2000      	movs	r0, #0
    e5be:	e007      	b.n	e5d0 <__sfputs_r+0x22>
    e5c0:	7821      	ldrb	r1, [r4, #0]
    e5c2:	003a      	movs	r2, r7
    e5c4:	0030      	movs	r0, r6
    e5c6:	f7ff ffdd 	bl	e584 <__sfputc_r>
    e5ca:	3401      	adds	r4, #1
    e5cc:	1c43      	adds	r3, r0, #1
    e5ce:	d1f3      	bne.n	e5b8 <__sfputs_r+0xa>
    e5d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000e5d4 <_vfiprintf_r>:
    e5d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5d6:	b09f      	sub	sp, #124	; 0x7c
    e5d8:	0006      	movs	r6, r0
    e5da:	000f      	movs	r7, r1
    e5dc:	0014      	movs	r4, r2
    e5de:	9305      	str	r3, [sp, #20]
    e5e0:	2800      	cmp	r0, #0
    e5e2:	d004      	beq.n	e5ee <_vfiprintf_r+0x1a>
    e5e4:	6983      	ldr	r3, [r0, #24]
    e5e6:	2b00      	cmp	r3, #0
    e5e8:	d101      	bne.n	e5ee <_vfiprintf_r+0x1a>
    e5ea:	f7ff fecd 	bl	e388 <__sinit>
    e5ee:	4b7f      	ldr	r3, [pc, #508]	; (e7ec <_vfiprintf_r+0x218>)
    e5f0:	429f      	cmp	r7, r3
    e5f2:	d15c      	bne.n	e6ae <_vfiprintf_r+0xda>
    e5f4:	6877      	ldr	r7, [r6, #4]
    e5f6:	89bb      	ldrh	r3, [r7, #12]
    e5f8:	071b      	lsls	r3, r3, #28
    e5fa:	d562      	bpl.n	e6c2 <_vfiprintf_r+0xee>
    e5fc:	693b      	ldr	r3, [r7, #16]
    e5fe:	2b00      	cmp	r3, #0
    e600:	d05f      	beq.n	e6c2 <_vfiprintf_r+0xee>
    e602:	2300      	movs	r3, #0
    e604:	ad06      	add	r5, sp, #24
    e606:	616b      	str	r3, [r5, #20]
    e608:	3320      	adds	r3, #32
    e60a:	766b      	strb	r3, [r5, #25]
    e60c:	3310      	adds	r3, #16
    e60e:	76ab      	strb	r3, [r5, #26]
    e610:	9402      	str	r4, [sp, #8]
    e612:	9c02      	ldr	r4, [sp, #8]
    e614:	7823      	ldrb	r3, [r4, #0]
    e616:	2b00      	cmp	r3, #0
    e618:	d15d      	bne.n	e6d6 <_vfiprintf_r+0x102>
    e61a:	9b02      	ldr	r3, [sp, #8]
    e61c:	1ae3      	subs	r3, r4, r3
    e61e:	9304      	str	r3, [sp, #16]
    e620:	d00d      	beq.n	e63e <_vfiprintf_r+0x6a>
    e622:	9b04      	ldr	r3, [sp, #16]
    e624:	9a02      	ldr	r2, [sp, #8]
    e626:	0039      	movs	r1, r7
    e628:	0030      	movs	r0, r6
    e62a:	f7ff ffc0 	bl	e5ae <__sfputs_r>
    e62e:	1c43      	adds	r3, r0, #1
    e630:	d100      	bne.n	e634 <_vfiprintf_r+0x60>
    e632:	e0cc      	b.n	e7ce <_vfiprintf_r+0x1fa>
    e634:	696a      	ldr	r2, [r5, #20]
    e636:	9b04      	ldr	r3, [sp, #16]
    e638:	4694      	mov	ip, r2
    e63a:	4463      	add	r3, ip
    e63c:	616b      	str	r3, [r5, #20]
    e63e:	7823      	ldrb	r3, [r4, #0]
    e640:	2b00      	cmp	r3, #0
    e642:	d100      	bne.n	e646 <_vfiprintf_r+0x72>
    e644:	e0c3      	b.n	e7ce <_vfiprintf_r+0x1fa>
    e646:	2201      	movs	r2, #1
    e648:	2300      	movs	r3, #0
    e64a:	4252      	negs	r2, r2
    e64c:	606a      	str	r2, [r5, #4]
    e64e:	a902      	add	r1, sp, #8
    e650:	3254      	adds	r2, #84	; 0x54
    e652:	1852      	adds	r2, r2, r1
    e654:	3401      	adds	r4, #1
    e656:	602b      	str	r3, [r5, #0]
    e658:	60eb      	str	r3, [r5, #12]
    e65a:	60ab      	str	r3, [r5, #8]
    e65c:	7013      	strb	r3, [r2, #0]
    e65e:	65ab      	str	r3, [r5, #88]	; 0x58
    e660:	7821      	ldrb	r1, [r4, #0]
    e662:	2205      	movs	r2, #5
    e664:	4862      	ldr	r0, [pc, #392]	; (e7f0 <_vfiprintf_r+0x21c>)
    e666:	f000 fb03 	bl	ec70 <memchr>
    e66a:	1c63      	adds	r3, r4, #1
    e66c:	469c      	mov	ip, r3
    e66e:	2800      	cmp	r0, #0
    e670:	d135      	bne.n	e6de <_vfiprintf_r+0x10a>
    e672:	6829      	ldr	r1, [r5, #0]
    e674:	06cb      	lsls	r3, r1, #27
    e676:	d504      	bpl.n	e682 <_vfiprintf_r+0xae>
    e678:	2353      	movs	r3, #83	; 0x53
    e67a:	aa02      	add	r2, sp, #8
    e67c:	3020      	adds	r0, #32
    e67e:	189b      	adds	r3, r3, r2
    e680:	7018      	strb	r0, [r3, #0]
    e682:	070b      	lsls	r3, r1, #28
    e684:	d504      	bpl.n	e690 <_vfiprintf_r+0xbc>
    e686:	2353      	movs	r3, #83	; 0x53
    e688:	202b      	movs	r0, #43	; 0x2b
    e68a:	aa02      	add	r2, sp, #8
    e68c:	189b      	adds	r3, r3, r2
    e68e:	7018      	strb	r0, [r3, #0]
    e690:	7823      	ldrb	r3, [r4, #0]
    e692:	2b2a      	cmp	r3, #42	; 0x2a
    e694:	d02c      	beq.n	e6f0 <_vfiprintf_r+0x11c>
    e696:	2000      	movs	r0, #0
    e698:	210a      	movs	r1, #10
    e69a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    e69c:	7822      	ldrb	r2, [r4, #0]
    e69e:	3a30      	subs	r2, #48	; 0x30
    e6a0:	2a09      	cmp	r2, #9
    e6a2:	d800      	bhi.n	e6a6 <_vfiprintf_r+0xd2>
    e6a4:	e06b      	b.n	e77e <_vfiprintf_r+0x1aa>
    e6a6:	2800      	cmp	r0, #0
    e6a8:	d02a      	beq.n	e700 <_vfiprintf_r+0x12c>
    e6aa:	9309      	str	r3, [sp, #36]	; 0x24
    e6ac:	e028      	b.n	e700 <_vfiprintf_r+0x12c>
    e6ae:	4b51      	ldr	r3, [pc, #324]	; (e7f4 <_vfiprintf_r+0x220>)
    e6b0:	429f      	cmp	r7, r3
    e6b2:	d101      	bne.n	e6b8 <_vfiprintf_r+0xe4>
    e6b4:	68b7      	ldr	r7, [r6, #8]
    e6b6:	e79e      	b.n	e5f6 <_vfiprintf_r+0x22>
    e6b8:	4b4f      	ldr	r3, [pc, #316]	; (e7f8 <_vfiprintf_r+0x224>)
    e6ba:	429f      	cmp	r7, r3
    e6bc:	d19b      	bne.n	e5f6 <_vfiprintf_r+0x22>
    e6be:	68f7      	ldr	r7, [r6, #12]
    e6c0:	e799      	b.n	e5f6 <_vfiprintf_r+0x22>
    e6c2:	0039      	movs	r1, r7
    e6c4:	0030      	movs	r0, r6
    e6c6:	f7ff fcf1 	bl	e0ac <__swsetup_r>
    e6ca:	2800      	cmp	r0, #0
    e6cc:	d099      	beq.n	e602 <_vfiprintf_r+0x2e>
    e6ce:	2001      	movs	r0, #1
    e6d0:	4240      	negs	r0, r0
    e6d2:	b01f      	add	sp, #124	; 0x7c
    e6d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6d6:	2b25      	cmp	r3, #37	; 0x25
    e6d8:	d09f      	beq.n	e61a <_vfiprintf_r+0x46>
    e6da:	3401      	adds	r4, #1
    e6dc:	e79a      	b.n	e614 <_vfiprintf_r+0x40>
    e6de:	4b44      	ldr	r3, [pc, #272]	; (e7f0 <_vfiprintf_r+0x21c>)
    e6e0:	6829      	ldr	r1, [r5, #0]
    e6e2:	1ac0      	subs	r0, r0, r3
    e6e4:	2301      	movs	r3, #1
    e6e6:	4083      	lsls	r3, r0
    e6e8:	430b      	orrs	r3, r1
    e6ea:	602b      	str	r3, [r5, #0]
    e6ec:	4664      	mov	r4, ip
    e6ee:	e7b7      	b.n	e660 <_vfiprintf_r+0x8c>
    e6f0:	9b05      	ldr	r3, [sp, #20]
    e6f2:	1d18      	adds	r0, r3, #4
    e6f4:	681b      	ldr	r3, [r3, #0]
    e6f6:	9005      	str	r0, [sp, #20]
    e6f8:	2b00      	cmp	r3, #0
    e6fa:	db3a      	blt.n	e772 <_vfiprintf_r+0x19e>
    e6fc:	9309      	str	r3, [sp, #36]	; 0x24
    e6fe:	4664      	mov	r4, ip
    e700:	7823      	ldrb	r3, [r4, #0]
    e702:	2b2e      	cmp	r3, #46	; 0x2e
    e704:	d10b      	bne.n	e71e <_vfiprintf_r+0x14a>
    e706:	7863      	ldrb	r3, [r4, #1]
    e708:	1c62      	adds	r2, r4, #1
    e70a:	2b2a      	cmp	r3, #42	; 0x2a
    e70c:	d13f      	bne.n	e78e <_vfiprintf_r+0x1ba>
    e70e:	9b05      	ldr	r3, [sp, #20]
    e710:	3402      	adds	r4, #2
    e712:	1d1a      	adds	r2, r3, #4
    e714:	681b      	ldr	r3, [r3, #0]
    e716:	9205      	str	r2, [sp, #20]
    e718:	2b00      	cmp	r3, #0
    e71a:	db35      	blt.n	e788 <_vfiprintf_r+0x1b4>
    e71c:	9307      	str	r3, [sp, #28]
    e71e:	7821      	ldrb	r1, [r4, #0]
    e720:	2203      	movs	r2, #3
    e722:	4836      	ldr	r0, [pc, #216]	; (e7fc <_vfiprintf_r+0x228>)
    e724:	f000 faa4 	bl	ec70 <memchr>
    e728:	2800      	cmp	r0, #0
    e72a:	d007      	beq.n	e73c <_vfiprintf_r+0x168>
    e72c:	4b33      	ldr	r3, [pc, #204]	; (e7fc <_vfiprintf_r+0x228>)
    e72e:	682a      	ldr	r2, [r5, #0]
    e730:	1ac0      	subs	r0, r0, r3
    e732:	2340      	movs	r3, #64	; 0x40
    e734:	4083      	lsls	r3, r0
    e736:	4313      	orrs	r3, r2
    e738:	602b      	str	r3, [r5, #0]
    e73a:	3401      	adds	r4, #1
    e73c:	7821      	ldrb	r1, [r4, #0]
    e73e:	1c63      	adds	r3, r4, #1
    e740:	2206      	movs	r2, #6
    e742:	482f      	ldr	r0, [pc, #188]	; (e800 <_vfiprintf_r+0x22c>)
    e744:	9302      	str	r3, [sp, #8]
    e746:	7629      	strb	r1, [r5, #24]
    e748:	f000 fa92 	bl	ec70 <memchr>
    e74c:	2800      	cmp	r0, #0
    e74e:	d044      	beq.n	e7da <_vfiprintf_r+0x206>
    e750:	4b2c      	ldr	r3, [pc, #176]	; (e804 <_vfiprintf_r+0x230>)
    e752:	2b00      	cmp	r3, #0
    e754:	d12f      	bne.n	e7b6 <_vfiprintf_r+0x1e2>
    e756:	6829      	ldr	r1, [r5, #0]
    e758:	9b05      	ldr	r3, [sp, #20]
    e75a:	2207      	movs	r2, #7
    e75c:	05c9      	lsls	r1, r1, #23
    e75e:	d528      	bpl.n	e7b2 <_vfiprintf_r+0x1de>
    e760:	189b      	adds	r3, r3, r2
    e762:	4393      	bics	r3, r2
    e764:	3308      	adds	r3, #8
    e766:	9305      	str	r3, [sp, #20]
    e768:	696b      	ldr	r3, [r5, #20]
    e76a:	9a03      	ldr	r2, [sp, #12]
    e76c:	189b      	adds	r3, r3, r2
    e76e:	616b      	str	r3, [r5, #20]
    e770:	e74f      	b.n	e612 <_vfiprintf_r+0x3e>
    e772:	425b      	negs	r3, r3
    e774:	60eb      	str	r3, [r5, #12]
    e776:	2302      	movs	r3, #2
    e778:	430b      	orrs	r3, r1
    e77a:	602b      	str	r3, [r5, #0]
    e77c:	e7bf      	b.n	e6fe <_vfiprintf_r+0x12a>
    e77e:	434b      	muls	r3, r1
    e780:	3401      	adds	r4, #1
    e782:	189b      	adds	r3, r3, r2
    e784:	2001      	movs	r0, #1
    e786:	e789      	b.n	e69c <_vfiprintf_r+0xc8>
    e788:	2301      	movs	r3, #1
    e78a:	425b      	negs	r3, r3
    e78c:	e7c6      	b.n	e71c <_vfiprintf_r+0x148>
    e78e:	2300      	movs	r3, #0
    e790:	0014      	movs	r4, r2
    e792:	200a      	movs	r0, #10
    e794:	001a      	movs	r2, r3
    e796:	606b      	str	r3, [r5, #4]
    e798:	7821      	ldrb	r1, [r4, #0]
    e79a:	3930      	subs	r1, #48	; 0x30
    e79c:	2909      	cmp	r1, #9
    e79e:	d903      	bls.n	e7a8 <_vfiprintf_r+0x1d4>
    e7a0:	2b00      	cmp	r3, #0
    e7a2:	d0bc      	beq.n	e71e <_vfiprintf_r+0x14a>
    e7a4:	9207      	str	r2, [sp, #28]
    e7a6:	e7ba      	b.n	e71e <_vfiprintf_r+0x14a>
    e7a8:	4342      	muls	r2, r0
    e7aa:	3401      	adds	r4, #1
    e7ac:	1852      	adds	r2, r2, r1
    e7ae:	2301      	movs	r3, #1
    e7b0:	e7f2      	b.n	e798 <_vfiprintf_r+0x1c4>
    e7b2:	3307      	adds	r3, #7
    e7b4:	e7d5      	b.n	e762 <_vfiprintf_r+0x18e>
    e7b6:	ab05      	add	r3, sp, #20
    e7b8:	9300      	str	r3, [sp, #0]
    e7ba:	003a      	movs	r2, r7
    e7bc:	4b12      	ldr	r3, [pc, #72]	; (e808 <_vfiprintf_r+0x234>)
    e7be:	0029      	movs	r1, r5
    e7c0:	0030      	movs	r0, r6
    e7c2:	e000      	b.n	e7c6 <_vfiprintf_r+0x1f2>
    e7c4:	bf00      	nop
    e7c6:	9003      	str	r0, [sp, #12]
    e7c8:	9b03      	ldr	r3, [sp, #12]
    e7ca:	3301      	adds	r3, #1
    e7cc:	d1cc      	bne.n	e768 <_vfiprintf_r+0x194>
    e7ce:	89bb      	ldrh	r3, [r7, #12]
    e7d0:	065b      	lsls	r3, r3, #25
    e7d2:	d500      	bpl.n	e7d6 <_vfiprintf_r+0x202>
    e7d4:	e77b      	b.n	e6ce <_vfiprintf_r+0xfa>
    e7d6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e7d8:	e77b      	b.n	e6d2 <_vfiprintf_r+0xfe>
    e7da:	ab05      	add	r3, sp, #20
    e7dc:	9300      	str	r3, [sp, #0]
    e7de:	003a      	movs	r2, r7
    e7e0:	4b09      	ldr	r3, [pc, #36]	; (e808 <_vfiprintf_r+0x234>)
    e7e2:	0029      	movs	r1, r5
    e7e4:	0030      	movs	r0, r6
    e7e6:	f000 f87f 	bl	e8e8 <_printf_i>
    e7ea:	e7ec      	b.n	e7c6 <_vfiprintf_r+0x1f2>
    e7ec:	0000f3a0 	.word	0x0000f3a0
    e7f0:	0000f3e0 	.word	0x0000f3e0
    e7f4:	0000f3c0 	.word	0x0000f3c0
    e7f8:	0000f380 	.word	0x0000f380
    e7fc:	0000f3e6 	.word	0x0000f3e6
    e800:	0000f3ea 	.word	0x0000f3ea
    e804:	00000000 	.word	0x00000000
    e808:	0000e5af 	.word	0x0000e5af

0000e80c <_printf_common>:
    e80c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    e80e:	0015      	movs	r5, r2
    e810:	9301      	str	r3, [sp, #4]
    e812:	688a      	ldr	r2, [r1, #8]
    e814:	690b      	ldr	r3, [r1, #16]
    e816:	9000      	str	r0, [sp, #0]
    e818:	000c      	movs	r4, r1
    e81a:	4293      	cmp	r3, r2
    e81c:	da00      	bge.n	e820 <_printf_common+0x14>
    e81e:	0013      	movs	r3, r2
    e820:	0022      	movs	r2, r4
    e822:	602b      	str	r3, [r5, #0]
    e824:	3243      	adds	r2, #67	; 0x43
    e826:	7812      	ldrb	r2, [r2, #0]
    e828:	2a00      	cmp	r2, #0
    e82a:	d001      	beq.n	e830 <_printf_common+0x24>
    e82c:	3301      	adds	r3, #1
    e82e:	602b      	str	r3, [r5, #0]
    e830:	6823      	ldr	r3, [r4, #0]
    e832:	069b      	lsls	r3, r3, #26
    e834:	d502      	bpl.n	e83c <_printf_common+0x30>
    e836:	682b      	ldr	r3, [r5, #0]
    e838:	3302      	adds	r3, #2
    e83a:	602b      	str	r3, [r5, #0]
    e83c:	2706      	movs	r7, #6
    e83e:	6823      	ldr	r3, [r4, #0]
    e840:	401f      	ands	r7, r3
    e842:	d027      	beq.n	e894 <_printf_common+0x88>
    e844:	0023      	movs	r3, r4
    e846:	3343      	adds	r3, #67	; 0x43
    e848:	781b      	ldrb	r3, [r3, #0]
    e84a:	1e5a      	subs	r2, r3, #1
    e84c:	4193      	sbcs	r3, r2
    e84e:	6822      	ldr	r2, [r4, #0]
    e850:	0692      	lsls	r2, r2, #26
    e852:	d430      	bmi.n	e8b6 <_printf_common+0xaa>
    e854:	0022      	movs	r2, r4
    e856:	9901      	ldr	r1, [sp, #4]
    e858:	3243      	adds	r2, #67	; 0x43
    e85a:	9800      	ldr	r0, [sp, #0]
    e85c:	9e08      	ldr	r6, [sp, #32]
    e85e:	47b0      	blx	r6
    e860:	1c43      	adds	r3, r0, #1
    e862:	d025      	beq.n	e8b0 <_printf_common+0xa4>
    e864:	2306      	movs	r3, #6
    e866:	6820      	ldr	r0, [r4, #0]
    e868:	682a      	ldr	r2, [r5, #0]
    e86a:	68e1      	ldr	r1, [r4, #12]
    e86c:	4003      	ands	r3, r0
    e86e:	2500      	movs	r5, #0
    e870:	2b04      	cmp	r3, #4
    e872:	d103      	bne.n	e87c <_printf_common+0x70>
    e874:	1a8d      	subs	r5, r1, r2
    e876:	43eb      	mvns	r3, r5
    e878:	17db      	asrs	r3, r3, #31
    e87a:	401d      	ands	r5, r3
    e87c:	68a3      	ldr	r3, [r4, #8]
    e87e:	6922      	ldr	r2, [r4, #16]
    e880:	4293      	cmp	r3, r2
    e882:	dd01      	ble.n	e888 <_printf_common+0x7c>
    e884:	1a9b      	subs	r3, r3, r2
    e886:	18ed      	adds	r5, r5, r3
    e888:	2700      	movs	r7, #0
    e88a:	42bd      	cmp	r5, r7
    e88c:	d120      	bne.n	e8d0 <_printf_common+0xc4>
    e88e:	2000      	movs	r0, #0
    e890:	e010      	b.n	e8b4 <_printf_common+0xa8>
    e892:	3701      	adds	r7, #1
    e894:	68e3      	ldr	r3, [r4, #12]
    e896:	682a      	ldr	r2, [r5, #0]
    e898:	1a9b      	subs	r3, r3, r2
    e89a:	429f      	cmp	r7, r3
    e89c:	dad2      	bge.n	e844 <_printf_common+0x38>
    e89e:	0022      	movs	r2, r4
    e8a0:	2301      	movs	r3, #1
    e8a2:	3219      	adds	r2, #25
    e8a4:	9901      	ldr	r1, [sp, #4]
    e8a6:	9800      	ldr	r0, [sp, #0]
    e8a8:	9e08      	ldr	r6, [sp, #32]
    e8aa:	47b0      	blx	r6
    e8ac:	1c43      	adds	r3, r0, #1
    e8ae:	d1f0      	bne.n	e892 <_printf_common+0x86>
    e8b0:	2001      	movs	r0, #1
    e8b2:	4240      	negs	r0, r0
    e8b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e8b6:	2030      	movs	r0, #48	; 0x30
    e8b8:	18e1      	adds	r1, r4, r3
    e8ba:	3143      	adds	r1, #67	; 0x43
    e8bc:	7008      	strb	r0, [r1, #0]
    e8be:	0021      	movs	r1, r4
    e8c0:	1c5a      	adds	r2, r3, #1
    e8c2:	3145      	adds	r1, #69	; 0x45
    e8c4:	7809      	ldrb	r1, [r1, #0]
    e8c6:	18a2      	adds	r2, r4, r2
    e8c8:	3243      	adds	r2, #67	; 0x43
    e8ca:	3302      	adds	r3, #2
    e8cc:	7011      	strb	r1, [r2, #0]
    e8ce:	e7c1      	b.n	e854 <_printf_common+0x48>
    e8d0:	0022      	movs	r2, r4
    e8d2:	2301      	movs	r3, #1
    e8d4:	321a      	adds	r2, #26
    e8d6:	9901      	ldr	r1, [sp, #4]
    e8d8:	9800      	ldr	r0, [sp, #0]
    e8da:	9e08      	ldr	r6, [sp, #32]
    e8dc:	47b0      	blx	r6
    e8de:	1c43      	adds	r3, r0, #1
    e8e0:	d0e6      	beq.n	e8b0 <_printf_common+0xa4>
    e8e2:	3701      	adds	r7, #1
    e8e4:	e7d1      	b.n	e88a <_printf_common+0x7e>
	...

0000e8e8 <_printf_i>:
    e8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8ea:	b08b      	sub	sp, #44	; 0x2c
    e8ec:	9206      	str	r2, [sp, #24]
    e8ee:	000a      	movs	r2, r1
    e8f0:	3243      	adds	r2, #67	; 0x43
    e8f2:	9307      	str	r3, [sp, #28]
    e8f4:	9005      	str	r0, [sp, #20]
    e8f6:	9204      	str	r2, [sp, #16]
    e8f8:	7e0a      	ldrb	r2, [r1, #24]
    e8fa:	000c      	movs	r4, r1
    e8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e8fe:	2a6e      	cmp	r2, #110	; 0x6e
    e900:	d100      	bne.n	e904 <_printf_i+0x1c>
    e902:	e08f      	b.n	ea24 <_printf_i+0x13c>
    e904:	d817      	bhi.n	e936 <_printf_i+0x4e>
    e906:	2a63      	cmp	r2, #99	; 0x63
    e908:	d02c      	beq.n	e964 <_printf_i+0x7c>
    e90a:	d808      	bhi.n	e91e <_printf_i+0x36>
    e90c:	2a00      	cmp	r2, #0
    e90e:	d100      	bne.n	e912 <_printf_i+0x2a>
    e910:	e099      	b.n	ea46 <_printf_i+0x15e>
    e912:	2a58      	cmp	r2, #88	; 0x58
    e914:	d054      	beq.n	e9c0 <_printf_i+0xd8>
    e916:	0026      	movs	r6, r4
    e918:	3642      	adds	r6, #66	; 0x42
    e91a:	7032      	strb	r2, [r6, #0]
    e91c:	e029      	b.n	e972 <_printf_i+0x8a>
    e91e:	2a64      	cmp	r2, #100	; 0x64
    e920:	d001      	beq.n	e926 <_printf_i+0x3e>
    e922:	2a69      	cmp	r2, #105	; 0x69
    e924:	d1f7      	bne.n	e916 <_printf_i+0x2e>
    e926:	6821      	ldr	r1, [r4, #0]
    e928:	681a      	ldr	r2, [r3, #0]
    e92a:	0608      	lsls	r0, r1, #24
    e92c:	d523      	bpl.n	e976 <_printf_i+0x8e>
    e92e:	1d11      	adds	r1, r2, #4
    e930:	6019      	str	r1, [r3, #0]
    e932:	6815      	ldr	r5, [r2, #0]
    e934:	e025      	b.n	e982 <_printf_i+0x9a>
    e936:	2a73      	cmp	r2, #115	; 0x73
    e938:	d100      	bne.n	e93c <_printf_i+0x54>
    e93a:	e088      	b.n	ea4e <_printf_i+0x166>
    e93c:	d808      	bhi.n	e950 <_printf_i+0x68>
    e93e:	2a6f      	cmp	r2, #111	; 0x6f
    e940:	d029      	beq.n	e996 <_printf_i+0xae>
    e942:	2a70      	cmp	r2, #112	; 0x70
    e944:	d1e7      	bne.n	e916 <_printf_i+0x2e>
    e946:	2220      	movs	r2, #32
    e948:	6809      	ldr	r1, [r1, #0]
    e94a:	430a      	orrs	r2, r1
    e94c:	6022      	str	r2, [r4, #0]
    e94e:	e003      	b.n	e958 <_printf_i+0x70>
    e950:	2a75      	cmp	r2, #117	; 0x75
    e952:	d020      	beq.n	e996 <_printf_i+0xae>
    e954:	2a78      	cmp	r2, #120	; 0x78
    e956:	d1de      	bne.n	e916 <_printf_i+0x2e>
    e958:	0022      	movs	r2, r4
    e95a:	2178      	movs	r1, #120	; 0x78
    e95c:	3245      	adds	r2, #69	; 0x45
    e95e:	7011      	strb	r1, [r2, #0]
    e960:	4a6c      	ldr	r2, [pc, #432]	; (eb14 <_printf_i+0x22c>)
    e962:	e030      	b.n	e9c6 <_printf_i+0xde>
    e964:	000e      	movs	r6, r1
    e966:	681a      	ldr	r2, [r3, #0]
    e968:	3642      	adds	r6, #66	; 0x42
    e96a:	1d11      	adds	r1, r2, #4
    e96c:	6019      	str	r1, [r3, #0]
    e96e:	6813      	ldr	r3, [r2, #0]
    e970:	7033      	strb	r3, [r6, #0]
    e972:	2301      	movs	r3, #1
    e974:	e079      	b.n	ea6a <_printf_i+0x182>
    e976:	0649      	lsls	r1, r1, #25
    e978:	d5d9      	bpl.n	e92e <_printf_i+0x46>
    e97a:	1d11      	adds	r1, r2, #4
    e97c:	6019      	str	r1, [r3, #0]
    e97e:	2300      	movs	r3, #0
    e980:	5ed5      	ldrsh	r5, [r2, r3]
    e982:	2d00      	cmp	r5, #0
    e984:	da03      	bge.n	e98e <_printf_i+0xa6>
    e986:	232d      	movs	r3, #45	; 0x2d
    e988:	9a04      	ldr	r2, [sp, #16]
    e98a:	426d      	negs	r5, r5
    e98c:	7013      	strb	r3, [r2, #0]
    e98e:	4b62      	ldr	r3, [pc, #392]	; (eb18 <_printf_i+0x230>)
    e990:	270a      	movs	r7, #10
    e992:	9303      	str	r3, [sp, #12]
    e994:	e02f      	b.n	e9f6 <_printf_i+0x10e>
    e996:	6820      	ldr	r0, [r4, #0]
    e998:	6819      	ldr	r1, [r3, #0]
    e99a:	0605      	lsls	r5, r0, #24
    e99c:	d503      	bpl.n	e9a6 <_printf_i+0xbe>
    e99e:	1d08      	adds	r0, r1, #4
    e9a0:	6018      	str	r0, [r3, #0]
    e9a2:	680d      	ldr	r5, [r1, #0]
    e9a4:	e005      	b.n	e9b2 <_printf_i+0xca>
    e9a6:	0640      	lsls	r0, r0, #25
    e9a8:	d5f9      	bpl.n	e99e <_printf_i+0xb6>
    e9aa:	680d      	ldr	r5, [r1, #0]
    e9ac:	1d08      	adds	r0, r1, #4
    e9ae:	6018      	str	r0, [r3, #0]
    e9b0:	b2ad      	uxth	r5, r5
    e9b2:	4b59      	ldr	r3, [pc, #356]	; (eb18 <_printf_i+0x230>)
    e9b4:	2708      	movs	r7, #8
    e9b6:	9303      	str	r3, [sp, #12]
    e9b8:	2a6f      	cmp	r2, #111	; 0x6f
    e9ba:	d018      	beq.n	e9ee <_printf_i+0x106>
    e9bc:	270a      	movs	r7, #10
    e9be:	e016      	b.n	e9ee <_printf_i+0x106>
    e9c0:	3145      	adds	r1, #69	; 0x45
    e9c2:	700a      	strb	r2, [r1, #0]
    e9c4:	4a54      	ldr	r2, [pc, #336]	; (eb18 <_printf_i+0x230>)
    e9c6:	9203      	str	r2, [sp, #12]
    e9c8:	681a      	ldr	r2, [r3, #0]
    e9ca:	6821      	ldr	r1, [r4, #0]
    e9cc:	1d10      	adds	r0, r2, #4
    e9ce:	6018      	str	r0, [r3, #0]
    e9d0:	6815      	ldr	r5, [r2, #0]
    e9d2:	0608      	lsls	r0, r1, #24
    e9d4:	d522      	bpl.n	ea1c <_printf_i+0x134>
    e9d6:	07cb      	lsls	r3, r1, #31
    e9d8:	d502      	bpl.n	e9e0 <_printf_i+0xf8>
    e9da:	2320      	movs	r3, #32
    e9dc:	4319      	orrs	r1, r3
    e9de:	6021      	str	r1, [r4, #0]
    e9e0:	2710      	movs	r7, #16
    e9e2:	2d00      	cmp	r5, #0
    e9e4:	d103      	bne.n	e9ee <_printf_i+0x106>
    e9e6:	2320      	movs	r3, #32
    e9e8:	6822      	ldr	r2, [r4, #0]
    e9ea:	439a      	bics	r2, r3
    e9ec:	6022      	str	r2, [r4, #0]
    e9ee:	0023      	movs	r3, r4
    e9f0:	2200      	movs	r2, #0
    e9f2:	3343      	adds	r3, #67	; 0x43
    e9f4:	701a      	strb	r2, [r3, #0]
    e9f6:	6863      	ldr	r3, [r4, #4]
    e9f8:	60a3      	str	r3, [r4, #8]
    e9fa:	2b00      	cmp	r3, #0
    e9fc:	db5c      	blt.n	eab8 <_printf_i+0x1d0>
    e9fe:	2204      	movs	r2, #4
    ea00:	6821      	ldr	r1, [r4, #0]
    ea02:	4391      	bics	r1, r2
    ea04:	6021      	str	r1, [r4, #0]
    ea06:	2d00      	cmp	r5, #0
    ea08:	d158      	bne.n	eabc <_printf_i+0x1d4>
    ea0a:	9e04      	ldr	r6, [sp, #16]
    ea0c:	2b00      	cmp	r3, #0
    ea0e:	d064      	beq.n	eada <_printf_i+0x1f2>
    ea10:	0026      	movs	r6, r4
    ea12:	9b03      	ldr	r3, [sp, #12]
    ea14:	3642      	adds	r6, #66	; 0x42
    ea16:	781b      	ldrb	r3, [r3, #0]
    ea18:	7033      	strb	r3, [r6, #0]
    ea1a:	e05e      	b.n	eada <_printf_i+0x1f2>
    ea1c:	0648      	lsls	r0, r1, #25
    ea1e:	d5da      	bpl.n	e9d6 <_printf_i+0xee>
    ea20:	b2ad      	uxth	r5, r5
    ea22:	e7d8      	b.n	e9d6 <_printf_i+0xee>
    ea24:	6809      	ldr	r1, [r1, #0]
    ea26:	681a      	ldr	r2, [r3, #0]
    ea28:	0608      	lsls	r0, r1, #24
    ea2a:	d505      	bpl.n	ea38 <_printf_i+0x150>
    ea2c:	1d11      	adds	r1, r2, #4
    ea2e:	6019      	str	r1, [r3, #0]
    ea30:	6813      	ldr	r3, [r2, #0]
    ea32:	6962      	ldr	r2, [r4, #20]
    ea34:	601a      	str	r2, [r3, #0]
    ea36:	e006      	b.n	ea46 <_printf_i+0x15e>
    ea38:	0649      	lsls	r1, r1, #25
    ea3a:	d5f7      	bpl.n	ea2c <_printf_i+0x144>
    ea3c:	1d11      	adds	r1, r2, #4
    ea3e:	6019      	str	r1, [r3, #0]
    ea40:	6813      	ldr	r3, [r2, #0]
    ea42:	8aa2      	ldrh	r2, [r4, #20]
    ea44:	801a      	strh	r2, [r3, #0]
    ea46:	2300      	movs	r3, #0
    ea48:	9e04      	ldr	r6, [sp, #16]
    ea4a:	6123      	str	r3, [r4, #16]
    ea4c:	e054      	b.n	eaf8 <_printf_i+0x210>
    ea4e:	681a      	ldr	r2, [r3, #0]
    ea50:	1d11      	adds	r1, r2, #4
    ea52:	6019      	str	r1, [r3, #0]
    ea54:	6816      	ldr	r6, [r2, #0]
    ea56:	2100      	movs	r1, #0
    ea58:	6862      	ldr	r2, [r4, #4]
    ea5a:	0030      	movs	r0, r6
    ea5c:	f000 f908 	bl	ec70 <memchr>
    ea60:	2800      	cmp	r0, #0
    ea62:	d001      	beq.n	ea68 <_printf_i+0x180>
    ea64:	1b80      	subs	r0, r0, r6
    ea66:	6060      	str	r0, [r4, #4]
    ea68:	6863      	ldr	r3, [r4, #4]
    ea6a:	6123      	str	r3, [r4, #16]
    ea6c:	2300      	movs	r3, #0
    ea6e:	9a04      	ldr	r2, [sp, #16]
    ea70:	7013      	strb	r3, [r2, #0]
    ea72:	e041      	b.n	eaf8 <_printf_i+0x210>
    ea74:	6923      	ldr	r3, [r4, #16]
    ea76:	0032      	movs	r2, r6
    ea78:	9906      	ldr	r1, [sp, #24]
    ea7a:	9805      	ldr	r0, [sp, #20]
    ea7c:	9d07      	ldr	r5, [sp, #28]
    ea7e:	47a8      	blx	r5
    ea80:	1c43      	adds	r3, r0, #1
    ea82:	d043      	beq.n	eb0c <_printf_i+0x224>
    ea84:	6823      	ldr	r3, [r4, #0]
    ea86:	2500      	movs	r5, #0
    ea88:	079b      	lsls	r3, r3, #30
    ea8a:	d40f      	bmi.n	eaac <_printf_i+0x1c4>
    ea8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ea8e:	68e0      	ldr	r0, [r4, #12]
    ea90:	4298      	cmp	r0, r3
    ea92:	da3d      	bge.n	eb10 <_printf_i+0x228>
    ea94:	0018      	movs	r0, r3
    ea96:	e03b      	b.n	eb10 <_printf_i+0x228>
    ea98:	0022      	movs	r2, r4
    ea9a:	2301      	movs	r3, #1
    ea9c:	3219      	adds	r2, #25
    ea9e:	9906      	ldr	r1, [sp, #24]
    eaa0:	9805      	ldr	r0, [sp, #20]
    eaa2:	9e07      	ldr	r6, [sp, #28]
    eaa4:	47b0      	blx	r6
    eaa6:	1c43      	adds	r3, r0, #1
    eaa8:	d030      	beq.n	eb0c <_printf_i+0x224>
    eaaa:	3501      	adds	r5, #1
    eaac:	68e3      	ldr	r3, [r4, #12]
    eaae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    eab0:	1a9b      	subs	r3, r3, r2
    eab2:	429d      	cmp	r5, r3
    eab4:	dbf0      	blt.n	ea98 <_printf_i+0x1b0>
    eab6:	e7e9      	b.n	ea8c <_printf_i+0x1a4>
    eab8:	2d00      	cmp	r5, #0
    eaba:	d0a9      	beq.n	ea10 <_printf_i+0x128>
    eabc:	9e04      	ldr	r6, [sp, #16]
    eabe:	0028      	movs	r0, r5
    eac0:	0039      	movs	r1, r7
    eac2:	f7fe ffad 	bl	da20 <__aeabi_uidivmod>
    eac6:	9b03      	ldr	r3, [sp, #12]
    eac8:	3e01      	subs	r6, #1
    eaca:	5c5b      	ldrb	r3, [r3, r1]
    eacc:	0028      	movs	r0, r5
    eace:	7033      	strb	r3, [r6, #0]
    ead0:	0039      	movs	r1, r7
    ead2:	f7fe ff1f 	bl	d914 <__udivsi3>
    ead6:	1e05      	subs	r5, r0, #0
    ead8:	d1f1      	bne.n	eabe <_printf_i+0x1d6>
    eada:	2f08      	cmp	r7, #8
    eadc:	d109      	bne.n	eaf2 <_printf_i+0x20a>
    eade:	6823      	ldr	r3, [r4, #0]
    eae0:	07db      	lsls	r3, r3, #31
    eae2:	d506      	bpl.n	eaf2 <_printf_i+0x20a>
    eae4:	6863      	ldr	r3, [r4, #4]
    eae6:	6922      	ldr	r2, [r4, #16]
    eae8:	4293      	cmp	r3, r2
    eaea:	dc02      	bgt.n	eaf2 <_printf_i+0x20a>
    eaec:	2330      	movs	r3, #48	; 0x30
    eaee:	3e01      	subs	r6, #1
    eaf0:	7033      	strb	r3, [r6, #0]
    eaf2:	9b04      	ldr	r3, [sp, #16]
    eaf4:	1b9b      	subs	r3, r3, r6
    eaf6:	6123      	str	r3, [r4, #16]
    eaf8:	9b07      	ldr	r3, [sp, #28]
    eafa:	aa09      	add	r2, sp, #36	; 0x24
    eafc:	9300      	str	r3, [sp, #0]
    eafe:	0021      	movs	r1, r4
    eb00:	9b06      	ldr	r3, [sp, #24]
    eb02:	9805      	ldr	r0, [sp, #20]
    eb04:	f7ff fe82 	bl	e80c <_printf_common>
    eb08:	1c43      	adds	r3, r0, #1
    eb0a:	d1b3      	bne.n	ea74 <_printf_i+0x18c>
    eb0c:	2001      	movs	r0, #1
    eb0e:	4240      	negs	r0, r0
    eb10:	b00b      	add	sp, #44	; 0x2c
    eb12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eb14:	0000f402 	.word	0x0000f402
    eb18:	0000f3f1 	.word	0x0000f3f1

0000eb1c <__sread>:
    eb1c:	b570      	push	{r4, r5, r6, lr}
    eb1e:	000c      	movs	r4, r1
    eb20:	250e      	movs	r5, #14
    eb22:	5f49      	ldrsh	r1, [r1, r5]
    eb24:	f000 f8b0 	bl	ec88 <_read_r>
    eb28:	2800      	cmp	r0, #0
    eb2a:	db03      	blt.n	eb34 <__sread+0x18>
    eb2c:	6d63      	ldr	r3, [r4, #84]	; 0x54
    eb2e:	181b      	adds	r3, r3, r0
    eb30:	6563      	str	r3, [r4, #84]	; 0x54
    eb32:	bd70      	pop	{r4, r5, r6, pc}
    eb34:	89a3      	ldrh	r3, [r4, #12]
    eb36:	4a02      	ldr	r2, [pc, #8]	; (eb40 <__sread+0x24>)
    eb38:	4013      	ands	r3, r2
    eb3a:	81a3      	strh	r3, [r4, #12]
    eb3c:	e7f9      	b.n	eb32 <__sread+0x16>
    eb3e:	46c0      	nop			; (mov r8, r8)
    eb40:	ffffefff 	.word	0xffffefff

0000eb44 <__swrite>:
    eb44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    eb46:	001f      	movs	r7, r3
    eb48:	898b      	ldrh	r3, [r1, #12]
    eb4a:	0005      	movs	r5, r0
    eb4c:	000c      	movs	r4, r1
    eb4e:	0016      	movs	r6, r2
    eb50:	05db      	lsls	r3, r3, #23
    eb52:	d505      	bpl.n	eb60 <__swrite+0x1c>
    eb54:	230e      	movs	r3, #14
    eb56:	5ec9      	ldrsh	r1, [r1, r3]
    eb58:	2200      	movs	r2, #0
    eb5a:	2302      	movs	r3, #2
    eb5c:	f000 f874 	bl	ec48 <_lseek_r>
    eb60:	89a3      	ldrh	r3, [r4, #12]
    eb62:	4a05      	ldr	r2, [pc, #20]	; (eb78 <__swrite+0x34>)
    eb64:	0028      	movs	r0, r5
    eb66:	4013      	ands	r3, r2
    eb68:	81a3      	strh	r3, [r4, #12]
    eb6a:	0032      	movs	r2, r6
    eb6c:	230e      	movs	r3, #14
    eb6e:	5ee1      	ldrsh	r1, [r4, r3]
    eb70:	003b      	movs	r3, r7
    eb72:	f000 f81f 	bl	ebb4 <_write_r>
    eb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    eb78:	ffffefff 	.word	0xffffefff

0000eb7c <__sseek>:
    eb7c:	b570      	push	{r4, r5, r6, lr}
    eb7e:	000c      	movs	r4, r1
    eb80:	250e      	movs	r5, #14
    eb82:	5f49      	ldrsh	r1, [r1, r5]
    eb84:	f000 f860 	bl	ec48 <_lseek_r>
    eb88:	89a3      	ldrh	r3, [r4, #12]
    eb8a:	1c42      	adds	r2, r0, #1
    eb8c:	d103      	bne.n	eb96 <__sseek+0x1a>
    eb8e:	4a05      	ldr	r2, [pc, #20]	; (eba4 <__sseek+0x28>)
    eb90:	4013      	ands	r3, r2
    eb92:	81a3      	strh	r3, [r4, #12]
    eb94:	bd70      	pop	{r4, r5, r6, pc}
    eb96:	2280      	movs	r2, #128	; 0x80
    eb98:	0152      	lsls	r2, r2, #5
    eb9a:	4313      	orrs	r3, r2
    eb9c:	81a3      	strh	r3, [r4, #12]
    eb9e:	6560      	str	r0, [r4, #84]	; 0x54
    eba0:	e7f8      	b.n	eb94 <__sseek+0x18>
    eba2:	46c0      	nop			; (mov r8, r8)
    eba4:	ffffefff 	.word	0xffffefff

0000eba8 <__sclose>:
    eba8:	b510      	push	{r4, lr}
    ebaa:	230e      	movs	r3, #14
    ebac:	5ec9      	ldrsh	r1, [r1, r3]
    ebae:	f000 f815 	bl	ebdc <_close_r>
    ebb2:	bd10      	pop	{r4, pc}

0000ebb4 <_write_r>:
    ebb4:	b570      	push	{r4, r5, r6, lr}
    ebb6:	0005      	movs	r5, r0
    ebb8:	0008      	movs	r0, r1
    ebba:	0011      	movs	r1, r2
    ebbc:	2200      	movs	r2, #0
    ebbe:	4c06      	ldr	r4, [pc, #24]	; (ebd8 <_write_r+0x24>)
    ebc0:	6022      	str	r2, [r4, #0]
    ebc2:	001a      	movs	r2, r3
    ebc4:	f7fe fe02 	bl	d7cc <_write>
    ebc8:	1c43      	adds	r3, r0, #1
    ebca:	d103      	bne.n	ebd4 <_write_r+0x20>
    ebcc:	6823      	ldr	r3, [r4, #0]
    ebce:	2b00      	cmp	r3, #0
    ebd0:	d000      	beq.n	ebd4 <_write_r+0x20>
    ebd2:	602b      	str	r3, [r5, #0]
    ebd4:	bd70      	pop	{r4, r5, r6, pc}
    ebd6:	46c0      	nop			; (mov r8, r8)
    ebd8:	20002b70 	.word	0x20002b70

0000ebdc <_close_r>:
    ebdc:	2300      	movs	r3, #0
    ebde:	b570      	push	{r4, r5, r6, lr}
    ebe0:	4c06      	ldr	r4, [pc, #24]	; (ebfc <_close_r+0x20>)
    ebe2:	0005      	movs	r5, r0
    ebe4:	0008      	movs	r0, r1
    ebe6:	6023      	str	r3, [r4, #0]
    ebe8:	f7fe fe5c 	bl	d8a4 <_close>
    ebec:	1c43      	adds	r3, r0, #1
    ebee:	d103      	bne.n	ebf8 <_close_r+0x1c>
    ebf0:	6823      	ldr	r3, [r4, #0]
    ebf2:	2b00      	cmp	r3, #0
    ebf4:	d000      	beq.n	ebf8 <_close_r+0x1c>
    ebf6:	602b      	str	r3, [r5, #0]
    ebf8:	bd70      	pop	{r4, r5, r6, pc}
    ebfa:	46c0      	nop			; (mov r8, r8)
    ebfc:	20002b70 	.word	0x20002b70

0000ec00 <_fstat_r>:
    ec00:	2300      	movs	r3, #0
    ec02:	b570      	push	{r4, r5, r6, lr}
    ec04:	4c06      	ldr	r4, [pc, #24]	; (ec20 <_fstat_r+0x20>)
    ec06:	0005      	movs	r5, r0
    ec08:	0008      	movs	r0, r1
    ec0a:	0011      	movs	r1, r2
    ec0c:	6023      	str	r3, [r4, #0]
    ec0e:	f7fe fe53 	bl	d8b8 <_fstat>
    ec12:	1c43      	adds	r3, r0, #1
    ec14:	d103      	bne.n	ec1e <_fstat_r+0x1e>
    ec16:	6823      	ldr	r3, [r4, #0]
    ec18:	2b00      	cmp	r3, #0
    ec1a:	d000      	beq.n	ec1e <_fstat_r+0x1e>
    ec1c:	602b      	str	r3, [r5, #0]
    ec1e:	bd70      	pop	{r4, r5, r6, pc}
    ec20:	20002b70 	.word	0x20002b70

0000ec24 <_isatty_r>:
    ec24:	2300      	movs	r3, #0
    ec26:	b570      	push	{r4, r5, r6, lr}
    ec28:	4c06      	ldr	r4, [pc, #24]	; (ec44 <_isatty_r+0x20>)
    ec2a:	0005      	movs	r5, r0
    ec2c:	0008      	movs	r0, r1
    ec2e:	6023      	str	r3, [r4, #0]
    ec30:	f7fe fe50 	bl	d8d4 <_isatty>
    ec34:	1c43      	adds	r3, r0, #1
    ec36:	d103      	bne.n	ec40 <_isatty_r+0x1c>
    ec38:	6823      	ldr	r3, [r4, #0]
    ec3a:	2b00      	cmp	r3, #0
    ec3c:	d000      	beq.n	ec40 <_isatty_r+0x1c>
    ec3e:	602b      	str	r3, [r5, #0]
    ec40:	bd70      	pop	{r4, r5, r6, pc}
    ec42:	46c0      	nop			; (mov r8, r8)
    ec44:	20002b70 	.word	0x20002b70

0000ec48 <_lseek_r>:
    ec48:	b570      	push	{r4, r5, r6, lr}
    ec4a:	0005      	movs	r5, r0
    ec4c:	0008      	movs	r0, r1
    ec4e:	0011      	movs	r1, r2
    ec50:	2200      	movs	r2, #0
    ec52:	4c06      	ldr	r4, [pc, #24]	; (ec6c <_lseek_r+0x24>)
    ec54:	6022      	str	r2, [r4, #0]
    ec56:	001a      	movs	r2, r3
    ec58:	f7fe fe45 	bl	d8e6 <_lseek>
    ec5c:	1c43      	adds	r3, r0, #1
    ec5e:	d103      	bne.n	ec68 <_lseek_r+0x20>
    ec60:	6823      	ldr	r3, [r4, #0]
    ec62:	2b00      	cmp	r3, #0
    ec64:	d000      	beq.n	ec68 <_lseek_r+0x20>
    ec66:	602b      	str	r3, [r5, #0]
    ec68:	bd70      	pop	{r4, r5, r6, pc}
    ec6a:	46c0      	nop			; (mov r8, r8)
    ec6c:	20002b70 	.word	0x20002b70

0000ec70 <memchr>:
    ec70:	b2c9      	uxtb	r1, r1
    ec72:	1882      	adds	r2, r0, r2
    ec74:	4290      	cmp	r0, r2
    ec76:	d101      	bne.n	ec7c <memchr+0xc>
    ec78:	2000      	movs	r0, #0
    ec7a:	4770      	bx	lr
    ec7c:	7803      	ldrb	r3, [r0, #0]
    ec7e:	428b      	cmp	r3, r1
    ec80:	d0fb      	beq.n	ec7a <memchr+0xa>
    ec82:	3001      	adds	r0, #1
    ec84:	e7f6      	b.n	ec74 <memchr+0x4>
	...

0000ec88 <_read_r>:
    ec88:	b570      	push	{r4, r5, r6, lr}
    ec8a:	0005      	movs	r5, r0
    ec8c:	0008      	movs	r0, r1
    ec8e:	0011      	movs	r1, r2
    ec90:	2200      	movs	r2, #0
    ec92:	4c06      	ldr	r4, [pc, #24]	; (ecac <_read_r+0x24>)
    ec94:	6022      	str	r2, [r4, #0]
    ec96:	001a      	movs	r2, r3
    ec98:	f7fe fd68 	bl	d76c <_read>
    ec9c:	1c43      	adds	r3, r0, #1
    ec9e:	d103      	bne.n	eca8 <_read_r+0x20>
    eca0:	6823      	ldr	r3, [r4, #0]
    eca2:	2b00      	cmp	r3, #0
    eca4:	d000      	beq.n	eca8 <_read_r+0x20>
    eca6:	602b      	str	r3, [r5, #0]
    eca8:	bd70      	pop	{r4, r5, r6, pc}
    ecaa:	46c0      	nop			; (mov r8, r8)
    ecac:	20002b70 	.word	0x20002b70
    ecb0:	20434441 	.word	0x20434441
    ecb4:	69726570 	.word	0x69726570
    ecb8:	72656870 	.word	0x72656870
    ecbc:	63206c61 	.word	0x63206c61
    ecc0:	69666e6f 	.word	0x69666e6f
    ecc4:	61662067 	.word	0x61662067
    ecc8:	64656c69 	.word	0x64656c69
    eccc:	00000a2e 	.word	0x00000a2e
    ecd0:	20434441 	.word	0x20434441
    ecd4:	74696e69 	.word	0x74696e69
    ecd8:	73657220 	.word	0x73657220
    ecdc:	66207465 	.word	0x66207465
    ece0:	656c6961 	.word	0x656c6961
    ece4:	000a2e64 	.word	0x000a2e64
    ece8:	20434441 	.word	0x20434441
    ecec:	74696e69 	.word	0x74696e69
    ecf0:	6c6e7520 	.word	0x6c6e7520
    ecf4:	206b636f 	.word	0x206b636f
    ecf8:	6c696166 	.word	0x6c696166
    ecfc:	0a2e6465 	.word	0x0a2e6465
    ed00:	00000000 	.word	0x00000000
    ed04:	20434441 	.word	0x20434441
    ed08:	74696e69 	.word	0x74696e69
    ed0c:	6e6f6320 	.word	0x6e6f6320
    ed10:	20676966 	.word	0x20676966
    ed14:	6c696166 	.word	0x6c696166
    ed18:	0a2e6465 	.word	0x0a2e6465
    ed1c:	00000000 	.word	0x00000000
    ed20:	20434441 	.word	0x20434441
    ed24:	74696e69 	.word	0x74696e69
    ed28:	6d617320 	.word	0x6d617320
    ed2c:	20656c70 	.word	0x20656c70
    ed30:	65746172 	.word	0x65746172
    ed34:	69616620 	.word	0x69616620
    ed38:	2e64656c 	.word	0x2e64656c
    ed3c:	0000000a 	.word	0x0000000a
    ed40:	20434441 	.word	0x20434441
    ed44:	74696e69 	.word	0x74696e69
    ed48:	6b617720 	.word	0x6b617720
    ed4c:	20707565 	.word	0x20707565
    ed50:	6c696166 	.word	0x6c696166
    ed54:	0a2e6465 	.word	0x0a2e6465
    ed58:	00000000 	.word	0x00000000
    ed5c:	20434441 	.word	0x20434441
    ed60:	74696e69 	.word	0x74696e69
    ed64:	636f6c20 	.word	0x636f6c20
    ed68:	6166206b 	.word	0x6166206b
    ed6c:	64656c69 	.word	0x64656c69
    ed70:	00000a2e 	.word	0x00000a2e
    ed74:	20434441 	.word	0x20434441
    ed78:	74696e69 	.word	0x74696e69
    ed7c:	75616620 	.word	0x75616620
    ed80:	6320746c 	.word	0x6320746c
    ed84:	6b636568 	.word	0x6b636568
    ed88:	69616620 	.word	0x69616620
    ed8c:	2e64656c 	.word	0x2e64656c
    ed90:	0000000a 	.word	0x0000000a
    ed94:	20434441 	.word	0x20434441
    ed98:	20736168 	.word	0x20736168
    ed9c:	6c756166 	.word	0x6c756166
    eda0:	61207374 	.word	0x61207374
    eda4:	72657466 	.word	0x72657466
    eda8:	696e6920 	.word	0x696e6920
    edac:	30203a74 	.word	0x30203a74
    edb0:	34302578 	.word	0x34302578
    edb4:	00000a78 	.word	0x00000a78
    edb8:	20434441 	.word	0x20434441
    edbc:	74696e69 	.word	0x74696e69
    edc0:	63757320 	.word	0x63757320
    edc4:	73736563 	.word	0x73736563
    edc8:	00000a2e 	.word	0x00000a2e

0000edcc <_tcc_intflag>:
    edcc:	00000001 00000002 00000004 00000008     ................
    eddc:	00001000 00002000 00004000 00008000     ..... ...@......
    edec:	00010000 00020000 00040000 00080000     ................
    edfc:	42002c00 42003000 42003400 001c1c1b     .,.B.0.B.4.B....
    ee0c:	10000800 00002000 64333025 00000000     ..... ..%03d....
    ee1c:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
    ee2c:	20434d4d 726f7473 20656761 20746f6e     MMC storage not 
    ee3c:	64616572 000d2e79 72617473 6f645f74     ready...start_do
    ee4c:	6f6c6e77 203a6461 462d6957 73692069     wnload: Wi-Fi is
    ee5c:	746f6e20 6e6f6320 7463656e 0d2e6465      not connected..
    ee6c:	00000000 72617473 6f645f74 6f6c6e77     ....start_downlo
    ee7c:	203a6461 75716572 20747365 73207369     ad: request is s
    ee8c:	20746e65 65726c61 2e796461 0000000d     ent already.....
    ee9c:	72617473 6f645f74 6f6c6e77 203a6461     start_download: 
    eeac:	6e6e7572 20676e69 6e776f64 64616f6c     running download
    eebc:	726c6120 79646165 00000d2e 72617473      already....star
    eecc:	6f645f74 6f6c6e77 203a6461 646e6573     t_download: send
    eedc:	20676e69 50545448 71657220 74736575     ing HTTP request
    eeec:	0d2e2e2e 00000000 70747468 772f2f3a     ........http://w
    eefc:	732e7777 2e736165 6e657075 64652e6e     ww.seas.upenn.ed
    ef0c:	707e2f75 61707261 2f6c6574 495f4453     u/~parpatel/SD_I
    ef1c:	4547414d 4e49422e 00000000 726f7473     MAGE.BIN....stor
    ef2c:	69665f65 705f656c 656b6361 65203a74     e_file_packet: e
    ef3c:	7974706d 74616420 000d2e61 726f7473     mpty data...stor
    ef4c:	69665f65 705f656c 656b6361 66203a74     e_file_packet: f
    ef5c:	20656c69 656d616e 20736920 61766e69     ile name is inva
    ef6c:	2e64696c 776f4420 616f6c6e 61632064     lid. Download ca
    ef7c:	6c65636e 0d2e6465 00000000 726f7473     nceled......stor
    ef8c:	69665f65 705f656c 656b6361 63203a74     e_file_packet: c
    ef9c:	74616572 20676e69 656c6966 73255b20     reating file [%s
    efac:	000a0d5d 726f7473 69665f65 705f656c     ]...store_file_p
    efbc:	656b6361 66203a74 20656c69 61657263     acket: file crea
    efcc:	6e6f6974 72726520 2021726f 3a746572     tion error! ret:
    efdc:	0a0d6425 00000000 726f7473 69665f65     %d......store_fi
    efec:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
    effc:	74697277 72652065 2c726f72 776f6420     write error, dow
    f00c:	616f6c6e 61632064 6c65636e 0d2e6465     nload canceled..
    f01c:	00000000 726f7473 69665f65 705f656c     ....store_file_p
    f02c:	656b6361 72203a74 69656365 5b646576     acket: received[
    f03c:	5d756c25 6966202c 7320656c 5b657a69     %lu], file size[
    f04c:	5d756c25 00000a0d 726f7473 69665f65     %lu]....store_fi
    f05c:	705f656c 656b6361 66203a74 20656c69     le_packet: file 
    f06c:	6e776f64 64616f6c 73206465 65636375     downloaded succe
    f07c:	75667373 2e796c6c 0000000d 70747468     ssfully.....http
    f08c:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
    f09c:	5448203a 63205054 6e65696c 6f732074     : HTTP client so
    f0ac:	74656b63 6e6f6320 7463656e 0d2e6465     cket connected..
    f0bc:	00000000 70747468 696c635f 5f746e65     ....http_client_
    f0cc:	6c6c6163 6b636162 6572203a 73657571     callback: reques
    f0dc:	6f632074 656c706d 2e646574 0000000d     t completed.....
    f0ec:	70747468 696c635f 5f746e65 6c6c6163     http_client_call
    f0fc:	6b636162 6572203a 76696563 72206465     back: received r
    f10c:	6f707365 2065736e 64207525 20617461     esponse %u data 
    f11c:	657a6973 0d752520 0000000a 70747468     size %u.....http
    f12c:	696c635f 5f746e65 6c6c6163 6b636162     _client_callback
    f13c:	6964203a 6e6f6373 7463656e 206e6f69     : disconnection 
    f14c:	73616572 253a6e6f 000a0d64 6f736572     reason:%d...reso
    f15c:	5f65766c 203a6263 49207325 64612050     lve_cb: %s IP ad
    f16c:	73657264 73692073 2e642520 252e6425     dress is %d.%d.%
    f17c:	64252e64 0a0d0a0d 00000000 69666977     d.%d........wifi
    f18c:	3a62635f 4d324d20 4649575f 4f435f49     _cb: M2M_WIFI_CO
    f19c:	43454e4e 0d444554 00000000 69666977     NNECTED.....wifi
    f1ac:	3a62635f 4d324d20 4649575f 49445f49     _cb: M2M_WIFI_DI
    f1bc:	4e4f4353 5443454e 000d4445 706f6f71     SCONNECTED..qoop
    f1cc:	706f6f71 00000000 6f707350 00000074     qoop....Pspot...
    f1dc:	69666977 3a62635f 20504920 72646461     wifi_cb: IP addr
    f1ec:	20737365 25207369 75252e75 2e75252e     ess is %u.%u.%u.
    f1fc:	0a0d7525 00000000 666e6f63 72756769     %u......configur
    f20c:	74685f65 635f7074 6e65696c 48203a74     e_http_client: H
    f21c:	20505454 65696c63 6920746e 6974696e     TTP client initi
    f22c:	7a696c61 6f697461 6166206e 64656c69     alization failed
    f23c:	72282021 25207365 0a0d2964 00000000     ! (res %d)......
    f24c:	74696e69 6f74735f 65676172 4453203a     init_storage: SD
    f25c:	72614320 6e692064 6c617473 6166206c      Card install fa
    f26c:	64656c69 00000d2e 74696e69 6f74735f     iled....init_sto
    f27c:	65676172 7274203a 6e752079 67756c70     rage: try unplug
    f28c:	646e6120 2d657220 67756c70 65687420      and re-plug the
    f29c:	72616320 000d2e64 74696e69 6f74735f      card...init_sto
    f2ac:	65676172 6f6d203a 69746e75 5320676e     rage: mounting S
    f2bc:	61632044 2e2e6472 00000d2e 74696e69     D card......init
    f2cc:	6f74735f 65676172 4453203a 72616320     _storage: SD car
    f2dc:	6f6d2064 20746e75 6c696166 20216465     d mount failed! 
    f2ec:	73657228 29642520 00000a0d 74696e69     (res %d)....init
    f2fc:	6f74735f 65676172 4453203a 72616320     _storage: SD car
    f30c:	6f6d2064 20746e75 0d2e4b4f 00000000     d mount OK......
    f31c:	20434441 20697073 74696e69 69616620     ADC spi init fai
    f32c:	0a64656c 00000000 25203a43 00000a64     led.....C: %d...
    f33c:	2e2e3231 0046452e 42000800 42000c00     12...EF....B...B
    f34c:	42001000 42001400 42001800 42001c00     ...B...B...B...B
    f35c:	0c0b0a09 00000e0d 01020300              ............

0000f368 <_usb_device_irq_bits>:
    f368:	00080004 00800070 01000001 00000200     ....p...........

0000f378 <_usb_endpoint_irq_bits>:
    f378:	60100c03                                ...`

0000f37c <_global_impure_ptr>:
    f37c:	20000124                                $.. 

0000f380 <__sf_fake_stderr>:
	...

0000f3a0 <__sf_fake_stdin>:
	...

0000f3c0 <__sf_fake_stdout>:
	...
    f3e0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    f3f0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    f400:	31300046 35343332 39383736 64636261     F.0123456789abcd
    f410:	00006665                                ef..

0000f414 <_init>:
    f414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f416:	46c0      	nop			; (mov r8, r8)
    f418:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f41a:	bc08      	pop	{r3}
    f41c:	469e      	mov	lr, r3
    f41e:	4770      	bx	lr

0000f420 <__init_array_start>:
    f420:	000000dd 	.word	0x000000dd

0000f424 <_fini>:
    f424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f426:	46c0      	nop			; (mov r8, r8)
    f428:	bcf8      	pop	{r3, r4, r5, r6, r7}
    f42a:	bc08      	pop	{r3}
    f42c:	469e      	mov	lr, r3
    f42e:	4770      	bx	lr

0000f430 <__fini_array_start>:
    f430:	000000b5 	.word	0x000000b5
